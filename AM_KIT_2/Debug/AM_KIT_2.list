
AM_KIT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08007838  08007838  00008838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007954  08007954  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007954  08007954  00008954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800795c  0800795c  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800795c  0800795c  0000895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007960  08007960  00008960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007964  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000900c  2**0
                  CONTENTS
 10 .bss          00000204  2000000c  2000000c  0000900c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0000900c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014371  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bf1  00000000  00000000  0001d3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  0001ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec2  00000000  00000000  00021298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234b1  00000000  00000000  0002215a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001795e  00000000  00000000  0004560b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e5c  00000000  00000000  0005cf69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012edc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005028  00000000  00000000  0012ee08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00133e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007820 	.word	0x08007820

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007820 	.word	0x08007820

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fd22 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f8ce 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa0a 	bl	80008f0 <MX_GPIO_Init>
  MX_TIM7_Init();
 80004dc:	f000 f954 	bl	8000788 <MX_TIM7_Init>
  MX_SDIO_SD_Init();
 80004e0:	f000 f932 	bl	8000748 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004e4:	f004 fcfe 	bl	8004ee4 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f984 	bl	80007f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f9ac 	bl	8000848 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 f9d4 	bl	800089c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // 타이머 인터럽트 모드로 시작 (TIM7은 이미 PSC/ARR로 1 kHz, 1 ms 인터럽트로 설정되어 있다고 가정)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80004f4:	4859      	ldr	r0, [pc, #356]	@ (800065c <main+0x194>)
 80004f6:	f002 fd51 	bl	8002f9c <HAL_TIM_Base_Start_IT>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <main+0x3c>
  {
    Error_Handler();
 8000500:	f000 faec 	bl	8000adc <Error_Handler>
  }

  // 1) 콜백 기반 수신을 시작 (1바이트)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 8000504:	2201      	movs	r2, #1
 8000506:	4956      	ldr	r1, [pc, #344]	@ (8000660 <main+0x198>)
 8000508:	4856      	ldr	r0, [pc, #344]	@ (8000664 <main+0x19c>)
 800050a:	f003 f88b 	bl	8003624 <HAL_UART_Receive_IT>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <main+0x50>
  {
    // 수신 시작 실패 처리
    Error_Handler();
 8000514:	f000 fae2 	bl	8000adc <Error_Handler>
  FIL SDFile;     // SD 카드 파일 핸들
  FRESULT fres;   // FATFS 함수 결과
  UINT bw, br;    // 바이트 쓰기/읽기 변수

  /* 1) SD 카드 마운트 (SDPath는 fatfs.c 에 extern으로 선언됨) */
  fres = f_mount(&SDFatFS, SDPath, 1);    // SDPath는 "0:"으로 설정되어 있어야 함
 8000518:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 800051c:	2201      	movs	r2, #1
 800051e:	4952      	ldr	r1, [pc, #328]	@ (8000668 <main+0x1a0>)
 8000520:	4618      	mov	r0, r3
 8000522:	f006 fb99 	bl	8006c58 <f_mount>
 8000526:	4603      	mov	r3, r0
 8000528:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 800052c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <main+0x70>
  {
    // 마운트 실패 처리
    Error_Handler();
 8000534:	f000 fad2 	bl	8000adc <Error_Handler>
  }

  /* 2) 새 파일 생성(덮어쓰기) */
  fres = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000538:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800053c:	220a      	movs	r2, #10
 800053e:	494b      	ldr	r1, [pc, #300]	@ (800066c <main+0x1a4>)
 8000540:	4618      	mov	r0, r3
 8000542:	f006 fbcf 	bl	8006ce4 <f_open>
 8000546:	4603      	mov	r3, r0
 8000548:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 800054c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <main+0x90>
  {
    // 파일 열기 실패 처리
    Error_Handler();
 8000554:	f000 fac2 	bl	8000adc <Error_Handler>
  }
   /* 3) 파일에 데이터 쓰기 */
  const char *data = "Hello, STM32 SD Card! \n test";
 8000558:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <main+0x1a8>)
 800055a:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
  fres = f_write(&SDFile, data, strlen(data), &bw);
 800055e:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 8000562:	f7ff fe31 	bl	80001c8 <strlen>
 8000566:	4602      	mov	r2, r0
 8000568:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800056c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000570:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	@ 0x4a8
 8000574:	f006 feaf 	bl	80072d6 <f_write>
 8000578:	4603      	mov	r3, r0
 800057a:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK || bw < strlen(data))
 800057e:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000582:	2b00      	cmp	r3, #0
 8000584:	d10b      	bne.n	800059e <main+0xd6>
 8000586:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 800058a:	f7ff fe1d 	bl	80001c8 <strlen>
 800058e:	4602      	mov	r2, r0
 8000590:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8000594:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	429a      	cmp	r2, r3
 800059c:	d906      	bls.n	80005ac <main+0xe4>
  {
    // 파일 쓰기 실패 처리
    f_close(&SDFile);
 800059e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005a2:	4618      	mov	r0, r3
 80005a4:	f007 f88a 	bl	80076bc <f_close>
    Error_Handler();
 80005a8:	f000 fa98 	bl	8000adc <Error_Handler>
  }
  /* 4) 파일 닫기 */
  fres = f_close(&SDFile);
 80005ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005b0:	4618      	mov	r0, r3
 80005b2:	f007 f883 	bl	80076bc <f_close>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80005bc:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <main+0x100>
  {
    // 파일 닫기 실패 처리
    Error_Handler();
 80005c4:	f000 fa8a 	bl	8000adc <Error_Handler>
  }
  /* 5) 파일 읽기 */
  fres = f_open(&SDFile, "test.txt", FA_READ);
 80005c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005cc:	2201      	movs	r2, #1
 80005ce:	4927      	ldr	r1, [pc, #156]	@ (800066c <main+0x1a4>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f006 fb87 	bl	8006ce4 <f_open>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80005dc:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x120>
  {
    // 파일 열기 실패 처리
    Error_Handler();
 80005e4:	f000 fa7a 	bl	8000adc <Error_Handler>
  }
  char readBuffer[64];    // 읽기 버퍼
  fres = f_read(&SDFile, readBuffer, sizeof(readBuffer) - 1, &br);
 80005e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005ec:	4639      	mov	r1, r7
 80005ee:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80005f2:	223f      	movs	r2, #63	@ 0x3f
 80005f4:	f006 fd30 	bl	8007058 <f_read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK || br == 0)
 80005fe:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000602:	2b00      	cmp	r3, #0
 8000604:	d106      	bne.n	8000614 <main+0x14c>
 8000606:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 800060a:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d106      	bne.n	8000622 <main+0x15a>
  {
     // 파일 읽기 실패 처리
    f_close(&SDFile);
 8000614:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000618:	4618      	mov	r0, r3
 800061a:	f007 f84f 	bl	80076bc <f_close>
    Error_Handler();
 800061e:	f000 fa5d 	bl	8000adc <Error_Handler>
  }
  readBuffer[br] = '\0'; // 문자열 종료
 8000622:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8000626:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8000630:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000634:	2100      	movs	r1, #0
 8000636:	54d1      	strb	r1, [r2, r3]
  /* 6) SD카드 언마운트*/
  fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8000638:	2201      	movs	r2, #1
 800063a:	490b      	ldr	r1, [pc, #44]	@ (8000668 <main+0x1a0>)
 800063c:	2000      	movs	r0, #0
 800063e:	f006 fb0b 	bl	8006c58 <f_mount>
 8000642:	4603      	mov	r3, r0
 8000644:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 8000648:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <main+0x18e>
  {
     // 언마운트 실패 처리
    Error_Handler();
 8000650:	f000 fa44 	bl	8000adc <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0x18e>
 800065a:	bf00      	nop
 800065c:	200000ac 	.word	0x200000ac
 8000660:	200001cc 	.word	0x200001cc
 8000664:	200000f4 	.word	0x200000f4
 8000668:	200001d8 	.word	0x200001d8
 800066c:	08007838 	.word	0x08007838
 8000670:	08007844 	.word	0x08007844

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	@ 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f007 f89f 	bl	80077c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e8:	23a8      	movs	r3, #168	@ 0xa8
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f817 	bl	800172c <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 f9ea 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2105      	movs	r1, #5
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fa78 	bl	8001c1c <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000732:	f000 f9d3 	bl	8000adc <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_SDIO_SD_Init+0x38>)
 800074e:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <MX_SDIO_SD_Init+0x3c>)
 8000750:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_SDIO_SD_Init+0x38>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_SDIO_SD_Init+0x38>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_SDIO_SD_Init+0x38>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_SDIO_SD_Init+0x38>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800076a:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <MX_SDIO_SD_Init+0x38>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <MX_SDIO_SD_Init+0x38>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]



  /* USER CODE END SDIO_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	20000028 	.word	0x20000028
 8000784:	40012c00 	.word	0x40012c00

08000788 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_TIM7_Init+0x64>)
 8000798:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <MX_TIM7_Init+0x68>)
 800079a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_TIM7_Init+0x64>)
 800079e:	2263      	movs	r2, #99	@ 0x63
 80007a0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_TIM7_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 80007a8:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_TIM7_Init+0x64>)
 80007aa:	f240 3247 	movw	r2, #839	@ 0x347
 80007ae:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_TIM7_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007b6:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_TIM7_Init+0x64>)
 80007b8:	f002 fba0 	bl	8002efc <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 f98b 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <MX_TIM7_Init+0x64>)
 80007d4:	f002 fe10 	bl	80033f8 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007de:	f000 f97d 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000ac 	.word	0x200000ac
 80007f0:	40001400 	.word	0x40001400

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_USART1_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800082c:	f002 fe74 	bl	8003518 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f951 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000f4 	.word	0x200000f4
 8000844:	40011000 	.word	0x40011000

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_USART2_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USART2_UART_Init+0x4c>)
 8000880:	f002 fe4a 	bl	8003518 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f927 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000013c 	.word	0x2000013c
 8000898:	40004400 	.word	0x40004400

0800089c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_USART3_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008d4:	f002 fe20 	bl	8003518 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f8fd 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000184 	.word	0x20000184
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <MX_GPIO_Init+0x128>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a42      	ldr	r2, [pc, #264]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b40      	ldr	r3, [pc, #256]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b3c      	ldr	r3, [pc, #240]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a18 <MX_GPIO_Init+0x128>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b39      	ldr	r3, [pc, #228]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b35      	ldr	r3, [pc, #212]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a34      	ldr	r2, [pc, #208]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b32      	ldr	r3, [pc, #200]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a2d      	ldr	r2, [pc, #180]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <MX_GPIO_Init+0x128>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <MX_GPIO_Init+0x128>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a26      	ldr	r2, [pc, #152]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_GPIO_Init+0x128>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a18 <MX_GPIO_Init+0x128>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_GPIO_Init+0x128>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|ESP_EN_Pin
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 4177 	mov.w	r1, #63232	@ 0xf700
 80009b4:	4819      	ldr	r0, [pc, #100]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 80009b6:	f000 fe85 	bl	80016c4 <HAL_GPIO_WritePin>
                          |USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin ESP_EN_Pin
                           USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|ESP_EN_Pin
 80009ba:	f44f 4377 	mov.w	r3, #63232	@ 0xf700
 80009be:	61fb      	str	r3, [r7, #28]
                          |USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 80009d4:	f000 fcda 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : M_PWR_KEY_Pin */
  GPIO_InitStruct.Pin = M_PWR_KEY_Pin;
 80009d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M_PWR_KEY_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 80009f0:	f000 fccc 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80009f4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80009f8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_GPIO_Init+0x130>)
 8000a0a:	f000 fcbf 	bl	800138c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	@ 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <HAL_TIM_PeriodElapsedCallback>:

/* tim 7 인터럽트 처리부 */
static uint16_t ms_tick_1 = 0;      // 1 ms마다 1씩 증가

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d111      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    ms_tick_1++;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a40:	801a      	strh	r2, [r3, #0]
    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a48:	d907      	bls.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x36>
    {
      ms_tick_1 = 0;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
      HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8000a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a56:	f000 fe4e 	bl	80016f6 <HAL_GPIO_TogglePin>
    }
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40001400 	.word	0x40001400
 8000a68:	200001ce 	.word	0x200001ce
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_UART_RxCpltCallback>:

/* uart 1 처리부 */
/* UART 수신 완료 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_UART_RxCpltCallback+0x48>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d115      	bne.n	8000aae <HAL_UART_RxCpltCallback+0x3e>
  {
    // 1) 에코: 받은 바이트를 바로 송신
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	490d      	ldr	r1, [pc, #52]	@ (8000abc <HAL_UART_RxCpltCallback+0x4c>)
 8000a86:	480e      	ldr	r0, [pc, #56]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x50>)
 8000a88:	f002 fd96 	bl	80035b8 <HAL_UART_Transmit_IT>

    // 수신했으면 LED 켜기
    HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x54>)
 8000a94:	f000 fe16 	bl	80016c4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a9e:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x54>)
 8000aa0:	f000 fe10 	bl	80016c4 <HAL_GPIO_WritePin>

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4905      	ldr	r1, [pc, #20]	@ (8000abc <HAL_UART_RxCpltCallback+0x4c>)
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x50>)
 8000aaa:	f002 fdbb 	bl	8003624 <HAL_UART_Receive_IT>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	200001cc 	.word	0x200001cc
 8000ac0:	200000f4 	.word	0x200000f4
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_UART_TxCpltCallback>:

/* UART 전송 완료 콜백 (필요 시) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  // 전송 완료 후 다른 처리가 필요하면 여기에…
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a28      	ldr	r2, [pc, #160]	@ (8000bf8 <HAL_SD_MspInit+0xc0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d14a      	bne.n	8000bf0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a26      	ldr	r2, [pc, #152]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a18      	ldr	r2, [pc, #96]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <HAL_SD_MspInit+0xc4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000bae:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <HAL_SD_MspInit+0xc8>)
 8000bcc:	f000 fbde 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000be0:	230c      	movs	r3, #12
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <HAL_SD_MspInit+0xcc>)
 8000bec:	f000 fbce 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40012c00 	.word	0x40012c00
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020c00 	.word	0x40020c00

08000c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_TIM_Base_MspInit+0x48>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d115      	bne.n	8000c46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <HAL_TIM_Base_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <HAL_TIM_Base_MspInit+0x4c>)
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_TIM_Base_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f003 0320 	and.w	r3, r3, #32
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2037      	movs	r0, #55	@ 0x37
 8000c3c:	f000 fadd 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c40:	2037      	movs	r0, #55	@ 0x37
 8000c42:	f000 faf6 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40001400 	.word	0x40001400
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a58      	ldr	r2, [pc, #352]	@ (8000dd8 <HAL_UART_MspInit+0x180>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d135      	bne.n	8000ce6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
 8000c7e:	4b57      	ldr	r3, [pc, #348]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a56      	ldr	r2, [pc, #344]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b54      	ldr	r3, [pc, #336]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	4b50      	ldr	r3, [pc, #320]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a4f      	ldr	r2, [pc, #316]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8000cb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4844      	ldr	r0, [pc, #272]	@ (8000de0 <HAL_UART_MspInit+0x188>)
 8000cd0:	f000 fb5c 	bl	800138c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2025      	movs	r0, #37	@ 0x25
 8000cda:	f000 fa8e 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cde:	2025      	movs	r0, #37	@ 0x25
 8000ce0:	f000 faa7 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce4:	e073      	b.n	8000dce <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a3e      	ldr	r2, [pc, #248]	@ (8000de4 <HAL_UART_MspInit+0x18c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d134      	bne.n	8000d5a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	4b39      	ldr	r3, [pc, #228]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	4a38      	ldr	r2, [pc, #224]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d00:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4827      	ldr	r0, [pc, #156]	@ (8000de0 <HAL_UART_MspInit+0x188>)
 8000d44:	f000 fb22 	bl	800138c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2026      	movs	r0, #38	@ 0x26
 8000d4e:	f000 fa54 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d52:	2026      	movs	r0, #38	@ 0x26
 8000d54:	f000 fa6d 	bl	8001232 <HAL_NVIC_EnableIRQ>
}
 8000d58:	e039      	b.n	8000dce <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a22      	ldr	r2, [pc, #136]	@ (8000de8 <HAL_UART_MspInit+0x190>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d134      	bne.n	8000dce <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_UART_MspInit+0x184>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8000d9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dae:	2307      	movs	r3, #7
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <HAL_UART_MspInit+0x194>)
 8000dba:	f000 fae7 	bl	800138c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2027      	movs	r0, #39	@ 0x27
 8000dc4:	f000 fa19 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dc8:	2027      	movs	r0, #39	@ 0x27
 8000dca:	f000 fa32 	bl	8001232 <HAL_NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3738      	adds	r7, #56	@ 0x38
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40004400 	.word	0x40004400
 8000de8:	40004800 	.word	0x40004800
 8000dec:	40020400 	.word	0x40020400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f8b9 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <USART1_IRQHandler+0x10>)
 8000e56:	f002 fc0b 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000f4 	.word	0x200000f4

08000e64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <USART2_IRQHandler+0x10>)
 8000e6a:	f002 fc01 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000013c 	.word	0x2000013c

08000e78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <USART3_IRQHandler+0x10>)
 8000e7e:	f002 fbf7 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000184 	.word	0x20000184

08000e8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <TIM7_IRQHandler+0x10>)
 8000e92:	f002 f8f3 	bl	800307c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000ac 	.word	0x200000ac

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000efc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec8:	f7ff ffea 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	@ (8000f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f006 fc71 	bl	80077d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fae7 	bl	80004c8 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f08:	08007964 	.word	0x08007964
  ldr r2, =_sbss
 8000f0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f10:	20000210 	.word	0x20000210

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f94f 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fdcc 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f967 	bl	800124e <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f92f 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	200001d0 	.word	0x200001d0

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200001d0 	.word	0x200001d0

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	@ (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	@ (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	@ 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff29 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff3e 	bl	800108c <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff31 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa2 	bl	80011a0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff feb6 	bl	8000fe4 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2280      	movs	r2, #128	@ 0x80
 800128a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e052      	b.n	800133e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0216 	bic.w	r2, r2, #22
 80012a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d103      	bne.n	80012c8 <HAL_DMA_Abort+0x62>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0208 	bic.w	r2, r2, #8
 80012d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e8:	e013      	b.n	8001312 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ea:	f7ff fe7b 	bl	8000fe4 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d90c      	bls.n	8001312 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2220      	movs	r2, #32
 80012fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2203      	movs	r2, #3
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e015      	b.n	800133e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e4      	bne.n	80012ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001324:	223f      	movs	r2, #63	@ 0x3f
 8001326:	409a      	lsls	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d004      	beq.n	8001364 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2280      	movs	r2, #128	@ 0x80
 800135e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e00c      	b.n	800137e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2205      	movs	r2, #5
 8001368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e16b      	b.n	8001680 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 815a 	bne.w	800167a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80b4 	beq.w	800167a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b60      	ldr	r3, [pc, #384]	@ (8001698 <HAL_GPIO_Init+0x30c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	4a5f      	ldr	r2, [pc, #380]	@ (8001698 <HAL_GPIO_Init+0x30c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001520:	6453      	str	r3, [r2, #68]	@ 0x44
 8001522:	4b5d      	ldr	r3, [pc, #372]	@ (8001698 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a5b      	ldr	r2, [pc, #364]	@ (800169c <HAL_GPIO_Init+0x310>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a52      	ldr	r2, [pc, #328]	@ (80016a0 <HAL_GPIO_Init+0x314>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a51      	ldr	r2, [pc, #324]	@ (80016a4 <HAL_GPIO_Init+0x318>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a50      	ldr	r2, [pc, #320]	@ (80016a8 <HAL_GPIO_Init+0x31c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4f      	ldr	r2, [pc, #316]	@ (80016ac <HAL_GPIO_Init+0x320>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4e      	ldr	r2, [pc, #312]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4d      	ldr	r2, [pc, #308]	@ (80016b4 <HAL_GPIO_Init+0x328>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x212>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4c      	ldr	r2, [pc, #304]	@ (80016b8 <HAL_GPIO_Init+0x32c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4b      	ldr	r2, [pc, #300]	@ (80016bc <HAL_GPIO_Init+0x330>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x20a>
 8001592:	2307      	movs	r3, #7
 8001594:	e00e      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 8001596:	2308      	movs	r3, #8
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159a:	2306      	movs	r3, #6
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	@ (800169c <HAL_GPIO_Init+0x310>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a32      	ldr	r2, [pc, #200]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a27      	ldr	r2, [pc, #156]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1d      	ldr	r2, [pc, #116]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f ae90 	bls.w	80013a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40021c00 	.word	0x40021c00
 80016c0:	40013c00 	.word	0x40013c00

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e0:	e003      	b.n	80016ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	619a      	str	r2, [r3, #24]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001708:	887a      	ldrh	r2, [r7, #2]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	041a      	lsls	r2, r3, #16
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43d9      	mvns	r1, r3
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	400b      	ands	r3, r1
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	619a      	str	r2, [r3, #24]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e267      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d075      	beq.n	8001836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800174a:	4b88      	ldr	r3, [pc, #544]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b04      	cmp	r3, #4
 8001754:	d00c      	beq.n	8001770 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b85      	ldr	r3, [pc, #532]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800175e:	2b08      	cmp	r3, #8
 8001760:	d112      	bne.n	8001788 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001762:	4b82      	ldr	r3, [pc, #520]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800176e:	d10b      	bne.n	8001788 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	4b7e      	ldr	r3, [pc, #504]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d05b      	beq.n	8001834 <HAL_RCC_OscConfig+0x108>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d157      	bne.n	8001834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e242      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001790:	d106      	bne.n	80017a0 <HAL_RCC_OscConfig+0x74>
 8001792:	4b76      	ldr	r3, [pc, #472]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a75      	ldr	r2, [pc, #468]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xb0>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x98>
 80017aa:	4b70      	ldr	r3, [pc, #448]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6f      	ldr	r2, [pc, #444]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6d      	ldr	r3, [pc, #436]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6c      	ldr	r2, [pc, #432]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xb0>
 80017c4:	4b69      	ldr	r3, [pc, #420]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a68      	ldr	r2, [pc, #416]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b66      	ldr	r3, [pc, #408]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a65      	ldr	r2, [pc, #404]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fbfe 	bl	8000fe4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fbfa 	bl	8000fe4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	@ 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e207      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b5b      	ldr	r3, [pc, #364]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xc0>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fbea 	bl	8000fe4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fbe6 	bl	8000fe4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1f3      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b51      	ldr	r3, [pc, #324]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0xe8>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001842:	4b4a      	ldr	r3, [pc, #296]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185a:	4b44      	ldr	r3, [pc, #272]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x152>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e1c7      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4937      	ldr	r1, [pc, #220]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e03a      	b.n	800190a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <HAL_RCC_OscConfig+0x244>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb9f 	bl	8000fe4 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fb9b 	bl	8000fe4 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1a8      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b28      	ldr	r3, [pc, #160]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4925      	ldr	r1, [pc, #148]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <HAL_RCC_OscConfig+0x244>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb7e 	bl	8000fe4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb7a 	bl	8000fe4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e187      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d036      	beq.n	8001984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d016      	beq.n	800194c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_RCC_OscConfig+0x248>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fb5e 	bl	8000fe4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fb5a 	bl	8000fe4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e167      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_OscConfig+0x240>)
 8001940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x200>
 800194a:	e01b      	b.n	8001984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_OscConfig+0x248>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7ff fb47 	bl	8000fe4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	e00e      	b.n	8001978 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195a:	f7ff fb43 	bl	8000fe4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d907      	bls.n	8001978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e150      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
 800196c:	40023800 	.word	0x40023800
 8001970:	42470000 	.word	0x42470000
 8001974:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	4b88      	ldr	r3, [pc, #544]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 800197a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ea      	bne.n	800195a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8097 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b81      	ldr	r3, [pc, #516]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10f      	bne.n	80019c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	4b7d      	ldr	r3, [pc, #500]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a7c      	ldr	r2, [pc, #496]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b7a      	ldr	r3, [pc, #488]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019be:	2301      	movs	r3, #1
 80019c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b77      	ldr	r3, [pc, #476]	@ (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	4b74      	ldr	r3, [pc, #464]	@ (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a73      	ldr	r2, [pc, #460]	@ (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019da:	f7ff fb03 	bl	8000fe4 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff faff 	bl	8000fe4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e10c      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2ea>
 8001a08:	4b64      	ldr	r3, [pc, #400]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0c:	4a63      	ldr	r2, [pc, #396]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a14:	e01c      	b.n	8001a50 <HAL_RCC_OscConfig+0x324>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x30c>
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	4a5e      	ldr	r2, [pc, #376]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0x324>
 8001a38:	4b58      	ldr	r3, [pc, #352]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a57      	ldr	r2, [pc, #348]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	4b55      	ldr	r3, [pc, #340]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a54      	ldr	r2, [pc, #336]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d015      	beq.n	8001a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff fac4 	bl	8000fe4 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff fac0 	bl	8000fe4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0cb      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	4b49      	ldr	r3, [pc, #292]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ee      	beq.n	8001a60 <HAL_RCC_OscConfig+0x334>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff faae 	bl	8000fe4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff faaa 	bl	8000fe4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0b5      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ee      	bne.n	8001a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab4:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	4a38      	ldr	r2, [pc, #224]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80a1 	beq.w	8001c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d05c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d141      	bne.n	8001b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <HAL_RCC_OscConfig+0x478>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fa7e 	bl	8000fe4 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff fa7a 	bl	8000fe4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e087      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	3b01      	subs	r3, #1
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	491b      	ldr	r1, [pc, #108]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <HAL_RCC_OscConfig+0x478>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fa53 	bl	8000fe4 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fa4f 	bl	8000fe4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e05c      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x416>
 8001b60:	e054      	b.n	8001c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_RCC_OscConfig+0x478>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fa3c 	bl	8000fe4 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff fa38 	bl	8000fe4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e045      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x444>
 8001b8e:	e03d      	b.n	8001c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e038      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x4ec>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d028      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d121      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d11a      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d111      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cc      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b68      	ldr	r3, [pc, #416]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d90c      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b65      	ldr	r3, [pc, #404]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b63      	ldr	r3, [pc, #396]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0b8      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c70:	4b59      	ldr	r3, [pc, #356]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a58      	ldr	r2, [pc, #352]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c88:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b50      	ldr	r3, [pc, #320]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	494d      	ldr	r1, [pc, #308]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d044      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b47      	ldr	r3, [pc, #284]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d119      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e067      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	4b37      	ldr	r3, [pc, #220]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f023 0203 	bic.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4934      	ldr	r1, [pc, #208]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d0c:	f7ff f96a 	bl	8000fe4 <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f7ff f966 	bl	8000fe4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e04f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 020c 	and.w	r2, r3, #12
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1eb      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d20c      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e032      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4916      	ldr	r1, [pc, #88]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	490e      	ldr	r1, [pc, #56]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da2:	f000 f821 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	490a      	ldr	r1, [pc, #40]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	4a09      	ldr	r2, [pc, #36]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f8ca 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	080078a8 	.word	0x080078a8
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b090      	sub	sp, #64	@ 0x40
 8001dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e00:	4b59      	ldr	r3, [pc, #356]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d00d      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	f200 80a1 	bhi.w	8001f54 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x34>
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e1a:	e09b      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e1c:	4b53      	ldr	r3, [pc, #332]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e20:	e09b      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e22:	4b53      	ldr	r3, [pc, #332]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e26:	e098      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e28:	4b4f      	ldr	r3, [pc, #316]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e32:	4b4d      	ldr	r3, [pc, #308]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d028      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	2200      	movs	r2, #0
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e50:	2100      	movs	r1, #0
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e54:	fb03 f201 	mul.w	r2, r3, r1
 8001e58:	2300      	movs	r3, #0
 8001e5a:	fb00 f303 	mul.w	r3, r0, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a43      	ldr	r2, [pc, #268]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e62:	fba0 1202 	umull	r1, r2, r0, r2
 8001e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e68:	460a      	mov	r2, r1
 8001e6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e6e:	4413      	add	r3, r2
 8001e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e74:	2200      	movs	r2, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	61fa      	str	r2, [r7, #28]
 8001e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e82:	f7fe f9a9 	bl	80001d8 <__aeabi_uldivmod>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e8e:	e053      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e90:	4b35      	ldr	r3, [pc, #212]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	2200      	movs	r2, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	617a      	str	r2, [r7, #20]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ea2:	f04f 0b00 	mov.w	fp, #0
 8001ea6:	4652      	mov	r2, sl
 8001ea8:	465b      	mov	r3, fp
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	0159      	lsls	r1, r3, #5
 8001eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb8:	0150      	lsls	r0, r2, #5
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	ebb2 080a 	subs.w	r8, r2, sl
 8001ec2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ed2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ed6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eda:	ebb2 0408 	subs.w	r4, r2, r8
 8001ede:	eb63 0509 	sbc.w	r5, r3, r9
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	00eb      	lsls	r3, r5, #3
 8001eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ef0:	00e2      	lsls	r2, r4, #3
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	eb14 030a 	adds.w	r3, r4, sl
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	eb45 030b 	adc.w	r3, r5, fp
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f0e:	4629      	mov	r1, r5
 8001f10:	028b      	lsls	r3, r1, #10
 8001f12:	4621      	mov	r1, r4
 8001f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f18:	4621      	mov	r1, r4
 8001f1a:	028a      	lsls	r2, r1, #10
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f22:	2200      	movs	r2, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f2c:	f7fe f954 	bl	80001d8 <__aeabi_uldivmod>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4613      	mov	r3, r2
 8001f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	3301      	adds	r3, #1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f52:	e002      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3740      	adds	r7, #64	@ 0x40
 8001f60:	46bd      	mov	sp, r7
 8001f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	017d7840 	.word	0x017d7840

08001f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a9b      	lsrs	r3, r3, #10
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	@ (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	080078b8 	.word	0x080078b8

08001fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb8:	f7ff ffdc 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0b5b      	lsrs	r3, r3, #13
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	080078b8 	.word	0x080078b8

08001fdc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e022      	b.n	8002034 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe fd99 	bl	8000b38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f814 	bl	800203c <HAL_SD_InitCard>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00a      	b.n	8002034 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b08e      	sub	sp, #56	@ 0x38
 8002040:	af04      	add	r7, sp, #16
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002058:	2376      	movs	r3, #118	@ 0x76
 800205a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681d      	ldr	r5, [r3, #0]
 8002060:	466c      	mov	r4, sp
 8002062:	f107 0318 	add.w	r3, r7, #24
 8002066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800206a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	4628      	mov	r0, r5
 8002076:	f002 fa03 	bl	8004480 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800207a:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_SD_InitCard+0xe8>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f002 fa44 	bl	8004512 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800208a:	4b26      	ldr	r3, [pc, #152]	@ (8002124 <HAL_SD_InitCard+0xe8>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002090:	2002      	movs	r0, #2
 8002092:	f7fe ffb3 	bl	8000ffc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fe7a 	bl	8002d90 <SD_PowerON>
 800209c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e02e      	b.n	800211a <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fd99 	bl	8002bf4 <SD_InitCard>
 80020c2:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e01b      	b.n	800211a <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 faa3 	bl	8004636 <SDMMC_CmdBlockLength>
 80020f0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00f      	beq.n	8002118 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <HAL_SD_InitCard+0xec>)
 80020fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3728      	adds	r7, #40	@ 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bdb0      	pop	{r4, r5, r7, pc}
 8002122:	bf00      	nop
 8002124:	422580a0 	.word	0x422580a0
 8002128:	004005ff 	.word	0x004005ff

0800212c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b092      	sub	sp, #72	@ 0x48
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7fe ff53 	bl	8000fe4 <HAL_GetTick>
 800213e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002152:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1c5      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	f040 81b8 	bne.w	80024dc <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002172:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	429a      	cmp	r2, r3
 800217e:	d907      	bls.n	8002190 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e1ac      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2203      	movs	r2, #3
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d002      	beq.n	80021ae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80021a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80021ba:	2390      	movs	r3, #144	@ 0x90
 80021bc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80021be:	2302      	movs	r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f107 0214 	add.w	r2, r7, #20
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fa02 	bl	80045de <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d90a      	bls.n	80021f6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2202      	movs	r2, #2
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021ec:	4618      	mov	r0, r3
 80021ee:	f002 fa66 	bl	80046be <SDMMC_CmdReadMultiBlock>
 80021f2:	6478      	str	r0, [r7, #68]	@ 0x44
 80021f4:	e009      	b.n	800220a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002202:	4618      	mov	r0, r3
 8002204:	f002 fa39 	bl	800467a <SDMMC_CmdReadSingleBlock>
 8002208:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800220a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a7e      	ldr	r2, [pc, #504]	@ (8002410 <HAL_SD_ReadBlocks+0x2e4>)
 8002216:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800221c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221e:	431a      	orrs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e159      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800223a:	e061      	b.n	8002300 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03c      	beq.n	80022c4 <HAL_SD_ReadBlocks+0x198>
 800224a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d039      	beq.n	80022c4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
 8002254:	e033      	b.n	80022be <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 f93b 	bl	80044d6 <SDIO_ReadFIFO>
 8002260:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	b2da      	uxtb	r2, r3
 8002266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002268:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226c:	3301      	adds	r3, #1
 800226e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002272:	3b01      	subs	r3, #1
 8002274:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b2da      	uxtb	r2, r3
 800227c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002282:	3301      	adds	r3, #1
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002288:	3b01      	subs	r3, #1
 800228a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800228c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2da      	uxtb	r2, r3
 8002292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002294:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002298:	3301      	adds	r3, #1
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800229c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229e:	3b01      	subs	r3, #1
 80022a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80022a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a4:	0e1b      	lsrs	r3, r3, #24
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ae:	3301      	adds	r3, #1
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80022b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b4:	3b01      	subs	r3, #1
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80022b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ba:	3301      	adds	r3, #1
 80022bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80022be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c0:	2b07      	cmp	r3, #7
 80022c2:	d9c8      	bls.n	8002256 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80022c4:	f7fe fe8e 	bl	8000fe4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d902      	bls.n	80022da <HAL_SD_ReadBlocks+0x1ae>
 80022d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d112      	bne.n	8002300 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a4c      	ldr	r2, [pc, #304]	@ (8002410 <HAL_SD_ReadBlocks+0x2e4>)
 80022e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0f4      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002306:	f240 332a 	movw	r3, #810	@ 0x32a
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d095      	beq.n	800223c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d022      	beq.n	8002364 <HAL_SD_ReadBlocks+0x238>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d91f      	bls.n	8002364 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002328:	2b03      	cmp	r3, #3
 800232a:	d01b      	beq.n	8002364 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f002 fa2b 	bl	800478c <SDMMC_CmdStopTransfer>
 8002336:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <HAL_SD_ReadBlocks+0x2e4>)
 8002344:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800234a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800234c:	431a      	orrs	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0c2      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_SD_ReadBlocks+0x254>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a22      	ldr	r2, [pc, #136]	@ (8002410 <HAL_SD_ReadBlocks+0x2e4>)
 8002386:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	f043 0208 	orr.w	r2, r3, #8
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0a1      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a15      	ldr	r2, [pc, #84]	@ (8002410 <HAL_SD_ReadBlocks+0x2e4>)
 80023ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c0:	f043 0202 	orr.w	r2, r3, #2
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e087      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d064      	beq.n	80024b2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a08      	ldr	r2, [pc, #32]	@ (8002410 <HAL_SD_ReadBlocks+0x2e4>)
 80023ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06d      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
 800240e:	bf00      	nop
 8002410:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f002 f85c 	bl	80044d6 <SDIO_ReadFIFO>
 800241e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002422:	b2da      	uxtb	r2, r3
 8002424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002426:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800242a:	3301      	adds	r3, #1
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800242e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002430:	3b01      	subs	r3, #1
 8002432:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b2da      	uxtb	r2, r3
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800243e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002440:	3301      	adds	r3, #1
 8002442:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002446:	3b01      	subs	r3, #1
 8002448:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	b2da      	uxtb	r2, r3
 8002450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002452:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002456:	3301      	adds	r3, #1
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800245a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800245c:	3b01      	subs	r3, #1
 800245e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002462:	0e1b      	lsrs	r3, r3, #24
 8002464:	b2da      	uxtb	r2, r3
 8002466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002468:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800246a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246c:	3301      	adds	r3, #1
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002472:	3b01      	subs	r3, #1
 8002474:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002476:	f7fe fdb5 	bl	8000fe4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002482:	429a      	cmp	r2, r3
 8002484:	d902      	bls.n	800248c <HAL_SD_ReadBlocks+0x360>
 8002486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002488:	2b00      	cmp	r3, #0
 800248a:	d112      	bne.n	80024b2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_SD_ReadBlocks+0x3c8>)
 8002492:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002498:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e01b      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_SD_ReadBlocks+0x39a>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1a6      	bne.n	8002414 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f240 523a 	movw	r2, #1338	@ 0x53a
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e006      	b.n	80024ea <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3748      	adds	r7, #72	@ 0x48
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	004005ff 	.word	0x004005ff

080024f8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b092      	sub	sp, #72	@ 0x48
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002506:	f7fe fd6d 	bl	8000fe4 <HAL_GetTick>
 800250a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e16d      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	f040 8160 	bne.w	80027f8 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800253e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	429a      	cmp	r2, r3
 800254a:	d907      	bls.n	800255c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e154      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2203      	movs	r2, #3
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	2b01      	cmp	r3, #1
 8002572:	d002      	beq.n	800257a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002576:	025b      	lsls	r3, r3, #9
 8002578:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	025b      	lsls	r3, r3, #9
 8002584:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002586:	2390      	movs	r3, #144	@ 0x90
 8002588:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002592:	2301      	movs	r3, #1
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f107 0218 	add.w	r2, r7, #24
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 f81c 	bl	80045de <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d90a      	bls.n	80025c2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 f8c4 	bl	8004746 <SDMMC_CmdWriteMultiBlock>
 80025be:	6478      	str	r0, [r7, #68]	@ 0x44
 80025c0:	e009      	b.n	80025d6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2210      	movs	r2, #16
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 f897 	bl	8004702 <SDMMC_CmdWriteSingleBlock>
 80025d4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80025d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a8b      	ldr	r2, [pc, #556]	@ (8002810 <HAL_SD_WriteBlocks+0x318>)
 80025e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e101      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002606:	e065      	b.n	80026d4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d040      	beq.n	8002698 <HAL_SD_WriteBlocks+0x1a0>
 8002616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03d      	beq.n	8002698 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800261c:	2300      	movs	r3, #0
 800261e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002620:	e037      	b.n	8002692 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262a:	3301      	adds	r3, #1
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800262e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002630:	3b01      	subs	r3, #1
 8002632:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	021a      	lsls	r2, r3, #8
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	3301      	adds	r3, #1
 8002644:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002648:	3b01      	subs	r3, #1
 800264a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800264c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265a:	3301      	adds	r3, #1
 800265c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800265e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002660:	3b01      	subs	r3, #1
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	061a      	lsls	r2, r3, #24
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002672:	3301      	adds	r3, #1
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002678:	3b01      	subs	r3, #1
 800267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f107 0214 	add.w	r2, r7, #20
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f001 ff32 	bl	80044f0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800268c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800268e:	3301      	adds	r3, #1
 8002690:	643b      	str	r3, [r7, #64]	@ 0x40
 8002692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002694:	2b07      	cmp	r3, #7
 8002696:	d9c4      	bls.n	8002622 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002698:	f7fe fca4 	bl	8000fe4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d902      	bls.n	80026ae <HAL_SD_WriteBlocks+0x1b6>
 80026a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d112      	bne.n	80026d4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a57      	ldr	r2, [pc, #348]	@ (8002810 <HAL_SD_WriteBlocks+0x318>)
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026bc:	431a      	orrs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e098      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026da:	f240 331a 	movw	r3, #794	@ 0x31a
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d091      	beq.n	8002608 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d022      	beq.n	8002738 <HAL_SD_WriteBlocks+0x240>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d91f      	bls.n	8002738 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d01b      	beq.n	8002738 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 f841 	bl	800478c <SDMMC_CmdStopTransfer>
 800270a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800270c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3e      	ldr	r2, [pc, #248]	@ (8002810 <HAL_SD_WriteBlocks+0x318>)
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800271e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002720:	431a      	orrs	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e066      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_SD_WriteBlocks+0x25c>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2d      	ldr	r2, [pc, #180]	@ (8002810 <HAL_SD_WriteBlocks+0x318>)
 800275a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	f043 0208 	orr.w	r2, r3, #8
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e045      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a20      	ldr	r2, [pc, #128]	@ (8002810 <HAL_SD_WriteBlocks+0x318>)
 800278e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002794:	f043 0202 	orr.w	r2, r3, #2
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e02b      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a13      	ldr	r2, [pc, #76]	@ (8002810 <HAL_SD_WriteBlocks+0x318>)
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e011      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e006      	b.n	8002806 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3748      	adds	r7, #72	@ 0x48
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	004005ff 	.word	0x004005ff

08002814 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002822:	0f9b      	lsrs	r3, r3, #30
 8002824:	b2da      	uxtb	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	b2da      	uxtb	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002840:	0e1b      	lsrs	r3, r3, #24
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	b2da      	uxtb	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002852:	0c1b      	lsrs	r3, r3, #16
 8002854:	b2da      	uxtb	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	b2da      	uxtb	r2, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800286a:	b2da      	uxtb	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002874:	0d1b      	lsrs	r3, r3, #20
 8002876:	b29a      	uxth	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	b2da      	uxtb	r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002892:	0bdb      	lsrs	r3, r3, #15
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028a4:	0b9b      	lsrs	r3, r3, #14
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b6:	0b5b      	lsrs	r3, r3, #13
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028c8:	0b1b      	lsrs	r3, r3, #12
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d163      	bne.n	80029ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80028f4:	0f92      	lsrs	r2, r2, #30
 80028f6:	431a      	orrs	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002900:	0edb      	lsrs	r3, r3, #27
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	b2da      	uxtb	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002912:	0e1b      	lsrs	r3, r3, #24
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	b2da      	uxtb	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002924:	0d5b      	lsrs	r3, r3, #21
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	b2da      	uxtb	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	b2da      	uxtb	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002948:	0bdb      	lsrs	r3, r3, #15
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	b2da      	uxtb	r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	7e1b      	ldrb	r3, [r3, #24]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	3302      	adds	r3, #2
 800296c:	2201      	movs	r2, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002976:	fb03 f202 	mul.w	r2, r3, r2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	7a1b      	ldrb	r3, [r3, #8]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002998:	0a52      	lsrs	r2, r2, #9
 800299a:	fb03 f202 	mul.w	r2, r3, r2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80029aa:	e031      	b.n	8002a10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d11d      	bne.n	80029f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	3301      	adds	r3, #1
 80029d0:	029a      	lsls	r2, r3, #10
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80029ee:	e00f      	b.n	8002a10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a58      	ldr	r2, [pc, #352]	@ (8002b58 <HAL_SD_GetCardCSD+0x344>)
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e09d      	b.n	8002b4c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a14:	0b9b      	lsrs	r3, r3, #14
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a26:	09db      	lsrs	r3, r3, #7
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	0fdb      	lsrs	r3, r3, #31
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a54:	0f5b      	lsrs	r3, r3, #29
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	0d9b      	lsrs	r3, r3, #22
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8a:	0d5b      	lsrs	r3, r3, #21
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	0bdb      	lsrs	r3, r3, #15
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ace:	0b9b      	lsrs	r3, r3, #14
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	0b1b      	lsrs	r3, r3, #12
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	004005ff 	.word	0x004005ff

08002b5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f970 	bl	8002eac <SD_SendStatus>
 8002bcc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	0a5b      	lsrs	r3, r3, #9
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002bea:	693b      	ldr	r3, [r7, #16]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b094      	sub	sp, #80	@ 0x50
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fc92 	bl	800452e <SDIO_GetPowerState>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c10:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c14:	e0b8      	b.n	8002d88 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d02f      	beq.n	8002c7e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 fe79 	bl	800491a <SDMMC_CmdSendCID>
 8002c28:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <SD_InitCard+0x40>
    {
      return errorstate;
 8002c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c32:	e0a9      	b.n	8002d88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fcbc 	bl	80045b8 <SDIO_GetResponse>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 fcb3 	bl	80045b8 <SDIO_GetResponse>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2108      	movs	r1, #8
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fcaa 	bl	80045b8 <SDIO_GetResponse>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	210c      	movs	r1, #12
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 fca1 	bl	80045b8 <SDIO_GetResponse>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d00d      	beq.n	8002ca2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f107 020e 	add.w	r2, r7, #14
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 fe7f 	bl	8004994 <SDMMC_CmdSetRelAdd>
 8002c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <SD_InitCard+0xae>
    {
      return errorstate;
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca0:	e072      	b.n	8002d88 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d036      	beq.n	8002d18 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	f001 fe49 	bl	8004956 <SDMMC_CmdSendCSD>
 8002cc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cce:	e05b      	b.n	8002d88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fc6e 	bl	80045b8 <SDIO_GetResponse>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fc65 	bl	80045b8 <SDIO_GetResponse>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 fc5c 	bl	80045b8 <SDIO_GetResponse>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	210c      	movs	r1, #12
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fc53 	bl	80045b8 <SDIO_GetResponse>
 8002d12:	4602      	mov	r2, r0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fc4a 	bl	80045b8 <SDIO_GetResponse>
 8002d24:	4603      	mov	r3, r0
 8002d26:	0d1a      	lsrs	r2, r3, #20
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fd6e 	bl	8002814 <HAL_SD_GetCardCSD>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002d42:	e021      	b.n	8002d88 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	2200      	movs	r2, #0
 8002d50:	461c      	mov	r4, r3
 8002d52:	4615      	mov	r5, r2
 8002d54:	4622      	mov	r2, r4
 8002d56:	462b      	mov	r3, r5
 8002d58:	4608      	mov	r0, r1
 8002d5a:	f001 fd39 	bl	80047d0 <SDMMC_CmdSelDesel>
 8002d5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <SD_InitCard+0x176>
  {
    return errorstate;
 8002d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d68:	e00e      	b.n	8002d88 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681d      	ldr	r5, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	466c      	mov	r4, sp
 8002d72:	f103 0210 	add.w	r2, r3, #16
 8002d76:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d80:	4628      	mov	r0, r5
 8002d82:	f001 fb7d 	bl	8004480 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3740      	adds	r7, #64	@ 0x40
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bdb0      	pop	{r4, r5, r7, pc}

08002d90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fd34 	bl	8004816 <SDMMC_CmdGoIdleState>
 8002dae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <SD_PowerON+0x2a>
  {
    return errorstate;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	e072      	b.n	8002ea0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 fd47 	bl	8004852 <SDMMC_CmdOperCond>
 8002dc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fd1d 	bl	8004816 <SDMMC_CmdGoIdleState>
 8002ddc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <SD_PowerON+0x5e>
    {
      return errorstate;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	e05b      	b.n	8002ea0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d137      	bne.n	8002e66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fd47 	bl	8004890 <SDMMC_CmdAppCommand>
 8002e02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d02d      	beq.n	8002e66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e0a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002e0e:	e047      	b.n	8002ea0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fd3a 	bl	8004890 <SDMMC_CmdAppCommand>
 8002e1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <SD_PowerON+0x98>
    {
      return errorstate;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	e03b      	b.n	8002ea0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	491e      	ldr	r1, [pc, #120]	@ (8002ea8 <SD_PowerON+0x118>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 fd50 	bl	80048d4 <SDMMC_CmdAppOperCommand>
 8002e34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e3c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002e40:	e02e      	b.n	8002ea0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 fbb5 	bl	80045b8 <SDIO_GetResponse>
 8002e4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	0fdb      	lsrs	r3, r3, #31
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <SD_PowerON+0xcc>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <SD_PowerON+0xce>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]

    count++;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d802      	bhi.n	8002e76 <SD_PowerON+0xe6>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0cc      	beq.n	8002e10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d902      	bls.n	8002e86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002e80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e84:	e00c      	b.n	8002ea0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e96:	e002      	b.n	8002e9e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	c1100000 	.word	0xc1100000

08002eac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002ebc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ec0:	e018      	b.n	8002ef4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f001 fd81 	bl	80049d6 <SDMMC_CmdSendStatus>
 8002ed4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	e009      	b.n	8002ef4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 fb66 	bl	80045b8 <SDIO_GetResponse>
 8002eec:	4602      	mov	r2, r0
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e041      	b.n	8002f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fe70 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 f9b6 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e04e      	b.n	8003052 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x80>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fde:	d01d      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x80>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x80>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x80>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <HAL_TIM_Base_Start_IT+0xd0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x80>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	@ (8003070 <HAL_TIM_Base_Start_IT+0xd4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x80>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <HAL_TIM_Base_Start_IT+0xd8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x80>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a18      	ldr	r2, [pc, #96]	@ (8003078 <HAL_TIM_Base_Start_IT+0xdc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b06      	cmp	r3, #6
 800302c:	d010      	beq.n	8003050 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303e:	e007      	b.n	8003050 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40010400 	.word	0x40010400
 8003074:	40014000 	.word	0x40014000
 8003078:	40001800 	.word	0x40001800

0800307c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d020      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01b      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0202 	mvn.w	r2, #2
 80030b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8d2 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8c4 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f8d5 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d020      	beq.n	800312c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0204 	mvn.w	r2, #4
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8ac 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f89e 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f8af 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d020      	beq.n	8003178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01b      	beq.n	8003178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0208 	mvn.w	r2, #8
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2204      	movs	r2, #4
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f886 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f878 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f889 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	d020      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01b      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0210 	mvn.w	r2, #16
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2208      	movs	r2, #8
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f860 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f852 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f863 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00c      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0201 	mvn.w	r2, #1
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd fc1e 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00c      	beq.n	800320c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f97c 	bl	8003504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f834 	bl	8003298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0220 	mvn.w	r2, #32
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f94e 	bl	80034f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a43      	ldr	r2, [pc, #268]	@ (80033cc <TIM_Base_SetConfig+0x120>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d00f      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3f      	ldr	r2, [pc, #252]	@ (80033d4 <TIM_Base_SetConfig+0x128>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3e      	ldr	r2, [pc, #248]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3d      	ldr	r2, [pc, #244]	@ (80033dc <TIM_Base_SetConfig+0x130>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d108      	bne.n	80032fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a32      	ldr	r2, [pc, #200]	@ (80033cc <TIM_Base_SetConfig+0x120>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330c:	d027      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2f      	ldr	r2, [pc, #188]	@ (80033d0 <TIM_Base_SetConfig+0x124>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d023      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2e      	ldr	r2, [pc, #184]	@ (80033d4 <TIM_Base_SetConfig+0x128>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2d      	ldr	r2, [pc, #180]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2c      	ldr	r2, [pc, #176]	@ (80033dc <TIM_Base_SetConfig+0x130>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d017      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2b      	ldr	r2, [pc, #172]	@ (80033e0 <TIM_Base_SetConfig+0x134>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2a      	ldr	r2, [pc, #168]	@ (80033e4 <TIM_Base_SetConfig+0x138>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a29      	ldr	r2, [pc, #164]	@ (80033e8 <TIM_Base_SetConfig+0x13c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a28      	ldr	r2, [pc, #160]	@ (80033ec <TIM_Base_SetConfig+0x140>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a27      	ldr	r2, [pc, #156]	@ (80033f0 <TIM_Base_SetConfig+0x144>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a26      	ldr	r2, [pc, #152]	@ (80033f4 <TIM_Base_SetConfig+0x148>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a0e      	ldr	r2, [pc, #56]	@ (80033cc <TIM_Base_SetConfig+0x120>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0xf2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a10      	ldr	r2, [pc, #64]	@ (80033dc <TIM_Base_SetConfig+0x130>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d103      	bne.n	80033a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	40010400 	.word	0x40010400
 80033e0:	40014000 	.word	0x40014000
 80033e4:	40014400 	.word	0x40014400
 80033e8:	40014800 	.word	0x40014800
 80033ec:	40001800 	.word	0x40001800
 80033f0:	40001c00 	.word	0x40001c00
 80033f4:	40002000 	.word	0x40002000

080033f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800340c:	2302      	movs	r3, #2
 800340e:	e05a      	b.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345c:	d01d      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1d      	ldr	r2, [pc, #116]	@ (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a18      	ldr	r2, [pc, #96]	@ (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a17      	ldr	r2, [pc, #92]	@ (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a15      	ldr	r2, [pc, #84]	@ (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10c      	bne.n	80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40010400 	.word	0x40010400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40001800 	.word	0x40001800

080034f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e042      	b.n	80035b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fb8a 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	@ 0x24
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800355a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fd1b 	bl	8003f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d121      	bne.n	8003616 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_UART_Transmit_IT+0x26>
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e01a      	b.n	8003618 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2221      	movs	r2, #33	@ 0x21
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003610:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b20      	cmp	r3, #32
 800363c:	d112      	bne.n	8003664 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_UART_Receive_IT+0x26>
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00b      	b.n	8003666 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	461a      	mov	r2, r3
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fac8 	bl	8003bf0 <UART_Start_Receive_IT>
 8003660:	4603      	mov	r3, r0
 8003662:	e000      	b.n	8003666 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0ba      	sub	sp, #232	@ 0xe8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_UART_IRQHandler+0x66>
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fba4 	bl	8003e1c <UART_Receive_IT>
      return;
 80036d4:	e273      	b.n	8003bbe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80de 	beq.w	800389c <HAL_UART_IRQHandler+0x22c>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80d1 	beq.w	800389c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_UART_IRQHandler+0xae>
 8003706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_UART_IRQHandler+0xd2>
 800372a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xf6>
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f043 0204 	orr.w	r2, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d011      	beq.n	8003796 <HAL_UART_IRQHandler+0x126>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800377e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f043 0208 	orr.w	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 820a 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_UART_IRQHandler+0x14e>
 80037ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb2f 	bl	8003e1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_UART_IRQHandler+0x17a>
 80037e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d04f      	beq.n	800388a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa3a 	bl	8003c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fa:	2b40      	cmp	r3, #64	@ 0x40
 80037fc:	d141      	bne.n	8003882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800381c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800382a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800382e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1d9      	bne.n	80037fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d013      	beq.n	800387a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	4a8a      	ldr	r2, [pc, #552]	@ (8003a80 <HAL_UART_IRQHandler+0x410>)
 8003858:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fd71 	bl	8001346 <HAL_DMA_Abort_IT>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003874:	4610      	mov	r0, r2
 8003876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	e00e      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9a2 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	e00a      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f99e 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e006      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f99a 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003896:	e18d      	b.n	8003bb4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	bf00      	nop
    return;
 800389a:	e18b      	b.n	8003bb4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	f040 8167 	bne.w	8003b74 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8160 	beq.w	8003b74 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8159 	beq.w	8003b74 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	f040 80ce 	bne.w	8003a84 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a9 	beq.w	8003a50 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003906:	429a      	cmp	r2, r3
 8003908:	f080 80a2 	bcs.w	8003a50 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003912:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391e:	f000 8088 	beq.w	8003a32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003938:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800393c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800394e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800395a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1d9      	bne.n	8003922 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800397e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003992:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003996:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800399a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e1      	bne.n	800396e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e3      	bne.n	80039aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a02:	f023 0310 	bic.w	r3, r3, #16
 8003a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e3      	bne.n	80039f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd fc1a 	bl	8001266 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8c5 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a4e:	e0b3      	b.n	8003bb8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	f040 80ad 	bne.w	8003bb8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a68:	f040 80a6 	bne.w	8003bb8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f8ad 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
      return;
 8003a7e:	e09b      	b.n	8003bb8 <HAL_UART_IRQHandler+0x548>
 8003a80:	08003d2b 	.word	0x08003d2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 808e 	beq.w	8003bbc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8089 	beq.w	8003bbc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ace:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ad0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e3      	bne.n	8003aaa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	623b      	str	r3, [r7, #32]
   return(result);
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b06:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e3      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b4c:	61fa      	str	r2, [r7, #28]
 8003b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	69b9      	ldr	r1, [r7, #24]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	617b      	str	r3, [r7, #20]
   return(result);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e3      	bne.n	8003b28 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f833 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b72:	e023      	b.n	8003bbc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <HAL_UART_IRQHandler+0x524>
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8dd 	bl	8003d4c <UART_Transmit_IT>
    return;
 8003b92:	e014      	b.n	8003bbe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00e      	beq.n	8003bbe <HAL_UART_IRQHandler+0x54e>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f91d 	bl	8003dec <UART_EndTransmit_IT>
    return;
 8003bb2:	e004      	b.n	8003bbe <HAL_UART_IRQHandler+0x54e>
    return;
 8003bb4:	bf00      	nop
 8003bb6:	e002      	b.n	8003bbe <HAL_UART_IRQHandler+0x54e>
      return;
 8003bb8:	bf00      	nop
 8003bba:	e000      	b.n	8003bbe <HAL_UART_IRQHandler+0x54e>
      return;
 8003bbc:	bf00      	nop
  }
}
 8003bbe:	37e8      	adds	r7, #232	@ 0xe8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2222      	movs	r2, #34	@ 0x22
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b095      	sub	sp, #84	@ 0x54
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d119      	bne.n	8003d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f023 0310 	bic.w	r3, r3, #16
 8003cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cfc:	61ba      	str	r2, [r7, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6979      	ldr	r1, [r7, #20]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e5      	bne.n	8003cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d1e:	bf00      	nop
 8003d20:	3754      	adds	r7, #84	@ 0x54
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ff40 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b21      	cmp	r3, #33	@ 0x21
 8003d5e:	d13e      	bne.n	8003dde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d68:	d114      	bne.n	8003d94 <UART_Transmit_IT+0x48>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d110      	bne.n	8003d94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	621a      	str	r2, [r3, #32]
 8003d92:	e008      	b.n	8003da6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	1c59      	adds	r1, r3, #1
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6211      	str	r1, [r2, #32]
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4619      	mov	r1, r3
 8003db4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fc fe5b 	bl	8000ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	@ 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b22      	cmp	r3, #34	@ 0x22
 8003e36:	f040 80aa 	bne.w	8003f8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e42:	d115      	bne.n	8003e70 <UART_Receive_IT+0x54>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e6e:	e024      	b.n	8003eba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7e:	d007      	beq.n	8003e90 <UART_Receive_IT+0x74>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <UART_Receive_IT+0x82>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	e008      	b.n	8003eb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d15d      	bne.n	8003f8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0220 	bic.w	r2, r2, #32
 8003edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d135      	bne.n	8003f80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f023 0310 	bic.w	r3, r3, #16
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3a:	623a      	str	r2, [r7, #32]
 8003f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	69f9      	ldr	r1, [r7, #28]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d10a      	bne.n	8003f72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fe2d 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
 8003f7e:	e002      	b.n	8003f86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc fd75 	bl	8000a70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e002      	b.n	8003f90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3730      	adds	r7, #48	@ 0x30
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	b0c0      	sub	sp, #256	@ 0x100
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	68d9      	ldr	r1, [r3, #12]
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	ea40 0301 	orr.w	r3, r0, r1
 8003fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ff0:	f021 010c 	bic.w	r1, r1, #12
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ffe:	430b      	orrs	r3, r1
 8004000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004012:	6999      	ldr	r1, [r3, #24]
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	ea40 0301 	orr.w	r3, r0, r1
 800401e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b8f      	ldr	r3, [pc, #572]	@ (8004264 <UART_SetConfig+0x2cc>)
 8004028:	429a      	cmp	r2, r3
 800402a:	d005      	beq.n	8004038 <UART_SetConfig+0xa0>
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b8d      	ldr	r3, [pc, #564]	@ (8004268 <UART_SetConfig+0x2d0>)
 8004034:	429a      	cmp	r2, r3
 8004036:	d104      	bne.n	8004042 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7fd ffbc 	bl	8001fb4 <HAL_RCC_GetPCLK2Freq>
 800403c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004040:	e003      	b.n	800404a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004042:	f7fd ffa3 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8004046:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004054:	f040 810c 	bne.w	8004270 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004062:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004066:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800406a:	4622      	mov	r2, r4
 800406c:	462b      	mov	r3, r5
 800406e:	1891      	adds	r1, r2, r2
 8004070:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004072:	415b      	adcs	r3, r3
 8004074:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800407a:	4621      	mov	r1, r4
 800407c:	eb12 0801 	adds.w	r8, r2, r1
 8004080:	4629      	mov	r1, r5
 8004082:	eb43 0901 	adc.w	r9, r3, r1
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409a:	4690      	mov	r8, r2
 800409c:	4699      	mov	r9, r3
 800409e:	4623      	mov	r3, r4
 80040a0:	eb18 0303 	adds.w	r3, r8, r3
 80040a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040a8:	462b      	mov	r3, r5
 80040aa:	eb49 0303 	adc.w	r3, r9, r3
 80040ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040c6:	460b      	mov	r3, r1
 80040c8:	18db      	adds	r3, r3, r3
 80040ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80040cc:	4613      	mov	r3, r2
 80040ce:	eb42 0303 	adc.w	r3, r2, r3
 80040d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040dc:	f7fc f87c 	bl	80001d8 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4b61      	ldr	r3, [pc, #388]	@ (800426c <UART_SetConfig+0x2d4>)
 80040e6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	011c      	lsls	r4, r3, #4
 80040ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004108:	415b      	adcs	r3, r3
 800410a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800410c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004110:	4641      	mov	r1, r8
 8004112:	eb12 0a01 	adds.w	sl, r2, r1
 8004116:	4649      	mov	r1, r9
 8004118:	eb43 0b01 	adc.w	fp, r3, r1
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004128:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800412c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004130:	4692      	mov	sl, r2
 8004132:	469b      	mov	fp, r3
 8004134:	4643      	mov	r3, r8
 8004136:	eb1a 0303 	adds.w	r3, sl, r3
 800413a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800413e:	464b      	mov	r3, r9
 8004140:	eb4b 0303 	adc.w	r3, fp, r3
 8004144:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004154:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004158:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800415c:	460b      	mov	r3, r1
 800415e:	18db      	adds	r3, r3, r3
 8004160:	643b      	str	r3, [r7, #64]	@ 0x40
 8004162:	4613      	mov	r3, r2
 8004164:	eb42 0303 	adc.w	r3, r2, r3
 8004168:	647b      	str	r3, [r7, #68]	@ 0x44
 800416a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800416e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004172:	f7fc f831 	bl	80001d8 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4611      	mov	r1, r2
 800417c:	4b3b      	ldr	r3, [pc, #236]	@ (800426c <UART_SetConfig+0x2d4>)
 800417e:	fba3 2301 	umull	r2, r3, r3, r1
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2264      	movs	r2, #100	@ 0x64
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	1acb      	subs	r3, r1, r3
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004192:	4b36      	ldr	r3, [pc, #216]	@ (800426c <UART_SetConfig+0x2d4>)
 8004194:	fba3 2302 	umull	r2, r3, r3, r2
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041a0:	441c      	add	r4, r3
 80041a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	1891      	adds	r1, r2, r2
 80041ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041bc:	415b      	adcs	r3, r3
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041c4:	4641      	mov	r1, r8
 80041c6:	1851      	adds	r1, r2, r1
 80041c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80041ca:	4649      	mov	r1, r9
 80041cc:	414b      	adcs	r3, r1
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041dc:	4659      	mov	r1, fp
 80041de:	00cb      	lsls	r3, r1, #3
 80041e0:	4651      	mov	r1, sl
 80041e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e6:	4651      	mov	r1, sl
 80041e8:	00ca      	lsls	r2, r1, #3
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	4642      	mov	r2, r8
 80041f2:	189b      	adds	r3, r3, r2
 80041f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041f8:	464b      	mov	r3, r9
 80041fa:	460a      	mov	r2, r1
 80041fc:	eb42 0303 	adc.w	r3, r2, r3
 8004200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004210:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004218:	460b      	mov	r3, r1
 800421a:	18db      	adds	r3, r3, r3
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800421e:	4613      	mov	r3, r2
 8004220:	eb42 0303 	adc.w	r3, r2, r3
 8004224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800422a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800422e:	f7fb ffd3 	bl	80001d8 <__aeabi_uldivmod>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <UART_SetConfig+0x2d4>)
 8004238:	fba3 1302 	umull	r1, r3, r3, r2
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	2164      	movs	r1, #100	@ 0x64
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	3332      	adds	r3, #50	@ 0x32
 800424a:	4a08      	ldr	r2, [pc, #32]	@ (800426c <UART_SetConfig+0x2d4>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	f003 0207 	and.w	r2, r3, #7
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4422      	add	r2, r4
 800425e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004260:	e106      	b.n	8004470 <UART_SetConfig+0x4d8>
 8004262:	bf00      	nop
 8004264:	40011000 	.word	0x40011000
 8004268:	40011400 	.word	0x40011400
 800426c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800427a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800427e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004282:	4642      	mov	r2, r8
 8004284:	464b      	mov	r3, r9
 8004286:	1891      	adds	r1, r2, r2
 8004288:	6239      	str	r1, [r7, #32]
 800428a:	415b      	adcs	r3, r3
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
 800428e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004292:	4641      	mov	r1, r8
 8004294:	1854      	adds	r4, r2, r1
 8004296:	4649      	mov	r1, r9
 8004298:	eb43 0501 	adc.w	r5, r3, r1
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	00eb      	lsls	r3, r5, #3
 80042a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042aa:	00e2      	lsls	r2, r4, #3
 80042ac:	4614      	mov	r4, r2
 80042ae:	461d      	mov	r5, r3
 80042b0:	4643      	mov	r3, r8
 80042b2:	18e3      	adds	r3, r4, r3
 80042b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042b8:	464b      	mov	r3, r9
 80042ba:	eb45 0303 	adc.w	r3, r5, r3
 80042be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042de:	4629      	mov	r1, r5
 80042e0:	008b      	lsls	r3, r1, #2
 80042e2:	4621      	mov	r1, r4
 80042e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e8:	4621      	mov	r1, r4
 80042ea:	008a      	lsls	r2, r1, #2
 80042ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042f0:	f7fb ff72 	bl	80001d8 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4b60      	ldr	r3, [pc, #384]	@ (800447c <UART_SetConfig+0x4e4>)
 80042fa:	fba3 2302 	umull	r2, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	011c      	lsls	r4, r3, #4
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800430c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004310:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	61b9      	str	r1, [r7, #24]
 800431c:	415b      	adcs	r3, r3
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004324:	4641      	mov	r1, r8
 8004326:	1851      	adds	r1, r2, r1
 8004328:	6139      	str	r1, [r7, #16]
 800432a:	4649      	mov	r1, r9
 800432c:	414b      	adcs	r3, r1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800433c:	4659      	mov	r1, fp
 800433e:	00cb      	lsls	r3, r1, #3
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004346:	4651      	mov	r1, sl
 8004348:	00ca      	lsls	r2, r1, #3
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4603      	mov	r3, r0
 8004350:	4642      	mov	r2, r8
 8004352:	189b      	adds	r3, r3, r2
 8004354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800436e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800437c:	4649      	mov	r1, r9
 800437e:	008b      	lsls	r3, r1, #2
 8004380:	4641      	mov	r1, r8
 8004382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004386:	4641      	mov	r1, r8
 8004388:	008a      	lsls	r2, r1, #2
 800438a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800438e:	f7fb ff23 	bl	80001d8 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4611      	mov	r1, r2
 8004398:	4b38      	ldr	r3, [pc, #224]	@ (800447c <UART_SetConfig+0x4e4>)
 800439a:	fba3 2301 	umull	r2, r3, r3, r1
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2264      	movs	r2, #100	@ 0x64
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	1acb      	subs	r3, r1, r3
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	3332      	adds	r3, #50	@ 0x32
 80043ac:	4a33      	ldr	r2, [pc, #204]	@ (800447c <UART_SetConfig+0x4e4>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b8:	441c      	add	r4, r3
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80043c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80043c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	415b      	adcs	r3, r3
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d8:	4641      	mov	r1, r8
 80043da:	1851      	adds	r1, r2, r1
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	4649      	mov	r1, r9
 80043e0:	414b      	adcs	r3, r1
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043f0:	4659      	mov	r1, fp
 80043f2:	00cb      	lsls	r3, r1, #3
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fa:	4651      	mov	r1, sl
 80043fc:	00ca      	lsls	r2, r1, #3
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	4603      	mov	r3, r0
 8004404:	4642      	mov	r2, r8
 8004406:	189b      	adds	r3, r3, r2
 8004408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800440a:	464b      	mov	r3, r9
 800440c:	460a      	mov	r2, r1
 800440e:	eb42 0303 	adc.w	r3, r2, r3
 8004412:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	663b      	str	r3, [r7, #96]	@ 0x60
 800441e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800442c:	4649      	mov	r1, r9
 800442e:	008b      	lsls	r3, r1, #2
 8004430:	4641      	mov	r1, r8
 8004432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004436:	4641      	mov	r1, r8
 8004438:	008a      	lsls	r2, r1, #2
 800443a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800443e:	f7fb fecb 	bl	80001d8 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <UART_SetConfig+0x4e4>)
 8004448:	fba3 1302 	umull	r1, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	2164      	movs	r1, #100	@ 0x64
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	3332      	adds	r3, #50	@ 0x32
 800445a:	4a08      	ldr	r2, [pc, #32]	@ (800447c <UART_SetConfig+0x4e4>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4422      	add	r2, r4
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004476:	46bd      	mov	sp, r7
 8004478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800447c:	51eb851f 	.word	0x51eb851f

08004480 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004480:	b084      	sub	sp, #16
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	f107 001c 	add.w	r0, r7, #28
 800448e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004496:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004498:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800449a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800449e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80044a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80044a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80044a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80044aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80044ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	b004      	add	sp, #16
 80044d4:	4770      	bx	lr

080044d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0303 	and.w	r3, r3, #3
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004568:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800456e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004574:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004584:	f023 030f 	bic.w	r3, r3, #15
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	b2db      	uxtb	r3, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3314      	adds	r3, #20
 80045c6:	461a      	mov	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4413      	add	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
}  
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004604:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800460a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004610:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004628:	2300      	movs	r3, #0

}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b088      	sub	sp, #32
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004644:	2310      	movs	r3, #16
 8004646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004648:	2340      	movs	r3, #64	@ 0x40
 800464a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004654:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff74 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004666:	2110      	movs	r1, #16
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f9d7 	bl	8004a1c <SDMMC_GetCmdResp1>
 800466e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004670:	69fb      	ldr	r3, [r7, #28]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b088      	sub	sp, #32
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004688:	2311      	movs	r3, #17
 800468a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800468c:	2340      	movs	r3, #64	@ 0x40
 800468e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004694:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004698:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff ff52 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80046a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046aa:	2111      	movs	r1, #17
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f9b5 	bl	8004a1c <SDMMC_GetCmdResp1>
 80046b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046b4:	69fb      	ldr	r3, [r7, #28]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b088      	sub	sp, #32
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80046cc:	2312      	movs	r3, #18
 80046ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046d0:	2340      	movs	r3, #64	@ 0x40
 80046d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4619      	mov	r1, r3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff30 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	2112      	movs	r1, #18
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f993 	bl	8004a1c <SDMMC_GetCmdResp1>
 80046f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046f8:	69fb      	ldr	r3, [r7, #28]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b088      	sub	sp, #32
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004710:	2318      	movs	r3, #24
 8004712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004714:	2340      	movs	r3, #64	@ 0x40
 8004716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800471c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004720:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff0e 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	2118      	movs	r1, #24
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f971 	bl	8004a1c <SDMMC_GetCmdResp1>
 800473a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800473c:	69fb      	ldr	r3, [r7, #28]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b088      	sub	sp, #32
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004754:	2319      	movs	r3, #25
 8004756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004758:	2340      	movs	r3, #64	@ 0x40
 800475a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004764:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004766:	f107 0308 	add.w	r3, r7, #8
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff feec 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004776:	2119      	movs	r1, #25
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f94f 	bl	8004a1c <SDMMC_GetCmdResp1>
 800477e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004780:	69fb      	ldr	r3, [r7, #28]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004798:	230c      	movs	r3, #12
 800479a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800479c:	2340      	movs	r3, #64	@ 0x40
 800479e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff feca 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80047b6:	4a05      	ldr	r2, [pc, #20]	@ (80047cc <SDMMC_CmdStopTransfer+0x40>)
 80047b8:	210c      	movs	r1, #12
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f92e 	bl	8004a1c <SDMMC_GetCmdResp1>
 80047c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047c2:	69fb      	ldr	r3, [r7, #28]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	05f5e100 	.word	0x05f5e100

080047d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	@ 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80047e0:	2307      	movs	r3, #7
 80047e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047e4:	2340      	movs	r3, #64	@ 0x40
 80047e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047f2:	f107 0310 	add.w	r3, r7, #16
 80047f6:	4619      	mov	r1, r3
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff fea6 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	2107      	movs	r1, #7
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f909 	bl	8004a1c <SDMMC_GetCmdResp1>
 800480a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	@ 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b088      	sub	sp, #32
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800482e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004834:	f107 0308 	add.w	r3, r7, #8
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fe85 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fb23 	bl	8004e8c <SDMMC_GetCmdError>
 8004846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800485a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800485e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004860:	2308      	movs	r3, #8
 8004862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004864:	2340      	movs	r3, #64	@ 0x40
 8004866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800486c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fe66 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fab6 	bl	8004df0 <SDMMC_GetCmdResp7>
 8004884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004886:	69fb      	ldr	r3, [r7, #28]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800489e:	2337      	movs	r3, #55	@ 0x37
 80048a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048a2:	2340      	movs	r3, #64	@ 0x40
 80048a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b0:	f107 0308 	add.w	r3, r7, #8
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fe47 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80048bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c0:	2137      	movs	r1, #55	@ 0x37
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8aa 	bl	8004a1c <SDMMC_GetCmdResp1>
 80048c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ca:	69fb      	ldr	r3, [r7, #28]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80048ea:	2329      	movs	r3, #41	@ 0x29
 80048ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ee:	2340      	movs	r3, #64	@ 0x40
 80048f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fe21 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f9bd 	bl	8004c88 <SDMMC_GetCmdResp3>
 800490e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004910:	69fb      	ldr	r3, [r7, #28]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b088      	sub	sp, #32
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004926:	2302      	movs	r3, #2
 8004928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800492a:	23c0      	movs	r3, #192	@ 0xc0
 800492c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004936:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004938:	f107 0308 	add.w	r3, r7, #8
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fe03 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f957 	bl	8004bf8 <SDMMC_GetCmdResp2>
 800494a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800494c:	69fb      	ldr	r3, [r7, #28]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b088      	sub	sp, #32
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004964:	2309      	movs	r3, #9
 8004966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004968:	23c0      	movs	r3, #192	@ 0xc0
 800496a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004974:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fde4 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f938 	bl	8004bf8 <SDMMC_GetCmdResp2>
 8004988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800498a:	69fb      	ldr	r3, [r7, #28]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80049a2:	2303      	movs	r3, #3
 80049a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049a6:	2340      	movs	r3, #64	@ 0x40
 80049a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fdc5 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	2103      	movs	r1, #3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f99d 	bl	8004d04 <SDMMC_GetCmdResp6>
 80049ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049cc:	69fb      	ldr	r3, [r7, #28]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b088      	sub	sp, #32
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80049e4:	230d      	movs	r3, #13
 80049e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049e8:	2340      	movs	r3, #64	@ 0x40
 80049ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff fda4 	bl	800454a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	210d      	movs	r1, #13
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f807 	bl	8004a1c <SDMMC_GetCmdResp1>
 8004a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a10:	69fb      	ldr	r3, [r7, #28]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	460b      	mov	r3, r1
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a2a:	4b70      	ldr	r3, [pc, #448]	@ (8004bec <SDMMC_GetCmdResp1+0x1d0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a70      	ldr	r2, [pc, #448]	@ (8004bf0 <SDMMC_GetCmdResp1+0x1d4>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	0a5a      	lsrs	r2, r3, #9
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	61fa      	str	r2, [r7, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004a4c:	e0c9      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ef      	beq.n	8004a3e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ea      	bne.n	8004a3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2204      	movs	r2, #4
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	e0b1      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0a6      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	22c5      	movs	r2, #197	@ 0xc5
 8004a98:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff fd7f 	bl	800459e <SDIO_GetCommandResponse>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d001      	beq.n	8004aae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e099      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004aae:	2100      	movs	r1, #0
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff fd81 	bl	80045b8 <SDIO_GetResponse>
 8004ab6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf4 <SDMMC_GetCmdResp1+0x1d8>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e08d      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da02      	bge.n	8004ad2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004acc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ad0:	e087      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004adc:	2340      	movs	r3, #64	@ 0x40
 8004ade:	e080      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	e079      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004afc:	e071      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b0c:	e069      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b1c:	e061      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b2c:	e059      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b3c:	e051      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b4c:	e049      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004b58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b5c:	e041      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004b68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6c:	e039      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004b78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b7c:	e031      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004b88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004b8c:	e029      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004b98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004b9c:	e021      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ba8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bac:	e019      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004bb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004bbc:	e011      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004bc8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bcc:	e009      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004bd8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004bdc:	e001      	b.n	8004be2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	10624dd3 	.word	0x10624dd3
 8004bf4:	fdffe008 	.word	0xfdffe008

08004bf8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c00:	4b1f      	ldr	r3, [pc, #124]	@ (8004c80 <SDMMC_GetCmdResp2+0x88>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1f      	ldr	r2, [pc, #124]	@ (8004c84 <SDMMC_GetCmdResp2+0x8c>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	0a5b      	lsrs	r3, r3, #9
 8004c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1e5a      	subs	r2, r3, #1
 8004c1a:	60fa      	str	r2, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c24:	e026      	b.n	8004c74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0ef      	beq.n	8004c16 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ea      	bne.n	8004c16 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c52:	2304      	movs	r3, #4
 8004c54:	e00e      	b.n	8004c74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d004      	beq.n	8004c6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e003      	b.n	8004c74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	22c5      	movs	r2, #197	@ 0xc5
 8004c70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20000000 	.word	0x20000000
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c90:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <SDMMC_GetCmdResp3+0x74>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1a      	ldr	r2, [pc, #104]	@ (8004d00 <SDMMC_GetCmdResp3+0x78>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0a5b      	lsrs	r3, r3, #9
 8004c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca0:	fb02 f303 	mul.w	r3, r2, r3
 8004ca4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1e5a      	subs	r2, r3, #1
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004cb4:	e01b      	b.n	8004cee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ef      	beq.n	8004ca6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ea      	bne.n	8004ca6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	e003      	b.n	8004cee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	22c5      	movs	r2, #197	@ 0xc5
 8004cea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	10624dd3 	.word	0x10624dd3

08004d04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d12:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <SDMMC_GetCmdResp6+0xe4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a35      	ldr	r2, [pc, #212]	@ (8004dec <SDMMC_GetCmdResp6+0xe8>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	0a5b      	lsrs	r3, r3, #9
 8004d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	1e5a      	subs	r2, r3, #1
 8004d2c:	61fa      	str	r2, [r7, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d36:	e052      	b.n	8004dde <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ef      	beq.n	8004d28 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1ea      	bne.n	8004d28 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2204      	movs	r2, #4
 8004d62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d64:	2304      	movs	r3, #4
 8004d66:	e03a      	b.n	8004dde <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e02f      	b.n	8004dde <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff fc0d 	bl	800459e <SDIO_GetCommandResponse>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d001      	beq.n	8004d92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e025      	b.n	8004dde <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	22c5      	movs	r2, #197	@ 0xc5
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d98:	2100      	movs	r1, #0
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fc0c 	bl	80045b8 <SDIO_GetResponse>
 8004da0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e011      	b.n	8004dde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004dc8:	e009      	b.n	8004dde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dd8:	e001      	b.n	8004dde <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004dda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000000 	.word	0x20000000
 8004dec:	10624dd3 	.word	0x10624dd3

08004df0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004df8:	4b22      	ldr	r3, [pc, #136]	@ (8004e84 <SDMMC_GetCmdResp7+0x94>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a22      	ldr	r2, [pc, #136]	@ (8004e88 <SDMMC_GetCmdResp7+0x98>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	0a5b      	lsrs	r3, r3, #9
 8004e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1e5a      	subs	r2, r3, #1
 8004e12:	60fa      	str	r2, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e1c:	e02c      	b.n	8004e78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0ef      	beq.n	8004e0e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ea      	bne.n	8004e0e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2204      	movs	r2, #4
 8004e48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	e014      	b.n	8004e78 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e009      	b.n	8004e78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2240      	movs	r2, #64	@ 0x40
 8004e74:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e76:	2300      	movs	r3, #0
  
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20000000 	.word	0x20000000
 8004e88:	10624dd3 	.word	0x10624dd3

08004e8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e94:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <SDMMC_GetCmdError+0x50>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a11      	ldr	r2, [pc, #68]	@ (8004ee0 <SDMMC_GetCmdError+0x54>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	0a5b      	lsrs	r3, r3, #9
 8004ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1e5a      	subs	r2, r3, #1
 8004eae:	60fa      	str	r2, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004eb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004eb8:	e009      	b.n	8004ece <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f1      	beq.n	8004eaa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	22c5      	movs	r2, #197	@ 0xc5
 8004eca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004ee8:	4904      	ldr	r1, [pc, #16]	@ (8004efc <MX_FATFS_Init+0x18>)
 8004eea:	4805      	ldr	r0, [pc, #20]	@ (8004f00 <MX_FATFS_Init+0x1c>)
 8004eec:	f002 fc5c 	bl	80077a8 <FATFS_LinkDriver>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b03      	ldr	r3, [pc, #12]	@ (8004f04 <MX_FATFS_Init+0x20>)
 8004ef6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ef8:	bf00      	nop
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	200001d8 	.word	0x200001d8
 8004f00:	080078c0 	.word	0x080078c0
 8004f04:	200001d4 	.word	0x200001d4

08004f08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004f22:	f000 f86b 	bl	8004ffc <BSP_SD_IsDetected>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d001      	beq.n	8004f30 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e005      	b.n	8004f3c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004f30:	4804      	ldr	r0, [pc, #16]	@ (8004f44 <BSP_SD_Init+0x2c>)
 8004f32:	f7fd f853 	bl	8001fdc <HAL_SD_Init>
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000028 	.word	0x20000028

08004f48 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	4806      	ldr	r0, [pc, #24]	@ (8004f80 <BSP_SD_ReadBlocks+0x38>)
 8004f66:	f7fd f8e1 	bl	800212c <HAL_SD_ReadBlocks>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000028 	.word	0x20000028

08004f84 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	4806      	ldr	r0, [pc, #24]	@ (8004fbc <BSP_SD_WriteBlocks+0x38>)
 8004fa2:	f7fd faa9 	bl	80024f8 <HAL_SD_WriteBlocks>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000028 	.word	0x20000028

08004fc0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004fc4:	4805      	ldr	r0, [pc, #20]	@ (8004fdc <BSP_SD_GetCardState+0x1c>)
 8004fc6:	f7fd fdf5 	bl	8002bb4 <HAL_SD_GetCardState>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	bf14      	ite	ne
 8004fd0:	2301      	movne	r3, #1
 8004fd2:	2300      	moveq	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000028 	.word	0x20000028

08004fe0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4803      	ldr	r0, [pc, #12]	@ (8004ff8 <BSP_SD_GetCardInfo+0x18>)
 8004fec:	f7fd fdb6 	bl	8002b5c <HAL_SD_GetCardInfo>
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000028 	.word	0x20000028

08004ffc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005002:	2301      	movs	r3, #1
 8005004:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	b2db      	uxtb	r3, r3
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <SD_CheckStatus+0x38>)
 8005024:	2201      	movs	r2, #1
 8005026:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005028:	f7ff ffca 	bl	8004fc0 <BSP_SD_GetCardState>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005032:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <SD_CheckStatus+0x38>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	b2da      	uxtb	r2, r3
 800503e:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <SD_CheckStatus+0x38>)
 8005040:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005042:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <SD_CheckStatus+0x38>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b2db      	uxtb	r3, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000009 	.word	0x20000009

08005054 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800505e:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <SD_initialize+0x38>)
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005064:	f7ff ff58 	bl	8004f18 <BSP_SD_Init>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d107      	bne.n	800507e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ffd1 	bl	8005018 <SD_CheckStatus>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	4b04      	ldr	r3, [pc, #16]	@ (800508c <SD_initialize+0x38>)
 800507c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800507e:	4b03      	ldr	r3, [pc, #12]	@ (800508c <SD_initialize+0x38>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b2db      	uxtb	r3, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000009 	.word	0x20000009

08005090 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffbb 	bl	8005018 <SD_CheckStatus>
 80050a2:	4603      	mov	r3, r0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	4603      	mov	r3, r0
 80050ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	68b8      	ldr	r0, [r7, #8]
 80050ca:	f7ff ff3d 	bl	8004f48 <BSP_SD_ReadBlocks>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80050d4:	bf00      	nop
 80050d6:	f7ff ff73 	bl	8004fc0 <BSP_SD_GetCardState>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1fa      	bne.n	80050d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	68b8      	ldr	r0, [r7, #8]
 800510c:	f7ff ff3a 	bl	8004f84 <BSP_SD_WriteBlocks>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005116:	bf00      	nop
 8005118:	f7ff ff52 	bl	8004fc0 <BSP_SD_GetCardState>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1fa      	bne.n	8005118 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005126:	7dfb      	ldrb	r3, [r7, #23]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	@ 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	603a      	str	r2, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
 800513c:	460b      	mov	r3, r1
 800513e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005146:	4b25      	ldr	r3, [pc, #148]	@ (80051dc <SD_ioctl+0xac>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <SD_ioctl+0x28>
 8005154:	2303      	movs	r3, #3
 8005156:	e03c      	b.n	80051d2 <SD_ioctl+0xa2>

  switch (cmd)
 8005158:	79bb      	ldrb	r3, [r7, #6]
 800515a:	2b03      	cmp	r3, #3
 800515c:	d834      	bhi.n	80051c8 <SD_ioctl+0x98>
 800515e:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <SD_ioctl+0x34>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005175 	.word	0x08005175
 8005168:	0800517d 	.word	0x0800517d
 800516c:	08005195 	.word	0x08005195
 8005170:	080051af 	.word	0x080051af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800517a:	e028      	b.n	80051ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800517c:	f107 030c 	add.w	r3, r7, #12
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ff2d 	bl	8004fe0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005192:	e01c      	b.n	80051ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff21 	bl	8004fe0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80051ac:	e00f      	b.n	80051ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80051ae:	f107 030c 	add.w	r3, r7, #12
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff14 	bl	8004fe0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ba:	0a5a      	lsrs	r2, r3, #9
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80051c6:	e002      	b.n	80051ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80051c8:	2304      	movs	r3, #4
 80051ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80051ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3730      	adds	r7, #48	@ 0x30
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000009 	.word	0x20000009

080051e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <disk_status+0x30>)
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	79fa      	ldrb	r2, [r7, #7]
 80051f8:	4905      	ldr	r1, [pc, #20]	@ (8005210 <disk_status+0x30>)
 80051fa:	440a      	add	r2, r1
 80051fc:	7a12      	ldrb	r2, [r2, #8]
 80051fe:	4610      	mov	r0, r2
 8005200:	4798      	blx	r3
 8005202:	4603      	mov	r3, r0
 8005204:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000204 	.word	0x20000204

08005214 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	4a0e      	ldr	r2, [pc, #56]	@ (8005260 <disk_initialize+0x4c>)
 8005226:	5cd3      	ldrb	r3, [r2, r3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d114      	bne.n	8005256 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	4a0c      	ldr	r2, [pc, #48]	@ (8005260 <disk_initialize+0x4c>)
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	79fa      	ldrb	r2, [r7, #7]
 800523a:	4909      	ldr	r1, [pc, #36]	@ (8005260 <disk_initialize+0x4c>)
 800523c:	440a      	add	r2, r1
 800523e:	7a12      	ldrb	r2, [r2, #8]
 8005240:	4610      	mov	r0, r2
 8005242:	4798      	blx	r3
 8005244:	4603      	mov	r3, r0
 8005246:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	4a03      	ldr	r2, [pc, #12]	@ (8005260 <disk_initialize+0x4c>)
 8005252:	2101      	movs	r1, #1
 8005254:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000204 	.word	0x20000204

08005264 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	4a0a      	ldr	r2, [pc, #40]	@ (80052a0 <disk_read+0x3c>)
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	689c      	ldr	r4, [r3, #8]
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	4a07      	ldr	r2, [pc, #28]	@ (80052a0 <disk_read+0x3c>)
 8005284:	4413      	add	r3, r2
 8005286:	7a18      	ldrb	r0, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	47a0      	blx	r4
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]
  return res;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000204 	.word	0x20000204

080052a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	4a0a      	ldr	r2, [pc, #40]	@ (80052e0 <disk_write+0x3c>)
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68dc      	ldr	r4, [r3, #12]
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	4a07      	ldr	r2, [pc, #28]	@ (80052e0 <disk_write+0x3c>)
 80052c4:	4413      	add	r3, r2
 80052c6:	7a18      	ldrb	r0, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	47a0      	blx	r4
 80052d0:	4603      	mov	r3, r0
 80052d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd90      	pop	{r4, r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000204 	.word	0x20000204

080052e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	603a      	str	r2, [r7, #0]
 80052ee:	71fb      	strb	r3, [r7, #7]
 80052f0:	460b      	mov	r3, r1
 80052f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	4a09      	ldr	r2, [pc, #36]	@ (800531c <disk_ioctl+0x38>)
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	4906      	ldr	r1, [pc, #24]	@ (800531c <disk_ioctl+0x38>)
 8005304:	440a      	add	r2, r1
 8005306:	7a10      	ldrb	r0, [r2, #8]
 8005308:	79b9      	ldrb	r1, [r7, #6]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	4798      	blx	r3
 800530e:	4603      	mov	r3, r0
 8005310:	73fb      	strb	r3, [r7, #15]
  return res;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000204 	.word	0x20000204

08005320 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3301      	adds	r3, #1
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005330:	89fb      	ldrh	r3, [r7, #14]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	b21a      	sxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	b21b      	sxth	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	b21b      	sxth	r3, r3
 8005340:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005342:	89fb      	ldrh	r3, [r7, #14]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3303      	adds	r3, #3
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	3202      	adds	r2, #2
 8005368:	7812      	ldrb	r2, [r2, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	3201      	adds	r2, #1
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
	return rv;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	887b      	ldrh	r3, [r7, #2]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	1c53      	adds	r3, r2, #1
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	6179      	str	r1, [r7, #20]
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3b01      	subs	r3, #1
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f1      	bne.n	800543e <mem_cpy+0x1a>
	}
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	617a      	str	r2, [r7, #20]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3b01      	subs	r3, #1
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f3      	bne.n	8005476 <mem_set+0x10>
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	@ 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	61fa      	str	r2, [r7, #28]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	4619      	mov	r1, r3
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	61ba      	str	r2, [r7, #24]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	1acb      	subs	r3, r1, r3
 80054c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <mem_cmp+0x40>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0eb      	beq.n	80054b4 <mem_cmp+0x18>

	return r;
 80054dc:	697b      	ldr	r3, [r7, #20]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3724      	adds	r7, #36	@ 0x24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80054f4:	e002      	b.n	80054fc <chk_chr+0x12>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3301      	adds	r3, #1
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <chk_chr+0x26>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	4293      	cmp	r3, r2
 800550e:	d1f2      	bne.n	80054f6 <chk_chr+0xc>
	return *str;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	781b      	ldrb	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e029      	b.n	8005588 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005534:	4a27      	ldr	r2, [pc, #156]	@ (80055d4 <chk_lock+0xb4>)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	4413      	add	r3, r2
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01d      	beq.n	800557e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005542:	4a24      	ldr	r2, [pc, #144]	@ (80055d4 <chk_lock+0xb4>)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	4413      	add	r3, r2
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d116      	bne.n	8005582 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005554:	4a1f      	ldr	r2, [pc, #124]	@ (80055d4 <chk_lock+0xb4>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4413      	add	r3, r2
 800555c:	3304      	adds	r3, #4
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005564:	429a      	cmp	r2, r3
 8005566:	d10c      	bne.n	8005582 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005568:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <chk_lock+0xb4>)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	4413      	add	r3, r2
 8005570:	3308      	adds	r3, #8
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005578:	429a      	cmp	r2, r3
 800557a:	d102      	bne.n	8005582 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800557c:	e007      	b.n	800558e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d9d2      	bls.n	8005534 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d109      	bne.n	80055a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <chk_lock+0x80>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d101      	bne.n	80055a4 <chk_lock+0x84>
 80055a0:	2300      	movs	r3, #0
 80055a2:	e010      	b.n	80055c6 <chk_lock+0xa6>
 80055a4:	2312      	movs	r3, #18
 80055a6:	e00e      	b.n	80055c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d108      	bne.n	80055c0 <chk_lock+0xa0>
 80055ae:	4a09      	ldr	r2, [pc, #36]	@ (80055d4 <chk_lock+0xb4>)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	4413      	add	r3, r2
 80055b6:	330c      	adds	r3, #12
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055be:	d101      	bne.n	80055c4 <chk_lock+0xa4>
 80055c0:	2310      	movs	r3, #16
 80055c2:	e000      	b.n	80055c6 <chk_lock+0xa6>
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	200001e4 	.word	0x200001e4

080055d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055de:	2300      	movs	r3, #0
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	e002      	b.n	80055ea <enq_lock+0x12>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d806      	bhi.n	80055fe <enq_lock+0x26>
 80055f0:	4a09      	ldr	r2, [pc, #36]	@ (8005618 <enq_lock+0x40>)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4413      	add	r3, r2
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f2      	bne.n	80055e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b02      	cmp	r3, #2
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	200001e4 	.word	0x200001e4

0800561c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e01f      	b.n	800566c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800562c:	4a41      	ldr	r2, [pc, #260]	@ (8005734 <inc_lock+0x118>)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4413      	add	r3, r2
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d113      	bne.n	8005666 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800563e:	4a3d      	ldr	r2, [pc, #244]	@ (8005734 <inc_lock+0x118>)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800564e:	429a      	cmp	r2, r3
 8005650:	d109      	bne.n	8005666 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005652:	4a38      	ldr	r2, [pc, #224]	@ (8005734 <inc_lock+0x118>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	4413      	add	r3, r2
 800565a:	3308      	adds	r3, #8
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005662:	429a      	cmp	r2, r3
 8005664:	d006      	beq.n	8005674 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3301      	adds	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d9dc      	bls.n	800562c <inc_lock+0x10>
 8005672:	e000      	b.n	8005676 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005674:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d132      	bne.n	80056e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e002      	b.n	8005688 <inc_lock+0x6c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d806      	bhi.n	800569c <inc_lock+0x80>
 800568e:	4a29      	ldr	r2, [pc, #164]	@ (8005734 <inc_lock+0x118>)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	4413      	add	r3, r2
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f2      	bne.n	8005682 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d101      	bne.n	80056a6 <inc_lock+0x8a>
 80056a2:	2300      	movs	r3, #0
 80056a4:	e040      	b.n	8005728 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4922      	ldr	r1, [pc, #136]	@ (8005734 <inc_lock+0x118>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	440b      	add	r3, r1
 80056b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	491e      	ldr	r1, [pc, #120]	@ (8005734 <inc_lock+0x118>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	440b      	add	r3, r1
 80056c0:	3304      	adds	r3, #4
 80056c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	491a      	ldr	r1, [pc, #104]	@ (8005734 <inc_lock+0x118>)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	440b      	add	r3, r1
 80056d0:	3308      	adds	r3, #8
 80056d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80056d4:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <inc_lock+0x118>)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4413      	add	r3, r2
 80056dc:	330c      	adds	r3, #12
 80056de:	2200      	movs	r2, #0
 80056e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <inc_lock+0xe0>
 80056e8:	4a12      	ldr	r2, [pc, #72]	@ (8005734 <inc_lock+0x118>)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	4413      	add	r3, r2
 80056f0:	330c      	adds	r3, #12
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <inc_lock+0xe0>
 80056f8:	2300      	movs	r3, #0
 80056fa:	e015      	b.n	8005728 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d108      	bne.n	8005714 <inc_lock+0xf8>
 8005702:	4a0c      	ldr	r2, [pc, #48]	@ (8005734 <inc_lock+0x118>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	4413      	add	r3, r2
 800570a:	330c      	adds	r3, #12
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	e001      	b.n	8005718 <inc_lock+0xfc>
 8005714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005718:	4906      	ldr	r1, [pc, #24]	@ (8005734 <inc_lock+0x118>)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	440b      	add	r3, r1
 8005720:	330c      	adds	r3, #12
 8005722:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	200001e4 	.word	0x200001e4

08005738 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	607b      	str	r3, [r7, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d825      	bhi.n	8005798 <dec_lock+0x60>
		n = Files[i].ctr;
 800574c:	4a17      	ldr	r2, [pc, #92]	@ (80057ac <dec_lock+0x74>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	4413      	add	r3, r2
 8005754:	330c      	adds	r3, #12
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800575a:	89fb      	ldrh	r3, [r7, #14]
 800575c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005760:	d101      	bne.n	8005766 <dec_lock+0x2e>
 8005762:	2300      	movs	r3, #0
 8005764:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <dec_lock+0x3a>
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	3b01      	subs	r3, #1
 8005770:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005772:	4a0e      	ldr	r2, [pc, #56]	@ (80057ac <dec_lock+0x74>)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	4413      	add	r3, r2
 800577a:	330c      	adds	r3, #12
 800577c:	89fa      	ldrh	r2, [r7, #14]
 800577e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005780:	89fb      	ldrh	r3, [r7, #14]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <dec_lock+0x5a>
 8005786:	4a09      	ldr	r2, [pc, #36]	@ (80057ac <dec_lock+0x74>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	4413      	add	r3, r2
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	737b      	strb	r3, [r7, #13]
 8005796:	e001      	b.n	800579c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005798:	2302      	movs	r3, #2
 800579a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800579c:	7b7b      	ldrb	r3, [r7, #13]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	200001e4 	.word	0x200001e4

080057b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e010      	b.n	80057e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80057be:	4a0d      	ldr	r2, [pc, #52]	@ (80057f4 <clear_lock+0x44>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	4413      	add	r3, r2
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d105      	bne.n	80057da <clear_lock+0x2a>
 80057ce:	4a09      	ldr	r2, [pc, #36]	@ (80057f4 <clear_lock+0x44>)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	4413      	add	r3, r2
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d9eb      	bls.n	80057be <clear_lock+0xe>
	}
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	200001e4 	.word	0x200001e4

080057f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d034      	beq.n	8005876 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	7858      	ldrb	r0, [r3, #1]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800581c:	2301      	movs	r3, #1
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	f7ff fd40 	bl	80052a4 <disk_write>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <sync_window+0x38>
			res = FR_DISK_ERR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
 800582e:	e022      	b.n	8005876 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	1ad2      	subs	r2, r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	429a      	cmp	r2, r3
 8005844:	d217      	bcs.n	8005876 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	789b      	ldrb	r3, [r3, #2]
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	e010      	b.n	8005870 <sync_window+0x78>
					wsect += fs->fsize;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7858      	ldrb	r0, [r3, #1]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005862:	2301      	movs	r3, #1
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	f7ff fd1d 	bl	80052a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3b01      	subs	r3, #1
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d8eb      	bhi.n	800584e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d01b      	beq.n	80058d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ffad 	bl	80057f8 <sync_window>
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d113      	bne.n	80058d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	7858      	ldrb	r0, [r3, #1]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80058b2:	2301      	movs	r3, #1
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	f7ff fcd5 	bl	8005264 <disk_read>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80058c0:	f04f 33ff 	mov.w	r3, #4294967295
 80058c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff87 	bl	80057f8 <sync_window>
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d158      	bne.n	80059a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d148      	bne.n	800598e <sync_fs+0xb2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	791b      	ldrb	r3, [r3, #4]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d144      	bne.n	800598e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3330      	adds	r3, #48	@ 0x30
 8005908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fda9 	bl	8005466 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3330      	adds	r3, #48	@ 0x30
 8005918:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800591c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fd38 	bl	8005396 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3330      	adds	r3, #48	@ 0x30
 800592a:	4921      	ldr	r1, [pc, #132]	@ (80059b0 <sync_fs+0xd4>)
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fd4d 	bl	80053cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3330      	adds	r3, #48	@ 0x30
 8005936:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800593a:	491e      	ldr	r1, [pc, #120]	@ (80059b4 <sync_fs+0xd8>)
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff fd45 	bl	80053cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3330      	adds	r3, #48	@ 0x30
 8005946:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	4619      	mov	r1, r3
 8005950:	4610      	mov	r0, r2
 8005952:	f7ff fd3b 	bl	80053cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3330      	adds	r3, #48	@ 0x30
 800595a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f7ff fd31 	bl	80053cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7858      	ldrb	r0, [r3, #1]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005982:	2301      	movs	r3, #1
 8005984:	f7ff fc8e 	bl	80052a4 <disk_write>
			fs->fsi_flag = 0;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2200      	movs	r2, #0
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fca4 	bl	80052e4 <disk_ioctl>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <sync_fs+0xca>
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	41615252 	.word	0x41615252
 80059b4:	61417272 	.word	0x61417272

080059b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	3b02      	subs	r3, #2
 80059c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	3b02      	subs	r3, #2
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d301      	bcc.n	80059d8 <clust2sect+0x20>
 80059d4:	2300      	movs	r3, #0
 80059d6:	e008      	b.n	80059ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	895b      	ldrh	r3, [r3, #10]
 80059dc:	461a      	mov	r2, r3
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	fb03 f202 	mul.w	r2, r3, r2
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	4413      	add	r3, r2
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d904      	bls.n	8005a16 <get_fat+0x20>
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d302      	bcc.n	8005a1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005a16:	2301      	movs	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e08e      	b.n	8005b3a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d061      	beq.n	8005aee <get_fat+0xf8>
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	dc7b      	bgt.n	8005b26 <get_fat+0x130>
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d002      	beq.n	8005a38 <get_fat+0x42>
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d041      	beq.n	8005aba <get_fat+0xc4>
 8005a36:	e076      	b.n	8005b26 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6a1a      	ldr	r2, [r3, #32]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	0a5b      	lsrs	r3, r3, #9
 8005a4e:	4413      	add	r3, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	6938      	ldr	r0, [r7, #16]
 8005a54:	f7ff ff14 	bl	8005880 <move_window>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d166      	bne.n	8005b2c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	60fa      	str	r2, [r7, #12]
 8005a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	0a5b      	lsrs	r3, r3, #9
 8005a7a:	4413      	add	r3, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6938      	ldr	r0, [r7, #16]
 8005a80:	f7ff fefe 	bl	8005880 <move_window>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d152      	bne.n	8005b30 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <get_fat+0xba>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	e002      	b.n	8005ab6 <get_fat+0xc0>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab6:	617b      	str	r3, [r7, #20]
			break;
 8005ab8:	e03f      	b.n	8005b3a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6938      	ldr	r0, [r7, #16]
 8005ac8:	f7ff feda 	bl	8005880 <move_window>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d130      	bne.n	8005b34 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005ae0:	4413      	add	r3, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fc1c 	bl	8005320 <ld_word>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	617b      	str	r3, [r7, #20]
			break;
 8005aec:	e025      	b.n	8005b3a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	09db      	lsrs	r3, r3, #7
 8005af6:	4413      	add	r3, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	6938      	ldr	r0, [r7, #16]
 8005afc:	f7ff fec0 	bl	8005880 <move_window>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d118      	bne.n	8005b38 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005b14:	4413      	add	r3, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fc1a 	bl	8005350 <ld_dword>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b22:	617b      	str	r3, [r7, #20]
			break;
 8005b24:	e009      	b.n	8005b3a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005b26:	2301      	movs	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e006      	b.n	8005b3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b2c:	bf00      	nop
 8005b2e:	e004      	b.n	8005b3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b38:	bf00      	nop
		}
	}

	return val;
 8005b3a:	697b      	ldr	r3, [r7, #20]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005b44:	b590      	push	{r4, r7, lr}
 8005b46:	b089      	sub	sp, #36	@ 0x24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005b50:	2302      	movs	r3, #2
 8005b52:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	f240 80d9 	bls.w	8005d0e <put_fat+0x1ca>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	f080 80d3 	bcs.w	8005d0e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	f000 8096 	beq.w	8005c9e <put_fat+0x15a>
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	f300 80cb 	bgt.w	8005d0e <put_fat+0x1ca>
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d002      	beq.n	8005b82 <put_fat+0x3e>
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d06e      	beq.n	8005c5e <put_fat+0x11a>
 8005b80:	e0c5      	b.n	8005d0e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	0a5b      	lsrs	r3, r3, #9
 8005b98:	4413      	add	r3, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff fe6f 	bl	8005880 <move_window>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f040 80a9 	bne.w	8005d00 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	61b9      	str	r1, [r7, #24]
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	4413      	add	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <put_fat+0xa4>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	b25a      	sxtb	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	b25b      	sxtb	r3, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e001      	b.n	8005bec <put_fat+0xa8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1a      	ldr	r2, [r3, #32]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	0a5b      	lsrs	r3, r3, #9
 8005bfe:	4413      	add	r3, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fe3c 	bl	8005880 <move_window>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c0c:	7ffb      	ldrb	r3, [r7, #31]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d178      	bne.n	8005d04 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1e:	4413      	add	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <put_fat+0xf0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e00e      	b.n	8005c52 <put_fat+0x10e>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	b25b      	sxtb	r3, r3
 8005c3a:	f023 030f 	bic.w	r3, r3, #15
 8005c3e:	b25a      	sxtb	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	b25b      	sxtb	r3, r3
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	70da      	strb	r2, [r3, #3]
			break;
 8005c5c:	e057      	b.n	8005d0e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	4413      	add	r3, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff fe08 	bl	8005880 <move_window>
 8005c70:	4603      	mov	r3, r0
 8005c72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d146      	bne.n	8005d08 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005c88:	4413      	add	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	b292      	uxth	r2, r2
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fb80 	bl	8005396 <st_word>
			fs->wflag = 1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	70da      	strb	r2, [r3, #3]
			break;
 8005c9c:	e037      	b.n	8005d0e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1a      	ldr	r2, [r3, #32]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	09db      	lsrs	r3, r3, #7
 8005ca6:	4413      	add	r3, r2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fde8 	bl	8005880 <move_window>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cb4:	7ffb      	ldrb	r3, [r7, #31]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d128      	bne.n	8005d0c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005cce:	4413      	add	r3, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fb3d 	bl	8005350 <ld_dword>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005cdc:	4323      	orrs	r3, r4
 8005cde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005cee:	4413      	add	r3, r2
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fb6a 	bl	80053cc <st_dword>
			fs->wflag = 1;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	70da      	strb	r2, [r3, #3]
			break;
 8005cfe:	e006      	b.n	8005d0e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005d00:	bf00      	nop
 8005d02:	e004      	b.n	8005d0e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005d04:	bf00      	nop
 8005d06:	e002      	b.n	8005d0e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005d08:	bf00      	nop
 8005d0a:	e000      	b.n	8005d0e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005d0c:	bf00      	nop
		}
	}
	return res;
 8005d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3724      	adds	r7, #36	@ 0x24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}

08005d18 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d904      	bls.n	8005d3e <remove_chain+0x26>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d301      	bcc.n	8005d42 <remove_chain+0x2a>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e04b      	b.n	8005dda <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	69b8      	ldr	r0, [r7, #24]
 8005d50:	f7ff fef8 	bl	8005b44 <put_fat>
 8005d54:	4603      	mov	r3, r0
 8005d56:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005d58:	7ffb      	ldrb	r3, [r7, #31]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <remove_chain+0x4a>
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	e03b      	b.n	8005dda <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff fe46 	bl	80059f6 <get_fat>
 8005d6a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d031      	beq.n	8005dd6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <remove_chain+0x64>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e02e      	b.n	8005dda <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d101      	bne.n	8005d88 <remove_chain+0x70>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e028      	b.n	8005dda <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d88:	2200      	movs	r2, #0
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	69b8      	ldr	r0, [r7, #24]
 8005d8e:	f7ff fed9 	bl	8005b44 <put_fat>
 8005d92:	4603      	mov	r3, r0
 8005d94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d96:	7ffb      	ldrb	r3, [r7, #31]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <remove_chain+0x88>
 8005d9c:	7ffb      	ldrb	r3, [r7, #31]
 8005d9e:	e01c      	b.n	8005dda <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	3b02      	subs	r3, #2
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d20b      	bcs.n	8005dc6 <remove_chain+0xae>
			fs->free_clst++;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	791b      	ldrb	r3, [r3, #4]
 8005dbc:	f043 0301 	orr.w	r3, r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d3c6      	bcc.n	8005d62 <remove_chain+0x4a>
 8005dd4:	e000      	b.n	8005dd8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005dd6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b088      	sub	sp, #32
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10d      	bne.n	8005e14 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <create_chain+0x2c>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d31b      	bcc.n	8005e46 <create_chain+0x64>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	e018      	b.n	8005e46 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fded 	bl	80059f6 <get_fat>
 8005e1c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d801      	bhi.n	8005e28 <create_chain+0x46>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e070      	b.n	8005f0a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d101      	bne.n	8005e34 <create_chain+0x52>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	e06a      	b.n	8005f0a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d201      	bcs.n	8005e42 <create_chain+0x60>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	e063      	b.n	8005f0a <create_chain+0x128>
		scl = clst;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d307      	bcc.n	8005e6a <create_chain+0x88>
				ncl = 2;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d901      	bls.n	8005e6a <create_chain+0x88>
 8005e66:	2300      	movs	r3, #0
 8005e68:	e04f      	b.n	8005f0a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e6a:	69f9      	ldr	r1, [r7, #28]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fdc2 	bl	80059f6 <get_fat>
 8005e72:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d003      	beq.n	8005e88 <create_chain+0xa6>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d101      	bne.n	8005e8c <create_chain+0xaa>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	e03e      	b.n	8005f0a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d1da      	bne.n	8005e4a <create_chain+0x68>
 8005e94:	2300      	movs	r3, #0
 8005e96:	e038      	b.n	8005f0a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e98:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9e:	69f9      	ldr	r1, [r7, #28]
 8005ea0:	6938      	ldr	r0, [r7, #16]
 8005ea2:	f7ff fe4f 	bl	8005b44 <put_fat>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <create_chain+0xe2>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d006      	beq.n	8005ec4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6938      	ldr	r0, [r7, #16]
 8005ebc:	f7ff fe42 	bl	8005b44 <put_fat>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <create_chain+0x116>
		fs->last_clst = ncl;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	3b02      	subs	r3, #2
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d804      	bhi.n	8005ee8 <create_chain+0x106>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	1e5a      	subs	r2, r3, #1
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	791b      	ldrb	r3, [r3, #4]
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	711a      	strb	r2, [r3, #4]
 8005ef6:	e007      	b.n	8005f08 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d102      	bne.n	8005f04 <create_chain+0x122>
 8005efe:	f04f 33ff 	mov.w	r3, #4294967295
 8005f02:	e000      	b.n	8005f06 <create_chain+0x124>
 8005f04:	2301      	movs	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005f08:	69fb      	ldr	r3, [r7, #28]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	3304      	adds	r3, #4
 8005f28:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	0a5b      	lsrs	r3, r3, #9
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	8952      	ldrh	r2, [r2, #10]
 8005f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1d1a      	adds	r2, r3, #4
 8005f3c:	613a      	str	r2, [r7, #16]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <clmt_clust+0x3a>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e010      	b.n	8005f6e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d307      	bcc.n	8005f64 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f62:	e7e9      	b.n	8005f38 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005f64:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f90:	d204      	bcs.n	8005f9c <dir_sdi+0x22>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e063      	b.n	8006068 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <dir_sdi+0x46>
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d902      	bls.n	8005fc0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10c      	bne.n	8005fe0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	8912      	ldrh	r2, [r2, #8]
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d301      	bcc.n	8005fd6 <dir_sdi+0x5c>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e048      	b.n	8006068 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	61da      	str	r2, [r3, #28]
 8005fde:	e029      	b.n	8006034 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	895b      	ldrh	r3, [r3, #10]
 8005fe4:	025b      	lsls	r3, r3, #9
 8005fe6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fe8:	e019      	b.n	800601e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6979      	ldr	r1, [r7, #20]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fd01 	bl	80059f6 <get_fat>
 8005ff4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d101      	bne.n	8006002 <dir_sdi+0x88>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e032      	b.n	8006068 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d904      	bls.n	8006012 <dir_sdi+0x98>
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	429a      	cmp	r2, r3
 8006010:	d301      	bcc.n	8006016 <dir_sdi+0x9c>
 8006012:	2302      	movs	r3, #2
 8006014:	e028      	b.n	8006068 <dir_sdi+0xee>
			ofs -= csz;
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	429a      	cmp	r2, r3
 8006024:	d2e1      	bcs.n	8005fea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006026:	6979      	ldr	r1, [r7, #20]
 8006028:	6938      	ldr	r0, [r7, #16]
 800602a:	f7ff fcc5 	bl	80059b8 <clust2sect>
 800602e:	4602      	mov	r2, r0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <dir_sdi+0xcc>
 8006042:	2302      	movs	r3, #2
 8006044:	e010      	b.n	8006068 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	0a5b      	lsrs	r3, r3, #9
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006060:	441a      	add	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	3320      	adds	r3, #32
 8006086:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <dir_next+0x28>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006096:	d301      	bcc.n	800609c <dir_next+0x2c>
 8006098:	2304      	movs	r3, #4
 800609a:	e0aa      	b.n	80061f2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8098 	bne.w	80061d8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	8912      	ldrh	r2, [r2, #8]
 80060c2:	4293      	cmp	r3, r2
 80060c4:	f0c0 8088 	bcc.w	80061d8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
 80060ce:	2304      	movs	r3, #4
 80060d0:	e08f      	b.n	80061f2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	0a5b      	lsrs	r3, r3, #9
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	8952      	ldrh	r2, [r2, #10]
 80060da:	3a01      	subs	r2, #1
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d17a      	bne.n	80061d8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f7ff fc83 	bl	80059f6 <get_fat>
 80060f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d801      	bhi.n	80060fc <dir_next+0x8c>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e07a      	b.n	80061f2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d101      	bne.n	8006108 <dir_next+0x98>
 8006104:	2301      	movs	r3, #1
 8006106:	e074      	b.n	80061f2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	429a      	cmp	r2, r3
 8006110:	d358      	bcc.n	80061c4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	61da      	str	r2, [r3, #28]
 800611e:	2304      	movs	r3, #4
 8006120:	e067      	b.n	80061f2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7ff fe59 	bl	8005de2 <create_chain>
 8006130:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <dir_next+0xcc>
 8006138:	2307      	movs	r3, #7
 800613a:	e05a      	b.n	80061f2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <dir_next+0xd6>
 8006142:	2302      	movs	r3, #2
 8006144:	e055      	b.n	80061f2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d101      	bne.n	8006152 <dir_next+0xe2>
 800614e:	2301      	movs	r3, #1
 8006150:	e04f      	b.n	80061f2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fb50 	bl	80057f8 <sync_window>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <dir_next+0xf2>
 800615e:	2301      	movs	r3, #1
 8006160:	e047      	b.n	80061f2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3330      	adds	r3, #48	@ 0x30
 8006166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff f97a 	bl	8005466 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	6979      	ldr	r1, [r7, #20]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff fc1d 	bl	80059b8 <clust2sect>
 800617e:	4602      	mov	r2, r0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006184:	e012      	b.n	80061ac <dir_next+0x13c>
						fs->wflag = 1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fb33 	bl	80057f8 <sync_window>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <dir_next+0x12c>
 8006198:	2301      	movs	r3, #1
 800619a:	e02a      	b.n	80061f2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3301      	adds	r3, #1
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	895b      	ldrh	r3, [r3, #10]
 80061b0:	461a      	mov	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d3e6      	bcc.n	8006186 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80061ca:	6979      	ldr	r1, [r7, #20]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fbf3 	bl	80059b8 <clust2sect>
 80061d2:	4602      	mov	r2, r0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ea:	441a      	add	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800620a:	2100      	movs	r1, #0
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff feb4 	bl	8005f7a <dir_sdi>
 8006212:	4603      	mov	r3, r0
 8006214:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d12b      	bne.n	8006274 <dir_alloc+0x7a>
		n = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fb2a 	bl	8005880 <move_window>
 800622c:	4603      	mov	r3, r0
 800622e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d11d      	bne.n	8006272 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2be5      	cmp	r3, #229	@ 0xe5
 800623e:	d004      	beq.n	800624a <dir_alloc+0x50>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d107      	bne.n	800625a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d102      	bne.n	800625e <dir_alloc+0x64>
 8006258:	e00c      	b.n	8006274 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800625a:	2300      	movs	r3, #0
 800625c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800625e:	2101      	movs	r1, #1
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff05 	bl	8006070 <dir_next>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0d7      	beq.n	8006220 <dir_alloc+0x26>
 8006270:	e000      	b.n	8006274 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006272:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b04      	cmp	r3, #4
 8006278:	d101      	bne.n	800627e <dir_alloc+0x84>
 800627a:	2307      	movs	r3, #7
 800627c:	75fb      	strb	r3, [r7, #23]
	return res;
 800627e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	331a      	adds	r3, #26
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff f842 	bl	8005320 <ld_word>
 800629c:	4603      	mov	r3, r0
 800629e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d109      	bne.n	80062bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	3314      	adds	r3, #20
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff f837 	bl	8005320 <ld_word>
 80062b2:	4603      	mov	r3, r0
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80062bc:	68fb      	ldr	r3, [r7, #12]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	331a      	adds	r3, #26
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	b292      	uxth	r2, r2
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff f85a 	bl	8005396 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d109      	bne.n	80062fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f103 0214 	add.w	r2, r3, #20
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f7ff f84c 	bl	8005396 <st_word>
	}
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006314:	2100      	movs	r1, #0
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fe2f 	bl	8005f7a <dir_sdi>
 800631c:	4603      	mov	r3, r0
 800631e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <dir_find+0x24>
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	e03e      	b.n	80063a8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	4619      	mov	r1, r3
 8006330:	6938      	ldr	r0, [r7, #16]
 8006332:	f7ff faa5 	bl	8005880 <move_window>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d12f      	bne.n	80063a0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <dir_find+0x4e>
 800634e:	2304      	movs	r3, #4
 8006350:	75fb      	strb	r3, [r7, #23]
 8006352:	e028      	b.n	80063a6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	330b      	adds	r3, #11
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006360:	b2da      	uxtb	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	330b      	adds	r3, #11
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <dir_find+0x86>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a18      	ldr	r0, [r3, #32]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3324      	adds	r3, #36	@ 0x24
 800637e:	220b      	movs	r2, #11
 8006380:	4619      	mov	r1, r3
 8006382:	f7ff f88b 	bl	800549c <mem_cmp>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800638c:	2100      	movs	r1, #0
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fe6e 	bl	8006070 <dir_next>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c5      	beq.n	800632a <dir_find+0x24>
 800639e:	e002      	b.n	80063a6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80063a4:	bf00      	nop

	return res;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80063be:	2101      	movs	r1, #1
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ff1a 	bl	80061fa <dir_alloc>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11c      	bne.n	800640a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4619      	mov	r1, r3
 80063d6:	68b8      	ldr	r0, [r7, #8]
 80063d8:	f7ff fa52 	bl	8005880 <move_window>
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d111      	bne.n	800640a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	2220      	movs	r2, #32
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff f839 	bl	8005466 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a18      	ldr	r0, [r3, #32]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3324      	adds	r3, #36	@ 0x24
 80063fc:	220b      	movs	r2, #11
 80063fe:	4619      	mov	r1, r3
 8006400:	f7ff f810 	bl	8005424 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2201      	movs	r2, #1
 8006408:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3324      	adds	r3, #36	@ 0x24
 8006428:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800642a:	220b      	movs	r2, #11
 800642c:	2120      	movs	r1, #32
 800642e:	68b8      	ldr	r0, [r7, #8]
 8006430:	f7ff f819 	bl	8005466 <mem_set>
	si = i = 0; ni = 8;
 8006434:	2300      	movs	r3, #0
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	2308      	movs	r3, #8
 800643e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	61fa      	str	r2, [r7, #28]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800644e:	7efb      	ldrb	r3, [r7, #27]
 8006450:	2b20      	cmp	r3, #32
 8006452:	d94e      	bls.n	80064f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006454:	7efb      	ldrb	r3, [r7, #27]
 8006456:	2b2f      	cmp	r3, #47	@ 0x2f
 8006458:	d006      	beq.n	8006468 <create_name+0x54>
 800645a:	7efb      	ldrb	r3, [r7, #27]
 800645c:	2b5c      	cmp	r3, #92	@ 0x5c
 800645e:	d110      	bne.n	8006482 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006460:	e002      	b.n	8006468 <create_name+0x54>
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	3301      	adds	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b2f      	cmp	r3, #47	@ 0x2f
 8006472:	d0f6      	beq.n	8006462 <create_name+0x4e>
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b5c      	cmp	r3, #92	@ 0x5c
 800647e:	d0f0      	beq.n	8006462 <create_name+0x4e>
			break;
 8006480:	e038      	b.n	80064f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006482:	7efb      	ldrb	r3, [r7, #27]
 8006484:	2b2e      	cmp	r3, #46	@ 0x2e
 8006486:	d003      	beq.n	8006490 <create_name+0x7c>
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	429a      	cmp	r2, r3
 800648e:	d30c      	bcc.n	80064aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b0b      	cmp	r3, #11
 8006494:	d002      	beq.n	800649c <create_name+0x88>
 8006496:	7efb      	ldrb	r3, [r7, #27]
 8006498:	2b2e      	cmp	r3, #46	@ 0x2e
 800649a:	d001      	beq.n	80064a0 <create_name+0x8c>
 800649c:	2306      	movs	r3, #6
 800649e:	e044      	b.n	800652a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80064a0:	2308      	movs	r3, #8
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	230b      	movs	r3, #11
 80064a6:	617b      	str	r3, [r7, #20]
			continue;
 80064a8:	e022      	b.n	80064f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80064aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da04      	bge.n	80064bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80064b2:	7efb      	ldrb	r3, [r7, #27]
 80064b4:	3b80      	subs	r3, #128	@ 0x80
 80064b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006534 <create_name+0x120>)
 80064b8:	5cd3      	ldrb	r3, [r2, r3]
 80064ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80064bc:	7efb      	ldrb	r3, [r7, #27]
 80064be:	4619      	mov	r1, r3
 80064c0:	481d      	ldr	r0, [pc, #116]	@ (8006538 <create_name+0x124>)
 80064c2:	f7ff f812 	bl	80054ea <chk_chr>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <create_name+0xbc>
 80064cc:	2306      	movs	r3, #6
 80064ce:	e02c      	b.n	800652a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80064d0:	7efb      	ldrb	r3, [r7, #27]
 80064d2:	2b60      	cmp	r3, #96	@ 0x60
 80064d4:	d905      	bls.n	80064e2 <create_name+0xce>
 80064d6:	7efb      	ldrb	r3, [r7, #27]
 80064d8:	2b7a      	cmp	r3, #122	@ 0x7a
 80064da:	d802      	bhi.n	80064e2 <create_name+0xce>
 80064dc:	7efb      	ldrb	r3, [r7, #27]
 80064de:	3b20      	subs	r3, #32
 80064e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	613a      	str	r2, [r7, #16]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	4413      	add	r3, r2
 80064ec:	7efa      	ldrb	r2, [r7, #27]
 80064ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80064f0:	e7a6      	b.n	8006440 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80064f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	441a      	add	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <create_name+0xf4>
 8006504:	2306      	movs	r3, #6
 8006506:	e010      	b.n	800652a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2be5      	cmp	r3, #229	@ 0xe5
 800650e:	d102      	bne.n	8006516 <create_name+0x102>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2205      	movs	r2, #5
 8006514:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006516:	7efb      	ldrb	r3, [r7, #27]
 8006518:	2b20      	cmp	r3, #32
 800651a:	d801      	bhi.n	8006520 <create_name+0x10c>
 800651c:	2204      	movs	r2, #4
 800651e:	e000      	b.n	8006522 <create_name+0x10e>
 8006520:	2200      	movs	r2, #0
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	330b      	adds	r3, #11
 8006526:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006528:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	080078d4 	.word	0x080078d4
 8006538:	08007864 	.word	0x08007864

0800653c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006550:	e002      	b.n	8006558 <follow_path+0x1c>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b2f      	cmp	r3, #47	@ 0x2f
 800655e:	d0f8      	beq.n	8006552 <follow_path+0x16>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b5c      	cmp	r3, #92	@ 0x5c
 8006566:	d0f4      	beq.n	8006552 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2200      	movs	r2, #0
 800656c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b1f      	cmp	r3, #31
 8006574:	d80a      	bhi.n	800658c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2280      	movs	r2, #128	@ 0x80
 800657a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800657e:	2100      	movs	r1, #0
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fcfa 	bl	8005f7a <dir_sdi>
 8006586:	4603      	mov	r3, r0
 8006588:	75fb      	strb	r3, [r7, #23]
 800658a:	e043      	b.n	8006614 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800658c:	463b      	mov	r3, r7
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff ff3f 	bl	8006414 <create_name>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d134      	bne.n	800660a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff feb0 	bl	8006306 <dir_find>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80065b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d127      	bne.n	800660e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80065be:	7afb      	ldrb	r3, [r7, #11]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d122      	bne.n	800660e <follow_path+0xd2>
 80065c8:	2305      	movs	r3, #5
 80065ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80065cc:	e01f      	b.n	800660e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11c      	bne.n	8006612 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	799b      	ldrb	r3, [r3, #6]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80065e4:	2305      	movs	r3, #5
 80065e6:	75fb      	strb	r3, [r7, #23]
 80065e8:	e014      	b.n	8006614 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f8:	4413      	add	r3, r2
 80065fa:	4619      	mov	r1, r3
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7ff fe43 	bl	8006288 <ld_clust>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006608:	e7c0      	b.n	800658c <follow_path+0x50>
			if (res != FR_OK) break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <follow_path+0xd8>
				break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006612:	bf00      	nop
			}
		}
	}

	return res;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800661e:	b480      	push	{r7}
 8006620:	b087      	sub	sp, #28
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d031      	beq.n	8006698 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e002      	b.n	8006642 <get_ldnumber+0x24>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	3301      	adds	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b20      	cmp	r3, #32
 8006648:	d903      	bls.n	8006652 <get_ldnumber+0x34>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006650:	d1f4      	bne.n	800663c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b3a      	cmp	r3, #58	@ 0x3a
 8006658:	d11c      	bne.n	8006694 <get_ldnumber+0x76>
			tp = *path;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	60fa      	str	r2, [r7, #12]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	3b30      	subs	r3, #48	@ 0x30
 800666a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b09      	cmp	r3, #9
 8006670:	d80e      	bhi.n	8006690 <get_ldnumber+0x72>
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	429a      	cmp	r2, r3
 8006678:	d10a      	bne.n	8006690 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d107      	bne.n	8006690 <get_ldnumber+0x72>
					vol = (int)i;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	e002      	b.n	800669a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006694:	2300      	movs	r3, #0
 8006696:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006698:	693b      	ldr	r3, [r7, #16]
}
 800669a:	4618      	mov	r0, r3
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	70da      	strb	r2, [r3, #3]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295
 80066be:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff f8dc 	bl	8005880 <move_window>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <check_fs+0x2a>
 80066ce:	2304      	movs	r3, #4
 80066d0:	e038      	b.n	8006744 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3330      	adds	r3, #48	@ 0x30
 80066d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fe20 	bl	8005320 <ld_word>
 80066e0:	4603      	mov	r3, r0
 80066e2:	461a      	mov	r2, r3
 80066e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <check_fs+0x48>
 80066ec:	2303      	movs	r3, #3
 80066ee:	e029      	b.n	8006744 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80066f6:	2be9      	cmp	r3, #233	@ 0xe9
 80066f8:	d009      	beq.n	800670e <check_fs+0x66>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006700:	2beb      	cmp	r3, #235	@ 0xeb
 8006702:	d11e      	bne.n	8006742 <check_fs+0x9a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800670a:	2b90      	cmp	r3, #144	@ 0x90
 800670c:	d119      	bne.n	8006742 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3330      	adds	r3, #48	@ 0x30
 8006712:	3336      	adds	r3, #54	@ 0x36
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fe1b 	bl	8005350 <ld_dword>
 800671a:	4603      	mov	r3, r0
 800671c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006720:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <check_fs+0xa4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d101      	bne.n	800672a <check_fs+0x82>
 8006726:	2300      	movs	r3, #0
 8006728:	e00c      	b.n	8006744 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3330      	adds	r3, #48	@ 0x30
 800672e:	3352      	adds	r3, #82	@ 0x52
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe fe0d 	bl	8005350 <ld_dword>
 8006736:	4603      	mov	r3, r0
 8006738:	4a05      	ldr	r2, [pc, #20]	@ (8006750 <check_fs+0xa8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <check_fs+0x9a>
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006742:	2302      	movs	r3, #2
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	00544146 	.word	0x00544146
 8006750:	33544146 	.word	0x33544146

08006754 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b096      	sub	sp, #88	@ 0x58
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff ff58 	bl	800661e <get_ldnumber>
 800676e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006772:	2b00      	cmp	r3, #0
 8006774:	da01      	bge.n	800677a <find_volume+0x26>
 8006776:	230b      	movs	r3, #11
 8006778:	e22d      	b.n	8006bd6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800677a:	4aa1      	ldr	r2, [pc, #644]	@ (8006a00 <find_volume+0x2ac>)
 800677c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800677e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006782:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <find_volume+0x3a>
 800678a:	230c      	movs	r3, #12
 800678c:	e223      	b.n	8006bd6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006792:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	f023 0301 	bic.w	r3, r3, #1
 800679a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01a      	beq.n	80067da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80067a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fd19 	bl	80051e0 <disk_status>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80067b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <find_volume+0x82>
 80067c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80067d2:	230a      	movs	r3, #10
 80067d4:	e1ff      	b.n	8006bd6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80067d6:	2300      	movs	r3, #0
 80067d8:	e1fd      	b.n	8006bd6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80067e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80067e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fd11 	bl	8005214 <disk_initialize>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80067f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006804:	2303      	movs	r3, #3
 8006806:	e1e6      	b.n	8006bd6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <find_volume+0xca>
 800680e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800681a:	230a      	movs	r3, #10
 800681c:	e1db      	b.n	8006bd6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006822:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006824:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006826:	f7ff ff3f 	bl	80066a8 <check_fs>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006830:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006834:	2b02      	cmp	r3, #2
 8006836:	d149      	bne.n	80068cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006838:	2300      	movs	r3, #0
 800683a:	643b      	str	r3, [r7, #64]	@ 0x40
 800683c:	e01e      	b.n	800687c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800684c:	4413      	add	r3, r2
 800684e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	3304      	adds	r3, #4
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <find_volume+0x114>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	3308      	adds	r3, #8
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fd76 	bl	8005350 <ld_dword>
 8006864:	4602      	mov	r2, r0
 8006866:	e000      	b.n	800686a <find_volume+0x116>
 8006868:	2200      	movs	r2, #0
 800686a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	3358      	adds	r3, #88	@ 0x58
 8006870:	443b      	add	r3, r7
 8006872:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006878:	3301      	adds	r3, #1
 800687a:	643b      	str	r3, [r7, #64]	@ 0x40
 800687c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800687e:	2b03      	cmp	r3, #3
 8006880:	d9dd      	bls.n	800683e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006882:	2300      	movs	r3, #0
 8006884:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <find_volume+0x13e>
 800688c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800688e:	3b01      	subs	r3, #1
 8006890:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	3358      	adds	r3, #88	@ 0x58
 8006898:	443b      	add	r3, r7
 800689a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800689e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80068a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <find_volume+0x15e>
 80068a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80068aa:	f7ff fefd 	bl	80066a8 <check_fs>
 80068ae:	4603      	mov	r3, r0
 80068b0:	e000      	b.n	80068b4 <find_volume+0x160>
 80068b2:	2303      	movs	r3, #3
 80068b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80068b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d905      	bls.n	80068cc <find_volume+0x178>
 80068c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c2:	3301      	adds	r3, #1
 80068c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d9e2      	bls.n	8006892 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d101      	bne.n	80068d8 <find_volume+0x184>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e17e      	b.n	8006bd6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d901      	bls.n	80068e4 <find_volume+0x190>
 80068e0:	230d      	movs	r3, #13
 80068e2:	e178      	b.n	8006bd6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	3330      	adds	r3, #48	@ 0x30
 80068e8:	330b      	adds	r3, #11
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fd18 	bl	8005320 <ld_word>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f6:	d001      	beq.n	80068fc <find_volume+0x1a8>
 80068f8:	230d      	movs	r3, #13
 80068fa:	e16c      	b.n	8006bd6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	3330      	adds	r3, #48	@ 0x30
 8006900:	3316      	adds	r3, #22
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fd0c 	bl	8005320 <ld_word>
 8006908:	4603      	mov	r3, r0
 800690a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800690c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <find_volume+0x1cc>
 8006912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006914:	3330      	adds	r3, #48	@ 0x30
 8006916:	3324      	adds	r3, #36	@ 0x24
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe fd19 	bl	8005350 <ld_dword>
 800691e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006924:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	789b      	ldrb	r3, [r3, #2]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d005      	beq.n	8006944 <find_volume+0x1f0>
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	789b      	ldrb	r3, [r3, #2]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d001      	beq.n	8006944 <find_volume+0x1f0>
 8006940:	230d      	movs	r3, #13
 8006942:	e148      	b.n	8006bd6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006946:	789b      	ldrb	r3, [r3, #2]
 8006948:	461a      	mov	r2, r3
 800694a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006958:	461a      	mov	r2, r3
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	895b      	ldrh	r3, [r3, #10]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <find_volume+0x224>
 8006966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006968:	895b      	ldrh	r3, [r3, #10]
 800696a:	461a      	mov	r2, r3
 800696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696e:	895b      	ldrh	r3, [r3, #10]
 8006970:	3b01      	subs	r3, #1
 8006972:	4013      	ands	r3, r2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <find_volume+0x228>
 8006978:	230d      	movs	r3, #13
 800697a:	e12c      	b.n	8006bd6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	3330      	adds	r3, #48	@ 0x30
 8006980:	3311      	adds	r3, #17
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fccc 	bl	8005320 <ld_word>
 8006988:	4603      	mov	r3, r0
 800698a:	461a      	mov	r2, r3
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	891b      	ldrh	r3, [r3, #8]
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <find_volume+0x24e>
 800699e:	230d      	movs	r3, #13
 80069a0:	e119      	b.n	8006bd6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	3330      	adds	r3, #48	@ 0x30
 80069a6:	3313      	adds	r3, #19
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fcb9 	bl	8005320 <ld_word>
 80069ae:	4603      	mov	r3, r0
 80069b0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d106      	bne.n	80069c6 <find_volume+0x272>
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	3330      	adds	r3, #48	@ 0x30
 80069bc:	3320      	adds	r3, #32
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fcc6 	bl	8005350 <ld_dword>
 80069c4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	3330      	adds	r3, #48	@ 0x30
 80069ca:	330e      	adds	r3, #14
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fca7 	bl	8005320 <ld_word>
 80069d2:	4603      	mov	r3, r0
 80069d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <find_volume+0x28c>
 80069dc:	230d      	movs	r3, #13
 80069de:	e0fa      	b.n	8006bd6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80069e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e4:	4413      	add	r3, r2
 80069e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069e8:	8912      	ldrh	r2, [r2, #8]
 80069ea:	0912      	lsrs	r2, r2, #4
 80069ec:	b292      	uxth	r2, r2
 80069ee:	4413      	add	r3, r2
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80069f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d204      	bcs.n	8006a04 <find_volume+0x2b0>
 80069fa:	230d      	movs	r3, #13
 80069fc:	e0eb      	b.n	8006bd6 <find_volume+0x482>
 80069fe:	bf00      	nop
 8006a00:	200001dc 	.word	0x200001dc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a0c:	8952      	ldrh	r2, [r2, #10]
 8006a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <find_volume+0x2ca>
 8006a1a:	230d      	movs	r3, #13
 8006a1c:	e0db      	b.n	8006bd6 <find_volume+0x482>
		fmt = FS_FAT32;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d802      	bhi.n	8006a34 <find_volume+0x2e0>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d802      	bhi.n	8006a44 <find_volume+0x2f0>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a50:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a56:	441a      	add	r2, r3
 8006a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006a5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a60:	441a      	add	r2, r3
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8006a66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d11e      	bne.n	8006aac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	3330      	adds	r3, #48	@ 0x30
 8006a72:	332a      	adds	r3, #42	@ 0x2a
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fe fc53 	bl	8005320 <ld_word>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <find_volume+0x330>
 8006a80:	230d      	movs	r3, #13
 8006a82:	e0a8      	b.n	8006bd6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	891b      	ldrh	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <find_volume+0x33c>
 8006a8c:	230d      	movs	r3, #13
 8006a8e:	e0a2      	b.n	8006bd6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	3330      	adds	r3, #48	@ 0x30
 8006a94:	332c      	adds	r3, #44	@ 0x2c
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fc5a 	bl	8005350 <ld_dword>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aaa:	e01f      	b.n	8006aec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	891b      	ldrh	r3, [r3, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <find_volume+0x364>
 8006ab4:	230d      	movs	r3, #13
 8006ab6:	e08e      	b.n	8006bd6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006abe:	441a      	add	r2, r3
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d103      	bne.n	8006ad4 <find_volume+0x380>
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	e00a      	b.n	8006aea <find_volume+0x396>
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4413      	add	r3, r2
 8006ade:	085a      	lsrs	r2, r3, #1
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006aea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006af2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006af6:	0a5b      	lsrs	r3, r3, #9
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d201      	bcs.n	8006b00 <find_volume+0x3ac>
 8006afc:	230d      	movs	r3, #13
 8006afe:	e06a      	b.n	8006bd6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	611a      	str	r2, [r3, #16]
 8006b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b12:	2280      	movs	r2, #128	@ 0x80
 8006b14:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d149      	bne.n	8006bb2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	3330      	adds	r3, #48	@ 0x30
 8006b22:	3330      	adds	r3, #48	@ 0x30
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fbfb 	bl	8005320 <ld_word>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d140      	bne.n	8006bb2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b32:	3301      	adds	r3, #1
 8006b34:	4619      	mov	r1, r3
 8006b36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b38:	f7fe fea2 	bl	8005880 <move_window>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d137      	bne.n	8006bb2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b44:	2200      	movs	r2, #0
 8006b46:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4a:	3330      	adds	r3, #48	@ 0x30
 8006b4c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fe fbe5 	bl	8005320 <ld_word>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d127      	bne.n	8006bb2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b64:	3330      	adds	r3, #48	@ 0x30
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fbf2 	bl	8005350 <ld_dword>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <find_volume+0x48c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d11e      	bne.n	8006bb2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	3330      	adds	r3, #48	@ 0x30
 8006b78:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fbe7 	bl	8005350 <ld_dword>
 8006b82:	4603      	mov	r3, r0
 8006b84:	4a17      	ldr	r2, [pc, #92]	@ (8006be4 <find_volume+0x490>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d113      	bne.n	8006bb2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	3330      	adds	r3, #48	@ 0x30
 8006b8e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fbdc 	bl	8005350 <ld_dword>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	3330      	adds	r3, #48	@ 0x30
 8006ba2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe fbd2 	bl	8005350 <ld_dword>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006bb8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006bba:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <find_volume+0x494>)
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	4b09      	ldr	r3, [pc, #36]	@ (8006be8 <find_volume+0x494>)
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	4b08      	ldr	r3, [pc, #32]	@ (8006be8 <find_volume+0x494>)
 8006bc8:	881a      	ldrh	r2, [r3, #0]
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006bce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bd0:	f7fe fdee 	bl	80057b0 <clear_lock>
#endif
	return FR_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3758      	adds	r7, #88	@ 0x58
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	41615252 	.word	0x41615252
 8006be4:	61417272 	.word	0x61417272
 8006be8:	200001e0 	.word	0x200001e0

08006bec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006bf6:	2309      	movs	r3, #9
 8006bf8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01c      	beq.n	8006c3a <validate+0x4e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <validate+0x4e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d013      	beq.n	8006c3a <validate+0x4e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	889a      	ldrh	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d10c      	bne.n	8006c3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fada 	bl	80051e0 <disk_status>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <validate+0x4e>
			res = FR_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <validate+0x5a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	e000      	b.n	8006c48 <validate+0x5c>
 8006c46:	2300      	movs	r3, #0
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	6013      	str	r3, [r2, #0]
	return res;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	4613      	mov	r3, r2
 8006c64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c6a:	f107 0310 	add.w	r3, r7, #16
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fcd5 	bl	800661e <get_ldnumber>
 8006c74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	da01      	bge.n	8006c80 <f_mount+0x28>
 8006c7c:	230b      	movs	r3, #11
 8006c7e:	e02b      	b.n	8006cd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c80:	4a17      	ldr	r2, [pc, #92]	@ (8006ce0 <f_mount+0x88>)
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006c90:	69b8      	ldr	r0, [r7, #24]
 8006c92:	f7fe fd8d 	bl	80057b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	490d      	ldr	r1, [pc, #52]	@ (8006ce0 <f_mount+0x88>)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <f_mount+0x66>
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d001      	beq.n	8006cc2 <f_mount+0x6a>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e00a      	b.n	8006cd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006cc2:	f107 010c 	add.w	r1, r7, #12
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fd41 	bl	8006754 <find_volume>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	200001dc 	.word	0x200001dc

08006ce4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b098      	sub	sp, #96	@ 0x60
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <f_open+0x18>
 8006cf8:	2309      	movs	r3, #9
 8006cfa:	e1a9      	b.n	8007050 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d04:	79fa      	ldrb	r2, [r7, #7]
 8006d06:	f107 0110 	add.w	r1, r7, #16
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fd20 	bl	8006754 <find_volume>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 818d 	bne.w	800703e <f_open+0x35a>
		dj.obj.fs = fs;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	f107 0314 	add.w	r3, r7, #20
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fc03 	bl	800653c <follow_path>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d118      	bne.n	8006d76 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d48:	b25b      	sxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da03      	bge.n	8006d56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d4e:	2306      	movs	r3, #6
 8006d50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006d54:	e00f      	b.n	8006d76 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	bf8c      	ite	hi
 8006d5c:	2301      	movhi	r3, #1
 8006d5e:	2300      	movls	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	f107 0314 	add.w	r3, r7, #20
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe fbd8 	bl	8005520 <chk_lock>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	f003 031c 	and.w	r3, r3, #28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d07f      	beq.n	8006e80 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006d80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d017      	beq.n	8006db8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d10e      	bne.n	8006dae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d90:	f7fe fc22 	bl	80055d8 <enq_lock>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d006      	beq.n	8006da8 <f_open+0xc4>
 8006d9a:	f107 0314 	add.w	r3, r7, #20
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fb06 	bl	80063b0 <dir_register>
 8006da4:	4603      	mov	r3, r0
 8006da6:	e000      	b.n	8006daa <f_open+0xc6>
 8006da8:	2312      	movs	r3, #18
 8006daa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	f043 0308 	orr.w	r3, r3, #8
 8006db4:	71fb      	strb	r3, [r7, #7]
 8006db6:	e010      	b.n	8006dda <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006db8:	7ebb      	ldrb	r3, [r7, #26]
 8006dba:	f003 0311 	and.w	r3, r3, #17
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <f_open+0xe6>
					res = FR_DENIED;
 8006dc2:	2307      	movs	r3, #7
 8006dc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006dc8:	e007      	b.n	8006dda <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <f_open+0xf6>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d168      	bne.n	8006eb4 <f_open+0x1d0>
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d063      	beq.n	8006eb4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006dec:	f7fe f88c 	bl	8004f08 <get_fattime>
 8006df0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df4:	330e      	adds	r3, #14
 8006df6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fae7 	bl	80053cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e00:	3316      	adds	r3, #22
 8006e02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe fae1 	bl	80053cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0c:	330b      	adds	r3, #11
 8006e0e:	2220      	movs	r2, #32
 8006e10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e16:	4611      	mov	r1, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fa35 	bl	8006288 <ld_clust>
 8006e1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e24:	2200      	movs	r2, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff fa4d 	bl	80062c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2e:	331c      	adds	r3, #28
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe faca 	bl	80053cc <st_dword>
					fs->wflag = 1;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d037      	beq.n	8006eb4 <f_open+0x1d0>
						dw = fs->winsect;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006e4a:	f107 0314 	add.w	r3, r7, #20
 8006e4e:	2200      	movs	r2, #0
 8006e50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe ff60 	bl	8005d18 <remove_chain>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d126      	bne.n	8006eb4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fd08 	bl	8005880 <move_window>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e7a:	3a01      	subs	r2, #1
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	e019      	b.n	8006eb4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d115      	bne.n	8006eb4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e88:	7ebb      	ldrb	r3, [r7, #26]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <f_open+0x1b6>
					res = FR_NO_FILE;
 8006e92:	2304      	movs	r3, #4
 8006e94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006e98:	e00c      	b.n	8006eb4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <f_open+0x1d0>
 8006ea4:	7ebb      	ldrb	r3, [r7, #26]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <f_open+0x1d0>
						res = FR_DENIED;
 8006eae:	2307      	movs	r3, #7
 8006eb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d126      	bne.n	8006f0a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ecc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	bf8c      	ite	hi
 8006ee2:	2301      	movhi	r3, #1
 8006ee4:	2300      	movls	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f107 0314 	add.w	r3, r7, #20
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fb93 	bl	800561c <inc_lock>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <f_open+0x226>
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 8095 	bne.w	800703e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff f9b4 	bl	8006288 <ld_clust>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f28:	331c      	adds	r3, #28
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fa10 	bl	8005350 <ld_dword>
 8006f30:	4602      	mov	r2, r0
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	88da      	ldrh	r2, [r3, #6]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	79fa      	ldrb	r2, [r7, #7]
 8006f4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3330      	adds	r3, #48	@ 0x30
 8006f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fa7a 	bl	8005466 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d060      	beq.n	800703e <f_open+0x35a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05c      	beq.n	800703e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	895b      	ldrh	r3, [r3, #10]
 8006f90:	025b      	lsls	r3, r3, #9
 8006f92:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fa0:	e016      	b.n	8006fd0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fd25 	bl	80059f6 <get_fat>
 8006fac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d802      	bhi.n	8006fba <f_open+0x2d6>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d102      	bne.n	8006fc8 <f_open+0x2e4>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <f_open+0x2fc>
 8006fd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d8e0      	bhi.n	8006fa2 <f_open+0x2be>
				}
				fp->clust = clst;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fe4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d127      	bne.n	800703e <f_open+0x35a>
 8006fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d022      	beq.n	800703e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fcdb 	bl	80059b8 <clust2sect>
 8007002:	6478      	str	r0, [r7, #68]	@ 0x44
 8007004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <f_open+0x32e>
						res = FR_INT_ERR;
 800700a:	2302      	movs	r3, #2
 800700c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007010:	e015      	b.n	800703e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007014:	0a5a      	lsrs	r2, r3, #9
 8007016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007018:	441a      	add	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	7858      	ldrb	r0, [r3, #1]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	2301      	movs	r3, #1
 800702e:	f7fe f919 	bl	8005264 <disk_read>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <f_open+0x35a>
 8007038:	2301      	movs	r3, #1
 800703a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800703e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <f_open+0x368>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800704c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007050:	4618      	mov	r0, r3
 8007052:	3760      	adds	r7, #96	@ 0x60
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08e      	sub	sp, #56	@ 0x38
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f107 0214 	add.w	r2, r7, #20
 8007076:	4611      	mov	r1, r2
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fdb7 	bl	8006bec <validate>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007084:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007088:	2b00      	cmp	r3, #0
 800708a:	d107      	bne.n	800709c <f_read+0x44>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	7d5b      	ldrb	r3, [r3, #21]
 8007090:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007094:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <f_read+0x4a>
 800709c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070a0:	e115      	b.n	80072ce <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	7d1b      	ldrb	r3, [r3, #20]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <f_read+0x5a>
 80070ae:	2307      	movs	r3, #7
 80070b0:	e10d      	b.n	80072ce <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	f240 80fe 	bls.w	80072c4 <f_read+0x26c>
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80070cc:	e0fa      	b.n	80072c4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 80c6 	bne.w	8007268 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	0a5b      	lsrs	r3, r3, #9
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	8952      	ldrh	r2, [r2, #10]
 80070e6:	3a01      	subs	r2, #1
 80070e8:	4013      	ands	r3, r2
 80070ea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d12f      	bne.n	8007152 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d103      	bne.n	8007102 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007100:	e013      	b.n	800712a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	4619      	mov	r1, r3
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7fe fefe 	bl	8005f12 <clmt_clust>
 8007116:	6338      	str	r0, [r7, #48]	@ 0x30
 8007118:	e007      	b.n	800712a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fe fc67 	bl	80059f6 <get_fat>
 8007128:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	2b01      	cmp	r3, #1
 800712e:	d804      	bhi.n	800713a <f_read+0xe2>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2202      	movs	r2, #2
 8007134:	755a      	strb	r2, [r3, #21]
 8007136:	2302      	movs	r3, #2
 8007138:	e0c9      	b.n	80072ce <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007140:	d104      	bne.n	800714c <f_read+0xf4>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	755a      	strb	r2, [r3, #21]
 8007148:	2301      	movs	r3, #1
 800714a:	e0c0      	b.n	80072ce <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007150:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7fe fc2c 	bl	80059b8 <clust2sect>
 8007160:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <f_read+0x11a>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2202      	movs	r2, #2
 800716c:	755a      	strb	r2, [r3, #21]
 800716e:	2302      	movs	r3, #2
 8007170:	e0ad      	b.n	80072ce <f_read+0x276>
			sect += csect;
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	0a5b      	lsrs	r3, r3, #9
 800717e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d039      	beq.n	80071fa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	4413      	add	r3, r2
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	8952      	ldrh	r2, [r2, #10]
 8007190:	4293      	cmp	r3, r2
 8007192:	d905      	bls.n	80071a0 <f_read+0x148>
					cc = fs->csize - csect;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	895b      	ldrh	r3, [r3, #10]
 8007198:	461a      	mov	r2, r3
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	7858      	ldrb	r0, [r3, #1]
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071aa:	f7fe f85b 	bl	8005264 <disk_read>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <f_read+0x166>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	755a      	strb	r2, [r3, #21]
 80071ba:	2301      	movs	r3, #1
 80071bc:	e087      	b.n	80072ce <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	7d1b      	ldrb	r3, [r3, #20]
 80071c2:	b25b      	sxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da14      	bge.n	80071f2 <f_read+0x19a>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d90d      	bls.n	80071f2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	025b      	lsls	r3, r3, #9
 80071e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e2:	18d0      	adds	r0, r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3330      	adds	r3, #48	@ 0x30
 80071e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7fe f919 	bl	8005424 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	025b      	lsls	r3, r3, #9
 80071f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80071f8:	e050      	b.n	800729c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d02e      	beq.n	8007262 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	7d1b      	ldrb	r3, [r3, #20]
 8007208:	b25b      	sxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	da18      	bge.n	8007240 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	7858      	ldrb	r0, [r3, #1]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a1a      	ldr	r2, [r3, #32]
 800721c:	2301      	movs	r3, #1
 800721e:	f7fe f841 	bl	80052a4 <disk_write>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <f_read+0x1da>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	755a      	strb	r2, [r3, #21]
 800722e:	2301      	movs	r3, #1
 8007230:	e04d      	b.n	80072ce <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	7d1b      	ldrb	r3, [r3, #20]
 8007236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800723a:	b2da      	uxtb	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	7858      	ldrb	r0, [r3, #1]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800724a:	2301      	movs	r3, #1
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	f7fe f809 	bl	8005264 <disk_read>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <f_read+0x20a>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	755a      	strb	r2, [r3, #21]
 800725e:	2301      	movs	r3, #1
 8007260:	e035      	b.n	80072ce <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007270:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d901      	bls.n	8007282 <f_read+0x22a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007290:	4413      	add	r3, r2
 8007292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007294:	4619      	mov	r1, r3
 8007296:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007298:	f7fe f8c4 	bl	8005424 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800729c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	4413      	add	r3, r2
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	699a      	ldr	r2, [r3, #24]
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072aa:	441a      	add	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	619a      	str	r2, [r3, #24]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b6:	441a      	add	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f47f af01 	bne.w	80070ce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3738      	adds	r7, #56	@ 0x38
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b08c      	sub	sp, #48	@ 0x30
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f107 0210 	add.w	r2, r7, #16
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff fc78 	bl	8006bec <validate>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007306:	2b00      	cmp	r3, #0
 8007308:	d107      	bne.n	800731a <f_write+0x44>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	7d5b      	ldrb	r3, [r3, #21]
 800730e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <f_write+0x4a>
 800731a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800731e:	e14b      	b.n	80075b8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	7d1b      	ldrb	r3, [r3, #20]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <f_write+0x5a>
 800732c:	2307      	movs	r3, #7
 800732e:	e143      	b.n	80075b8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	441a      	add	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	429a      	cmp	r2, r3
 800733e:	f080 812d 	bcs.w	800759c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	43db      	mvns	r3, r3
 8007348:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800734a:	e127      	b.n	800759c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 80e3 	bne.w	8007520 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	0a5b      	lsrs	r3, r3, #9
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	8952      	ldrh	r2, [r2, #10]
 8007364:	3a01      	subs	r2, #1
 8007366:	4013      	ands	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d143      	bne.n	80073f8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10c      	bne.n	8007392 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11a      	bne.n	80073ba <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fd2a 	bl	8005de2 <create_chain>
 800738e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007390:	e013      	b.n	80073ba <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	4619      	mov	r1, r3
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7fe fdb6 	bl	8005f12 <clmt_clust>
 80073a6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80073a8:	e007      	b.n	80073ba <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe fd15 	bl	8005de2 <create_chain>
 80073b8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 80f2 	beq.w	80075a6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d104      	bne.n	80073d2 <f_write+0xfc>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2202      	movs	r2, #2
 80073cc:	755a      	strb	r2, [r3, #21]
 80073ce:	2302      	movs	r3, #2
 80073d0:	e0f2      	b.n	80075b8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d104      	bne.n	80073e4 <f_write+0x10e>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	755a      	strb	r2, [r3, #21]
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0e9      	b.n	80075b8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073e8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <f_write+0x122>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073f6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	7d1b      	ldrb	r3, [r3, #20]
 80073fc:	b25b      	sxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da18      	bge.n	8007434 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	7858      	ldrb	r0, [r3, #1]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	2301      	movs	r3, #1
 8007412:	f7fd ff47 	bl	80052a4 <disk_write>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <f_write+0x150>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	755a      	strb	r2, [r3, #21]
 8007422:	2301      	movs	r3, #1
 8007424:	e0c8      	b.n	80075b8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	7d1b      	ldrb	r3, [r3, #20]
 800742a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f7fe fabb 	bl	80059b8 <clust2sect>
 8007442:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <f_write+0x17e>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2202      	movs	r2, #2
 800744e:	755a      	strb	r2, [r3, #21]
 8007450:	2302      	movs	r3, #2
 8007452:	e0b1      	b.n	80075b8 <f_write+0x2e2>
			sect += csect;
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	4413      	add	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	0a5b      	lsrs	r3, r3, #9
 8007460:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d03c      	beq.n	80074e2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	4413      	add	r3, r2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	8952      	ldrh	r2, [r2, #10]
 8007472:	4293      	cmp	r3, r2
 8007474:	d905      	bls.n	8007482 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	895b      	ldrh	r3, [r3, #10]
 800747a:	461a      	mov	r2, r3
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	7858      	ldrb	r0, [r3, #1]
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	69f9      	ldr	r1, [r7, #28]
 800748c:	f7fd ff0a 	bl	80052a4 <disk_write>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <f_write+0x1ca>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	755a      	strb	r2, [r3, #21]
 800749c:	2301      	movs	r3, #1
 800749e:	e08b      	b.n	80075b8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d915      	bls.n	80074da <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1a      	ldr	r2, [r3, #32]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	025b      	lsls	r3, r3, #9
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	4413      	add	r3, r2
 80074c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074c6:	4619      	mov	r1, r3
 80074c8:	f7fd ffac 	bl	8005424 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	7d1b      	ldrb	r3, [r3, #20]
 80074d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	025b      	lsls	r3, r3, #9
 80074de:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80074e0:	e03f      	b.n	8007562 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d016      	beq.n	800751a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d210      	bcs.n	800751a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	7858      	ldrb	r0, [r3, #1]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007502:	2301      	movs	r3, #1
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	f7fd fead 	bl	8005264 <disk_read>
 800750a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	755a      	strb	r2, [r3, #21]
 8007516:	2301      	movs	r3, #1
 8007518:	e04e      	b.n	80075b8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007528:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800752e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	429a      	cmp	r2, r3
 8007534:	d901      	bls.n	800753a <f_write+0x264>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007548:	4413      	add	r3, r2
 800754a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800754c:	69f9      	ldr	r1, [r7, #28]
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd ff68 	bl	8005424 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	7d1b      	ldrb	r3, [r3, #20]
 8007558:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	4413      	add	r3, r2
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	619a      	str	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	429a      	cmp	r2, r3
 8007580:	bf38      	it	cc
 8007582:	461a      	movcc	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	60da      	str	r2, [r3, #12]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	441a      	add	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f47f aed4 	bne.w	800734c <f_write+0x76>
 80075a4:	e000      	b.n	80075a8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	7d1b      	ldrb	r3, [r3, #20]
 80075ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3730      	adds	r7, #48	@ 0x30
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f107 0208 	add.w	r2, r7, #8
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fb0b 	bl	8006bec <validate>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d168      	bne.n	80076b2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	7d1b      	ldrb	r3, [r3, #20]
 80075e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d062      	beq.n	80076b2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7d1b      	ldrb	r3, [r3, #20]
 80075f0:	b25b      	sxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da15      	bge.n	8007622 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	7858      	ldrb	r0, [r3, #1]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	2301      	movs	r3, #1
 8007606:	f7fd fe4d 	bl	80052a4 <disk_write>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <f_sync+0x54>
 8007610:	2301      	movs	r3, #1
 8007612:	e04f      	b.n	80076b4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	7d1b      	ldrb	r3, [r3, #20]
 8007618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800761c:	b2da      	uxtb	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007622:	f7fd fc71 	bl	8004f08 <get_fattime>
 8007626:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f7fe f925 	bl	8005880 <move_window>
 8007636:	4603      	mov	r3, r0
 8007638:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d138      	bne.n	80076b2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007644:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	330b      	adds	r3, #11
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	330b      	adds	r3, #11
 8007650:	f042 0220 	orr.w	r2, r2, #32
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	461a      	mov	r2, r3
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	f7fe fe2f 	bl	80062c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f103 021c 	add.w	r2, r3, #28
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7fd fea9 	bl	80053cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3316      	adds	r3, #22
 800767e:	6939      	ldr	r1, [r7, #16]
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd fea3 	bl	80053cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3312      	adds	r3, #18
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd fe82 	bl	8005396 <st_word>
					fs->wflag = 1;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2201      	movs	r2, #1
 8007696:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe f91e 	bl	80058dc <sync_fs>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7d1b      	ldrb	r3, [r3, #20]
 80076a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff7b 	bl	80075c0 <f_sync>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d118      	bne.n	8007706 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f107 0208 	add.w	r2, r7, #8
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff fa85 	bl	8006bec <validate>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10c      	bne.n	8007706 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe f821 	bl	8005738 <dec_lock>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007726:	4b1f      	ldr	r3, [pc, #124]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 8007728:	7a5b      	ldrb	r3, [r3, #9]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d131      	bne.n	8007794 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007730:	4b1c      	ldr	r3, [pc, #112]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 8007732:	7a5b      	ldrb	r3, [r3, #9]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	4b1a      	ldr	r3, [pc, #104]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 800773a:	2100      	movs	r1, #0
 800773c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800773e:	4b19      	ldr	r3, [pc, #100]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 8007740:	7a5b      	ldrb	r3, [r3, #9]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	4a17      	ldr	r2, [pc, #92]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800774e:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 8007750:	7a5b      	ldrb	r3, [r3, #9]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	4b13      	ldr	r3, [pc, #76]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 8007758:	4413      	add	r3, r2
 800775a:	79fa      	ldrb	r2, [r7, #7]
 800775c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800775e:	4b11      	ldr	r3, [pc, #68]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 8007760:	7a5b      	ldrb	r3, [r3, #9]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	b2d1      	uxtb	r1, r2
 8007768:	4a0e      	ldr	r2, [pc, #56]	@ (80077a4 <FATFS_LinkDriverEx+0x94>)
 800776a:	7251      	strb	r1, [r2, #9]
 800776c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800776e:	7dbb      	ldrb	r3, [r7, #22]
 8007770:	3330      	adds	r3, #48	@ 0x30
 8007772:	b2da      	uxtb	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3301      	adds	r3, #1
 800777c:	223a      	movs	r2, #58	@ 0x3a
 800777e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3302      	adds	r3, #2
 8007784:	222f      	movs	r2, #47	@ 0x2f
 8007786:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	3303      	adds	r3, #3
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
}
 8007796:	4618      	mov	r0, r3
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000204 	.word	0x20000204

080077a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80077b2:	2200      	movs	r2, #0
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff ffaa 	bl	8007710 <FATFS_LinkDriverEx>
 80077bc:	4603      	mov	r3, r0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <memset>:
 80077c6:	4402      	add	r2, r0
 80077c8:	4603      	mov	r3, r0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d100      	bne.n	80077d0 <memset+0xa>
 80077ce:	4770      	bx	lr
 80077d0:	f803 1b01 	strb.w	r1, [r3], #1
 80077d4:	e7f9      	b.n	80077ca <memset+0x4>
	...

080077d8 <__libc_init_array>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	4d0d      	ldr	r5, [pc, #52]	@ (8007810 <__libc_init_array+0x38>)
 80077dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007814 <__libc_init_array+0x3c>)
 80077de:	1b64      	subs	r4, r4, r5
 80077e0:	10a4      	asrs	r4, r4, #2
 80077e2:	2600      	movs	r6, #0
 80077e4:	42a6      	cmp	r6, r4
 80077e6:	d109      	bne.n	80077fc <__libc_init_array+0x24>
 80077e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007818 <__libc_init_array+0x40>)
 80077ea:	4c0c      	ldr	r4, [pc, #48]	@ (800781c <__libc_init_array+0x44>)
 80077ec:	f000 f818 	bl	8007820 <_init>
 80077f0:	1b64      	subs	r4, r4, r5
 80077f2:	10a4      	asrs	r4, r4, #2
 80077f4:	2600      	movs	r6, #0
 80077f6:	42a6      	cmp	r6, r4
 80077f8:	d105      	bne.n	8007806 <__libc_init_array+0x2e>
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007800:	4798      	blx	r3
 8007802:	3601      	adds	r6, #1
 8007804:	e7ee      	b.n	80077e4 <__libc_init_array+0xc>
 8007806:	f855 3b04 	ldr.w	r3, [r5], #4
 800780a:	4798      	blx	r3
 800780c:	3601      	adds	r6, #1
 800780e:	e7f2      	b.n	80077f6 <__libc_init_array+0x1e>
 8007810:	0800795c 	.word	0x0800795c
 8007814:	0800795c 	.word	0x0800795c
 8007818:	0800795c 	.word	0x0800795c
 800781c:	08007960 	.word	0x08007960

08007820 <_init>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr

0800782c <_fini>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr
