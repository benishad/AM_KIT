
AM_KIT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008f88  08008f88  00009f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090fc  080090fc  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  080090fc  080090fc  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009104  08009104  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009104  08009104  0000a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009108  08009108  0000a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800910c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b05c  2**0
                  CONTENTS
 10 .bss          000003e4  2000005c  2000005c  0000b05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000440  20000440  0000b05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d1b  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000352b  00000000  00000000  00023da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  000272d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001247  00000000  00000000  00028a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f37  00000000  00000000  00029c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5c8  00000000  00000000  0004ebd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab50  00000000  00000000  0006c19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146cee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068e4  00000000  00000000  00146d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0014d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f70 	.word	0x08008f70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08008f70 	.word	0x08008f70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fec8 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8d2 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fab8 	bl	8000af4 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000584:	f000 fa02 	bl	800098c <MX_TIM7_Init>
  MX_SDIO_SD_Init();
 8000588:	f000 f9aa 	bl	80008e0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800058c:	f005 fbca 	bl	8005d24 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000590:	f000 fa32 	bl	80009f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fa5a 	bl	8000a4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000598:	f000 fa82 	bl	8000aa0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 800059c:	f000 f92e 	bl	80007fc <MX_RTC_Init>
  MX_SPI1_Init();
 80005a0:	f000 f9be 	bl	8000920 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // ???���? ?��?��?��?�� 모드�? ?��?�� (TIM7?? ?���? PSC/ARR�? 1 kHz, 1 ms ?��?��?��?���? ?��?��?��?�� ?��?���? �??��)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80005a4:	4859      	ldr	r0, [pc, #356]	@ (800070c <main+0x19c>)
 80005a6:	f003 fc19 	bl	8003ddc <HAL_TIM_Base_Start_IT>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <main+0x44>
  {
    Error_Handler();
 80005b0:	f000 fbd4 	bl	8000d5c <Error_Handler>
  }

  // 1) 콜백 기반 ?��?��?�� ?��?�� (1바이?��)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 80005b4:	2201      	movs	r2, #1
 80005b6:	4956      	ldr	r1, [pc, #344]	@ (8000710 <main+0x1a0>)
 80005b8:	4856      	ldr	r0, [pc, #344]	@ (8000714 <main+0x1a4>)
 80005ba:	f003 ff53 	bl	8004464 <HAL_UART_Receive_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <main+0x58>
  {
    // ?��?�� ?��?�� ?��?�� 처리
    Error_Handler();
 80005c4:	f000 fbca 	bl	8000d5c <Error_Handler>
  FIL SDFile;     // SD 카드 ?��?�� ?��?��
  FRESULT fres;   // FATFS ?��?�� 결과
  UINT bw, br;    // 바이?�� ?���?/?���? �??��

  /* 1) SD 카드 마운?�� (SDPath?�� fatfs.c ?�� extern?���? ?��?��?��) */
  fres = f_mount(&SDFatFS, SDPath, 1);    // SDPath?�� "0:"?���? ?��?��?��?�� ?��?��?�� ?��
 80005c8:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80005cc:	2201      	movs	r2, #1
 80005ce:	4952      	ldr	r1, [pc, #328]	@ (8000718 <main+0x1a8>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f007 fa61 	bl	8007a98 <f_mount>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80005dc:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x78>
  {
    // 마운?�� ?��?�� 처리
    Error_Handler();
 80005e4:	f000 fbba 	bl	8000d5c <Error_Handler>
  }

  /* 2) ?�� ?��?�� ?��?��(?��?��?���?) */
  fres = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80005e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005ec:	220a      	movs	r2, #10
 80005ee:	494b      	ldr	r1, [pc, #300]	@ (800071c <main+0x1ac>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f007 fa97 	bl	8007b24 <f_open>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80005fc:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0x98>
  {
    // ?��?�� ?���? ?��?�� 처리
    Error_Handler();
 8000604:	f000 fbaa 	bl	8000d5c <Error_Handler>
  }
  /* 3) ?��?��?�� ?��?��?�� ?���? */
  const char *data = "Hello, STM32 SD Card! \n test";
 8000608:	4b45      	ldr	r3, [pc, #276]	@ (8000720 <main+0x1b0>)
 800060a:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
  fres = f_write(&SDFile, data, strlen(data), &bw);
 800060e:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 8000612:	f7ff fddd 	bl	80001d0 <strlen>
 8000616:	4602      	mov	r2, r0
 8000618:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800061c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000620:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	@ 0x4a8
 8000624:	f007 fd77 	bl	8008116 <f_write>
 8000628:	4603      	mov	r3, r0
 800062a:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK || bw < strlen(data))
 800062e:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10b      	bne.n	800064e <main+0xde>
 8000636:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 800063a:	f7ff fdc9 	bl	80001d0 <strlen>
 800063e:	4602      	mov	r2, r0
 8000640:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8000644:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d906      	bls.n	800065c <main+0xec>
  {
    // ?��?�� ?���? ?��?�� 처리
    f_close(&SDFile);
 800064e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000652:	4618      	mov	r0, r3
 8000654:	f007 ff52 	bl	80084fc <f_close>
    Error_Handler();
 8000658:	f000 fb80 	bl	8000d5c <Error_Handler>
  }
  /* 4) ?��?�� ?���? */
  fres = f_close(&SDFile);
 800065c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000660:	4618      	mov	r0, r3
 8000662:	f007 ff4b 	bl	80084fc <f_close>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 800066c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x108>
  {
    // ?��?�� ?���? ?��?�� 처리
    Error_Handler();
 8000674:	f000 fb72 	bl	8000d5c <Error_Handler>
  }
  /* 5) ?��?�� ?���? */
  fres = f_open(&SDFile, "test.txt", FA_READ);
 8000678:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800067c:	2201      	movs	r2, #1
 800067e:	4927      	ldr	r1, [pc, #156]	@ (800071c <main+0x1ac>)
 8000680:	4618      	mov	r0, r3
 8000682:	f007 fa4f 	bl	8007b24 <f_open>
 8000686:	4603      	mov	r3, r0
 8000688:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 800068c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <main+0x128>
  {
    // ?��?�� ?���? ?��?�� 처리
    Error_Handler();
 8000694:	f000 fb62 	bl	8000d5c <Error_Handler>
  }
  char readBuffer[64];    // ?���? 버퍼
  fres = f_read(&SDFile, readBuffer, sizeof(readBuffer) - 1, &br);
 8000698:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800069c:	4639      	mov	r1, r7
 800069e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80006a2:	223f      	movs	r2, #63	@ 0x3f
 80006a4:	f007 fbf8 	bl	8007e98 <f_read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK || br == 0)
 80006ae:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <main+0x154>
 80006b6:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80006ba:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d106      	bne.n	80006d2 <main+0x162>
  {
    // ?��?�� ?���? ?��?�� 처리
    f_close(&SDFile);
 80006c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 ff17 	bl	80084fc <f_close>
    Error_Handler();
 80006ce:	f000 fb45 	bl	8000d5c <Error_Handler>
  }
  readBuffer[br] = '\0'; // 문자?�� 종료
 80006d2:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80006d6:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 80006e0:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 80006e4:	2100      	movs	r1, #0
 80006e6:	54d1      	strb	r1, [r2, r3]
  /* 6) SD카드 ?��마운?��*/
  fres = f_mount(NULL, SDPath, 1); // SDPath?�� "0:"?���? ?��?��?��?�� ?��?��?�� ?�� 마운?�� 0, ?��마운?�� 1
 80006e8:	2201      	movs	r2, #1
 80006ea:	490b      	ldr	r1, [pc, #44]	@ (8000718 <main+0x1a8>)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f007 f9d3 	bl	8007a98 <f_mount>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80006f8:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <main+0x196>
  {
    // ?��마운?�� ?��?�� 처리
    Error_Handler();
 8000700:	f000 fb2c 	bl	8000d5c <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	e7fd      	b.n	8000706 <main+0x196>
 800070a:	bf00      	nop
 800070c:	20000174 	.word	0x20000174
 8000710:	20000298 	.word	0x20000298
 8000714:	200001bc 	.word	0x200001bc
 8000718:	200002c0 	.word	0x200002c0
 800071c:	08008f88 	.word	0x08008f88
 8000720:	08008f94 	.word	0x08008f94

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 ff9c 	bl	8008670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <SystemClock_Config+0xd4>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <SystemClock_Config+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000780:	2305      	movs	r3, #5
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800079c:	23a8      	movs	r3, #168	@ 0xa8
 800079e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f99d 	bl	8001aec <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b8:	f000 fad0 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2105      	movs	r1, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fbfe 	bl	8001fdc <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f000 fab9 	bl	8000d5c <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	@ 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000800:	4b33      	ldr	r3, [pc, #204]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000802:	4a34      	ldr	r2, [pc, #208]	@ (80008d4 <MX_RTC_Init+0xd8>)
 8000804:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000806:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800080c:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800080e:	227f      	movs	r2, #127	@ 0x7f
 8000810:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000812:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000814:	22ff      	movs	r2, #255	@ 0xff
 8000816:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000818:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800081e:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800082a:	4829      	ldr	r0, [pc, #164]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800082c:	f001 fed8 	bl	80025e0 <HAL_RTC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000836:	f000 fa91 	bl	8000d5c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  // 백업 ?���??��?��?�� 마크�? ?��?���? ?���? ?���? 초기?��
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_REG) != RTC_MAGIC_VALUE)
 800083a:	2101      	movs	r1, #1
 800083c:	4824      	ldr	r0, [pc, #144]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800083e:	f002 fa43 	bl	8002cc8 <HAL_RTCEx_BKUPRead>
 8000842:	4603      	mov	r3, r0
 8000844:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000848:	4293      	cmp	r3, r2
 800084a:	d035      	beq.n	80008b8 <MX_RTC_Init+0xbc>
  {
    // RTC 백업 ?���??��?��?�� 마크�? ?��?���? 초기?��
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_REG, RTC_MAGIC_VALUE);
 800084c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000850:	2101      	movs	r1, #1
 8000852:	481f      	ldr	r0, [pc, #124]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000854:	f002 fa1e 	bl	8002c94 <HAL_RTCEx_BKUPWrite>

    // RTC ?���? ?��짜�?? 2025?�� 1?�� 1?�� 00:00:00?���? ?��?��
    g_Time.Hours = 0x0;  // 00:00:00
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_RTC_Init+0xdc>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = 0x0;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_RTC_Init+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = 0x0;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_RTC_Init+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_RTC_Init+0xdc>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_RTC_Init+0xdc>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BCD) != HAL_OK)
 8000876:	2201      	movs	r2, #1
 8000878:	4917      	ldr	r1, [pc, #92]	@ (80008d8 <MX_RTC_Init+0xdc>)
 800087a:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800087c:	f001 ff31 	bl	80026e2 <HAL_RTC_SetTime>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_RTC_Init+0x8e>
    {
      // RTC ?���? ?��?�� ?��?�� ?�� ?��?�� ?��?��?�� ?���?
      Error_Handler();
 8000886:	f000 fa69 	bl	8000d5c <Error_Handler>
    }
    g_Date.WeekDay = RTC_WEEKDAY_MONDAY;  // ?��?��?��
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_RTC_Init+0xe0>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
    g_Date.Month = RTC_MONTH_JANUARY;    // 1?��
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_RTC_Init+0xe0>)
 8000892:	2201      	movs	r2, #1
 8000894:	705a      	strb	r2, [r3, #1]
    g_Date.Date = 0x1;                    // 1?��
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_RTC_Init+0xe0>)
 8000898:	2201      	movs	r2, #1
 800089a:	709a      	strb	r2, [r3, #2]
    g_Date.Year = 0x25;                   // 2025?�� (BCD ?��?��?���? 25)
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_RTC_Init+0xe0>)
 800089e:	2225      	movs	r2, #37	@ 0x25
 80008a0:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BCD) != HAL_OK)
 80008a2:	2201      	movs	r2, #1
 80008a4:	490d      	ldr	r1, [pc, #52]	@ (80008dc <MX_RTC_Init+0xe0>)
 80008a6:	480a      	ldr	r0, [pc, #40]	@ (80008d0 <MX_RTC_Init+0xd4>)
 80008a8:	f002 f813 	bl	80028d2 <HAL_RTC_SetDate>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00c      	beq.n	80008cc <MX_RTC_Init+0xd0>
    {
      // RTC ?���? ?��?�� ?��?�� ?�� ?��?�� ?��?��?�� ?���?
      Error_Handler();
 80008b2:	f000 fa53 	bl	8000d5c <Error_Handler>
  // }


  /* USER CODE END RTC_Init 2 */

}
 80008b6:	e009      	b.n	80008cc <MX_RTC_Init+0xd0>
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 80008b8:	2201      	movs	r2, #1
 80008ba:	4907      	ldr	r1, [pc, #28]	@ (80008d8 <MX_RTC_Init+0xdc>)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_RTC_Init+0xd4>)
 80008be:	f001 ffaa 	bl	8002816 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 80008c2:	2201      	movs	r2, #1
 80008c4:	4905      	ldr	r1, [pc, #20]	@ (80008dc <MX_RTC_Init+0xe0>)
 80008c6:	4802      	ldr	r0, [pc, #8]	@ (80008d0 <MX_RTC_Init+0xd4>)
 80008c8:	f002 f887 	bl	80029da <HAL_RTC_GetDate>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000078 	.word	0x20000078
 80008d4:	40002800 	.word	0x40002800
 80008d8:	2000029c 	.word	0x2000029c
 80008dc:	200002b0 	.word	0x200002b0

080008e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008e6:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <MX_SDIO_SD_Init+0x3c>)
 80008e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]



  /* USER CODE END SDIO_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20000098 	.word	0x20000098
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000926:	4a18      	ldr	r2, [pc, #96]	@ (8000988 <MX_SPI1_Init+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_SPI1_Init+0x64>)
 800094c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000950:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_SPI1_Init+0x64>)
 800096c:	220a      	movs	r2, #10
 800096e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000972:	f003 f95b 	bl	8003c2c <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800097c:	f000 f9ee 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000011c 	.word	0x2000011c
 8000988:	40013000 	.word	0x40013000

0800098c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_TIM7_Init+0x64>)
 800099c:	4a15      	ldr	r2, [pc, #84]	@ (80009f4 <MX_TIM7_Init+0x68>)
 800099e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009a2:	2263      	movs	r2, #99	@ 0x63
 80009a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009ae:	f240 3247 	movw	r2, #839	@ 0x347
 80009b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009bc:	f003 f9bf 	bl	8003d3e <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009c6:	f000 f9c9 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009d8:	f003 fc2e 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80009e2:	f000 f9bb 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000174 	.word	0x20000174
 80009f4:	40001400 	.word	0x40001400

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <MX_USART1_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a30:	f003 fc92 	bl	8004358 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f98f 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001bc 	.word	0x200001bc
 8000a48:	40011000 	.word	0x40011000

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f003 fc68 	bl	8004358 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f965 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000204 	.word	0x20000204
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <MX_USART3_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad8:	f003 fc3e 	bl	8004358 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f93b 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000024c 	.word	0x2000024c
 8000af0:	40004800 	.word	0x40004800

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	@ 0x30
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a48      	ldr	r2, [pc, #288]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b46      	ldr	r3, [pc, #280]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	4b42      	ldr	r3, [pc, #264]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a41      	ldr	r2, [pc, #260]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b3f      	ldr	r3, [pc, #252]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b3b      	ldr	r3, [pc, #236]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b34      	ldr	r3, [pc, #208]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a33      	ldr	r2, [pc, #204]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a2c      	ldr	r2, [pc, #176]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a25      	ldr	r2, [pc, #148]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|ESP_EN_Pin
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4177 	mov.w	r1, #63232	@ 0xf700
 8000bb8:	481f      	ldr	r0, [pc, #124]	@ (8000c38 <MX_GPIO_Init+0x144>)
 8000bba:	f000 ff7d 	bl	8001ab8 <HAL_GPIO_WritePin>
                          |USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4819      	ldr	r0, [pc, #100]	@ (8000c38 <MX_GPIO_Init+0x144>)
 8000bd2:	f000 fdd5 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin ESP_EN_Pin
                           USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|ESP_EN_Pin
 8000bd6:	f44f 4377 	mov.w	r3, #63232	@ 0xf700
 8000bda:	61fb      	str	r3, [r7, #28]
                          |USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <MX_GPIO_Init+0x144>)
 8000bf0:	f000 fdc6 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_PWR_KEY_Pin */
  GPIO_InitStruct.Pin = M_PWR_KEY_Pin;
 8000bf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(M_PWR_KEY_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <MX_GPIO_Init+0x144>)
 8000c0c:	f000 fdb8 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c10:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000c14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_GPIO_Init+0x148>)
 8000c26:	f000 fdab 	bl	8001780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	@ 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_TIM_PeriodElapsedCallback>:
//      
// =======================================================================================================
/* tim 7 ?��?��?��?�� 처리�? */
/* TIM7 ?��?��?��?�� ?��?��?��?�� 콜백 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b098      	sub	sp, #96	@ 0x60
 8000c44:	af04      	add	r7, sp, #16
 8000c46:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a27      	ldr	r2, [pc, #156]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d147      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0xa2>
  {
    ms_tick_1++;
 8000c52:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c5c:	801a      	strh	r2, [r3, #0]
    alive_counter++;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c68:	801a      	strh	r2, [r3, #0]

    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c70:	d902      	bls.n	8000c78 <HAL_TIM_PeriodElapsedCallback+0x38>
    {
      ms_tick_1 = 0;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	801a      	strh	r2, [r3, #0]
      // HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
    }

    if (alive_counter >= 10000)    // 10 s 경과 체크
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d92e      	bls.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
      alive_counter = 0;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]

      /* 1) RTC?��?�� ?��?�� ?���? ?���? */
      // RTC_TimeTypeDef sTime;
      // RTC_DateTypeDef sDate;
      HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	491a      	ldr	r1, [pc, #104]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c8e:	481b      	ldr	r0, [pc, #108]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c90:	f001 fdc1 	bl	8002816 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8000c94:	2200      	movs	r2, #0
 8000c96:	491a      	ldr	r1, [pc, #104]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c98:	4818      	ldr	r0, [pc, #96]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c9a:	f001 fe9e 	bl	80029da <HAL_RTC_GetDate>
      // int len = snprintf(buf, sizeof(buf), "ALIVE: %02d:%02d:%02d %02d/%02d/%04d\n",
      //                   sTime.Hours, sTime.Minutes, sTime.Seconds,
      //                   sDate.Date, sDate.Month, 2000 + sDate.Year);

      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ca0:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000ca2:	461d      	mov	r5, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ca6:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000ca8:	461a      	mov	r2, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cae:	4619      	mov	r1, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cb2:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cb4:	461c      	mov	r4, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cb8:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cba:	f107 000c 	add.w	r0, r7, #12
 8000cbe:	9303      	str	r3, [sp, #12]
 8000cc0:	9402      	str	r4, [sp, #8]
 8000cc2:	9101      	str	r1, [sp, #4]
 8000cc4:	9200      	str	r2, [sp, #0]
 8000cc6:	462b      	mov	r3, r5
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cca:	2140      	movs	r1, #64	@ 0x40
 8000ccc:	f007 fc9c 	bl	8008608 <sniprintf>
 8000cd0:	64f8      	str	r0, [r7, #76]	@ 0x4c
      //HAL_UART_Transmit_IT(&huart2, txAlive, sizeof(txAlive) - 1);
      //HAL_UART_Transmit_IT(&huart3, txAlive, sizeof(txAlive) - 1);

      /* 3) UART�? ?���? �? ?���? ?��?�� */
      // UART1�? ?��?�� ?���? ?��?��
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 8000cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480a      	ldr	r0, [pc, #40]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cde:	f003 fb8b 	bl	80043f8 <HAL_UART_Transmit_IT>
    }
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	@ 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001400 	.word	0x40001400
 8000cf0:	20000294 	.word	0x20000294
 8000cf4:	20000296 	.word	0x20000296
 8000cf8:	2000029c 	.word	0x2000029c
 8000cfc:	20000078 	.word	0x20000078
 8000d00:	200002b0 	.word	0x200002b0
 8000d04:	08008fb4 	.word	0x08008fb4
 8000d08:	200001bc 	.word	0x200001bc

08000d0c <HAL_UART_RxCpltCallback>:
// 
// =======================================================================================================
/* uart 1 처리�? */
/* UART Rx Complete 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_UART_RxCpltCallback+0x30>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d109      	bne.n	8000d32 <HAL_UART_RxCpltCallback+0x26>
  {
    // 1) ?���?: 받�? 바이?���? 바로 ?��?��
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <HAL_UART_RxCpltCallback+0x34>)
 8000d22:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <HAL_UART_RxCpltCallback+0x38>)
 8000d24:	f003 fb68 	bl	80043f8 <HAL_UART_Transmit_IT>

    // 2) ?��?�� ?��?�� ??�?
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4905      	ldr	r1, [pc, #20]	@ (8000d40 <HAL_UART_RxCpltCallback+0x34>)
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <HAL_UART_RxCpltCallback+0x38>)
 8000d2e:	f003 fb99 	bl	8004464 <HAL_UART_Receive_IT>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	20000298 	.word	0x20000298
 8000d44:	200001bc 	.word	0x200001bc

08000d48 <HAL_UART_TxCpltCallback>:

/* UART ?��?�� ?���? 콜백 (?��?�� ?��..) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  // ?��?�� ?���? ?�� ?���? 처리�? ?��?��?���? ?��기에??
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <Error_Handler+0x8>

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a10      	ldr	r2, [pc, #64]	@ (8000e14 <HAL_RTC_MspInit+0x5c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d119      	bne.n	8000e0c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fb18 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000df2:	f7ff ffb3 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_RTC_MspInit+0x60>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2029      	movs	r0, #41	@ 0x29
 8000e02:	f000 fbf4 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e06:	2029      	movs	r0, #41	@ 0x29
 8000e08:	f000 fc0d 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40002800 	.word	0x40002800
 8000e18:	42470e3c 	.word	0x42470e3c

08000e1c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a28      	ldr	r2, [pc, #160]	@ (8000edc <HAL_SD_MspInit+0xc0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d14a      	bne.n	8000ed4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a26      	ldr	r2, [pc, #152]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000e92:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <HAL_SD_MspInit+0xc8>)
 8000eb0:	f000 fc66 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <HAL_SD_MspInit+0xcc>)
 8000ed0:	f000 fc56 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	@ 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	@ (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12b      	bne.n	8000f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23e0      	movs	r3, #224	@ 0xe0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f62:	f000 fc0d 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d115      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2037      	movs	r0, #55	@ 0x37
 8000fb0:	f000 fb1d 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fb4:	2037      	movs	r0, #55	@ 0x37
 8000fb6:	f000 fb36 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40001400 	.word	0x40001400
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	@ 0x38
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a58      	ldr	r2, [pc, #352]	@ (800114c <HAL_UART_MspInit+0x180>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d135      	bne.n	800105a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
 8000ff2:	4b57      	ldr	r3, [pc, #348]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a56      	ldr	r2, [pc, #344]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b54      	ldr	r3, [pc, #336]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	4b50      	ldr	r3, [pc, #320]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a4f      	ldr	r2, [pc, #316]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b4d      	ldr	r3, [pc, #308]	@ (8001150 <HAL_UART_MspInit+0x184>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001026:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001038:	2307      	movs	r3, #7
 800103a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4844      	ldr	r0, [pc, #272]	@ (8001154 <HAL_UART_MspInit+0x188>)
 8001044:	f000 fb9c 	bl	8001780 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2025      	movs	r0, #37	@ 0x25
 800104e:	f000 face 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001052:	2025      	movs	r0, #37	@ 0x25
 8001054:	f000 fae7 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001058:	e073      	b.n	8001142 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a3e      	ldr	r2, [pc, #248]	@ (8001158 <HAL_UART_MspInit+0x18c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d134      	bne.n	80010ce <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <HAL_UART_MspInit+0x184>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a38      	ldr	r2, [pc, #224]	@ (8001150 <HAL_UART_MspInit+0x184>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b36      	ldr	r3, [pc, #216]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a31      	ldr	r2, [pc, #196]	@ (8001150 <HAL_UART_MspInit+0x184>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001090:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 800109c:	230c      	movs	r3, #12
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ac:	2307      	movs	r3, #7
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4827      	ldr	r0, [pc, #156]	@ (8001154 <HAL_UART_MspInit+0x188>)
 80010b8:	f000 fb62 	bl	8001780 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2026      	movs	r0, #38	@ 0x26
 80010c2:	f000 fa94 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c6:	2026      	movs	r0, #38	@ 0x26
 80010c8:	f000 faad 	bl	8001626 <HAL_NVIC_EnableIRQ>
}
 80010cc:	e039      	b.n	8001142 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a22      	ldr	r2, [pc, #136]	@ (800115c <HAL_UART_MspInit+0x190>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d134      	bne.n	8001142 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_UART_MspInit+0x184>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_UART_MspInit+0x184>)
 80010e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_UART_MspInit+0x184>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_UART_MspInit+0x184>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <HAL_UART_MspInit+0x184>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_UART_MspInit+0x184>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8001110:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001122:	2307      	movs	r3, #7
 8001124:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <HAL_UART_MspInit+0x194>)
 800112e:	f000 fb27 	bl	8001780 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2027      	movs	r0, #39	@ 0x27
 8001138:	f000 fa59 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800113c:	2027      	movs	r0, #39	@ 0x27
 800113e:	f000 fa72 	bl	8001626 <HAL_NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3738      	adds	r7, #56	@ 0x38
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40011000 	.word	0x40011000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000
 8001158:	40004400 	.word	0x40004400
 800115c:	40004800 	.word	0x40004800
 8001160:	40020400 	.word	0x40020400

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f8f9 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <USART1_IRQHandler+0x10>)
 80011ca:	f003 f971 	bl	80044b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001bc 	.word	0x200001bc

080011d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <USART2_IRQHandler+0x10>)
 80011de:	f003 f967 	bl	80044b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000204 	.word	0x20000204

080011ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <USART3_IRQHandler+0x10>)
 80011f2:	f003 f95d 	bl	80044b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000024c 	.word	0x2000024c

08001200 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <RTC_Alarm_IRQHandler+0x10>)
 8001206:	f001 fc37 	bl	8002a78 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000078 	.word	0x20000078

08001214 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <TIM7_IRQHandler+0x10>)
 800121a:	f002 fe4f 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000174 	.word	0x20000174

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f007 fa12 	bl	8008680 <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20020000 	.word	0x20020000
 8001288:	00000400 	.word	0x00000400
 800128c:	200002b4 	.word	0x200002b4
 8001290:	20000440 	.word	0x20000440

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f007 f9d1 	bl	800868c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff f941 	bl	8000570 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012fc:	0800910c 	.word	0x0800910c
  ldr r2, =_sbss
 8001300:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001304:	20000440 	.word	0x20000440

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <HAL_Init+0x40>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_Init+0x40>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	@ (800134c <HAL_Init+0x40>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f94f 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	200f      	movs	r0, #15
 800133c:	f000 f808 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fd12 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f967 	bl	8001642 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f92f 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	200002b8 	.word	0x200002b8

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200002b8 	.word	0x200002b8

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	@ (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	@ (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff feb6 	bl	80013d8 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d008      	beq.n	800168c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e052      	b.n	8001732 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0216 	bic.w	r2, r2, #22
 800169a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <HAL_DMA_Abort+0x62>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0208 	bic.w	r2, r2, #8
 80016ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016dc:	e013      	b.n	8001706 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016de:	f7ff fe7b 	bl	80013d8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d90c      	bls.n	8001706 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2220      	movs	r2, #32
 80016f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e015      	b.n	8001732 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e4      	bne.n	80016de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	223f      	movs	r2, #63	@ 0x3f
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d004      	beq.n	8001758 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e00c      	b.n	8001772 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2205      	movs	r2, #5
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e16b      	b.n	8001a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 815a 	bne.w	8001a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d005      	beq.n	80017d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d130      	bne.n	8001834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 0201 	and.w	r2, r3, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b03      	cmp	r3, #3
 800183e:	d017      	beq.n	8001870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	69b9      	ldr	r1, [r7, #24]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80b4 	beq.w	8001a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b60      	ldr	r3, [pc, #384]	@ (8001a8c <HAL_GPIO_Init+0x30c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	4a5f      	ldr	r2, [pc, #380]	@ (8001a8c <HAL_GPIO_Init+0x30c>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001914:	6453      	str	r3, [r2, #68]	@ 0x44
 8001916:	4b5d      	ldr	r3, [pc, #372]	@ (8001a8c <HAL_GPIO_Init+0x30c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001922:	4a5b      	ldr	r2, [pc, #364]	@ (8001a90 <HAL_GPIO_Init+0x310>)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	@ (8001a94 <HAL_GPIO_Init+0x314>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a51      	ldr	r2, [pc, #324]	@ (8001a98 <HAL_GPIO_Init+0x318>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x222>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <HAL_GPIO_Init+0x31c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x21e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa0 <HAL_GPIO_Init+0x320>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4e      	ldr	r2, [pc, #312]	@ (8001aa4 <HAL_GPIO_Init+0x324>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa8 <HAL_GPIO_Init+0x328>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4c      	ldr	r2, [pc, #304]	@ (8001aac <HAL_GPIO_Init+0x32c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab0 <HAL_GPIO_Init+0x330>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x20a>
 8001986:	2307      	movs	r3, #7
 8001988:	e00e      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198a:	2308      	movs	r3, #8
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198e:	2306      	movs	r3, #6
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4935      	ldr	r1, [pc, #212]	@ (8001a90 <HAL_GPIO_Init+0x310>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ea:	4a32      	ldr	r2, [pc, #200]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f0:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a14:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a68:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae90 	bls.w	800179c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3724      	adds	r7, #36	@ 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40013800 	.word	0x40013800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40021400 	.word	0x40021400
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e267      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b85      	ldr	r3, [pc, #532]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b82      	ldr	r3, [pc, #520]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b7e      	ldr	r3, [pc, #504]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d157      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e242      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x74>
 8001b52:	4b76      	ldr	r3, [pc, #472]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a75      	ldr	r2, [pc, #468]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b70      	ldr	r3, [pc, #448]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6d      	ldr	r3, [pc, #436]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b84:	4b69      	ldr	r3, [pc, #420]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a68      	ldr	r2, [pc, #416]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a65      	ldr	r2, [pc, #404]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc18 	bl	80013d8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fc14 	bl	80013d8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e207      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fc04 	bl	80013d8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fc00 	bl	80013d8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1f3      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b41      	ldr	r3, [pc, #260]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c7      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4937      	ldr	r1, [pc, #220]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fbb9 	bl	80013d8 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fbb5 	bl	80013d8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a8      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4925      	ldr	r1, [pc, #148]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb98 	bl	80013d8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fb94 	bl	80013d8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e187      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d036      	beq.n	8001d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fb78 	bl	80013d8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fb74 	bl	80013d8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e167      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
 8001d0a:	e01b      	b.n	8001d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fb61 	bl	80013d8 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fb5d 	bl	80013d8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e150      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b88      	ldr	r3, [pc, #544]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ea      	bne.n	8001d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8097 	beq.w	8001e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b81      	ldr	r3, [pc, #516]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b7d      	ldr	r3, [pc, #500]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b7a      	ldr	r3, [pc, #488]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b77      	ldr	r3, [pc, #476]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b74      	ldr	r3, [pc, #464]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb1d 	bl	80013d8 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff fb19 	bl	80013d8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e10c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2ea>
 8001dc8:	4b64      	ldr	r3, [pc, #400]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dcc:	4a63      	ldr	r2, [pc, #396]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x30c>
 8001dde:	4b5f      	ldr	r3, [pc, #380]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dea:	4b5c      	ldr	r3, [pc, #368]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	4a5b      	ldr	r2, [pc, #364]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001df8:	4b58      	ldr	r3, [pc, #352]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	4a57      	ldr	r2, [pc, #348]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e04:	4b55      	ldr	r3, [pc, #340]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e08:	4a54      	ldr	r2, [pc, #336]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff fade 	bl	80013d8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fada 	bl	80013d8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0cb      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ee      	beq.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fac8 	bl	80013d8 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fac4 	bl	80013d8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0b5      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	4b3e      	ldr	r3, [pc, #248]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	4a38      	ldr	r2, [pc, #224]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a1 	beq.w	8001fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d05c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d141      	bne.n	8001f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fa98 	bl	80013d8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff fa94 	bl	80013d8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e087      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	491b      	ldr	r1, [pc, #108]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fa6d 	bl	80013d8 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff fa69 	bl	80013d8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e05c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x416>
 8001f20:	e054      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fa56 	bl	80013d8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff fa52 	bl	80013d8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e045      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
 8001f4e:	e03d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e038      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d121      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff f984 	bl	80013d8 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff f980 	bl	80013d8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f8e4 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	0800901c 	.word	0x0800901c
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ac:	b094      	sub	sp, #80	@ 0x50
 80021ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c0:	4b79      	ldr	r3, [pc, #484]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d00d      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x40>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	f200 80e1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x34>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021da:	e0db      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 80021de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021e0:	e0db      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4b73      	ldr	r3, [pc, #460]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80021e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021e6:	e0d8      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4b6d      	ldr	r3, [pc, #436]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b6a      	ldr	r3, [pc, #424]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	2200      	movs	r2, #0
 8002206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002208:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
 8002216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800221a:	4622      	mov	r2, r4
 800221c:	462b      	mov	r3, r5
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	0159      	lsls	r1, r3, #5
 8002228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222c:	0150      	lsls	r0, r2, #5
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4621      	mov	r1, r4
 8002234:	1a51      	subs	r1, r2, r1
 8002236:	6139      	str	r1, [r7, #16]
 8002238:	4629      	mov	r1, r5
 800223a:	eb63 0301 	sbc.w	r3, r3, r1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800224c:	4659      	mov	r1, fp
 800224e:	018b      	lsls	r3, r1, #6
 8002250:	4651      	mov	r1, sl
 8002252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002256:	4651      	mov	r1, sl
 8002258:	018a      	lsls	r2, r1, #6
 800225a:	4651      	mov	r1, sl
 800225c:	ebb2 0801 	subs.w	r8, r2, r1
 8002260:	4659      	mov	r1, fp
 8002262:	eb63 0901 	sbc.w	r9, r3, r1
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227a:	4690      	mov	r8, r2
 800227c:	4699      	mov	r9, r3
 800227e:	4623      	mov	r3, r4
 8002280:	eb18 0303 	adds.w	r3, r8, r3
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	462b      	mov	r3, r5
 8002288:	eb49 0303 	adc.w	r3, r9, r3
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800229a:	4629      	mov	r1, r5
 800229c:	024b      	lsls	r3, r1, #9
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022a4:	4621      	mov	r1, r4
 80022a6:	024a      	lsls	r2, r1, #9
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022b8:	f7fd ffe2 	bl	8000280 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022c4:	e058      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c6:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	2200      	movs	r2, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	4611      	mov	r1, r2
 80022d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
 80022dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022e0:	4642      	mov	r2, r8
 80022e2:	464b      	mov	r3, r9
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0159      	lsls	r1, r3, #5
 80022ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f2:	0150      	lsls	r0, r2, #5
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4641      	mov	r1, r8
 80022fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80022fe:	4649      	mov	r1, r9
 8002300:	eb63 0b01 	sbc.w	fp, r3, r1
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002318:	ebb2 040a 	subs.w	r4, r2, sl
 800231c:	eb63 050b 	sbc.w	r5, r3, fp
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	00eb      	lsls	r3, r5, #3
 800232a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232e:	00e2      	lsls	r2, r4, #3
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4643      	mov	r3, r8
 8002336:	18e3      	adds	r3, r4, r3
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	464b      	mov	r3, r9
 800233c:	eb45 0303 	adc.w	r3, r5, r3
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002362:	2200      	movs	r2, #0
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	61fa      	str	r2, [r7, #28]
 8002368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800236c:	f7fd ff88 	bl	8000280 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002388:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800238a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002392:	e002      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800239c:	4618      	mov	r0, r3
 800239e:	3750      	adds	r7, #80	@ 0x50
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	@ (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	0800902c 	.word	0x0800902c

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	@ (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	0800902c 	.word	0x0800902c

0800241c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002440:	2b00      	cmp	r3, #0
 8002442:	d035      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002444:	4b62      	ldr	r3, [pc, #392]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800244a:	f7fe ffc5 	bl	80013d8 <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002452:	f7fe ffc1 	bl	80013d8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0b0      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002464:	4b5b      	ldr	r3, [pc, #364]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	019a      	lsls	r2, r3, #6
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	071b      	lsls	r3, r3, #28
 800247c:	4955      	ldr	r1, [pc, #340]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002484:	4b52      	ldr	r3, [pc, #328]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800248a:	f7fe ffa5 	bl	80013d8 <HAL_GetTick>
 800248e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002492:	f7fe ffa1 	bl	80013d8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e090      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024a4:	4b4b      	ldr	r3, [pc, #300]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8083 	beq.w	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b44      	ldr	r3, [pc, #272]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	4a43      	ldr	r2, [pc, #268]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ce:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024da:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a3e      	ldr	r2, [pc, #248]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024e6:	f7fe ff77 	bl	80013d8 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe ff73 	bl	80013d8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e062      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002500:	4b35      	ldr	r3, [pc, #212]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250c:	4b31      	ldr	r3, [pc, #196]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002514:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02f      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	429a      	cmp	r2, r3
 8002528:	d028      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800252a:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002532:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002534:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800253a:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002540:	4a24      	ldr	r2, [pc, #144]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002546:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d114      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe ff41 	bl	80013d8 <HAL_GetTick>
 8002556:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe ff3d 	bl	80013d8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e02a      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ee      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002588:	d10d      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800258a:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800259a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800259e:	490d      	ldr	r1, [pc, #52]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
 80025a4:	e005      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025ac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025b0:	6093      	str	r3, [r2, #8]
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025be:	4905      	ldr	r1, [pc, #20]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	42470068 	.word	0x42470068
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40007000 	.word	0x40007000
 80025dc:	42470e40 	.word	0x42470e40

080025e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e073      	b.n	80026da <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7f5b      	ldrb	r3, [r3, #29]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fbd8 	bl	8000db8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b10      	cmp	r3, #16
 800261a:	d055      	beq.n	80026c8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	22ca      	movs	r2, #202	@ 0xca
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2253      	movs	r2, #83	@ 0x53
 800262a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fa99 	bl	8002b64 <RTC_EnterInitMode>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d12c      	bne.n	8002696 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800264a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800264e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	041a      	lsls	r2, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 faa0 	bl	8002bd2 <RTC_ExitInitMode>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d110      	bne.n	80026be <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	22ff      	movs	r2, #255	@ 0xff
 80026c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80026c6:	e001      	b.n	80026cc <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b087      	sub	sp, #28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	7f1b      	ldrb	r3, [r3, #28]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_RTC_SetTime+0x1c>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e087      	b.n	800280e <HAL_RTC_SetTime+0x12c>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2202      	movs	r2, #2
 8002708:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d126      	bne.n	800275e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2200      	movs	r2, #0
 8002722:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa77 	bl	8002c1c <RTC_ByteToBcd2>
 800272e:	4603      	mov	r3, r0
 8002730:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fa70 	bl	8002c1c <RTC_ByteToBcd2>
 800273c:	4603      	mov	r3, r0
 800273e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002740:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	789b      	ldrb	r3, [r3, #2]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fa68 	bl	8002c1c <RTC_ByteToBcd2>
 800274c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800274e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	78db      	ldrb	r3, [r3, #3]
 8002756:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	e018      	b.n	8002790 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2200      	movs	r2, #0
 8002770:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800277e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002784:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	22ca      	movs	r2, #202	@ 0xca
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2253      	movs	r2, #83	@ 0x53
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f9df 	bl	8002b64 <RTC_EnterInitMode>
 80027a6:	4603      	mov	r3, r0
 80027a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d120      	bne.n	80027f2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80027ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80027be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	431a      	orrs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f9f2 	bl	8002bd2 <RTC_ExitInitMode>
 80027ee:	4603      	mov	r3, r0
 80027f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	22ff      	movs	r2, #255	@ 0xff
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]

  return status;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
}
 800280e:	4618      	mov	r0, r3
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd90      	pop	{r4, r7, pc}

08002816 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002848:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800284c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002876:	b2da      	uxtb	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	0d9b      	lsrs	r3, r3, #22
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11a      	bne.n	80028c8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f9de 	bl	8002c58 <RTC_Bcd2ToByte>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f9d5 	bl	8002c58 <RTC_Bcd2ToByte>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	789b      	ldrb	r3, [r3, #2]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f9cc 	bl	8002c58 <RTC_Bcd2ToByte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028d2:	b590      	push	{r4, r7, lr}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	7f1b      	ldrb	r3, [r3, #28]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_RTC_SetDate+0x1c>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e071      	b.n	80029d2 <HAL_RTC_SetDate+0x100>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2202      	movs	r2, #2
 80028f8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10e      	bne.n	800291e <HAL_RTC_SetDate+0x4c>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	f023 0310 	bic.w	r3, r3, #16
 8002914:	b2db      	uxtb	r3, r3
 8002916:	330a      	adds	r3, #10
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11c      	bne.n	800295e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	78db      	ldrb	r3, [r3, #3]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f977 	bl	8002c1c <RTC_ByteToBcd2>
 800292e:	4603      	mov	r3, r0
 8002930:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f970 	bl	8002c1c <RTC_ByteToBcd2>
 800293c:	4603      	mov	r3, r0
 800293e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002940:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	789b      	ldrb	r3, [r3, #2]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f968 	bl	8002c1c <RTC_ByteToBcd2>
 800294c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800294e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e00e      	b.n	800297c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800296a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002970:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	22ca      	movs	r2, #202	@ 0xca
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2253      	movs	r2, #83	@ 0x53
 800298a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f8e9 	bl	8002b64 <RTC_EnterInitMode>
 8002992:	4603      	mov	r3, r0
 8002994:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002996:	7cfb      	ldrb	r3, [r7, #19]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10c      	bne.n	80029b6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80029aa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f910 	bl	8002bd2 <RTC_ExitInitMode>
 80029b2:	4603      	mov	r3, r0
 80029b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	22ff      	movs	r2, #255	@ 0xff
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]

  return status;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}

080029da <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80029f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	0b5b      	lsrs	r3, r3, #13
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11a      	bne.n	8002a6e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	78db      	ldrb	r3, [r3, #3]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f90b 	bl	8002c58 <RTC_Bcd2ToByte>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f902 	bl	8002c58 <RTC_Bcd2ToByte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	789b      	ldrb	r3, [r3, #2]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f8f9 	bl	8002c58 <RTC_Bcd2ToByte>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a80:	4b1f      	ldr	r3, [pc, #124]	@ (8002b00 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002a82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a86:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d012      	beq.n	8002abc <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002ab4:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f824 	bl	8002b04 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002ae8:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f904 	bl	8002cf8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	775a      	strb	r2, [r3, #29]
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	@ (8002b60 <HAL_RTC_WaitForSynchro+0x48>)
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7fe fc54 	bl	80013d8 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b32:	e009      	b.n	8002b48 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b34:	f7fe fc50 	bl	80013d8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b42:	d901      	bls.n	8002b48 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e007      	b.n	8002b58 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ee      	beq.n	8002b34 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	00017f5f 	.word	0x00017f5f

08002b64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d122      	bne.n	8002bc8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b90:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b92:	f7fe fc21 	bl	80013d8 <HAL_GetTick>
 8002b96:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b98:	e00c      	b.n	8002bb4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b9a:	f7fe fc1d 	bl	80013d8 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ba8:	d904      	bls.n	8002bb4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2204      	movs	r2, #4
 8002bae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <RTC_EnterInitMode+0x64>
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d1e8      	bne.n	8002b9a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff8b 	bl	8002b18 <HAL_RTC_WaitForSynchro>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002c2a:	e005      	b.n	8002c38 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	3b0a      	subs	r3, #10
 8002c36:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d8f6      	bhi.n	8002c2c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	b2db      	uxtb	r3, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	b2db      	uxtb	r3, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3350      	adds	r3, #80	@ 0x50
 8002caa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3350      	adds	r3, #80	@ 0x50
 8002cdc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fe f873 	bl	8000e1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f814 	bl	8002d6c <HAL_SD_InitCard>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00a      	b.n	8002d64 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b08e      	sub	sp, #56	@ 0x38
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d88:	2376      	movs	r3, #118	@ 0x76
 8002d8a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681d      	ldr	r5, [r3, #0]
 8002d90:	466c      	mov	r4, sp
 8002d92:	f107 0318 	add.w	r3, r7, #24
 8002d96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d9e:	f107 030c 	add.w	r3, r7, #12
 8002da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da4:	4628      	mov	r0, r5
 8002da6:	f002 fa8b 	bl	80052c0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002daa:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <HAL_SD_InitCard+0xe8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 facc 	bl	8005352 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002dba:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <HAL_SD_InitCard+0xe8>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7fe fb15 	bl	80013f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fe7a 	bl	8003ac0 <SD_PowerON>
 8002dcc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e02e      	b.n	8002e4a <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fd99 	bl	8003924 <SD_InitCard>
 8002df2:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e01b      	b.n	8002e4a <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f002 fb2b 	bl	8005476 <SDMMC_CmdBlockLength>
 8002e20:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00f      	beq.n	8002e48 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <HAL_SD_InitCard+0xec>)
 8002e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	@ 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bdb0      	pop	{r4, r5, r7, pc}
 8002e52:	bf00      	nop
 8002e54:	422580a0 	.word	0x422580a0
 8002e58:	004005ff 	.word	0x004005ff

08002e5c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b092      	sub	sp, #72	@ 0x48
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e6a:	f7fe fab5 	bl	80013d8 <HAL_GetTick>
 8002e6e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e1c5      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f040 81b8 	bne.w	800320c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d907      	bls.n	8002ec0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e1ac      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d002      	beq.n	8002ede <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	025b      	lsls	r3, r3, #9
 8002ee8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002eea:	2390      	movs	r3, #144	@ 0x90
 8002eec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f107 0214 	add.w	r2, r7, #20
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fa8a 	bl	800541e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d90a      	bls.n	8002f26 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2202      	movs	r2, #2
 8002f14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 faee 	bl	80054fe <SDMMC_CmdReadMultiBlock>
 8002f22:	6478      	str	r0, [r7, #68]	@ 0x44
 8002f24:	e009      	b.n	8002f3a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fac1 	bl	80054ba <SDMMC_CmdReadSingleBlock>
 8002f38:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d012      	beq.n	8002f66 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a7e      	ldr	r2, [pc, #504]	@ (8003140 <HAL_SD_ReadBlocks+0x2e4>)
 8002f46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e159      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f6a:	e061      	b.n	8003030 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d03c      	beq.n	8002ff4 <HAL_SD_ReadBlocks+0x198>
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d039      	beq.n	8002ff4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f84:	e033      	b.n	8002fee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f002 f9c3 	bl	8005316 <SDIO_ReadFIFO>
 8002f90:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f98:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	3301      	adds	r3, #1
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fda:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	3301      	adds	r3, #1
 8002fe0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fea:	3301      	adds	r3, #1
 8002fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff0:	2b07      	cmp	r3, #7
 8002ff2:	d9c8      	bls.n	8002f86 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ff4:	f7fe f9f0 	bl	80013d8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003000:	429a      	cmp	r2, r3
 8003002:	d902      	bls.n	800300a <HAL_SD_ReadBlocks+0x1ae>
 8003004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003006:	2b00      	cmp	r3, #0
 8003008:	d112      	bne.n	8003030 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a4c      	ldr	r2, [pc, #304]	@ (8003140 <HAL_SD_ReadBlocks+0x2e4>)
 8003010:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e0f4      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003036:	f240 332a 	movw	r3, #810	@ 0x32a
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d095      	beq.n	8002f6c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d022      	beq.n	8003094 <HAL_SD_ReadBlocks+0x238>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d91f      	bls.n	8003094 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	2b03      	cmp	r3, #3
 800305a:	d01b      	beq.n	8003094 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f002 fab3 	bl	80055cc <SDMMC_CmdStopTransfer>
 8003066:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800306a:	2b00      	cmp	r3, #0
 800306c:	d012      	beq.n	8003094 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a33      	ldr	r2, [pc, #204]	@ (8003140 <HAL_SD_ReadBlocks+0x2e4>)
 8003074:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800307a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0c2      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_SD_ReadBlocks+0x254>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d012      	beq.n	80030d6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_SD_ReadBlocks+0x2e4>)
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	f043 0208 	orr.w	r2, r3, #8
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0a1      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <HAL_SD_ReadBlocks+0x2e4>)
 80030ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	f043 0202 	orr.w	r2, r3, #2
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e087      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d064      	beq.n	80031e2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a08      	ldr	r2, [pc, #32]	@ (8003140 <HAL_SD_ReadBlocks+0x2e4>)
 800311e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06d      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
 800313e:	bf00      	nop
 8003140:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f002 f8e4 	bl	8005316 <SDIO_ReadFIFO>
 800314e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003152:	b2da      	uxtb	r2, r3
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	3301      	adds	r3, #1
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800315e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003160:	3b01      	subs	r3, #1
 8003162:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	b2da      	uxtb	r2, r3
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800316e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003170:	3301      	adds	r3, #1
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003176:	3b01      	subs	r3, #1
 8003178:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2da      	uxtb	r2, r3
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	3301      	adds	r3, #1
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800318a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318c:	3b01      	subs	r3, #1
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	0e1b      	lsrs	r3, r3, #24
 8003194:	b2da      	uxtb	r2, r3
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	3301      	adds	r3, #1
 800319e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a2:	3b01      	subs	r3, #1
 80031a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031a6:	f7fe f917 	bl	80013d8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d902      	bls.n	80031bc <HAL_SD_ReadBlocks+0x360>
 80031b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d112      	bne.n	80031e2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <HAL_SD_ReadBlocks+0x3c8>)
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e01b      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SD_ReadBlocks+0x39a>
 80031f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1a6      	bne.n	8003144 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80031fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e006      	b.n	800321a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	3748      	adds	r7, #72	@ 0x48
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	004005ff 	.word	0x004005ff

08003228 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b092      	sub	sp, #72	@ 0x48
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003236:	f7fe f8cf 	bl	80013d8 <HAL_GetTick>
 800323a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d107      	bne.n	800325a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e16d      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	f040 8160 	bne.w	8003528 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800326e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	441a      	add	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	429a      	cmp	r2, r3
 800327a:	d907      	bls.n	800328c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e154      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2203      	movs	r2, #3
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d002      	beq.n	80032aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	025b      	lsls	r3, r3, #9
 80032a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	025b      	lsls	r3, r3, #9
 80032b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032b6:	2390      	movs	r3, #144	@ 0x90
 80032b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032be:	2300      	movs	r3, #0
 80032c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f107 0218 	add.w	r2, r7, #24
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 f8a4 	bl	800541e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d90a      	bls.n	80032f2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 f94c 	bl	8005586 <SDMMC_CmdWriteMultiBlock>
 80032ee:	6478      	str	r0, [r7, #68]	@ 0x44
 80032f0:	e009      	b.n	8003306 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2210      	movs	r2, #16
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 f91f 	bl	8005542 <SDMMC_CmdWriteSingleBlock>
 8003304:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003308:	2b00      	cmp	r3, #0
 800330a:	d012      	beq.n	8003332 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a8b      	ldr	r2, [pc, #556]	@ (8003540 <HAL_SD_WriteBlocks+0x318>)
 8003312:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800331a:	431a      	orrs	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e101      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003336:	e065      	b.n	8003404 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d040      	beq.n	80033c8 <HAL_SD_WriteBlocks+0x1a0>
 8003346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03d      	beq.n	80033c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800334c:	2300      	movs	r3, #0
 800334e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003350:	e037      	b.n	80033c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	3301      	adds	r3, #1
 800335c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800335e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003360:	3b01      	subs	r3, #1
 8003362:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003372:	3301      	adds	r3, #1
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003378:	3b01      	subs	r3, #1
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	3301      	adds	r3, #1
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800338e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003390:	3b01      	subs	r3, #1
 8003392:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	061a      	lsls	r2, r3, #24
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a2:	3301      	adds	r3, #1
 80033a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a8:	3b01      	subs	r3, #1
 80033aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f107 0214 	add.w	r2, r7, #20
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 ffba 	bl	8005330 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033be:	3301      	adds	r3, #1
 80033c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c4:	2b07      	cmp	r3, #7
 80033c6:	d9c4      	bls.n	8003352 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80033c8:	f7fe f806 	bl	80013d8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d902      	bls.n	80033de <HAL_SD_WriteBlocks+0x1b6>
 80033d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d112      	bne.n	8003404 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a57      	ldr	r2, [pc, #348]	@ (8003540 <HAL_SD_WriteBlocks+0x318>)
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ec:	431a      	orrs	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e098      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340a:	f240 331a 	movw	r3, #794	@ 0x31a
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d091      	beq.n	8003338 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d022      	beq.n	8003468 <HAL_SD_WriteBlocks+0x240>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d91f      	bls.n	8003468 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342c:	2b03      	cmp	r3, #3
 800342e:	d01b      	beq.n	8003468 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f002 f8c9 	bl	80055cc <SDMMC_CmdStopTransfer>
 800343a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a3e      	ldr	r2, [pc, #248]	@ (8003540 <HAL_SD_WriteBlocks+0x318>)
 8003448:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e066      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_SD_WriteBlocks+0x25c>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2d      	ldr	r2, [pc, #180]	@ (8003540 <HAL_SD_WriteBlocks+0x318>)
 800348a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	f043 0208 	orr.w	r2, r3, #8
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e045      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a20      	ldr	r2, [pc, #128]	@ (8003540 <HAL_SD_WriteBlocks+0x318>)
 80034be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e02b      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d012      	beq.n	8003512 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <HAL_SD_WriteBlocks+0x318>)
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	f043 0210 	orr.w	r2, r3, #16
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e011      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f240 523a 	movw	r2, #1338	@ 0x53a
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e006      	b.n	8003536 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3748      	adds	r7, #72	@ 0x48
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	004005ff 	.word	0x004005ff

08003544 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003552:	0f9b      	lsrs	r3, r3, #30
 8003554:	b2da      	uxtb	r2, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800355e:	0e9b      	lsrs	r3, r3, #26
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	b2da      	uxtb	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003570:	0e1b      	lsrs	r3, r3, #24
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	b2da      	uxtb	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2da      	uxtb	r2, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800359a:	b2da      	uxtb	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a4:	0d1b      	lsrs	r3, r3, #20
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c2:	0bdb      	lsrs	r3, r3, #15
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d4:	0b9b      	lsrs	r3, r3, #14
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035e6:	0b5b      	lsrs	r3, r3, #13
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f8:	0b1b      	lsrs	r3, r3, #12
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2200      	movs	r2, #0
 800360a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003610:	2b00      	cmp	r3, #0
 8003612:	d163      	bne.n	80036dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003618:	009a      	lsls	r2, r3, #2
 800361a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800361e:	4013      	ands	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003624:	0f92      	lsrs	r2, r2, #30
 8003626:	431a      	orrs	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003630:	0edb      	lsrs	r3, r3, #27
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	b2da      	uxtb	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003642:	0e1b      	lsrs	r3, r3, #24
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	b2da      	uxtb	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003654:	0d5b      	lsrs	r3, r3, #21
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	b2da      	uxtb	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003678:	0bdb      	lsrs	r3, r3, #15
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	b2da      	uxtb	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	7e1b      	ldrb	r3, [r3, #24]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	3302      	adds	r3, #2
 800369c:	2201      	movs	r2, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80036a6:	fb03 f202 	mul.w	r2, r3, r2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	7a1b      	ldrb	r3, [r3, #8]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80036c8:	0a52      	lsrs	r2, r2, #9
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80036da:	e031      	b.n	8003740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d11d      	bne.n	8003720 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	431a      	orrs	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	3301      	adds	r3, #1
 8003700:	029a      	lsls	r2, r3, #10
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003714:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60
 800371e:	e00f      	b.n	8003740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a58      	ldr	r2, [pc, #352]	@ (8003888 <HAL_SD_GetCardCSD+0x344>)
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e09d      	b.n	800387c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003744:	0b9b      	lsrs	r3, r3, #14
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	b2da      	uxtb	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003756:	09db      	lsrs	r3, r3, #7
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800375e:	b2da      	uxtb	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800376e:	b2da      	uxtb	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	0fdb      	lsrs	r3, r3, #31
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	0f5b      	lsrs	r3, r3, #29
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	b2da      	uxtb	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	0e9b      	lsrs	r3, r3, #26
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	0d9b      	lsrs	r3, r3, #22
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	0d5b      	lsrs	r3, r3, #21
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	0bdb      	lsrs	r3, r3, #15
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	0b9b      	lsrs	r3, r3, #14
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	0b5b      	lsrs	r3, r3, #13
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	0b1b      	lsrs	r3, r3, #12
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	b2da      	uxtb	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	b2da      	uxtb	r2, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800386a:	b2da      	uxtb	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	004005ff 	.word	0x004005ff

0800388c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f970 	bl	8003bdc <SD_SendStatus>
 80038fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	0a5b      	lsrs	r3, r3, #9
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800391a:	693b      	ldr	r3, [r7, #16]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b094      	sub	sp, #80	@ 0x50
 8003928:	af04      	add	r7, sp, #16
 800392a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800392c:	2301      	movs	r3, #1
 800392e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f001 fd1a 	bl	800536e <SDIO_GetPowerState>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003940:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003944:	e0b8      	b.n	8003ab8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	2b03      	cmp	r3, #3
 800394c:	d02f      	beq.n	80039ae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f001 ff01 	bl	800575a <SDMMC_CmdSendCID>
 8003958:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800395a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <SD_InitCard+0x40>
    {
      return errorstate;
 8003960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003962:	e0a9      	b.n	8003ab8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fd44 	bl	80053f8 <SDIO_GetResponse>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2104      	movs	r1, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f001 fd3b 	bl	80053f8 <SDIO_GetResponse>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2108      	movs	r1, #8
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fd32 	bl	80053f8 <SDIO_GetResponse>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	210c      	movs	r1, #12
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 fd29 	bl	80053f8 <SDIO_GetResponse>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d00d      	beq.n	80039d2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f107 020e 	add.w	r2, r7, #14
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 ff07 	bl	80057d4 <SDMMC_CmdSetRelAdd>
 80039c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <SD_InitCard+0xae>
    {
      return errorstate;
 80039ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d0:	e072      	b.n	8003ab8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d036      	beq.n	8003a48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039da:	89fb      	ldrh	r3, [r7, #14]
 80039dc:	461a      	mov	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f001 fed1 	bl	8005796 <SDMMC_CmdSendCSD>
 80039f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <SD_InitCard+0xdc>
    {
      return errorstate;
 80039fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fe:	e05b      	b.n	8003ab8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fcf6 	bl	80053f8 <SDIO_GetResponse>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2104      	movs	r1, #4
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 fced 	bl	80053f8 <SDIO_GetResponse>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2108      	movs	r1, #8
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 fce4 	bl	80053f8 <SDIO_GetResponse>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	210c      	movs	r1, #12
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fcdb 	bl	80053f8 <SDIO_GetResponse>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fcd2 	bl	80053f8 <SDIO_GetResponse>
 8003a54:	4603      	mov	r3, r0
 8003a56:	0d1a      	lsrs	r2, r3, #20
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fd6e 	bl	8003544 <HAL_SD_GetCardCSD>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a72:	e021      	b.n	8003ab8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	2200      	movs	r2, #0
 8003a80:	461c      	mov	r4, r3
 8003a82:	4615      	mov	r5, r2
 8003a84:	4622      	mov	r2, r4
 8003a86:	462b      	mov	r3, r5
 8003a88:	4608      	mov	r0, r1
 8003a8a:	f001 fdc1 	bl	8005610 <SDMMC_CmdSelDesel>
 8003a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <SD_InitCard+0x176>
  {
    return errorstate;
 8003a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a98:	e00e      	b.n	8003ab8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681d      	ldr	r5, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	466c      	mov	r4, sp
 8003aa2:	f103 0210 	add.w	r2, r3, #16
 8003aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003aac:	3304      	adds	r3, #4
 8003aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f001 fc05 	bl	80052c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3740      	adds	r7, #64	@ 0x40
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bdb0      	pop	{r4, r5, r7, pc}

08003ac0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fdbc 	bl	8005656 <SDMMC_CmdGoIdleState>
 8003ade:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <SD_PowerON+0x2a>
  {
    return errorstate;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	e072      	b.n	8003bd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 fdcf 	bl	8005692 <SDMMC_CmdOperCond>
 8003af4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 fda5 	bl	8005656 <SDMMC_CmdGoIdleState>
 8003b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	e05b      	b.n	8003bd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d137      	bne.n	8003b96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fdcf 	bl	80056d0 <SDMMC_CmdAppCommand>
 8003b32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02d      	beq.n	8003b96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b3e:	e047      	b.n	8003bd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fdc2 	bl	80056d0 <SDMMC_CmdAppCommand>
 8003b4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	e03b      	b.n	8003bd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	491e      	ldr	r1, [pc, #120]	@ (8003bd8 <SD_PowerON+0x118>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fdd8 	bl	8005714 <SDMMC_CmdAppOperCommand>
 8003b64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b70:	e02e      	b.n	8003bd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fc3d 	bl	80053f8 <SDIO_GetResponse>
 8003b7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	0fdb      	lsrs	r3, r3, #31
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <SD_PowerON+0xcc>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <SD_PowerON+0xce>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]

    count++;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d802      	bhi.n	8003ba6 <SD_PowerON+0xe6>
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0cc      	beq.n	8003b40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d902      	bls.n	8003bb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bb4:	e00c      	b.n	8003bd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bc6:	e002      	b.n	8003bce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	c1100000 	.word	0xc1100000

08003bdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003bec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bf0:	e018      	b.n	8003c24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfa:	041b      	lsls	r3, r3, #16
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f001 fe09 	bl	8005816 <SDMMC_CmdSendStatus>
 8003c04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e009      	b.n	8003c24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 fbee 	bl	80053f8 <SDIO_GetResponse>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07b      	b.n	8003d36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c4e:	d009      	beq.n	8003c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
 8003c56:	e005      	b.n	8003c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd f934 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	ea42 0103 	orr.w	r1, r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0104 	and.w	r1, r3, #4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	f003 0210 	and.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e041      	b.n	8003dd4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fd f909 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f000 f9b5 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e04e      	b.n	8003e92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d022      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x80>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1e:	d01d      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x80>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d018      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x80>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x80>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1c      	ldr	r2, [pc, #112]	@ (8003eac <HAL_TIM_Base_Start_IT+0xd0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x80>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x80>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x80>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d010      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	e007      	b.n	8003e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40000c00 	.word	0x40000c00
 8003eb0:	40010400 	.word	0x40010400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40001800 	.word	0x40001800

08003ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0202 	mvn.w	r2, #2
 8003ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8d2 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8c4 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8d5 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d020      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0204 	mvn.w	r2, #4
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8ac 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f89e 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8af 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0208 	mvn.w	r2, #8
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f886 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f878 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f889 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0210 	mvn.w	r2, #16
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f860 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f852 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f863 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fe0c 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f97c 	bl	8004344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f834 	bl	80040d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0220 	mvn.w	r2, #32
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f94e 	bl	8004330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a43      	ldr	r2, [pc, #268]	@ (800420c <TIM_Base_SetConfig+0x120>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a40      	ldr	r2, [pc, #256]	@ (8004210 <TIM_Base_SetConfig+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3f      	ldr	r2, [pc, #252]	@ (8004214 <TIM_Base_SetConfig+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3e      	ldr	r2, [pc, #248]	@ (8004218 <TIM_Base_SetConfig+0x12c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3d      	ldr	r2, [pc, #244]	@ (800421c <TIM_Base_SetConfig+0x130>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a32      	ldr	r2, [pc, #200]	@ (800420c <TIM_Base_SetConfig+0x120>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d02b      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414c:	d027      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <TIM_Base_SetConfig+0x124>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d023      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2e      	ldr	r2, [pc, #184]	@ (8004214 <TIM_Base_SetConfig+0x128>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01f      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2d      	ldr	r2, [pc, #180]	@ (8004218 <TIM_Base_SetConfig+0x12c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01b      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2c      	ldr	r2, [pc, #176]	@ (800421c <TIM_Base_SetConfig+0x130>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d017      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2b      	ldr	r2, [pc, #172]	@ (8004220 <TIM_Base_SetConfig+0x134>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2a      	ldr	r2, [pc, #168]	@ (8004224 <TIM_Base_SetConfig+0x138>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a29      	ldr	r2, [pc, #164]	@ (8004228 <TIM_Base_SetConfig+0x13c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a28      	ldr	r2, [pc, #160]	@ (800422c <TIM_Base_SetConfig+0x140>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <TIM_Base_SetConfig+0x144>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a26      	ldr	r2, [pc, #152]	@ (8004234 <TIM_Base_SetConfig+0x148>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0e      	ldr	r2, [pc, #56]	@ (800420c <TIM_Base_SetConfig+0x120>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0xf2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a10      	ldr	r2, [pc, #64]	@ (800421c <TIM_Base_SetConfig+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d103      	bne.n	80041e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f043 0204 	orr.w	r2, r3, #4
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010400 	.word	0x40010400
 8004220:	40014000 	.word	0x40014000
 8004224:	40014400 	.word	0x40014400
 8004228:	40014800 	.word	0x40014800
 800422c:	40001800 	.word	0x40001800
 8004230:	40001c00 	.word	0x40001c00
 8004234:	40002000 	.word	0x40002000

08004238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e05a      	b.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429c:	d01d      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a15      	ldr	r2, [pc, #84]	@ (800432c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10c      	bne.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40010400 	.word	0x40010400
 8004328:	40014000 	.word	0x40014000
 800432c:	40001800 	.word	0x40001800

08004330 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e042      	b.n	80043f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc fe24 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	@ 0x24
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800439a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fd1b 	bl	8004dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b20      	cmp	r3, #32
 8004410:	d121      	bne.n	8004456 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_UART_Transmit_IT+0x26>
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e01a      	b.n	8004458 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2221      	movs	r2, #33	@ 0x21
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004450:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	d112      	bne.n	80044a4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Receive_IT+0x26>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e00b      	b.n	80044a6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	461a      	mov	r2, r3
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fac8 	bl	8004a30 <UART_Start_Receive_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	e000      	b.n	80044a6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b0ba      	sub	sp, #232	@ 0xe8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_UART_IRQHandler+0x66>
 8004502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fba4 	bl	8004c5c <UART_Receive_IT>
      return;
 8004514:	e273      	b.n	80049fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80de 	beq.w	80046dc <HAL_UART_IRQHandler+0x22c>
 8004520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004530:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80d1 	beq.w	80046dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_UART_IRQHandler+0xae>
 8004546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <HAL_UART_IRQHandler+0xd2>
 800456a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f043 0202 	orr.w	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_UART_IRQHandler+0xf6>
 800458e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f043 0204 	orr.w	r2, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d011      	beq.n	80045d6 <HAL_UART_IRQHandler+0x126>
 80045b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d105      	bne.n	80045ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	f043 0208 	orr.w	r2, r3, #8
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 820a 	beq.w	80049f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_UART_IRQHandler+0x14e>
 80045ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fb2f 	bl	8004c5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b40      	cmp	r3, #64	@ 0x40
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <HAL_UART_IRQHandler+0x17a>
 8004622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d04f      	beq.n	80046ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa3a 	bl	8004aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463a:	2b40      	cmp	r3, #64	@ 0x40
 800463c:	d141      	bne.n	80046c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800465c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3314      	adds	r3, #20
 8004666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800466a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800466e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1d9      	bne.n	800463e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d013      	beq.n	80046ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004696:	4a8a      	ldr	r2, [pc, #552]	@ (80048c0 <HAL_UART_IRQHandler+0x410>)
 8004698:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fd f84b 	bl	800173a <HAL_DMA_Abort_IT>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046b4:	4610      	mov	r0, r2
 80046b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	e00e      	b.n	80046d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9a2 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	e00a      	b.n	80046d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f99e 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	e006      	b.n	80046d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f99a 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046d6:	e18d      	b.n	80049f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d8:	bf00      	nop
    return;
 80046da:	e18b      	b.n	80049f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	f040 8167 	bne.w	80049b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8160 	beq.w	80049b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8159 	beq.w	80049b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004722:	2b40      	cmp	r3, #64	@ 0x40
 8004724:	f040 80ce 	bne.w	80048c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80a9 	beq.w	8004890 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004746:	429a      	cmp	r2, r3
 8004748:	f080 80a2 	bcs.w	8004890 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004752:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800475e:	f000 8088 	beq.w	8004872 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800477c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800478e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800479a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1d9      	bne.n	8004762 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3314      	adds	r3, #20
 80047b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3314      	adds	r3, #20
 80047ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e1      	bne.n	80047ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3314      	adds	r3, #20
 80047f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3314      	adds	r3, #20
 800480a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800480e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004810:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004814:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800481c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e3      	bne.n	80047ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004842:	f023 0310 	bic.w	r3, r3, #16
 8004846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004854:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004856:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800485a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e3      	bne.n	8004830 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	4618      	mov	r0, r3
 800486e:	f7fc fef4 	bl	800165a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004880:	b29b      	uxth	r3, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	b29b      	uxth	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8c5 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800488e:	e0b3      	b.n	80049f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004894:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004898:	429a      	cmp	r2, r3
 800489a:	f040 80ad 	bne.w	80049f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a8:	f040 80a6 	bne.w	80049f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8ad 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
      return;
 80048be:	e09b      	b.n	80049f8 <HAL_UART_IRQHandler+0x548>
 80048c0:	08004b6b 	.word	0x08004b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 808e 	beq.w	80049fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80048e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8089 	beq.w	80049fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004900:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800490e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004910:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004914:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800491c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e3      	bne.n	80048ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	623b      	str	r3, [r7, #32]
   return(result);
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004946:	633a      	str	r2, [r7, #48]	@ 0x30
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800494c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60fb      	str	r3, [r7, #12]
   return(result);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800498c:	61fa      	str	r2, [r7, #28]
 800498e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	617b      	str	r3, [r7, #20]
   return(result);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e3      	bne.n	8004968 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f833 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049b2:	e023      	b.n	80049fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <HAL_UART_IRQHandler+0x524>
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8dd 	bl	8004b8c <UART_Transmit_IT>
    return;
 80049d2:	e014      	b.n	80049fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00e      	beq.n	80049fe <HAL_UART_IRQHandler+0x54e>
 80049e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f91d 	bl	8004c2c <UART_EndTransmit_IT>
    return;
 80049f2:	e004      	b.n	80049fe <HAL_UART_IRQHandler+0x54e>
    return;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_UART_IRQHandler+0x54e>
      return;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_UART_IRQHandler+0x54e>
      return;
 80049fc:	bf00      	nop
  }
}
 80049fe:	37e8      	adds	r7, #232	@ 0xe8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	88fa      	ldrh	r2, [r7, #6]
 8004a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2222      	movs	r2, #34	@ 0x22
 8004a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0220 	orr.w	r2, r2, #32
 8004a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b095      	sub	sp, #84	@ 0x54
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d119      	bne.n	8004b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f023 0310 	bic.w	r3, r3, #16
 8004b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	61ba      	str	r2, [r7, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6979      	ldr	r1, [r7, #20]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b5e:	bf00      	nop
 8004b60:	3754      	adds	r7, #84	@ 0x54
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff ff40 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b21      	cmp	r3, #33	@ 0x21
 8004b9e:	d13e      	bne.n	8004c1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba8:	d114      	bne.n	8004bd4 <UART_Transmit_IT+0x48>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d110      	bne.n	8004bd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]
 8004bd2:	e008      	b.n	8004be6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6211      	str	r1, [r2, #32]
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fc f87b 	bl	8000d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	@ 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b22      	cmp	r3, #34	@ 0x22
 8004c76:	f040 80aa 	bne.w	8004dce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c82:	d115      	bne.n	8004cb0 <UART_Receive_IT+0x54>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	1c9a      	adds	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cae:	e024      	b.n	8004cfa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbe:	d007      	beq.n	8004cd0 <UART_Receive_IT+0x74>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <UART_Receive_IT+0x82>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e008      	b.n	8004cf0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4619      	mov	r1, r3
 8004d08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d15d      	bne.n	8004dca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0220 	bic.w	r2, r2, #32
 8004d1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d135      	bne.n	8004dc0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f023 0310 	bic.w	r3, r3, #16
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7a:	623a      	str	r2, [r7, #32]
 8004d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	69f9      	ldr	r1, [r7, #28]
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e5      	bne.n	8004d5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d10a      	bne.n	8004db2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fe2d 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
 8004dbe:	e002      	b.n	8004dc6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fb ffa3 	bl	8000d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e002      	b.n	8004dd0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dce:	2302      	movs	r3, #2
  }
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3730      	adds	r7, #48	@ 0x30
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b0c0      	sub	sp, #256	@ 0x100
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df4:	68d9      	ldr	r1, [r3, #12]
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	ea40 0301 	orr.w	r3, r0, r1
 8004e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e30:	f021 010c 	bic.w	r1, r1, #12
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	6999      	ldr	r1, [r3, #24]
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	ea40 0301 	orr.w	r3, r0, r1
 8004e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b8f      	ldr	r3, [pc, #572]	@ (80050a4 <UART_SetConfig+0x2cc>)
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d005      	beq.n	8004e78 <UART_SetConfig+0xa0>
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b8d      	ldr	r3, [pc, #564]	@ (80050a8 <UART_SetConfig+0x2d0>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d104      	bne.n	8004e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e78:	f7fd fabc 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8004e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e80:	e003      	b.n	8004e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e82:	f7fd faa3 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8004e86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e94:	f040 810c 	bne.w	80050b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eaa:	4622      	mov	r2, r4
 8004eac:	462b      	mov	r3, r5
 8004eae:	1891      	adds	r1, r2, r2
 8004eb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004eb2:	415b      	adcs	r3, r3
 8004eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eba:	4621      	mov	r1, r4
 8004ebc:	eb12 0801 	adds.w	r8, r2, r1
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	eb43 0901 	adc.w	r9, r3, r1
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eda:	4690      	mov	r8, r2
 8004edc:	4699      	mov	r9, r3
 8004ede:	4623      	mov	r3, r4
 8004ee0:	eb18 0303 	adds.w	r3, r8, r3
 8004ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ee8:	462b      	mov	r3, r5
 8004eea:	eb49 0303 	adc.w	r3, r9, r3
 8004eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004efe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f06:	460b      	mov	r3, r1
 8004f08:	18db      	adds	r3, r3, r3
 8004f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	eb42 0303 	adc.w	r3, r2, r3
 8004f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f1c:	f7fb f9b0 	bl	8000280 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b61      	ldr	r3, [pc, #388]	@ (80050ac <UART_SetConfig+0x2d4>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	011c      	lsls	r4, r3, #4
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f50:	4641      	mov	r1, r8
 8004f52:	eb12 0a01 	adds.w	sl, r2, r1
 8004f56:	4649      	mov	r1, r9
 8004f58:	eb43 0b01 	adc.w	fp, r3, r1
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f70:	4692      	mov	sl, r2
 8004f72:	469b      	mov	fp, r3
 8004f74:	4643      	mov	r3, r8
 8004f76:	eb1a 0303 	adds.w	r3, sl, r3
 8004f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	eb4b 0303 	adc.w	r3, fp, r3
 8004f84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	18db      	adds	r3, r3, r3
 8004fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	eb42 0303 	adc.w	r3, r2, r3
 8004fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fb2:	f7fb f965 	bl	8000280 <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <UART_SetConfig+0x2d4>)
 8004fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2264      	movs	r2, #100	@ 0x64
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	1acb      	subs	r3, r1, r3
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fd2:	4b36      	ldr	r3, [pc, #216]	@ (80050ac <UART_SetConfig+0x2d4>)
 8004fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fe0:	441c      	add	r4, r3
 8004fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005004:	4641      	mov	r1, r8
 8005006:	1851      	adds	r1, r2, r1
 8005008:	6339      	str	r1, [r7, #48]	@ 0x30
 800500a:	4649      	mov	r1, r9
 800500c:	414b      	adcs	r3, r1
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800501c:	4659      	mov	r1, fp
 800501e:	00cb      	lsls	r3, r1, #3
 8005020:	4651      	mov	r1, sl
 8005022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005026:	4651      	mov	r1, sl
 8005028:	00ca      	lsls	r2, r1, #3
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	4603      	mov	r3, r0
 8005030:	4642      	mov	r2, r8
 8005032:	189b      	adds	r3, r3, r2
 8005034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005038:	464b      	mov	r3, r9
 800503a:	460a      	mov	r2, r1
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005050:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005058:	460b      	mov	r3, r1
 800505a:	18db      	adds	r3, r3, r3
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800505e:	4613      	mov	r3, r2
 8005060:	eb42 0303 	adc.w	r3, r2, r3
 8005064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800506a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800506e:	f7fb f907 	bl	8000280 <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <UART_SetConfig+0x2d4>)
 8005078:	fba3 1302 	umull	r1, r3, r3, r2
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	2164      	movs	r1, #100	@ 0x64
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	3332      	adds	r3, #50	@ 0x32
 800508a:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <UART_SetConfig+0x2d4>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4422      	add	r2, r4
 800509e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050a0:	e106      	b.n	80052b0 <UART_SetConfig+0x4d8>
 80050a2:	bf00      	nop
 80050a4:	40011000 	.word	0x40011000
 80050a8:	40011400 	.word	0x40011400
 80050ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050c2:	4642      	mov	r2, r8
 80050c4:	464b      	mov	r3, r9
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	6239      	str	r1, [r7, #32]
 80050ca:	415b      	adcs	r3, r3
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050d2:	4641      	mov	r1, r8
 80050d4:	1854      	adds	r4, r2, r1
 80050d6:	4649      	mov	r1, r9
 80050d8:	eb43 0501 	adc.w	r5, r3, r1
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	00eb      	lsls	r3, r5, #3
 80050e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ea:	00e2      	lsls	r2, r4, #3
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	4643      	mov	r3, r8
 80050f2:	18e3      	adds	r3, r4, r3
 80050f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050f8:	464b      	mov	r3, r9
 80050fa:	eb45 0303 	adc.w	r3, r5, r3
 80050fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800510e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800511e:	4629      	mov	r1, r5
 8005120:	008b      	lsls	r3, r1, #2
 8005122:	4621      	mov	r1, r4
 8005124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005128:	4621      	mov	r1, r4
 800512a:	008a      	lsls	r2, r1, #2
 800512c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005130:	f7fb f8a6 	bl	8000280 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4b60      	ldr	r3, [pc, #384]	@ (80052bc <UART_SetConfig+0x4e4>)
 800513a:	fba3 2302 	umull	r2, r3, r3, r2
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	011c      	lsls	r4, r3, #4
 8005142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800514c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	1891      	adds	r1, r2, r2
 800515a:	61b9      	str	r1, [r7, #24]
 800515c:	415b      	adcs	r3, r3
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005164:	4641      	mov	r1, r8
 8005166:	1851      	adds	r1, r2, r1
 8005168:	6139      	str	r1, [r7, #16]
 800516a:	4649      	mov	r1, r9
 800516c:	414b      	adcs	r3, r1
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800517c:	4659      	mov	r1, fp
 800517e:	00cb      	lsls	r3, r1, #3
 8005180:	4651      	mov	r1, sl
 8005182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005186:	4651      	mov	r1, sl
 8005188:	00ca      	lsls	r2, r1, #3
 800518a:	4610      	mov	r0, r2
 800518c:	4619      	mov	r1, r3
 800518e:	4603      	mov	r3, r0
 8005190:	4642      	mov	r2, r8
 8005192:	189b      	adds	r3, r3, r2
 8005194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005198:	464b      	mov	r3, r9
 800519a:	460a      	mov	r2, r1
 800519c:	eb42 0303 	adc.w	r3, r2, r3
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051bc:	4649      	mov	r1, r9
 80051be:	008b      	lsls	r3, r1, #2
 80051c0:	4641      	mov	r1, r8
 80051c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c6:	4641      	mov	r1, r8
 80051c8:	008a      	lsls	r2, r1, #2
 80051ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051ce:	f7fb f857 	bl	8000280 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	4b38      	ldr	r3, [pc, #224]	@ (80052bc <UART_SetConfig+0x4e4>)
 80051da:	fba3 2301 	umull	r2, r3, r3, r1
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2264      	movs	r2, #100	@ 0x64
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	1acb      	subs	r3, r1, r3
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	3332      	adds	r3, #50	@ 0x32
 80051ec:	4a33      	ldr	r2, [pc, #204]	@ (80052bc <UART_SetConfig+0x4e4>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051f8:	441c      	add	r4, r3
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	673b      	str	r3, [r7, #112]	@ 0x70
 8005202:	677a      	str	r2, [r7, #116]	@ 0x74
 8005204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	1891      	adds	r1, r2, r2
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	415b      	adcs	r3, r3
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005218:	4641      	mov	r1, r8
 800521a:	1851      	adds	r1, r2, r1
 800521c:	6039      	str	r1, [r7, #0]
 800521e:	4649      	mov	r1, r9
 8005220:	414b      	adcs	r3, r1
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005230:	4659      	mov	r1, fp
 8005232:	00cb      	lsls	r3, r1, #3
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523a:	4651      	mov	r1, sl
 800523c:	00ca      	lsls	r2, r1, #3
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	4603      	mov	r3, r0
 8005244:	4642      	mov	r2, r8
 8005246:	189b      	adds	r3, r3, r2
 8005248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800524a:	464b      	mov	r3, r9
 800524c:	460a      	mov	r2, r1
 800524e:	eb42 0303 	adc.w	r3, r2, r3
 8005252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	663b      	str	r3, [r7, #96]	@ 0x60
 800525e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800526c:	4649      	mov	r1, r9
 800526e:	008b      	lsls	r3, r1, #2
 8005270:	4641      	mov	r1, r8
 8005272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005276:	4641      	mov	r1, r8
 8005278:	008a      	lsls	r2, r1, #2
 800527a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800527e:	f7fa ffff 	bl	8000280 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4b0d      	ldr	r3, [pc, #52]	@ (80052bc <UART_SetConfig+0x4e4>)
 8005288:	fba3 1302 	umull	r1, r3, r3, r2
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	2164      	movs	r1, #100	@ 0x64
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	3332      	adds	r3, #50	@ 0x32
 800529a:	4a08      	ldr	r2, [pc, #32]	@ (80052bc <UART_SetConfig+0x4e4>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	f003 020f 	and.w	r2, r3, #15
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4422      	add	r2, r4
 80052ae:	609a      	str	r2, [r3, #8]
}
 80052b0:	bf00      	nop
 80052b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052bc:	51eb851f 	.word	0x51eb851f

080052c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80052c0:	b084      	sub	sp, #16
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	f107 001c 	add.w	r0, r7, #28
 80052ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80052de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80052e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80052e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80052ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80052fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	b004      	add	sp, #16
 8005314:	4770      	bx	lr

08005316 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2203      	movs	r2, #3
 800535e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0303 	and.w	r3, r3, #3
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80053ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80053b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80053c4:	f023 030f 	bic.w	r3, r3, #15
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	b2db      	uxtb	r3, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3314      	adds	r3, #20
 8005406:	461a      	mov	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4413      	add	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
}  
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005444:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800544a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005450:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005468:	2300      	movs	r3, #0

}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b088      	sub	sp, #32
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005484:	2310      	movs	r3, #16
 8005486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005488:	2340      	movs	r3, #64	@ 0x40
 800548a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005494:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ff74 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80054a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a6:	2110      	movs	r1, #16
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f9d7 	bl	800585c <SDMMC_GetCmdResp1>
 80054ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b0:	69fb      	ldr	r3, [r7, #28]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3720      	adds	r7, #32
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b088      	sub	sp, #32
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054c8:	2311      	movs	r3, #17
 80054ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054cc:	2340      	movs	r3, #64	@ 0x40
 80054ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ff52 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ea:	2111      	movs	r1, #17
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9b5 	bl	800585c <SDMMC_GetCmdResp1>
 80054f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f4:	69fb      	ldr	r3, [r7, #28]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800550c:	2312      	movs	r3, #18
 800550e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005510:	2340      	movs	r3, #64	@ 0x40
 8005512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800551c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff30 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	2112      	movs	r1, #18
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f993 	bl	800585c <SDMMC_GetCmdResp1>
 8005536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005538:	69fb      	ldr	r3, [r7, #28]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005550:	2318      	movs	r3, #24
 8005552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005554:	2340      	movs	r3, #64	@ 0x40
 8005556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800555c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ff0e 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800556e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005572:	2118      	movs	r1, #24
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f971 	bl	800585c <SDMMC_GetCmdResp1>
 800557a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b088      	sub	sp, #32
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005594:	2319      	movs	r3, #25
 8005596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005598:	2340      	movs	r3, #64	@ 0x40
 800559a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff feec 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b6:	2119      	movs	r1, #25
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f94f 	bl	800585c <SDMMC_GetCmdResp1>
 80055be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c0:	69fb      	ldr	r3, [r7, #28]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055d8:	230c      	movs	r3, #12
 80055da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055dc:	2340      	movs	r3, #64	@ 0x40
 80055de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff feca 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80055f6:	4a05      	ldr	r2, [pc, #20]	@ (800560c <SDMMC_CmdStopTransfer+0x40>)
 80055f8:	210c      	movs	r1, #12
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f92e 	bl	800585c <SDMMC_GetCmdResp1>
 8005600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005602:	69fb      	ldr	r3, [r7, #28]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	05f5e100 	.word	0x05f5e100

08005610 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	@ 0x28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005620:	2307      	movs	r3, #7
 8005622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005624:	2340      	movs	r3, #64	@ 0x40
 8005626:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800562c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005630:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	4619      	mov	r1, r3
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fea6 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800563e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005642:	2107      	movs	r1, #7
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f909 	bl	800585c <SDMMC_GetCmdResp1>
 800564a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800564e:	4618      	mov	r0, r3
 8005650:	3728      	adds	r7, #40	@ 0x28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b088      	sub	sp, #32
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005666:	2300      	movs	r3, #0
 8005668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800566e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005672:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fe85 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fb23 	bl	8005ccc <SDMMC_GetCmdError>
 8005686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005688:	69fb      	ldr	r3, [r7, #28]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b088      	sub	sp, #32
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800569a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800569e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80056a0:	2308      	movs	r3, #8
 80056a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056a4:	2340      	movs	r3, #64	@ 0x40
 80056a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056b2:	f107 0308 	add.w	r3, r7, #8
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fe66 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fab6 	bl	8005c30 <SDMMC_GetCmdResp7>
 80056c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056c6:	69fb      	ldr	r3, [r7, #28]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056de:	2337      	movs	r3, #55	@ 0x37
 80056e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056e2:	2340      	movs	r3, #64	@ 0x40
 80056e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056f0:	f107 0308 	add.w	r3, r7, #8
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fe47 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80056fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005700:	2137      	movs	r1, #55	@ 0x37
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8aa 	bl	800585c <SDMMC_GetCmdResp1>
 8005708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800570a:	69fb      	ldr	r3, [r7, #28]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800572a:	2329      	movs	r3, #41	@ 0x29
 800572c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800572e:	2340      	movs	r3, #64	@ 0x40
 8005730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800573a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800573c:	f107 0308 	add.w	r3, r7, #8
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fe21 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9bd 	bl	8005ac8 <SDMMC_GetCmdResp3>
 800574e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005750:	69fb      	ldr	r3, [r7, #28]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b088      	sub	sp, #32
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005766:	2302      	movs	r3, #2
 8005768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800576a:	23c0      	movs	r3, #192	@ 0xc0
 800576c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005778:	f107 0308 	add.w	r3, r7, #8
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fe03 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f957 	bl	8005a38 <SDMMC_GetCmdResp2>
 800578a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800578c:	69fb      	ldr	r3, [r7, #28]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b088      	sub	sp, #32
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80057a4:	2309      	movs	r3, #9
 80057a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057a8:	23c0      	movs	r3, #192	@ 0xc0
 80057aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057b6:	f107 0308 	add.w	r3, r7, #8
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff fde4 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f938 	bl	8005a38 <SDMMC_GetCmdResp2>
 80057c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ca:	69fb      	ldr	r3, [r7, #28]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80057e2:	2303      	movs	r3, #3
 80057e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e6:	2340      	movs	r3, #64	@ 0x40
 80057e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f4:	f107 0308 	add.w	r3, r7, #8
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fdc5 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	2103      	movs	r1, #3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f99d 	bl	8005b44 <SDMMC_GetCmdResp6>
 800580a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800580c:	69fb      	ldr	r3, [r7, #28]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b088      	sub	sp, #32
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005824:	230d      	movs	r3, #13
 8005826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005828:	2340      	movs	r3, #64	@ 0x40
 800582a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005834:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fda4 	bl	800538a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005846:	210d      	movs	r1, #13
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f807 	bl	800585c <SDMMC_GetCmdResp1>
 800584e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005850:	69fb      	ldr	r3, [r7, #28]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	460b      	mov	r3, r1
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800586a:	4b70      	ldr	r3, [pc, #448]	@ (8005a2c <SDMMC_GetCmdResp1+0x1d0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a70      	ldr	r2, [pc, #448]	@ (8005a30 <SDMMC_GetCmdResp1+0x1d4>)
 8005870:	fba2 2303 	umull	r2, r3, r2, r3
 8005874:	0a5a      	lsrs	r2, r3, #9
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	fb02 f303 	mul.w	r3, r2, r3
 800587c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	61fa      	str	r2, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005888:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800588c:	e0c9      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005892:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ef      	beq.n	800587e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ea      	bne.n	800587e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2204      	movs	r2, #4
 80058b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058ba:	2304      	movs	r3, #4
 80058bc:	e0b1      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0a6      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	22c5      	movs	r2, #197	@ 0xc5
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff fd7f 	bl	80053de <SDIO_GetCommandResponse>
 80058e0:	4603      	mov	r3, r0
 80058e2:	461a      	mov	r2, r3
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d001      	beq.n	80058ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e099      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80058ee:	2100      	movs	r1, #0
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff fd81 	bl	80053f8 <SDIO_GetResponse>
 80058f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005a34 <SDMMC_GetCmdResp1+0x1d8>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005902:	2300      	movs	r3, #0
 8005904:	e08d      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	da02      	bge.n	8005912 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800590c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005910:	e087      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800591c:	2340      	movs	r3, #64	@ 0x40
 800591e:	e080      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800592a:	2380      	movs	r3, #128	@ 0x80
 800592c:	e079      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800593c:	e071      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800594c:	e069      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800595c:	e061      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005968:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800596c:	e059      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800597c:	e051      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800598c:	e049      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005998:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800599c:	e041      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80059a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ac:	e039      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80059b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059bc:	e031      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80059c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80059cc:	e029      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80059d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80059dc:	e021      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80059e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80059ec:	e019      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80059f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80059fc:	e011      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005a08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005a0c:	e009      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005a18:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005a1c:	e001      	b.n	8005a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000000 	.word	0x20000000
 8005a30:	10624dd3 	.word	0x10624dd3
 8005a34:	fdffe008 	.word	0xfdffe008

08005a38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a40:	4b1f      	ldr	r3, [pc, #124]	@ (8005ac0 <SDMMC_GetCmdResp2+0x88>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac4 <SDMMC_GetCmdResp2+0x8c>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	0a5b      	lsrs	r3, r3, #9
 8005a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	60fa      	str	r2, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a64:	e026      	b.n	8005ab4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0ef      	beq.n	8005a56 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ea      	bne.n	8005a56 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a92:	2304      	movs	r3, #4
 8005a94:	e00e      	b.n	8005ab4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d004      	beq.n	8005aac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e003      	b.n	8005ab4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	22c5      	movs	r2, #197	@ 0xc5
 8005ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20000000 	.word	0x20000000
 8005ac4:	10624dd3 	.word	0x10624dd3

08005ac8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <SDMMC_GetCmdResp3+0x74>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b40 <SDMMC_GetCmdResp3+0x78>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	0a5b      	lsrs	r3, r3, #9
 8005adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae0:	fb02 f303 	mul.w	r3, r2, r3
 8005ae4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1e5a      	subs	r2, r3, #1
 8005aea:	60fa      	str	r2, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005af0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005af4:	e01b      	b.n	8005b2e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0ef      	beq.n	8005ae6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ea      	bne.n	8005ae6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b22:	2304      	movs	r3, #4
 8005b24:	e003      	b.n	8005b2e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	22c5      	movs	r2, #197	@ 0xc5
 8005b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000000 	.word	0x20000000
 8005b40:	10624dd3 	.word	0x10624dd3

08005b44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b52:	4b35      	ldr	r3, [pc, #212]	@ (8005c28 <SDMMC_GetCmdResp6+0xe4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a35      	ldr	r2, [pc, #212]	@ (8005c2c <SDMMC_GetCmdResp6+0xe8>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	0a5b      	lsrs	r3, r3, #9
 8005b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	1e5a      	subs	r2, r3, #1
 8005b6c:	61fa      	str	r2, [r7, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b76:	e052      	b.n	8005c1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ef      	beq.n	8005b68 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ea      	bne.n	8005b68 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	e03a      	b.n	8005c1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e02f      	b.n	8005c1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fc0d 	bl	80053de <SDIO_GetCommandResponse>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d001      	beq.n	8005bd2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e025      	b.n	8005c1e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	22c5      	movs	r2, #197	@ 0xc5
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005bd8:	2100      	movs	r1, #0
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7ff fc0c 	bl	80053f8 <SDIO_GetResponse>
 8005be0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	0c1b      	lsrs	r3, r3, #16
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e011      	b.n	8005c1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c08:	e009      	b.n	8005c1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c18:	e001      	b.n	8005c1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000000 	.word	0x20000000
 8005c2c:	10624dd3 	.word	0x10624dd3

08005c30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c38:	4b22      	ldr	r3, [pc, #136]	@ (8005cc4 <SDMMC_GetCmdResp7+0x94>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a22      	ldr	r2, [pc, #136]	@ (8005cc8 <SDMMC_GetCmdResp7+0x98>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	0a5b      	lsrs	r3, r3, #9
 8005c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1e5a      	subs	r2, r3, #1
 8005c52:	60fa      	str	r2, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c5c:	e02c      	b.n	8005cb8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ef      	beq.n	8005c4e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ea      	bne.n	8005c4e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2204      	movs	r2, #4
 8005c88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	e014      	b.n	8005cb8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e009      	b.n	8005cb8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2240      	movs	r2, #64	@ 0x40
 8005cb4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005cb6:	2300      	movs	r3, #0
  
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	10624dd3 	.word	0x10624dd3

08005ccc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cd4:	4b11      	ldr	r3, [pc, #68]	@ (8005d1c <SDMMC_GetCmdError+0x50>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a11      	ldr	r2, [pc, #68]	@ (8005d20 <SDMMC_GetCmdError+0x54>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0a5b      	lsrs	r3, r3, #9
 8005ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	60fa      	str	r2, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005cf8:	e009      	b.n	8005d0e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f1      	beq.n	8005cea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	22c5      	movs	r2, #197	@ 0xc5
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000000 	.word	0x20000000
 8005d20:	10624dd3 	.word	0x10624dd3

08005d24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d28:	4904      	ldr	r1, [pc, #16]	@ (8005d3c <MX_FATFS_Init+0x18>)
 8005d2a:	4805      	ldr	r0, [pc, #20]	@ (8005d40 <MX_FATFS_Init+0x1c>)
 8005d2c:	f002 fc5c 	bl	80085e8 <FATFS_LinkDriver>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461a      	mov	r2, r3
 8005d34:	4b03      	ldr	r3, [pc, #12]	@ (8005d44 <MX_FATFS_Init+0x20>)
 8005d36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d38:	bf00      	nop
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	200002c0 	.word	0x200002c0
 8005d40:	08009034 	.word	0x08009034
 8005d44:	200002bc 	.word	0x200002bc

08005d48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005d62:	f000 f86b 	bl	8005e3c <BSP_SD_IsDetected>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e005      	b.n	8005d7c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005d70:	4804      	ldr	r0, [pc, #16]	@ (8005d84 <BSP_SD_Init+0x2c>)
 8005d72:	f7fc ffcb 	bl	8002d0c <HAL_SD_Init>
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000098 	.word	0x20000098

08005d88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	4806      	ldr	r0, [pc, #24]	@ (8005dc0 <BSP_SD_ReadBlocks+0x38>)
 8005da6:	f7fd f859 	bl	8002e5c <HAL_SD_ReadBlocks>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000098 	.word	0x20000098

08005dc4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	4806      	ldr	r0, [pc, #24]	@ (8005dfc <BSP_SD_WriteBlocks+0x38>)
 8005de2:	f7fd fa21 	bl	8003228 <HAL_SD_WriteBlocks>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000098 	.word	0x20000098

08005e00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e04:	4805      	ldr	r0, [pc, #20]	@ (8005e1c <BSP_SD_GetCardState+0x1c>)
 8005e06:	f7fd fd6d 	bl	80038e4 <HAL_SD_GetCardState>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000098 	.word	0x20000098

08005e20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4803      	ldr	r0, [pc, #12]	@ (8005e38 <BSP_SD_GetCardInfo+0x18>)
 8005e2c:	f7fd fd2e 	bl	800388c <HAL_SD_GetCardInfo>
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000098 	.word	0x20000098

08005e3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005e42:	2301      	movs	r3, #1
 8005e44:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	b2db      	uxtb	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005e62:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <SD_CheckStatus+0x38>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005e68:	f7ff ffca 	bl	8005e00 <BSP_SD_GetCardState>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d107      	bne.n	8005e82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005e72:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <SD_CheckStatus+0x38>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	4b04      	ldr	r3, [pc, #16]	@ (8005e90 <SD_CheckStatus+0x38>)
 8005e80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005e82:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <SD_CheckStatus+0x38>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b2db      	uxtb	r3, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000009 	.word	0x20000009

08005e94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ecc <SD_initialize+0x38>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005ea4:	f7ff ff58 	bl	8005d58 <BSP_SD_Init>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff ffd1 	bl	8005e58 <SD_CheckStatus>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b04      	ldr	r3, [pc, #16]	@ (8005ecc <SD_initialize+0x38>)
 8005ebc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <SD_initialize+0x38>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000009 	.word	0x20000009

08005ed0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff ffbb 	bl	8005e58 <SD_CheckStatus>
 8005ee2:	4603      	mov	r3, r0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005f00:	f04f 33ff 	mov.w	r3, #4294967295
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	68b8      	ldr	r0, [r7, #8]
 8005f0a:	f7ff ff3d 	bl	8005d88 <BSP_SD_ReadBlocks>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d107      	bne.n	8005f24 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005f14:	bf00      	nop
 8005f16:	f7ff ff73 	bl	8005e00 <BSP_SD_GetCardState>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1fa      	bne.n	8005f16 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	68b8      	ldr	r0, [r7, #8]
 8005f4c:	f7ff ff3a 	bl	8005dc4 <BSP_SD_WriteBlocks>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d107      	bne.n	8005f66 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005f56:	bf00      	nop
 8005f58:	f7ff ff52 	bl	8005e00 <BSP_SD_GetCardState>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1fa      	bne.n	8005f58 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08c      	sub	sp, #48	@ 0x30
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	603a      	str	r2, [r7, #0]
 8005f7a:	71fb      	strb	r3, [r7, #7]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f86:	4b25      	ldr	r3, [pc, #148]	@ (800601c <SD_ioctl+0xac>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <SD_ioctl+0x28>
 8005f94:	2303      	movs	r3, #3
 8005f96:	e03c      	b.n	8006012 <SD_ioctl+0xa2>

  switch (cmd)
 8005f98:	79bb      	ldrb	r3, [r7, #6]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d834      	bhi.n	8006008 <SD_ioctl+0x98>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <SD_ioctl+0x34>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fb5 	.word	0x08005fb5
 8005fa8:	08005fbd 	.word	0x08005fbd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fef 	.word	0x08005fef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005fba:	e028      	b.n	800600e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ff2d 	bl	8005e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005fd2:	e01c      	b.n	800600e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005fd4:	f107 030c 	add.w	r3, r7, #12
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ff21 	bl	8005e20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005fec:	e00f      	b.n	800600e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005fee:	f107 030c 	add.w	r3, r7, #12
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff ff14 	bl	8005e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	0a5a      	lsrs	r2, r3, #9
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006006:	e002      	b.n	800600e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006008:	2304      	movs	r3, #4
 800600a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800600e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006012:	4618      	mov	r0, r3
 8006014:	3730      	adds	r7, #48	@ 0x30
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000009 	.word	0x20000009

08006020 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	4a08      	ldr	r2, [pc, #32]	@ (8006050 <disk_status+0x30>)
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	79fa      	ldrb	r2, [r7, #7]
 8006038:	4905      	ldr	r1, [pc, #20]	@ (8006050 <disk_status+0x30>)
 800603a:	440a      	add	r2, r1
 800603c:	7a12      	ldrb	r2, [r2, #8]
 800603e:	4610      	mov	r0, r2
 8006040:	4798      	blx	r3
 8006042:	4603      	mov	r3, r0
 8006044:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200002ec 	.word	0x200002ec

08006054 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	4a0e      	ldr	r2, [pc, #56]	@ (80060a0 <disk_initialize+0x4c>)
 8006066:	5cd3      	ldrb	r3, [r2, r3]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d114      	bne.n	8006096 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	4a0c      	ldr	r2, [pc, #48]	@ (80060a0 <disk_initialize+0x4c>)
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	79fa      	ldrb	r2, [r7, #7]
 800607a:	4909      	ldr	r1, [pc, #36]	@ (80060a0 <disk_initialize+0x4c>)
 800607c:	440a      	add	r2, r1
 800607e:	7a12      	ldrb	r2, [r2, #8]
 8006080:	4610      	mov	r0, r2
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	4a03      	ldr	r2, [pc, #12]	@ (80060a0 <disk_initialize+0x4c>)
 8006092:	2101      	movs	r1, #1
 8006094:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	200002ec 	.word	0x200002ec

080060a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80060a4:	b590      	push	{r4, r7, lr}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	4a0a      	ldr	r2, [pc, #40]	@ (80060e0 <disk_read+0x3c>)
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	689c      	ldr	r4, [r3, #8]
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	4a07      	ldr	r2, [pc, #28]	@ (80060e0 <disk_read+0x3c>)
 80060c4:	4413      	add	r3, r2
 80060c6:	7a18      	ldrb	r0, [r3, #8]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	47a0      	blx	r4
 80060d0:	4603      	mov	r3, r0
 80060d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd90      	pop	{r4, r7, pc}
 80060de:	bf00      	nop
 80060e0:	200002ec 	.word	0x200002ec

080060e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80060e4:	b590      	push	{r4, r7, lr}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006120 <disk_write+0x3c>)
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68dc      	ldr	r4, [r3, #12]
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	4a07      	ldr	r2, [pc, #28]	@ (8006120 <disk_write+0x3c>)
 8006104:	4413      	add	r3, r2
 8006106:	7a18      	ldrb	r0, [r3, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	47a0      	blx	r4
 8006110:	4603      	mov	r3, r0
 8006112:	75fb      	strb	r3, [r7, #23]
  return res;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
}
 8006116:	4618      	mov	r0, r3
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	200002ec 	.word	0x200002ec

08006124 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	603a      	str	r2, [r7, #0]
 800612e:	71fb      	strb	r3, [r7, #7]
 8006130:	460b      	mov	r3, r1
 8006132:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	4a09      	ldr	r2, [pc, #36]	@ (800615c <disk_ioctl+0x38>)
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	79fa      	ldrb	r2, [r7, #7]
 8006142:	4906      	ldr	r1, [pc, #24]	@ (800615c <disk_ioctl+0x38>)
 8006144:	440a      	add	r2, r1
 8006146:	7a10      	ldrb	r0, [r2, #8]
 8006148:	79b9      	ldrb	r1, [r7, #6]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	4798      	blx	r3
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]
  return res;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200002ec 	.word	0x200002ec

08006160 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3301      	adds	r3, #1
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006170:	89fb      	ldrh	r3, [r7, #14]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	b21a      	sxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b21b      	sxth	r3, r3
 800617c:	4313      	orrs	r3, r2
 800617e:	b21b      	sxth	r3, r3
 8006180:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006182:	89fb      	ldrh	r3, [r7, #14]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3303      	adds	r3, #3
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	3202      	adds	r2, #2
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	3201      	adds	r2, #1
 80061b6:	7812      	ldrb	r2, [r2, #0]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80061c8:	68fb      	ldr	r3, [r7, #12]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	887a      	ldrh	r2, [r7, #2]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	887b      	ldrh	r3, [r7, #2]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	887a      	ldrh	r2, [r7, #2]
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	1c53      	adds	r3, r2, #1
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	6179      	str	r1, [r7, #20]
 800628a:	7812      	ldrb	r2, [r2, #0]
 800628c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3b01      	subs	r3, #1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f1      	bne.n	800627e <mem_cpy+0x1a>
	}
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80062a6:	b480      	push	{r7}
 80062a8:	b087      	sub	sp, #28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	617a      	str	r2, [r7, #20]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	607b      	str	r3, [r7, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f3      	bne.n	80062b6 <mem_set+0x10>
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80062dc:	b480      	push	{r7}
 80062de:	b089      	sub	sp, #36	@ 0x24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	61fa      	str	r2, [r7, #28]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	4619      	mov	r1, r3
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	61ba      	str	r2, [r7, #24]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	1acb      	subs	r3, r1, r3
 8006308:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3b01      	subs	r3, #1
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <mem_cmp+0x40>
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0eb      	beq.n	80062f4 <mem_cmp+0x18>

	return r;
 800631c:	697b      	ldr	r3, [r7, #20]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3724      	adds	r7, #36	@ 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006334:	e002      	b.n	800633c <chk_chr+0x12>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3301      	adds	r3, #1
 800633a:	607b      	str	r3, [r7, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <chk_chr+0x26>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	4293      	cmp	r3, r2
 800634e:	d1f2      	bne.n	8006336 <chk_chr+0xc>
	return *str;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	781b      	ldrb	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e029      	b.n	80063c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006374:	4a27      	ldr	r2, [pc, #156]	@ (8006414 <chk_lock+0xb4>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	4413      	add	r3, r2
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01d      	beq.n	80063be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006382:	4a24      	ldr	r2, [pc, #144]	@ (8006414 <chk_lock+0xb4>)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	4413      	add	r3, r2
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d116      	bne.n	80063c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006394:	4a1f      	ldr	r2, [pc, #124]	@ (8006414 <chk_lock+0xb4>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	4413      	add	r3, r2
 800639c:	3304      	adds	r3, #4
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d10c      	bne.n	80063c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006414 <chk_lock+0xb4>)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	4413      	add	r3, r2
 80063b0:	3308      	adds	r3, #8
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d102      	bne.n	80063c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063bc:	e007      	b.n	80063ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80063be:	2301      	movs	r3, #1
 80063c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d9d2      	bls.n	8006374 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d109      	bne.n	80063e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <chk_lock+0x80>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d101      	bne.n	80063e4 <chk_lock+0x84>
 80063e0:	2300      	movs	r3, #0
 80063e2:	e010      	b.n	8006406 <chk_lock+0xa6>
 80063e4:	2312      	movs	r3, #18
 80063e6:	e00e      	b.n	8006406 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d108      	bne.n	8006400 <chk_lock+0xa0>
 80063ee:	4a09      	ldr	r2, [pc, #36]	@ (8006414 <chk_lock+0xb4>)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	4413      	add	r3, r2
 80063f6:	330c      	adds	r3, #12
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fe:	d101      	bne.n	8006404 <chk_lock+0xa4>
 8006400:	2310      	movs	r3, #16
 8006402:	e000      	b.n	8006406 <chk_lock+0xa6>
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	200002cc 	.word	0x200002cc

08006418 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	e002      	b.n	800642a <enq_lock+0x12>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3301      	adds	r3, #1
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d806      	bhi.n	800643e <enq_lock+0x26>
 8006430:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <enq_lock+0x40>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	4413      	add	r3, r2
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f2      	bne.n	8006424 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b02      	cmp	r3, #2
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	200002cc 	.word	0x200002cc

0800645c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e01f      	b.n	80064ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800646c:	4a41      	ldr	r2, [pc, #260]	@ (8006574 <inc_lock+0x118>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	4413      	add	r3, r2
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d113      	bne.n	80064a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800647e:	4a3d      	ldr	r2, [pc, #244]	@ (8006574 <inc_lock+0x118>)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	4413      	add	r3, r2
 8006486:	3304      	adds	r3, #4
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800648e:	429a      	cmp	r2, r3
 8006490:	d109      	bne.n	80064a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006492:	4a38      	ldr	r2, [pc, #224]	@ (8006574 <inc_lock+0x118>)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	4413      	add	r3, r2
 800649a:	3308      	adds	r3, #8
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d006      	beq.n	80064b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d9dc      	bls.n	800646c <inc_lock+0x10>
 80064b2:	e000      	b.n	80064b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80064b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d132      	bne.n	8006522 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e002      	b.n	80064c8 <inc_lock+0x6c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3301      	adds	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d806      	bhi.n	80064dc <inc_lock+0x80>
 80064ce:	4a29      	ldr	r2, [pc, #164]	@ (8006574 <inc_lock+0x118>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	4413      	add	r3, r2
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f2      	bne.n	80064c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d101      	bne.n	80064e6 <inc_lock+0x8a>
 80064e2:	2300      	movs	r3, #0
 80064e4:	e040      	b.n	8006568 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4922      	ldr	r1, [pc, #136]	@ (8006574 <inc_lock+0x118>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	440b      	add	r3, r1
 80064f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	491e      	ldr	r1, [pc, #120]	@ (8006574 <inc_lock+0x118>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	440b      	add	r3, r1
 8006500:	3304      	adds	r3, #4
 8006502:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	491a      	ldr	r1, [pc, #104]	@ (8006574 <inc_lock+0x118>)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	440b      	add	r3, r1
 8006510:	3308      	adds	r3, #8
 8006512:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006514:	4a17      	ldr	r2, [pc, #92]	@ (8006574 <inc_lock+0x118>)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	4413      	add	r3, r2
 800651c:	330c      	adds	r3, #12
 800651e:	2200      	movs	r2, #0
 8006520:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <inc_lock+0xe0>
 8006528:	4a12      	ldr	r2, [pc, #72]	@ (8006574 <inc_lock+0x118>)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	4413      	add	r3, r2
 8006530:	330c      	adds	r3, #12
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <inc_lock+0xe0>
 8006538:	2300      	movs	r3, #0
 800653a:	e015      	b.n	8006568 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d108      	bne.n	8006554 <inc_lock+0xf8>
 8006542:	4a0c      	ldr	r2, [pc, #48]	@ (8006574 <inc_lock+0x118>)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	4413      	add	r3, r2
 800654a:	330c      	adds	r3, #12
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	3301      	adds	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	e001      	b.n	8006558 <inc_lock+0xfc>
 8006554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006558:	4906      	ldr	r1, [pc, #24]	@ (8006574 <inc_lock+0x118>)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	440b      	add	r3, r1
 8006560:	330c      	adds	r3, #12
 8006562:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	200002cc 	.word	0x200002cc

08006578 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3b01      	subs	r3, #1
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d825      	bhi.n	80065d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800658c:	4a17      	ldr	r2, [pc, #92]	@ (80065ec <dec_lock+0x74>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	4413      	add	r3, r2
 8006594:	330c      	adds	r3, #12
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800659a:	89fb      	ldrh	r3, [r7, #14]
 800659c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a0:	d101      	bne.n	80065a6 <dec_lock+0x2e>
 80065a2:	2300      	movs	r3, #0
 80065a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80065a6:	89fb      	ldrh	r3, [r7, #14]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <dec_lock+0x3a>
 80065ac:	89fb      	ldrh	r3, [r7, #14]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80065b2:	4a0e      	ldr	r2, [pc, #56]	@ (80065ec <dec_lock+0x74>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	4413      	add	r3, r2
 80065ba:	330c      	adds	r3, #12
 80065bc:	89fa      	ldrh	r2, [r7, #14]
 80065be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80065c0:	89fb      	ldrh	r3, [r7, #14]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d105      	bne.n	80065d2 <dec_lock+0x5a>
 80065c6:	4a09      	ldr	r2, [pc, #36]	@ (80065ec <dec_lock+0x74>)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4413      	add	r3, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	737b      	strb	r3, [r7, #13]
 80065d6:	e001      	b.n	80065dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80065d8:	2302      	movs	r3, #2
 80065da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80065dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	200002cc 	.word	0x200002cc

080065f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e010      	b.n	8006620 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006634 <clear_lock+0x44>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	4413      	add	r3, r2
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	429a      	cmp	r2, r3
 800660c:	d105      	bne.n	800661a <clear_lock+0x2a>
 800660e:	4a09      	ldr	r2, [pc, #36]	@ (8006634 <clear_lock+0x44>)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	4413      	add	r3, r2
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d9eb      	bls.n	80065fe <clear_lock+0xe>
	}
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	200002cc 	.word	0x200002cc

08006638 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	78db      	ldrb	r3, [r3, #3]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d034      	beq.n	80066b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7858      	ldrb	r0, [r3, #1]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800665c:	2301      	movs	r3, #1
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	f7ff fd40 	bl	80060e4 <disk_write>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <sync_window+0x38>
			res = FR_DISK_ERR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	e022      	b.n	80066b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	1ad2      	subs	r2, r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	429a      	cmp	r2, r3
 8006684:	d217      	bcs.n	80066b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	789b      	ldrb	r3, [r3, #2]
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	e010      	b.n	80066b0 <sync_window+0x78>
					wsect += fs->fsize;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	7858      	ldrb	r0, [r3, #1]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066a2:	2301      	movs	r3, #1
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	f7ff fd1d 	bl	80060e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d8eb      	bhi.n	800668e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d01b      	beq.n	8006710 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff ffad 	bl	8006638 <sync_window>
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d113      	bne.n	8006710 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7858      	ldrb	r0, [r3, #1]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066f2:	2301      	movs	r3, #1
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	f7ff fcd5 	bl	80060a4 <disk_read>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006706:	2301      	movs	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff87 	bl	8006638 <sync_window>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d158      	bne.n	80067e6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d148      	bne.n	80067ce <sync_fs+0xb2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	791b      	ldrb	r3, [r3, #4]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d144      	bne.n	80067ce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3330      	adds	r3, #48	@ 0x30
 8006748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800674c:	2100      	movs	r1, #0
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fda9 	bl	80062a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3330      	adds	r3, #48	@ 0x30
 8006758:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800675c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fd38 	bl	80061d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3330      	adds	r3, #48	@ 0x30
 800676a:	4921      	ldr	r1, [pc, #132]	@ (80067f0 <sync_fs+0xd4>)
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fd4d 	bl	800620c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3330      	adds	r3, #48	@ 0x30
 8006776:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800677a:	491e      	ldr	r1, [pc, #120]	@ (80067f4 <sync_fs+0xd8>)
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fd45 	bl	800620c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3330      	adds	r3, #48	@ 0x30
 8006786:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f7ff fd3b 	bl	800620c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3330      	adds	r3, #48	@ 0x30
 800679a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f7ff fd31 	bl	800620c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7858      	ldrb	r0, [r3, #1]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c2:	2301      	movs	r3, #1
 80067c4:	f7ff fc8e 	bl	80060e4 <disk_write>
			fs->fsi_flag = 0;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2200      	movs	r2, #0
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fca4 	bl	8006124 <disk_ioctl>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <sync_fs+0xca>
 80067e2:	2301      	movs	r3, #1
 80067e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	41615252 	.word	0x41615252
 80067f4:	61417272 	.word	0x61417272

080067f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	3b02      	subs	r3, #2
 8006806:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	3b02      	subs	r3, #2
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d301      	bcc.n	8006818 <clust2sect+0x20>
 8006814:	2300      	movs	r3, #0
 8006816:	e008      	b.n	800682a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	895b      	ldrh	r3, [r3, #10]
 800681c:	461a      	mov	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	fb03 f202 	mul.w	r2, r3, r2
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	4413      	add	r3, r2
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b086      	sub	sp, #24
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d904      	bls.n	8006856 <get_fat+0x20>
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006856:	2301      	movs	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	e08e      	b.n	800697a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800685c:	f04f 33ff 	mov.w	r3, #4294967295
 8006860:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b03      	cmp	r3, #3
 8006868:	d061      	beq.n	800692e <get_fat+0xf8>
 800686a:	2b03      	cmp	r3, #3
 800686c:	dc7b      	bgt.n	8006966 <get_fat+0x130>
 800686e:	2b01      	cmp	r3, #1
 8006870:	d002      	beq.n	8006878 <get_fat+0x42>
 8006872:	2b02      	cmp	r3, #2
 8006874:	d041      	beq.n	80068fa <get_fat+0xc4>
 8006876:	e076      	b.n	8006966 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6a1a      	ldr	r2, [r3, #32]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	0a5b      	lsrs	r3, r3, #9
 800688e:	4413      	add	r3, r2
 8006890:	4619      	mov	r1, r3
 8006892:	6938      	ldr	r0, [r7, #16]
 8006894:	f7ff ff14 	bl	80066c0 <move_window>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d166      	bne.n	800696c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	60fa      	str	r2, [r7, #12]
 80068a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6a1a      	ldr	r2, [r3, #32]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	0a5b      	lsrs	r3, r3, #9
 80068ba:	4413      	add	r3, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	6938      	ldr	r0, [r7, #16]
 80068c0:	f7ff fefe 	bl	80066c0 <move_window>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d152      	bne.n	8006970 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4413      	add	r3, r2
 80068d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <get_fat+0xba>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	e002      	b.n	80068f6 <get_fat+0xc0>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f6:	617b      	str	r3, [r7, #20]
			break;
 80068f8:	e03f      	b.n	800697a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	0a1b      	lsrs	r3, r3, #8
 8006902:	4413      	add	r3, r2
 8006904:	4619      	mov	r1, r3
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7ff feda 	bl	80066c0 <move_window>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d130      	bne.n	8006974 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006920:	4413      	add	r3, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fc1c 	bl	8006160 <ld_word>
 8006928:	4603      	mov	r3, r0
 800692a:	617b      	str	r3, [r7, #20]
			break;
 800692c:	e025      	b.n	800697a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	09db      	lsrs	r3, r3, #7
 8006936:	4413      	add	r3, r2
 8006938:	4619      	mov	r1, r3
 800693a:	6938      	ldr	r0, [r7, #16]
 800693c:	f7ff fec0 	bl	80066c0 <move_window>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d118      	bne.n	8006978 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006954:	4413      	add	r3, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fc1a 	bl	8006190 <ld_dword>
 800695c:	4603      	mov	r3, r0
 800695e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006962:	617b      	str	r3, [r7, #20]
			break;
 8006964:	e009      	b.n	800697a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006966:	2301      	movs	r3, #1
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	e006      	b.n	800697a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800696c:	bf00      	nop
 800696e:	e004      	b.n	800697a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006978:	bf00      	nop
		}
	}

	return val;
 800697a:	697b      	ldr	r3, [r7, #20]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b089      	sub	sp, #36	@ 0x24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006990:	2302      	movs	r3, #2
 8006992:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b01      	cmp	r3, #1
 8006998:	f240 80d9 	bls.w	8006b4e <put_fat+0x1ca>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	f080 80d3 	bcs.w	8006b4e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	f000 8096 	beq.w	8006ade <put_fat+0x15a>
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	f300 80cb 	bgt.w	8006b4e <put_fat+0x1ca>
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d002      	beq.n	80069c2 <put_fat+0x3e>
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d06e      	beq.n	8006a9e <put_fat+0x11a>
 80069c0:	e0c5      	b.n	8006b4e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	085b      	lsrs	r3, r3, #1
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4413      	add	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1a      	ldr	r2, [r3, #32]
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	0a5b      	lsrs	r3, r3, #9
 80069d8:	4413      	add	r3, r2
 80069da:	4619      	mov	r1, r3
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff fe6f 	bl	80066c0 <move_window>
 80069e2:	4603      	mov	r3, r0
 80069e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069e6:	7ffb      	ldrb	r3, [r7, #31]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f040 80a9 	bne.w	8006b40 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	61b9      	str	r1, [r7, #24]
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	4413      	add	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <put_fat+0xa4>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	b25b      	sxtb	r3, r3
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	b25a      	sxtb	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	b25b      	sxtb	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	e001      	b.n	8006a2c <put_fat+0xa8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1a      	ldr	r2, [r3, #32]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	0a5b      	lsrs	r3, r3, #9
 8006a3e:	4413      	add	r3, r2
 8006a40:	4619      	mov	r1, r3
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff fe3c 	bl	80066c0 <move_window>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a4c:	7ffb      	ldrb	r3, [r7, #31]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d178      	bne.n	8006b44 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	4413      	add	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <put_fat+0xf0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	e00e      	b.n	8006a92 <put_fat+0x10e>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	f023 030f 	bic.w	r3, r3, #15
 8006a7e:	b25a      	sxtb	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b25b      	sxtb	r3, r3
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	70da      	strb	r2, [r3, #3]
			break;
 8006a9c:	e057      	b.n	8006b4e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	4413      	add	r3, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f7ff fe08 	bl	80066c0 <move_window>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ab4:	7ffb      	ldrb	r3, [r7, #31]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d146      	bne.n	8006b48 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006ac8:	4413      	add	r3, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	b292      	uxth	r2, r2
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fb80 	bl	80061d6 <st_word>
			fs->wflag = 1;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	70da      	strb	r2, [r3, #3]
			break;
 8006adc:	e037      	b.n	8006b4e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1a      	ldr	r2, [r3, #32]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	09db      	lsrs	r3, r3, #7
 8006ae6:	4413      	add	r3, r2
 8006ae8:	4619      	mov	r1, r3
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff fde8 	bl	80066c0 <move_window>
 8006af0:	4603      	mov	r3, r0
 8006af2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006af4:	7ffb      	ldrb	r3, [r7, #31]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d128      	bne.n	8006b4c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006b0e:	4413      	add	r3, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fb3d 	bl	8006190 <ld_dword>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006b1c:	4323      	orrs	r3, r4
 8006b1e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006b2e:	4413      	add	r3, r2
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff fb6a 	bl	800620c <st_dword>
			fs->wflag = 1;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	70da      	strb	r2, [r3, #3]
			break;
 8006b3e:	e006      	b.n	8006b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b40:	bf00      	nop
 8006b42:	e004      	b.n	8006b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b44:	bf00      	nop
 8006b46:	e002      	b.n	8006b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b48:	bf00      	nop
 8006b4a:	e000      	b.n	8006b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b4c:	bf00      	nop
		}
	}
	return res;
 8006b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3724      	adds	r7, #36	@ 0x24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd90      	pop	{r4, r7, pc}

08006b58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d904      	bls.n	8006b7e <remove_chain+0x26>
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d301      	bcc.n	8006b82 <remove_chain+0x2a>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e04b      	b.n	8006c1a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00c      	beq.n	8006ba2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006b88:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	69b8      	ldr	r0, [r7, #24]
 8006b90:	f7ff fef8 	bl	8006984 <put_fat>
 8006b94:	4603      	mov	r3, r0
 8006b96:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006b98:	7ffb      	ldrb	r3, [r7, #31]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <remove_chain+0x4a>
 8006b9e:	7ffb      	ldrb	r3, [r7, #31]
 8006ba0:	e03b      	b.n	8006c1a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7ff fe46 	bl	8006836 <get_fat>
 8006baa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d031      	beq.n	8006c16 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <remove_chain+0x64>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e02e      	b.n	8006c1a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d101      	bne.n	8006bc8 <remove_chain+0x70>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e028      	b.n	8006c1a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006bc8:	2200      	movs	r2, #0
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	69b8      	ldr	r0, [r7, #24]
 8006bce:	f7ff fed9 	bl	8006984 <put_fat>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <remove_chain+0x88>
 8006bdc:	7ffb      	ldrb	r3, [r7, #31]
 8006bde:	e01c      	b.n	8006c1a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	3b02      	subs	r3, #2
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d20b      	bcs.n	8006c06 <remove_chain+0xae>
			fs->free_clst++;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	791b      	ldrb	r3, [r3, #4]
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d3c6      	bcc.n	8006ba2 <remove_chain+0x4a>
 8006c14:	e000      	b.n	8006c18 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006c16:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b088      	sub	sp, #32
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10d      	bne.n	8006c54 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <create_chain+0x2c>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d31b      	bcc.n	8006c86 <create_chain+0x64>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	e018      	b.n	8006c86 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff fded 	bl	8006836 <get_fat>
 8006c5c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d801      	bhi.n	8006c68 <create_chain+0x46>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e070      	b.n	8006d4a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d101      	bne.n	8006c74 <create_chain+0x52>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	e06a      	b.n	8006d4a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d201      	bcs.n	8006c82 <create_chain+0x60>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	e063      	b.n	8006d4a <create_chain+0x128>
		scl = clst;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d307      	bcc.n	8006caa <create_chain+0x88>
				ncl = 2;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d901      	bls.n	8006caa <create_chain+0x88>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e04f      	b.n	8006d4a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006caa:	69f9      	ldr	r1, [r7, #28]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff fdc2 	bl	8006836 <get_fat>
 8006cb2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00e      	beq.n	8006cd8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d003      	beq.n	8006cc8 <create_chain+0xa6>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d101      	bne.n	8006ccc <create_chain+0xaa>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	e03e      	b.n	8006d4a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d1da      	bne.n	8006c8a <create_chain+0x68>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e038      	b.n	8006d4a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006cd8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006cda:	f04f 32ff 	mov.w	r2, #4294967295
 8006cde:	69f9      	ldr	r1, [r7, #28]
 8006ce0:	6938      	ldr	r0, [r7, #16]
 8006ce2:	f7ff fe4f 	bl	8006984 <put_fat>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <create_chain+0xe2>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6938      	ldr	r0, [r7, #16]
 8006cfc:	f7ff fe42 	bl	8006984 <put_fat>
 8006d00:	4603      	mov	r3, r0
 8006d02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d116      	bne.n	8006d38 <create_chain+0x116>
		fs->last_clst = ncl;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	3b02      	subs	r3, #2
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d804      	bhi.n	8006d28 <create_chain+0x106>
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	1e5a      	subs	r2, r3, #1
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	791b      	ldrb	r3, [r3, #4]
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	711a      	strb	r2, [r3, #4]
 8006d36:	e007      	b.n	8006d48 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d102      	bne.n	8006d44 <create_chain+0x122>
 8006d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d42:	e000      	b.n	8006d46 <create_chain+0x124>
 8006d44:	2301      	movs	r3, #1
 8006d46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d48:	69fb      	ldr	r3, [r7, #28]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3720      	adds	r7, #32
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b087      	sub	sp, #28
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	3304      	adds	r3, #4
 8006d68:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	0a5b      	lsrs	r3, r3, #9
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	8952      	ldrh	r2, [r2, #10]
 8006d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1d1a      	adds	r2, r3, #4
 8006d7c:	613a      	str	r2, [r7, #16]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <clmt_clust+0x3a>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e010      	b.n	8006dae <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d307      	bcc.n	8006da4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006da2:	e7e9      	b.n	8006d78 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006da4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	4413      	add	r3, r2
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b086      	sub	sp, #24
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dd0:	d204      	bcs.n	8006ddc <dir_sdi+0x22>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e063      	b.n	8006ea8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <dir_sdi+0x46>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d902      	bls.n	8006e00 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	8912      	ldrh	r2, [r2, #8]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d301      	bcc.n	8006e16 <dir_sdi+0x5c>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e048      	b.n	8006ea8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	61da      	str	r2, [r3, #28]
 8006e1e:	e029      	b.n	8006e74 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	895b      	ldrh	r3, [r3, #10]
 8006e24:	025b      	lsls	r3, r3, #9
 8006e26:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e28:	e019      	b.n	8006e5e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6979      	ldr	r1, [r7, #20]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff fd01 	bl	8006836 <get_fat>
 8006e34:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d101      	bne.n	8006e42 <dir_sdi+0x88>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e032      	b.n	8006ea8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d904      	bls.n	8006e52 <dir_sdi+0x98>
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d301      	bcc.n	8006e56 <dir_sdi+0x9c>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e028      	b.n	8006ea8 <dir_sdi+0xee>
			ofs -= csz;
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d2e1      	bcs.n	8006e2a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006e66:	6979      	ldr	r1, [r7, #20]
 8006e68:	6938      	ldr	r0, [r7, #16]
 8006e6a:	f7ff fcc5 	bl	80067f8 <clust2sect>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <dir_sdi+0xcc>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e010      	b.n	8006ea8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	0a5b      	lsrs	r3, r3, #9
 8006e8e:	441a      	add	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea0:	441a      	add	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	3320      	adds	r3, #32
 8006ec6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <dir_next+0x28>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ed6:	d301      	bcc.n	8006edc <dir_next+0x2c>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	e0aa      	b.n	8007032 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 8098 	bne.w	8007018 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	8912      	ldrh	r2, [r2, #8]
 8006f02:	4293      	cmp	r3, r2
 8006f04:	f0c0 8088 	bcc.w	8007018 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61da      	str	r2, [r3, #28]
 8006f0e:	2304      	movs	r3, #4
 8006f10:	e08f      	b.n	8007032 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	0a5b      	lsrs	r3, r3, #9
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	8952      	ldrh	r2, [r2, #10]
 8006f1a:	3a01      	subs	r2, #1
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d17a      	bne.n	8007018 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f7ff fc83 	bl	8006836 <get_fat>
 8006f30:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d801      	bhi.n	8006f3c <dir_next+0x8c>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e07a      	b.n	8007032 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d101      	bne.n	8006f48 <dir_next+0x98>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e074      	b.n	8007032 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d358      	bcc.n	8007004 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	61da      	str	r2, [r3, #28]
 8006f5e:	2304      	movs	r3, #4
 8006f60:	e067      	b.n	8007032 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7ff fe59 	bl	8006c22 <create_chain>
 8006f70:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <dir_next+0xcc>
 8006f78:	2307      	movs	r3, #7
 8006f7a:	e05a      	b.n	8007032 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <dir_next+0xd6>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e055      	b.n	8007032 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8c:	d101      	bne.n	8006f92 <dir_next+0xe2>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e04f      	b.n	8007032 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fb50 	bl	8006638 <sync_window>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <dir_next+0xf2>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e047      	b.n	8007032 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3330      	adds	r3, #48	@ 0x30
 8006fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff f97a 	bl	80062a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	6979      	ldr	r1, [r7, #20]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff fc1d 	bl	80067f8 <clust2sect>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fc4:	e012      	b.n	8006fec <dir_next+0x13c>
						fs->wflag = 1;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fb33 	bl	8006638 <sync_window>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <dir_next+0x12c>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e02a      	b.n	8007032 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	895b      	ldrh	r3, [r3, #10]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d3e6      	bcc.n	8006fc6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800700a:	6979      	ldr	r1, [r7, #20]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff fbf3 	bl	80067f8 <clust2sect>
 8007012:	4602      	mov	r2, r0
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702a:	441a      	add	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b086      	sub	sp, #24
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800704a:	2100      	movs	r1, #0
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff feb4 	bl	8006dba <dir_sdi>
 8007052:	4603      	mov	r3, r0
 8007054:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d12b      	bne.n	80070b4 <dir_alloc+0x7a>
		n = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	4619      	mov	r1, r3
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fb2a 	bl	80066c0 <move_window>
 800706c:	4603      	mov	r3, r0
 800706e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d11d      	bne.n	80070b2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2be5      	cmp	r3, #229	@ 0xe5
 800707e:	d004      	beq.n	800708a <dir_alloc+0x50>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d107      	bne.n	800709a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	3301      	adds	r3, #1
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d102      	bne.n	800709e <dir_alloc+0x64>
 8007098:	e00c      	b.n	80070b4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800709e:	2101      	movs	r1, #1
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ff05 	bl	8006eb0 <dir_next>
 80070a6:	4603      	mov	r3, r0
 80070a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0d7      	beq.n	8007060 <dir_alloc+0x26>
 80070b0:	e000      	b.n	80070b4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80070b2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d101      	bne.n	80070be <dir_alloc+0x84>
 80070ba:	2307      	movs	r3, #7
 80070bc:	75fb      	strb	r3, [r7, #23]
	return res;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	331a      	adds	r3, #26
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff f842 	bl	8006160 <ld_word>
 80070dc:	4603      	mov	r3, r0
 80070de:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d109      	bne.n	80070fc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	3314      	adds	r3, #20
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff f837 	bl	8006160 <ld_word>
 80070f2:	4603      	mov	r3, r0
 80070f4:	041b      	lsls	r3, r3, #16
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80070fc:	68fb      	ldr	r3, [r7, #12]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	331a      	adds	r3, #26
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	b292      	uxth	r2, r2
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff f85a 	bl	80061d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b03      	cmp	r3, #3
 8007128:	d109      	bne.n	800713e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f103 0214 	add.w	r2, r3, #20
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	b29b      	uxth	r3, r3
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f7ff f84c 	bl	80061d6 <st_word>
	}
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007154:	2100      	movs	r1, #0
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fe2f 	bl	8006dba <dir_sdi>
 800715c:	4603      	mov	r3, r0
 800715e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <dir_find+0x24>
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	e03e      	b.n	80071e8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	4619      	mov	r1, r3
 8007170:	6938      	ldr	r0, [r7, #16]
 8007172:	f7ff faa5 	bl	80066c0 <move_window>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d12f      	bne.n	80071e0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <dir_find+0x4e>
 800718e:	2304      	movs	r3, #4
 8007190:	75fb      	strb	r3, [r7, #23]
 8007192:	e028      	b.n	80071e6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	330b      	adds	r3, #11
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	330b      	adds	r3, #11
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <dir_find+0x86>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a18      	ldr	r0, [r3, #32]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3324      	adds	r3, #36	@ 0x24
 80071be:	220b      	movs	r2, #11
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7ff f88b 	bl	80062dc <mem_cmp>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80071cc:	2100      	movs	r1, #0
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fe6e 	bl	8006eb0 <dir_next>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0c5      	beq.n	800716a <dir_find+0x24>
 80071de:	e002      	b.n	80071e6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80071e0:	bf00      	nop
 80071e2:	e000      	b.n	80071e6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80071e4:	bf00      	nop

	return res;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80071fe:	2101      	movs	r1, #1
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff1a 	bl	800703a <dir_alloc>
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11c      	bne.n	800724a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	4619      	mov	r1, r3
 8007216:	68b8      	ldr	r0, [r7, #8]
 8007218:	f7ff fa52 	bl	80066c0 <move_window>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d111      	bne.n	800724a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	2220      	movs	r2, #32
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff f839 	bl	80062a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a18      	ldr	r0, [r3, #32]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3324      	adds	r3, #36	@ 0x24
 800723c:	220b      	movs	r2, #11
 800723e:	4619      	mov	r1, r3
 8007240:	f7ff f810 	bl	8006264 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2201      	movs	r2, #1
 8007248:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3324      	adds	r3, #36	@ 0x24
 8007268:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800726a:	220b      	movs	r2, #11
 800726c:	2120      	movs	r1, #32
 800726e:	68b8      	ldr	r0, [r7, #8]
 8007270:	f7ff f819 	bl	80062a6 <mem_set>
	si = i = 0; ni = 8;
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	2308      	movs	r3, #8
 800727e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	61fa      	str	r2, [r7, #28]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800728e:	7efb      	ldrb	r3, [r7, #27]
 8007290:	2b20      	cmp	r3, #32
 8007292:	d94e      	bls.n	8007332 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007294:	7efb      	ldrb	r3, [r7, #27]
 8007296:	2b2f      	cmp	r3, #47	@ 0x2f
 8007298:	d006      	beq.n	80072a8 <create_name+0x54>
 800729a:	7efb      	ldrb	r3, [r7, #27]
 800729c:	2b5c      	cmp	r3, #92	@ 0x5c
 800729e:	d110      	bne.n	80072c2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80072a0:	e002      	b.n	80072a8 <create_name+0x54>
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80072b2:	d0f6      	beq.n	80072a2 <create_name+0x4e>
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80072be:	d0f0      	beq.n	80072a2 <create_name+0x4e>
			break;
 80072c0:	e038      	b.n	8007334 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80072c2:	7efb      	ldrb	r3, [r7, #27]
 80072c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80072c6:	d003      	beq.n	80072d0 <create_name+0x7c>
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d30c      	bcc.n	80072ea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2b0b      	cmp	r3, #11
 80072d4:	d002      	beq.n	80072dc <create_name+0x88>
 80072d6:	7efb      	ldrb	r3, [r7, #27]
 80072d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072da:	d001      	beq.n	80072e0 <create_name+0x8c>
 80072dc:	2306      	movs	r3, #6
 80072de:	e044      	b.n	800736a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80072e0:	2308      	movs	r3, #8
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	230b      	movs	r3, #11
 80072e6:	617b      	str	r3, [r7, #20]
			continue;
 80072e8:	e022      	b.n	8007330 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80072ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da04      	bge.n	80072fc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80072f2:	7efb      	ldrb	r3, [r7, #27]
 80072f4:	3b80      	subs	r3, #128	@ 0x80
 80072f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007374 <create_name+0x120>)
 80072f8:	5cd3      	ldrb	r3, [r2, r3]
 80072fa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80072fc:	7efb      	ldrb	r3, [r7, #27]
 80072fe:	4619      	mov	r1, r3
 8007300:	481d      	ldr	r0, [pc, #116]	@ (8007378 <create_name+0x124>)
 8007302:	f7ff f812 	bl	800632a <chk_chr>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <create_name+0xbc>
 800730c:	2306      	movs	r3, #6
 800730e:	e02c      	b.n	800736a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007310:	7efb      	ldrb	r3, [r7, #27]
 8007312:	2b60      	cmp	r3, #96	@ 0x60
 8007314:	d905      	bls.n	8007322 <create_name+0xce>
 8007316:	7efb      	ldrb	r3, [r7, #27]
 8007318:	2b7a      	cmp	r3, #122	@ 0x7a
 800731a:	d802      	bhi.n	8007322 <create_name+0xce>
 800731c:	7efb      	ldrb	r3, [r7, #27]
 800731e:	3b20      	subs	r3, #32
 8007320:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	613a      	str	r2, [r7, #16]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	4413      	add	r3, r2
 800732c:	7efa      	ldrb	r2, [r7, #27]
 800732e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007330:	e7a6      	b.n	8007280 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007332:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	441a      	add	r2, r3
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <create_name+0xf4>
 8007344:	2306      	movs	r3, #6
 8007346:	e010      	b.n	800736a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2be5      	cmp	r3, #229	@ 0xe5
 800734e:	d102      	bne.n	8007356 <create_name+0x102>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2205      	movs	r2, #5
 8007354:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007356:	7efb      	ldrb	r3, [r7, #27]
 8007358:	2b20      	cmp	r3, #32
 800735a:	d801      	bhi.n	8007360 <create_name+0x10c>
 800735c:	2204      	movs	r2, #4
 800735e:	e000      	b.n	8007362 <create_name+0x10e>
 8007360:	2200      	movs	r2, #0
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	330b      	adds	r3, #11
 8007366:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007368:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	08009048 	.word	0x08009048
 8007378:	08008fd8 	.word	0x08008fd8

0800737c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007390:	e002      	b.n	8007398 <follow_path+0x1c>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b2f      	cmp	r3, #47	@ 0x2f
 800739e:	d0f8      	beq.n	8007392 <follow_path+0x16>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80073a6:	d0f4      	beq.n	8007392 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2200      	movs	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b1f      	cmp	r3, #31
 80073b4:	d80a      	bhi.n	80073cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2280      	movs	r2, #128	@ 0x80
 80073ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80073be:	2100      	movs	r1, #0
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff fcfa 	bl	8006dba <dir_sdi>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]
 80073ca:	e043      	b.n	8007454 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073cc:	463b      	mov	r3, r7
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ff3f 	bl	8007254 <create_name>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d134      	bne.n	800744a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff feb0 	bl	8007146 <dir_find>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d127      	bne.n	800744e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d122      	bne.n	800744e <follow_path+0xd2>
 8007408:	2305      	movs	r3, #5
 800740a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800740c:	e01f      	b.n	800744e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11c      	bne.n	8007452 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	799b      	ldrb	r3, [r3, #6]
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007424:	2305      	movs	r3, #5
 8007426:	75fb      	strb	r3, [r7, #23]
 8007428:	e014      	b.n	8007454 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007438:	4413      	add	r3, r2
 800743a:	4619      	mov	r1, r3
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fe43 	bl	80070c8 <ld_clust>
 8007442:	4602      	mov	r2, r0
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007448:	e7c0      	b.n	80073cc <follow_path+0x50>
			if (res != FR_OK) break;
 800744a:	bf00      	nop
 800744c:	e002      	b.n	8007454 <follow_path+0xd8>
				break;
 800744e:	bf00      	nop
 8007450:	e000      	b.n	8007454 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007452:	bf00      	nop
			}
		}
	}

	return res;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800745e:	b480      	push	{r7}
 8007460:	b087      	sub	sp, #28
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007466:	f04f 33ff 	mov.w	r3, #4294967295
 800746a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d031      	beq.n	80074d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	e002      	b.n	8007482 <get_ldnumber+0x24>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	3301      	adds	r3, #1
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b20      	cmp	r3, #32
 8007488:	d903      	bls.n	8007492 <get_ldnumber+0x34>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007490:	d1f4      	bne.n	800747c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b3a      	cmp	r3, #58	@ 0x3a
 8007498:	d11c      	bne.n	80074d4 <get_ldnumber+0x76>
			tp = *path;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	60fa      	str	r2, [r7, #12]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	3b30      	subs	r3, #48	@ 0x30
 80074aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d80e      	bhi.n	80074d0 <get_ldnumber+0x72>
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d10a      	bne.n	80074d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d107      	bne.n	80074d0 <get_ldnumber+0x72>
					vol = (int)i;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3301      	adds	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	e002      	b.n	80074da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80074d8:	693b      	ldr	r3, [r7, #16]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	70da      	strb	r2, [r3, #3]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295
 80074fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff f8dc 	bl	80066c0 <move_window>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <check_fs+0x2a>
 800750e:	2304      	movs	r3, #4
 8007510:	e038      	b.n	8007584 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3330      	adds	r3, #48	@ 0x30
 8007516:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fe20 	bl	8006160 <ld_word>
 8007520:	4603      	mov	r3, r0
 8007522:	461a      	mov	r2, r3
 8007524:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007528:	429a      	cmp	r2, r3
 800752a:	d001      	beq.n	8007530 <check_fs+0x48>
 800752c:	2303      	movs	r3, #3
 800752e:	e029      	b.n	8007584 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007536:	2be9      	cmp	r3, #233	@ 0xe9
 8007538:	d009      	beq.n	800754e <check_fs+0x66>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007540:	2beb      	cmp	r3, #235	@ 0xeb
 8007542:	d11e      	bne.n	8007582 <check_fs+0x9a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800754a:	2b90      	cmp	r3, #144	@ 0x90
 800754c:	d119      	bne.n	8007582 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3330      	adds	r3, #48	@ 0x30
 8007552:	3336      	adds	r3, #54	@ 0x36
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fe1b 	bl	8006190 <ld_dword>
 800755a:	4603      	mov	r3, r0
 800755c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007560:	4a0a      	ldr	r2, [pc, #40]	@ (800758c <check_fs+0xa4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d101      	bne.n	800756a <check_fs+0x82>
 8007566:	2300      	movs	r3, #0
 8007568:	e00c      	b.n	8007584 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3330      	adds	r3, #48	@ 0x30
 800756e:	3352      	adds	r3, #82	@ 0x52
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe fe0d 	bl	8006190 <ld_dword>
 8007576:	4603      	mov	r3, r0
 8007578:	4a05      	ldr	r2, [pc, #20]	@ (8007590 <check_fs+0xa8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d101      	bne.n	8007582 <check_fs+0x9a>
 800757e:	2300      	movs	r3, #0
 8007580:	e000      	b.n	8007584 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007582:	2302      	movs	r3, #2
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	00544146 	.word	0x00544146
 8007590:	33544146 	.word	0x33544146

08007594 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b096      	sub	sp, #88	@ 0x58
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f7ff ff58 	bl	800745e <get_ldnumber>
 80075ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80075b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da01      	bge.n	80075ba <find_volume+0x26>
 80075b6:	230b      	movs	r3, #11
 80075b8:	e22d      	b.n	8007a16 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80075ba:	4aa1      	ldr	r2, [pc, #644]	@ (8007840 <find_volume+0x2ac>)
 80075bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80075c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <find_volume+0x3a>
 80075ca:	230c      	movs	r3, #12
 80075cc:	e223      	b.n	8007a16 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01a      	beq.n	800761a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe fd19 	bl	8006020 <disk_status>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10c      	bne.n	800761a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <find_volume+0x82>
 8007606:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007612:	230a      	movs	r3, #10
 8007614:	e1ff      	b.n	8007a16 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007616:	2300      	movs	r3, #0
 8007618:	e1fd      	b.n	8007a16 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007622:	b2da      	uxtb	r2, r3
 8007624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007626:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe fd11 	bl	8006054 <disk_initialize>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007638:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007644:	2303      	movs	r3, #3
 8007646:	e1e6      	b.n	8007a16 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <find_volume+0xca>
 800764e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800765a:	230a      	movs	r3, #10
 800765c:	e1db      	b.n	8007a16 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007664:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007666:	f7ff ff3f 	bl	80074e8 <check_fs>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007670:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007674:	2b02      	cmp	r3, #2
 8007676:	d149      	bne.n	800770c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007678:	2300      	movs	r3, #0
 800767a:	643b      	str	r3, [r7, #64]	@ 0x40
 800767c:	e01e      	b.n	80076bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800767e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007680:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800768c:	4413      	add	r3, r2
 800768e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007692:	3304      	adds	r3, #4
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d006      	beq.n	80076a8 <find_volume+0x114>
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	3308      	adds	r3, #8
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fd76 	bl	8006190 <ld_dword>
 80076a4:	4602      	mov	r2, r0
 80076a6:	e000      	b.n	80076aa <find_volume+0x116>
 80076a8:	2200      	movs	r2, #0
 80076aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	3358      	adds	r3, #88	@ 0x58
 80076b0:	443b      	add	r3, r7
 80076b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b8:	3301      	adds	r3, #1
 80076ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80076bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d9dd      	bls.n	800767e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076c2:	2300      	movs	r3, #0
 80076c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80076c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <find_volume+0x13e>
 80076cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ce:	3b01      	subs	r3, #1
 80076d0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3358      	adds	r3, #88	@ 0x58
 80076d8:	443b      	add	r3, r7
 80076da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076de:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <find_volume+0x15e>
 80076e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076ea:	f7ff fefd 	bl	80074e8 <check_fs>
 80076ee:	4603      	mov	r3, r0
 80076f0:	e000      	b.n	80076f4 <find_volume+0x160>
 80076f2:	2303      	movs	r3, #3
 80076f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d905      	bls.n	800770c <find_volume+0x178>
 8007700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007702:	3301      	adds	r3, #1
 8007704:	643b      	str	r3, [r7, #64]	@ 0x40
 8007706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007708:	2b03      	cmp	r3, #3
 800770a:	d9e2      	bls.n	80076d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800770c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007710:	2b04      	cmp	r3, #4
 8007712:	d101      	bne.n	8007718 <find_volume+0x184>
 8007714:	2301      	movs	r3, #1
 8007716:	e17e      	b.n	8007a16 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800771c:	2b01      	cmp	r3, #1
 800771e:	d901      	bls.n	8007724 <find_volume+0x190>
 8007720:	230d      	movs	r3, #13
 8007722:	e178      	b.n	8007a16 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	3330      	adds	r3, #48	@ 0x30
 8007728:	330b      	adds	r3, #11
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fd18 	bl	8006160 <ld_word>
 8007730:	4603      	mov	r3, r0
 8007732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007736:	d001      	beq.n	800773c <find_volume+0x1a8>
 8007738:	230d      	movs	r3, #13
 800773a:	e16c      	b.n	8007a16 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	3330      	adds	r3, #48	@ 0x30
 8007740:	3316      	adds	r3, #22
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe fd0c 	bl	8006160 <ld_word>
 8007748:	4603      	mov	r3, r0
 800774a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800774c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <find_volume+0x1cc>
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	3330      	adds	r3, #48	@ 0x30
 8007756:	3324      	adds	r3, #36	@ 0x24
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe fd19 	bl	8006190 <ld_dword>
 800775e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007764:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	789b      	ldrb	r3, [r3, #2]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d005      	beq.n	8007784 <find_volume+0x1f0>
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	789b      	ldrb	r3, [r3, #2]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d001      	beq.n	8007784 <find_volume+0x1f0>
 8007780:	230d      	movs	r3, #13
 8007782:	e148      	b.n	8007a16 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	789b      	ldrb	r3, [r3, #2]
 8007788:	461a      	mov	r2, r3
 800778a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778c:	fb02 f303 	mul.w	r3, r2, r3
 8007790:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007798:	461a      	mov	r2, r3
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	895b      	ldrh	r3, [r3, #10]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <find_volume+0x224>
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	895b      	ldrh	r3, [r3, #10]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ae:	895b      	ldrh	r3, [r3, #10]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <find_volume+0x228>
 80077b8:	230d      	movs	r3, #13
 80077ba:	e12c      	b.n	8007a16 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80077bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077be:	3330      	adds	r3, #48	@ 0x30
 80077c0:	3311      	adds	r3, #17
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fccc 	bl	8006160 <ld_word>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	891b      	ldrh	r3, [r3, #8]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <find_volume+0x24e>
 80077de:	230d      	movs	r3, #13
 80077e0:	e119      	b.n	8007a16 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	3330      	adds	r3, #48	@ 0x30
 80077e6:	3313      	adds	r3, #19
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe fcb9 	bl	8006160 <ld_word>
 80077ee:	4603      	mov	r3, r0
 80077f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <find_volume+0x272>
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	3330      	adds	r3, #48	@ 0x30
 80077fc:	3320      	adds	r3, #32
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fcc6 	bl	8006190 <ld_dword>
 8007804:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	3330      	adds	r3, #48	@ 0x30
 800780a:	330e      	adds	r3, #14
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe fca7 	bl	8006160 <ld_word>
 8007812:	4603      	mov	r3, r0
 8007814:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007816:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <find_volume+0x28c>
 800781c:	230d      	movs	r3, #13
 800781e:	e0fa      	b.n	8007a16 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007820:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007824:	4413      	add	r3, r2
 8007826:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007828:	8912      	ldrh	r2, [r2, #8]
 800782a:	0912      	lsrs	r2, r2, #4
 800782c:	b292      	uxth	r2, r2
 800782e:	4413      	add	r3, r2
 8007830:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007836:	429a      	cmp	r2, r3
 8007838:	d204      	bcs.n	8007844 <find_volume+0x2b0>
 800783a:	230d      	movs	r3, #13
 800783c:	e0eb      	b.n	8007a16 <find_volume+0x482>
 800783e:	bf00      	nop
 8007840:	200002c4 	.word	0x200002c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800784c:	8952      	ldrh	r2, [r2, #10]
 800784e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <find_volume+0x2ca>
 800785a:	230d      	movs	r3, #13
 800785c:	e0db      	b.n	8007a16 <find_volume+0x482>
		fmt = FS_FAT32;
 800785e:	2303      	movs	r3, #3
 8007860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800786a:	4293      	cmp	r3, r2
 800786c:	d802      	bhi.n	8007874 <find_volume+0x2e0>
 800786e:	2302      	movs	r3, #2
 8007870:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800787a:	4293      	cmp	r3, r2
 800787c:	d802      	bhi.n	8007884 <find_volume+0x2f0>
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	1c9a      	adds	r2, r3, #2
 8007888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007890:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007892:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007896:	441a      	add	r2, r3
 8007898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800789c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	441a      	add	r2, r3
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80078a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d11e      	bne.n	80078ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b0:	3330      	adds	r3, #48	@ 0x30
 80078b2:	332a      	adds	r3, #42	@ 0x2a
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe fc53 	bl	8006160 <ld_word>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <find_volume+0x330>
 80078c0:	230d      	movs	r3, #13
 80078c2:	e0a8      	b.n	8007a16 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	891b      	ldrh	r3, [r3, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <find_volume+0x33c>
 80078cc:	230d      	movs	r3, #13
 80078ce:	e0a2      	b.n	8007a16 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d2:	3330      	adds	r3, #48	@ 0x30
 80078d4:	332c      	adds	r3, #44	@ 0x2c
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fc5a 	bl	8006190 <ld_dword>
 80078dc:	4602      	mov	r2, r0
 80078de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ea:	e01f      	b.n	800792c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	891b      	ldrh	r3, [r3, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <find_volume+0x364>
 80078f4:	230d      	movs	r3, #13
 80078f6:	e08e      	b.n	8007a16 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	6a1a      	ldr	r2, [r3, #32]
 80078fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078fe:	441a      	add	r2, r3
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007904:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007908:	2b02      	cmp	r3, #2
 800790a:	d103      	bne.n	8007914 <find_volume+0x380>
 800790c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	e00a      	b.n	800792a <find_volume+0x396>
 8007914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007916:	695a      	ldr	r2, [r3, #20]
 8007918:	4613      	mov	r3, r2
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4413      	add	r3, r2
 800791e:	085a      	lsrs	r2, r3, #1
 8007920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800792a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	699a      	ldr	r2, [r3, #24]
 8007930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007932:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007936:	0a5b      	lsrs	r3, r3, #9
 8007938:	429a      	cmp	r2, r3
 800793a:	d201      	bcs.n	8007940 <find_volume+0x3ac>
 800793c:	230d      	movs	r3, #13
 800793e:	e06a      	b.n	8007a16 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	611a      	str	r2, [r3, #16]
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	2280      	movs	r2, #128	@ 0x80
 8007954:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007956:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800795a:	2b03      	cmp	r3, #3
 800795c:	d149      	bne.n	80079f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	3330      	adds	r3, #48	@ 0x30
 8007962:	3330      	adds	r3, #48	@ 0x30
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fbfb 	bl	8006160 <ld_word>
 800796a:	4603      	mov	r3, r0
 800796c:	2b01      	cmp	r3, #1
 800796e:	d140      	bne.n	80079f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007972:	3301      	adds	r3, #1
 8007974:	4619      	mov	r1, r3
 8007976:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007978:	f7fe fea2 	bl	80066c0 <move_window>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d137      	bne.n	80079f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007984:	2200      	movs	r2, #0
 8007986:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	3330      	adds	r3, #48	@ 0x30
 800798c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe fbe5 	bl	8006160 <ld_word>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800799e:	429a      	cmp	r2, r3
 80079a0:	d127      	bne.n	80079f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	3330      	adds	r3, #48	@ 0x30
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fbf2 	bl	8006190 <ld_dword>
 80079ac:	4603      	mov	r3, r0
 80079ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007a20 <find_volume+0x48c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d11e      	bne.n	80079f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	3330      	adds	r3, #48	@ 0x30
 80079b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fbe7 	bl	8006190 <ld_dword>
 80079c2:	4603      	mov	r3, r0
 80079c4:	4a17      	ldr	r2, [pc, #92]	@ (8007a24 <find_volume+0x490>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d113      	bne.n	80079f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079cc:	3330      	adds	r3, #48	@ 0x30
 80079ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fe fbdc 	bl	8006190 <ld_dword>
 80079d8:	4602      	mov	r2, r0
 80079da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e0:	3330      	adds	r3, #48	@ 0x30
 80079e2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fbd2 	bl	8006190 <ld_dword>
 80079ec:	4602      	mov	r2, r0
 80079ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80079f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80079fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007a28 <find_volume+0x494>)
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	3301      	adds	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <find_volume+0x494>)
 8007a04:	801a      	strh	r2, [r3, #0]
 8007a06:	4b08      	ldr	r3, [pc, #32]	@ (8007a28 <find_volume+0x494>)
 8007a08:	881a      	ldrh	r2, [r3, #0]
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a10:	f7fe fdee 	bl	80065f0 <clear_lock>
#endif
	return FR_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3758      	adds	r7, #88	@ 0x58
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	41615252 	.word	0x41615252
 8007a24:	61417272 	.word	0x61417272
 8007a28:	200002c8 	.word	0x200002c8

08007a2c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a36:	2309      	movs	r3, #9
 8007a38:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01c      	beq.n	8007a7a <validate+0x4e>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d018      	beq.n	8007a7a <validate+0x4e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d013      	beq.n	8007a7a <validate+0x4e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	889a      	ldrh	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d10c      	bne.n	8007a7a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fada 	bl	8006020 <disk_status>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <validate+0x4e>
			res = FR_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <validate+0x5a>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	e000      	b.n	8007a88 <validate+0x5c>
 8007a86:	2300      	movs	r3, #0
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	6013      	str	r3, [r2, #0]
	return res;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007aaa:	f107 0310 	add.w	r3, r7, #16
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fcd5 	bl	800745e <get_ldnumber>
 8007ab4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	da01      	bge.n	8007ac0 <f_mount+0x28>
 8007abc:	230b      	movs	r3, #11
 8007abe:	e02b      	b.n	8007b18 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ac0:	4a17      	ldr	r2, [pc, #92]	@ (8007b20 <f_mount+0x88>)
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ad0:	69b8      	ldr	r0, [r7, #24]
 8007ad2:	f7fe fd8d 	bl	80065f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	490d      	ldr	r1, [pc, #52]	@ (8007b20 <f_mount+0x88>)
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <f_mount+0x66>
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d001      	beq.n	8007b02 <f_mount+0x6a>
 8007afe:	2300      	movs	r3, #0
 8007b00:	e00a      	b.n	8007b18 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b02:	f107 010c 	add.w	r1, r7, #12
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fd41 	bl	8007594 <find_volume>
 8007b12:	4603      	mov	r3, r0
 8007b14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	200002c4 	.word	0x200002c4

08007b24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b098      	sub	sp, #96	@ 0x60
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <f_open+0x18>
 8007b38:	2309      	movs	r3, #9
 8007b3a:	e1a9      	b.n	8007e90 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b42:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b44:	79fa      	ldrb	r2, [r7, #7]
 8007b46:	f107 0110 	add.w	r1, r7, #16
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fd20 	bl	8007594 <find_volume>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f040 818d 	bne.w	8007e7e <f_open+0x35a>
		dj.obj.fs = fs;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	f107 0314 	add.w	r3, r7, #20
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fc03 	bl	800737c <follow_path>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d118      	bne.n	8007bb6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b88:	b25b      	sxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da03      	bge.n	8007b96 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b8e:	2306      	movs	r3, #6
 8007b90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007b94:	e00f      	b.n	8007bb6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	bf8c      	ite	hi
 8007b9c:	2301      	movhi	r3, #1
 8007b9e:	2300      	movls	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f107 0314 	add.w	r3, r7, #20
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fbd8 	bl	8006360 <chk_lock>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	f003 031c 	and.w	r3, r3, #28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d07f      	beq.n	8007cc0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d017      	beq.n	8007bf8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d10e      	bne.n	8007bee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007bd0:	f7fe fc22 	bl	8006418 <enq_lock>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d006      	beq.n	8007be8 <f_open+0xc4>
 8007bda:	f107 0314 	add.w	r3, r7, #20
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fb06 	bl	80071f0 <dir_register>
 8007be4:	4603      	mov	r3, r0
 8007be6:	e000      	b.n	8007bea <f_open+0xc6>
 8007be8:	2312      	movs	r3, #18
 8007bea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	f043 0308 	orr.w	r3, r3, #8
 8007bf4:	71fb      	strb	r3, [r7, #7]
 8007bf6:	e010      	b.n	8007c1a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007bf8:	7ebb      	ldrb	r3, [r7, #26]
 8007bfa:	f003 0311 	and.w	r3, r3, #17
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <f_open+0xe6>
					res = FR_DENIED;
 8007c02:	2307      	movs	r3, #7
 8007c04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007c08:	e007      	b.n	8007c1a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <f_open+0xf6>
 8007c14:	2308      	movs	r3, #8
 8007c16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d168      	bne.n	8007cf4 <f_open+0x1d0>
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d063      	beq.n	8007cf4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007c2c:	f7fe f88c 	bl	8005d48 <get_fattime>
 8007c30:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c34:	330e      	adds	r3, #14
 8007c36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe fae7 	bl	800620c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	3316      	adds	r3, #22
 8007c42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe fae1 	bl	800620c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4c:	330b      	adds	r3, #11
 8007c4e:	2220      	movs	r2, #32
 8007c50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fa35 	bl	80070c8 <ld_clust>
 8007c5e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007c64:	2200      	movs	r2, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fa4d 	bl	8007106 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c6e:	331c      	adds	r3, #28
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe faca 	bl	800620c <st_dword>
					fs->wflag = 1;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d037      	beq.n	8007cf4 <f_open+0x1d0>
						dw = fs->winsect;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007c8a:	f107 0314 	add.w	r3, r7, #20
 8007c8e:	2200      	movs	r2, #0
 8007c90:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe ff60 	bl	8006b58 <remove_chain>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d126      	bne.n	8007cf4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fd08 	bl	80066c0 <move_window>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	e019      	b.n	8007cf4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d115      	bne.n	8007cf4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cc8:	7ebb      	ldrb	r3, [r7, #26]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <f_open+0x1b6>
					res = FR_NO_FILE;
 8007cd2:	2304      	movs	r3, #4
 8007cd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007cd8:	e00c      	b.n	8007cf4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <f_open+0x1d0>
 8007ce4:	7ebb      	ldrb	r3, [r7, #26]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <f_open+0x1d0>
						res = FR_DENIED;
 8007cee:	2307      	movs	r3, #7
 8007cf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d126      	bne.n	8007d4a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d1c:	79fb      	ldrb	r3, [r7, #7]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	bf8c      	ite	hi
 8007d22:	2301      	movhi	r3, #1
 8007d24:	2300      	movls	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	4611      	mov	r1, r2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fb93 	bl	800645c <inc_lock>
 8007d36:	4602      	mov	r2, r0
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <f_open+0x226>
 8007d44:	2302      	movs	r3, #2
 8007d46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f040 8095 	bne.w	8007e7e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff f9b4 	bl	80070c8 <ld_clust>
 8007d60:	4602      	mov	r2, r0
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d68:	331c      	adds	r3, #28
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fa10 	bl	8006190 <ld_dword>
 8007d70:	4602      	mov	r2, r0
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	88da      	ldrh	r2, [r3, #6]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	79fa      	ldrb	r2, [r7, #7]
 8007d8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3330      	adds	r3, #48	@ 0x30
 8007da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe fa7a 	bl	80062a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d060      	beq.n	8007e7e <f_open+0x35a>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d05c      	beq.n	8007e7e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	895b      	ldrh	r3, [r3, #10]
 8007dd0:	025b      	lsls	r3, r3, #9
 8007dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8007de0:	e016      	b.n	8007e10 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fd25 	bl	8006836 <get_fat>
 8007dec:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d802      	bhi.n	8007dfa <f_open+0x2d6>
 8007df4:	2302      	movs	r3, #2
 8007df6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d102      	bne.n	8007e08 <f_open+0x2e4>
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <f_open+0x2fc>
 8007e18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d8e0      	bhi.n	8007de2 <f_open+0x2be>
				}
				fp->clust = clst;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d127      	bne.n	8007e7e <f_open+0x35a>
 8007e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d022      	beq.n	8007e7e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe fcdb 	bl	80067f8 <clust2sect>
 8007e42:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <f_open+0x32e>
						res = FR_INT_ERR;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007e50:	e015      	b.n	8007e7e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e54:	0a5a      	lsrs	r2, r3, #9
 8007e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e58:	441a      	add	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	7858      	ldrb	r0, [r3, #1]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1a      	ldr	r2, [r3, #32]
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f7fe f919 	bl	80060a4 <disk_read>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <f_open+0x35a>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <f_open+0x368>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3760      	adds	r7, #96	@ 0x60
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	@ 0x38
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f107 0214 	add.w	r2, r7, #20
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fdb7 	bl	8007a2c <validate>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d107      	bne.n	8007edc <f_read+0x44>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	7d5b      	ldrb	r3, [r3, #21]
 8007ed0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <f_read+0x4a>
 8007edc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ee0:	e115      	b.n	800810e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	7d1b      	ldrb	r3, [r3, #20]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <f_read+0x5a>
 8007eee:	2307      	movs	r3, #7
 8007ef0:	e10d      	b.n	800810e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f240 80fe 	bls.w	8008104 <f_read+0x26c>
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f0c:	e0fa      	b.n	8008104 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f040 80c6 	bne.w	80080a8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	0a5b      	lsrs	r3, r3, #9
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	8952      	ldrh	r2, [r2, #10]
 8007f26:	3a01      	subs	r2, #1
 8007f28:	4013      	ands	r3, r2
 8007f2a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d12f      	bne.n	8007f92 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d103      	bne.n	8007f42 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f40:	e013      	b.n	8007f6a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7fe fefe 	bl	8006d52 <clmt_clust>
 8007f56:	6338      	str	r0, [r7, #48]	@ 0x30
 8007f58:	e007      	b.n	8007f6a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	4619      	mov	r1, r3
 8007f62:	4610      	mov	r0, r2
 8007f64:	f7fe fc67 	bl	8006836 <get_fat>
 8007f68:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d804      	bhi.n	8007f7a <f_read+0xe2>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2202      	movs	r2, #2
 8007f74:	755a      	strb	r2, [r3, #21]
 8007f76:	2302      	movs	r3, #2
 8007f78:	e0c9      	b.n	800810e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d104      	bne.n	8007f8c <f_read+0xf4>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	755a      	strb	r2, [r3, #21]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0c0      	b.n	800810e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f90:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7fe fc2c 	bl	80067f8 <clust2sect>
 8007fa0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <f_read+0x11a>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2202      	movs	r2, #2
 8007fac:	755a      	strb	r2, [r3, #21]
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e0ad      	b.n	800810e <f_read+0x276>
			sect += csect;
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	0a5b      	lsrs	r3, r3, #9
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d039      	beq.n	800803a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fca:	4413      	add	r3, r2
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	8952      	ldrh	r2, [r2, #10]
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d905      	bls.n	8007fe0 <f_read+0x148>
					cc = fs->csize - csect;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	895b      	ldrh	r3, [r3, #10]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	7858      	ldrb	r0, [r3, #1]
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fea:	f7fe f85b 	bl	80060a4 <disk_read>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d004      	beq.n	8007ffe <f_read+0x166>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	755a      	strb	r2, [r3, #21]
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e087      	b.n	800810e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	7d1b      	ldrb	r3, [r3, #20]
 8008002:	b25b      	sxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	da14      	bge.n	8008032 <f_read+0x19a>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a1a      	ldr	r2, [r3, #32]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008012:	429a      	cmp	r2, r3
 8008014:	d90d      	bls.n	8008032 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a1a      	ldr	r2, [r3, #32]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	025b      	lsls	r3, r3, #9
 8008020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008022:	18d0      	adds	r0, r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3330      	adds	r3, #48	@ 0x30
 8008028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800802c:	4619      	mov	r1, r3
 800802e:	f7fe f919 	bl	8006264 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	025b      	lsls	r3, r3, #9
 8008036:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008038:	e050      	b.n	80080dc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	429a      	cmp	r2, r3
 8008042:	d02e      	beq.n	80080a2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	7d1b      	ldrb	r3, [r3, #20]
 8008048:	b25b      	sxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	da18      	bge.n	8008080 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	7858      	ldrb	r0, [r3, #1]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a1a      	ldr	r2, [r3, #32]
 800805c:	2301      	movs	r3, #1
 800805e:	f7fe f841 	bl	80060e4 <disk_write>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <f_read+0x1da>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	755a      	strb	r2, [r3, #21]
 800806e:	2301      	movs	r3, #1
 8008070:	e04d      	b.n	800810e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	7d1b      	ldrb	r3, [r3, #20]
 8008076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800807a:	b2da      	uxtb	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	7858      	ldrb	r0, [r3, #1]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800808a:	2301      	movs	r3, #1
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	f7fe f809 	bl	80060a4 <disk_read>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <f_read+0x20a>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	755a      	strb	r2, [r3, #21]
 800809e:	2301      	movs	r3, #1
 80080a0:	e035      	b.n	800810e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80080b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80080b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d901      	bls.n	80080c2 <f_read+0x22a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d0:	4413      	add	r3, r2
 80080d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080d4:	4619      	mov	r1, r3
 80080d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080d8:	f7fe f8c4 	bl	8006264 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80080dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e0:	4413      	add	r3, r2
 80080e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ea:	441a      	add	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	619a      	str	r2, [r3, #24]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f6:	441a      	add	r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f47f af01 	bne.w	8007f0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3738      	adds	r7, #56	@ 0x38
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b08c      	sub	sp, #48	@ 0x30
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	607a      	str	r2, [r7, #4]
 8008122:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f107 0210 	add.w	r2, r7, #16
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff fc78 	bl	8007a2c <validate>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008142:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008146:	2b00      	cmp	r3, #0
 8008148:	d107      	bne.n	800815a <f_write+0x44>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	7d5b      	ldrb	r3, [r3, #21]
 800814e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008152:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <f_write+0x4a>
 800815a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800815e:	e14b      	b.n	80083f8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	7d1b      	ldrb	r3, [r3, #20]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <f_write+0x5a>
 800816c:	2307      	movs	r3, #7
 800816e:	e143      	b.n	80083f8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	699a      	ldr	r2, [r3, #24]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	441a      	add	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	429a      	cmp	r2, r3
 800817e:	f080 812d 	bcs.w	80083dc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	43db      	mvns	r3, r3
 8008188:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800818a:	e127      	b.n	80083dc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008194:	2b00      	cmp	r3, #0
 8008196:	f040 80e3 	bne.w	8008360 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	0a5b      	lsrs	r3, r3, #9
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	8952      	ldrh	r2, [r2, #10]
 80081a4:	3a01      	subs	r2, #1
 80081a6:	4013      	ands	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d143      	bne.n	8008238 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10c      	bne.n	80081d2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11a      	bne.n	80081fa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2100      	movs	r1, #0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fd2a 	bl	8006c22 <create_chain>
 80081ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 80081d0:	e013      	b.n	80081fa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	4619      	mov	r1, r3
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7fe fdb6 	bl	8006d52 <clmt_clust>
 80081e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80081e8:	e007      	b.n	80081fa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7fe fd15 	bl	8006c22 <create_chain>
 80081f8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 80f2 	beq.w	80083e6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	2b01      	cmp	r3, #1
 8008206:	d104      	bne.n	8008212 <f_write+0xfc>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2202      	movs	r2, #2
 800820c:	755a      	strb	r2, [r3, #21]
 800820e:	2302      	movs	r3, #2
 8008210:	e0f2      	b.n	80083f8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d104      	bne.n	8008224 <f_write+0x10e>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	755a      	strb	r2, [r3, #21]
 8008220:	2301      	movs	r3, #1
 8008222:	e0e9      	b.n	80083f8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008228:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <f_write+0x122>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008236:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	7d1b      	ldrb	r3, [r3, #20]
 800823c:	b25b      	sxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	da18      	bge.n	8008274 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	7858      	ldrb	r0, [r3, #1]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1a      	ldr	r2, [r3, #32]
 8008250:	2301      	movs	r3, #1
 8008252:	f7fd ff47 	bl	80060e4 <disk_write>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <f_write+0x150>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	755a      	strb	r2, [r3, #21]
 8008262:	2301      	movs	r3, #1
 8008264:	e0c8      	b.n	80083f8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	7d1b      	ldrb	r3, [r3, #20]
 800826a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800826e:	b2da      	uxtb	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	4619      	mov	r1, r3
 800827c:	4610      	mov	r0, r2
 800827e:	f7fe fabb 	bl	80067f8 <clust2sect>
 8008282:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d104      	bne.n	8008294 <f_write+0x17e>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2202      	movs	r2, #2
 800828e:	755a      	strb	r2, [r3, #21]
 8008290:	2302      	movs	r3, #2
 8008292:	e0b1      	b.n	80083f8 <f_write+0x2e2>
			sect += csect;
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	4413      	add	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	0a5b      	lsrs	r3, r3, #9
 80082a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d03c      	beq.n	8008322 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	4413      	add	r3, r2
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	8952      	ldrh	r2, [r2, #10]
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d905      	bls.n	80082c2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	895b      	ldrh	r3, [r3, #10]
 80082ba:	461a      	mov	r2, r3
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	7858      	ldrb	r0, [r3, #1]
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	69f9      	ldr	r1, [r7, #28]
 80082cc:	f7fd ff0a 	bl	80060e4 <disk_write>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d004      	beq.n	80082e0 <f_write+0x1ca>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	755a      	strb	r2, [r3, #21]
 80082dc:	2301      	movs	r3, #1
 80082de:	e08b      	b.n	80083f8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a1a      	ldr	r2, [r3, #32]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d915      	bls.n	800831a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a1a      	ldr	r2, [r3, #32]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	025b      	lsls	r3, r3, #9
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	4413      	add	r3, r2
 8008302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008306:	4619      	mov	r1, r3
 8008308:	f7fd ffac 	bl	8006264 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	7d1b      	ldrb	r3, [r3, #20]
 8008310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008314:	b2da      	uxtb	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	025b      	lsls	r3, r3, #9
 800831e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008320:	e03f      	b.n	80083a2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	429a      	cmp	r2, r3
 800832a:	d016      	beq.n	800835a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	699a      	ldr	r2, [r3, #24]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008334:	429a      	cmp	r2, r3
 8008336:	d210      	bcs.n	800835a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	7858      	ldrb	r0, [r3, #1]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008342:	2301      	movs	r3, #1
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	f7fd fead 	bl	80060a4 <disk_read>
 800834a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	755a      	strb	r2, [r3, #21]
 8008356:	2301      	movs	r3, #1
 8008358:	e04e      	b.n	80083f8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008368:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800836c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800836e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d901      	bls.n	800837a <f_write+0x264>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008388:	4413      	add	r3, r2
 800838a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800838c:	69f9      	ldr	r1, [r7, #28]
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd ff68 	bl	8006264 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	7d1b      	ldrb	r3, [r3, #20]
 8008398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800839c:	b2da      	uxtb	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	4413      	add	r3, r2
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	441a      	add	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	619a      	str	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	429a      	cmp	r2, r3
 80083c0:	bf38      	it	cc
 80083c2:	461a      	movcc	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	60da      	str	r2, [r3, #12]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ce:	441a      	add	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f47f aed4 	bne.w	800818c <f_write+0x76>
 80083e4:	e000      	b.n	80083e8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083e6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	7d1b      	ldrb	r3, [r3, #20]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3730      	adds	r7, #48	@ 0x30
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f107 0208 	add.w	r2, r7, #8
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff fb0b 	bl	8007a2c <validate>
 8008416:	4603      	mov	r3, r0
 8008418:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d168      	bne.n	80084f2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7d1b      	ldrb	r3, [r3, #20]
 8008424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d062      	beq.n	80084f2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7d1b      	ldrb	r3, [r3, #20]
 8008430:	b25b      	sxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	da15      	bge.n	8008462 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	7858      	ldrb	r0, [r3, #1]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	2301      	movs	r3, #1
 8008446:	f7fd fe4d 	bl	80060e4 <disk_write>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <f_sync+0x54>
 8008450:	2301      	movs	r3, #1
 8008452:	e04f      	b.n	80084f4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7d1b      	ldrb	r3, [r3, #20]
 8008458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800845c:	b2da      	uxtb	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008462:	f7fd fc71 	bl	8005d48 <get_fattime>
 8008466:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fe f925 	bl	80066c0 <move_window>
 8008476:	4603      	mov	r3, r0
 8008478:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d138      	bne.n	80084f2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008484:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	330b      	adds	r3, #11
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	330b      	adds	r3, #11
 8008490:	f042 0220 	orr.w	r2, r2, #32
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	461a      	mov	r2, r3
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	f7fe fe2f 	bl	8007106 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f103 021c 	add.w	r2, r3, #28
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f7fd fea9 	bl	800620c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3316      	adds	r3, #22
 80084be:	6939      	ldr	r1, [r7, #16]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fd fea3 	bl	800620c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3312      	adds	r3, #18
 80084ca:	2100      	movs	r1, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fd fe82 	bl	80061d6 <st_word>
					fs->wflag = 1;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2201      	movs	r2, #1
 80084d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe f91e 	bl	800671c <sync_fs>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7d1b      	ldrb	r3, [r3, #20]
 80084e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff ff7b 	bl	8008400 <f_sync>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d118      	bne.n	8008546 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f107 0208 	add.w	r2, r7, #8
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff fa85 	bl	8007a2c <validate>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10c      	bne.n	8008546 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe f821 	bl	8006578 <dec_lock>
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800855e:	2301      	movs	r3, #1
 8008560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008566:	4b1f      	ldr	r3, [pc, #124]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 8008568:	7a5b      	ldrb	r3, [r3, #9]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d131      	bne.n	80085d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008570:	4b1c      	ldr	r3, [pc, #112]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 8008572:	7a5b      	ldrb	r3, [r3, #9]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	461a      	mov	r2, r3
 8008578:	4b1a      	ldr	r3, [pc, #104]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 800857a:	2100      	movs	r1, #0
 800857c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800857e:	4b19      	ldr	r3, [pc, #100]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 8008580:	7a5b      	ldrb	r3, [r3, #9]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	4a17      	ldr	r2, [pc, #92]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800858e:	4b15      	ldr	r3, [pc, #84]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 8008590:	7a5b      	ldrb	r3, [r3, #9]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	4b13      	ldr	r3, [pc, #76]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 8008598:	4413      	add	r3, r2
 800859a:	79fa      	ldrb	r2, [r7, #7]
 800859c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800859e:	4b11      	ldr	r3, [pc, #68]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 80085a0:	7a5b      	ldrb	r3, [r3, #9]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	b2d1      	uxtb	r1, r2
 80085a8:	4a0e      	ldr	r2, [pc, #56]	@ (80085e4 <FATFS_LinkDriverEx+0x94>)
 80085aa:	7251      	strb	r1, [r2, #9]
 80085ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80085ae:	7dbb      	ldrb	r3, [r7, #22]
 80085b0:	3330      	adds	r3, #48	@ 0x30
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	3301      	adds	r3, #1
 80085bc:	223a      	movs	r2, #58	@ 0x3a
 80085be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	3302      	adds	r3, #2
 80085c4:	222f      	movs	r2, #47	@ 0x2f
 80085c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3303      	adds	r3, #3
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	200002ec 	.word	0x200002ec

080085e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80085f2:	2200      	movs	r2, #0
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff ffaa 	bl	8008550 <FATFS_LinkDriverEx>
 80085fc:	4603      	mov	r3, r0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <sniprintf>:
 8008608:	b40c      	push	{r2, r3}
 800860a:	b530      	push	{r4, r5, lr}
 800860c:	4b17      	ldr	r3, [pc, #92]	@ (800866c <sniprintf+0x64>)
 800860e:	1e0c      	subs	r4, r1, #0
 8008610:	681d      	ldr	r5, [r3, #0]
 8008612:	b09d      	sub	sp, #116	@ 0x74
 8008614:	da08      	bge.n	8008628 <sniprintf+0x20>
 8008616:	238b      	movs	r3, #139	@ 0x8b
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	b01d      	add	sp, #116	@ 0x74
 8008620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008624:	b002      	add	sp, #8
 8008626:	4770      	bx	lr
 8008628:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800862c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008630:	bf14      	ite	ne
 8008632:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008636:	4623      	moveq	r3, r4
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	9307      	str	r3, [sp, #28]
 800863c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008640:	9002      	str	r0, [sp, #8]
 8008642:	9006      	str	r0, [sp, #24]
 8008644:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008648:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800864a:	ab21      	add	r3, sp, #132	@ 0x84
 800864c:	a902      	add	r1, sp, #8
 800864e:	4628      	mov	r0, r5
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	f000 f995 	bl	8008980 <_svfiprintf_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	bfbc      	itt	lt
 800865a:	238b      	movlt	r3, #139	@ 0x8b
 800865c:	602b      	strlt	r3, [r5, #0]
 800865e:	2c00      	cmp	r4, #0
 8008660:	d0dd      	beq.n	800861e <sniprintf+0x16>
 8008662:	9b02      	ldr	r3, [sp, #8]
 8008664:	2200      	movs	r2, #0
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	e7d9      	b.n	800861e <sniprintf+0x16>
 800866a:	bf00      	nop
 800866c:	2000000c 	.word	0x2000000c

08008670 <memset>:
 8008670:	4402      	add	r2, r0
 8008672:	4603      	mov	r3, r0
 8008674:	4293      	cmp	r3, r2
 8008676:	d100      	bne.n	800867a <memset+0xa>
 8008678:	4770      	bx	lr
 800867a:	f803 1b01 	strb.w	r1, [r3], #1
 800867e:	e7f9      	b.n	8008674 <memset+0x4>

08008680 <__errno>:
 8008680:	4b01      	ldr	r3, [pc, #4]	@ (8008688 <__errno+0x8>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	2000000c 	.word	0x2000000c

0800868c <__libc_init_array>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4d0d      	ldr	r5, [pc, #52]	@ (80086c4 <__libc_init_array+0x38>)
 8008690:	4c0d      	ldr	r4, [pc, #52]	@ (80086c8 <__libc_init_array+0x3c>)
 8008692:	1b64      	subs	r4, r4, r5
 8008694:	10a4      	asrs	r4, r4, #2
 8008696:	2600      	movs	r6, #0
 8008698:	42a6      	cmp	r6, r4
 800869a:	d109      	bne.n	80086b0 <__libc_init_array+0x24>
 800869c:	4d0b      	ldr	r5, [pc, #44]	@ (80086cc <__libc_init_array+0x40>)
 800869e:	4c0c      	ldr	r4, [pc, #48]	@ (80086d0 <__libc_init_array+0x44>)
 80086a0:	f000 fc66 	bl	8008f70 <_init>
 80086a4:	1b64      	subs	r4, r4, r5
 80086a6:	10a4      	asrs	r4, r4, #2
 80086a8:	2600      	movs	r6, #0
 80086aa:	42a6      	cmp	r6, r4
 80086ac:	d105      	bne.n	80086ba <__libc_init_array+0x2e>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b4:	4798      	blx	r3
 80086b6:	3601      	adds	r6, #1
 80086b8:	e7ee      	b.n	8008698 <__libc_init_array+0xc>
 80086ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80086be:	4798      	blx	r3
 80086c0:	3601      	adds	r6, #1
 80086c2:	e7f2      	b.n	80086aa <__libc_init_array+0x1e>
 80086c4:	08009104 	.word	0x08009104
 80086c8:	08009104 	.word	0x08009104
 80086cc:	08009104 	.word	0x08009104
 80086d0:	08009108 	.word	0x08009108

080086d4 <__retarget_lock_acquire_recursive>:
 80086d4:	4770      	bx	lr

080086d6 <__retarget_lock_release_recursive>:
 80086d6:	4770      	bx	lr

080086d8 <_free_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4605      	mov	r5, r0
 80086dc:	2900      	cmp	r1, #0
 80086de:	d041      	beq.n	8008764 <_free_r+0x8c>
 80086e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e4:	1f0c      	subs	r4, r1, #4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bfb8      	it	lt
 80086ea:	18e4      	addlt	r4, r4, r3
 80086ec:	f000 f8e0 	bl	80088b0 <__malloc_lock>
 80086f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008768 <_free_r+0x90>)
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	b933      	cbnz	r3, 8008704 <_free_r+0x2c>
 80086f6:	6063      	str	r3, [r4, #4]
 80086f8:	6014      	str	r4, [r2, #0]
 80086fa:	4628      	mov	r0, r5
 80086fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008700:	f000 b8dc 	b.w	80088bc <__malloc_unlock>
 8008704:	42a3      	cmp	r3, r4
 8008706:	d908      	bls.n	800871a <_free_r+0x42>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	1821      	adds	r1, r4, r0
 800870c:	428b      	cmp	r3, r1
 800870e:	bf01      	itttt	eq
 8008710:	6819      	ldreq	r1, [r3, #0]
 8008712:	685b      	ldreq	r3, [r3, #4]
 8008714:	1809      	addeq	r1, r1, r0
 8008716:	6021      	streq	r1, [r4, #0]
 8008718:	e7ed      	b.n	80086f6 <_free_r+0x1e>
 800871a:	461a      	mov	r2, r3
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	b10b      	cbz	r3, 8008724 <_free_r+0x4c>
 8008720:	42a3      	cmp	r3, r4
 8008722:	d9fa      	bls.n	800871a <_free_r+0x42>
 8008724:	6811      	ldr	r1, [r2, #0]
 8008726:	1850      	adds	r0, r2, r1
 8008728:	42a0      	cmp	r0, r4
 800872a:	d10b      	bne.n	8008744 <_free_r+0x6c>
 800872c:	6820      	ldr	r0, [r4, #0]
 800872e:	4401      	add	r1, r0
 8008730:	1850      	adds	r0, r2, r1
 8008732:	4283      	cmp	r3, r0
 8008734:	6011      	str	r1, [r2, #0]
 8008736:	d1e0      	bne.n	80086fa <_free_r+0x22>
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	6053      	str	r3, [r2, #4]
 800873e:	4408      	add	r0, r1
 8008740:	6010      	str	r0, [r2, #0]
 8008742:	e7da      	b.n	80086fa <_free_r+0x22>
 8008744:	d902      	bls.n	800874c <_free_r+0x74>
 8008746:	230c      	movs	r3, #12
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	e7d6      	b.n	80086fa <_free_r+0x22>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	1821      	adds	r1, r4, r0
 8008750:	428b      	cmp	r3, r1
 8008752:	bf04      	itt	eq
 8008754:	6819      	ldreq	r1, [r3, #0]
 8008756:	685b      	ldreq	r3, [r3, #4]
 8008758:	6063      	str	r3, [r4, #4]
 800875a:	bf04      	itt	eq
 800875c:	1809      	addeq	r1, r1, r0
 800875e:	6021      	streq	r1, [r4, #0]
 8008760:	6054      	str	r4, [r2, #4]
 8008762:	e7ca      	b.n	80086fa <_free_r+0x22>
 8008764:	bd38      	pop	{r3, r4, r5, pc}
 8008766:	bf00      	nop
 8008768:	2000043c 	.word	0x2000043c

0800876c <sbrk_aligned>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4e0f      	ldr	r6, [pc, #60]	@ (80087ac <sbrk_aligned+0x40>)
 8008770:	460c      	mov	r4, r1
 8008772:	6831      	ldr	r1, [r6, #0]
 8008774:	4605      	mov	r5, r0
 8008776:	b911      	cbnz	r1, 800877e <sbrk_aligned+0x12>
 8008778:	f000 fba6 	bl	8008ec8 <_sbrk_r>
 800877c:	6030      	str	r0, [r6, #0]
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f000 fba1 	bl	8008ec8 <_sbrk_r>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	d103      	bne.n	8008792 <sbrk_aligned+0x26>
 800878a:	f04f 34ff 	mov.w	r4, #4294967295
 800878e:	4620      	mov	r0, r4
 8008790:	bd70      	pop	{r4, r5, r6, pc}
 8008792:	1cc4      	adds	r4, r0, #3
 8008794:	f024 0403 	bic.w	r4, r4, #3
 8008798:	42a0      	cmp	r0, r4
 800879a:	d0f8      	beq.n	800878e <sbrk_aligned+0x22>
 800879c:	1a21      	subs	r1, r4, r0
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 fb92 	bl	8008ec8 <_sbrk_r>
 80087a4:	3001      	adds	r0, #1
 80087a6:	d1f2      	bne.n	800878e <sbrk_aligned+0x22>
 80087a8:	e7ef      	b.n	800878a <sbrk_aligned+0x1e>
 80087aa:	bf00      	nop
 80087ac:	20000438 	.word	0x20000438

080087b0 <_malloc_r>:
 80087b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b4:	1ccd      	adds	r5, r1, #3
 80087b6:	f025 0503 	bic.w	r5, r5, #3
 80087ba:	3508      	adds	r5, #8
 80087bc:	2d0c      	cmp	r5, #12
 80087be:	bf38      	it	cc
 80087c0:	250c      	movcc	r5, #12
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	4606      	mov	r6, r0
 80087c6:	db01      	blt.n	80087cc <_malloc_r+0x1c>
 80087c8:	42a9      	cmp	r1, r5
 80087ca:	d904      	bls.n	80087d6 <_malloc_r+0x26>
 80087cc:	230c      	movs	r3, #12
 80087ce:	6033      	str	r3, [r6, #0]
 80087d0:	2000      	movs	r0, #0
 80087d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088ac <_malloc_r+0xfc>
 80087da:	f000 f869 	bl	80088b0 <__malloc_lock>
 80087de:	f8d8 3000 	ldr.w	r3, [r8]
 80087e2:	461c      	mov	r4, r3
 80087e4:	bb44      	cbnz	r4, 8008838 <_malloc_r+0x88>
 80087e6:	4629      	mov	r1, r5
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7ff ffbf 	bl	800876c <sbrk_aligned>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	4604      	mov	r4, r0
 80087f2:	d158      	bne.n	80088a6 <_malloc_r+0xf6>
 80087f4:	f8d8 4000 	ldr.w	r4, [r8]
 80087f8:	4627      	mov	r7, r4
 80087fa:	2f00      	cmp	r7, #0
 80087fc:	d143      	bne.n	8008886 <_malloc_r+0xd6>
 80087fe:	2c00      	cmp	r4, #0
 8008800:	d04b      	beq.n	800889a <_malloc_r+0xea>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	4639      	mov	r1, r7
 8008806:	4630      	mov	r0, r6
 8008808:	eb04 0903 	add.w	r9, r4, r3
 800880c:	f000 fb5c 	bl	8008ec8 <_sbrk_r>
 8008810:	4581      	cmp	r9, r0
 8008812:	d142      	bne.n	800889a <_malloc_r+0xea>
 8008814:	6821      	ldr	r1, [r4, #0]
 8008816:	1a6d      	subs	r5, r5, r1
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ffa6 	bl	800876c <sbrk_aligned>
 8008820:	3001      	adds	r0, #1
 8008822:	d03a      	beq.n	800889a <_malloc_r+0xea>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	442b      	add	r3, r5
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	f8d8 3000 	ldr.w	r3, [r8]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	bb62      	cbnz	r2, 800888c <_malloc_r+0xdc>
 8008832:	f8c8 7000 	str.w	r7, [r8]
 8008836:	e00f      	b.n	8008858 <_malloc_r+0xa8>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	1b52      	subs	r2, r2, r5
 800883c:	d420      	bmi.n	8008880 <_malloc_r+0xd0>
 800883e:	2a0b      	cmp	r2, #11
 8008840:	d917      	bls.n	8008872 <_malloc_r+0xc2>
 8008842:	1961      	adds	r1, r4, r5
 8008844:	42a3      	cmp	r3, r4
 8008846:	6025      	str	r5, [r4, #0]
 8008848:	bf18      	it	ne
 800884a:	6059      	strne	r1, [r3, #4]
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	bf08      	it	eq
 8008850:	f8c8 1000 	streq.w	r1, [r8]
 8008854:	5162      	str	r2, [r4, r5]
 8008856:	604b      	str	r3, [r1, #4]
 8008858:	4630      	mov	r0, r6
 800885a:	f000 f82f 	bl	80088bc <__malloc_unlock>
 800885e:	f104 000b 	add.w	r0, r4, #11
 8008862:	1d23      	adds	r3, r4, #4
 8008864:	f020 0007 	bic.w	r0, r0, #7
 8008868:	1ac2      	subs	r2, r0, r3
 800886a:	bf1c      	itt	ne
 800886c:	1a1b      	subne	r3, r3, r0
 800886e:	50a3      	strne	r3, [r4, r2]
 8008870:	e7af      	b.n	80087d2 <_malloc_r+0x22>
 8008872:	6862      	ldr	r2, [r4, #4]
 8008874:	42a3      	cmp	r3, r4
 8008876:	bf0c      	ite	eq
 8008878:	f8c8 2000 	streq.w	r2, [r8]
 800887c:	605a      	strne	r2, [r3, #4]
 800887e:	e7eb      	b.n	8008858 <_malloc_r+0xa8>
 8008880:	4623      	mov	r3, r4
 8008882:	6864      	ldr	r4, [r4, #4]
 8008884:	e7ae      	b.n	80087e4 <_malloc_r+0x34>
 8008886:	463c      	mov	r4, r7
 8008888:	687f      	ldr	r7, [r7, #4]
 800888a:	e7b6      	b.n	80087fa <_malloc_r+0x4a>
 800888c:	461a      	mov	r2, r3
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	42a3      	cmp	r3, r4
 8008892:	d1fb      	bne.n	800888c <_malloc_r+0xdc>
 8008894:	2300      	movs	r3, #0
 8008896:	6053      	str	r3, [r2, #4]
 8008898:	e7de      	b.n	8008858 <_malloc_r+0xa8>
 800889a:	230c      	movs	r3, #12
 800889c:	6033      	str	r3, [r6, #0]
 800889e:	4630      	mov	r0, r6
 80088a0:	f000 f80c 	bl	80088bc <__malloc_unlock>
 80088a4:	e794      	b.n	80087d0 <_malloc_r+0x20>
 80088a6:	6005      	str	r5, [r0, #0]
 80088a8:	e7d6      	b.n	8008858 <_malloc_r+0xa8>
 80088aa:	bf00      	nop
 80088ac:	2000043c 	.word	0x2000043c

080088b0 <__malloc_lock>:
 80088b0:	4801      	ldr	r0, [pc, #4]	@ (80088b8 <__malloc_lock+0x8>)
 80088b2:	f7ff bf0f 	b.w	80086d4 <__retarget_lock_acquire_recursive>
 80088b6:	bf00      	nop
 80088b8:	20000434 	.word	0x20000434

080088bc <__malloc_unlock>:
 80088bc:	4801      	ldr	r0, [pc, #4]	@ (80088c4 <__malloc_unlock+0x8>)
 80088be:	f7ff bf0a 	b.w	80086d6 <__retarget_lock_release_recursive>
 80088c2:	bf00      	nop
 80088c4:	20000434 	.word	0x20000434

080088c8 <__ssputs_r>:
 80088c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088cc:	688e      	ldr	r6, [r1, #8]
 80088ce:	461f      	mov	r7, r3
 80088d0:	42be      	cmp	r6, r7
 80088d2:	680b      	ldr	r3, [r1, #0]
 80088d4:	4682      	mov	sl, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	4690      	mov	r8, r2
 80088da:	d82d      	bhi.n	8008938 <__ssputs_r+0x70>
 80088dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088e4:	d026      	beq.n	8008934 <__ssputs_r+0x6c>
 80088e6:	6965      	ldr	r5, [r4, #20]
 80088e8:	6909      	ldr	r1, [r1, #16]
 80088ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088ee:	eba3 0901 	sub.w	r9, r3, r1
 80088f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088f6:	1c7b      	adds	r3, r7, #1
 80088f8:	444b      	add	r3, r9
 80088fa:	106d      	asrs	r5, r5, #1
 80088fc:	429d      	cmp	r5, r3
 80088fe:	bf38      	it	cc
 8008900:	461d      	movcc	r5, r3
 8008902:	0553      	lsls	r3, r2, #21
 8008904:	d527      	bpl.n	8008956 <__ssputs_r+0x8e>
 8008906:	4629      	mov	r1, r5
 8008908:	f7ff ff52 	bl	80087b0 <_malloc_r>
 800890c:	4606      	mov	r6, r0
 800890e:	b360      	cbz	r0, 800896a <__ssputs_r+0xa2>
 8008910:	6921      	ldr	r1, [r4, #16]
 8008912:	464a      	mov	r2, r9
 8008914:	f000 fae8 	bl	8008ee8 <memcpy>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800891e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	6126      	str	r6, [r4, #16]
 8008926:	6165      	str	r5, [r4, #20]
 8008928:	444e      	add	r6, r9
 800892a:	eba5 0509 	sub.w	r5, r5, r9
 800892e:	6026      	str	r6, [r4, #0]
 8008930:	60a5      	str	r5, [r4, #8]
 8008932:	463e      	mov	r6, r7
 8008934:	42be      	cmp	r6, r7
 8008936:	d900      	bls.n	800893a <__ssputs_r+0x72>
 8008938:	463e      	mov	r6, r7
 800893a:	6820      	ldr	r0, [r4, #0]
 800893c:	4632      	mov	r2, r6
 800893e:	4641      	mov	r1, r8
 8008940:	f000 faa8 	bl	8008e94 <memmove>
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	1b9b      	subs	r3, r3, r6
 8008948:	60a3      	str	r3, [r4, #8]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	4433      	add	r3, r6
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	2000      	movs	r0, #0
 8008952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008956:	462a      	mov	r2, r5
 8008958:	f000 fad4 	bl	8008f04 <_realloc_r>
 800895c:	4606      	mov	r6, r0
 800895e:	2800      	cmp	r0, #0
 8008960:	d1e0      	bne.n	8008924 <__ssputs_r+0x5c>
 8008962:	6921      	ldr	r1, [r4, #16]
 8008964:	4650      	mov	r0, sl
 8008966:	f7ff feb7 	bl	80086d8 <_free_r>
 800896a:	230c      	movs	r3, #12
 800896c:	f8ca 3000 	str.w	r3, [sl]
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	f04f 30ff 	mov.w	r0, #4294967295
 800897c:	e7e9      	b.n	8008952 <__ssputs_r+0x8a>
	...

08008980 <_svfiprintf_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	4698      	mov	r8, r3
 8008986:	898b      	ldrh	r3, [r1, #12]
 8008988:	061b      	lsls	r3, r3, #24
 800898a:	b09d      	sub	sp, #116	@ 0x74
 800898c:	4607      	mov	r7, r0
 800898e:	460d      	mov	r5, r1
 8008990:	4614      	mov	r4, r2
 8008992:	d510      	bpl.n	80089b6 <_svfiprintf_r+0x36>
 8008994:	690b      	ldr	r3, [r1, #16]
 8008996:	b973      	cbnz	r3, 80089b6 <_svfiprintf_r+0x36>
 8008998:	2140      	movs	r1, #64	@ 0x40
 800899a:	f7ff ff09 	bl	80087b0 <_malloc_r>
 800899e:	6028      	str	r0, [r5, #0]
 80089a0:	6128      	str	r0, [r5, #16]
 80089a2:	b930      	cbnz	r0, 80089b2 <_svfiprintf_r+0x32>
 80089a4:	230c      	movs	r3, #12
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ac:	b01d      	add	sp, #116	@ 0x74
 80089ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b2:	2340      	movs	r3, #64	@ 0x40
 80089b4:	616b      	str	r3, [r5, #20]
 80089b6:	2300      	movs	r3, #0
 80089b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ba:	2320      	movs	r3, #32
 80089bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80089c4:	2330      	movs	r3, #48	@ 0x30
 80089c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b64 <_svfiprintf_r+0x1e4>
 80089ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089ce:	f04f 0901 	mov.w	r9, #1
 80089d2:	4623      	mov	r3, r4
 80089d4:	469a      	mov	sl, r3
 80089d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089da:	b10a      	cbz	r2, 80089e0 <_svfiprintf_r+0x60>
 80089dc:	2a25      	cmp	r2, #37	@ 0x25
 80089de:	d1f9      	bne.n	80089d4 <_svfiprintf_r+0x54>
 80089e0:	ebba 0b04 	subs.w	fp, sl, r4
 80089e4:	d00b      	beq.n	80089fe <_svfiprintf_r+0x7e>
 80089e6:	465b      	mov	r3, fp
 80089e8:	4622      	mov	r2, r4
 80089ea:	4629      	mov	r1, r5
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7ff ff6b 	bl	80088c8 <__ssputs_r>
 80089f2:	3001      	adds	r0, #1
 80089f4:	f000 80a7 	beq.w	8008b46 <_svfiprintf_r+0x1c6>
 80089f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089fa:	445a      	add	r2, fp
 80089fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80089fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 809f 	beq.w	8008b46 <_svfiprintf_r+0x1c6>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a12:	f10a 0a01 	add.w	sl, sl, #1
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	9307      	str	r3, [sp, #28]
 8008a1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a20:	4654      	mov	r4, sl
 8008a22:	2205      	movs	r2, #5
 8008a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a28:	484e      	ldr	r0, [pc, #312]	@ (8008b64 <_svfiprintf_r+0x1e4>)
 8008a2a:	f7f7 fbd9 	bl	80001e0 <memchr>
 8008a2e:	9a04      	ldr	r2, [sp, #16]
 8008a30:	b9d8      	cbnz	r0, 8008a6a <_svfiprintf_r+0xea>
 8008a32:	06d0      	lsls	r0, r2, #27
 8008a34:	bf44      	itt	mi
 8008a36:	2320      	movmi	r3, #32
 8008a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a3c:	0711      	lsls	r1, r2, #28
 8008a3e:	bf44      	itt	mi
 8008a40:	232b      	movmi	r3, #43	@ 0x2b
 8008a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a46:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a4c:	d015      	beq.n	8008a7a <_svfiprintf_r+0xfa>
 8008a4e:	9a07      	ldr	r2, [sp, #28]
 8008a50:	4654      	mov	r4, sl
 8008a52:	2000      	movs	r0, #0
 8008a54:	f04f 0c0a 	mov.w	ip, #10
 8008a58:	4621      	mov	r1, r4
 8008a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a5e:	3b30      	subs	r3, #48	@ 0x30
 8008a60:	2b09      	cmp	r3, #9
 8008a62:	d94b      	bls.n	8008afc <_svfiprintf_r+0x17c>
 8008a64:	b1b0      	cbz	r0, 8008a94 <_svfiprintf_r+0x114>
 8008a66:	9207      	str	r2, [sp, #28]
 8008a68:	e014      	b.n	8008a94 <_svfiprintf_r+0x114>
 8008a6a:	eba0 0308 	sub.w	r3, r0, r8
 8008a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a72:	4313      	orrs	r3, r2
 8008a74:	9304      	str	r3, [sp, #16]
 8008a76:	46a2      	mov	sl, r4
 8008a78:	e7d2      	b.n	8008a20 <_svfiprintf_r+0xa0>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	1d19      	adds	r1, r3, #4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	9103      	str	r1, [sp, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfbb      	ittet	lt
 8008a86:	425b      	neglt	r3, r3
 8008a88:	f042 0202 	orrlt.w	r2, r2, #2
 8008a8c:	9307      	strge	r3, [sp, #28]
 8008a8e:	9307      	strlt	r3, [sp, #28]
 8008a90:	bfb8      	it	lt
 8008a92:	9204      	strlt	r2, [sp, #16]
 8008a94:	7823      	ldrb	r3, [r4, #0]
 8008a96:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a98:	d10a      	bne.n	8008ab0 <_svfiprintf_r+0x130>
 8008a9a:	7863      	ldrb	r3, [r4, #1]
 8008a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a9e:	d132      	bne.n	8008b06 <_svfiprintf_r+0x186>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	1d1a      	adds	r2, r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9203      	str	r2, [sp, #12]
 8008aa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aac:	3402      	adds	r4, #2
 8008aae:	9305      	str	r3, [sp, #20]
 8008ab0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b74 <_svfiprintf_r+0x1f4>
 8008ab4:	7821      	ldrb	r1, [r4, #0]
 8008ab6:	2203      	movs	r2, #3
 8008ab8:	4650      	mov	r0, sl
 8008aba:	f7f7 fb91 	bl	80001e0 <memchr>
 8008abe:	b138      	cbz	r0, 8008ad0 <_svfiprintf_r+0x150>
 8008ac0:	9b04      	ldr	r3, [sp, #16]
 8008ac2:	eba0 000a 	sub.w	r0, r0, sl
 8008ac6:	2240      	movs	r2, #64	@ 0x40
 8008ac8:	4082      	lsls	r2, r0
 8008aca:	4313      	orrs	r3, r2
 8008acc:	3401      	adds	r4, #1
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad4:	4824      	ldr	r0, [pc, #144]	@ (8008b68 <_svfiprintf_r+0x1e8>)
 8008ad6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ada:	2206      	movs	r2, #6
 8008adc:	f7f7 fb80 	bl	80001e0 <memchr>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d036      	beq.n	8008b52 <_svfiprintf_r+0x1d2>
 8008ae4:	4b21      	ldr	r3, [pc, #132]	@ (8008b6c <_svfiprintf_r+0x1ec>)
 8008ae6:	bb1b      	cbnz	r3, 8008b30 <_svfiprintf_r+0x1b0>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	3307      	adds	r3, #7
 8008aec:	f023 0307 	bic.w	r3, r3, #7
 8008af0:	3308      	adds	r3, #8
 8008af2:	9303      	str	r3, [sp, #12]
 8008af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af6:	4433      	add	r3, r6
 8008af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008afa:	e76a      	b.n	80089d2 <_svfiprintf_r+0x52>
 8008afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b00:	460c      	mov	r4, r1
 8008b02:	2001      	movs	r0, #1
 8008b04:	e7a8      	b.n	8008a58 <_svfiprintf_r+0xd8>
 8008b06:	2300      	movs	r3, #0
 8008b08:	3401      	adds	r4, #1
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	f04f 0c0a 	mov.w	ip, #10
 8008b12:	4620      	mov	r0, r4
 8008b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b18:	3a30      	subs	r2, #48	@ 0x30
 8008b1a:	2a09      	cmp	r2, #9
 8008b1c:	d903      	bls.n	8008b26 <_svfiprintf_r+0x1a6>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0c6      	beq.n	8008ab0 <_svfiprintf_r+0x130>
 8008b22:	9105      	str	r1, [sp, #20]
 8008b24:	e7c4      	b.n	8008ab0 <_svfiprintf_r+0x130>
 8008b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e7f0      	b.n	8008b12 <_svfiprintf_r+0x192>
 8008b30:	ab03      	add	r3, sp, #12
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	462a      	mov	r2, r5
 8008b36:	4b0e      	ldr	r3, [pc, #56]	@ (8008b70 <_svfiprintf_r+0x1f0>)
 8008b38:	a904      	add	r1, sp, #16
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f3af 8000 	nop.w
 8008b40:	1c42      	adds	r2, r0, #1
 8008b42:	4606      	mov	r6, r0
 8008b44:	d1d6      	bne.n	8008af4 <_svfiprintf_r+0x174>
 8008b46:	89ab      	ldrh	r3, [r5, #12]
 8008b48:	065b      	lsls	r3, r3, #25
 8008b4a:	f53f af2d 	bmi.w	80089a8 <_svfiprintf_r+0x28>
 8008b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b50:	e72c      	b.n	80089ac <_svfiprintf_r+0x2c>
 8008b52:	ab03      	add	r3, sp, #12
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	462a      	mov	r2, r5
 8008b58:	4b05      	ldr	r3, [pc, #20]	@ (8008b70 <_svfiprintf_r+0x1f0>)
 8008b5a:	a904      	add	r1, sp, #16
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f000 f879 	bl	8008c54 <_printf_i>
 8008b62:	e7ed      	b.n	8008b40 <_svfiprintf_r+0x1c0>
 8008b64:	080090c8 	.word	0x080090c8
 8008b68:	080090d2 	.word	0x080090d2
 8008b6c:	00000000 	.word	0x00000000
 8008b70:	080088c9 	.word	0x080088c9
 8008b74:	080090ce 	.word	0x080090ce

08008b78 <_printf_common>:
 8008b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	4698      	mov	r8, r3
 8008b80:	688a      	ldr	r2, [r1, #8]
 8008b82:	690b      	ldr	r3, [r1, #16]
 8008b84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	bfb8      	it	lt
 8008b8c:	4613      	movlt	r3, r2
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b94:	4607      	mov	r7, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b10a      	cbz	r2, 8008b9e <_printf_common+0x26>
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	6033      	str	r3, [r6, #0]
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	0699      	lsls	r1, r3, #26
 8008ba2:	bf42      	ittt	mi
 8008ba4:	6833      	ldrmi	r3, [r6, #0]
 8008ba6:	3302      	addmi	r3, #2
 8008ba8:	6033      	strmi	r3, [r6, #0]
 8008baa:	6825      	ldr	r5, [r4, #0]
 8008bac:	f015 0506 	ands.w	r5, r5, #6
 8008bb0:	d106      	bne.n	8008bc0 <_printf_common+0x48>
 8008bb2:	f104 0a19 	add.w	sl, r4, #25
 8008bb6:	68e3      	ldr	r3, [r4, #12]
 8008bb8:	6832      	ldr	r2, [r6, #0]
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	42ab      	cmp	r3, r5
 8008bbe:	dc26      	bgt.n	8008c0e <_printf_common+0x96>
 8008bc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bc4:	6822      	ldr	r2, [r4, #0]
 8008bc6:	3b00      	subs	r3, #0
 8008bc8:	bf18      	it	ne
 8008bca:	2301      	movne	r3, #1
 8008bcc:	0692      	lsls	r2, r2, #26
 8008bce:	d42b      	bmi.n	8008c28 <_printf_common+0xb0>
 8008bd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c8      	blx	r9
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d01e      	beq.n	8008c1c <_printf_common+0xa4>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	6922      	ldr	r2, [r4, #16]
 8008be2:	f003 0306 	and.w	r3, r3, #6
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	bf02      	ittt	eq
 8008bea:	68e5      	ldreq	r5, [r4, #12]
 8008bec:	6833      	ldreq	r3, [r6, #0]
 8008bee:	1aed      	subeq	r5, r5, r3
 8008bf0:	68a3      	ldr	r3, [r4, #8]
 8008bf2:	bf0c      	ite	eq
 8008bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bf8:	2500      	movne	r5, #0
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	bfc4      	itt	gt
 8008bfe:	1a9b      	subgt	r3, r3, r2
 8008c00:	18ed      	addgt	r5, r5, r3
 8008c02:	2600      	movs	r6, #0
 8008c04:	341a      	adds	r4, #26
 8008c06:	42b5      	cmp	r5, r6
 8008c08:	d11a      	bne.n	8008c40 <_printf_common+0xc8>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e008      	b.n	8008c20 <_printf_common+0xa8>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4652      	mov	r2, sl
 8008c12:	4641      	mov	r1, r8
 8008c14:	4638      	mov	r0, r7
 8008c16:	47c8      	blx	r9
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d103      	bne.n	8008c24 <_printf_common+0xac>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c24:	3501      	adds	r5, #1
 8008c26:	e7c6      	b.n	8008bb6 <_printf_common+0x3e>
 8008c28:	18e1      	adds	r1, r4, r3
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	2030      	movs	r0, #48	@ 0x30
 8008c2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c32:	4422      	add	r2, r4
 8008c34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c3c:	3302      	adds	r3, #2
 8008c3e:	e7c7      	b.n	8008bd0 <_printf_common+0x58>
 8008c40:	2301      	movs	r3, #1
 8008c42:	4622      	mov	r2, r4
 8008c44:	4641      	mov	r1, r8
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c8      	blx	r9
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d0e6      	beq.n	8008c1c <_printf_common+0xa4>
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7d9      	b.n	8008c06 <_printf_common+0x8e>
	...

08008c54 <_printf_i>:
 8008c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	7e0f      	ldrb	r7, [r1, #24]
 8008c5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c5c:	2f78      	cmp	r7, #120	@ 0x78
 8008c5e:	4691      	mov	r9, r2
 8008c60:	4680      	mov	r8, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	469a      	mov	sl, r3
 8008c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c6a:	d807      	bhi.n	8008c7c <_printf_i+0x28>
 8008c6c:	2f62      	cmp	r7, #98	@ 0x62
 8008c6e:	d80a      	bhi.n	8008c86 <_printf_i+0x32>
 8008c70:	2f00      	cmp	r7, #0
 8008c72:	f000 80d2 	beq.w	8008e1a <_printf_i+0x1c6>
 8008c76:	2f58      	cmp	r7, #88	@ 0x58
 8008c78:	f000 80b9 	beq.w	8008dee <_printf_i+0x19a>
 8008c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c84:	e03a      	b.n	8008cfc <_printf_i+0xa8>
 8008c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c8a:	2b15      	cmp	r3, #21
 8008c8c:	d8f6      	bhi.n	8008c7c <_printf_i+0x28>
 8008c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c94 <_printf_i+0x40>)
 8008c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c94:	08008ced 	.word	0x08008ced
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008c7d 	.word	0x08008c7d
 8008ca0:	08008c7d 	.word	0x08008c7d
 8008ca4:	08008c7d 	.word	0x08008c7d
 8008ca8:	08008c7d 	.word	0x08008c7d
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008c7d 	.word	0x08008c7d
 8008cb4:	08008c7d 	.word	0x08008c7d
 8008cb8:	08008c7d 	.word	0x08008c7d
 8008cbc:	08008c7d 	.word	0x08008c7d
 8008cc0:	08008e01 	.word	0x08008e01
 8008cc4:	08008d2b 	.word	0x08008d2b
 8008cc8:	08008dbb 	.word	0x08008dbb
 8008ccc:	08008c7d 	.word	0x08008c7d
 8008cd0:	08008c7d 	.word	0x08008c7d
 8008cd4:	08008e23 	.word	0x08008e23
 8008cd8:	08008c7d 	.word	0x08008c7d
 8008cdc:	08008d2b 	.word	0x08008d2b
 8008ce0:	08008c7d 	.word	0x08008c7d
 8008ce4:	08008c7d 	.word	0x08008c7d
 8008ce8:	08008dc3 	.word	0x08008dc3
 8008cec:	6833      	ldr	r3, [r6, #0]
 8008cee:	1d1a      	adds	r2, r3, #4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6032      	str	r2, [r6, #0]
 8008cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e09d      	b.n	8008e3c <_printf_i+0x1e8>
 8008d00:	6833      	ldr	r3, [r6, #0]
 8008d02:	6820      	ldr	r0, [r4, #0]
 8008d04:	1d19      	adds	r1, r3, #4
 8008d06:	6031      	str	r1, [r6, #0]
 8008d08:	0606      	lsls	r6, r0, #24
 8008d0a:	d501      	bpl.n	8008d10 <_printf_i+0xbc>
 8008d0c:	681d      	ldr	r5, [r3, #0]
 8008d0e:	e003      	b.n	8008d18 <_printf_i+0xc4>
 8008d10:	0645      	lsls	r5, r0, #25
 8008d12:	d5fb      	bpl.n	8008d0c <_printf_i+0xb8>
 8008d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d18:	2d00      	cmp	r5, #0
 8008d1a:	da03      	bge.n	8008d24 <_printf_i+0xd0>
 8008d1c:	232d      	movs	r3, #45	@ 0x2d
 8008d1e:	426d      	negs	r5, r5
 8008d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d24:	4859      	ldr	r0, [pc, #356]	@ (8008e8c <_printf_i+0x238>)
 8008d26:	230a      	movs	r3, #10
 8008d28:	e011      	b.n	8008d4e <_printf_i+0xfa>
 8008d2a:	6821      	ldr	r1, [r4, #0]
 8008d2c:	6833      	ldr	r3, [r6, #0]
 8008d2e:	0608      	lsls	r0, r1, #24
 8008d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d34:	d402      	bmi.n	8008d3c <_printf_i+0xe8>
 8008d36:	0649      	lsls	r1, r1, #25
 8008d38:	bf48      	it	mi
 8008d3a:	b2ad      	uxthmi	r5, r5
 8008d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d3e:	4853      	ldr	r0, [pc, #332]	@ (8008e8c <_printf_i+0x238>)
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	bf14      	ite	ne
 8008d44:	230a      	movne	r3, #10
 8008d46:	2308      	moveq	r3, #8
 8008d48:	2100      	movs	r1, #0
 8008d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d4e:	6866      	ldr	r6, [r4, #4]
 8008d50:	60a6      	str	r6, [r4, #8]
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	bfa2      	ittt	ge
 8008d56:	6821      	ldrge	r1, [r4, #0]
 8008d58:	f021 0104 	bicge.w	r1, r1, #4
 8008d5c:	6021      	strge	r1, [r4, #0]
 8008d5e:	b90d      	cbnz	r5, 8008d64 <_printf_i+0x110>
 8008d60:	2e00      	cmp	r6, #0
 8008d62:	d04b      	beq.n	8008dfc <_printf_i+0x1a8>
 8008d64:	4616      	mov	r6, r2
 8008d66:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d6a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d6e:	5dc7      	ldrb	r7, [r0, r7]
 8008d70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d74:	462f      	mov	r7, r5
 8008d76:	42bb      	cmp	r3, r7
 8008d78:	460d      	mov	r5, r1
 8008d7a:	d9f4      	bls.n	8008d66 <_printf_i+0x112>
 8008d7c:	2b08      	cmp	r3, #8
 8008d7e:	d10b      	bne.n	8008d98 <_printf_i+0x144>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	07df      	lsls	r7, r3, #31
 8008d84:	d508      	bpl.n	8008d98 <_printf_i+0x144>
 8008d86:	6923      	ldr	r3, [r4, #16]
 8008d88:	6861      	ldr	r1, [r4, #4]
 8008d8a:	4299      	cmp	r1, r3
 8008d8c:	bfde      	ittt	le
 8008d8e:	2330      	movle	r3, #48	@ 0x30
 8008d90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d98:	1b92      	subs	r2, r2, r6
 8008d9a:	6122      	str	r2, [r4, #16]
 8008d9c:	f8cd a000 	str.w	sl, [sp]
 8008da0:	464b      	mov	r3, r9
 8008da2:	aa03      	add	r2, sp, #12
 8008da4:	4621      	mov	r1, r4
 8008da6:	4640      	mov	r0, r8
 8008da8:	f7ff fee6 	bl	8008b78 <_printf_common>
 8008dac:	3001      	adds	r0, #1
 8008dae:	d14a      	bne.n	8008e46 <_printf_i+0x1f2>
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	b004      	add	sp, #16
 8008db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	f043 0320 	orr.w	r3, r3, #32
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	4833      	ldr	r0, [pc, #204]	@ (8008e90 <_printf_i+0x23c>)
 8008dc4:	2778      	movs	r7, #120	@ 0x78
 8008dc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	6831      	ldr	r1, [r6, #0]
 8008dce:	061f      	lsls	r7, r3, #24
 8008dd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dd4:	d402      	bmi.n	8008ddc <_printf_i+0x188>
 8008dd6:	065f      	lsls	r7, r3, #25
 8008dd8:	bf48      	it	mi
 8008dda:	b2ad      	uxthmi	r5, r5
 8008ddc:	6031      	str	r1, [r6, #0]
 8008dde:	07d9      	lsls	r1, r3, #31
 8008de0:	bf44      	itt	mi
 8008de2:	f043 0320 	orrmi.w	r3, r3, #32
 8008de6:	6023      	strmi	r3, [r4, #0]
 8008de8:	b11d      	cbz	r5, 8008df2 <_printf_i+0x19e>
 8008dea:	2310      	movs	r3, #16
 8008dec:	e7ac      	b.n	8008d48 <_printf_i+0xf4>
 8008dee:	4827      	ldr	r0, [pc, #156]	@ (8008e8c <_printf_i+0x238>)
 8008df0:	e7e9      	b.n	8008dc6 <_printf_i+0x172>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	f023 0320 	bic.w	r3, r3, #32
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	e7f6      	b.n	8008dea <_printf_i+0x196>
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	e7bd      	b.n	8008d7c <_printf_i+0x128>
 8008e00:	6833      	ldr	r3, [r6, #0]
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	6961      	ldr	r1, [r4, #20]
 8008e06:	1d18      	adds	r0, r3, #4
 8008e08:	6030      	str	r0, [r6, #0]
 8008e0a:	062e      	lsls	r6, r5, #24
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	d501      	bpl.n	8008e14 <_printf_i+0x1c0>
 8008e10:	6019      	str	r1, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <_printf_i+0x1c6>
 8008e14:	0668      	lsls	r0, r5, #25
 8008e16:	d5fb      	bpl.n	8008e10 <_printf_i+0x1bc>
 8008e18:	8019      	strh	r1, [r3, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	4616      	mov	r6, r2
 8008e20:	e7bc      	b.n	8008d9c <_printf_i+0x148>
 8008e22:	6833      	ldr	r3, [r6, #0]
 8008e24:	1d1a      	adds	r2, r3, #4
 8008e26:	6032      	str	r2, [r6, #0]
 8008e28:	681e      	ldr	r6, [r3, #0]
 8008e2a:	6862      	ldr	r2, [r4, #4]
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7f7 f9d6 	bl	80001e0 <memchr>
 8008e34:	b108      	cbz	r0, 8008e3a <_printf_i+0x1e6>
 8008e36:	1b80      	subs	r0, r0, r6
 8008e38:	6060      	str	r0, [r4, #4]
 8008e3a:	6863      	ldr	r3, [r4, #4]
 8008e3c:	6123      	str	r3, [r4, #16]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e44:	e7aa      	b.n	8008d9c <_printf_i+0x148>
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	4632      	mov	r2, r6
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	47d0      	blx	sl
 8008e50:	3001      	adds	r0, #1
 8008e52:	d0ad      	beq.n	8008db0 <_printf_i+0x15c>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	079b      	lsls	r3, r3, #30
 8008e58:	d413      	bmi.n	8008e82 <_printf_i+0x22e>
 8008e5a:	68e0      	ldr	r0, [r4, #12]
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	4298      	cmp	r0, r3
 8008e60:	bfb8      	it	lt
 8008e62:	4618      	movlt	r0, r3
 8008e64:	e7a6      	b.n	8008db4 <_printf_i+0x160>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4632      	mov	r2, r6
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	47d0      	blx	sl
 8008e70:	3001      	adds	r0, #1
 8008e72:	d09d      	beq.n	8008db0 <_printf_i+0x15c>
 8008e74:	3501      	adds	r5, #1
 8008e76:	68e3      	ldr	r3, [r4, #12]
 8008e78:	9903      	ldr	r1, [sp, #12]
 8008e7a:	1a5b      	subs	r3, r3, r1
 8008e7c:	42ab      	cmp	r3, r5
 8008e7e:	dcf2      	bgt.n	8008e66 <_printf_i+0x212>
 8008e80:	e7eb      	b.n	8008e5a <_printf_i+0x206>
 8008e82:	2500      	movs	r5, #0
 8008e84:	f104 0619 	add.w	r6, r4, #25
 8008e88:	e7f5      	b.n	8008e76 <_printf_i+0x222>
 8008e8a:	bf00      	nop
 8008e8c:	080090d9 	.word	0x080090d9
 8008e90:	080090ea 	.word	0x080090ea

08008e94 <memmove>:
 8008e94:	4288      	cmp	r0, r1
 8008e96:	b510      	push	{r4, lr}
 8008e98:	eb01 0402 	add.w	r4, r1, r2
 8008e9c:	d902      	bls.n	8008ea4 <memmove+0x10>
 8008e9e:	4284      	cmp	r4, r0
 8008ea0:	4623      	mov	r3, r4
 8008ea2:	d807      	bhi.n	8008eb4 <memmove+0x20>
 8008ea4:	1e43      	subs	r3, r0, #1
 8008ea6:	42a1      	cmp	r1, r4
 8008ea8:	d008      	beq.n	8008ebc <memmove+0x28>
 8008eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eb2:	e7f8      	b.n	8008ea6 <memmove+0x12>
 8008eb4:	4402      	add	r2, r0
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	428a      	cmp	r2, r1
 8008eba:	d100      	bne.n	8008ebe <memmove+0x2a>
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ec6:	e7f7      	b.n	8008eb8 <memmove+0x24>

08008ec8 <_sbrk_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_sbrk_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f8 f9a8 	bl	8001228 <_sbrk>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_sbrk_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_sbrk_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20000430 	.word	0x20000430

08008ee8 <memcpy>:
 8008ee8:	440a      	add	r2, r1
 8008eea:	4291      	cmp	r1, r2
 8008eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ef0:	d100      	bne.n	8008ef4 <memcpy+0xc>
 8008ef2:	4770      	bx	lr
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008efe:	4291      	cmp	r1, r2
 8008f00:	d1f9      	bne.n	8008ef6 <memcpy+0xe>
 8008f02:	bd10      	pop	{r4, pc}

08008f04 <_realloc_r>:
 8008f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	4680      	mov	r8, r0
 8008f0a:	4615      	mov	r5, r2
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	b921      	cbnz	r1, 8008f1a <_realloc_r+0x16>
 8008f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	4611      	mov	r1, r2
 8008f16:	f7ff bc4b 	b.w	80087b0 <_malloc_r>
 8008f1a:	b92a      	cbnz	r2, 8008f28 <_realloc_r+0x24>
 8008f1c:	f7ff fbdc 	bl	80086d8 <_free_r>
 8008f20:	2400      	movs	r4, #0
 8008f22:	4620      	mov	r0, r4
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f28:	f000 f81a 	bl	8008f60 <_malloc_usable_size_r>
 8008f2c:	4285      	cmp	r5, r0
 8008f2e:	4606      	mov	r6, r0
 8008f30:	d802      	bhi.n	8008f38 <_realloc_r+0x34>
 8008f32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f36:	d8f4      	bhi.n	8008f22 <_realloc_r+0x1e>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	f7ff fc38 	bl	80087b0 <_malloc_r>
 8008f40:	4607      	mov	r7, r0
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d0ec      	beq.n	8008f20 <_realloc_r+0x1c>
 8008f46:	42b5      	cmp	r5, r6
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	bf28      	it	cs
 8008f4e:	4632      	movcs	r2, r6
 8008f50:	f7ff ffca 	bl	8008ee8 <memcpy>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4640      	mov	r0, r8
 8008f58:	f7ff fbbe 	bl	80086d8 <_free_r>
 8008f5c:	463c      	mov	r4, r7
 8008f5e:	e7e0      	b.n	8008f22 <_realloc_r+0x1e>

08008f60 <_malloc_usable_size_r>:
 8008f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f64:	1f18      	subs	r0, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfbc      	itt	lt
 8008f6a:	580b      	ldrlt	r3, [r1, r0]
 8008f6c:	18c0      	addlt	r0, r0, r3
 8008f6e:	4770      	bx	lr

08008f70 <_init>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr

08008f7c <_fini>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr
