
AMKIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d118  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001438  0800d2a8  0800d2a8  0000e2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e0  0800e6e0  0001113c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6e0  0800e6e0  0000f6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6e8  0800e6e8  0001113c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6e8  0800e6e8  0000f6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e6ec  0800e6ec  0000f6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e6f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       0000013c  10000000  0800e750  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000998  20000060  20000060  00012060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f8  200009f8  00012060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001113c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e833  00000000  00000000  0001116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004953  00000000  00000000  0002f99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001538  00000000  00000000  00035e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002801d  00000000  00000000  000373c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025def  00000000  00000000  0005f3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc841  00000000  00000000  000851d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00161a15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b20  00000000  00000000  00161a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00169578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d290 	.word	0x0800d290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800d290 	.word	0x0800d290

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <FM25V10_Select_Command>:


// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 파라미터로 위 매크로 명령어 받아서 전달하는 함수
void FM25V10_Select_Command(uint8_t command)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    // SPI CS 핀을 LOW로 설정하여
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY); // 명령어 전송
 800059a:	1df9      	adds	r1, r7, #7
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	2201      	movs	r2, #1
 80005a2:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <FM25V10_Select_Command+0x20>)
 80005a4:	f006 f99b 	bl	80068de <HAL_SPI_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000061c 	.word	0x2000061c

080005b4 <FM25V10_Set_Write_Enable>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 내부 헬퍼: 쓰기 가능 상태 설정
static void FM25V10_Set_Write_Enable(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    uint8_t CMD = CMD_WREN; // WREN 명령어 정의
 80005ba:	2306      	movs	r3, #6
 80005bc:	71fb      	strb	r3, [r7, #7]

    SPI_CS_LOW(); // CS 핀을 LOW로 설정하여 SPI 통신 시작
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <FM25V10_Set_Write_Enable+0x30>)
 80005c4:	f004 f848 	bl	8004658 <HAL_GPIO_WritePin>
    FM25V10_Select_Command(CMD); // WREN 명령 전송
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffe0 	bl	8000590 <FM25V10_Select_Command>
    SPI_CS_HIGH(); // CS 핀을 HIGH로 설정하여 SPI 통신 종료
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <FM25V10_Set_Write_Enable+0x30>)
 80005d6:	f004 f83f 	bl	8004658 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000

080005e8 <FM25V10_Set_Write_Disable>:

static void FM25V10_Set_Write_Disable(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
    uint8_t CMD = CMD_WRDI; // WRDI 명령어 정의
 80005ee:	2304      	movs	r3, #4
 80005f0:	71fb      	strb	r3, [r7, #7]

    SPI_CS_LOW(); // CS 핀을 LOW로 설정하여 SPI 통신 시작
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <FM25V10_Set_Write_Disable+0x30>)
 80005f8:	f004 f82e 	bl	8004658 <HAL_GPIO_WritePin>
    FM25V10_Select_Command(CMD); // WRDI 명령 전송
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffc6 	bl	8000590 <FM25V10_Select_Command>
    SPI_CS_HIGH(); // CS 핀을 HIGH로 설정하여 SPI 통신 종료
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <FM25V10_Set_Write_Disable+0x30>)
 800060a:	f004 f825 	bl	8004658 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020000 	.word	0x40020000

0800061c <Memory_Write_Enable>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

void Memory_Write_Enable(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // FM25V10 메모리 쓰기 가능 상태로 설정
    FM25V10_Set_Write_Enable();
 8000620:	f7ff ffc8 	bl	80005b4 <FM25V10_Set_Write_Enable>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <Memory_Write_Disable>:


void Memory_Write_Disable(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    // FM25V10 메모리 쓰기 불가능 상태로 설정
    FM25V10_Set_Write_Disable();
 800062c:	f7ff ffdc 	bl	80005e8 <FM25V10_Set_Write_Disable>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <FM25V10_Write>:
// addr : 메모리 주소 (0x0000 ~ 0x1FFF)
// pData: 쓸 데이터 버퍼  
// len  : 바이트 수  
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef FM25V10_Write(uint16_t addr, const uint8_t *pData, uint16_t len)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	80fb      	strh	r3, [r7, #6]
 8000640:	4613      	mov	r3, r2
 8000642:	80bb      	strh	r3, [r7, #4]
    // 길이가 0이면 예외
    if (len == 0 || pData == NULL)
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <FM25V10_Write+0x1c>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <FM25V10_Write+0x20>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000650:	2301      	movs	r3, #1
 8000652:	e039      	b.n	80006c8 <FM25V10_Write+0x94>
    }

    // 1) 쓰기 허가
    Memory_Write_Enable();
 8000654:	f7ff ffe2 	bl	800061c <Memory_Write_Enable>

    // 2) CS LOW , FRAM 활성화
    SPI_CS_LOW();
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	481c      	ldr	r0, [pc, #112]	@ (80006d0 <FM25V10_Write+0x9c>)
 800065e:	f003 fffb 	bl	8004658 <HAL_GPIO_WritePin>
        (addr >> 8) & 0xFF,
        (addr      ) & 0xFF
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, 3, HAL_MAX_DELAY);
#endif
    uint8_t header[4] = {
 8000662:	2302      	movs	r3, #2
 8000664:	723b      	strb	r3, [r7, #8]
        CMD_WRITE,
        (uint8_t)(addr >> 16),   // 상위 주소 바이트 (addr이 16비트라면 항상 0)
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	141b      	asrs	r3, r3, #16
 800066a:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800066c:	727b      	strb	r3, [r7, #9]
        (uint8_t)(addr >> 8),    // 중간 주소 바이트
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	b29b      	uxth	r3, r3
 8000674:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000676:	72bb      	strb	r3, [r7, #10]
        (uint8_t)(addr)          // 하위 주소 바이트
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800067c:	72fb      	strb	r3, [r7, #11]
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, sizeof(header), HAL_MAX_DELAY);
 800067e:	f107 0108 	add.w	r1, r7, #8
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2204      	movs	r2, #4
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <FM25V10_Write+0xa0>)
 800068a:	f006 f928 	bl	80068de <HAL_SPI_Transmit>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <FM25V10_Write+0x72>
    {
        SPI_CS_HIGH();
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <FM25V10_Write+0x9c>)
 800069e:	f003 ffdb 	bl	8004658 <HAL_GPIO_WritePin>
        return st;
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	e010      	b.n	80006c8 <FM25V10_Write+0x94>
    }

    // 4) 데이터 전송
    st = HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, len, HAL_MAX_DELAY);
 80006a6:	88ba      	ldrh	r2, [r7, #4]
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	6839      	ldr	r1, [r7, #0]
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <FM25V10_Write+0xa0>)
 80006b0:	f006 f915 	bl	80068de <HAL_SPI_Transmit>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]

    // 5) CS HIGH
    SPI_CS_HIGH();
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <FM25V10_Write+0x9c>)
 80006be:	f003 ffcb 	bl	8004658 <HAL_GPIO_WritePin>

    // 6) 쓰기 종료
    Memory_Write_Disable();
 80006c2:	f7ff ffb1 	bl	8000628 <Memory_Write_Disable>

    return st;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40020000 	.word	0x40020000
 80006d4:	2000061c 	.word	0x2000061c

080006d8 <Memory_Write>:

HAL_StatusTypeDef Memory_Write(uint16_t addr, const uint8_t *pData, uint16_t len)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
    // 내부 드라이버 함수 호출
    return FM25V10_Write(addr, pData, len);
 80006e8:	88ba      	ldrh	r2, [r7, #4]
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	6839      	ldr	r1, [r7, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffa0 	bl	8000634 <FM25V10_Write>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <FM25V10_Read>:
// addr : 메모리 주소 (0x0000 ~ 0x1FFF)
// pData: 읽은 데이터 버퍼
// len  : 바이트 수
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef FM25V10_Read(uint16_t addr, uint8_t *pData, uint16_t len)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	80fb      	strh	r3, [r7, #6]
 800070c:	4613      	mov	r3, r2
 800070e:	80bb      	strh	r3, [r7, #4]
    // 길이가 0이면 예외
    if (len == 0 || pData == NULL)
 8000710:	88bb      	ldrh	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <FM25V10_Read+0x1c>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <FM25V10_Read+0x20>
    {
        return HAL_ERROR; // 잘못된 파라미터
 800071c:	2301      	movs	r3, #1
 800071e:	e035      	b.n	800078c <FM25V10_Read+0x8c>
    }

    // 1) CS LOW , FRAM 활성화
    SPI_CS_LOW();
 8000720:	2200      	movs	r2, #0
 8000722:	2110      	movs	r1, #16
 8000724:	481b      	ldr	r0, [pc, #108]	@ (8000794 <FM25V10_Read+0x94>)
 8000726:	f003 ff97 	bl	8004658 <HAL_GPIO_WritePin>
        (addr >> 8) & 0xFF,
        (addr     ) & 0xFF
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, 3, HAL_MAX_DELAY);
#endif
    uint8_t header[4] = {
 800072a:	2303      	movs	r3, #3
 800072c:	723b      	strb	r3, [r7, #8]
        CMD_READ,
        (uint8_t)(addr >> 16),
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	141b      	asrs	r3, r3, #16
 8000732:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000734:	727b      	strb	r3, [r7, #9]
        (uint8_t)(addr >> 8),
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800073e:	72bb      	strb	r3, [r7, #10]
        (uint8_t)(addr)
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000744:	72fb      	strb	r3, [r7, #11]
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, sizeof(header), HAL_MAX_DELAY);
 8000746:	f107 0108 	add.w	r1, r7, #8
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2204      	movs	r2, #4
 8000750:	4811      	ldr	r0, [pc, #68]	@ (8000798 <FM25V10_Read+0x98>)
 8000752:	f006 f8c4 	bl	80068de <HAL_SPI_Transmit>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d006      	beq.n	800076e <FM25V10_Read+0x6e>
    {
        SPI_CS_HIGH();
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <FM25V10_Read+0x94>)
 8000766:	f003 ff77 	bl	8004658 <HAL_GPIO_WritePin>
        return st;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	e00e      	b.n	800078c <FM25V10_Read+0x8c>
    }

    // 데이터 수신
    st = HAL_SPI_Receive(&hspi1, pData, len, HAL_MAX_DELAY);
 800076e:	88ba      	ldrh	r2, [r7, #4]
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <FM25V10_Read+0x98>)
 8000778:	f006 f9f5 	bl	8006b66 <HAL_SPI_Receive>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
    SPI_CS_HIGH();
 8000780:	2201      	movs	r2, #1
 8000782:	2110      	movs	r1, #16
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <FM25V10_Read+0x94>)
 8000786:	f003 ff67 	bl	8004658 <HAL_GPIO_WritePin>

    return st;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40020000 	.word	0x40020000
 8000798:	2000061c 	.word	0x2000061c

0800079c <Memory_Read>:

HAL_StatusTypeDef Memory_Read(uint16_t addr, uint8_t *pData, uint16_t len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	80fb      	strh	r3, [r7, #6]
 80007a8:	4613      	mov	r3, r2
 80007aa:	80bb      	strh	r3, [r7, #4]
    // 내부 드라이버 함수 호출
    return FM25V10_Read(addr, pData, len);
 80007ac:	88ba      	ldrh	r2, [r7, #4]
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	6839      	ldr	r1, [r7, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffa4 	bl	8000700 <FM25V10_Read>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <Load_TimeStatus_FRAM>:
//                                                                                   
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 부팅 시 호출: 플래그 복원
HAL_StatusTypeDef Load_TimeStatus_FRAM(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(TIME_FLAG_ADDR, &flag, 1);
 80007ca:	1dbb      	adds	r3, r7, #6
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ffe3 	bl	800079c <Memory_Read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]

    g_nTime_Status = (flag==DEVICE_TIME_SYNCED)
                    ? DEVICE_TIME_SYNCED
                    : DEVICE_TIME_NOT_SYNCED;
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
    g_nTime_Status = (flag==DEVICE_TIME_SYNCED)
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <Load_TimeStatus_FRAM+0x34>)
 80007ea:	701a      	strb	r2, [r3, #0]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "LOAD Time Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif
                    
    return st;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000802 	.word	0x20000802

080007fc <Save_TimeStatus_FRAM>:

// 동기화 완료 시 호출: 플래그 저장
HAL_StatusTypeDef Save_TimeStatus_FRAM(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nTime_Status;
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <Save_TimeStatus_FRAM+0x24>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "SAVE Time Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(TIME_FLAG_ADDR, &flag, 1);
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff ff62 	bl	80006d8 <Memory_Write>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000802 	.word	0x20000802

08000824 <Load_Wifi_Status_FRAM>:
//      \  /\  /   _| |_| |     _| |_            ____) |  | |/ ____ \| |  | |__| |____) |
//       \/  \/   |_____|_|    |_____|          |_____/   |_/_/    \_\_|   \____/|_____/ 
//                                                                                       
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef Load_Wifi_Status_FRAM(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(WIFI_FLAG_ADDR, &flag, 1);
 800082a:	1dbb      	adds	r3, r7, #6
 800082c:	2201      	movs	r2, #1
 800082e:	4619      	mov	r1, r3
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff ffb3 	bl	800079c <Memory_Read>
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]

    g_nWifi_Status = (flag==DEVICE_WIFI_CONNECTED)
                    ? DEVICE_WIFI_CONNECTED
                    : DEVICE_WIFI_DISCONNECTED;
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	bf0c      	ite	eq
 8000840:	2301      	moveq	r3, #1
 8000842:	2300      	movne	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461a      	mov	r2, r3
    g_nWifi_Status = (flag==DEVICE_WIFI_CONNECTED)
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <Load_Wifi_Status_FRAM+0x34>)
 800084a:	701a      	strb	r2, [r3, #0]
#if DEBUG_MODE
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "LOAD Wifi Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif
    return st;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000801 	.word	0x20000801

0800085c <Save_Wifi_Status_FRAM>:

// 동기화 완료 시 호출: 플래그 저장
HAL_StatusTypeDef Save_Wifi_Status_FRAM(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nWifi_Status;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <Save_Wifi_Status_FRAM+0x24>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "SAVE Wifi Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(WIFI_FLAG_ADDR, &flag, 1);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff ff32 	bl	80006d8 <Memory_Write>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000801 	.word	0x20000801

08000884 <Load_Token_Status_FRAM>:
//      |_|  \____/|_|\_\______|_| \_|     |_____/   |_/_/    \_\____/|_____/ 
//                                                                            
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 토큰 상태를 로드하는 함수
HAL_StatusTypeDef Load_Token_Status_FRAM(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(TOKEN_FLAG_ADDR, &flag, 1);
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	2201      	movs	r2, #1
 800088e:	4619      	mov	r1, r3
 8000890:	2010      	movs	r0, #16
 8000892:	f7ff ff83 	bl	800079c <Memory_Read>
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]

    g_nToken_Status = (flag==DEVICE_TOKEN_SET)
                    ? DEVICE_TOKEN_SET
                    : DEVICE_TOKEN_NOT_SET;
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	2b01      	cmp	r3, #1
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
    g_nToken_Status = (flag==DEVICE_TOKEN_SET)
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <Load_Token_Status_FRAM+0x34>)
 80008aa:	701a      	strb	r2, [r3, #0]

    return st;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000803 	.word	0x20000803

080008bc <Save_Token_Status_FRAM>:

// 토큰 상태를 저장하는 함수
HAL_StatusTypeDef Save_Token_Status_FRAM(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nToken_Status;
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <Save_Token_Status_FRAM+0x24>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]

    return Memory_Write(TOKEN_FLAG_ADDR, &flag, 1);
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	2201      	movs	r2, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	2010      	movs	r0, #16
 80008d0:	f7ff ff02 	bl	80006d8 <Memory_Write>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000803 	.word	0x20000803

080008e4 <Save_Token_FRAM>:

// 토큰을 저장하는 함수
HAL_StatusTypeDef Save_Token_FRAM(const char *token)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 80008ec:	f002 fe8a 	bl	8003604 <SERVER_API_Get_Data>
 80008f0:	6178      	str	r0, [r7, #20]
    if (pApiData == NULL)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <Save_Token_FRAM+0x18>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 80008f8:	2301      	movs	r3, #1
 80008fa:	e02f      	b.n	800095c <Save_Token_FRAM+0x78>
    }

    if (token == NULL || strlen(token)+1 > sizeof(pApiData->sToken) || *token == '\0')
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00a      	beq.n	8000918 <Save_Token_FRAM+0x34>
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fc6e 	bl	80001e4 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	3301      	adds	r3, #1
 800090c:	2b80      	cmp	r3, #128	@ 0x80
 800090e:	d803      	bhi.n	8000918 <Save_Token_FRAM+0x34>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <Save_Token_FRAM+0x38>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000918:	2301      	movs	r3, #1
 800091a:	e01f      	b.n	800095c <Save_Token_FRAM+0x78>
    }

    uint8_t flag = DEVICE_TOKEN_SET; // 토큰이 설정됨을 나타내는 플래그
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]

    // 토큰 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(TOKEN_FLAG_ADDR, &flag, 1);
 8000920:	f107 030f 	add.w	r3, r7, #15
 8000924:	2201      	movs	r2, #1
 8000926:	4619      	mov	r1, r3
 8000928:	2010      	movs	r0, #16
 800092a:	f7ff fed5 	bl	80006d8 <Memory_Write>
 800092e:	4603      	mov	r3, r0
 8000930:	74fb      	strb	r3, [r7, #19]
    if (st != HAL_OK)
 8000932:	7cfb      	ldrb	r3, [r7, #19]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <Save_Token_FRAM+0x58>
    {
        return st; // 플래그 저장 실패
 8000938:	7cfb      	ldrb	r3, [r7, #19]
 800093a:	e00f      	b.n	800095c <Save_Token_FRAM+0x78>
    }

    uint16_t len = (uint16_t)(strlen(token)+1); // 문자열 길이 + NULL 문자
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fc51 	bl	80001e4 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29b      	uxth	r3, r3
 8000946:	3301      	adds	r3, #1
 8000948:	823b      	strh	r3, [r7, #16]

    // 토큰 데이터 저장
    st = Memory_Write(TOKEN_ADDR, (const uint8_t*)token, len);
 800094a:	8a3b      	ldrh	r3, [r7, #16]
 800094c:	461a      	mov	r2, r3
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2011      	movs	r0, #17
 8000952:	f7ff fec1 	bl	80006d8 <Memory_Write>
 8000956:	4603      	mov	r3, r0
 8000958:	74fb      	strb	r3, [r7, #19]
    
    return st;
 800095a:	7cfb      	ldrb	r3, [r7, #19]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <Load_Token_FRAM>:

// 토큰을 읽는 함수
HAL_StatusTypeDef Load_Token_FRAM(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
    // 토큰을 저장하는 구조체를 가져옴
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 800096a:	f002 fe4b 	bl	8003604 <SERVER_API_Get_Data>
 800096e:	60b8      	str	r0, [r7, #8]
    if (pApiData == NULL)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <Load_Token_FRAM+0x16>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 8000976:	2301      	movs	r3, #1
 8000978:	e02c      	b.n	80009d4 <Load_Token_FRAM+0x70>
    }
    uint8_t flag;
    HAL_StatusTypeDef st = Memory_Read(TOKEN_FLAG_ADDR, &flag, 1);
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	2201      	movs	r2, #1
 800097e:	4619      	mov	r1, r3
 8000980:	2010      	movs	r0, #16
 8000982:	f7ff ff0b 	bl	800079c <Memory_Read>
 8000986:	4603      	mov	r3, r0
 8000988:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <Load_Token_FRAM+0x30>
    {
        return st; // 플래그 읽기 실패
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	e01f      	b.n	80009d4 <Load_Token_FRAM+0x70>
    }
    if (flag == DEVICE_TOKEN_SET)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10f      	bne.n	80009ba <Load_Token_FRAM+0x56>
    {
        // 토큰이 설정되어 있으면 토큰 데이터를 읽음
        st = Memory_Read(TOKEN_ADDR, (uint8_t*)pApiData->sToken, sizeof(pApiData->sToken) - 1);
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	227f      	movs	r2, #127	@ 0x7f
 800099e:	4619      	mov	r1, r3
 80009a0:	2011      	movs	r0, #17
 80009a2:	f7ff fefb 	bl	800079c <Memory_Read>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]
        if (st == HAL_OK)
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d107      	bne.n	80009c0 <Load_Token_FRAM+0x5c>
        {
            pApiData->sToken[sizeof(pApiData->sToken) - 1] = '\0'; // 문자열 종료
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80009b8:	e002      	b.n	80009c0 <Load_Token_FRAM+0x5c>
        }
    }
    else
    {
        // 토큰이 설정되어 있지 않으면 빈 문자열로 초기화
        pApiData->sToken[0] = '\0';
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
    }
    // 토큰 상태를 업데이트
    g_nToken_Status = (flag == DEVICE_TOKEN_SET) ? DEVICE_TOKEN_SET : DEVICE_TOKEN_NOT_SET;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <Load_Token_FRAM+0x78>)
 80009d0:	701a      	strb	r2, [r3, #0]
        // 토큰이 설정되어 있으면 토큰 값도 출력
        HAL_UART_Transmit(&huart1, (uint8_t*)pApiData->sToken, strlen(pApiData->sToken), HAL_MAX_DELAY);
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY); // 줄바꿈 추가
    }
#endif
    return st;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]

}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000803 	.word	0x20000803

080009e0 <Load_MAC_Status_FRAM>:
//   |_|  |_/_/    \_\_____|   |_____/   |_/_/    \_\____/|_____/ 
//                                                                
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// MAC 주소가 설정되어 있는지 확인하는 함수
HAL_StatusTypeDef Load_MAC_Status_FRAM(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(MAC_FLAG_ADDR, &flag, 1);
 80009e6:	1dbb      	adds	r3, r7, #6
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	2091      	movs	r0, #145	@ 0x91
 80009ee:	f7ff fed5 	bl	800079c <Memory_Read>
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]

    g_nMac_Status = (flag==DEVICE_MAC_SET)
                    ? DEVICE_MAC_SET
                    : DEVICE_MAC_NOT_SET;
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	bf0c      	ite	eq
 80009fc:	2301      	moveq	r3, #1
 80009fe:	2300      	movne	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
    g_nMac_Status = (flag==DEVICE_MAC_SET)
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <Load_MAC_Status_FRAM+0x34>)
 8000a06:	701a      	strb	r2, [r3, #0]
    char macStatusMsg[50];
    snprintf(macStatusMsg, sizeof(macStatusMsg), "LOAD MAC Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)macStatusMsg, strlen(macStatusMsg), HAL_MAX_DELAY);
#endif

    return st;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000804 	.word	0x20000804

08000a18 <Save_MAC_Status_FRAM>:

// Mac 주소 상태를 저장하는 함수
HAL_StatusTypeDef Save_MAC_Status_FRAM(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nMac_Status;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <Save_MAC_Status_FRAM+0x24>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
    char macStatusMsg[50];
    snprintf(macStatusMsg, sizeof(macStatusMsg), "SAVE MAC Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)macStatusMsg, strlen(macStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(MAC_FLAG_ADDR, &flag, 1);
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2091      	movs	r0, #145	@ 0x91
 8000a2c:	f7ff fe54 	bl	80006d8 <Memory_Write>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000804 	.word	0x20000804

08000a40 <Save_MAC_FRAM>:

// MAC 주소를 저장하는 함수
HAL_StatusTypeDef Save_MAC_FRAM(const char *mac)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    if (mac == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <Save_MAC_FRAM+0x12>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e01e      	b.n	8000a90 <Save_MAC_FRAM+0x50>
    }

    uint8_t flag = DEVICE_MAC_SET; // MAC 주소가 설정됨을 나타내는 플래그
 8000a52:	2301      	movs	r3, #1
 8000a54:	73bb      	strb	r3, [r7, #14]

    // MAC 주소 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(MAC_FLAG_ADDR, &flag, 1);
 8000a56:	f107 030e 	add.w	r3, r7, #14
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2091      	movs	r0, #145	@ 0x91
 8000a60:	f7ff fe3a 	bl	80006d8 <Memory_Write>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <Save_MAC_FRAM+0x32>
    {
        return st; // 플래그 저장 실패
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	e00e      	b.n	8000a90 <Save_MAC_FRAM+0x50>
    }

    // MAC 주소 데이터 저장
    st = Memory_Write(MAC_ADDR, (const uint8_t*)mac, strlen(mac)+1); // MAC 주소는 6바이트
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fbb6 	bl	80001e4 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2092      	movs	r0, #146	@ 0x92
 8000a86:	f7ff fe27 	bl	80006d8 <Memory_Write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]

    return st;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <Load_MAC_FRAM>:

// MAC 주소를 읽는 함수
HAL_StatusTypeDef Load_MAC_FRAM(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    // MAC 주소를 저장하는 구조체를 가져옴
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 8000a9e:	f002 fdb1 	bl	8003604 <SERVER_API_Get_Data>
 8000aa2:	60b8      	str	r0, [r7, #8]
    if (pApiData == NULL)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <Load_MAC_FRAM+0x16>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e031      	b.n	8000b12 <Load_MAC_FRAM+0x7a>
    }
    
    uint8_t flag;
    HAL_StatusTypeDef st = Memory_Read(MAC_FLAG_ADDR, &flag, 1);
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	2091      	movs	r0, #145	@ 0x91
 8000ab6:	f7ff fe71 	bl	800079c <Memory_Read>
 8000aba:	4603      	mov	r3, r0
 8000abc:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <Load_MAC_FRAM+0x30>
    {
        return st; // 플래그 읽기 실패
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	e024      	b.n	8000b12 <Load_MAC_FRAM+0x7a>
    }
    
    if (flag == DEVICE_MAC_SET)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d110      	bne.n	8000af0 <Load_MAC_FRAM+0x58>
    {
        // MAC 주소가 설정되어 있으면 MAC 주소 데이터를 읽음
        st = Memory_Read(MAC_ADDR, (uint8_t*)pApiData->sMac, sizeof(pApiData->sMac) - 1);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3380      	adds	r3, #128	@ 0x80
 8000ad2:	2211      	movs	r2, #17
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2092      	movs	r0, #146	@ 0x92
 8000ad8:	f7ff fe60 	bl	800079c <Memory_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]
        if (st == HAL_OK)
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10b      	bne.n	8000afe <Load_MAC_FRAM+0x66>
        {
            // MAC 주소는 6바이트이므로 문자열 종료 필요 없음
            pApiData->sMac[sizeof(pApiData->sMac)-1] = '\0'; // 문자열 종료
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
 8000aee:	e006      	b.n	8000afe <Load_MAC_FRAM+0x66>
        }
    }
    else
    {
        // MAC 주소가 설정되어 있지 않으면 빈 문자열로 초기화
        memset(pApiData->sMac, 0, sizeof(pApiData->sMac));
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3380      	adds	r3, #128	@ 0x80
 8000af4:	2212      	movs	r2, #18
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f00b fb15 	bl	800c128 <memset>
    }
    
    // MAC 주소 상태를 업데이트
    g_nMac_Status = (flag == DEVICE_MAC_SET) ? DEVICE_MAC_SET : DEVICE_MAC_NOT_SET;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <Load_MAC_FRAM+0x84>)
 8000b0e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)pApiData->sMac, strlen(pApiData->sMac), HAL_MAX_DELAY);
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY); // 줄바꿈 추가
    }
#endif

    return st;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000804 	.word	0x20000804

08000b20 <FRAM_Init>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 초기화 함수
void FRAM_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    SPI_CS_HIGH();
 8000b24:	2201      	movs	r2, #1
 8000b26:	2110      	movs	r1, #16
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <FRAM_Init+0x14>)
 8000b2a:	f003 fd95 	bl	8004658 <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40020000 	.word	0x40020000

08000b38 <DEVICE_Get_Control>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// CCMRAM 초기화
__CCMRAM__ Device_Control g_deviceControl; // 기기 조작 구조체 인스턴스
PDevice_Control DEVICE_Get_Control(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
    // g_deviceControl의 주소를 반환
    return &g_deviceControl;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	@ (8000b48 <DEVICE_Get_Control+0x10>)
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	10000000 	.word	0x10000000

08000b4c <DEVICE_Init>:

void DEVICE_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    // g_deviceControl 구조체를 0으로 초기화
    memset(&g_deviceControl, 0, sizeof(g_deviceControl));
 8000b50:	220c      	movs	r2, #12
 8000b52:	2100      	movs	r1, #0
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <DEVICE_Init+0x14>)
 8000b56:	f00b fae7 	bl	800c128 <memset>

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	10000000 	.word	0x10000000

08000b64 <Device_Mode_Set>:
// ──────────────────────────────────────────────────────────────────────────────

int Device_Mode_Set(int mode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    PDevice_Control pDeviceControl = DEVICE_Get_Control();
 8000b6c:	f7ff ffe4 	bl	8000b38 <DEVICE_Get_Control>
 8000b70:	60f8      	str	r0, [r7, #12]

    // 모드 설정
    switch (mode)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b06      	cmp	r3, #6
 8000b76:	d821      	bhi.n	8000bbc <Device_Mode_Set+0x58>
 8000b78:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <Device_Mode_Set+0x1c>)
 8000b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7e:	bf00      	nop
 8000b80:	08000b9d 	.word	0x08000b9d
 8000b84:	08000ba5 	.word	0x08000ba5
 8000b88:	08000bad 	.word	0x08000bad
 8000b8c:	08000bbd 	.word	0x08000bbd
 8000b90:	08000bbd 	.word	0x08000bbd
 8000b94:	08000bbd 	.word	0x08000bbd
 8000b98:	08000bb5 	.word	0x08000bb5
    {
    case MODE_MASTER:
        pDeviceControl->g_nMode = MODE_MASTER; // 마스터 모드로 설정
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
        break;
 8000ba2:	e00e      	b.n	8000bc2 <Device_Mode_Set+0x5e>
    case MODE_SLAVE:
        pDeviceControl->g_nMode = MODE_SLAVE; // 슬레이브 모드로 설정
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	609a      	str	r2, [r3, #8]
        break;
 8000baa:	e00a      	b.n	8000bc2 <Device_Mode_Set+0x5e>
    case MODE_AP:
        pDeviceControl->g_nMode = MODE_AP; // AP 모드로 설정
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2202      	movs	r2, #2
 8000bb0:	609a      	str	r2, [r3, #8]
        break;
 8000bb2:	e006      	b.n	8000bc2 <Device_Mode_Set+0x5e>
    case MODE_DEGUG:
        pDeviceControl->g_nMode = MODE_DEGUG; // 디버그 모드로 설정
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2206      	movs	r2, #6
 8000bb8:	609a      	str	r2, [r3, #8]
        break;
 8000bba:	e002      	b.n	8000bc2 <Device_Mode_Set+0x5e>
    default:
        return -1; // 잘못된 모드 값 처리
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	e001      	b.n	8000bc6 <Device_Mode_Set+0x62>
    }

    return pDeviceControl->g_nMode; // 현재 모드 반환
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	689b      	ldr	r3, [r3, #8]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop

08000bd0 <Device_Mode_Check>:



int Device_Mode_Check(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
    PDevice_Control pDeviceControl = DEVICE_Get_Control();
 8000bd6:	f7ff ffaf 	bl	8000b38 <DEVICE_Get_Control>
 8000bda:	6078      	str	r0, [r7, #4]

    int mode = pDeviceControl->g_nMode; // 현재 모드 가져오기
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	603b      	str	r3, [r7, #0]

    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d117      	bne.n	8000c1e <Device_Mode_Check+0x4e>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d111      	bne.n	8000c1e <Device_Mode_Check+0x4e>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) == DIP_3_Pin &&
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d10b      	bne.n	8000c1e <Device_Mode_Check+0x4e>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) == DIP_4_Pin)
 8000c06:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) == DIP_3_Pin &&
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d105      	bne.n	8000c1e <Device_Mode_Check+0x4e>
    {
        mode = Device_Mode_Set(MODE_MASTER); // 마스터 모드로 설정 및 업데이트
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ffa6 	bl	8000b64 <Device_Mode_Set>
 8000c18:	6038      	str	r0, [r7, #0]

        return mode;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	e03f      	b.n	8000c9e <Device_Mode_Check+0xce>
    }

    // 딥스위치 상태 확인 esp32를 AP모드 사용할지 결정
    // 3,4번 DIP 스위치가 모두 HIGH 상태일 때 AP 모드로 설정
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000c1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d117      	bne.n	8000c5a <Device_Mode_Check+0x8a>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d111      	bne.n	8000c5a <Device_Mode_Check+0x8a>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin && 
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d00b      	beq.n	8000c5a <Device_Mode_Check+0x8a>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) != DIP_4_Pin)
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin && 
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d005      	beq.n	8000c5a <Device_Mode_Check+0x8a>
    {
        mode = Device_Mode_Set(MODE_AP); // AP 모드로 설정 및 업데이트
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f7ff ff88 	bl	8000b64 <Device_Mode_Set>
 8000c54:	6038      	str	r0, [r7, #0]
        // pDeviceControl->g_nMode = MODE_AP; // AP 모드로 설정
        // mode = pDeviceControl->g_nMode; // 현재 모드 업데이트

        // g_nMode = MODE_AP; // AP 모드로 설정

        return mode;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	e021      	b.n	8000c9e <Device_Mode_Check+0xce>
    }
    else
    {
        g_nMode = MODE_MASTER; // 기본적으로 마스터 모드로 설정
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <Device_Mode_Check+0xdc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
    }

    // 딥스위치 1,3,4 번 HIGH 상태일때 디버그 모드
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d017      	beq.n	8000c9c <Device_Mode_Check+0xcc>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d111      	bne.n	8000c9c <Device_Mode_Check+0xcc>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d00b      	beq.n	8000c9c <Device_Mode_Check+0xcc>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) != DIP_4_Pin)
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <Device_Mode_Check+0xd8>)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000c8c:	2b08      	cmp	r3, #8
 8000c8e:	d005      	beq.n	8000c9c <Device_Mode_Check+0xcc>
    {
        mode = Device_Mode_Set(MODE_DEGUG); // 디버그 모드로 설정 및 업데이트
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff ff67 	bl	8000b64 <Device_Mode_Set>
 8000c96:	6038      	str	r0, [r7, #0]
        // pDeviceControl->g_nMode = MODE_DEGUG; // 디버그 모드로 설정
        // mode = pDeviceControl->g_nMode; // 현재 모드 업데이트
        
        // g_nMode = MODE_DEGUG; // 디버그 모드로 설정

        return mode;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	e000      	b.n	8000c9e <Device_Mode_Check+0xce>
    }

    return mode;
 8000c9c:	683b      	ldr	r3, [r7, #0]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20000800 	.word	0x20000800

08000cb0 <AT_Get_UTC_Time>:
// =========================================================

__CCMRAM__ AT_UTC_Time g_atUtcTime;

PAT_UTC_Time AT_Get_UTC_Time(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
    // 현재 UTC 시간을 반환
    return &g_atUtcTime;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	@ (8000cc0 <AT_Get_UTC_Time+0x10>)
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	1000000c 	.word	0x1000000c

08000cc4 <UTC_Time_Init>:

// CCMRAM 초기화
void UTC_Time_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    memset(&g_atUtcTime, 0, sizeof(g_atUtcTime));
 8000cc8:	221c      	movs	r2, #28
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <UTC_Time_Init+0x14>)
 8000cce:	f00b fa2b 	bl	800c128 <memset>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	1000000c 	.word	0x1000000c

08000cdc <ESP_AT_Boot>:
}

#endif // 0

int ESP_AT_Boot(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
    int result;
    // AT 커맨드로 AT 전송
    const char *cmd = "AT\r\n";
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <ESP_AT_Boot+0x70>)
 8000ce4:	613b      	str	r3, [r7, #16]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8000ce6:	6938      	ldr	r0, [r7, #16]
 8000ce8:	f000 f99e 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 8000cec:	60f8      	str	r0, [r7, #12]
    const char *success = "AT command successful!\r\n";
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <ESP_AT_Boot+0x74>)
 8000cf0:	60bb      	str	r3, [r7, #8]
    const char *fail = "AT command failed!\r\n";
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <ESP_AT_Boot+0x78>)
 8000cf4:	607b      	str	r3, [r7, #4]

    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d014      	beq.n	8000d26 <ESP_AT_Boot+0x4a>
 8000cfc:	4916      	ldr	r1, [pc, #88]	@ (8000d58 <ESP_AT_Boot+0x7c>)
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f00b fa3a 	bl	800c178 <strstr>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00d      	beq.n	8000d26 <ESP_AT_Boot+0x4a>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff fa6a 	bl	80001e4 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	4810      	ldr	r0, [pc, #64]	@ (8000d5c <ESP_AT_Boot+0x80>)
 8000d1c:	f006 fe86 	bl	8007a2c <HAL_UART_Transmit>

        result = AT_OK; // 성공 코드
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e00c      	b.n	8000d40 <ESP_AT_Boot+0x64>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fa5c 	bl	80001e4 <strlen>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <ESP_AT_Boot+0x80>)
 8000d38:	f006 fe78 	bl	8007a2c <HAL_UART_Transmit>

        result = AT_ERROR; // 실패 코드
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
    }

    // 결과 반환
    return result;
 8000d40:	697b      	ldr	r3, [r7, #20]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	0800d2a8 	.word	0x0800d2a8
 8000d50:	0800d2b0 	.word	0x0800d2b0
 8000d54:	0800d2cc 	.word	0x0800d2cc
 8000d58:	0800d2e4 	.word	0x0800d2e4
 8000d5c:	20000704 	.word	0x20000704

08000d60 <ESP_AT_Send_WiFi_Config>:



// SD카드에 WIFI 설정을 가져롸 AT 명령어로 ESP32에 전송하는 함수
int ESP_AT_Send_WiFi_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0aa      	sub	sp, #168	@ 0xa8
 8000d64:	af02      	add	r7, sp, #8
    int result = 0; // 결과 변수 초기화
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    // SD_Card_Get_WiFi_SSID(void) 함수로 SSID를 가져옴
    const char* ssid = SD_Card_Get_WiFi_SSID();
 8000d6c:	f002 faa4 	bl	80032b8 <SD_Card_Get_WiFi_SSID>
 8000d70:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    const char* password = SD_Card_Get_WiFi_Password();
 8000d74:	f002 fb1c 	bl	80033b0 <SD_Card_Get_WiFi_Password>
 8000d78:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    
    const char * response = NULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    const char *success = "WiFi configuration sent successfully!\r\n";
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <ESP_AT_Send_WiFi_Config+0xe0>)
 8000d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const char *fail = "Failed to send WiFi configuration!\r\n";
 8000d88:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <ESP_AT_Send_WiFi_Config+0xe4>)
 8000d8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    char cmd[128]={0}; // AT 명령어를 저장할 버퍼
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	227c      	movs	r2, #124	@ 0x7c
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00b f9c4 	bl	800c128 <memset>

    int len = snprintf(cmd, sizeof(cmd), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000da0:	1d38      	adds	r0, r7, #4
 8000da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000dac:	4a26      	ldr	r2, [pc, #152]	@ (8000e48 <ESP_AT_Send_WiFi_Config+0xe8>)
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	f00b f94a 	bl	800c048 <sniprintf>
 8000db4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    if (len < 0 || len >= (int)sizeof(cmd))
 8000db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db03      	blt.n	8000dc8 <ESP_AT_Send_WiFi_Config+0x68>
 8000dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dc6:	dd01      	ble.n	8000dcc <ESP_AT_Send_WiFi_Config+0x6c>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8000dc8:	f001 fb26 	bl	8002418 <Error_Handler>
    }

    // ESP_AT_Send_Command_Sync(cmd);
    response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f92a 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 8000dd4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    
    if (response != NULL && strstr(response, "OK") != NULL)
 8000dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d018      	beq.n	8000e12 <ESP_AT_Send_WiFi_Config+0xb2>
 8000de0:	491a      	ldr	r1, [pc, #104]	@ (8000e4c <ESP_AT_Send_WiFi_Config+0xec>)
 8000de2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000de6:	f00b f9c7 	bl	800c178 <strstr>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d010      	beq.n	8000e12 <ESP_AT_Send_WiFi_Config+0xb2>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8000df0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000df4:	f7ff f9f6 	bl	80001e4 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000e04:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <ESP_AT_Send_WiFi_Config+0xf0>)
 8000e06:	f006 fe11 	bl	8007a2c <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000e10:	e00f      	b.n	8000e32 <ESP_AT_Send_WiFi_Config+0xd2>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8000e12:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000e16:	f7ff f9e5 	bl	80001e4 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000e26:	480a      	ldr	r0, [pc, #40]	@ (8000e50 <ESP_AT_Send_WiFi_Config+0xf0>)
 8000e28:	f006 fe00 	bl	8007a2c <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }
    
    // return DEVICE_WIFI_CONNECTED; // 성공
    return result;
 8000e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	37a0      	adds	r7, #160	@ 0xa0
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	0800d2e8 	.word	0x0800d2e8
 8000e44:	0800d310 	.word	0x0800d310
 8000e48:	0800d338 	.word	0x0800d338
 8000e4c:	0800d2e4 	.word	0x0800d2e4
 8000e50:	20000704 	.word	0x20000704

08000e54 <ESP_AT_Send_Command_Sync>:

// 동기방식 ESP32 AT 명령 전송 함수
// 이 함수는 명령어를 전송하고, 응답을 기다려서 결과를 PC(UART1)로 전송합니다.

void ESP_AT_Send_Command_Sync(const char* cmd)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000e60:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000e64:	6018      	str	r0, [r3, #0]
    char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
 8000e66:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000e6a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	3304      	adds	r3, #4
 8000e74:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00b f954 	bl	800c128 <memset>
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 8000e86:	f003 f877 	bl	8003f78 <HAL_GetTick>
 8000e8a:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 8000e8e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000e92:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	f7ff f9a4 	bl	80001e4 <strlen>
 8000e9c:	f8c7 0410 	str.w	r0, [r7, #1040]	@ 0x410
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 8000ea0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000eaa:	f2a3 411c 	subw	r1, r3, #1052	@ 0x41c
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	6809      	ldr	r1, [r1, #0]
 8000eb4:	4858      	ldr	r0, [pc, #352]	@ (8001018 <ESP_AT_Send_Command_Sync+0x1c4>)
 8000eb6:	f006 fdb9 	bl	8007a2c <HAL_UART_Transmit>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d053      	beq.n	8000f68 <ESP_AT_Send_Command_Sync+0x114>
    {
        Error_Handler();
 8000ec0:	f001 faaa 	bl	8002418 <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 8000ec4:	e050      	b.n	8000f68 <ESP_AT_Send_Command_Sync+0x114>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8000ec6:	f107 010f 	add.w	r1, r7, #15
 8000eca:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4851      	ldr	r0, [pc, #324]	@ (8001018 <ESP_AT_Send_Command_Sync+0x1c4>)
 8000ed2:	f006 fe36 	bl	8007b42 <HAL_UART_Receive>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d13b      	bne.n	8000f54 <ESP_AT_Send_Command_Sync+0x100>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 8000edc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 8000ee6:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000eea:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 8000eee:	7811      	ldrb	r1, [r2, #0]
 8000ef0:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000ef4:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8000ef8:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 8000efa:	2206      	movs	r2, #6
 8000efc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d30e      	bcc.n	8000f22 <ESP_AT_Send_Command_Sync+0xce>
 8000f04:	2206      	movs	r2, #6
 8000f06:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	f107 0210 	add.w	r2, r7, #16
 8000f10:	4413      	add	r3, r2
 8000f12:	2206      	movs	r2, #6
 8000f14:	4941      	ldr	r1, [pc, #260]	@ (800101c <ESP_AT_Send_Command_Sync+0x1c8>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00b f8f6 	bl	800c108 <memcmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d02c      	beq.n	8000f7c <ESP_AT_Send_Command_Sync+0x128>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 8000f22:	2209      	movs	r2, #9
 8000f24:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d30e      	bcc.n	8000f4a <ESP_AT_Send_Command_Sync+0xf6>
 8000f2c:	2209      	movs	r2, #9
 8000f2e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	f107 0210 	add.w	r2, r7, #16
 8000f38:	4413      	add	r3, r2
 8000f3a:	2209      	movs	r2, #9
 8000f3c:	4938      	ldr	r1, [pc, #224]	@ (8001020 <ESP_AT_Send_Command_Sync+0x1cc>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00b f8e2 	bl	800c108 <memcmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d015      	beq.n	8000f76 <ESP_AT_Send_Command_Sync+0x122>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 8000f4a:	f003 f815 	bl	8003f78 <HAL_GetTick>
 8000f4e:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418
 8000f52:	e009      	b.n	8000f68 <ESP_AT_Send_Command_Sync+0x114>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 8000f54:	f003 f810 	bl	8003f78 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d808      	bhi.n	8000f7a <ESP_AT_Send_Command_Sync+0x126>
    while (pos < RESP_BUF_SIZE - 1)
 8000f68:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f6c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d9a8      	bls.n	8000ec6 <ESP_AT_Send_Command_Sync+0x72>
 8000f74:	e002      	b.n	8000f7c <ESP_AT_Send_Command_Sync+0x128>
                break;
 8000f76:	bf00      	nop
 8000f78:	e000      	b.n	8000f7c <ESP_AT_Send_Command_Sync+0x128>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 8000f7a:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 8000f7c:	f002 fffc 	bl	8003f78 <HAL_GetTick>
 8000f80:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8000f84:	e01d      	b.n	8000fc2 <ESP_AT_Send_Command_Sync+0x16e>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8000f86:	f107 010f 	add.w	r1, r7, #15
 8000f8a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4821      	ldr	r0, [pc, #132]	@ (8001018 <ESP_AT_Send_Command_Sync+0x1c4>)
 8000f92:	f006 fdd6 	bl	8007b42 <HAL_UART_Receive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d112      	bne.n	8000fc2 <ESP_AT_Send_Command_Sync+0x16e>
        {
            respBuf[pos++] = ch;
 8000f9c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 8000fa6:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000faa:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 8000fae:	7811      	ldrb	r1, [r2, #0]
 8000fb0:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000fb4:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8000fb8:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 8000fba:	f002 ffdd 	bl	8003f78 <HAL_GetTick>
 8000fbe:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8000fc2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000fc6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d808      	bhi.n	8000fe0 <ESP_AT_Send_Command_Sync+0x18c>
 8000fce:	f002 ffd3 	bl	8003f78 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fde:	d3d2      	bcc.n	8000f86 <ESP_AT_Send_Command_Sync+0x132>
        }
    }
    respBuf[pos] = '\0';
 8000fe0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000fe4:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 8000fe8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000fec:	4413      	add	r3, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 8000ff2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d009      	beq.n	800100e <ESP_AT_Send_Command_Sync+0x1ba>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 8000ffa:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f107 0110 	add.w	r1, r7, #16
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <ESP_AT_Send_Command_Sync+0x1d0>)
 800100a:	f006 fd0f 	bl	8007a2c <HAL_UART_Transmit>
    }
}
 800100e:	bf00      	nop
 8001010:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000074c 	.word	0x2000074c
 800101c:	0800e0dc 	.word	0x0800e0dc
 8001020:	0800e0e4 	.word	0x0800e0e4
 8001024:	20000704 	.word	0x20000704

08001028 <ESP_AT_Send_Command_Sync_Get_Result>:

// 동기방식 ESP32 AT 명령 전송 함수
// 반환값으로 응답 문자열을 반환
const char* ESP_AT_Send_Command_Sync_Get_Result(const char* cmd)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    static char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 8001034:	f002 ffa0 	bl	8003f78 <HAL_GetTick>
 8001038:	61b8      	str	r0, [r7, #24]

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff f8d2 	bl	80001e4 <strlen>
 8001040:	6138      	str	r0, [r7, #16]
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	b29a      	uxth	r2, r3
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4845      	ldr	r0, [pc, #276]	@ (8001164 <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 800104e:	f006 fced 	bl	8007a2c <HAL_UART_Transmit>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d042      	beq.n	80010de <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        Error_Handler();
 8001058:	f001 f9de 	bl	8002418 <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 800105c:	e03f      	b.n	80010de <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 800105e:	f107 010f 	add.w	r1, r7, #15
 8001062:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001066:	2201      	movs	r2, #1
 8001068:	483e      	ldr	r0, [pc, #248]	@ (8001164 <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 800106a:	f006 fd6a 	bl	8007b42 <HAL_UART_Receive>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d12b      	bne.n	80010cc <ESP_AT_Send_Command_Sync_Get_Result+0xa4>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	61fa      	str	r2, [r7, #28]
 800107a:	7bf9      	ldrb	r1, [r7, #15]
 800107c:	4a3a      	ldr	r2, [pc, #232]	@ (8001168 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 800107e:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 8001080:	2206      	movs	r2, #6
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	4293      	cmp	r3, r2
 8001086:	d30c      	bcc.n	80010a2 <ESP_AT_Send_Command_Sync_Get_Result+0x7a>
 8001088:	2206      	movs	r2, #6
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4a36      	ldr	r2, [pc, #216]	@ (8001168 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8001090:	4413      	add	r3, r2
 8001092:	2206      	movs	r2, #6
 8001094:	4935      	ldr	r1, [pc, #212]	@ (800116c <ESP_AT_Send_Command_Sync_Get_Result+0x144>)
 8001096:	4618      	mov	r0, r3
 8001098:	f00b f836 	bl	800c108 <memcmp>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d026      	beq.n	80010f0 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 80010a2:	2209      	movs	r2, #9
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d30c      	bcc.n	80010c4 <ESP_AT_Send_Command_Sync_Get_Result+0x9c>
 80010aa:	2209      	movs	r2, #9
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001168 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80010b2:	4413      	add	r3, r2
 80010b4:	2209      	movs	r2, #9
 80010b6:	492e      	ldr	r1, [pc, #184]	@ (8001170 <ESP_AT_Send_Command_Sync_Get_Result+0x148>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00b f825 	bl	800c108 <memcmp>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d012      	beq.n	80010ea <ESP_AT_Send_Command_Sync_Get_Result+0xc2>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 80010c4:	f002 ff58 	bl	8003f78 <HAL_GetTick>
 80010c8:	61b8      	str	r0, [r7, #24]
 80010ca:	e008      	b.n	80010de <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 80010cc:	f002 ff54 	bl	8003f78 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010da:	4293      	cmp	r3, r2
 80010dc:	d807      	bhi.n	80010ee <ESP_AT_Send_Command_Sync_Get_Result+0xc6>
    while (pos < RESP_BUF_SIZE - 1)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d9ba      	bls.n	800105e <ESP_AT_Send_Command_Sync_Get_Result+0x36>
 80010e8:	e002      	b.n	80010f0 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
                break;
 80010ea:	bf00      	nop
 80010ec:	e000      	b.n	80010f0 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 80010ee:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 80010f0:	f002 ff42 	bl	8003f78 <HAL_GetTick>
 80010f4:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 80010f6:	e013      	b.n	8001120 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 80010f8:	f107 010f 	add.w	r1, r7, #15
 80010fc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001100:	2201      	movs	r2, #1
 8001102:	4818      	ldr	r0, [pc, #96]	@ (8001164 <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 8001104:	f006 fd1d 	bl	8007b42 <HAL_UART_Receive>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d108      	bne.n	8001120 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
        {
            respBuf[pos++] = ch;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	61fa      	str	r2, [r7, #28]
 8001114:	7bf9      	ldrb	r1, [r7, #15]
 8001116:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8001118:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 800111a:	f002 ff2d 	bl	8003f78 <HAL_GetTick>
 800111e:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001126:	4293      	cmp	r3, r2
 8001128:	d807      	bhi.n	800113a <ESP_AT_Send_Command_Sync_Get_Result+0x112>
 800112a:	f002 ff25 	bl	8003f78 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001138:	d3de      	bcc.n	80010f8 <ESP_AT_Send_Command_Sync_Get_Result+0xd0>
        }
    }
    respBuf[pos] = '\0';
 800113a:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	4413      	add	r3, r2
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <ESP_AT_Send_Command_Sync_Get_Result+0x132>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	b29a      	uxth	r2, r3
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	4905      	ldr	r1, [pc, #20]	@ (8001168 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <ESP_AT_Send_Command_Sync_Get_Result+0x14c>)
 8001156:	f006 fc69 	bl	8007a2c <HAL_UART_Transmit>
    }

    return respBuf; // 응답 버퍼를 반환
 800115a:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
}
 800115c:	4618      	mov	r0, r3
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000074c 	.word	0x2000074c
 8001168:	200000c4 	.word	0x200000c4
 800116c:	0800e0dc 	.word	0x0800e0dc
 8001170:	0800e0e4 	.word	0x0800e0e4
 8001174:	20000704 	.word	0x20000704

08001178 <ESP_AT_Get_Firmware_Version>:



// ESP32 AT 명령어로 펌웨어 조회
int ESP_AT_Get_Firmware_Version(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
    int result = 0; // 결과 변수 초기화
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

    // AT 명령어 전송
    const char *cmd = "AT+GMR\r\n";
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <ESP_AT_Get_Firmware_Version+0x74>)
 8001184:	613b      	str	r3, [r7, #16]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8001186:	6938      	ldr	r0, [r7, #16]
 8001188:	f7ff ff4e 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 800118c:	60f8      	str	r0, [r7, #12]
    const char *success = "AT firmware command successful!\r\n";
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <ESP_AT_Get_Firmware_Version+0x78>)
 8001190:	60bb      	str	r3, [r7, #8]
    const char *fail = "AT firmware command failed!\r\n";
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <ESP_AT_Get_Firmware_Version+0x7c>)
 8001194:	607b      	str	r3, [r7, #4]

    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d014      	beq.n	80011c6 <ESP_AT_Get_Firmware_Version+0x4e>
 800119c:	4916      	ldr	r1, [pc, #88]	@ (80011f8 <ESP_AT_Get_Firmware_Version+0x80>)
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f00a ffea 	bl	800c178 <strstr>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00d      	beq.n	80011c6 <ESP_AT_Get_Firmware_Version+0x4e>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f7ff f81a 	bl	80001e4 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	4810      	ldr	r0, [pc, #64]	@ (80011fc <ESP_AT_Get_Firmware_Version+0x84>)
 80011bc:	f006 fc36 	bl	8007a2c <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e00c      	b.n	80011e0 <ESP_AT_Get_Firmware_Version+0x68>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff f80c 	bl	80001e4 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4809      	ldr	r0, [pc, #36]	@ (80011fc <ESP_AT_Get_Firmware_Version+0x84>)
 80011d8:	f006 fc28 	bl	8007a2c <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
    }

    // 결과 반환
    return result;
 80011e0:	697b      	ldr	r3, [r7, #20]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800d350 	.word	0x0800d350
 80011f0:	0800d35c 	.word	0x0800d35c
 80011f4:	0800d380 	.word	0x0800d380
 80011f8:	0800d2e4 	.word	0x0800d2e4
 80011fc:	20000704 	.word	0x20000704

08001200 <ESP_AT_Get_Token>:




const char* ESP_AT_Get_Token(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0c6      	sub	sp, #280	@ 0x118
 8001204:	af00      	add	r7, sp, #0
    const char *response = NULL; // 응답 문자열을 저장할 변수
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    // 1) 보낼 JSON 문자열 정의 (큰 따옴표는 백슬래시로 이스케이프)
    const char *jsonBody = "{\\\"uid\\\":\\\"kimss@andamiro.com\\\"\\,\\\"pwd\\\":\\\"temp1234!\\\"}";
 800120c:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <ESP_AT_Get_Token+0xf4>)
 800120e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // 2) AT+HTTPCLIENT 명령어 문자열 생성
    char atCmd[256];
    int len = snprintf(atCmd, sizeof(atCmd),
 8001212:	4638      	mov	r0, r7
 8001214:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001218:	4a37      	ldr	r2, [pc, #220]	@ (80012f8 <ESP_AT_Get_Token+0xf8>)
 800121a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121e:	f00a ff13 	bl	800c048 <sniprintf>
 8001222:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        "AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/user\",\"dev-api.andamiro.net\",\"/test/user\",2,\"%s\"\r\n",
        jsonBody);
    
    if (len < 0 || len >= (int)sizeof(atCmd)) 
 8001226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800122a:	2b00      	cmp	r3, #0
 800122c:	db03      	blt.n	8001236 <ESP_AT_Get_Token+0x36>
 800122e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001232:	2bff      	cmp	r3, #255	@ 0xff
 8001234:	dd01      	ble.n	800123a <ESP_AT_Get_Token+0x3a>
    {
        // snprintf 실패 또는 버퍼 부족
        Error_Handler();
 8001236:	f001 f8ef 	bl	8002418 <Error_Handler>
    }

    // 3) 위 함수로 AT 명령 전송 및 응답 처리
    response = ESP_AT_Send_Command_Sync_Get_Result(atCmd);
 800123a:	463b      	mov	r3, r7
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fef3 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 8001242:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    // response에는 
    //Ast/user","dev-api.andamiro.net","/test/user",2,"{\"uid\":\"kimss@andamiro.com\"\,\"pwd\":\"temp1234!\"}"+HTTPCLIENT:72,{"token":"eEx4NVhXZ2p5MlBBRjJ3eU9CbGJJeUtSbzlvUDU4TzJ0ZCtRSE9FdHZDTT0="}OK
    // 형태의 응답이 저장됨
    // token 값 추출
    const char *tokenStart = strstr(response, "\"token\":\"");
 8001246:	492d      	ldr	r1, [pc, #180]	@ (80012fc <ESP_AT_Get_Token+0xfc>)
 8001248:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800124c:	f00a ff94 	bl	800c178 <strstr>
 8001250:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

    static char token[128]; // 충분히 큰 버퍼

    // "token":" 문자열을 찾아서 토큰 시작 위치를 찾음
    if (tokenStart != NULL) 
 8001254:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001258:	2b00      	cmp	r3, #0
 800125a:	d027      	beq.n	80012ac <ESP_AT_Get_Token+0xac>
    {
        tokenStart += strlen("\"token\":\""); // 토큰 시작 위치로 이동
 800125c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001260:	3309      	adds	r3, #9
 8001262:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

        const char *tokenEnd = strchr(tokenStart, '\"'); // 다음 큰 따옴표 찾기
 8001266:	2122      	movs	r1, #34	@ 0x22
 8001268:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800126c:	f00a ff64 	bl	800c138 <strchr>
 8001270:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
        
        if (tokenEnd != NULL) 
 8001274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001278:	2b00      	cmp	r3, #0
 800127a:	d017      	beq.n	80012ac <ESP_AT_Get_Token+0xac>
        {
            size_t tokenLength = tokenEnd - tokenStart; // 토큰 길이 계산
 800127c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001280:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

            // 순수 토큰만 추출
            if (tokenLength < sizeof(token)) 
 800128a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800128e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001290:	d80c      	bhi.n	80012ac <ESP_AT_Get_Token+0xac>
            {
                //tokenLength -= 2; // 버퍼 크기 제한
                strncpy(token, tokenStart, tokenLength);
 8001292:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001296:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800129a:	4819      	ldr	r0, [pc, #100]	@ (8001300 <ESP_AT_Get_Token+0x100>)
 800129c:	f00a ff59 	bl	800c152 <strncpy>
                token[tokenLength] = '\0'; // 문자열 종료
 80012a0:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <ESP_AT_Get_Token+0x100>)
 80012a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80012a6:	4413      	add	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
                // 이제 token 변수에 토큰 값이 저장됨
            }
        }
    }
    // 4) 추출된 토큰을 PC(UART1)로 전송
    if (token[0] != '\0') 
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <ESP_AT_Get_Token+0x100>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <ESP_AT_Get_Token+0xda>
    {
        // tokjen을 PC로 전송
        HAL_UART_Transmit(&huart1, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
 80012b4:	4812      	ldr	r0, [pc, #72]	@ (8001300 <ESP_AT_Get_Token+0x100>)
 80012b6:	f7fe ff95 	bl	80001e4 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	490f      	ldr	r1, [pc, #60]	@ (8001300 <ESP_AT_Get_Token+0x100>)
 80012c4:	480f      	ldr	r0, [pc, #60]	@ (8001304 <ESP_AT_Get_Token+0x104>)
 80012c6:	f006 fbb1 	bl	8007a2c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	2202      	movs	r2, #2
 80012d0:	490d      	ldr	r1, [pc, #52]	@ (8001308 <ESP_AT_Get_Token+0x108>)
 80012d2:	480c      	ldr	r0, [pc, #48]	@ (8001304 <ESP_AT_Get_Token+0x104>)
 80012d4:	f006 fbaa 	bl	8007a2c <HAL_UART_Transmit>
 80012d8:	e006      	b.n	80012e8 <ESP_AT_Get_Token+0xe8>
    } 
    else 
    {
        // 토큰 추출 실패 시 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)"Token extraction failed\r\n", 25, HAL_MAX_DELAY);
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2219      	movs	r2, #25
 80012e0:	490a      	ldr	r1, [pc, #40]	@ (800130c <ESP_AT_Get_Token+0x10c>)
 80012e2:	4808      	ldr	r0, [pc, #32]	@ (8001304 <ESP_AT_Get_Token+0x104>)
 80012e4:	f006 fba2 	bl	8007a2c <HAL_UART_Transmit>
    }

    // 토큰 저장
    // SERVER_API_Set_Token(token); // 서버 API 토큰 저장 함수 호출

    return token; // 토큰 반환
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <ESP_AT_Get_Token+0x100>)
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	0800d3a0 	.word	0x0800d3a0
 80012f8:	0800d3d8 	.word	0x0800d3d8
 80012fc:	0800d440 	.word	0x0800d440
 8001300:	200004c4 	.word	0x200004c4
 8001304:	20000704 	.word	0x20000704
 8001308:	0800d44c 	.word	0x0800d44c
 800130c:	0800d450 	.word	0x0800d450

08001310 <ESP_AT_Get_MAC_Address>:



// ESP32 기기 고유값 반환
const char* ESP_AT_Get_MAC_Address(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
    // AT+CIPSTAMAC? 명령어 전송
    const char *cmd = "AT+CIPSTAMAC?\r\n";
 8001316:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <ESP_AT_Get_MAC_Address+0xf0>)
 8001318:	617b      	str	r3, [r7, #20]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff fe84 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 8001320:	6138      	str	r0, [r7, #16]

    // 응답에서 MAC 주소 추출
    // "40:4c:ca:50:2c:04" 형식에서 :을 제외한 영문대문자숫자 12개로 구성된 MAC 주소를 추출
    // 예: +CIPSTAMAC:"40:4c:ca:50:2c:04" -> 404CCA502C04
    const char *macStart = strstr(response, "CIPSTAMAC:\""); // CIPSTAMAC:" 문자열 찾기
 8001322:	4938      	ldr	r1, [pc, #224]	@ (8001404 <ESP_AT_Get_MAC_Address+0xf4>)
 8001324:	6938      	ldr	r0, [r7, #16]
 8001326:	f00a ff27 	bl	800c178 <strstr>
 800132a:	60f8      	str	r0, [r7, #12]
    static char macAddress[18] = {0}; // MAC 주소를 저장할 버퍼 (17자 + NULL)

    // 응답에서 MAC 주소 추출, 콜론을 제외한 문자만 추출
    if (macStart != NULL) 
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d041      	beq.n	80013b6 <ESP_AT_Get_MAC_Address+0xa6>
    {
        macStart += strlen("CIPSTAMAC:\""); // 처음 따옴표 다음 위치로 이동
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	330b      	adds	r3, #11
 8001336:	60fb      	str	r3, [r7, #12]
        const char *macEnd = strchr(macStart, '\"'); // 두번째 따옴표 찾기
 8001338:	2122      	movs	r1, #34	@ 0x22
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f00a fefc 	bl	800c138 <strchr>
 8001340:	60b8      	str	r0, [r7, #8]
        if (macEnd != NULL) 
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d036      	beq.n	80013b6 <ESP_AT_Get_MAC_Address+0xa6>
        {
            size_t macLength = macEnd - macStart; // MAC 주소 길이 계산
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	607b      	str	r3, [r7, #4]
            
            if (macLength < 18) // MAC 주소는 17자 + NULL, 콜른을 제외한 길이 12자 + NULL
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b11      	cmp	r3, #17
 8001354:	d82f      	bhi.n	80013b6 <ESP_AT_Get_MAC_Address+0xa6>
            {
                // 콜론을 제외한 문자만 추출
                size_t j = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
                for (size_t i = 0; i < macLength; i++) 
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	e021      	b.n	80013a4 <ESP_AT_Get_MAC_Address+0x94>
                {
                    if (macStart[i] != ':') 
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b3a      	cmp	r3, #58	@ 0x3a
 800136a:	d018      	beq.n	800139e <ESP_AT_Get_MAC_Address+0x8e>
                    {
                        macAddress[j++] = toupper(macStart[i]); // 대문자로 변환하여 저장
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	70fb      	strb	r3, [r7, #3]
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	3301      	adds	r3, #1
 800137a:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <ESP_AT_Get_MAC_Address+0xf8>)
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d103      	bne.n	8001390 <ESP_AT_Get_MAC_Address+0x80>
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	f1a3 0220 	sub.w	r2, r3, #32
 800138e:	e000      	b.n	8001392 <ESP_AT_Get_MAC_Address+0x82>
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	1c59      	adds	r1, r3, #1
 8001396:	61f9      	str	r1, [r7, #28]
 8001398:	b2d1      	uxtb	r1, r2
 800139a:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <ESP_AT_Get_MAC_Address+0xfc>)
 800139c:	54d1      	strb	r1, [r2, r3]
                for (size_t i = 0; i < macLength; i++) 
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3d9      	bcc.n	8001360 <ESP_AT_Get_MAC_Address+0x50>
                    }
                }
                macAddress[j] = '\0'; // 문자열 종료
 80013ac:	4a17      	ldr	r2, [pc, #92]	@ (800140c <ESP_AT_Get_MAC_Address+0xfc>)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#endif
    // PC(UART1)로 MAC 주소 전송
    HAL_UART_Transmit(&huart1, (uint8_t*)macAddress, strlen(macAddress), HAL_MAX_DELAY);
 80013b6:	4815      	ldr	r0, [pc, #84]	@ (800140c <ESP_AT_Get_MAC_Address+0xfc>)
 80013b8:	f7fe ff14 	bl	80001e4 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	4911      	ldr	r1, [pc, #68]	@ (800140c <ESP_AT_Get_MAC_Address+0xfc>)
 80013c6:	4812      	ldr	r0, [pc, #72]	@ (8001410 <ESP_AT_Get_MAC_Address+0x100>)
 80013c8:	f006 fb30 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	2202      	movs	r2, #2
 80013d2:	4910      	ldr	r1, [pc, #64]	@ (8001414 <ESP_AT_Get_MAC_Address+0x104>)
 80013d4:	480e      	ldr	r0, [pc, #56]	@ (8001410 <ESP_AT_Get_MAC_Address+0x100>)
 80013d6:	f006 fb29 	bl	8007a2c <HAL_UART_Transmit>

    // 반환할 주소가 없다면
    if (macAddress[0] == '\0') 
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <ESP_AT_Get_MAC_Address+0xfc>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <ESP_AT_Get_MAC_Address+0xe4>
    {
        // MAC 주소 추출 실패 시 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)"MAC address extraction failed\r\n", 31, HAL_MAX_DELAY);
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	221f      	movs	r2, #31
 80013e8:	490b      	ldr	r1, [pc, #44]	@ (8001418 <ESP_AT_Get_MAC_Address+0x108>)
 80013ea:	4809      	ldr	r0, [pc, #36]	@ (8001410 <ESP_AT_Get_MAC_Address+0x100>)
 80013ec:	f006 fb1e 	bl	8007a2c <HAL_UART_Transmit>
        return NULL; // 실패 시 NULL 반환
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <ESP_AT_Get_MAC_Address+0xe6>
    }

    return macAddress; // MAC 주소 반환
 80013f4:	4b05      	ldr	r3, [pc, #20]	@ (800140c <ESP_AT_Get_MAC_Address+0xfc>)
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	0800d46c 	.word	0x0800d46c
 8001404:	0800d47c 	.word	0x0800d47c
 8001408:	0800e590 	.word	0x0800e590
 800140c:	20000544 	.word	0x20000544
 8001410:	20000704 	.word	0x20000704
 8001414:	0800d44c 	.word	0x0800d44c
 8001418:	0800d488 	.word	0x0800d488

0800141c <ESP_AT_Set_SNTP_Time>:


// 파라미터로 UTC 매크로를 받아서 시간은 설정하는 함수
int ESP_AT_Set_SNTP_Time(int utcOffset)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0a8      	sub	sp, #160	@ 0xa0
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    int result = 0; // 결과 변수 초기화
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    PAT_UTC_Time pAtUtcTime = AT_Get_UTC_Time(); // UTC 시간 구조체 포인터
 800142a:	f7ff fc41 	bl	8000cb0 <AT_Get_UTC_Time>
 800142e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    char cmd[128];
    
    // SNTP 서버 연결
    // 한국 NTP 서버 설정
    // ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG=1,900,\"pool.ntp.org\",\"time.google.com\"\r\n"); // NTP 서버 설정
    int len = snprintf(cmd, sizeof(cmd), "AT+CIPSNTPCFG=1,%d,\"pool.ntp.org\",\"time.google.com\"\r\n", utcOffset);
 8001432:	f107 000c 	add.w	r0, r7, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4ab3      	ldr	r2, [pc, #716]	@ (8001708 <ESP_AT_Set_SNTP_Time+0x2ec>)
 800143a:	2180      	movs	r1, #128	@ 0x80
 800143c:	f00a fe04 	bl	800c048 <sniprintf>
 8001440:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    if (len < 0 || len >= (int)sizeof(cmd)) 
 8001444:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001448:	2b00      	cmp	r3, #0
 800144a:	db03      	blt.n	8001454 <ESP_AT_Set_SNTP_Time+0x38>
 800144c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001450:	2b7f      	cmp	r3, #127	@ 0x7f
 8001452:	dd04      	ble.n	800145e <ESP_AT_Set_SNTP_Time+0x42>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8001454:	f000 ffe0 	bl	8002418 <Error_Handler>
        result = AT_ERROR; // 실패 코드
 8001458:	2301      	movs	r3, #1
 800145a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }

    ESP_AT_Send_Command_Sync(cmd);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcf6 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    // 설정 확인
    ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG?\r\n");
 8001468:	48a8      	ldr	r0, [pc, #672]	@ (800170c <ESP_AT_Set_SNTP_Time+0x2f0>)
 800146a:	f7ff fcf3 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    // 시간 확인
    const char *response = ESP_AT_Send_Command_Sync_Get_Result("AT+CIPSNTPTIME?\r\n");
 800146e:	48a8      	ldr	r0, [pc, #672]	@ (8001710 <ESP_AT_Set_SNTP_Time+0x2f4>)
 8001470:	f7ff fdda 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 8001474:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // 예: +CIPSNTPTIME:Tue Jun 24 14:59:31 2025 형식으로 응답

    // ──────────────────────────────────────────────────────────────────────────────

    pAtUtcTime = AT_Get_UTC_Time();
 8001478:	f7ff fc1a 	bl	8000cb0 <AT_Get_UTC_Time>
 800147c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    // ──────────────────────────────────────────────────────────────────────────────
    
    // 응답에서 요일 추출
    const char *timeStart = strstr(response, "CIPSNTPTIME:"); // CIPSTAMAC:" 문자열 찾기
 8001480:	49a4      	ldr	r1, [pc, #656]	@ (8001714 <ESP_AT_Set_SNTP_Time+0x2f8>)
 8001482:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001486:	f00a fe77 	bl	800c178 <strstr>
 800148a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    
    static char dayOfWeek[4] = {0}; // 요일을 저장할 버퍼 (3자 + NULL)

    // 응답에서 요일 추출
    if (timeStart != NULL) 
 800148e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00d      	beq.n	80014b2 <ESP_AT_Set_SNTP_Time+0x96>
    {
        timeStart += strlen("CIPSNTPTIME:");
 8001496:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800149a:	330c      	adds	r3, #12
 800149c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        strncpy(dayOfWeek, timeStart, 3);
 80014a0:	2203      	movs	r2, #3
 80014a2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80014a6:	489c      	ldr	r0, [pc, #624]	@ (8001718 <ESP_AT_Set_SNTP_Time+0x2fc>)
 80014a8:	f00a fe53 	bl	800c152 <strncpy>
        dayOfWeek[3] = '\0'; // 문자열 종료
 80014ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001718 <ESP_AT_Set_SNTP_Time+0x2fc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	70da      	strb	r2, [r3, #3]
    }

    // 요일 RTC숫자로 변환하여 구조체에 저장
    pAtUtcTime->sDayOfWeek = Month_String_To_Number(dayOfWeek); // 구조체에 요일 RTC숫자 저장
 80014b2:	4899      	ldr	r0, [pc, #612]	@ (8001718 <ESP_AT_Set_SNTP_Time+0x2fc>)
 80014b4:	f001 fcb0 	bl	8002e18 <Month_String_To_Number>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80014be:	60da      	str	r2, [r3, #12]

    HAL_UART_Transmit(&huart1, (uint8_t*)dayOfWeek, strlen(dayOfWeek), HAL_MAX_DELAY);
 80014c0:	4895      	ldr	r0, [pc, #596]	@ (8001718 <ESP_AT_Set_SNTP_Time+0x2fc>)
 80014c2:	f7fe fe8f 	bl	80001e4 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	4992      	ldr	r1, [pc, #584]	@ (8001718 <ESP_AT_Set_SNTP_Time+0x2fc>)
 80014d0:	4892      	ldr	r0, [pc, #584]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 80014d2:	f006 faab 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	2202      	movs	r2, #2
 80014dc:	4990      	ldr	r1, [pc, #576]	@ (8001720 <ESP_AT_Set_SNTP_Time+0x304>)
 80014de:	488f      	ldr	r0, [pc, #572]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 80014e0:	f006 faa4 	bl	8007a2c <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char month[4] = {0}; // 월을 저장할 버퍼 (3자 + NULL)

    // 응답에서 월 추출
    if (timeStart != NULL) 
 80014e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00d      	beq.n	8001508 <ESP_AT_Set_SNTP_Time+0xec>
    {
        timeStart += 4; // 요일 다음 공백 문자로 이동
 80014ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014f0:	3304      	adds	r3, #4
 80014f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 월 이름을 3글자 추출
        strncpy(month, timeStart, 3);
 80014f6:	2203      	movs	r2, #3
 80014f8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80014fc:	4889      	ldr	r0, [pc, #548]	@ (8001724 <ESP_AT_Set_SNTP_Time+0x308>)
 80014fe:	f00a fe28 	bl	800c152 <strncpy>
        month[3] = '\0'; // 문자열 종료
 8001502:	4b88      	ldr	r3, [pc, #544]	@ (8001724 <ESP_AT_Set_SNTP_Time+0x308>)
 8001504:	2200      	movs	r2, #0
 8001506:	70da      	strb	r2, [r3, #3]
    }

    // 월 이름을 RTC숫자로 변환하여 구조체에 저장
    pAtUtcTime->sMonth = Month_String_To_Number(month); // 구조체에 월 RTC숫자 저장
 8001508:	4886      	ldr	r0, [pc, #536]	@ (8001724 <ESP_AT_Set_SNTP_Time+0x308>)
 800150a:	f001 fc85 	bl	8002e18 <Month_String_To_Number>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001514:	605a      	str	r2, [r3, #4]
    
    HAL_UART_Transmit(&huart1, (uint8_t*)month, strlen(month), HAL_MAX_DELAY);
 8001516:	4883      	ldr	r0, [pc, #524]	@ (8001724 <ESP_AT_Set_SNTP_Time+0x308>)
 8001518:	f7fe fe64 	bl	80001e4 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	497f      	ldr	r1, [pc, #508]	@ (8001724 <ESP_AT_Set_SNTP_Time+0x308>)
 8001526:	487d      	ldr	r0, [pc, #500]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 8001528:	f006 fa80 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	2202      	movs	r2, #2
 8001532:	497b      	ldr	r1, [pc, #492]	@ (8001720 <ESP_AT_Set_SNTP_Time+0x304>)
 8001534:	4879      	ldr	r0, [pc, #484]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 8001536:	f006 fa79 	bl	8007a2c <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────
    
    static char day[3] = {0}; // 일을 저장할 버퍼 (2자 + NULL)

    // 응답에서 일 추출
    if (timeStart != NULL) 
 800153a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00d      	beq.n	800155e <ESP_AT_Set_SNTP_Time+0x142>
    {
        timeStart += 4; // 월 다음 공백 문자로 이동
 8001542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001546:	3304      	adds	r3, #4
 8001548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 일 숫자를 2글자 추출
        strncpy(day, timeStart, 2);
 800154c:	2202      	movs	r2, #2
 800154e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001552:	4875      	ldr	r0, [pc, #468]	@ (8001728 <ESP_AT_Set_SNTP_Time+0x30c>)
 8001554:	f00a fdfd 	bl	800c152 <strncpy>
        day[2] = '\0'; // 문자열 종료
 8001558:	4b73      	ldr	r3, [pc, #460]	@ (8001728 <ESP_AT_Set_SNTP_Time+0x30c>)
 800155a:	2200      	movs	r2, #0
 800155c:	709a      	strb	r2, [r3, #2]
    }
    
    pAtUtcTime->sDay = atoi(day); // 문자열을 정수로 변환하여 구조체에 저장
 800155e:	4872      	ldr	r0, [pc, #456]	@ (8001728 <ESP_AT_Set_SNTP_Time+0x30c>)
 8001560:	f00a fce7 	bl	800bf32 <atoi>
 8001564:	4602      	mov	r2, r0
 8001566:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800156a:	609a      	str	r2, [r3, #8]

    HAL_UART_Transmit(&huart1, (uint8_t*)day, strlen(day), HAL_MAX_DELAY);
 800156c:	486e      	ldr	r0, [pc, #440]	@ (8001728 <ESP_AT_Set_SNTP_Time+0x30c>)
 800156e:	f7fe fe39 	bl	80001e4 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	496b      	ldr	r1, [pc, #428]	@ (8001728 <ESP_AT_Set_SNTP_Time+0x30c>)
 800157c:	4867      	ldr	r0, [pc, #412]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 800157e:	f006 fa55 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	2202      	movs	r2, #2
 8001588:	4965      	ldr	r1, [pc, #404]	@ (8001720 <ESP_AT_Set_SNTP_Time+0x304>)
 800158a:	4864      	ldr	r0, [pc, #400]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 800158c:	f006 fa4e 	bl	8007a2c <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char time[3] = {0}; // 시를 저장할 버퍼 (2자 + NULL)

    // 응답에서 시 추출
    if (timeStart != NULL) 
 8001590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00d      	beq.n	80015b4 <ESP_AT_Set_SNTP_Time+0x198>
    {
        timeStart += 3; // 일 다음 콜론 문자로 이동
 8001598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800159c:	3303      	adds	r3, #3
 800159e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 시 숫자를 2글자 추출
        strncpy(time, timeStart, 2);
 80015a2:	2202      	movs	r2, #2
 80015a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80015a8:	4860      	ldr	r0, [pc, #384]	@ (800172c <ESP_AT_Set_SNTP_Time+0x310>)
 80015aa:	f00a fdd2 	bl	800c152 <strncpy>
        time[2] = '\0'; // 문자열 종료
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <ESP_AT_Set_SNTP_Time+0x310>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sHour = atoi(time); // 문자열을 정수로 변환하여 구조체에 저장
 80015b4:	485d      	ldr	r0, [pc, #372]	@ (800172c <ESP_AT_Set_SNTP_Time+0x310>)
 80015b6:	f00a fcbc 	bl	800bf32 <atoi>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015c0:	611a      	str	r2, [r3, #16]

    HAL_UART_Transmit(&huart1, (uint8_t*)time, strlen(time), HAL_MAX_DELAY);
 80015c2:	485a      	ldr	r0, [pc, #360]	@ (800172c <ESP_AT_Set_SNTP_Time+0x310>)
 80015c4:	f7fe fe0e 	bl	80001e4 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	4956      	ldr	r1, [pc, #344]	@ (800172c <ESP_AT_Set_SNTP_Time+0x310>)
 80015d2:	4852      	ldr	r0, [pc, #328]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 80015d4:	f006 fa2a 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	2202      	movs	r2, #2
 80015de:	4950      	ldr	r1, [pc, #320]	@ (8001720 <ESP_AT_Set_SNTP_Time+0x304>)
 80015e0:	484e      	ldr	r0, [pc, #312]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 80015e2:	f006 fa23 	bl	8007a2c <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char minute[3] = {0}; // 분을 저장할 버퍼 (2자 + NULL)

    // 응답에서 분 추출
    if (timeStart != NULL) 
 80015e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00d      	beq.n	800160a <ESP_AT_Set_SNTP_Time+0x1ee>
    {
        timeStart += 3; // 시 다음 콜론 문자로 이동
 80015ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015f2:	3303      	adds	r3, #3
 80015f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 분 숫자를 2글자 추출
        strncpy(minute, timeStart, 2);
 80015f8:	2202      	movs	r2, #2
 80015fa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80015fe:	484c      	ldr	r0, [pc, #304]	@ (8001730 <ESP_AT_Set_SNTP_Time+0x314>)
 8001600:	f00a fda7 	bl	800c152 <strncpy>
        minute[2] = '\0'; // 문자열 종료
 8001604:	4b4a      	ldr	r3, [pc, #296]	@ (8001730 <ESP_AT_Set_SNTP_Time+0x314>)
 8001606:	2200      	movs	r2, #0
 8001608:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sMinute = atoi(minute); // 문자열을 정수로 변환하여 구조체에 저장
 800160a:	4849      	ldr	r0, [pc, #292]	@ (8001730 <ESP_AT_Set_SNTP_Time+0x314>)
 800160c:	f00a fc91 	bl	800bf32 <atoi>
 8001610:	4602      	mov	r2, r0
 8001612:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001616:	615a      	str	r2, [r3, #20]

    HAL_UART_Transmit(&huart1, (uint8_t*)minute, strlen(minute), HAL_MAX_DELAY);
 8001618:	4845      	ldr	r0, [pc, #276]	@ (8001730 <ESP_AT_Set_SNTP_Time+0x314>)
 800161a:	f7fe fde3 	bl	80001e4 <strlen>
 800161e:	4603      	mov	r3, r0
 8001620:	b29a      	uxth	r2, r3
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	4942      	ldr	r1, [pc, #264]	@ (8001730 <ESP_AT_Set_SNTP_Time+0x314>)
 8001628:	483c      	ldr	r0, [pc, #240]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 800162a:	f006 f9ff 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	2202      	movs	r2, #2
 8001634:	493a      	ldr	r1, [pc, #232]	@ (8001720 <ESP_AT_Set_SNTP_Time+0x304>)
 8001636:	4839      	ldr	r0, [pc, #228]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 8001638:	f006 f9f8 	bl	8007a2c <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char second[3] = {0}; // 초를 저장할 버퍼 (2자 + NULL)

    // 응답에서 초 추출
    if (timeStart != NULL) 
 800163c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00d      	beq.n	8001660 <ESP_AT_Set_SNTP_Time+0x244>
    {
        timeStart += 3; // 분 다음 콜론 문자로 이동
 8001644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001648:	3303      	adds	r3, #3
 800164a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 초 숫자를 2글자 추출
        strncpy(second, timeStart, 2);
 800164e:	2202      	movs	r2, #2
 8001650:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001654:	4837      	ldr	r0, [pc, #220]	@ (8001734 <ESP_AT_Set_SNTP_Time+0x318>)
 8001656:	f00a fd7c 	bl	800c152 <strncpy>
        second[2] = '\0'; // 문자열 종료
 800165a:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <ESP_AT_Set_SNTP_Time+0x318>)
 800165c:	2200      	movs	r2, #0
 800165e:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sSecond = atoi(second); // 문자열을 정수로 변환하여 구조체에 저장
 8001660:	4834      	ldr	r0, [pc, #208]	@ (8001734 <ESP_AT_Set_SNTP_Time+0x318>)
 8001662:	f00a fc66 	bl	800bf32 <atoi>
 8001666:	4602      	mov	r2, r0
 8001668:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800166c:	619a      	str	r2, [r3, #24]

    HAL_UART_Transmit(&huart1, (uint8_t*)second, strlen(second), HAL_MAX_DELAY);
 800166e:	4831      	ldr	r0, [pc, #196]	@ (8001734 <ESP_AT_Set_SNTP_Time+0x318>)
 8001670:	f7fe fdb8 	bl	80001e4 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	492d      	ldr	r1, [pc, #180]	@ (8001734 <ESP_AT_Set_SNTP_Time+0x318>)
 800167e:	4827      	ldr	r0, [pc, #156]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 8001680:	f006 f9d4 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	2202      	movs	r2, #2
 800168a:	4925      	ldr	r1, [pc, #148]	@ (8001720 <ESP_AT_Set_SNTP_Time+0x304>)
 800168c:	4823      	ldr	r0, [pc, #140]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 800168e:	f006 f9cd 	bl	8007a2c <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char year[5] = {0}; // 년도를 저장할 버퍼 (4자 + NULL)

    // 응답에서 년도 추출
    if (timeStart != NULL) 
 8001692:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <ESP_AT_Set_SNTP_Time+0x29a>
    {
        timeStart += 3; // 초 다음 공백 문자로 이동
 800169a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800169e:	3303      	adds	r3, #3
 80016a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 년도 숫자를 4글자 추출
        strncpy(year, timeStart, 4);
 80016a4:	2204      	movs	r2, #4
 80016a6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80016aa:	4823      	ldr	r0, [pc, #140]	@ (8001738 <ESP_AT_Set_SNTP_Time+0x31c>)
 80016ac:	f00a fd51 	bl	800c152 <strncpy>
        year[4] = '\0'; // 문자열 종료
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <ESP_AT_Set_SNTP_Time+0x31c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	711a      	strb	r2, [r3, #4]
    }

    pAtUtcTime->sYear = atoi(year); // 문자열을 정수로 변환하여 구조체에 저장
 80016b6:	4820      	ldr	r0, [pc, #128]	@ (8001738 <ESP_AT_Set_SNTP_Time+0x31c>)
 80016b8:	f00a fc3b 	bl	800bf32 <atoi>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016c2:	601a      	str	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, (uint8_t*)year, strlen(year), HAL_MAX_DELAY);
 80016c4:	481c      	ldr	r0, [pc, #112]	@ (8001738 <ESP_AT_Set_SNTP_Time+0x31c>)
 80016c6:	f7fe fd8d 	bl	80001e4 <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	4919      	ldr	r1, [pc, #100]	@ (8001738 <ESP_AT_Set_SNTP_Time+0x31c>)
 80016d4:	4811      	ldr	r0, [pc, #68]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 80016d6:	f006 f9a9 	bl	8007a2c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	2202      	movs	r2, #2
 80016e0:	490f      	ldr	r1, [pc, #60]	@ (8001720 <ESP_AT_Set_SNTP_Time+0x304>)
 80016e2:	480e      	ldr	r0, [pc, #56]	@ (800171c <ESP_AT_Set_SNTP_Time+0x300>)
 80016e4:	f006 f9a2 	bl	8007a2c <HAL_UART_Transmit>

    // ──────────────────────────────────────────────────────────────────────────────

    if (result == AT_ERROR) // 에러 발생 시
 80016e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <ESP_AT_Set_SNTP_Time+0x2d8>
    {
        return AT_ERROR; // 실패 코드 반환
 80016f0:	2301      	movs	r3, #1
 80016f2:	e004      	b.n	80016fe <ESP_AT_Set_SNTP_Time+0x2e2>
    }
    
    result = AT_OK; // 성공 코드
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    return result; // 결과 반환
 80016fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 80016fe:	4618      	mov	r0, r3
 8001700:	37a0      	adds	r7, #160	@ 0xa0
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	0800d4a8 	.word	0x0800d4a8
 800170c:	0800d4e0 	.word	0x0800d4e0
 8001710:	0800d4f4 	.word	0x0800d4f4
 8001714:	0800d508 	.word	0x0800d508
 8001718:	20000558 	.word	0x20000558
 800171c:	20000704 	.word	0x20000704
 8001720:	0800d44c 	.word	0x0800d44c
 8001724:	2000055c 	.word	0x2000055c
 8001728:	20000560 	.word	0x20000560
 800172c:	20000564 	.word	0x20000564
 8001730:	20000568 	.word	0x20000568
 8001734:	2000056c 	.word	0x2000056c
 8001738:	20000570 	.word	0x20000570

0800173c <Handle_IPD_and_Respond>:
//     "<p>Hello from STM32!</p>"
//     "</body></html>";

// IPD URC를 처리하고 응답을 생성 테스트
void Handle_IPD_and_Respond(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 8001742:	af02      	add	r7, sp, #8
    uint32_t start;
    uint16_t linkID, dataLen;

    while (1)
    {
        int  hdrPos = 0, payPos = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

        // — 1) '+IPD' 헤더 수집 (‘:’ 포함)
        do
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001750:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001754:	23c8      	movs	r3, #200	@ 0xc8
 8001756:	2201      	movs	r2, #1
 8001758:	48c3      	ldr	r0, [pc, #780]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 800175a:	f006 f9f2 	bl	8007b42 <HAL_UART_Receive>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
            {
                continue;
            }
        } while (ch != '+');
 8001762:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001766:	2b2b      	cmp	r3, #43	@ 0x2b
 8001768:	d1f2      	bne.n	8001750 <Handle_IPD_and_Respond+0x14>
        ipdHdr[hdrPos++] = '+';
 800176a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001774:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8001778:	443b      	add	r3, r7
 800177a:	222b      	movs	r2, #43	@ 0x2b
 800177c:	f803 2c78 	strb.w	r2, [r3, #-120]

        while (hdrPos < IPD_HDR_MAX-1)
 8001780:	e01b      	b.n	80017ba <Handle_IPD_and_Respond+0x7e>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001782:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001786:	23c8      	movs	r3, #200	@ 0xc8
 8001788:	2201      	movs	r2, #1
 800178a:	48b7      	ldr	r0, [pc, #732]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 800178c:	f006 f9d9 	bl	8007b42 <HAL_UART_Receive>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <Handle_IPD_and_Respond+0x5e>
            {
                Error_Handler();
 8001796:	f000 fe3f 	bl	8002418 <Error_Handler>
            }
            ipdHdr[hdrPos++] = ch;
 800179a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 80017a4:	f897 239b 	ldrb.w	r2, [r7, #923]	@ 0x39b
 80017a8:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 80017ac:	443b      	add	r3, r7
 80017ae:	f803 2c78 	strb.w	r2, [r3, #-120]
            if (ch == ':')
 80017b2:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 80017b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80017b8:	d004      	beq.n	80017c4 <Handle_IPD_and_Respond+0x88>
        while (hdrPos < IPD_HDR_MAX-1)
 80017ba:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80017be:	2b3e      	cmp	r3, #62	@ 0x3e
 80017c0:	dddf      	ble.n	8001782 <Handle_IPD_and_Respond+0x46>
 80017c2:	e000      	b.n	80017c6 <Handle_IPD_and_Respond+0x8a>
            {
                break;
 80017c4:	bf00      	nop
            }
        }
        ipdHdr[hdrPos] = '\0';
 80017c6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80017ca:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80017ce:	4413      	add	r3, r2
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]

        // — 2) linkID, dataLen 파싱
        if (sscanf(ipdHdr, "+IPD,%hu,%hu:", &linkID, &dataLen) != 2)
 80017d4:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80017d8:	f507 72ab 	add.w	r2, r7, #342	@ 0x156
 80017dc:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 80017e0:	49a2      	ldr	r1, [pc, #648]	@ (8001a6c <Handle_IPD_and_Respond+0x330>)
 80017e2:	f00a fc65 	bl	800c0b0 <siscanf>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f040 81a5 	bne.w	8001b38 <Handle_IPD_and_Respond+0x3fc>
        //     }
        //     payload[payPos++] = ch;
        // }
        // payload[payPos] = '\0';

        for (uint16_t i = 0; i < dataLen; ++i)
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8a7 33c6 	strh.w	r3, [r7, #966]	@ 0x3c6
 80017f4:	e021      	b.n	800183a <Handle_IPD_and_Respond+0xfe>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 80017f6:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 80017fa:	23c8      	movs	r3, #200	@ 0xc8
 80017fc:	2201      	movs	r2, #1
 80017fe:	489a      	ldr	r0, [pc, #616]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 8001800:	f006 f99f 	bl	8007b42 <HAL_UART_Receive>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <Handle_IPD_and_Respond+0xd2>
            {
                Error_Handler();
 800180a:	f000 fe05 	bl	8002418 <Error_Handler>
            }
            // 가득 차지 않았다면 버퍼에 저장
            if (payPos < PAYLOAD_MAX-1)
 800180e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001812:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001816:	dc0b      	bgt.n	8001830 <Handle_IPD_and_Respond+0xf4>
            {
                payload[payPos++] = ch;
 8001818:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 8001822:	f897 139b 	ldrb.w	r1, [r7, #923]	@ 0x39b
 8001826:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 800182a:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800182e:	54d1      	strb	r1, [r2, r3]
        for (uint16_t i = 0; i < dataLen; ++i)
 8001830:	f8b7 33c6 	ldrh.w	r3, [r7, #966]	@ 0x3c6
 8001834:	3301      	adds	r3, #1
 8001836:	f8a7 33c6 	strh.w	r3, [r7, #966]	@ 0x3c6
 800183a:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800183e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f8b7 23c6 	ldrh.w	r2, [r7, #966]	@ 0x3c6
 8001848:	429a      	cmp	r2, r3
 800184a:	d3d4      	bcc.n	80017f6 <Handle_IPD_and_Respond+0xba>
            }
        }
        // payload는 CR/LF 포함
        payload[payPos] = '\0';
 800184c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001850:	f5a3 721e 	sub.w	r2, r3, #632	@ 0x278
 8001854:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001858:	4413      	add	r3, r2
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]

        // — 4) GET 라인 파싱
        //    예: "GET /path HTTP/1.1"
        char method[8], url[128];
        int isIcon = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
        int isCss = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
        if (sscanf(payload, "%7s %127s", method, url) == 2)
 800186a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800186e:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 8001872:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8001876:	497e      	ldr	r1, [pc, #504]	@ (8001a70 <Handle_IPD_and_Respond+0x334>)
 8001878:	f00a fc1a 	bl	800c0b0 <siscanf>
 800187c:	4603      	mov	r3, r0
 800187e:	2b02      	cmp	r3, #2
 8001880:	d125      	bne.n	80018ce <Handle_IPD_and_Respond+0x192>
        {
            if (strcmp(url, "/style.css") == 0)
 8001882:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001886:	497b      	ldr	r1, [pc, #492]	@ (8001a74 <Handle_IPD_and_Respond+0x338>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fca1 	bl	80001d0 <strcmp>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <Handle_IPD_and_Respond+0x160>
            {
                isCss = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800189a:	e018      	b.n	80018ce <Handle_IPD_and_Respond+0x192>
            }
            else if (strcmp(url, "/favicon.ico")==0)
 800189c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018a0:	4975      	ldr	r1, [pc, #468]	@ (8001a78 <Handle_IPD_and_Respond+0x33c>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fc94 	bl	80001d0 <strcmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <Handle_IPD_and_Respond+0x17a>
            {
                isIcon = 1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 80018b4:	e00b      	b.n	80018ce <Handle_IPD_and_Respond+0x192>
            }
            else if (strcmp(url, "/apple-touch-icon-precomposed.png") == 0)
 80018b6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018ba:	4970      	ldr	r1, [pc, #448]	@ (8001a7c <Handle_IPD_and_Respond+0x340>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fc87 	bl	80001d0 <strcmp>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <Handle_IPD_and_Respond+0x192>
            {
                isIcon = 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
        }

        // — 5) 응답 헤더/바디 준비
        char  respHdr[128];
        int   hdrLen, bodyLen;
        if (isCss)
 80018ce:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d018      	beq.n	8001908 <Handle_IPD_and_Respond+0x1cc>
        {
            // 200 OK + CSS
            bodyLen = cssStyleLen; // cssBodyLen은 미리 정의된 CSS 바디 길이
 80018d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <Handle_IPD_and_Respond+0x344>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
            //   "Content-Type: text/css\r\n"
            //   "Content-Length: %d\r\n"
            //   "Connection: close\r\n"
            //   "\r\n",
            //   bodyLen);
            hdrLen  = snprintf(respHdr, sizeof(respHdr),
 80018de:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80018e2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80018e6:	4a67      	ldr	r2, [pc, #412]	@ (8001a84 <Handle_IPD_and_Respond+0x348>)
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	f00a fbad 	bl	800c048 <sniprintf>
 80018ee:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
              "Content-Type: text/css\r\n"
              "Content-Length: %d\r\n"
              "Connection: keep-alive\r\n"
              "\r\n",
              bodyLen); 
            if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
 80018f2:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db03      	blt.n	8001902 <Handle_IPD_and_Respond+0x1c6>
 80018fa:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80018fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001900:	dd35      	ble.n	800196e <Handle_IPD_and_Respond+0x232>
            {
                Error_Handler();
 8001902:	f000 fd89 	bl	8002418 <Error_Handler>
 8001906:	e032      	b.n	800196e <Handle_IPD_and_Respond+0x232>
            }
        }
        else if (isIcon)
 8001908:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d016      	beq.n	800193e <Handle_IPD_and_Respond+0x202>
            // 204 No Content
            // const char *hdr204 =
            //   "HTTP/1.1 204 No Content\r\n"
            //   "Connection: close\r\n"
            //   "\r\n";
            const char *hdr204 =
 8001910:	4b5d      	ldr	r3, [pc, #372]	@ (8001a88 <Handle_IPD_and_Respond+0x34c>)
 8001912:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
              "HTTP/1.1 204 No Content\r\n"
              "Connection: keep-alive\r\n"
              "\r\n";
            hdrLen  = strlen(hdr204);
 8001916:	f8d7 03ac 	ldr.w	r0, [r7, #940]	@ 0x3ac
 800191a:	f7fe fc63 	bl	80001e4 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
            strncpy(respHdr, hdr204, hdrLen);
 8001924:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8001928:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800192c:	f8d7 13ac 	ldr.w	r1, [r7, #940]	@ 0x3ac
 8001930:	4618      	mov	r0, r3
 8001932:	f00a fc0e 	bl	800c152 <strncpy>
            bodyLen = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 800193c:	e017      	b.n	800196e <Handle_IPD_and_Respond+0x232>
        }
        else 
        {
            // 200 OK + HTML
            // bodyLen = sizeof(htmlBody) - 1;
            bodyLen = htmlBody_2Len;
 800193e:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <Handle_IPD_and_Respond+0x350>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
            //   "Content-Type: text/html\r\n"
            //   "Content-Length: %d\r\n"
            //   "Connection: close\r\n"
            //   "\r\n",
            //   bodyLen);
            hdrLen  = snprintf(respHdr, sizeof(respHdr),
 8001946:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 800194a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 800194e:	4a50      	ldr	r2, [pc, #320]	@ (8001a90 <Handle_IPD_and_Respond+0x354>)
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	f00a fb79 	bl	800c048 <sniprintf>
 8001956:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
              "Content-Type: text/html\r\n"
              "Content-Length: %d\r\n"
              "Connection: keep-alive\r\n"
              "\r\n",
              bodyLen);
            if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
 800195a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 800195e:	2b00      	cmp	r3, #0
 8001960:	db03      	blt.n	800196a <Handle_IPD_and_Respond+0x22e>
 8001962:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001966:	2b7f      	cmp	r3, #127	@ 0x7f
 8001968:	dd01      	ble.n	800196e <Handle_IPD_and_Respond+0x232>
            {
                Error_Handler();
 800196a:	f000 fd55 	bl	8002418 <Error_Handler>
            }
        }

        // — 6) AT+CIPSEND=<linkID>,<hdrLen+bodyLen>
        int totalLen = hdrLen + bodyLen;
 800196e:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8001972:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001976:	4413      	add	r3, r2
 8001978:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
        char cmd[64];
        int  cmdLen = snprintf(cmd, sizeof(cmd),
 800197c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001980:	f2a3 237a 	subw	r3, r3, #634	@ 0x27a
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	1d38      	adds	r0, r7, #4
 800198a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	4a40      	ldr	r2, [pc, #256]	@ (8001a94 <Handle_IPD_and_Respond+0x358>)
 8001994:	2140      	movs	r1, #64	@ 0x40
 8001996:	f00a fb57 	bl	800c048 <sniprintf>
 800199a:	f8c7 03a4 	str.w	r0, [r7, #932]	@ 0x3a4
                        "AT+CIPSEND=%hu,%d\r\n",
                        linkID, totalLen);
        if (cmdLen < 0 || cmdLen >= (int)sizeof(cmd))
 800199e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db03      	blt.n	80019ae <Handle_IPD_and_Respond+0x272>
 80019a6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80019aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ac:	dd01      	ble.n	80019b2 <Handle_IPD_and_Respond+0x276>
        {
            Error_Handler();
 80019ae:	f000 fd33 	bl	8002418 <Error_Handler>
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY);
 80019b2:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	1d39      	adds	r1, r7, #4
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	482a      	ldr	r0, [pc, #168]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 80019c0:	f006 f834 	bl	8007a2c <HAL_UART_Transmit>

        // — 7) '>' 프롬프트 대기
        start = HAL_GetTick();
 80019c4:	f002 fad8 	bl	8003f78 <HAL_GetTick>
 80019c8:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
        do
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT)== HAL_OK
 80019cc:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 80019d0:	23c8      	movs	r3, #200	@ 0xc8
 80019d2:	2201      	movs	r2, #1
 80019d4:	4824      	ldr	r0, [pc, #144]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 80019d6:	f006 f8b4 	bl	8007b42 <HAL_UART_Receive>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <Handle_IPD_and_Respond+0x2ac>
                && ch == '>')
 80019e0:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 80019e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80019e6:	d008      	beq.n	80019fa <Handle_IPD_and_Respond+0x2be>
            {
                break;
            }
        } while (HAL_GetTick() - start < RX_TIMEOUT);
 80019e8:	f002 fac6 	bl	8003f78 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80019f6:	d9e9      	bls.n	80019cc <Handle_IPD_and_Respond+0x290>
 80019f8:	e000      	b.n	80019fc <Handle_IPD_and_Respond+0x2c0>
                break;
 80019fa:	bf00      	nop

        // — 8) 헤더 + (icon이면 바디 없음 / 아니면 htmlBody) 전송
        HAL_UART_Transmit(&huart2, (uint8_t*)respHdr, hdrLen, HAL_MAX_DELAY);
 80019fc:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	4817      	ldr	r0, [pc, #92]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 8001a0c:	f006 f80e 	bl	8007a2c <HAL_UART_Transmit>
        if (isCss)
 8001a10:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <Handle_IPD_and_Respond+0x2f0>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)cssStyle, cssStyleLen, HAL_MAX_DELAY);
 8001a18:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <Handle_IPD_and_Respond+0x344>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	491d      	ldr	r1, [pc, #116]	@ (8001a98 <Handle_IPD_and_Respond+0x35c>)
 8001a24:	4810      	ldr	r0, [pc, #64]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 8001a26:	f006 f801 	bl	8007a2c <HAL_UART_Transmit>
 8001a2a:	e00c      	b.n	8001a46 <Handle_IPD_and_Respond+0x30a>
        }
        else if (!isIcon)
 8001a2c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d108      	bne.n	8001a46 <Handle_IPD_and_Respond+0x30a>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)htmlBody_2, htmlBody_2Len, HAL_MAX_DELAY);
 8001a34:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <Handle_IPD_and_Respond+0x350>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	4917      	ldr	r1, [pc, #92]	@ (8001a9c <Handle_IPD_and_Respond+0x360>)
 8001a40:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <Handle_IPD_and_Respond+0x32c>)
 8001a42:	f005 fff3 	bl	8007a2c <HAL_UART_Transmit>
        }

        // — 9) “SEND OK” URC 대기 (최대 SEND_TIMEOUT)
        start = HAL_GetTick();
 8001a46:	f002 fa97 	bl	8003f78 <HAL_GetTick>
 8001a4a:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
        const char sendOk[] = "SEND OK";
 8001a4e:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001a52:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <Handle_IPD_and_Respond+0x364>)
 8001a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a5c:	e883 0003 	stmia.w	r3, {r0, r1}
        int  match = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8001a66:	e040      	b.n	8001aea <Handle_IPD_and_Respond+0x3ae>
 8001a68:	2000074c 	.word	0x2000074c
 8001a6c:	0800d654 	.word	0x0800d654
 8001a70:	0800d664 	.word	0x0800d664
 8001a74:	0800d670 	.word	0x0800d670
 8001a78:	0800d67c 	.word	0x0800d67c
 8001a7c:	0800d68c 	.word	0x0800d68c
 8001a80:	0800e4f8 	.word	0x0800e4f8
 8001a84:	0800d6b0 	.word	0x0800d6b0
 8001a88:	0800d708 	.word	0x0800d708
 8001a8c:	0800e200 	.word	0x0800e200
 8001a90:	0800d73c 	.word	0x0800d73c
 8001a94:	0800d798 	.word	0x0800d798
 8001a98:	0800e204 	.word	0x0800e204
 8001a9c:	0800e108 	.word	0x0800e108
 8001aa0:	0800d7c0 	.word	0x0800d7c0
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT)== HAL_OK)
 8001aa4:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001aa8:	23c8      	movs	r3, #200	@ 0xc8
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4823      	ldr	r0, [pc, #140]	@ (8001b3c <Handle_IPD_and_Respond+0x400>)
 8001aae:	f006 f848 	bl	8007b42 <HAL_UART_Receive>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d118      	bne.n	8001aea <Handle_IPD_and_Respond+0x3ae>
            {
                if (ch == sendOk[match])
 8001ab8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001abc:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8001ac0:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d109      	bne.n	8001ae4 <Handle_IPD_and_Respond+0x3a8>
                {
                    if (++match == (int)strlen(sendOk))
 8001ad0:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8001ada:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d103      	bne.n	8001aea <Handle_IPD_and_Respond+0x3ae>
                    {
                        break;
 8001ae2:	e00b      	b.n	8001afc <Handle_IPD_and_Respond+0x3c0>
                    }
                }
                else
                {
                    match = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8001aea:	f002 fa45 	bl	8003f78 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001afa:	d3d3      	bcc.n	8001aa4 <Handle_IPD_and_Respond+0x368>
                }
            }
        }

        // — 10) 안전 딜레이 후 연결 종료
        HAL_Delay(50);
 8001afc:	2032      	movs	r0, #50	@ 0x32
 8001afe:	f002 fa47 	bl	8003f90 <HAL_Delay>
        // cmdLen = snprintf(cmd, sizeof(cmd),
        //                  "AT+CIPCLOSE=%d\r\n",
        //                  linkID);

        int closeLen = snprintf(cmd, sizeof(cmd),
 8001b02:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001b06:	f2a3 237a 	subw	r3, r3, #634	@ 0x27a
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	1d38      	adds	r0, r7, #4
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <Handle_IPD_and_Respond+0x404>)
 8001b10:	2140      	movs	r1, #64	@ 0x40
 8001b12:	f00a fa99 	bl	800c048 <sniprintf>
 8001b16:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c
                       "AT+CIPCLOSE=%hu\r\n",
                       linkID);
        if (closeLen < 0 || closeLen >= (int)sizeof(cmd))
 8001b1a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db03      	blt.n	8001b2a <Handle_IPD_and_Respond+0x3ee>
 8001b22:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001b26:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b28:	dd01      	ble.n	8001b2e <Handle_IPD_and_Respond+0x3f2>
        {
            Error_Handler();
 8001b2a:	f000 fc75 	bl	8002418 <Error_Handler>
        }

        ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fa79 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 8001b36:	e605      	b.n	8001744 <Handle_IPD_and_Respond+0x8>
            continue;
 8001b38:	bf00      	nop
    {
 8001b3a:	e603      	b.n	8001744 <Handle_IPD_and_Respond+0x8>
 8001b3c:	2000074c 	.word	0x2000074c
 8001b40:	0800d7ac 	.word	0x0800d7ac

08001b44 <LED_Init>:
#include "main.h"


// LED 초기화 함수
void LED_Init(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
    // RCC AHB1 버스에서 GPIOE 클럭 enable (bit4)
    RCC->AHB1ENR |= (1 << 4);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <LED_Init+0xfc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c40 <LED_Init+0xfc>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
    // 잠깐 대기하여 클럭이 안정화되도록
    volatile uint32_t tmp = RCC->AHB1ENR;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <LED_Init+0xfc>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	607b      	str	r3, [r7, #4]

    // ==============================================================

    // PE8 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    RX_LED_GPIO_Port->MODER &= ~(0x3U << (8 * 2));  // 먼저 클리어
 8001b5c:	4b39      	ldr	r3, [pc, #228]	@ (8001c44 <LED_Init+0x100>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a38      	ldr	r2, [pc, #224]	@ (8001c44 <LED_Init+0x100>)
 8001b62:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b66:	6013      	str	r3, [r2, #0]
    RX_LED_GPIO_Port->MODER |=  (0x1U << (8 * 2));  // 0b01: Output
 8001b68:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <LED_Init+0x100>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a35      	ldr	r2, [pc, #212]	@ (8001c44 <LED_Init+0x100>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    RX_LED_GPIO_Port->OTYPER &= ~(1U << 8);
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <LED_Init+0x100>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a32      	ldr	r2, [pc, #200]	@ (8001c44 <LED_Init+0x100>)
 8001b7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b7e:	6053      	str	r3, [r2, #4]
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    RX_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (8 * 2));
 8001b80:	4b30      	ldr	r3, [pc, #192]	@ (8001c44 <LED_Init+0x100>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a2f      	ldr	r2, [pc, #188]	@ (8001c44 <LED_Init+0x100>)
 8001b86:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b8a:	6093      	str	r3, [r2, #8]
    RX_LED_GPIO_Port->OSPEEDR |=  (0x2U << (8 * 2));
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <LED_Init+0x100>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a2c      	ldr	r2, [pc, #176]	@ (8001c44 <LED_Init+0x100>)
 8001b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b96:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    RX_LED_GPIO_Port->PUPDR &= ~(0x3U << (8 * 2));
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <LED_Init+0x100>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a29      	ldr	r2, [pc, #164]	@ (8001c44 <LED_Init+0x100>)
 8001b9e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001ba2:	60d3      	str	r3, [r2, #12]

    // PE9 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    TX_LED_GPIO_Port->MODER &= ~(0x3U << (9 * 2));  // 먼저 클리어
 8001ba4:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <LED_Init+0x100>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <LED_Init+0x100>)
 8001baa:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001bae:	6013      	str	r3, [r2, #0]
    TX_LED_GPIO_Port->MODER |=  (0x1U << (9 * 2));  // 0b01: Output
 8001bb0:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <LED_Init+0x100>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <LED_Init+0x100>)
 8001bb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bba:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    TX_LED_GPIO_Port->OTYPER &= ~(1U << 9);
 8001bbc:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <LED_Init+0x100>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a20      	ldr	r2, [pc, #128]	@ (8001c44 <LED_Init+0x100>)
 8001bc2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001bc6:	6053      	str	r3, [r2, #4]
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    TX_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (9 * 2));
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <LED_Init+0x100>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <LED_Init+0x100>)
 8001bce:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001bd2:	6093      	str	r3, [r2, #8]
    TX_LED_GPIO_Port->OSPEEDR |=  (0x2U << (9 * 2));
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <LED_Init+0x100>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <LED_Init+0x100>)
 8001bda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001bde:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    TX_LED_GPIO_Port->PUPDR &= ~(0x3U << (9 * 2));
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <LED_Init+0x100>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <LED_Init+0x100>)
 8001be6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001bea:	60d3      	str	r3, [r2, #12]


    // PE10 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    STATUS_LED_GPIO_Port->MODER &= ~(0x3U << (10 * 2));  // 먼저 클리어
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <LED_Init+0x100>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <LED_Init+0x100>)
 8001bf2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001bf6:	6013      	str	r3, [r2, #0]
    STATUS_LED_GPIO_Port->MODER |=  (0x1U << (10 * 2));  // 0b01: Output
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <LED_Init+0x100>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <LED_Init+0x100>)
 8001bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c02:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    STATUS_LED_GPIO_Port->OTYPER &= ~(1U << 10);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <LED_Init+0x100>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <LED_Init+0x100>)
 8001c0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c0e:	6053      	str	r3, [r2, #4]
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    STATUS_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (10 * 2));
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <LED_Init+0x100>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <LED_Init+0x100>)
 8001c16:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001c1a:	6093      	str	r3, [r2, #8]
    STATUS_LED_GPIO_Port->OSPEEDR |=  (0x2U << (10 * 2));
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <LED_Init+0x100>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <LED_Init+0x100>)
 8001c22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c26:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    STATUS_LED_GPIO_Port->PUPDR &= ~(0x3U << (10 * 2));
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <LED_Init+0x100>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <LED_Init+0x100>)
 8001c2e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001c32:	60d3      	str	r3, [r2, #12]
    
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40021000 	.word	0x40021000

08001c48 <RX_LED_On>:


// LED On: PE8을 1로 설정 (BSRR 사용)
void RX_LED_On(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    RX_LED_GPIO_Port->BSRR = (1U << 8);       // set PE8
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <RX_LED_On+0x18>)
 8001c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c52:	619a      	str	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000

08001c64 <RX_LED_Off>:

// LED Off: PE8을 0으로 설정 (BSRR 상위 16비트에 1을 쓰면 reset)
void RX_LED_Off(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
    RX_LED_GPIO_Port->BSRR = (1U << (8 + 16)); // reset PE8
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <RX_LED_Off+0x18>)
 8001c6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c6e:	619a      	str	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000

08001c80 <TX_LED_On>:

// LED On: PE9을 1로 설정 (BSRR 사용)
void TX_LED_On(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
    TX_LED_GPIO_Port->BSRR = (1U << 9);       // set PE9
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <TX_LED_On+0x18>)
 8001c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c8a:	619a      	str	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <STATUS_LED_On>:
}


// LED On: PE10을 1로 설정 (BSRR 사용)
void STATUS_LED_On(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
    // BSRR 레지스터 하위 16비트에 1을 쓰면 set
    STATUS_LED_GPIO_Port->BSRR = (1U << 10);
 8001ca0:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <STATUS_LED_On+0x18>)
 8001ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca6:	619a      	str	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <STATUS_LED_Off>:

// LED Off: PE10을 0으로 설정 (BSRR 상위 16비트에 1을 쓰면 reset)
void STATUS_LED_Off(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
    // BSRR 레지스터 상위 16비트(bit16+핀번호)에 1을 쓰면 reset
    STATUS_LED_GPIO_Port->BSRR = (1U << (10 + 16));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <STATUS_LED_Off+0x18>)
 8001cbe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cc2:	619a      	str	r2, [r3, #24]
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd8:	f002 f8e8 	bl	8003eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cdc:	f000 f854 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce0:	f000 fa64 	bl	80021ac <MX_GPIO_Init>
  MX_RTC_Init();
 8001ce4:	f000 f8bc 	bl	8001e60 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8001ce8:	f000 f92c 	bl	8001f44 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001cec:	f000 f94a 	bl	8001f84 <MX_SPI1_Init>
  MX_TIM7_Init();
 8001cf0:	f000 f97e 	bl	8001ff0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001cf4:	f000 f9dc 	bl	80020b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001cf8:	f000 fa04 	bl	8002104 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001cfc:	f000 fa2c 	bl	8002158 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001d00:	f007 fca6 	bl	8009650 <MX_FATFS_Init>
  MX_UART4_Init();
 8001d04:	f000 f9aa 	bl	800205c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  // CCM 영역 초기화

  Oper_CCM_Init();
 8001d08:	f000 fe52 	bl	80029b0 <Oper_CCM_Init>
  
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // 타이머 인터럽트 모드로 시작 (TIM7은 이미 PSC/ARR로 1 kHz, 1 ms 인터럽트로 설정되어 있다고 가정)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8001d0c:	4817      	ldr	r0, [pc, #92]	@ (8001d6c <main+0x98>)
 8001d0e:	f005 fb7f 	bl	8007410 <HAL_TIM_Base_Start_IT>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <main+0x48>
  {
    Error_Handler();
 8001d18:	f000 fb7e 	bl	8002418 <Error_Handler>
  }

  // 1) 콜백 기반 수신을 시작 (1바이트)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4914      	ldr	r1, [pc, #80]	@ (8001d70 <main+0x9c>)
 8001d20:	4814      	ldr	r0, [pc, #80]	@ (8001d74 <main+0xa0>)
 8001d22:	f005 ffdb 	bl	8007cdc <HAL_UART_Receive_IT>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <main+0x5c>
  {
    // 수신 시작 실패 처리
    Error_Handler();
 8001d2c:	f000 fb74 	bl	8002418 <Error_Handler>
  }

  // SIM uart 콜백 기반 수신 시작
  if (HAL_UART_Receive_IT(&huart3, &rxSIMByte, 1) != HAL_OK)
 8001d30:	2201      	movs	r2, #1
 8001d32:	4911      	ldr	r1, [pc, #68]	@ (8001d78 <main+0xa4>)
 8001d34:	4811      	ldr	r0, [pc, #68]	@ (8001d7c <main+0xa8>)
 8001d36:	f005 ffd1 	bl	8007cdc <HAL_UART_Receive_IT>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <main+0x70>
  {
    // SIM 수신 시작 실패 처리
    Error_Handler();
 8001d40:	f000 fb6a 	bl	8002418 <Error_Handler>
  // }

  // ──────────────────────────────────────────────────────────────────────────────

  // CCM은 아니지만 기본 초기화
  Oper_Init();
 8001d44:	f000 fe3e 	bl	80029c4 <Oper_Init>

  // ──────────────────────────────────────────────────────────────────────────────
  
  // 딥스위치 체크
  Mode_Check(); // AP 모드 체크 및 설정
 8001d48:	f000 fb96 	bl	8002478 <Mode_Check>
  
  // ──────────────────────────────────────────────────────────────────────────────

  Main_System();
 8001d4c:	f000 fe0a 	bl	8002964 <Main_System>

  // ──────────────────────────────────────────────────────────────────────────────

  // ──────────────────────────────────────────────────────────────────────────────

  Oper_Boot();
 8001d50:	f000 fe46 	bl	80029e0 <Oper_Boot>

  // AP 모드 인지 확인
  if (g_nMode != MODE_AP)
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <main+0xac>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d001      	beq.n	8001d60 <main+0x8c>
  {
    // 토큰 값, 모기체 고유 값, 자기체 고유 값 서버로 전송
    Server_Send_Boot();
 8001d5c:	f001 fca2 	bl	80036a4 <Server_Send_Boot>
    // Test_Server_Send_Boot(); // 박과장님 서버로 날림
  }


  g_nBoot_Status = BOOT_SUCCESS; // 부팅 성공 상태로 설정
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <main+0xb0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]



  while (1)
  {
    Master_Proc(); // 메인 프로세스 실행
 8001d66:	f000 fc65 	bl	8002634 <Master_Proc>
 8001d6a:	e7fc      	b.n	8001d66 <main+0x92>
 8001d6c:	20000674 	.word	0x20000674
 8001d70:	200007fe 	.word	0x200007fe
 8001d74:	20000704 	.word	0x20000704
 8001d78:	200007ff 	.word	0x200007ff
 8001d7c:	20000794 	.word	0x20000794
 8001d80:	20000800 	.word	0x20000800
 8001d84:	20000000 	.word	0x20000000

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b094      	sub	sp, #80	@ 0x50
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	2230      	movs	r2, #48	@ 0x30
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00a f9c6 	bl	800c128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <SystemClock_Config+0xd0>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <SystemClock_Config+0xd0>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbc:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <SystemClock_Config+0xd0>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <SystemClock_Config+0xd4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	@ (8001e5c <SystemClock_Config+0xd4>)
 8001dd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <SystemClock_Config+0xd4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001de4:	2305      	movs	r3, #5
 8001de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dee:	2301      	movs	r3, #1
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df2:	2302      	movs	r3, #2
 8001df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e00:	23a8      	movs	r3, #168	@ 0xa8
 8001e02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0c:	f107 0320 	add.w	r3, r7, #32
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 fc3b 	bl	800468c <HAL_RCC_OscConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e1c:	f000 fafc 	bl	8002418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e20:	230f      	movs	r3, #15
 8001e22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2105      	movs	r1, #5
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 fe9c 	bl	8004b7c <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e4a:	f000 fae5 	bl	8002418 <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3750      	adds	r7, #80	@ 0x50
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000

08001e60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  // 위 3개 구조체 변수는 사용안함, 주석처리
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e64:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e66:	4a34      	ldr	r2, [pc, #208]	@ (8001f38 <MX_RTC_Init+0xd8>)
 8001e68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e6a:	4b32      	ldr	r3, [pc, #200]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e70:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e72:	227f      	movs	r2, #127	@ 0x7f
 8001e74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e76:	4b2f      	ldr	r3, [pc, #188]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e78:	22ff      	movs	r2, #255	@ 0xff
 8001e7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e82:	4b2c      	ldr	r3, [pc, #176]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e88:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e8e:	4829      	ldr	r0, [pc, #164]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001e90:	f003 f976 	bl	8005180 <HAL_RTC_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e9a:	f000 fabd 	bl	8002418 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  // RTC 백업 레지스터를 읽어 초기화 여부 확인
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_REG) != RTC_MAGIC_VALUE)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4824      	ldr	r0, [pc, #144]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001ea2:	f003 fce1 	bl	8005868 <HAL_RTCEx_BKUPRead>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d035      	beq.n	8001f1c <MX_RTC_Init+0xbc>
  {
    // RTC 백업 레지스터가 초기화되지 않았거나 값이 일치하지 않으면 RTC를 초기화
    // RTC 백업 레지스터에 초기화 마크를 기록
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_REG, RTC_MAGIC_VALUE);
 8001eb0:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	481f      	ldr	r0, [pc, #124]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001eb8:	f003 fcbc 	bl	8005834 <HAL_RTCEx_BKUPWrite>

    // RTC 시간과 날짜를 초기화
    g_Time.Hours = 0x0;  // 00:00:00
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <MX_RTC_Init+0xdc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = 0x0;
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <MX_RTC_Init+0xdc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = 0x0;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <MX_RTC_Init+0xdc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ece:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <MX_RTC_Init+0xdc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <MX_RTC_Init+0xdc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BCD) != HAL_OK)
 8001eda:	2201      	movs	r2, #1
 8001edc:	4917      	ldr	r1, [pc, #92]	@ (8001f3c <MX_RTC_Init+0xdc>)
 8001ede:	4815      	ldr	r0, [pc, #84]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001ee0:	f003 f9cf 	bl	8005282 <HAL_RTC_SetTime>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_RTC_Init+0x8e>
    {
      // 초기화 실패 처리
      Error_Handler();
 8001eea:	f000 fa95 	bl	8002418 <Error_Handler>
    }
    g_Date.WeekDay = RTC_WEEKDAY_MONDAY;    // 월요일
 8001eee:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <MX_RTC_Init+0xe0>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
    g_Date.Month = RTC_MONTH_JANUARY;       // 1월
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <MX_RTC_Init+0xe0>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	705a      	strb	r2, [r3, #1]
    g_Date.Date = 0x1;                      // 1일
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <MX_RTC_Init+0xe0>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	709a      	strb	r2, [r3, #2]
    g_Date.Year = 0x25;                     // 2025년 (BCD 형식으로 25)
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <MX_RTC_Init+0xe0>)
 8001f02:	2225      	movs	r2, #37	@ 0x25
 8001f04:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BCD) != HAL_OK)
 8001f06:	2201      	movs	r2, #1
 8001f08:	490d      	ldr	r1, [pc, #52]	@ (8001f40 <MX_RTC_Init+0xe0>)
 8001f0a:	480a      	ldr	r0, [pc, #40]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001f0c:	f003 fab1 	bl	8005472 <HAL_RTC_SetDate>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <MX_RTC_Init+0xd0>
    {
      // 초기화 실패 처리
      Error_Handler();
 8001f16:	f000 fa7f 	bl	8002418 <Error_Handler>
  // }
  /* USER CODE BEGIN RTC_Init 2 */
// 위 코드 사용안함===============================================================================
  /* USER CODE END RTC_Init 2 */

}
 8001f1a:	e009      	b.n	8001f30 <MX_RTC_Init+0xd0>
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <MX_RTC_Init+0xdc>)
 8001f20:	4804      	ldr	r0, [pc, #16]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001f22:	f003 fa48 	bl	80053b6 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 8001f26:	2201      	movs	r2, #1
 8001f28:	4905      	ldr	r1, [pc, #20]	@ (8001f40 <MX_RTC_Init+0xe0>)
 8001f2a:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <MX_RTC_Init+0xd4>)
 8001f2c:	f003 fb25 	bl	800557a <HAL_RTC_GetDate>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000578 	.word	0x20000578
 8001f38:	40002800 	.word	0x40002800
 8001f3c:	200007dc 	.word	0x200007dc
 8001f40:	200007f0 	.word	0x200007f0

08001f44 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <MX_SDIO_SD_Init+0x38>)
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <MX_SDIO_SD_Init+0x3c>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <MX_SDIO_SD_Init+0x38>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <MX_SDIO_SD_Init+0x38>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <MX_SDIO_SD_Init+0x38>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_SDIO_SD_Init+0x38>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <MX_SDIO_SD_Init+0x38>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <MX_SDIO_SD_Init+0x38>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	20000598 	.word	0x20000598
 8001f80:	40012c00 	.word	0x40012c00

08001f84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f88:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001f8a:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <MX_SPI1_Init+0x68>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001f90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f96:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fd0:	220a      	movs	r2, #10
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <MX_SPI1_Init+0x64>)
 8001fd6:	f004 fbf9 	bl	80067cc <HAL_SPI_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fe0:	f000 fa1a 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	2000061c 	.word	0x2000061c
 8001fec:	40013000 	.word	0x40013000

08001ff0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <MX_TIM7_Init+0x64>)
 8002000:	4a15      	ldr	r2, [pc, #84]	@ (8002058 <MX_TIM7_Init+0x68>)
 8002002:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <MX_TIM7_Init+0x64>)
 8002006:	2263      	movs	r2, #99	@ 0x63
 8002008:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <MX_TIM7_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 8002010:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_TIM7_Init+0x64>)
 8002012:	f240 3247 	movw	r2, #839	@ 0x347
 8002016:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_TIM7_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800201e:	480d      	ldr	r0, [pc, #52]	@ (8002054 <MX_TIM7_Init+0x64>)
 8002020:	f005 f9a6 	bl	8007370 <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800202a:	f000 f9f5 	bl	8002418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002036:	463b      	mov	r3, r7
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	@ (8002054 <MX_TIM7_Init+0x64>)
 800203c:	f005 fc16 	bl	800786c <HAL_TIMEx_MasterConfigSynchronization>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002046:	f000 f9e7 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000674 	.word	0x20000674
 8002058:	40001400 	.word	0x40001400

0800205c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <MX_UART4_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <MX_UART4_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <MX_UART4_Init+0x4c>)
 8002068:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800206c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <MX_UART4_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <MX_UART4_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <MX_UART4_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <MX_UART4_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <MX_UART4_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <MX_UART4_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_UART4_Init+0x4c>)
 8002094:	f005 fc7a 	bl	800798c <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800209e:	f000 f9bb 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200006bc 	.word	0x200006bc
 80020ac:	40004c00 	.word	0x40004c00

080020b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_USART1_UART_Init+0x50>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_USART1_UART_Init+0x4c>)
 80020e8:	f005 fc50 	bl	800798c <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020f2:	f000 f991 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000704 	.word	0x20000704
 8002100:	40011000 	.word	0x40011000

08002104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <MX_USART2_UART_Init+0x50>)
 800210c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002110:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800212a:	220c      	movs	r2, #12
 800212c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212e:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800213c:	f005 fc26 	bl	800798c <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002146:	f000 f967 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000074c 	.word	0x2000074c
 8002154:	40004400 	.word	0x40004400

08002158 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 800215e:	4a12      	ldr	r2, [pc, #72]	@ (80021a8 <MX_USART3_UART_Init+0x50>)
 8002160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 8002164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_USART3_UART_Init+0x4c>)
 8002190:	f005 fbfc 	bl	800798c <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800219a:	f000 f93d 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000794 	.word	0x20000794
 80021a8:	40004800 	.word	0x40004800

080021ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	@ 0x30
 80021b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	4b4b      	ldr	r3, [pc, #300]	@ (80022f4 <MX_GPIO_Init+0x148>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a4a      	ldr	r2, [pc, #296]	@ (80022f4 <MX_GPIO_Init+0x148>)
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b48      	ldr	r3, [pc, #288]	@ (80022f4 <MX_GPIO_Init+0x148>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	4b44      	ldr	r3, [pc, #272]	@ (80022f4 <MX_GPIO_Init+0x148>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	4a43      	ldr	r2, [pc, #268]	@ (80022f4 <MX_GPIO_Init+0x148>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <MX_GPIO_Init+0x148>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b3d      	ldr	r3, [pc, #244]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a3c      	ldr	r2, [pc, #240]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <MX_GPIO_Init+0x148>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b36      	ldr	r3, [pc, #216]	@ (80022f4 <MX_GPIO_Init+0x148>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	4a35      	ldr	r2, [pc, #212]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6313      	str	r3, [r2, #48]	@ 0x30
 8002226:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b2f      	ldr	r3, [pc, #188]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a2e      	ldr	r2, [pc, #184]	@ (80022f4 <MX_GPIO_Init+0x148>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a27      	ldr	r2, [pc, #156]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <MX_GPIO_Init+0x148>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2110      	movs	r1, #16
 800226e:	4822      	ldr	r0, [pc, #136]	@ (80022f8 <MX_GPIO_Init+0x14c>)
 8002270:	f002 f9f2 	bl	8004658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800227a:	4820      	ldr	r0, [pc, #128]	@ (80022fc <MX_GPIO_Init+0x150>)
 800227c:	f002 f9ec 	bl	8004658 <HAL_GPIO_WritePin>
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIP_3_Pin DIP_4_Pin DIP_1_Pin DIP_2_Pin */
  GPIO_InitStruct.Pin = DIP_3_Pin|DIP_4_Pin|DIP_1_Pin|DIP_2_Pin;
 8002280:	230f      	movs	r3, #15
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002288:	2301      	movs	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	481a      	ldr	r0, [pc, #104]	@ (80022fc <MX_GPIO_Init+0x150>)
 8002294:	f002 f844 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002298:	2310      	movs	r3, #16
 800229a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4812      	ldr	r0, [pc, #72]	@ (80022f8 <MX_GPIO_Init+0x14c>)
 80022b0:	f002 f836 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin M_PWR_KEY_Pin
                           ESP_EN_Pin USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 80022b4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80022b8:	61fb      	str	r3, [r7, #28]
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c6:	f107 031c 	add.w	r3, r7, #28
 80022ca:	4619      	mov	r1, r3
 80022cc:	480b      	ldr	r0, [pc, #44]	@ (80022fc <MX_GPIO_Init+0x150>)
 80022ce:	f002 f827 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80022d2:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80022d6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	@ (8002300 <MX_GPIO_Init+0x154>)
 80022e8:	f002 f81a 	bl	8004320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ec:	bf00      	nop
 80022ee:	3730      	adds	r7, #48	@ 0x30
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40020c00 	.word	0x40020c00

08002304 <HAL_TIM_PeriodElapsedCallback>:
//
// =======================================================================================================
/* tim 7 인터럽트 처리부 */
/* TIM7 업데이트 인터럽트 콜백 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    Timer_Interrupt_Proc();
 8002316:	f000 f9df 	bl	80026d8 <Timer_Interrupt_Proc>
      //   Error_Handler();
      // }      
    }
#endif
  }
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40001400 	.word	0x40001400

08002328 <HAL_UART_RxCpltCallback>:
//
// =======================================================================================================
/* uart 1 처리부 */
/* UART Rx Complete 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  // uart1에서 수신된 바이트를 처리
  if (huart->Instance == USART1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a28      	ldr	r2, [pc, #160]	@ (80023d8 <HAL_UART_RxCpltCallback+0xb0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d109      	bne.n	800234e <HAL_UART_RxCpltCallback+0x26>
  {
    // 1) 에코: 받은 바이트를 바로 송신
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 800233a:	2201      	movs	r2, #1
 800233c:	4927      	ldr	r1, [pc, #156]	@ (80023dc <HAL_UART_RxCpltCallback+0xb4>)
 800233e:	4828      	ldr	r0, [pc, #160]	@ (80023e0 <HAL_UART_RxCpltCallback+0xb8>)
 8002340:	f005 fc96 	bl	8007c70 <HAL_UART_Transmit_IT>

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8002344:	2201      	movs	r2, #1
 8002346:	4925      	ldr	r1, [pc, #148]	@ (80023dc <HAL_UART_RxCpltCallback+0xb4>)
 8002348:	4825      	ldr	r0, [pc, #148]	@ (80023e0 <HAL_UART_RxCpltCallback+0xb8>)
 800234a:	f005 fcc7 	bl	8007cdc <HAL_UART_Receive_IT>
  }

  // uart2에서 수신된 바이트를 처리

  if (huart->Instance == USART2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a24      	ldr	r2, [pc, #144]	@ (80023e4 <HAL_UART_RxCpltCallback+0xbc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d12b      	bne.n	80023b0 <HAL_UART_RxCpltCallback+0x88>
  {
    char c = g_atRxByte;
 8002358:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <HAL_UART_RxCpltCallback+0xc0>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	73fb      	strb	r3, [r7, #15]

    // 1) 수신 바이트를 라인 버퍼에 저장
    if (atIdx < AT_RX_BUF_SIZE-1)
 800235e:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <HAL_UART_RxCpltCallback+0xc4>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	2b3e      	cmp	r3, #62	@ 0x3e
 8002364:	d809      	bhi.n	800237a <HAL_UART_RxCpltCallback+0x52>
    {
      atLineBuf[atIdx++] = c;
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_UART_RxCpltCallback+0xc4>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	b291      	uxth	r1, r2
 800236e:	4a1f      	ldr	r2, [pc, #124]	@ (80023ec <HAL_UART_RxCpltCallback+0xc4>)
 8002370:	8011      	strh	r1, [r2, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	5453      	strb	r3, [r2, r1]
    }

    // 2) '\n' 이 들어오면 한 줄 완성
    if (c == '\n' || c == '\r')
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b0a      	cmp	r3, #10
 800237e:	d002      	beq.n	8002386 <HAL_UART_RxCpltCallback+0x5e>
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b0d      	cmp	r3, #13
 8002384:	d10f      	bne.n	80023a6 <HAL_UART_RxCpltCallback+0x7e>
    {
      atLineBuf[atIdx] = '\0';  // 문자열 종료
 8002386:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_UART_RxCpltCallback+0xc4>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

      // AT 명령어 처리 로직 (예: AT 명령어 파싱 및 응답)
      // 여기서 atLineBuf를 사용하여 AT 명령어를 처리
      // 받은 명령을 다시 STM uart 송신
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)atLineBuf, atIdx);
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <HAL_UART_RxCpltCallback+0xc4>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	4915      	ldr	r1, [pc, #84]	@ (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 800239a:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <HAL_UART_RxCpltCallback+0xb8>)
 800239c:	f005 fc68 	bl	8007c70 <HAL_UART_Transmit_IT>

      atIdx = 0;  // 인덱스 초기화
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_UART_RxCpltCallback+0xc4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	801a      	strh	r2, [r3, #0]
    }

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
 80023a6:	2201      	movs	r2, #1
 80023a8:	490f      	ldr	r1, [pc, #60]	@ (80023e8 <HAL_UART_RxCpltCallback+0xc0>)
 80023aa:	4812      	ldr	r0, [pc, #72]	@ (80023f4 <HAL_UART_RxCpltCallback+0xcc>)
 80023ac:	f005 fc96 	bl	8007cdc <HAL_UART_Receive_IT>
  }

  // uart3에서 수신된 바이트를 처리
  if (huart->Instance == USART3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a10      	ldr	r2, [pc, #64]	@ (80023f8 <HAL_UART_RxCpltCallback+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d109      	bne.n	80023ce <HAL_UART_RxCpltCallback+0xa6>
  {
    // SIM 카드에서 수신된 바이트를 처리
    // 예: SIM 카드 응답을 UART1로 전달
    HAL_UART_Transmit_IT(&huart1, &rxSIMByte, 1);
 80023ba:	2201      	movs	r2, #1
 80023bc:	490f      	ldr	r1, [pc, #60]	@ (80023fc <HAL_UART_RxCpltCallback+0xd4>)
 80023be:	4808      	ldr	r0, [pc, #32]	@ (80023e0 <HAL_UART_RxCpltCallback+0xb8>)
 80023c0:	f005 fc56 	bl	8007c70 <HAL_UART_Transmit_IT>

    // 다시 수신 대기
    HAL_UART_Receive_IT(&huart3, &rxSIMByte, 1);
 80023c4:	2201      	movs	r2, #1
 80023c6:	490d      	ldr	r1, [pc, #52]	@ (80023fc <HAL_UART_RxCpltCallback+0xd4>)
 80023c8:	480d      	ldr	r0, [pc, #52]	@ (8002400 <HAL_UART_RxCpltCallback+0xd8>)
 80023ca:	f005 fc87 	bl	8007cdc <HAL_UART_Receive_IT>
        // 2) 다시 UART2 수신 대기
        HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
    }
#endif

}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40011000 	.word	0x40011000
 80023dc:	200007fe 	.word	0x200007fe
 80023e0:	20000704 	.word	0x20000704
 80023e4:	40004400 	.word	0x40004400
 80023e8:	2000007c 	.word	0x2000007c
 80023ec:	200000c0 	.word	0x200000c0
 80023f0:	20000080 	.word	0x20000080
 80023f4:	2000074c 	.word	0x2000074c
 80023f8:	40004800 	.word	0x40004800
 80023fc:	200007ff 	.word	0x200007ff
 8002400:	20000794 	.word	0x20000794

08002404 <HAL_UART_TxCpltCallback>:

/* UART 전송 완료 콜백 (필요 시..) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  // 전송 완료 후 다른 처리가 필요하면 여기에…
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <Error_Handler+0x8>

08002424 <SD_Card_Check>:
// ──────────────────────────────────────────────────────────────────────────────

// ──────────────────────────────────────────────────────────────────────────────

void SD_Card_Check(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
    int isSd = SD_Card_Is_Exist(); // SD 카드 존재 여부 확인
 800242a:	f001 f8cb 	bl	80035c4 <SD_Card_Is_Exist>
 800242e:	6078      	str	r0, [r7, #4]

    while (isSd == SD_ERROR)
 8002430:	e017      	b.n	8002462 <SD_Card_Check+0x3e>
    {
        HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_SET);  // LED ON
 8002432:	2201      	movs	r2, #1
 8002434:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002438:	480e      	ldr	r0, [pc, #56]	@ (8002474 <SD_Card_Check+0x50>)
 800243a:	f002 f90d 	bl	8004658 <HAL_GPIO_WritePin>
        HAL_Delay(200);  // 0.5초 대기
 800243e:	20c8      	movs	r0, #200	@ 0xc8
 8002440:	f001 fda6 	bl	8003f90 <HAL_Delay>
        HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_RESET); // LED OFF
 8002444:	2200      	movs	r2, #0
 8002446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800244a:	480a      	ldr	r0, [pc, #40]	@ (8002474 <SD_Card_Check+0x50>)
 800244c:	f002 f904 	bl	8004658 <HAL_GPIO_WritePin>
        HAL_Delay(200);  // 0.5초 대기
 8002450:	20c8      	movs	r0, #200	@ 0xc8
 8002452:	f001 fd9d 	bl	8003f90 <HAL_Delay>

        isSd = SD_Card_Is_Exist(); // SD 카드 존재 여부 확인
 8002456:	f001 f8b5 	bl	80035c4 <SD_Card_Is_Exist>
 800245a:	6078      	str	r0, [r7, #4]
        if(isSd == SD_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <SD_Card_Check+0x46>
    while (isSd == SD_ERROR)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d0e4      	beq.n	8002432 <SD_Card_Check+0xe>
        {
            break; // SD 카드가 존재하면 루프 종료
        }
    }
}
 8002468:	e000      	b.n	800246c <SD_Card_Check+0x48>
            break; // SD 카드가 존재하면 루프 종료
 800246a:	bf00      	nop
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <Mode_Check>:


// ──────────────────────────────────────────────────────────────────────────────

void Mode_Check(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
    int mode = Device_Mode_Check(); // 현재 모드 확인
 800247e:	f7fe fba7 	bl	8000bd0 <Device_Mode_Check>
 8002482:	6078      	str	r0, [r7, #4]

    // Device_Mode_Check 함수에서 모드가 변경되어 반영했으므로 아래는 따로 진행안해도 무관
    switch (mode)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d810      	bhi.n	80024ac <Mode_Check+0x34>
 800248a:	a201      	add	r2, pc, #4	@ (adr r2, 8002490 <Mode_Check+0x18>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024ad 	.word	0x080024ad
 8002494:	080024ad 	.word	0x080024ad
 8002498:	080024ad 	.word	0x080024ad
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024ad 	.word	0x080024ad
 80024a4:	080024ad 	.word	0x080024ad
 80024a8:	080024ad 	.word	0x080024ad
        break;
    case MODE_DEGUG:
        break;
    
    default:
        break;
 80024ac:	bf00      	nop
    }

    g_nMode = mode; // 현재 모드
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <Mode_Check+0x48>)
 80024b4:	701a      	strb	r2, [r3, #0]
    
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000800 	.word	0x20000800

080024c4 <AP_Mode_Proc>:

// ──────────────────────────────────────────────────────────────────────────────

// AP 모드 프로세스
void AP_Mode_Proc(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
    int step = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
    int result = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
    int bootLoop = 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]

    // ====================================================================

    // 부팅 동작
    while (bootLoop)
 80024d6:	e044      	b.n	8002562 <AP_Mode_Proc+0x9e>
    {
        switch (step)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d03d      	beq.n	800255a <AP_Mode_Proc+0x96>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	dc3d      	bgt.n	8002560 <AP_Mode_Proc+0x9c>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <AP_Mode_Proc+0x2e>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d01a      	beq.n	8002526 <AP_Mode_Proc+0x62>
        case 2:
            bootLoop = 0; // 부팅 루프 종료
            break;
        
        default:
            break;
 80024f0:	e036      	b.n	8002560 <AP_Mode_Proc+0x9c>
            result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 80024f2:	f000 fe2f 	bl	8003154 <SD_Card_Boot>
 80024f6:	6078      	str	r0, [r7, #4]
            SD_Card_Log("SD Card Boot...\n");
 80024f8:	4828      	ldr	r0, [pc, #160]	@ (800259c <AP_Mode_Proc+0xd8>)
 80024fa:	f000 ffe3 	bl	80034c4 <SD_Card_Log>
            if (result == SD_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <AP_Mode_Proc+0x4e>
                SD_Card_Log("SD Card Booted Successfully!\n");
 8002504:	4826      	ldr	r0, [pc, #152]	@ (80025a0 <AP_Mode_Proc+0xdc>)
 8002506:	f000 ffdd 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3301      	adds	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
            break;
 8002510:	e027      	b.n	8002562 <AP_Mode_Proc+0x9e>
                SD_Card_Log("SD Card Boot Failed!\n");
 8002512:	4824      	ldr	r0, [pc, #144]	@ (80025a4 <AP_Mode_Proc+0xe0>)
 8002514:	f000 ffd6 	bl	80034c4 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002518:	4823      	ldr	r0, [pc, #140]	@ (80025a8 <AP_Mode_Proc+0xe4>)
 800251a:	f000 ffd3 	bl	80034c4 <SD_Card_Log>
                Error_Proc(1);
 800251e:	2001      	movs	r0, #1
 8002520:	f000 f858 	bl	80025d4 <Error_Proc>
            break;
 8002524:	e01d      	b.n	8002562 <AP_Mode_Proc+0x9e>
            result = ESP_AT_Boot(); // ESP32 AT 테스트
 8002526:	f7fe fbd9 	bl	8000cdc <ESP_AT_Boot>
 800252a:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 AT Boot...\n");
 800252c:	481f      	ldr	r0, [pc, #124]	@ (80025ac <AP_Mode_Proc+0xe8>)
 800252e:	f000 ffc9 	bl	80034c4 <SD_Card_Log>
            if (result == AT_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <AP_Mode_Proc+0x82>
                SD_Card_Log("ESP32 AT Booted Successfully!\n");
 8002538:	481d      	ldr	r0, [pc, #116]	@ (80025b0 <AP_Mode_Proc+0xec>)
 800253a:	f000 ffc3 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3301      	adds	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
            break;
 8002544:	e00d      	b.n	8002562 <AP_Mode_Proc+0x9e>
                SD_Card_Log("ESP32 AT Boot Failed!\n");
 8002546:	481b      	ldr	r0, [pc, #108]	@ (80025b4 <AP_Mode_Proc+0xf0>)
 8002548:	f000 ffbc 	bl	80034c4 <SD_Card_Log>
                SD_Card_Log("again...\n");
 800254c:	4816      	ldr	r0, [pc, #88]	@ (80025a8 <AP_Mode_Proc+0xe4>)
 800254e:	f000 ffb9 	bl	80034c4 <SD_Card_Log>
                Error_Proc(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 f83e 	bl	80025d4 <Error_Proc>
            break;
 8002558:	e003      	b.n	8002562 <AP_Mode_Proc+0x9e>
            bootLoop = 0; // 부팅 루프 종료
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
            break;
 800255e:	e000      	b.n	8002562 <AP_Mode_Proc+0x9e>
            break;
 8002560:	bf00      	nop
    while (bootLoop)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1b7      	bne.n	80024d8 <AP_Mode_Proc+0x14>

    //     ESP_AP_Server(); // ESP32 AP 서버 시작
    // }

    // 와이파이 드라이버 초기화
    ESP_AT_Send_Command_Sync("AT+CWINIT=1\r\n");
 8002568:	4813      	ldr	r0, [pc, #76]	@ (80025b8 <AP_Mode_Proc+0xf4>)
 800256a:	f7fe fc73 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    // softAP 모드로 설정
    ESP_AT_Send_Command_Sync("AT+CWMODE=3\r\n");
 800256e:	4813      	ldr	r0, [pc, #76]	@ (80025bc <AP_Mode_Proc+0xf8>)
 8002570:	f7fe fc70 	bl	8000e54 <ESP_AT_Send_Command_Sync>
    
    // AP SSID와 비밀번호 설정
    // ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT_AP\",\"12345678\",5,3\r\n");
    ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT_AP\",\"\",5,0\r\n");
 8002574:	4812      	ldr	r0, [pc, #72]	@ (80025c0 <AP_Mode_Proc+0xfc>)
 8002576:	f7fe fc6d 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    // SoftAP DHCP 서버 활성화
    ESP_AT_Send_Command_Sync("AT+CWDHCP=1,2\r\n");
 800257a:	4812      	ldr	r0, [pc, #72]	@ (80025c4 <AP_Mode_Proc+0x100>)
 800257c:	f7fe fc6a 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    // SoftAP IP 주소 설정
    ESP_AT_Send_Command_Sync("AT+CIPAP=\"192.168.4.1\",\"255.255.255.0\"\r\n");
 8002580:	4811      	ldr	r0, [pc, #68]	@ (80025c8 <AP_Mode_Proc+0x104>)
 8002582:	f7fe fc67 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    // 멀티플 커넥션 모드 설정
    ESP_AT_Send_Command_Sync("AT+CIPMUX=1\r\n");
 8002586:	4811      	ldr	r0, [pc, #68]	@ (80025cc <AP_Mode_Proc+0x108>)
 8002588:	f7fe fc64 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    // HTTP 서버 시작
    ESP_AT_Send_Command_Sync("AT+CIPSERVER=1,80\r\n");
 800258c:	4810      	ldr	r0, [pc, #64]	@ (80025d0 <AP_Mode_Proc+0x10c>)
 800258e:	f7fe fc61 	bl	8000e54 <ESP_AT_Send_Command_Sync>

    Handle_IPD_and_Respond(); // 클라이언트 요청 처리
 8002592:	f7ff f8d3 	bl	800173c <Handle_IPD_and_Respond>

    while (1)
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <AP_Mode_Proc+0xd2>
 800259a:	bf00      	nop
 800259c:	0800d7c8 	.word	0x0800d7c8
 80025a0:	0800d7dc 	.word	0x0800d7dc
 80025a4:	0800d7fc 	.word	0x0800d7fc
 80025a8:	0800d814 	.word	0x0800d814
 80025ac:	0800d820 	.word	0x0800d820
 80025b0:	0800d834 	.word	0x0800d834
 80025b4:	0800d854 	.word	0x0800d854
 80025b8:	0800d86c 	.word	0x0800d86c
 80025bc:	0800d87c 	.word	0x0800d87c
 80025c0:	0800d88c 	.word	0x0800d88c
 80025c4:	0800d8ac 	.word	0x0800d8ac
 80025c8:	0800d8bc 	.word	0x0800d8bc
 80025cc:	0800d8e8 	.word	0x0800d8e8
 80025d0:	0800d8f8 	.word	0x0800d8f8

080025d4 <Error_Proc>:

// ──────────────────────────────────────────────────────────────────────────────
// 파라미터 0 : Error_Handler 호출
// 파라미터 !0 : uart1 코맨트 전송
void Error_Proc(int errorCode)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    const char *comment = "Check Log.txt!\r\n";
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <Error_Proc+0x58>)
 80025de:	60fb      	str	r3, [r7, #12]

    switch (errorCode)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <Error_Proc+0x1a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d003      	beq.n	80025f4 <Error_Proc+0x20>
 80025ec:	e00e      	b.n	800260c <Error_Proc+0x38>
    {
    case 0:
        Error_Handler();
 80025ee:	f7ff ff13 	bl	8002418 <Error_Handler>
        break;
 80025f2:	e017      	b.n	8002624 <Error_Proc+0x50>
    case 1:
        HAL_UART_Transmit(&huart1, (uint8_t*)comment, strlen(comment), HAL_MAX_DELAY);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7fd fdf5 	bl	80001e4 <strlen>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	68f9      	ldr	r1, [r7, #12]
 8002604:	480a      	ldr	r0, [pc, #40]	@ (8002630 <Error_Proc+0x5c>)
 8002606:	f005 fa11 	bl	8007a2c <HAL_UART_Transmit>
        break;
 800260a:	e00b      	b.n	8002624 <Error_Proc+0x50>
    
    default:
        HAL_UART_Transmit(&huart1, (uint8_t*)comment, strlen(comment), HAL_MAX_DELAY);
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7fd fde9 	bl	80001e4 <strlen>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	4804      	ldr	r0, [pc, #16]	@ (8002630 <Error_Proc+0x5c>)
 800261e:	f005 fa05 	bl	8007a2c <HAL_UART_Transmit>
        break;
 8002622:	bf00      	nop
    }
    
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	0800d90c 	.word	0x0800d90c
 8002630:	20000704 	.word	0x20000704

08002634 <Master_Proc>:

// ──────────────────────────────────────────────────────────────────────────────

void Master_Proc(void) 
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
    switch (g_nBoot_Step)
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <Master_Proc+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
    case 0:
            
      break;
    
    default:
      break;
 800263e:	bf00      	nop
    }

    SD_Card_Check(); // SD 카드 존재 여부 확인
 8002640:	f7ff fef0 	bl	8002424 <SD_Card_Check>
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000080c 	.word	0x2000080c

0800264c <DEBUG_Proc>:

// ─────────────────────────────────────────────────────────────────────────────

void DEBUG_Proc(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
    // 디버그 모드인걸 uart로 알리기
    const char *debugMsg = "DEBUG MODE ACTIVE!\r\n";
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <DEBUG_Proc+0x74>)
 8002654:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fd fdc4 	bl	80001e4 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4817      	ldr	r0, [pc, #92]	@ (80026c4 <DEBUG_Proc+0x78>)
 8002668:	f005 f9e0 	bl	8007a2c <HAL_UART_Transmit>
        

    while (1)
    {
        // AT 명령 확인
        ESP_AT_Send_Command_Sync_Get_Result("AT\r\n");
 800266c:	4816      	ldr	r0, [pc, #88]	@ (80026c8 <DEBUG_Proc+0x7c>)
 800266e:	f7fe fcdb 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>

        // SIM AT 명령 확인
        HAL_UART_Transmit(&huart3, (uint8_t*)"AT\r\n", 11, HAL_MAX_DELAY);
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	220b      	movs	r2, #11
 8002678:	4913      	ldr	r1, [pc, #76]	@ (80026c8 <DEBUG_Proc+0x7c>)
 800267a:	4814      	ldr	r0, [pc, #80]	@ (80026cc <DEBUG_Proc+0x80>)
 800267c:	f005 f9d6 	bl	8007a2c <HAL_UART_Transmit>
        // 어떤 명령을 보냈는지 PC로 전송
        HAL_UART_Transmit(&huart1, (uint8_t*)"AT\r\n", 11, HAL_MAX_DELAY);
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
 8002684:	220b      	movs	r2, #11
 8002686:	4910      	ldr	r1, [pc, #64]	@ (80026c8 <DEBUG_Proc+0x7c>)
 8002688:	480e      	ldr	r0, [pc, #56]	@ (80026c4 <DEBUG_Proc+0x78>)
 800268a:	f005 f9cf 	bl	8007a2c <HAL_UART_Transmit>

        // SIM 모듈 PIN 상태 확인 CPIN 명령 전송 인터럽트 기반
        HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CPIN?\r\n", 11, HAL_MAX_DELAY);
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	220b      	movs	r2, #11
 8002694:	490e      	ldr	r1, [pc, #56]	@ (80026d0 <DEBUG_Proc+0x84>)
 8002696:	480d      	ldr	r0, [pc, #52]	@ (80026cc <DEBUG_Proc+0x80>)
 8002698:	f005 f9c8 	bl	8007a2c <HAL_UART_Transmit>
        // 어떤 명령을 보냈는지 PC로 전송
        HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CPIN?\r\n", 11, HAL_MAX_DELAY);
 800269c:	f04f 33ff 	mov.w	r3, #4294967295
 80026a0:	220b      	movs	r2, #11
 80026a2:	490b      	ldr	r1, [pc, #44]	@ (80026d0 <DEBUG_Proc+0x84>)
 80026a4:	4807      	ldr	r0, [pc, #28]	@ (80026c4 <DEBUG_Proc+0x78>)
 80026a6:	f005 f9c1 	bl	8007a2c <HAL_UART_Transmit>


        // 루프 종료
        HAL_UART_Transmit(&huart1, (uint8_t*)"DEBUG MODE END!\r\n", 18, HAL_MAX_DELAY);
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	2212      	movs	r2, #18
 80026b0:	4908      	ldr	r1, [pc, #32]	@ (80026d4 <DEBUG_Proc+0x88>)
 80026b2:	4804      	ldr	r0, [pc, #16]	@ (80026c4 <DEBUG_Proc+0x78>)
 80026b4:	f005 f9ba 	bl	8007a2c <HAL_UART_Transmit>

        break;
 80026b8:	bf00      	nop
    }

    while (1)
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <DEBUG_Proc+0x6e>
 80026be:	bf00      	nop
 80026c0:	0800d920 	.word	0x0800d920
 80026c4:	20000704 	.word	0x20000704
 80026c8:	0800d938 	.word	0x0800d938
 80026cc:	20000794 	.word	0x20000794
 80026d0:	0800d940 	.word	0x0800d940
 80026d4:	0800d94c 	.word	0x0800d94c

080026d8 <Timer_Interrupt_Proc>:

// ─────────────────────────────────────────────────────────────────────────────


void Timer_Interrupt_Proc(void)
{
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	b098      	sub	sp, #96	@ 0x60
 80026dc:	af04      	add	r7, sp, #16
    int rxTimeVal_master    = 100; // RX LED 깜빡임 시간 (ms 단위)
 80026de:	2364      	movs	r3, #100	@ 0x64
 80026e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int rxTimeVal_slave     = 120; // RX LED 깜빡임 시간 (ms 단위)
 80026e2:	2378      	movs	r3, #120	@ 0x78
 80026e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    ms_tick_1++;
 80026e6:	4b91      	ldr	r3, [pc, #580]	@ (800292c <Timer_Interrupt_Proc+0x254>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b8f      	ldr	r3, [pc, #572]	@ (800292c <Timer_Interrupt_Proc+0x254>)
 80026f0:	801a      	strh	r2, [r3, #0]

    g_nLed_tick_1++; // LED 관련 1 ms 카운터
 80026f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002930 <Timer_Interrupt_Proc+0x258>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002930 <Timer_Interrupt_Proc+0x258>)
 80026fc:	801a      	strh	r2, [r3, #0]
    
    g_nRX_Led_tick_1++; // RX LED 관련 1 ms 카운터
 80026fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b8b      	ldr	r3, [pc, #556]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002708:	801a      	strh	r2, [r3, #0]

    alive_counter++;
 800270a:	4b8b      	ldr	r3, [pc, #556]	@ (8002938 <Timer_Interrupt_Proc+0x260>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b89      	ldr	r3, [pc, #548]	@ (8002938 <Timer_Interrupt_Proc+0x260>)
 8002714:	801a      	strh	r2, [r3, #0]
    g_nBoot_Tick++; // 부팅 타이머 증가
 8002716:	4b89      	ldr	r3, [pc, #548]	@ (800293c <Timer_Interrupt_Proc+0x264>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a87      	ldr	r2, [pc, #540]	@ (800293c <Timer_Interrupt_Proc+0x264>)
 800271e:	6013      	str	r3, [r2, #0]

    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 8002720:	4b82      	ldr	r3, [pc, #520]	@ (800292c <Timer_Interrupt_Proc+0x254>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	2bc7      	cmp	r3, #199	@ 0xc7
 8002726:	d902      	bls.n	800272e <Timer_Interrupt_Proc+0x56>
    {
      ms_tick_1 = 0;
 8002728:	4b80      	ldr	r3, [pc, #512]	@ (800292c <Timer_Interrupt_Proc+0x254>)
 800272a:	2200      	movs	r2, #0
 800272c:	801a      	strh	r2, [r3, #0]
      // HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
    }

    // ====================================================================
    // 10초마다 생존 메시지 전송
    if (g_nBoot_Status == BOOT_SUCCESS && alive_counter >= 15000)    // 10 s 경과 체크
 800272e:	4b84      	ldr	r3, [pc, #528]	@ (8002940 <Timer_Interrupt_Proc+0x268>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d132      	bne.n	800279c <Timer_Interrupt_Proc+0xc4>
 8002736:	4b80      	ldr	r3, [pc, #512]	@ (8002938 <Timer_Interrupt_Proc+0x260>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 800273e:	4293      	cmp	r3, r2
 8002740:	d92c      	bls.n	800279c <Timer_Interrupt_Proc+0xc4>
    {
      alive_counter = 0;
 8002742:	4b7d      	ldr	r3, [pc, #500]	@ (8002938 <Timer_Interrupt_Proc+0x260>)
 8002744:	2200      	movs	r2, #0
 8002746:	801a      	strh	r2, [r3, #0]

      /* 1) RTC에서 현재 시간 읽기 */
      HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8002748:	2200      	movs	r2, #0
 800274a:	497e      	ldr	r1, [pc, #504]	@ (8002944 <Timer_Interrupt_Proc+0x26c>)
 800274c:	487e      	ldr	r0, [pc, #504]	@ (8002948 <Timer_Interrupt_Proc+0x270>)
 800274e:	f002 fe32 	bl	80053b6 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8002752:	2200      	movs	r2, #0
 8002754:	497d      	ldr	r1, [pc, #500]	@ (800294c <Timer_Interrupt_Proc+0x274>)
 8002756:	487c      	ldr	r0, [pc, #496]	@ (8002948 <Timer_Interrupt_Proc+0x270>)
 8002758:	f002 ff0f 	bl	800557a <HAL_RTC_GetDate>

      /* 2) 문자열로 포맷 */
      char buf[64];

      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 800275c:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <Timer_Interrupt_Proc+0x274>)
 800275e:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8002760:	461d      	mov	r5, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8002762:	4b7a      	ldr	r3, [pc, #488]	@ (800294c <Timer_Interrupt_Proc+0x274>)
 8002764:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8002766:	461a      	mov	r2, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8002768:	4b76      	ldr	r3, [pc, #472]	@ (8002944 <Timer_Interrupt_Proc+0x26c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 800276c:	4619      	mov	r1, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 800276e:	4b75      	ldr	r3, [pc, #468]	@ (8002944 <Timer_Interrupt_Proc+0x26c>)
 8002770:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8002772:	461c      	mov	r4, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8002774:	4b73      	ldr	r3, [pc, #460]	@ (8002944 <Timer_Interrupt_Proc+0x26c>)
 8002776:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8002778:	1d38      	adds	r0, r7, #4
 800277a:	9303      	str	r3, [sp, #12]
 800277c:	9402      	str	r4, [sp, #8]
 800277e:	9101      	str	r1, [sp, #4]
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	462b      	mov	r3, r5
 8002784:	4a72      	ldr	r2, [pc, #456]	@ (8002950 <Timer_Interrupt_Proc+0x278>)
 8002786:	2140      	movs	r1, #64	@ 0x40
 8002788:	f009 fc5e 	bl	800c048 <sniprintf>
 800278c:	6478      	str	r0, [r7, #68]	@ 0x44

      /* 3) UART로 생존 및 시간 전송 */
      // UART1로 현재 시간 전송
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 800278e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002790:	b29a      	uxth	r2, r3
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4619      	mov	r1, r3
 8002796:	486f      	ldr	r0, [pc, #444]	@ (8002954 <Timer_Interrupt_Proc+0x27c>)
 8002798:	f005 fa6a 	bl	8007c70 <HAL_UART_Transmit_IT>
    // ====================================================================
    // 100 ms마다 Status LED 상태 변경
    // 비트연산할 변수하나 만들고 NOT 연산으로 LED 상태 변경
    // 예시: g_nLed_tick_1 = ~g_nLed_tick_1
    // 100 ms마다 LED 상태 변경
    if (g_nMode != MODE_AP) // AP 모드가 아닐 때만 LED 상태 변경
 800279c:	4b6e      	ldr	r3, [pc, #440]	@ (8002958 <Timer_Interrupt_Proc+0x280>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	f000 80b9 	beq.w	8002918 <Timer_Interrupt_Proc+0x240>
    {
        if (g_nLed_tick_1 >= 100) // 100 ms 경과
 80027a6:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <Timer_Interrupt_Proc+0x258>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	2b63      	cmp	r3, #99	@ 0x63
 80027ac:	d915      	bls.n	80027da <Timer_Interrupt_Proc+0x102>
        {
            g_nLed_tick_1 = 0; // 카운터 초기화
 80027ae:	4b60      	ldr	r3, [pc, #384]	@ (8002930 <Timer_Interrupt_Proc+0x258>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	801a      	strh	r2, [r3, #0]
            g_nLed_State = !g_nLed_State; // LED 상태 토글
 80027b4:	4b69      	ldr	r3, [pc, #420]	@ (800295c <Timer_Interrupt_Proc+0x284>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b65      	ldr	r3, [pc, #404]	@ (800295c <Timer_Interrupt_Proc+0x284>)
 80027c6:	701a      	strb	r2, [r3, #0]

            if (g_nLed_State)
 80027c8:	4b64      	ldr	r3, [pc, #400]	@ (800295c <Timer_Interrupt_Proc+0x284>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <Timer_Interrupt_Proc+0xfe>
            {
                STATUS_LED_On();  // LED ON
 80027d0:	f7ff fa64 	bl	8001c9c <STATUS_LED_On>
 80027d4:	e001      	b.n	80027da <Timer_Interrupt_Proc+0x102>
            }
            else
            {
                STATUS_LED_Off(); // LED OFF
 80027d6:	f7ff fa6f 	bl	8001cb8 <STATUS_LED_Off>
            }
        }
    

        // ====================================================================
        if (g_nBoot_Status == BOOT_SUCCESS)
 80027da:	4b59      	ldr	r3, [pc, #356]	@ (8002940 <Timer_Interrupt_Proc+0x268>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <Timer_Interrupt_Proc+0x124>
        {
            // 마스터 모드, 모기체
            if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == 0)
 80027e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002960 <Timer_Interrupt_Proc+0x288>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <Timer_Interrupt_Proc+0x11e>
            {
                // IDR 레지스터의 해당 핀이 0이면 (접지되어 있으면) MODE_MASTER
                g_nMode = MODE_MASTER;
 80027ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002958 <Timer_Interrupt_Proc+0x280>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e002      	b.n	80027fc <Timer_Interrupt_Proc+0x124>
                // TX_LED_Off();  // LED OFF
            }
            else    // 슬레이브 모드, 자기체
            {
                // 핀이 1이면 (풀업되어 있으면) 다른 모드로…
                g_nMode = MODE_SLAVE;  // 예시
 80027f6:	4b58      	ldr	r3, [pc, #352]	@ (8002958 <Timer_Interrupt_Proc+0x280>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]


        // 부팅 성공 이후부터 상태 LED표시 
        // 마스터 두번씩 깜빡임
        // 슬레이브 세번씩 깜빡임
        if (g_nBoot_Status == BOOT_SUCCESS)
 80027fc:	4b50      	ldr	r3, [pc, #320]	@ (8002940 <Timer_Interrupt_Proc+0x268>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f040 808f 	bne.w	8002924 <Timer_Interrupt_Proc+0x24c>
        {
            if (g_nMode == MODE_MASTER)
 8002806:	4b54      	ldr	r3, [pc, #336]	@ (8002958 <Timer_Interrupt_Proc+0x280>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d132      	bne.n	8002874 <Timer_Interrupt_Proc+0x19c>
            {
                // 마스터 모드일 때 LED 2번 깜빡임
                if (g_nRX_Led_tick_1 == rxTimeVal_master)
 800280e:	4b49      	ldr	r3, [pc, #292]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002816:	4293      	cmp	r3, r2
 8002818:	d102      	bne.n	8002820 <Timer_Interrupt_Proc+0x148>
                {
                    RX_LED_On();
 800281a:	f7ff fa15 	bl	8001c48 <RX_LED_On>
 800281e:	e029      	b.n	8002874 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*2)
 8002820:	4b44      	ldr	r3, [pc, #272]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	429a      	cmp	r2, r3
 800282c:	d102      	bne.n	8002834 <Timer_Interrupt_Proc+0x15c>
                {
                    RX_LED_Off();
 800282e:	f7ff fa19 	bl	8001c64 <RX_LED_Off>
 8002832:	e01f      	b.n	8002874 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*3)
 8002834:	4b3f      	ldr	r3, [pc, #252]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	4299      	cmp	r1, r3
 8002844:	d102      	bne.n	800284c <Timer_Interrupt_Proc+0x174>
                {
                    RX_LED_On();
 8002846:	f7ff f9ff 	bl	8001c48 <RX_LED_On>
 800284a:	e013      	b.n	8002874 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*4)
 800284c:	4b39      	ldr	r3, [pc, #228]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	429a      	cmp	r2, r3
 8002858:	d102      	bne.n	8002860 <Timer_Interrupt_Proc+0x188>
                {
                    RX_LED_Off();
 800285a:	f7ff fa03 	bl	8001c64 <RX_LED_Off>
 800285e:	e009      	b.n	8002874 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 >= 1000)
 8002860:	4b34      	ldr	r3, [pc, #208]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002868:	d304      	bcc.n	8002874 <Timer_Interrupt_Proc+0x19c>
                {
                    RX_LED_Off();
 800286a:	f7ff f9fb 	bl	8001c64 <RX_LED_Off>
                    g_nRX_Led_tick_1 = 0; // 카운터 초기화
 800286e:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002870:	2200      	movs	r2, #0
 8002872:	801a      	strh	r2, [r3, #0]
                }
            }
            if (g_nMode == MODE_SLAVE)
 8002874:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <Timer_Interrupt_Proc+0x280>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d153      	bne.n	8002924 <Timer_Interrupt_Proc+0x24c>
            {
                // 슬레이브 모드일 때 LED 3번 깜빡임
                if (g_nRX_Led_tick_1 == rxTimeVal_slave)
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002884:	4293      	cmp	r3, r2
 8002886:	d102      	bne.n	800288e <Timer_Interrupt_Proc+0x1b6>
                {
                    RX_LED_On();
 8002888:	f7ff f9de 	bl	8001c48 <RX_LED_On>
        STATUS_LED_On();
    }


    
}
 800288c:	e04a      	b.n	8002924 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*2)
 800288e:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	429a      	cmp	r2, r3
 800289a:	d102      	bne.n	80028a2 <Timer_Interrupt_Proc+0x1ca>
                    RX_LED_Off();
 800289c:	f7ff f9e2 	bl	8001c64 <RX_LED_Off>
}
 80028a0:	e040      	b.n	8002924 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*3)
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	4299      	cmp	r1, r3
 80028b2:	d102      	bne.n	80028ba <Timer_Interrupt_Proc+0x1e2>
                    RX_LED_On();
 80028b4:	f7ff f9c8 	bl	8001c48 <RX_LED_On>
}
 80028b8:	e034      	b.n	8002924 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*4)
 80028ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d102      	bne.n	80028ce <Timer_Interrupt_Proc+0x1f6>
                    RX_LED_Off();
 80028c8:	f7ff f9cc 	bl	8001c64 <RX_LED_Off>
}
 80028cc:	e02a      	b.n	8002924 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*5)
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	4299      	cmp	r1, r3
 80028de:	d102      	bne.n	80028e6 <Timer_Interrupt_Proc+0x20e>
                    RX_LED_On();
 80028e0:	f7ff f9b2 	bl	8001c48 <RX_LED_On>
}
 80028e4:	e01e      	b.n	8002924 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*6)
 80028e6:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4299      	cmp	r1, r3
 80028f8:	d102      	bne.n	8002900 <Timer_Interrupt_Proc+0x228>
                    RX_LED_Off();
 80028fa:	f7ff f9b3 	bl	8001c64 <RX_LED_Off>
}
 80028fe:	e011      	b.n	8002924 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 >= 1500)
 8002900:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002908:	4293      	cmp	r3, r2
 800290a:	d90b      	bls.n	8002924 <Timer_Interrupt_Proc+0x24c>
                    RX_LED_Off();
 800290c:	f7ff f9aa 	bl	8001c64 <RX_LED_Off>
                    g_nRX_Led_tick_1 = 0; // 카운터 초기화
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <Timer_Interrupt_Proc+0x25c>)
 8002912:	2200      	movs	r2, #0
 8002914:	801a      	strh	r2, [r3, #0]
}
 8002916:	e005      	b.n	8002924 <Timer_Interrupt_Proc+0x24c>
        RX_LED_On();
 8002918:	f7ff f996 	bl	8001c48 <RX_LED_On>
        TX_LED_On();
 800291c:	f7ff f9b0 	bl	8001c80 <TX_LED_On>
        STATUS_LED_On();
 8002920:	f7ff f9bc 	bl	8001c9c <STATUS_LED_On>
}
 8002924:	bf00      	nop
 8002926:	3750      	adds	r7, #80	@ 0x50
 8002928:	46bd      	mov	sp, r7
 800292a:	bdb0      	pop	{r4, r5, r7, pc}
 800292c:	200007f4 	.word	0x200007f4
 8002930:	200007f6 	.word	0x200007f6
 8002934:	200007f8 	.word	0x200007f8
 8002938:	200007fc 	.word	0x200007fc
 800293c:	20000808 	.word	0x20000808
 8002940:	20000000 	.word	0x20000000
 8002944:	200007dc 	.word	0x200007dc
 8002948:	20000578 	.word	0x20000578
 800294c:	200007f0 	.word	0x200007f0
 8002950:	0800d960 	.word	0x0800d960
 8002954:	20000704 	.word	0x20000704
 8002958:	20000800 	.word	0x20000800
 800295c:	200007fa 	.word	0x200007fa
 8002960:	40021000 	.word	0x40021000

08002964 <Main_System>:
// ─────────────────────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────────────────────

void Main_System(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
    switch (g_nMode)
 8002968:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <Main_System+0x48>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b06      	cmp	r3, #6
 800296e:	d81a      	bhi.n	80029a6 <Main_System+0x42>
 8002970:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <Main_System+0x14>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	08002995 	.word	0x08002995
 800297c:	080029a7 	.word	0x080029a7
 8002980:	0800299b 	.word	0x0800299b
 8002984:	080029a7 	.word	0x080029a7
 8002988:	080029a7 	.word	0x080029a7
 800298c:	080029a7 	.word	0x080029a7
 8002990:	080029a1 	.word	0x080029a1
    {
    case MODE_MASTER:
        Master_Proc();
 8002994:	f7ff fe4e 	bl	8002634 <Master_Proc>
        break;
 8002998:	e006      	b.n	80029a8 <Main_System+0x44>
    case MODE_SLAVE:
        break;
    case MODE_AP:
        AP_Mode_Proc();
 800299a:	f7ff fd93 	bl	80024c4 <AP_Mode_Proc>
        break;
 800299e:	e003      	b.n	80029a8 <Main_System+0x44>
    case MODE_DEGUG:
        DEBUG_Proc();
 80029a0:	f7ff fe54 	bl	800264c <DEBUG_Proc>
        break;
 80029a4:	e000      	b.n	80029a8 <Main_System+0x44>
    
    default:
        break;
 80029a6:	bf00      	nop
    }
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000800 	.word	0x20000800

080029b0 <Oper_CCM_Init>:
//                                                       
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// CCM 영역 초기화 함수
void Oper_CCM_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
    UTC_Time_Init();      // UTC 시간 초기화
 80029b4:	f7fe f986 	bl	8000cc4 <UTC_Time_Init>
    SERVER_API_Init();    // 서버 API 초기화
 80029b8:	f000 fe2e 	bl	8003618 <SERVER_API_Init>
    DEVICE_Init();        // 디바이스 초기화
 80029bc:	f7fe f8c6 	bl	8000b4c <DEVICE_Init>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <Oper_Init>:
//                                                                                                                         
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 기본 초기화
void Oper_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
    FRAM_Init(); // FRAM 초기화
 80029c8:	f7fe f8aa 	bl	8000b20 <FRAM_Init>
    // 부팅 상태 초기화
    g_nBoot_Status = BOOT_IN_PROGRESS; // 부팅 상태를 부팅 중으로 설정
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <Oper_Init+0x18>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]

    LED_Init(); // LED 초기화
 80029d2:	f7ff f8b7 	bl	8001b44 <LED_Init>
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <Oper_Boot>:
// 4. UTC시간 서버 연결
// 5. RTC 시간 동기화
// 6. 토큰 요청 및 반환
// 7. 기기 MAC 주소 조회 (기기 고유값)
void Oper_Boot(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
    int bootLoop = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
    int step = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
    int result = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
    const char *token;
    const char *macAddress;

    while (bootLoop)
 80029f2:	e1fa      	b.n	8002dea <Oper_Boot+0x40a>
    {
        switch (step)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	f200 81f6 	bhi.w	8002de8 <Oper_Boot+0x408>
 80029fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <Oper_Boot+0x24>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a29 	.word	0x08002a29
 8002a08:	08002a5d 	.word	0x08002a5d
 8002a0c:	08002a91 	.word	0x08002a91
 8002a10:	08002ac5 	.word	0x08002ac5
 8002a14:	08002b7d 	.word	0x08002b7d
 8002a18:	08002bd5 	.word	0x08002bd5
 8002a1c:	08002c23 	.word	0x08002c23
 8002a20:	08002c77 	.word	0x08002c77
 8002a24:	08002d65 	.word	0x08002d65
        {
        case 0:
            result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 8002a28:	f000 fb94 	bl	8003154 <SD_Card_Boot>
 8002a2c:	60f8      	str	r0, [r7, #12]
            
            SD_Card_Log("SD Card Boot...\n");
 8002a2e:	48a7      	ldr	r0, [pc, #668]	@ (8002ccc <Oper_Boot+0x2ec>)
 8002a30:	f000 fd48 	bl	80034c4 <SD_Card_Log>
            
            if (result == SD_OK)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <Oper_Boot+0x68>
            {
                SD_Card_Log("SD Card Booted Successfully!\n");
 8002a3a:	48a5      	ldr	r0, [pc, #660]	@ (8002cd0 <Oper_Boot+0x2f0>)
 8002a3c:	f000 fd42 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	3301      	adds	r3, #1
 8002a44:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // SD 카드 부팅 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 8002a46:	e1d0      	b.n	8002dea <Oper_Boot+0x40a>
                SD_Card_Log("SD Card Boot Failed!\n");
 8002a48:	48a2      	ldr	r0, [pc, #648]	@ (8002cd4 <Oper_Boot+0x2f4>)
 8002a4a:	f000 fd3b 	bl	80034c4 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002a4e:	48a2      	ldr	r0, [pc, #648]	@ (8002cd8 <Oper_Boot+0x2f8>)
 8002a50:	f000 fd38 	bl	80034c4 <SD_Card_Log>
                Error_Proc(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7ff fdbd 	bl	80025d4 <Error_Proc>
            break;
 8002a5a:	e1c6      	b.n	8002dea <Oper_Boot+0x40a>
            // ====================================================================
        case 1:
            result = ESP_AT_Boot(); // ESP32 AT 테스트
 8002a5c:	f7fe f93e 	bl	8000cdc <ESP_AT_Boot>
 8002a60:	60f8      	str	r0, [r7, #12]

            SD_Card_Log("ESP32 AT Boot...\n");
 8002a62:	489e      	ldr	r0, [pc, #632]	@ (8002cdc <Oper_Boot+0x2fc>)
 8002a64:	f000 fd2e 	bl	80034c4 <SD_Card_Log>

            if (result == AT_OK)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <Oper_Boot+0x9c>
            {
                SD_Card_Log("ESP32 AT Booted Successfully!\n");
 8002a6e:	489c      	ldr	r0, [pc, #624]	@ (8002ce0 <Oper_Boot+0x300>)
 8002a70:	f000 fd28 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	3301      	adds	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // ESP32 AT 부팅 실패 시 에러 처리
                //Error_Handler();
                Error_Proc(1);
            }
            break;
 8002a7a:	e1b6      	b.n	8002dea <Oper_Boot+0x40a>
                SD_Card_Log("ESP32 AT Boot Failed!\n");
 8002a7c:	4899      	ldr	r0, [pc, #612]	@ (8002ce4 <Oper_Boot+0x304>)
 8002a7e:	f000 fd21 	bl	80034c4 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002a82:	4895      	ldr	r0, [pc, #596]	@ (8002cd8 <Oper_Boot+0x2f8>)
 8002a84:	f000 fd1e 	bl	80034c4 <SD_Card_Log>
                Error_Proc(1);
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f7ff fda3 	bl	80025d4 <Error_Proc>
            break;
 8002a8e:	e1ac      	b.n	8002dea <Oper_Boot+0x40a>

        case 2:
            result = ESP_AT_Get_Firmware_Version(); // ESP32 AT 명령어로 펌웨어 버전 조회
 8002a90:	f7fe fb72 	bl	8001178 <ESP_AT_Get_Firmware_Version>
 8002a94:	60f8      	str	r0, [r7, #12]
            
            SD_Card_Log("ESP32 AT Firmware Version Retrieval...\n");
 8002a96:	4894      	ldr	r0, [pc, #592]	@ (8002ce8 <Oper_Boot+0x308>)
 8002a98:	f000 fd14 	bl	80034c4 <SD_Card_Log>

            if (result == AT_OK)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <Oper_Boot+0xd0>
            {
                SD_Card_Log("ESP32 AT Firmware Version Retrieved Successfully!\n");
 8002aa2:	4892      	ldr	r0, [pc, #584]	@ (8002cec <Oper_Boot+0x30c>)
 8002aa4:	f000 fd0e 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // ESP32 AT 펌웨어 버전 조회 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 8002aae:	e19c      	b.n	8002dea <Oper_Boot+0x40a>
                SD_Card_Log("ESP32 AT Firmware Version Retrieval Failed!\n");
 8002ab0:	488f      	ldr	r0, [pc, #572]	@ (8002cf0 <Oper_Boot+0x310>)
 8002ab2:	f000 fd07 	bl	80034c4 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002ab6:	4888      	ldr	r0, [pc, #544]	@ (8002cd8 <Oper_Boot+0x2f8>)
 8002ab8:	f000 fd04 	bl	80034c4 <SD_Card_Log>
                Error_Proc(1);
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7ff fd89 	bl	80025d4 <Error_Proc>
            break;
 8002ac2:	e192      	b.n	8002dea <Oper_Boot+0x40a>
            // ====================================================================
        case 3:
            // 현재 모드가 AP 모드인지 확인
            if (g_nMode == MODE_AP) // AP 모드인 경우
 8002ac4:	4b8b      	ldr	r3, [pc, #556]	@ (8002cf4 <Oper_Boot+0x314>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d107      	bne.n	8002adc <Oper_Boot+0xfc>
            {
                SD_Card_Log("AP Mode Detected. Skipping BOOT Configuration...\n");
 8002acc:	488a      	ldr	r0, [pc, #552]	@ (8002cf8 <Oper_Boot+0x318>)
 8002ace:	f000 fcf9 	bl	80034c4 <SD_Card_Log>
                step = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
                bootLoop = 0; // 부팅 루프 종료
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
                break; // WiFi 설정 단계 건너뛰기
 8002ada:	e186      	b.n	8002dea <Oper_Boot+0x40a>
            }
            
            // Save_Wifi_Status_FRAM_Dummy(); // wifi 상태 초기화
            Load_Wifi_Status_FRAM(); // FRAM에서 WiFi 상태 로드
 8002adc:	f7fd fea2 	bl	8000824 <Load_Wifi_Status_FRAM>

            g_nWifi_Status = DEVICE_WIFI_DISCONNECTED; // WiFi 연결 상태 초기화
 8002ae0:	4b86      	ldr	r3, [pc, #536]	@ (8002cfc <Oper_Boot+0x31c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("WiFi Configuration...\n");
 8002ae6:	4886      	ldr	r0, [pc, #536]	@ (8002d00 <Oper_Boot+0x320>)
 8002ae8:	f000 fcec 	bl	80034c4 <SD_Card_Log>

            if (g_nWifi_Status == DEVICE_WIFI_DISCONNECTED) // WiFi가 연결되지 않은 경우
 8002aec:	4b83      	ldr	r3, [pc, #524]	@ (8002cfc <Oper_Boot+0x31c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11c      	bne.n	8002b2e <Oper_Boot+0x14e>
            {
                // ESP32 AT 명령어를 통해 현재 WiFi 모드 조회
                ESP_AT_Send_Command_Sync("AT+CWMODE?\r\n");
 8002af4:	4883      	ldr	r0, [pc, #524]	@ (8002d04 <Oper_Boot+0x324>)
 8002af6:	f7fe f9ad 	bl	8000e54 <ESP_AT_Send_Command_Sync>

                // ESP32 AT 명령어를 통해 WiFi 모드 설정 스테이션 모드 + AP모드
                ESP_AT_Send_Command_Sync("AT+CWMODE=3\r\n");
 8002afa:	4883      	ldr	r0, [pc, #524]	@ (8002d08 <Oper_Boot+0x328>)
 8002afc:	f7fe f9aa 	bl	8000e54 <ESP_AT_Send_Command_Sync>
                // 0 = OPEN
                // 1 = WEP
                // 2 = WPA_PSK
                // 3 = WPA2_PSK
                // 4 = WPA_WPA2_PSK
                ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT\",\"\",5,0\r\n");
 8002b00:	4882      	ldr	r0, [pc, #520]	@ (8002d0c <Oper_Boot+0x32c>)
 8002b02:	f7fe f9a7 	bl	8000e54 <ESP_AT_Send_Command_Sync>

                // 연결 가능한 WiFi AP 목록 조회
                ESP_AT_Send_Command_Sync("AT+CWLAP\r\n");
 8002b06:	4882      	ldr	r0, [pc, #520]	@ (8002d10 <Oper_Boot+0x330>)
 8002b08:	f7fe f9a4 	bl	8000e54 <ESP_AT_Send_Command_Sync>

                result = ESP_AT_Send_WiFi_Config(); // WiFi 설정 전송
 8002b0c:	f7fe f928 	bl	8000d60 <ESP_AT_Send_WiFi_Config>
 8002b10:	60f8      	str	r0, [r7, #12]

                if (result == AT_OK) // WiFi 설정 전송 성공
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <Oper_Boot+0x140>
                {
                    g_nWifi_Status = DEVICE_WIFI_CONNECTED; // WiFi 연결 상태 업데이트
 8002b18:	4b78      	ldr	r3, [pc, #480]	@ (8002cfc <Oper_Boot+0x31c>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e002      	b.n	8002b26 <Oper_Boot+0x146>
                }
                else
                {
                    g_nWifi_Status = DEVICE_WIFI_DISCONNECTED; // WiFi 연결 상태 업데이트 실패
 8002b20:	4b76      	ldr	r3, [pc, #472]	@ (8002cfc <Oper_Boot+0x31c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
                }
            
                Save_Wifi_Status_FRAM(); // FRAM에 WiFi 상태 저장
 8002b26:	f7fd fe99 	bl	800085c <Save_Wifi_Status_FRAM>

                result = AT_OK; // WiFi 설정 성공
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
            }
            if (g_nWifi_Status == DEVICE_WIFI_CONNECTED) // WiFi가 연결된 경우
 8002b2e:	4b73      	ldr	r3, [pc, #460]	@ (8002cfc <Oper_Boot+0x31c>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <Oper_Boot+0x162>
            {
                // ESP32 AT 명령어를 통해 현재 WiFi IP 주소 조회
                ESP_AT_Send_Command_Sync("AT+CIFSR\r\n");
 8002b36:	4877      	ldr	r0, [pc, #476]	@ (8002d14 <Oper_Boot+0x334>)
 8002b38:	f7fe f98c 	bl	8000e54 <ESP_AT_Send_Command_Sync>
                result = AT_OK; // WiFi 연결 성공
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e001      	b.n	8002b46 <Oper_Boot+0x166>
            } 
            else // WiFi 연결 실패 시
            {
                result = AT_ERROR; // WiFi 연결 실패
 8002b42:	2301      	movs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
            }

            if (result == AT_OK)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10d      	bne.n	8002b68 <Oper_Boot+0x188>
            {
                SD_Card_Log("WiFi Configuration Sent Successfully!\n");
 8002b4c:	4872      	ldr	r0, [pc, #456]	@ (8002d18 <Oper_Boot+0x338>)
 8002b4e:	f000 fcb9 	bl	80034c4 <SD_Card_Log>

                HAL_UART_Transmit(&huart1, (uint8_t*)"WiFi Configuration Sent Successfully!\n", 40, HAL_MAX_DELAY);
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	2228      	movs	r2, #40	@ 0x28
 8002b58:	496f      	ldr	r1, [pc, #444]	@ (8002d18 <Oper_Boot+0x338>)
 8002b5a:	4870      	ldr	r0, [pc, #448]	@ (8002d1c <Oper_Boot+0x33c>)
 8002b5c:	f004 ff66 	bl	8007a2c <HAL_UART_Transmit>
                
                step++; // 다음 단계로 이동
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3301      	adds	r3, #1
 8002b64:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // WiFi 설정 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 8002b66:	e140      	b.n	8002dea <Oper_Boot+0x40a>
                SD_Card_Log("WiFi Configuration Failed!\n");
 8002b68:	486d      	ldr	r0, [pc, #436]	@ (8002d20 <Oper_Boot+0x340>)
 8002b6a:	f000 fcab 	bl	80034c4 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002b6e:	485a      	ldr	r0, [pc, #360]	@ (8002cd8 <Oper_Boot+0x2f8>)
 8002b70:	f000 fca8 	bl	80034c4 <SD_Card_Log>
                Error_Proc(1);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7ff fd2d 	bl	80025d4 <Error_Proc>
            break;
 8002b7a:	e136      	b.n	8002dea <Oper_Boot+0x40a>
            // ====================================================================
        case 4:
            // Save_TimeStatus_FRAM_Dummy();  // 시간 상태 초기화
            // SNTP 서버 연결 및 시간 구조 저장
            Load_TimeStatus_FRAM(); // FRAM에서 시간 동기화 상태 로드
 8002b7c:	f7fd fe22 	bl	80007c4 <Load_TimeStatus_FRAM>

            g_nTime_Status = DEVICE_TIME_NOT_SYNCED; // 시간 동기화 상태 초기화
 8002b80:	4b68      	ldr	r3, [pc, #416]	@ (8002d24 <Oper_Boot+0x344>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("SNTP Server Connection...\n");
 8002b86:	4868      	ldr	r0, [pc, #416]	@ (8002d28 <Oper_Boot+0x348>)
 8002b88:	f000 fc9c 	bl	80034c4 <SD_Card_Log>

            if (g_nTime_Status == DEVICE_TIME_NOT_SYNCED) // 시간 동기화가 안 된 경우
 8002b8c:	4b65      	ldr	r3, [pc, #404]	@ (8002d24 <Oper_Boot+0x344>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d118      	bne.n	8002bc6 <Oper_Boot+0x1e6>
            {
                // 서버 연결 후 시간 구조 저장 
                result = ESP_AT_Set_SNTP_Time(AT_SNTP_UTC_OFFSET);
 8002b94:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8002b98:	f7fe fc40 	bl	800141c <ESP_AT_Set_SNTP_Time>
 8002b9c:	60f8      	str	r0, [r7, #12]

                if (result == AT_OK) // SNTP 서버 연결 성공
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <Oper_Boot+0x1d2>
                {
                    SD_Card_Log("SNTP Server Connected Successfully!\n");
 8002ba4:	4861      	ldr	r0, [pc, #388]	@ (8002d2c <Oper_Boot+0x34c>)
 8002ba6:	f000 fc8d 	bl	80034c4 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	3301      	adds	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
            else // 시간 동기화가 이미 된 경우
            {
                SD_Card_Log("Time Already Synced!\n");
                step++; // 다음 단계로 이동
            }
            break;
 8002bb0:	e11b      	b.n	8002dea <Oper_Boot+0x40a>
                    SD_Card_Log("SNTP Server Connection Failed!\n");
 8002bb2:	485f      	ldr	r0, [pc, #380]	@ (8002d30 <Oper_Boot+0x350>)
 8002bb4:	f000 fc86 	bl	80034c4 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8002bb8:	4847      	ldr	r0, [pc, #284]	@ (8002cd8 <Oper_Boot+0x2f8>)
 8002bba:	f000 fc83 	bl	80034c4 <SD_Card_Log>
                    Error_Proc(1);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f7ff fd08 	bl	80025d4 <Error_Proc>
            break;
 8002bc4:	e111      	b.n	8002dea <Oper_Boot+0x40a>
                SD_Card_Log("Time Already Synced!\n");
 8002bc6:	485b      	ldr	r0, [pc, #364]	@ (8002d34 <Oper_Boot+0x354>)
 8002bc8:	f000 fc7c 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	613b      	str	r3, [r7, #16]
            break;
 8002bd2:	e10a      	b.n	8002dea <Oper_Boot+0x40a>
            // ====================================================================
        case 5:
            // 저장된 시간 구조 RTC 동기화
            if (g_nTime_Status == DEVICE_TIME_NOT_SYNCED) // 시간 동기화가 안 된 경우
 8002bd4:	4b53      	ldr	r3, [pc, #332]	@ (8002d24 <Oper_Boot+0x344>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d11b      	bne.n	8002c14 <Oper_Boot+0x234>
            {
                result = RTC_Set_UTC(); // RTC 초기화 및 UTC 시간 설정
 8002bdc:	f000 f9aa 	bl	8002f34 <RTC_Set_UTC>
 8002be0:	60f8      	str	r0, [r7, #12]
                
                g_nTime_Status = DEVICE_TIME_SYNCED; // 시간 동기화 상태 업데이트
 8002be2:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <Oper_Boot+0x344>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]

                Save_TimeStatus_FRAM(); // FRAM에 시간 동기화 상태 저장
 8002be8:	f7fd fe08 	bl	80007fc <Save_TimeStatus_FRAM>
                
                if (result == RTC_OK) // RTC 설정 성공
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <Oper_Boot+0x220>
                {
                    SD_Card_Log("RTC Set to UTC Successfully!\n");
 8002bf2:	4851      	ldr	r0, [pc, #324]	@ (8002d38 <Oper_Boot+0x358>)
 8002bf4:	f000 fc66 	bl	80034c4 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
            else
            {
                SD_Card_Log("RTC Already Synced!\n");
                step++; // 다음 단계로 이동
            }
            break;
 8002bfe:	e0f4      	b.n	8002dea <Oper_Boot+0x40a>
                    SD_Card_Log("RTC Set to UTC Failed!\n");
 8002c00:	484e      	ldr	r0, [pc, #312]	@ (8002d3c <Oper_Boot+0x35c>)
 8002c02:	f000 fc5f 	bl	80034c4 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8002c06:	4834      	ldr	r0, [pc, #208]	@ (8002cd8 <Oper_Boot+0x2f8>)
 8002c08:	f000 fc5c 	bl	80034c4 <SD_Card_Log>
                    Error_Proc(1);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f7ff fce1 	bl	80025d4 <Error_Proc>
            break;
 8002c12:	e0ea      	b.n	8002dea <Oper_Boot+0x40a>
                SD_Card_Log("RTC Already Synced!\n");
 8002c14:	484a      	ldr	r0, [pc, #296]	@ (8002d40 <Oper_Boot+0x360>)
 8002c16:	f000 fc55 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	613b      	str	r3, [r7, #16]
            break;
 8002c20:	e0e3      	b.n	8002dea <Oper_Boot+0x40a>

        case 6:
            // 토큰 상태 로드
            Load_Token_Status_FRAM(); // FRAM에서 토큰 상태 로드
 8002c22:	f7fd fe2f 	bl	8000884 <Load_Token_Status_FRAM>

            g_nToken_Status = DEVICE_TOKEN_NOT_SET;
 8002c26:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <Oper_Boot+0x364>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("Token Configuration...\n");
 8002c2c:	4846      	ldr	r0, [pc, #280]	@ (8002d48 <Oper_Boot+0x368>)
 8002c2e:	f000 fc49 	bl	80034c4 <SD_Card_Log>

            if (g_nToken_Status == DEVICE_TOKEN_NOT_SET) // 토큰이 설정되지 않은 경우
 8002c32:	4b44      	ldr	r3, [pc, #272]	@ (8002d44 <Oper_Boot+0x364>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d114      	bne.n	8002c64 <Oper_Boot+0x284>
            {
                token = ESP_AT_Get_Token(); // ESP32 AT 명령어를 통해 토큰 조회
 8002c3a:	f7fe fae1 	bl	8001200 <ESP_AT_Get_Token>
 8002c3e:	6078      	str	r0, [r7, #4]

                SERVER_API_Set_Token(token); // 서버 API 토큰 저장 함수 호출
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fcf5 	bl	8003630 <SERVER_API_Set_Token>

                // 메모리에 토큰 저장
                Save_Token_FRAM(token); // FRAM에 토큰 저장
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd fe4c 	bl	80008e4 <Save_Token_FRAM>

                g_nToken_Status = DEVICE_TOKEN_SET; // 토큰 상태 업데이트
 8002c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <Oper_Boot+0x364>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
                Save_Token_Status_FRAM(); // FRAM에 토큰 상태 저장
 8002c52:	f7fd fe33 	bl	80008bc <Save_Token_Status_FRAM>

                SD_Card_Log("Token Set Successfully!\n");
 8002c56:	483d      	ldr	r0, [pc, #244]	@ (8002d4c <Oper_Boot+0x36c>)
 8002c58:	f000 fc34 	bl	80034c4 <SD_Card_Log>

                step++; // 다음 단계로 이동
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	613b      	str	r3, [r7, #16]
                SD_Card_Log("Token Already Set!\n");

                // 다음 스텝
                step++; // 다음 단계로 이동
            }
            break;
 8002c62:	e0c2      	b.n	8002dea <Oper_Boot+0x40a>
                Load_Token_FRAM(); // FRAM에서 토큰 로드
 8002c64:	f7fd fe7e 	bl	8000964 <Load_Token_FRAM>
                SD_Card_Log("Token Already Set!\n");
 8002c68:	4839      	ldr	r0, [pc, #228]	@ (8002d50 <Oper_Boot+0x370>)
 8002c6a:	f000 fc2b 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	3301      	adds	r3, #1
 8002c72:	613b      	str	r3, [r7, #16]
            break;
 8002c74:	e0b9      	b.n	8002dea <Oper_Boot+0x40a>
        case 7:
            // MAC 주소 상태 로드
            Load_MAC_Status_FRAM(); // FRAM에서 MAC 주소 상태 로드
 8002c76:	f7fd feb3 	bl	80009e0 <Load_MAC_Status_FRAM>

            g_nMac_Status = DEVICE_MAC_NOT_SET;
 8002c7a:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <Oper_Boot+0x374>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("MAC Address Configuration...\n");
 8002c80:	4835      	ldr	r0, [pc, #212]	@ (8002d58 <Oper_Boot+0x378>)
 8002c82:	f000 fc1f 	bl	80034c4 <SD_Card_Log>

            if (g_nMac_Status == DEVICE_MAC_NOT_SET) // MAC 주소가 설정되지 않은 경우
 8002c86:	4b33      	ldr	r3, [pc, #204]	@ (8002d54 <Oper_Boot+0x374>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d114      	bne.n	8002cb8 <Oper_Boot+0x2d8>
            {
                macAddress = ESP_AT_Get_MAC_Address(); // ESP32 AT 명령어를 통해 MAC 주소 조회
 8002c8e:	f7fe fb3f 	bl	8001310 <ESP_AT_Get_MAC_Address>
 8002c92:	60b8      	str	r0, [r7, #8]

                // MAC 주소 저장
                SERVER_API_Set_MAC_Address(macAddress);  // 서버 API MAC 주소 저장 함수 호출
 8002c94:	68b8      	ldr	r0, [r7, #8]
 8002c96:	f000 fce7 	bl	8003668 <SERVER_API_Set_MAC_Address>

                // 메모리에 MAC 주소 저장
                Save_MAC_FRAM(macAddress); // FRAM에 MAC 주소 저장
 8002c9a:	68b8      	ldr	r0, [r7, #8]
 8002c9c:	f7fd fed0 	bl	8000a40 <Save_MAC_FRAM>
                
                g_nMac_Status = DEVICE_MAC_SET; // MAC 주소 상태 업데이트
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d54 <Oper_Boot+0x374>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
                Save_MAC_Status_FRAM(); // FRAM에 MAC 주소 상태 저장
 8002ca6:	f7fd feb7 	bl	8000a18 <Save_MAC_Status_FRAM>

                SD_Card_Log("MAC Address Set Successfully!\n");
 8002caa:	482c      	ldr	r0, [pc, #176]	@ (8002d5c <Oper_Boot+0x37c>)
 8002cac:	f000 fc0a 	bl	80034c4 <SD_Card_Log>

                step++; // 다음 단계로 이동
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	613b      	str	r3, [r7, #16]

                SD_Card_Log("MAC Address Already Set!\n");

                step++; // 다음 단계로 이동
            }
            break;
 8002cb6:	e098      	b.n	8002dea <Oper_Boot+0x40a>
                Load_MAC_FRAM(); // FRAM에서 MAC 주소 로드
 8002cb8:	f7fd feee 	bl	8000a98 <Load_MAC_FRAM>
                SD_Card_Log("MAC Address Already Set!\n");
 8002cbc:	4828      	ldr	r0, [pc, #160]	@ (8002d60 <Oper_Boot+0x380>)
 8002cbe:	f000 fc01 	bl	80034c4 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
            break;
 8002cc8:	e08f      	b.n	8002dea <Oper_Boot+0x40a>
 8002cca:	bf00      	nop
 8002ccc:	0800d984 	.word	0x0800d984
 8002cd0:	0800d998 	.word	0x0800d998
 8002cd4:	0800d9b8 	.word	0x0800d9b8
 8002cd8:	0800d9d0 	.word	0x0800d9d0
 8002cdc:	0800d9dc 	.word	0x0800d9dc
 8002ce0:	0800d9f0 	.word	0x0800d9f0
 8002ce4:	0800da10 	.word	0x0800da10
 8002ce8:	0800da28 	.word	0x0800da28
 8002cec:	0800da50 	.word	0x0800da50
 8002cf0:	0800da84 	.word	0x0800da84
 8002cf4:	20000800 	.word	0x20000800
 8002cf8:	0800dab4 	.word	0x0800dab4
 8002cfc:	20000801 	.word	0x20000801
 8002d00:	0800dae8 	.word	0x0800dae8
 8002d04:	0800db00 	.word	0x0800db00
 8002d08:	0800db10 	.word	0x0800db10
 8002d0c:	0800db20 	.word	0x0800db20
 8002d10:	0800db3c 	.word	0x0800db3c
 8002d14:	0800db48 	.word	0x0800db48
 8002d18:	0800db54 	.word	0x0800db54
 8002d1c:	20000704 	.word	0x20000704
 8002d20:	0800db7c 	.word	0x0800db7c
 8002d24:	20000802 	.word	0x20000802
 8002d28:	0800db98 	.word	0x0800db98
 8002d2c:	0800dbb4 	.word	0x0800dbb4
 8002d30:	0800dbdc 	.word	0x0800dbdc
 8002d34:	0800dbfc 	.word	0x0800dbfc
 8002d38:	0800dc14 	.word	0x0800dc14
 8002d3c:	0800dc34 	.word	0x0800dc34
 8002d40:	0800dc4c 	.word	0x0800dc4c
 8002d44:	20000803 	.word	0x20000803
 8002d48:	0800dc64 	.word	0x0800dc64
 8002d4c:	0800dc7c 	.word	0x0800dc7c
 8002d50:	0800dc98 	.word	0x0800dc98
 8002d54:	20000804 	.word	0x20000804
 8002d58:	0800dcac 	.word	0x0800dcac
 8002d5c:	0800dccc 	.word	0x0800dccc
 8002d60:	0800dcec 	.word	0x0800dcec
        case 8:
            // 모든 초기화가 완료된 후 최종 상태 로그
            SD_Card_Log("Device Booted Successfully!\n");
 8002d64:	4825      	ldr	r0, [pc, #148]	@ (8002dfc <Oper_Boot+0x41c>)
 8002d66:	f000 fbad 	bl	80034c4 <SD_Card_Log>
            
            // 부팅 최종 시간 SD카드 기록
            SD_Card_Log("Current Boot Time: ");
 8002d6a:	4825      	ldr	r0, [pc, #148]	@ (8002e00 <Oper_Boot+0x420>)
 8002d6c:	f000 fbaa 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Year_String());
 8002d70:	f000 f954 	bl	800301c <RTC_Get_Synced_Year_String>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fba4 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log("-");
 8002d7c:	4821      	ldr	r0, [pc, #132]	@ (8002e04 <Oper_Boot+0x424>)
 8002d7e:	f000 fba1 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Month_String());
 8002d82:	f000 f965 	bl	8003050 <RTC_Get_Synced_Month_String>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fb9b 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log("-");
 8002d8e:	481d      	ldr	r0, [pc, #116]	@ (8002e04 <Oper_Boot+0x424>)
 8002d90:	f000 fb98 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Date_String());
 8002d94:	f000 f976 	bl	8003084 <RTC_Get_Synced_Date_String>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fb92 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(" ");
 8002da0:	4819      	ldr	r0, [pc, #100]	@ (8002e08 <Oper_Boot+0x428>)
 8002da2:	f000 fb8f 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Hour_String());
 8002da6:	f000 f987 	bl	80030b8 <RTC_Get_Synced_Hour_String>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fb89 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(":");
 8002db2:	4816      	ldr	r0, [pc, #88]	@ (8002e0c <Oper_Boot+0x42c>)
 8002db4:	f000 fb86 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Minute_String());
 8002db8:	f000 f998 	bl	80030ec <RTC_Get_Synced_Minute_String>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fb80 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(":");
 8002dc4:	4811      	ldr	r0, [pc, #68]	@ (8002e0c <Oper_Boot+0x42c>)
 8002dc6:	f000 fb7d 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Second_String());
 8002dca:	f000 f9a9 	bl	8003120 <RTC_Get_Synced_Second_String>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fb77 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log("\n");
 8002dd6:	480e      	ldr	r0, [pc, #56]	@ (8002e10 <Oper_Boot+0x430>)
 8002dd8:	f000 fb74 	bl	80034c4 <SD_Card_Log>
            SD_Card_Log("==================<< DONE >>==================\n");
 8002ddc:	480d      	ldr	r0, [pc, #52]	@ (8002e14 <Oper_Boot+0x434>)
 8002dde:	f000 fb71 	bl	80034c4 <SD_Card_Log>

            bootLoop = 0; // 부팅 루프 종료
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
            break;
 8002de6:	e000      	b.n	8002dea <Oper_Boot+0x40a>
        
        default:
            break;
 8002de8:	bf00      	nop
    while (bootLoop)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f ae01 	bne.w	80029f4 <Oper_Boot+0x14>
        g_nTime_Status = DEVICE_TIME_SYNCED; // 시간 동기화 상태 업데이트

        Save_TimeStatus_FRAM(); // FRAM에 시간 동기화 상태 저장
    }
#endif
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	0800dd08 	.word	0x0800dd08
 8002e00:	0800dd28 	.word	0x0800dd28
 8002e04:	0800dd3c 	.word	0x0800dd3c
 8002e08:	0800dd40 	.word	0x0800dd40
 8002e0c:	0800dd44 	.word	0x0800dd44
 8002e10:	0800dd48 	.word	0x0800dd48
 8002e14:	0800dd4c 	.word	0x0800dd4c

08002e18 <Month_String_To_Number>:
// PAT_UTC_Time pAtUtcTime; UTC 시간 구조체 포인터를 사용하여 시간 동기화 함수


// 월 문자열을 숫자로 변환
int Month_String_To_Number(const char* monthStr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    
    if (strcmp(monthStr, "Jan") == 0) return RTC_MONTH_JANUARY;
 8002e20:	4938      	ldr	r1, [pc, #224]	@ (8002f04 <Month_String_To_Number+0xec>)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd f9d4 	bl	80001d0 <strcmp>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <Month_String_To_Number+0x1a>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e064      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Feb") == 0) return RTC_MONTH_FEBRUARY;
 8002e32:	4935      	ldr	r1, [pc, #212]	@ (8002f08 <Month_String_To_Number+0xf0>)
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fd f9cb 	bl	80001d0 <strcmp>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <Month_String_To_Number+0x2c>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e05b      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Mar") == 0) return RTC_MONTH_MARCH;
 8002e44:	4931      	ldr	r1, [pc, #196]	@ (8002f0c <Month_String_To_Number+0xf4>)
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd f9c2 	bl	80001d0 <strcmp>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <Month_String_To_Number+0x3e>
 8002e52:	2303      	movs	r3, #3
 8002e54:	e052      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Apr") == 0) return RTC_MONTH_APRIL;
 8002e56:	492e      	ldr	r1, [pc, #184]	@ (8002f10 <Month_String_To_Number+0xf8>)
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd f9b9 	bl	80001d0 <strcmp>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <Month_String_To_Number+0x50>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e049      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "May") == 0) return RTC_MONTH_MAY;
 8002e68:	492a      	ldr	r1, [pc, #168]	@ (8002f14 <Month_String_To_Number+0xfc>)
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd f9b0 	bl	80001d0 <strcmp>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <Month_String_To_Number+0x62>
 8002e76:	2305      	movs	r3, #5
 8002e78:	e040      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Jun") == 0) return RTC_MONTH_JUNE;
 8002e7a:	4927      	ldr	r1, [pc, #156]	@ (8002f18 <Month_String_To_Number+0x100>)
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fd f9a7 	bl	80001d0 <strcmp>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <Month_String_To_Number+0x74>
 8002e88:	2306      	movs	r3, #6
 8002e8a:	e037      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Jul") == 0) return RTC_MONTH_JULY;
 8002e8c:	4923      	ldr	r1, [pc, #140]	@ (8002f1c <Month_String_To_Number+0x104>)
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd f99e 	bl	80001d0 <strcmp>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <Month_String_To_Number+0x86>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	e02e      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Aug") == 0) return RTC_MONTH_AUGUST;
 8002e9e:	4920      	ldr	r1, [pc, #128]	@ (8002f20 <Month_String_To_Number+0x108>)
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fd f995 	bl	80001d0 <strcmp>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <Month_String_To_Number+0x98>
 8002eac:	2308      	movs	r3, #8
 8002eae:	e025      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Sep") == 0) return RTC_MONTH_SEPTEMBER;
 8002eb0:	491c      	ldr	r1, [pc, #112]	@ (8002f24 <Month_String_To_Number+0x10c>)
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd f98c 	bl	80001d0 <strcmp>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <Month_String_To_Number+0xaa>
 8002ebe:	2309      	movs	r3, #9
 8002ec0:	e01c      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Oct") == 0) return RTC_MONTH_OCTOBER;
 8002ec2:	4919      	ldr	r1, [pc, #100]	@ (8002f28 <Month_String_To_Number+0x110>)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fd f983 	bl	80001d0 <strcmp>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <Month_String_To_Number+0xbc>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	e013      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Nov") == 0) return RTC_MONTH_NOVEMBER;
 8002ed4:	4915      	ldr	r1, [pc, #84]	@ (8002f2c <Month_String_To_Number+0x114>)
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd f97a 	bl	80001d0 <strcmp>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <Month_String_To_Number+0xce>
 8002ee2:	2311      	movs	r3, #17
 8002ee4:	e00a      	b.n	8002efc <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Dec") == 0) return RTC_MONTH_DECEMBER;
 8002ee6:	4912      	ldr	r1, [pc, #72]	@ (8002f30 <Month_String_To_Number+0x118>)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fd f971 	bl	80001d0 <strcmp>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <Month_String_To_Number+0xe0>
 8002ef4:	2312      	movs	r3, #18
 8002ef6:	e001      	b.n	8002efc <Month_String_To_Number+0xe4>

    return -1; // 잘못된 월 문자열
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	0800dd7c 	.word	0x0800dd7c
 8002f08:	0800dd80 	.word	0x0800dd80
 8002f0c:	0800dd84 	.word	0x0800dd84
 8002f10:	0800dd88 	.word	0x0800dd88
 8002f14:	0800dd8c 	.word	0x0800dd8c
 8002f18:	0800dd90 	.word	0x0800dd90
 8002f1c:	0800dd94 	.word	0x0800dd94
 8002f20:	0800dd98 	.word	0x0800dd98
 8002f24:	0800dd9c 	.word	0x0800dd9c
 8002f28:	0800dda0 	.word	0x0800dda0
 8002f2c:	0800dda4 	.word	0x0800dda4
 8002f30:	0800dda8 	.word	0x0800dda8

08002f34 <RTC_Set_UTC>:
    return -1; // 잘못된 요일 문자열
}

// 저장된 UTC 시간으로 RTC 시간을 설정하는 함수
int RTC_Set_UTC(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
    int result = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
    PAT_UTC_Time pAtUtcTime = AT_Get_UTC_Time(); // UTC 시간 구조체 포인터
 8002f3e:	f7fd feb7 	bl	8000cb0 <AT_Get_UTC_Time>
 8002f42:	6038      	str	r0, [r7, #0]
    // ──────────────────────────────────────────────────────────────────────────────

    g_Time.Hours = (uint8_t)pAtUtcTime->sHour;       // 시
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b30      	ldr	r3, [pc, #192]	@ (800300c <RTC_Set_UTC+0xd8>)
 8002f4c:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = (uint8_t)pAtUtcTime->sMinute;   // 분
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <RTC_Set_UTC+0xd8>)
 8002f56:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = (uint8_t)pAtUtcTime->sSecond;   // 초
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <RTC_Set_UTC+0xd8>)
 8002f60:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE; // 일광 절약 시간 없음
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <RTC_Set_UTC+0xd8>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET; // 저장 작업 없음
 8002f68:	4b28      	ldr	r3, [pc, #160]	@ (800300c <RTC_Set_UTC+0xd8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]

    g_Date.WeekDay = (uint8_t)pAtUtcTime->sDayOfWeek; // 요일
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <RTC_Set_UTC+0xdc>)
 8002f76:	701a      	strb	r2, [r3, #0]
    g_Date.Month = (uint8_t)pAtUtcTime->sMonth;       // 월
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b24      	ldr	r3, [pc, #144]	@ (8003010 <RTC_Set_UTC+0xdc>)
 8002f80:	705a      	strb	r2, [r3, #1]
    g_Date.Date = (uint8_t)pAtUtcTime->sDay;          // 일
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	4b21      	ldr	r3, [pc, #132]	@ (8003010 <RTC_Set_UTC+0xdc>)
 8002f8a:	709a      	strb	r2, [r3, #2]
    g_Date.Year = (uint8_t)(pAtUtcTime->sYear % 100);   // 연
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a20      	ldr	r2, [pc, #128]	@ (8003014 <RTC_Set_UTC+0xe0>)
 8002f92:	fb82 1203 	smull	r1, r2, r2, r3
 8002f96:	1151      	asrs	r1, r2, #5
 8002f98:	17da      	asrs	r2, r3, #31
 8002f9a:	1a8a      	subs	r2, r1, r2
 8002f9c:	2164      	movs	r1, #100	@ 0x64
 8002f9e:	fb01 f202 	mul.w	r2, r1, r2
 8002fa2:	1a9a      	subs	r2, r3, r2
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <RTC_Set_UTC+0xdc>)
 8002fa8:	70da      	strb	r2, [r3, #3]

    // 
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);   // RTC 쓰기 보호 해제
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <RTC_Set_UTC+0xe4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	22ca      	movs	r2, #202	@ 0xca
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fb2:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <RTC_Set_UTC+0xe4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2253      	movs	r2, #83	@ 0x53
 8002fb8:	625a      	str	r2, [r3, #36]	@ 0x24

    // RTC 시간 설정
    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BIN) != HAL_OK)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4913      	ldr	r1, [pc, #76]	@ (800300c <RTC_Set_UTC+0xd8>)
 8002fbe:	4816      	ldr	r0, [pc, #88]	@ (8003018 <RTC_Set_UTC+0xe4>)
 8002fc0:	f002 f95f 	bl	8005282 <HAL_RTC_SetTime>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <RTC_Set_UTC+0x9e>
    {
        // 초기화 실패 처리
        Error_Handler();
 8002fca:	f7ff fa25 	bl	8002418 <Error_Handler>
        result = RTC_ERROR; // 실패 코드
 8002fce:	2301      	movs	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
    }
    // RTC 날짜 설정
    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BIN) != HAL_OK)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	490e      	ldr	r1, [pc, #56]	@ (8003010 <RTC_Set_UTC+0xdc>)
 8002fd6:	4810      	ldr	r0, [pc, #64]	@ (8003018 <RTC_Set_UTC+0xe4>)
 8002fd8:	f002 fa4b 	bl	8005472 <HAL_RTC_SetDate>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <RTC_Set_UTC+0xb6>
    {
        // 초기화 실패 처리
        Error_Handler();
 8002fe2:	f7ff fa19 	bl	8002418 <Error_Handler>
        result = RTC_ERROR; // 실패 코드
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	607b      	str	r3, [r7, #4]
    }

    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc); // RTC 쓰기 보호 재설정
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <RTC_Set_UTC+0xe4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	22ff      	movs	r2, #255	@ 0xff
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (result == RTC_ERROR)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <RTC_Set_UTC+0xc8>
    {
        return result; // 오류 발생 시 즉시 반환
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	e002      	b.n	8003002 <RTC_Set_UTC+0xce>
    }

    result = RTC_OK; // 성공 코드    
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	607b      	str	r3, [r7, #4]
    
    return result;
 8003000:	687b      	ldr	r3, [r7, #4]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200007dc 	.word	0x200007dc
 8003010:	200007f0 	.word	0x200007f0
 8003014:	51eb851f 	.word	0x51eb851f
 8003018:	20000578 	.word	0x20000578

0800301c <RTC_Get_Synced_Year_String>:

// 저장된 연도를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Year_String(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
    static char yearString[5]; // 정적 버퍼로 연도 문자열 저장
    
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8003020:	2200      	movs	r2, #0
 8003022:	4907      	ldr	r1, [pc, #28]	@ (8003040 <RTC_Get_Synced_Year_String+0x24>)
 8003024:	4807      	ldr	r0, [pc, #28]	@ (8003044 <RTC_Get_Synced_Year_String+0x28>)
 8003026:	f002 faa8 	bl	800557a <HAL_RTC_GetDate>
    
    // snprintf(yearString, sizeof(yearString), "%04d", g_Date.Year + 2000);
    snprintf(yearString, sizeof(yearString), "%02d", (int)g_Date.Year );
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <RTC_Get_Synced_Year_String+0x24>)
 800302c:	78db      	ldrb	r3, [r3, #3]
 800302e:	4a06      	ldr	r2, [pc, #24]	@ (8003048 <RTC_Get_Synced_Year_String+0x2c>)
 8003030:	2105      	movs	r1, #5
 8003032:	4806      	ldr	r0, [pc, #24]	@ (800304c <RTC_Get_Synced_Year_String+0x30>)
 8003034:	f009 f808 	bl	800c048 <sniprintf>
    return yearString; // 연도 문자열 반환
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <RTC_Get_Synced_Year_String+0x30>)
}
 800303a:	4618      	mov	r0, r3
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200007f0 	.word	0x200007f0
 8003044:	20000578 	.word	0x20000578
 8003048:	0800ddc8 	.word	0x0800ddc8
 800304c:	20000810 	.word	0x20000810

08003050 <RTC_Get_Synced_Month_String>:
}


// 저장된 월을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Month_String(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
    static char monthString[4]; // 정적 버퍼로 월 문자열 저장

    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8003054:	2200      	movs	r2, #0
 8003056:	4907      	ldr	r1, [pc, #28]	@ (8003074 <RTC_Get_Synced_Month_String+0x24>)
 8003058:	4807      	ldr	r0, [pc, #28]	@ (8003078 <RTC_Get_Synced_Month_String+0x28>)
 800305a:	f002 fa8e 	bl	800557a <HAL_RTC_GetDate>

    snprintf(monthString, sizeof(monthString), "%02d", g_Date.Month); // 2자리 월로 포맷
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <RTC_Get_Synced_Month_String+0x24>)
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	4a06      	ldr	r2, [pc, #24]	@ (800307c <RTC_Get_Synced_Month_String+0x2c>)
 8003064:	2104      	movs	r1, #4
 8003066:	4806      	ldr	r0, [pc, #24]	@ (8003080 <RTC_Get_Synced_Month_String+0x30>)
 8003068:	f008 ffee 	bl	800c048 <sniprintf>
    
    return monthString; // 월 문자열 반환
 800306c:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <RTC_Get_Synced_Month_String+0x30>)
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200007f0 	.word	0x200007f0
 8003078:	20000578 	.word	0x20000578
 800307c:	0800ddc8 	.word	0x0800ddc8
 8003080:	20000818 	.word	0x20000818

08003084 <RTC_Get_Synced_Date_String>:
    return monthString; // 월 문자열 반환
}

// 저장된 일을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Date_String(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
    static char dateString[4]; // 정적 버퍼로 일 문자열 저장

    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8003088:	2200      	movs	r2, #0
 800308a:	4907      	ldr	r1, [pc, #28]	@ (80030a8 <RTC_Get_Synced_Date_String+0x24>)
 800308c:	4807      	ldr	r0, [pc, #28]	@ (80030ac <RTC_Get_Synced_Date_String+0x28>)
 800308e:	f002 fa74 	bl	800557a <HAL_RTC_GetDate>

    snprintf(dateString, sizeof(dateString), "%02d", g_Date.Date); // 2자리 일로 포맷
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <RTC_Get_Synced_Date_String+0x24>)
 8003094:	789b      	ldrb	r3, [r3, #2]
 8003096:	4a06      	ldr	r2, [pc, #24]	@ (80030b0 <RTC_Get_Synced_Date_String+0x2c>)
 8003098:	2104      	movs	r1, #4
 800309a:	4806      	ldr	r0, [pc, #24]	@ (80030b4 <RTC_Get_Synced_Date_String+0x30>)
 800309c:	f008 ffd4 	bl	800c048 <sniprintf>
    
    return dateString; // 일 문자열 반환
 80030a0:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <RTC_Get_Synced_Date_String+0x30>)
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200007f0 	.word	0x200007f0
 80030ac:	20000578 	.word	0x20000578
 80030b0:	0800ddc8 	.word	0x0800ddc8
 80030b4:	2000081c 	.word	0x2000081c

080030b8 <RTC_Get_Synced_Hour_String>:
    return dateString; // 일 문자열 반환
}

// 저장된 시를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Hour_String(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
    static char hourString[4]; // 정적 버퍼로 시 문자열 저장

    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 80030bc:	2200      	movs	r2, #0
 80030be:	4907      	ldr	r1, [pc, #28]	@ (80030dc <RTC_Get_Synced_Hour_String+0x24>)
 80030c0:	4807      	ldr	r0, [pc, #28]	@ (80030e0 <RTC_Get_Synced_Hour_String+0x28>)
 80030c2:	f002 f978 	bl	80053b6 <HAL_RTC_GetTime>
    
    snprintf(hourString, sizeof(hourString), "%02d", g_Time.Hours); // 2자리 시로 포맷
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <RTC_Get_Synced_Hour_String+0x24>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	4a06      	ldr	r2, [pc, #24]	@ (80030e4 <RTC_Get_Synced_Hour_String+0x2c>)
 80030cc:	2104      	movs	r1, #4
 80030ce:	4806      	ldr	r0, [pc, #24]	@ (80030e8 <RTC_Get_Synced_Hour_String+0x30>)
 80030d0:	f008 ffba 	bl	800c048 <sniprintf>
    
    return hourString; // 시 문자열 반환
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <RTC_Get_Synced_Hour_String+0x30>)
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200007dc 	.word	0x200007dc
 80030e0:	20000578 	.word	0x20000578
 80030e4:	0800ddc8 	.word	0x0800ddc8
 80030e8:	20000820 	.word	0x20000820

080030ec <RTC_Get_Synced_Minute_String>:
    return hourString; // 시 문자열 반환
}

// 저장됨 분을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Minute_String(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
    static char minuteString[4]; // 정적 버퍼로 분 문자열 저장
    
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 80030f0:	2200      	movs	r2, #0
 80030f2:	4907      	ldr	r1, [pc, #28]	@ (8003110 <RTC_Get_Synced_Minute_String+0x24>)
 80030f4:	4807      	ldr	r0, [pc, #28]	@ (8003114 <RTC_Get_Synced_Minute_String+0x28>)
 80030f6:	f002 f95e 	bl	80053b6 <HAL_RTC_GetTime>
    
    snprintf(minuteString, sizeof(minuteString), "%02d", g_Time.Minutes); // 2자리 분으로 포맷
 80030fa:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <RTC_Get_Synced_Minute_String+0x24>)
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	4a06      	ldr	r2, [pc, #24]	@ (8003118 <RTC_Get_Synced_Minute_String+0x2c>)
 8003100:	2104      	movs	r1, #4
 8003102:	4806      	ldr	r0, [pc, #24]	@ (800311c <RTC_Get_Synced_Minute_String+0x30>)
 8003104:	f008 ffa0 	bl	800c048 <sniprintf>
    
    return minuteString; // 분 문자열 반환
 8003108:	4b04      	ldr	r3, [pc, #16]	@ (800311c <RTC_Get_Synced_Minute_String+0x30>)
}
 800310a:	4618      	mov	r0, r3
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200007dc 	.word	0x200007dc
 8003114:	20000578 	.word	0x20000578
 8003118:	0800ddc8 	.word	0x0800ddc8
 800311c:	20000824 	.word	0x20000824

08003120 <RTC_Get_Synced_Second_String>:
    return minuteString; // 분 문자열 반환
}

// 저장된 초를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Second_String(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
    static char secondString[4]; // 정적 버퍼로 초 문자열 저장
    
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8003124:	2200      	movs	r2, #0
 8003126:	4907      	ldr	r1, [pc, #28]	@ (8003144 <RTC_Get_Synced_Second_String+0x24>)
 8003128:	4807      	ldr	r0, [pc, #28]	@ (8003148 <RTC_Get_Synced_Second_String+0x28>)
 800312a:	f002 f944 	bl	80053b6 <HAL_RTC_GetTime>
    
    snprintf(secondString, sizeof(secondString), "%02d", g_Time.Seconds); // 2자리 초로 포맷
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <RTC_Get_Synced_Second_String+0x24>)
 8003130:	789b      	ldrb	r3, [r3, #2]
 8003132:	4a06      	ldr	r2, [pc, #24]	@ (800314c <RTC_Get_Synced_Second_String+0x2c>)
 8003134:	2104      	movs	r1, #4
 8003136:	4806      	ldr	r0, [pc, #24]	@ (8003150 <RTC_Get_Synced_Second_String+0x30>)
 8003138:	f008 ff86 	bl	800c048 <sniprintf>
    
    return secondString; // 초 문자열 반환
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <RTC_Get_Synced_Second_String+0x30>)
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200007dc 	.word	0x200007dc
 8003148:	20000578 	.word	0x20000578
 800314c:	0800ddc8 	.word	0x0800ddc8
 8003150:	20000828 	.word	0x20000828

08003154 <SD_Card_Boot>:



// =========================================================
int SD_Card_Boot(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800315a:	af00      	add	r7, sp, #0
    FATFS SDFatFS;  // FATFS 구조체
    FIL SDFile;     // 파일 구조체
    FRESULT fres;   // FATFS 함수 결과
    UINT bw, br;    // 바이트 쓰기/읽기 변수

    int result = 0; // 결과 변수 초기화
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
    }
#endif // 0
    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8003162:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8003166:	2201      	movs	r2, #1
 8003168:	494c      	ldr	r1, [pc, #304]	@ (800329c <SD_Card_Boot+0x148>)
 800316a:	4618      	mov	r0, r3
 800316c:	f008 f92a 	bl	800b3c4 <f_mount>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
    if (fres != FR_OK)
 8003176:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <SD_Card_Boot+0x2e>
    {
        // 마운트 실패 처리
        Error_Handler();
 800317e:	f7ff f94b 	bl	8002418 <Error_Handler>
    }

    // 2) 와이파이 파일 있는지 확인
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	2201      	movs	r2, #1
 8003186:	4946      	ldr	r1, [pc, #280]	@ (80032a0 <SD_Card_Boot+0x14c>)
 8003188:	4618      	mov	r0, r3
 800318a:	f008 f961 	bl	800b450 <f_open>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
    if (fres == FR_OK)
 8003194:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11c      	bne.n	80031d6 <SD_Card_Boot+0x82>
    {
        // 파일이 존재하면 OK Sd카드 언마운트
        f_close(&SDFile);
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	4618      	mov	r0, r3
 80031a0:	f008 fe42 	bl	800be28 <f_close>
        fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 80031a4:	2201      	movs	r2, #1
 80031a6:	493d      	ldr	r1, [pc, #244]	@ (800329c <SD_Card_Boot+0x148>)
 80031a8:	2000      	movs	r0, #0
 80031aa:	f008 f90b 	bl	800b3c4 <f_mount>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 80031b4:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <SD_Card_Boot+0x7a>
        {
            SD_Card_Log("SD Card Unmount Failed!\n");
 80031bc:	4839      	ldr	r0, [pc, #228]	@ (80032a4 <SD_Card_Boot+0x150>)
 80031be:	f000 f981 	bl	80034c4 <SD_Card_Log>
            // 언마운트 실패 처리
            // Error_Handler();
            Error_Proc(1);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f7ff fa06 	bl	80025d4 <Error_Proc>

            result = SD_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        
        result = SD_OK; // 파일이 존재하면 OK
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 80031d4:	e05a      	b.n	800328c <SD_Card_Boot+0x138>
    }
    else
    {
        // 파일이 없으면 생성
        fres = f_open(&SDFile, "wifi.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	220a      	movs	r2, #10
 80031da:	4931      	ldr	r1, [pc, #196]	@ (80032a0 <SD_Card_Boot+0x14c>)
 80031dc:	4618      	mov	r0, r3
 80031de:	f008 f937 	bl	800b450 <f_open>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 80031e8:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <SD_Card_Boot+0xae>
        {
            // 파일 열기 실패 처리
            // Error_Handler();
            Error_Proc(1);
 80031f0:	2001      	movs	r0, #1
 80031f2:	f7ff f9ef 	bl	80025d4 <Error_Proc>
            SD_Card_Log("SD Card File Open Failed!\n");
 80031f6:	482c      	ldr	r0, [pc, #176]	@ (80032a8 <SD_Card_Boot+0x154>)
 80031f8:	f000 f964 	bl	80034c4 <SD_Card_Log>
            result = SD_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        // 파일에 기본 Wi-Fi 설정 데이터 쓰기
        const char *wifiData = "SSID=YourSSID\nPassword=YourPassword\n";
 8003202:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <SD_Card_Boot+0x158>)
 8003204:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
        fres = f_write(&SDFile, wifiData, strlen(wifiData), &bw);
 8003208:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 800320c:	f7fc ffea 	bl	80001e4 <strlen>
 8003210:	4602      	mov	r2, r0
 8003212:	463b      	mov	r3, r7
 8003214:	1d38      	adds	r0, r7, #4
 8003216:	f8d7 1464 	ldr.w	r1, [r7, #1124]	@ 0x464
 800321a:	f008 fc12 	bl	800ba42 <f_write>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK || bw < strlen(wifiData))
 8003224:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <SD_Card_Boot+0xf0>
 800322c:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 8003230:	f7fc ffd8 	bl	80001e4 <strlen>
 8003234:	4602      	mov	r2, r0
 8003236:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800323a:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d90c      	bls.n	800325e <SD_Card_Boot+0x10a>
        {
            // 파일 쓰기 실패 처리
            f_close(&SDFile);
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f008 fdee 	bl	800be28 <f_close>
            // Error_Handler();
            Error_Proc(1);
 800324c:	2001      	movs	r0, #1
 800324e:	f7ff f9c1 	bl	80025d4 <Error_Proc>
            SD_Card_Log("SD Card File Write Failed!\n");
 8003252:	4817      	ldr	r0, [pc, #92]	@ (80032b0 <SD_Card_Boot+0x15c>)
 8003254:	f000 f936 	bl	80034c4 <SD_Card_Log>
            result = SD_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        // 파일 닫기
        fres = f_close(&SDFile);
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	4618      	mov	r0, r3
 8003262:	f008 fde1 	bl	800be28 <f_close>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 800326c:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <SD_Card_Boot+0x132>
        {
            // 파일 닫기 실패 처리
            // Error_Handler();
            Error_Proc(1);
 8003274:	2001      	movs	r0, #1
 8003276:	f7ff f9ad 	bl	80025d4 <Error_Proc>
            SD_Card_Log("SD Card File Close Failed!\n");
 800327a:	480e      	ldr	r0, [pc, #56]	@ (80032b4 <SD_Card_Boot+0x160>)
 800327c:	f000 f922 	bl	80034c4 <SD_Card_Log>
            result = SD_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }

        result = SD_OK; // 파일 생성 성공
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
    }

    return result; // SD 카드 부팅 결과 반환
 800328c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
}
 8003290:	4618      	mov	r0, r3
 8003292:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000878 	.word	0x20000878
 80032a0:	0800ddf8 	.word	0x0800ddf8
 80032a4:	0800de04 	.word	0x0800de04
 80032a8:	0800de20 	.word	0x0800de20
 80032ac:	0800de3c 	.word	0x0800de3c
 80032b0:	0800de64 	.word	0x0800de64
 80032b4:	0800de80 	.word	0x0800de80

080032b8 <SD_Card_Get_WiFi_SSID>:


// WIFI SSID를 반환하는 함수
const char* SD_Card_Get_WiFi_SSID(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 80032be:	af00      	add	r7, sp, #0
    UINT br;              // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80032c0:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 80032c4:	2201      	movs	r2, #1
 80032c6:	4936      	ldr	r1, [pc, #216]	@ (80033a0 <SD_Card_Get_WiFi_SSID+0xe8>)
 80032c8:	4618      	mov	r0, r3
 80032ca:	f008 f87b 	bl	800b3c4 <f_mount>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 80032d4:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <SD_Card_Get_WiFi_SSID+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 80032dc:	f7ff f89c 	bl	8002418 <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 80032e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032e4:	2201      	movs	r2, #1
 80032e6:	492f      	ldr	r1, [pc, #188]	@ (80033a4 <SD_Card_Get_WiFi_SSID+0xec>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f008 f8b1 	bl	800b450 <f_open>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 80032f4:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <SD_Card_Get_WiFi_SSID+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 80032fc:	f7ff f88c 	bl	8002418 <Error_Handler>
    }

    // 3) 파일에서 SSID 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 8003300:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003304:	4639      	mov	r1, r7
 8003306:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800330a:	223f      	movs	r2, #63	@ 0x3f
 800330c:	f008 fa5a 	bl	800b7c4 <f_read>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK || br == 0)
 8003316:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <SD_Card_Get_WiFi_SSID+0x74>
 800331e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8003322:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <SD_Card_Get_WiFi_SSID+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 800332c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003330:	4618      	mov	r0, r3
 8003332:	f008 fd79 	bl	800be28 <f_close>
        Error_Handler();
 8003336:	f7ff f86f 	bl	8002418 <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 800333a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800333e:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f507 6295 	add.w	r2, r7, #1192	@ 0x4a8
 8003348:	f5a2 6295 	sub.w	r2, r2, #1192	@ 0x4a8
 800334c:	2100      	movs	r1, #0
 800334e:	54d1      	strb	r1, [r2, r3]

    // 4) SSID (최초 부트에서 "SSID=YourSSID" 형식으로 저장)
    sscanf(buffer, "SSID=%31s", ssid);
 8003350:	463b      	mov	r3, r7
 8003352:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <SD_Card_Get_WiFi_SSID+0xf0>)
 8003354:	4915      	ldr	r1, [pc, #84]	@ (80033ac <SD_Card_Get_WiFi_SSID+0xf4>)
 8003356:	4618      	mov	r0, r3
 8003358:	f008 feaa 	bl	800c0b0 <siscanf>

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 800335c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003360:	4618      	mov	r0, r3
 8003362:	f008 fd61 	bl	800be28 <f_close>
 8003366:	4603      	mov	r3, r0
 8003368:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 800336c:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <SD_Card_Get_WiFi_SSID+0xc0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8003374:	f7ff f850 	bl	8002418 <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003378:	2201      	movs	r2, #1
 800337a:	4909      	ldr	r1, [pc, #36]	@ (80033a0 <SD_Card_Get_WiFi_SSID+0xe8>)
 800337c:	2000      	movs	r0, #0
 800337e:	f008 f821 	bl	800b3c4 <f_mount>
 8003382:	4603      	mov	r3, r0
 8003384:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8003388:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <SD_Card_Get_WiFi_SSID+0xdc>
    {
        // 언마운트 실패 처리
        Error_Handler();
 8003390:	f7ff f842 	bl	8002418 <Error_Handler>
    }

    return ssid; // SSID 반환
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <SD_Card_Get_WiFi_SSID+0xf0>)
}
 8003396:	4618      	mov	r0, r3
 8003398:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000878 	.word	0x20000878
 80033a4:	0800ddf8 	.word	0x0800ddf8
 80033a8:	2000082c 	.word	0x2000082c
 80033ac:	0800de9c 	.word	0x0800de9c

080033b0 <SD_Card_Get_WiFi_Password>:

// WIFI 비밀번호를 반환하는 함수
const char* SD_Card_Get_WiFi_Password(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 80033b6:	af00      	add	r7, sp, #0
    UINT br;                  // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80033b8:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80033bc:	2201      	movs	r2, #1
 80033be:	493c      	ldr	r1, [pc, #240]	@ (80034b0 <SD_Card_Get_WiFi_Password+0x100>)
 80033c0:	4618      	mov	r0, r3
 80033c2:	f007 ffff 	bl	800b3c4 <f_mount>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 80033cc:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <SD_Card_Get_WiFi_Password+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 80033d4:	f7ff f820 	bl	8002418 <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 80033d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80033dc:	2201      	movs	r2, #1
 80033de:	4935      	ldr	r1, [pc, #212]	@ (80034b4 <SD_Card_Get_WiFi_Password+0x104>)
 80033e0:	4618      	mov	r0, r3
 80033e2:	f008 f835 	bl	800b450 <f_open>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 80033ec:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <SD_Card_Get_WiFi_Password+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 80033f4:	f7ff f810 	bl	8002418 <Error_Handler>
    }

    // 3) 파일에서 비밀번호 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 80033f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033fc:	1d39      	adds	r1, r7, #4
 80033fe:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8003402:	223f      	movs	r2, #63	@ 0x3f
 8003404:	f008 f9de 	bl	800b7c4 <f_read>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK || br == 0)
 800340e:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <SD_Card_Get_WiFi_Password+0x74>
 8003416:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 800341a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <SD_Card_Get_WiFi_Password+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 8003424:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003428:	4618      	mov	r0, r3
 800342a:	f008 fcfd 	bl	800be28 <f_close>
        Error_Handler();
 800342e:	f7fe fff3 	bl	8002418 <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 8003432:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8003436:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8003440:	f2a2 42ac 	subw	r2, r2, #1196	@ 0x4ac
 8003444:	2100      	movs	r1, #0
 8003446:	54d1      	strb	r1, [r2, r3]

    // 4) 비밀번호 (최초 부트에서 "Password=YourPassword" 형식으로 저장)
    const char *p = strstr(buffer, "Password=");
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <SD_Card_Get_WiFi_Password+0x108>)
 800344c:	4618      	mov	r0, r3
 800344e:	f008 fe93 	bl	800c178 <strstr>
 8003452:	f8c7 04a8 	str.w	r0, [r7, #1192]	@ 0x4a8
    if(p)
 8003456:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <SD_Card_Get_WiFi_Password+0xba>
    {
        sscanf(p, "Password=%31s", password);
 800345e:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <SD_Card_Get_WiFi_Password+0x10c>)
 8003460:	4917      	ldr	r1, [pc, #92]	@ (80034c0 <SD_Card_Get_WiFi_Password+0x110>)
 8003462:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 8003466:	f008 fe23 	bl	800c0b0 <siscanf>
    }
    // sscanf(buffer, "Password=%31s", password);

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 800346a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800346e:	4618      	mov	r0, r3
 8003470:	f008 fcda 	bl	800be28 <f_close>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 800347a:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <SD_Card_Get_WiFi_Password+0xd6>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8003482:	f7fe ffc9 	bl	8002418 <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003486:	2201      	movs	r2, #1
 8003488:	4909      	ldr	r1, [pc, #36]	@ (80034b0 <SD_Card_Get_WiFi_Password+0x100>)
 800348a:	2000      	movs	r0, #0
 800348c:	f007 ff9a 	bl	800b3c4 <f_mount>
 8003490:	4603      	mov	r3, r0
 8003492:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8003496:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <SD_Card_Get_WiFi_Password+0xf2>
    {
        // 언마운트 실패 처리
        Error_Handler();
 800349e:	f7fe ffbb 	bl	8002418 <Error_Handler>
    }

    return password; // 비밀번호 반환
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <SD_Card_Get_WiFi_Password+0x10c>)
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	f507 6796 	add.w	r7, r7, #1200	@ 0x4b0
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000878 	.word	0x20000878
 80034b4:	0800ddf8 	.word	0x0800ddf8
 80034b8:	0800dea8 	.word	0x0800dea8
 80034bc:	2000084c 	.word	0x2000084c
 80034c0:	0800deb4 	.word	0x0800deb4

080034c4 <SD_Card_Log>:



// SD카드에 로그를 남기는 함수
void SD_Card_Log(const char *logMessage)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80034d0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80034d4:	6018      	str	r0, [r3, #0]
    UINT bw;        // 바이트 쓰기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80034d6:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 80034da:	2201      	movs	r2, #1
 80034dc:	4937      	ldr	r1, [pc, #220]	@ (80035bc <SD_Card_Log+0xf8>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f007 ff70 	bl	800b3c4 <f_mount>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 80034ea:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <SD_Card_Log+0x32>
    {
        // 마운트 실패 처리
        Error_Handler();
 80034f2:	f7fe ff91 	bl	8002418 <Error_Handler>
    }

    // 2) 로그 파일 열기(없으면 생성)
    fres = f_open(&SDFile, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	2232      	movs	r2, #50	@ 0x32
 80034fc:	4930      	ldr	r1, [pc, #192]	@ (80035c0 <SD_Card_Log+0xfc>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f007 ffa6 	bl	800b450 <f_open>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 800350a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <SD_Card_Log+0x52>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8003512:	f7fe ff81 	bl	8002418 <Error_Handler>
    }

    // 3) 로그 메시지 쓰기
    fres = f_write(&SDFile, logMessage, strlen(logMessage), &bw);
 8003516:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800351a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	f7fc fe60 	bl	80001e4 <strlen>
 8003524:	4604      	mov	r4, r0
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 800352e:	f2a2 416c 	subw	r1, r2, #1132	@ 0x46c
 8003532:	f107 000c 	add.w	r0, r7, #12
 8003536:	4622      	mov	r2, r4
 8003538:	6809      	ldr	r1, [r1, #0]
 800353a:	f008 fa82 	bl	800ba42 <f_write>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK || bw < strlen(logMessage))
 8003544:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10e      	bne.n	800356a <SD_Card_Log+0xa6>
 800354c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8003550:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f7fc fe45 	bl	80001e4 <strlen>
 800355a:	4602      	mov	r2, r0
 800355c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8003560:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d906      	bls.n	8003578 <SD_Card_Log+0xb4>
    {
        // 파일 쓰기 실패 처리
        f_close(&SDFile);
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	4618      	mov	r0, r3
 8003570:	f008 fc5a 	bl	800be28 <f_close>
        Error_Handler();
 8003574:	f7fe ff50 	bl	8002418 <Error_Handler>
    }

    // 4) 파일 닫기
    fres = f_close(&SDFile);
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	4618      	mov	r0, r3
 800357e:	f008 fc53 	bl	800be28 <f_close>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8003588:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <SD_Card_Log+0xd0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8003590:	f7fe ff42 	bl	8002418 <Error_Handler>
    }

    // 5) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003594:	2201      	movs	r2, #1
 8003596:	4909      	ldr	r1, [pc, #36]	@ (80035bc <SD_Card_Log+0xf8>)
 8003598:	2000      	movs	r0, #0
 800359a:	f007 ff13 	bl	800b3c4 <f_mount>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 80035a4:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <SD_Card_Log+0xec>
    {
        // 언마운트 실패 처리
        Error_Handler();
 80035ac:	f7fe ff34 	bl	8002418 <Error_Handler>
    }
}
 80035b0:	bf00      	nop
 80035b2:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000878 	.word	0x20000878
 80035c0:	0800dec4 	.word	0x0800dec4

080035c4 <SD_Card_Is_Exist>:

// SD카드가 있는지 확인하여 반환하는 함수
int SD_Card_Is_Exist(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80035ca:	af00      	add	r7, sp, #0
    FRESULT fres;   // FATFS 함수 결과

    // --------------------------------------------------

    // 1) SD 카드 마운트 시도
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	2201      	movs	r2, #1
 80035d0:	490b      	ldr	r1, [pc, #44]	@ (8003600 <SD_Card_Is_Exist+0x3c>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f007 fef6 	bl	800b3c4 <f_mount>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
    if (fres == FR_OK)
 80035de:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <SD_Card_Is_Exist+0x30>
    {
        // 마운트 성공 시 언마운트 후 OK 반환
        f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 80035e6:	2201      	movs	r2, #1
 80035e8:	4905      	ldr	r1, [pc, #20]	@ (8003600 <SD_Card_Is_Exist+0x3c>)
 80035ea:	2000      	movs	r0, #0
 80035ec:	f007 feea 	bl	800b3c4 <f_mount>
        return SD_OK; // SD 카드 존재
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <SD_Card_Is_Exist+0x32>
    }
    
    return SD_ERROR; // SD 카드 없음
 80035f4:	2301      	movs	r3, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000878 	.word	0x20000878

08003604 <SERVER_API_Get_Data>:


__CCMRAM__ Server_API_Data g_serverApiData; // 서버 API 데이터 구조체 인스턴스

PServer_API_Data SERVER_API_Get_Data(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
    // g_serverApiData의 주소를 반환
    return &g_serverApiData;
 8003608:	4b02      	ldr	r3, [pc, #8]	@ (8003614 <SERVER_API_Get_Data+0x10>)
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	10000028 	.word	0x10000028

08003618 <SERVER_API_Init>:

// CCMRAM 초기화
void SERVER_API_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
    // g_serverApiData 구조체를 0으로 초기화
    memset(&g_serverApiData, 0, sizeof(g_serverApiData));
 800361c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8003620:	2100      	movs	r1, #0
 8003622:	4802      	ldr	r0, [pc, #8]	@ (800362c <SERVER_API_Init+0x14>)
 8003624:	f008 fd80 	bl	800c128 <memset>
}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}
 800362c:	10000028 	.word	0x10000028

08003630 <SERVER_API_Set_Token>:


// 토큰을 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_Token(const char* token)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
    if (token != NULL && strlen(token) < sizeof(g_serverApiData.sToken))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <SERVER_API_Set_Token+0x2c>
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fc fdd0 	bl	80001e4 <strlen>
 8003644:	4603      	mov	r3, r0
 8003646:	2b7f      	cmp	r3, #127	@ 0x7f
 8003648:	d808      	bhi.n	800365c <SERVER_API_Set_Token+0x2c>
    {
        strncpy(g_serverApiData.sToken, token, sizeof(g_serverApiData.sToken) - 1);
 800364a:	227f      	movs	r2, #127	@ 0x7f
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4805      	ldr	r0, [pc, #20]	@ (8003664 <SERVER_API_Set_Token+0x34>)
 8003650:	f008 fd7f 	bl	800c152 <strncpy>
        g_serverApiData.sToken[sizeof(g_serverApiData.sToken) - 1] = '\0'; // 문자열 종료
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <SERVER_API_Set_Token+0x34>)
 8003656:	2200      	movs	r2, #0
 8003658:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	10000028 	.word	0x10000028

08003668 <SERVER_API_Set_MAC_Address>:

// MAC 주소를 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_MAC_Address(const char* mac)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
    if (mac != NULL && strlen(mac) < sizeof(g_serverApiData.sMac))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <SERVER_API_Set_MAC_Address+0x2c>
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fc fdb4 	bl	80001e4 <strlen>
 800367c:	4603      	mov	r3, r0
 800367e:	2b11      	cmp	r3, #17
 8003680:	d808      	bhi.n	8003694 <SERVER_API_Set_MAC_Address+0x2c>
    {
        strncpy(g_serverApiData.sMac, mac, sizeof(g_serverApiData.sMac) - 1);
 8003682:	2211      	movs	r2, #17
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4805      	ldr	r0, [pc, #20]	@ (800369c <SERVER_API_Set_MAC_Address+0x34>)
 8003688:	f008 fd63 	bl	800c152 <strncpy>
        g_serverApiData.sMac[sizeof(g_serverApiData.sMac) - 1] = '\0'; // 문자열 종료
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SERVER_API_Set_MAC_Address+0x38>)
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    }
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	100000a8 	.word	0x100000a8
 80036a0:	10000028 	.word	0x10000028

080036a4 <Server_Send_Boot>:
// =======================================================================================================


// AT 명령어로 Json 날리기 , 서버에 날리기, 함수는 성공 여부를 반환
int Server_Send_Boot(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 80036aa:	af02      	add	r7, sp, #8
    // 토큰을 가져올 구조체
    PServer_API_Data pServerApiData = SERVER_API_Get_Data();
 80036ac:	f7ff ffaa 	bl	8003604 <SERVER_API_Get_Data>
 80036b0:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330


    int result = 0; // 결과 변수 초기화
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    const char *success = "Boot Data sent successfully!\r\n";
 80036ba:	4b70      	ldr	r3, [pc, #448]	@ (800387c <Server_Send_Boot+0x1d8>)
 80036bc:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    const char *fail = "Failed to send Boot Data!\r\n";
 80036c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003880 <Server_Send_Boot+0x1dc>)
 80036c2:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    const char *tokenCheck = "Token is empty or NULL\r\n";
 80036c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003884 <Server_Send_Boot+0x1e0>)
 80036c8:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
    const char *macPCheck = "MAC-P address is empty or NULL\r\n";
 80036cc:	4b6e      	ldr	r3, [pc, #440]	@ (8003888 <Server_Send_Boot+0x1e4>)
 80036ce:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
    const char *macCCheck = "MAC-C address is empty or NULL\r\n";
 80036d2:	4b6e      	ldr	r3, [pc, #440]	@ (800388c <Server_Send_Boot+0x1e8>)
 80036d4:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c

    const char* token = pServerApiData->sToken; // 서버 API 토큰 가져오기
 80036d8:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80036dc:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
    const char* macP = pServerApiData->sMac; // MAC 주소 가져오기
 80036e0:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80036e4:	3380      	adds	r3, #128	@ 0x80
 80036e6:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    const char* macC = pServerApiData->sMac; // MAC 주소 가져오기
 80036ea:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80036ee:	3380      	adds	r3, #128	@ 0x80
 80036f0:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310

    char jsonData[256]={0}; // AT 명령어를 저장할 버퍼 // 토큰이 128바이트 공간 차지하므로 커맨드 버퍼는 충분히 커야 함
 80036f4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80036f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	3304      	adds	r3, #4
 8003702:	22fc      	movs	r2, #252	@ 0xfc
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f008 fd0e 	bl	800c128 <memset>

    // 토큰 값 유효한지 확인
    if (token == NULL || strlen(token) == 0)
 800370c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <Server_Send_Boot+0x7a>
 8003714:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10e      	bne.n	800373c <Server_Send_Boot+0x98>
    {
        // 토큰이 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)tokenCheck, strlen(tokenCheck), HAL_MAX_DELAY);
 800371e:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8003722:	f7fc fd5f 	bl	80001e4 <strlen>
 8003726:	4603      	mov	r3, r0
 8003728:	b29a      	uxth	r2, r3
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 8003732:	4857      	ldr	r0, [pc, #348]	@ (8003890 <Server_Send_Boot+0x1ec>)
 8003734:	f004 f97a 	bl	8007a2c <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 8003738:	2301      	movs	r3, #1
 800373a:	e09a      	b.n	8003872 <Server_Send_Boot+0x1ce>
    }
    // MAC 주소 값 유효한지 확인
    if (macP == NULL || strlen(macP) == 0)
 800373c:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <Server_Send_Boot+0xaa>
 8003744:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10e      	bne.n	800376c <Server_Send_Boot+0xc8>
    {
        // MAC 주소가 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)macPCheck, strlen(macPCheck), HAL_MAX_DELAY);
 800374e:	f8d7 0320 	ldr.w	r0, [r7, #800]	@ 0x320
 8003752:	f7fc fd47 	bl	80001e4 <strlen>
 8003756:	4603      	mov	r3, r0
 8003758:	b29a      	uxth	r2, r3
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 8003762:	484b      	ldr	r0, [pc, #300]	@ (8003890 <Server_Send_Boot+0x1ec>)
 8003764:	f004 f962 	bl	8007a2c <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 8003768:	2301      	movs	r3, #1
 800376a:	e082      	b.n	8003872 <Server_Send_Boot+0x1ce>
    }
    // MAC 주소 값 유효한지 확인
    if (macC == NULL || strlen(macC) == 0)
 800376c:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <Server_Send_Boot+0xda>
 8003774:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10e      	bne.n	800379c <Server_Send_Boot+0xf8>
    {
        // MAC 주소가 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)macCCheck, strlen(macCCheck), HAL_MAX_DELAY);
 800377e:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8003782:	f7fc fd2f 	bl	80001e4 <strlen>
 8003786:	4603      	mov	r3, r0
 8003788:	b29a      	uxth	r2, r3
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	f8d7 131c 	ldr.w	r1, [r7, #796]	@ 0x31c
 8003792:	483f      	ldr	r0, [pc, #252]	@ (8003890 <Server_Send_Boot+0x1ec>)
 8003794:	f004 f94a 	bl	8007a2c <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 8003798:	2301      	movs	r3, #1
 800379a:	e06a      	b.n	8003872 <Server_Send_Boot+0x1ce>
    }
    
    // 1) 보낼 JSON 문자열 정의 (큰 따옴표는 백슬래시로 이스케이프)
    int jsonDataLen = snprintf(
 800379c:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 80037a0:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80037b0:	4a38      	ldr	r2, [pc, #224]	@ (8003894 <Server_Send_Boot+0x1f0>)
 80037b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037b6:	f008 fc47 	bl	800c048 <sniprintf>
 80037ba:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
        sizeof(jsonData), 
        "{\\\"token\\\":\\\"%s\\\"\\,\\\"articleid_p\\\":\\\"%s\\\"\\,\\\"articleid\\\":\\\"%s\\\"}",
        token, macP, macP
    );

    if (jsonDataLen < 0 || jsonDataLen >= (int)sizeof(jsonData)) 
 80037be:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db03      	blt.n	80037ce <Server_Send_Boot+0x12a>
 80037c6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80037ca:	2bff      	cmp	r3, #255	@ 0xff
 80037cc:	dd04      	ble.n	80037d8 <Server_Send_Boot+0x134>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 80037ce:	f7fe fe23 	bl	8002418 <Error_Handler>
        result = AT_ERROR; // 실패 코드
 80037d2:	2301      	movs	r3, #1
 80037d4:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }
    
    char atCmd[512]; // 충분히 큰 버퍼

    int fullJson = snprintf(atCmd, sizeof(atCmd),
 80037d8:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80037dc:	1d38      	adds	r0, r7, #4
 80037de:	4a2e      	ldr	r2, [pc, #184]	@ (8003898 <Server_Send_Boot+0x1f4>)
 80037e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037e4:	f008 fc30 	bl	800c048 <sniprintf>
 80037e8:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
        "AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/boot\",\"dev-api.andamiro.net\",\"/test/boot\",2,\"%s\"\r\n",
        jsonData);

    if (fullJson < 0 || fullJson >= (int)sizeof(atCmd)) 
 80037ec:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	db04      	blt.n	80037fe <Server_Send_Boot+0x15a>
 80037f4:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80037f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037fc:	db04      	blt.n	8003808 <Server_Send_Boot+0x164>
    {
        // snprintf 실패 또는 버퍼 부족
        Error_Handler();
 80037fe:	f7fe fe0b 	bl	8002418 <Error_Handler>
        result = AT_ERROR; // 실패 코드
 8003802:	2301      	movs	r3, #1
 8003804:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }

    // AT 명령어 전송 및 응답 처리
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(atCmd);
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fc0c 	bl	8001028 <ESP_AT_Send_Command_Sync_Get_Result>
 8003810:	f8c7 0304 	str.w	r0, [r7, #772]	@ 0x304
    
    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL) 
 8003814:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <Server_Send_Boot+0x1aa>
 800381c:	491f      	ldr	r1, [pc, #124]	@ (800389c <Server_Send_Boot+0x1f8>)
 800381e:	f8d7 0304 	ldr.w	r0, [r7, #772]	@ 0x304
 8003822:	f008 fca9 	bl	800c178 <strstr>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d010      	beq.n	800384e <Server_Send_Boot+0x1aa>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 800382c:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 8003830:	f7fc fcd8 	bl	80001e4 <strlen>
 8003834:	4603      	mov	r3, r0
 8003836:	b29a      	uxth	r2, r3
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
 800383c:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 8003840:	4813      	ldr	r0, [pc, #76]	@ (8003890 <Server_Send_Boot+0x1ec>)
 8003842:	f004 f8f3 	bl	8007a2c <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 8003846:	2300      	movs	r3, #0
 8003848:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800384c:	e00f      	b.n	800386e <Server_Send_Boot+0x1ca>
    } 
    else 
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 800384e:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8003852:	f7fc fcc7 	bl	80001e4 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	b29a      	uxth	r2, r3
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	f8d7 1328 	ldr.w	r1, [r7, #808]	@ 0x328
 8003862:	480b      	ldr	r0, [pc, #44]	@ (8003890 <Server_Send_Boot+0x1ec>)
 8003864:	f004 f8e2 	bl	8007a2c <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 8003868:	2301      	movs	r3, #1
 800386a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }

    return result; // 결과 반환
 800386e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
}
 8003872:	4618      	mov	r0, r3
 8003874:	f507 774e 	add.w	r7, r7, #824	@ 0x338
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	0800decc 	.word	0x0800decc
 8003880:	0800deec 	.word	0x0800deec
 8003884:	0800df08 	.word	0x0800df08
 8003888:	0800df24 	.word	0x0800df24
 800388c:	0800df48 	.word	0x0800df48
 8003890:	20000704 	.word	0x20000704
 8003894:	0800df6c 	.word	0x0800df6c
 8003898:	0800dfb0 	.word	0x0800dfb0
 800389c:	0800e018 	.word	0x0800e018

080038a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <HAL_MspInit+0x4c>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	4a0f      	ldr	r2, [pc, #60]	@ (80038ec <HAL_MspInit+0x4c>)
 80038b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <HAL_MspInit+0x4c>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_MspInit+0x4c>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	4a08      	ldr	r2, [pc, #32]	@ (80038ec <HAL_MspInit+0x4c>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_MspInit+0x4c>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a10      	ldr	r2, [pc, #64]	@ (800394c <HAL_RTC_MspInit+0x5c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d119      	bne.n	8003944 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003910:	2302      	movs	r3, #2
 8003912:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003918:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	4618      	mov	r0, r3
 8003920:	f001 fb4c 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800392a:	f7fe fd75 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800392e:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <HAL_RTC_MspInit+0x60>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003934:	2200      	movs	r2, #0
 8003936:	2100      	movs	r1, #0
 8003938:	2029      	movs	r0, #41	@ 0x29
 800393a:	f000 fc28 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800393e:	2029      	movs	r0, #41	@ 0x29
 8003940:	f000 fc41 	bl	80041c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40002800 	.word	0x40002800
 8003950:	42470e3c 	.word	0x42470e3c

08003954 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a28      	ldr	r2, [pc, #160]	@ (8003a14 <HAL_SD_MspInit+0xc0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d14a      	bne.n	8003a0c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	4a26      	ldr	r2, [pc, #152]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 8003980:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003984:	6453      	str	r3, [r2, #68]	@ 0x44
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	4a18      	ldr	r2, [pc, #96]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 80039b8:	f043 0308 	orr.w	r3, r3, #8
 80039bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039be:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <HAL_SD_MspInit+0xc4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80039ca:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80039ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80039dc:	230c      	movs	r3, #12
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4619      	mov	r1, r3
 80039e6:	480d      	ldr	r0, [pc, #52]	@ (8003a1c <HAL_SD_MspInit+0xc8>)
 80039e8:	f000 fc9a 	bl	8004320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039ec:	2304      	movs	r3, #4
 80039ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	2302      	movs	r3, #2
 80039f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f8:	2303      	movs	r3, #3
 80039fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80039fc:	230c      	movs	r3, #12
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4619      	mov	r1, r3
 8003a06:	4806      	ldr	r0, [pc, #24]	@ (8003a20 <HAL_SD_MspInit+0xcc>)
 8003a08:	f000 fc8a 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003a0c:	bf00      	nop
 8003a0e:	3728      	adds	r7, #40	@ 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40020c00 	.word	0x40020c00

08003a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	@ 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <HAL_SPI_MspInit+0x84>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d12b      	bne.n	8003a9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	4b18      	ldr	r3, [pc, #96]	@ (8003aac <HAL_SPI_MspInit+0x88>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <HAL_SPI_MspInit+0x88>)
 8003a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <HAL_SPI_MspInit+0x88>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <HAL_SPI_MspInit+0x88>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	4a10      	ldr	r2, [pc, #64]	@ (8003aac <HAL_SPI_MspInit+0x88>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a72:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <HAL_SPI_MspInit+0x88>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a7e:	23e0      	movs	r3, #224	@ 0xe0
 8003a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a82:	2302      	movs	r3, #2
 8003a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a8e:	2305      	movs	r3, #5
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	4619      	mov	r1, r3
 8003a98:	4805      	ldr	r0, [pc, #20]	@ (8003ab0 <HAL_SPI_MspInit+0x8c>)
 8003a9a:	f000 fc41 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a9e:	bf00      	nop
 8003aa0:	3728      	adds	r7, #40	@ 0x28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40013000 	.word	0x40013000
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020000 	.word	0x40020000

08003ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8003afc <HAL_TIM_Base_MspInit+0x48>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d115      	bne.n	8003af2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <HAL_TIM_Base_MspInit+0x4c>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	4a0c      	ldr	r2, [pc, #48]	@ (8003b00 <HAL_TIM_Base_MspInit+0x4c>)
 8003ad0:	f043 0320 	orr.w	r3, r3, #32
 8003ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <HAL_TIM_Base_MspInit+0x4c>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2037      	movs	r0, #55	@ 0x37
 8003ae8:	f000 fb51 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003aec:	2037      	movs	r0, #55	@ 0x37
 8003aee:	f000 fb6a 	bl	80041c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40001400 	.word	0x40001400
 8003b00:	40023800 	.word	0x40023800

08003b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b090      	sub	sp, #64	@ 0x40
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a71      	ldr	r2, [pc, #452]	@ (8003ce8 <HAL_UART_MspInit+0x1e4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12c      	bne.n	8003b80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2a:	4b70      	ldr	r3, [pc, #448]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	4a6f      	ldr	r2, [pc, #444]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b46:	4b69      	ldr	r3, [pc, #420]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	4a68      	ldr	r2, [pc, #416]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b52:	4b66      	ldr	r3, [pc, #408]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ESP_2_TX_Pin|ESP_2_RX_Pin;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b6e:	2308      	movs	r3, #8
 8003b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b76:	4619      	mov	r1, r3
 8003b78:	485d      	ldr	r0, [pc, #372]	@ (8003cf0 <HAL_UART_MspInit+0x1ec>)
 8003b7a:	f000 fbd1 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b7e:	e0ae      	b.n	8003cde <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf4 <HAL_UART_MspInit+0x1f0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d135      	bne.n	8003bf6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	4b57      	ldr	r3, [pc, #348]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	4a56      	ldr	r2, [pc, #344]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b94:	f043 0310 	orr.w	r3, r3, #16
 8003b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b9a:	4b54      	ldr	r3, [pc, #336]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	4b50      	ldr	r3, [pc, #320]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	4a4f      	ldr	r2, [pc, #316]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003bc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bd4:	2307      	movs	r3, #7
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4844      	ldr	r0, [pc, #272]	@ (8003cf0 <HAL_UART_MspInit+0x1ec>)
 8003be0:	f000 fb9e 	bl	8004320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003be4:	2200      	movs	r2, #0
 8003be6:	2100      	movs	r1, #0
 8003be8:	2025      	movs	r0, #37	@ 0x25
 8003bea:	f000 fad0 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bee:	2025      	movs	r0, #37	@ 0x25
 8003bf0:	f000 fae9 	bl	80041c6 <HAL_NVIC_EnableIRQ>
}
 8003bf4:	e073      	b.n	8003cde <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf8 <HAL_UART_MspInit+0x1f4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d134      	bne.n	8003c6a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	4b39      	ldr	r3, [pc, #228]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	4a38      	ldr	r2, [pc, #224]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c10:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	4b32      	ldr	r3, [pc, #200]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	4a31      	ldr	r2, [pc, #196]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8003c38:	230c      	movs	r3, #12
 8003c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c44:	2303      	movs	r3, #3
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c48:	2307      	movs	r3, #7
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c50:	4619      	mov	r1, r3
 8003c52:	4827      	ldr	r0, [pc, #156]	@ (8003cf0 <HAL_UART_MspInit+0x1ec>)
 8003c54:	f000 fb64 	bl	8004320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	2026      	movs	r0, #38	@ 0x26
 8003c5e:	f000 fa96 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c62:	2026      	movs	r0, #38	@ 0x26
 8003c64:	f000 faaf 	bl	80041c6 <HAL_NVIC_EnableIRQ>
}
 8003c68:	e039      	b.n	8003cde <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART3)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a23      	ldr	r2, [pc, #140]	@ (8003cfc <HAL_UART_MspInit+0x1f8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d134      	bne.n	8003cde <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c84:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	4a14      	ldr	r2, [pc, #80]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003c9a:	f043 0302 	orr.w	r3, r3, #2
 8003c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca0:	4b12      	ldr	r3, [pc, #72]	@ (8003cec <HAL_UART_MspInit+0x1e8>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8003cac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cbe:	2307      	movs	r3, #7
 8003cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	480d      	ldr	r0, [pc, #52]	@ (8003d00 <HAL_UART_MspInit+0x1fc>)
 8003cca:	f000 fb29 	bl	8004320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	2027      	movs	r0, #39	@ 0x27
 8003cd4:	f000 fa5b 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003cd8:	2027      	movs	r0, #39	@ 0x27
 8003cda:	f000 fa74 	bl	80041c6 <HAL_NVIC_EnableIRQ>
}
 8003cde:	bf00      	nop
 8003ce0:	3740      	adds	r7, #64	@ 0x40
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40004c00 	.word	0x40004c00
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40020000 	.word	0x40020000
 8003cf4:	40011000 	.word	0x40011000
 8003cf8:	40004400 	.word	0x40004400
 8003cfc:	40004800 	.word	0x40004800
 8003d00:	40020400 	.word	0x40020400

08003d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <NMI_Handler+0x4>

08003d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <HardFault_Handler+0x4>

08003d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <MemManage_Handler+0x4>

08003d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <BusFault_Handler+0x4>

08003d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <UsageFault_Handler+0x4>

08003d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d5a:	f000 f8f9 	bl	8003f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d68:	4802      	ldr	r0, [pc, #8]	@ (8003d74 <USART1_IRQHandler+0x10>)
 8003d6a:	f003 ffdd 	bl	8007d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000704 	.word	0x20000704

08003d78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d7c:	4802      	ldr	r0, [pc, #8]	@ (8003d88 <USART2_IRQHandler+0x10>)
 8003d7e:	f003 ffd3 	bl	8007d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000074c 	.word	0x2000074c

08003d8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d90:	4802      	ldr	r0, [pc, #8]	@ (8003d9c <USART3_IRQHandler+0x10>)
 8003d92:	f003 ffc9 	bl	8007d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000794 	.word	0x20000794

08003da0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003da4:	4802      	ldr	r0, [pc, #8]	@ (8003db0 <RTC_Alarm_IRQHandler+0x10>)
 8003da6:	f001 fc37 	bl	8005618 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000578 	.word	0x20000578

08003db4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003db8:	4802      	ldr	r0, [pc, #8]	@ (8003dc4 <TIM7_IRQHandler+0x10>)
 8003dba:	f003 fb99 	bl	80074f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000674 	.word	0x20000674

08003dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <_sbrk+0x5c>)
 8003dd2:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <_sbrk+0x60>)
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ddc:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de4:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <_sbrk+0x64>)
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <_sbrk+0x68>)
 8003de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dea:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d207      	bcs.n	8003e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df8:	f008 f9d4 	bl	800c1a4 <__errno>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	220c      	movs	r2, #12
 8003e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
 8003e06:	e009      	b.n	8003e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e08:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <_sbrk+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <_sbrk+0x64>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	4a05      	ldr	r2, [pc, #20]	@ (8003e2c <_sbrk+0x64>)
 8003e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20020000 	.word	0x20020000
 8003e28:	00000400 	.word	0x00000400
 8003e2c:	2000086c 	.word	0x2000086c
 8003e30:	200009f8 	.word	0x200009f8

08003e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <SystemInit+0x20>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	4a05      	ldr	r2, [pc, #20]	@ (8003e54 <SystemInit+0x20>)
 8003e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003e5c:	f7ff ffea 	bl	8003e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e60:	480c      	ldr	r0, [pc, #48]	@ (8003e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e62:	490d      	ldr	r1, [pc, #52]	@ (8003e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e64:	4a0d      	ldr	r2, [pc, #52]	@ (8003e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e68:	e002      	b.n	8003e70 <LoopCopyDataInit>

08003e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e6e:	3304      	adds	r3, #4

08003e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e74:	d3f9      	bcc.n	8003e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e78:	4c0a      	ldr	r4, [pc, #40]	@ (8003ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e7c:	e001      	b.n	8003e82 <LoopFillZerobss>

08003e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e80:	3204      	adds	r2, #4

08003e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e84:	d3fb      	bcc.n	8003e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e86:	f008 f993 	bl	800c1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e8a:	f7fd ff23 	bl	8001cd4 <main>
  bx  lr    
 8003e8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003e9c:	0800e6f0 	.word	0x0800e6f0
  ldr r2, =_sbss
 8003ea0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003ea4:	200009f8 	.word	0x200009f8

08003ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ea8:	e7fe      	b.n	8003ea8 <ADC_IRQHandler>
	...

08003eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003eec <HAL_Init+0x40>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003eec <HAL_Init+0x40>)
 8003eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_Init+0x40>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <HAL_Init+0x40>)
 8003ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ec8:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <HAL_Init+0x40>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a07      	ldr	r2, [pc, #28]	@ (8003eec <HAL_Init+0x40>)
 8003ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ed4:	2003      	movs	r0, #3
 8003ed6:	f000 f94f 	bl	8004178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eda:	200f      	movs	r0, #15
 8003edc:	f000 f808 	bl	8003ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ee0:	f7ff fcde 	bl	80038a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023c00 	.word	0x40023c00

08003ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ef8:	4b12      	ldr	r3, [pc, #72]	@ (8003f44 <HAL_InitTick+0x54>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <HAL_InitTick+0x58>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f967 	bl	80041e2 <HAL_SYSTICK_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00e      	b.n	8003f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b0f      	cmp	r3, #15
 8003f22:	d80a      	bhi.n	8003f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f24:	2200      	movs	r2, #0
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	f000 f92f 	bl	800418e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f30:	4a06      	ldr	r2, [pc, #24]	@ (8003f4c <HAL_InitTick+0x5c>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000004 	.word	0x20000004
 8003f48:	2000000c 	.word	0x2000000c
 8003f4c:	20000008 	.word	0x20000008

08003f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_IncTick+0x20>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <HAL_IncTick+0x24>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	4a04      	ldr	r2, [pc, #16]	@ (8003f74 <HAL_IncTick+0x24>)
 8003f62:	6013      	str	r3, [r2, #0]
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	2000000c 	.word	0x2000000c
 8003f74:	20000870 	.word	0x20000870

08003f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <HAL_GetTick+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000870 	.word	0x20000870

08003f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f98:	f7ff ffee 	bl	8003f78 <HAL_GetTick>
 8003f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d005      	beq.n	8003fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003faa:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <HAL_Delay+0x44>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fb6:	bf00      	nop
 8003fb8:	f7ff ffde 	bl	8003f78 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d8f7      	bhi.n	8003fb8 <HAL_Delay+0x28>
  {
  }
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000000c 	.word	0x2000000c

08003fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <__NVIC_SetPriorityGrouping+0x44>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800400a:	4a04      	ldr	r2, [pc, #16]	@ (800401c <__NVIC_SetPriorityGrouping+0x44>)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	60d3      	str	r3, [r2, #12]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004024:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <__NVIC_GetPriorityGrouping+0x18>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	0a1b      	lsrs	r3, r3, #8
 800402a:	f003 0307 	and.w	r3, r3, #7
}
 800402e:	4618      	mov	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	2b00      	cmp	r3, #0
 800404c:	db0b      	blt.n	8004066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	4907      	ldr	r1, [pc, #28]	@ (8004074 <__NVIC_EnableIRQ+0x38>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2001      	movs	r0, #1
 800405e:	fa00 f202 	lsl.w	r2, r0, r2
 8004062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000e100 	.word	0xe000e100

08004078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	2b00      	cmp	r3, #0
 800408a:	db0a      	blt.n	80040a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	490c      	ldr	r1, [pc, #48]	@ (80040c4 <__NVIC_SetPriority+0x4c>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	0112      	lsls	r2, r2, #4
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	440b      	add	r3, r1
 800409c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040a0:	e00a      	b.n	80040b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4908      	ldr	r1, [pc, #32]	@ (80040c8 <__NVIC_SetPriority+0x50>)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	3b04      	subs	r3, #4
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	440b      	add	r3, r1
 80040b6:	761a      	strb	r2, [r3, #24]
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	e000e100 	.word	0xe000e100
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f1c3 0307 	rsb	r3, r3, #7
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	bf28      	it	cs
 80040ea:	2304      	movcs	r3, #4
 80040ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d902      	bls.n	80040fc <NVIC_EncodePriority+0x30>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3b03      	subs	r3, #3
 80040fa:	e000      	b.n	80040fe <NVIC_EncodePriority+0x32>
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004100:	f04f 32ff 	mov.w	r2, #4294967295
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43da      	mvns	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	401a      	ands	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004114:	f04f 31ff 	mov.w	r1, #4294967295
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	43d9      	mvns	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004124:	4313      	orrs	r3, r2
         );
}
 8004126:	4618      	mov	r0, r3
 8004128:	3724      	adds	r7, #36	@ 0x24
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004144:	d301      	bcc.n	800414a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004146:	2301      	movs	r3, #1
 8004148:	e00f      	b.n	800416a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800414a:	4a0a      	ldr	r2, [pc, #40]	@ (8004174 <SysTick_Config+0x40>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3b01      	subs	r3, #1
 8004150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004152:	210f      	movs	r1, #15
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	f7ff ff8e 	bl	8004078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <SysTick_Config+0x40>)
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004162:	4b04      	ldr	r3, [pc, #16]	@ (8004174 <SysTick_Config+0x40>)
 8004164:	2207      	movs	r2, #7
 8004166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	e000e010 	.word	0xe000e010

08004178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff29 	bl	8003fd8 <__NVIC_SetPriorityGrouping>
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041a0:	f7ff ff3e 	bl	8004020 <__NVIC_GetPriorityGrouping>
 80041a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	6978      	ldr	r0, [r7, #20]
 80041ac:	f7ff ff8e 	bl	80040cc <NVIC_EncodePriority>
 80041b0:	4602      	mov	r2, r0
 80041b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff5d 	bl	8004078 <__NVIC_SetPriority>
}
 80041be:	bf00      	nop
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	4603      	mov	r3, r0
 80041ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ff31 	bl	800403c <__NVIC_EnableIRQ>
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ffa2 	bl	8004134 <SysTick_Config>
 80041f0:	4603      	mov	r3, r0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004208:	f7ff feb6 	bl	8003f78 <HAL_GetTick>
 800420c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d008      	beq.n	800422c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2280      	movs	r2, #128	@ 0x80
 800421e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e052      	b.n	80042d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0216 	bic.w	r2, r2, #22
 800423a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800424a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <HAL_DMA_Abort+0x62>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0208 	bic.w	r2, r2, #8
 800426a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427c:	e013      	b.n	80042a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800427e:	f7ff fe7b 	bl	8003f78 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b05      	cmp	r3, #5
 800428a:	d90c      	bls.n	80042a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e015      	b.n	80042d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e4      	bne.n	800427e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	223f      	movs	r2, #63	@ 0x3f
 80042ba:	409a      	lsls	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d004      	beq.n	80042f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2280      	movs	r2, #128	@ 0x80
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e00c      	b.n	8004312 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2205      	movs	r2, #5
 80042fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e16b      	b.n	8004614 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800433c:	2201      	movs	r2, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	429a      	cmp	r2, r3
 8004356:	f040 815a 	bne.w	800460e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d005      	beq.n	8004372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436e:	2b02      	cmp	r3, #2
 8004370:	d130      	bne.n	80043d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d017      	beq.n	8004410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d123      	bne.n	8004464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	08da      	lsrs	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3208      	adds	r2, #8
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3208      	adds	r2, #8
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80b4 	beq.w	800460e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	4b60      	ldr	r3, [pc, #384]	@ (800462c <HAL_GPIO_Init+0x30c>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	4a5f      	ldr	r2, [pc, #380]	@ (800462c <HAL_GPIO_Init+0x30c>)
 80044b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044b6:	4b5d      	ldr	r3, [pc, #372]	@ (800462c <HAL_GPIO_Init+0x30c>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004630 <HAL_GPIO_Init+0x310>)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a52      	ldr	r2, [pc, #328]	@ (8004634 <HAL_GPIO_Init+0x314>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d02b      	beq.n	8004546 <HAL_GPIO_Init+0x226>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a51      	ldr	r2, [pc, #324]	@ (8004638 <HAL_GPIO_Init+0x318>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d025      	beq.n	8004542 <HAL_GPIO_Init+0x222>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a50      	ldr	r2, [pc, #320]	@ (800463c <HAL_GPIO_Init+0x31c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01f      	beq.n	800453e <HAL_GPIO_Init+0x21e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4f      	ldr	r2, [pc, #316]	@ (8004640 <HAL_GPIO_Init+0x320>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d019      	beq.n	800453a <HAL_GPIO_Init+0x21a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4e      	ldr	r2, [pc, #312]	@ (8004644 <HAL_GPIO_Init+0x324>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_GPIO_Init+0x216>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4d      	ldr	r2, [pc, #308]	@ (8004648 <HAL_GPIO_Init+0x328>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00d      	beq.n	8004532 <HAL_GPIO_Init+0x212>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4c      	ldr	r2, [pc, #304]	@ (800464c <HAL_GPIO_Init+0x32c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <HAL_GPIO_Init+0x20e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4b      	ldr	r2, [pc, #300]	@ (8004650 <HAL_GPIO_Init+0x330>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_GPIO_Init+0x20a>
 8004526:	2307      	movs	r3, #7
 8004528:	e00e      	b.n	8004548 <HAL_GPIO_Init+0x228>
 800452a:	2308      	movs	r3, #8
 800452c:	e00c      	b.n	8004548 <HAL_GPIO_Init+0x228>
 800452e:	2306      	movs	r3, #6
 8004530:	e00a      	b.n	8004548 <HAL_GPIO_Init+0x228>
 8004532:	2305      	movs	r3, #5
 8004534:	e008      	b.n	8004548 <HAL_GPIO_Init+0x228>
 8004536:	2304      	movs	r3, #4
 8004538:	e006      	b.n	8004548 <HAL_GPIO_Init+0x228>
 800453a:	2303      	movs	r3, #3
 800453c:	e004      	b.n	8004548 <HAL_GPIO_Init+0x228>
 800453e:	2302      	movs	r3, #2
 8004540:	e002      	b.n	8004548 <HAL_GPIO_Init+0x228>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_GPIO_Init+0x228>
 8004546:	2300      	movs	r3, #0
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	f002 0203 	and.w	r2, r2, #3
 800454e:	0092      	lsls	r2, r2, #2
 8004550:	4093      	lsls	r3, r2
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004558:	4935      	ldr	r1, [pc, #212]	@ (8004630 <HAL_GPIO_Init+0x310>)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	3302      	adds	r3, #2
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004566:	4b3b      	ldr	r3, [pc, #236]	@ (8004654 <HAL_GPIO_Init+0x334>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800458a:	4a32      	ldr	r2, [pc, #200]	@ (8004654 <HAL_GPIO_Init+0x334>)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004590:	4b30      	ldr	r3, [pc, #192]	@ (8004654 <HAL_GPIO_Init+0x334>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b4:	4a27      	ldr	r2, [pc, #156]	@ (8004654 <HAL_GPIO_Init+0x334>)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ba:	4b26      	ldr	r3, [pc, #152]	@ (8004654 <HAL_GPIO_Init+0x334>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045de:	4a1d      	ldr	r2, [pc, #116]	@ (8004654 <HAL_GPIO_Init+0x334>)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004654 <HAL_GPIO_Init+0x334>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004608:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <HAL_GPIO_Init+0x334>)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2b0f      	cmp	r3, #15
 8004618:	f67f ae90 	bls.w	800433c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	3724      	adds	r7, #36	@ 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	40013800 	.word	0x40013800
 8004634:	40020000 	.word	0x40020000
 8004638:	40020400 	.word	0x40020400
 800463c:	40020800 	.word	0x40020800
 8004640:	40020c00 	.word	0x40020c00
 8004644:	40021000 	.word	0x40021000
 8004648:	40021400 	.word	0x40021400
 800464c:	40021800 	.word	0x40021800
 8004650:	40021c00 	.word	0x40021c00
 8004654:	40013c00 	.word	0x40013c00

08004658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
 8004664:	4613      	mov	r3, r2
 8004666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004668:	787b      	ldrb	r3, [r7, #1]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004674:	e003      	b.n	800467e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004676:	887b      	ldrh	r3, [r7, #2]
 8004678:	041a      	lsls	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	619a      	str	r2, [r3, #24]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e267      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d075      	beq.n	8004796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046aa:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00c      	beq.n	80046d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b6:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d112      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c2:	4b82      	ldr	r3, [pc, #520]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	4b7e      	ldr	r3, [pc, #504]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05b      	beq.n	8004794 <HAL_RCC_OscConfig+0x108>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d157      	bne.n	8004794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e242      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f0:	d106      	bne.n	8004700 <HAL_RCC_OscConfig+0x74>
 80046f2:	4b76      	ldr	r3, [pc, #472]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e01d      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x98>
 800470a:	4b70      	ldr	r3, [pc, #448]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6f      	ldr	r2, [pc, #444]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b6d      	ldr	r3, [pc, #436]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a6c      	ldr	r2, [pc, #432]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004724:	4b69      	ldr	r3, [pc, #420]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a68      	ldr	r2, [pc, #416]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800472a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b66      	ldr	r3, [pc, #408]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a65      	ldr	r2, [pc, #404]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7ff fc18 	bl	8003f78 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7ff fc14 	bl	8003f78 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	@ 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e207      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4b5b      	ldr	r3, [pc, #364]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0xc0>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7ff fc04 	bl	8003f78 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7ff fc00 	bl	8003f78 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e1f3      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	4b51      	ldr	r3, [pc, #324]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0xe8>
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d063      	beq.n	800486a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047a2:	4b4a      	ldr	r3, [pc, #296]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d11c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b44      	ldr	r3, [pc, #272]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d116      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	4b41      	ldr	r3, [pc, #260]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e1c7      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4937      	ldr	r1, [pc, #220]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	e03a      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fc:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_OscConfig+0x244>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7ff fbb9 	bl	8003f78 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480a:	f7ff fbb5 	bl	8003f78 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e1a8      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4925      	ldr	r1, [pc, #148]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
 800483c:	e015      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_RCC_OscConfig+0x244>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7ff fb98 	bl	8003f78 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484c:	f7ff fb94 	bl	8003f78 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e187      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d036      	beq.n	80048e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487e:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <HAL_RCC_OscConfig+0x248>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7ff fb78 	bl	8003f78 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7ff fb74 	bl	8003f78 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e167      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80048a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x200>
 80048aa:	e01b      	b.n	80048e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCC_OscConfig+0x248>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7ff fb61 	bl	8003f78 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	e00e      	b.n	80048d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7ff fb5d 	bl	8003f78 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d907      	bls.n	80048d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e150      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	42470000 	.word	0x42470000
 80048d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	4b88      	ldr	r3, [pc, #544]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ea      	bne.n	80048ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8097 	beq.w	8004a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f6:	4b81      	ldr	r3, [pc, #516]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b7d      	ldr	r3, [pc, #500]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	@ 0x40
 8004912:	4b7a      	ldr	r3, [pc, #488]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b77      	ldr	r3, [pc, #476]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d118      	bne.n	8004960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492e:	4b74      	ldr	r3, [pc, #464]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a73      	ldr	r2, [pc, #460]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493a:	f7ff fb1d 	bl	8003f78 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004942:	f7ff fb19 	bl	8003f78 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e10c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	4b6a      	ldr	r3, [pc, #424]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <HAL_RCC_OscConfig+0x2ea>
 8004968:	4b64      	ldr	r3, [pc, #400]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496c:	4a63      	ldr	r2, [pc, #396]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	@ 0x70
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x30c>
 800497e:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	4a5e      	ldr	r2, [pc, #376]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6713      	str	r3, [r2, #112]	@ 0x70
 800498a:	4b5c      	ldr	r3, [pc, #368]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	4a5b      	ldr	r2, [pc, #364]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	@ 0x70
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004998:	4b58      	ldr	r3, [pc, #352]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	4a57      	ldr	r2, [pc, #348]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a4:	4b55      	ldr	r3, [pc, #340]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a8:	4a54      	ldr	r2, [pc, #336]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 0304 	bic.w	r3, r3, #4
 80049ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7ff fade 	bl	8003f78 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7ff fada 	bl	8003f78 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0cb      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	4b49      	ldr	r3, [pc, #292]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ee      	beq.n	80049c0 <HAL_RCC_OscConfig+0x334>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e4:	f7ff fac8 	bl	8003f78 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7ff fac4 	bl	8003f78 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0b5      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ee      	bne.n	80049ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	4a38      	ldr	r2, [pc, #224]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a1 	beq.w	8004b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2a:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d05c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d141      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b31      	ldr	r3, [pc, #196]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7ff fa98 	bl	8003f78 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7ff fa94 	bl	8003f78 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e087      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	491b      	ldr	r1, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a94:	4b1b      	ldr	r3, [pc, #108]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7ff fa6d 	bl	8003f78 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7ff fa69 	bl	8003f78 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e05c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x416>
 8004ac0:	e054      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac2:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7ff fa56 	bl	8003f78 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7ff fa52 	bl	8003f78 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e045      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x444>
 8004aee:	e03d      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e038      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40007000 	.word	0x40007000
 8004b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x4ec>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d028      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d121      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d11a      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d111      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	3b01      	subs	r3, #1
 8004b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cc      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b68      	ldr	r3, [pc, #416]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d90c      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b65      	ldr	r3, [pc, #404]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b63      	ldr	r3, [pc, #396]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b8      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd0:	4b59      	ldr	r3, [pc, #356]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a58      	ldr	r2, [pc, #352]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be8:	4b53      	ldr	r3, [pc, #332]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a52      	ldr	r2, [pc, #328]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b50      	ldr	r3, [pc, #320]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	494d      	ldr	r1, [pc, #308]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d044      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b47      	ldr	r3, [pc, #284]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d119      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e06f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e067      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5a:	4b37      	ldr	r3, [pc, #220]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0203 	bic.w	r2, r3, #3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4934      	ldr	r1, [pc, #208]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c6c:	f7ff f984 	bl	8003f78 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c74:	f7ff f980 	bl	8003f78 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e04f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 020c 	and.w	r2, r3, #12
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d1eb      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b25      	ldr	r3, [pc, #148]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d20c      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b22      	ldr	r3, [pc, #136]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e032      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd0:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4916      	ldr	r1, [pc, #88]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cee:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	490e      	ldr	r1, [pc, #56]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d02:	f000 f821 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	490a      	ldr	r1, [pc, #40]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	5ccb      	ldrb	r3, [r1, r3]
 8004d16:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1a:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d1e:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff f8e4 	bl	8003ef0 <HAL_InitTick>

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023c00 	.word	0x40023c00
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	0800e0f0 	.word	0x0800e0f0
 8004d40:	20000004 	.word	0x20000004
 8004d44:	20000008 	.word	0x20000008

08004d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b094      	sub	sp, #80	@ 0x50
 8004d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d60:	4b79      	ldr	r3, [pc, #484]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d00d      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x40>
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	f200 80e1 	bhi.w	8004f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x34>
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d7a:	e0db      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b73      	ldr	r3, [pc, #460]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d80:	e0db      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d82:	4b73      	ldr	r3, [pc, #460]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d86:	e0d8      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d88:	4b6f      	ldr	r3, [pc, #444]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d92:	4b6d      	ldr	r3, [pc, #436]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	2200      	movs	r2, #0
 8004da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	f04f 0000 	mov.w	r0, #0
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	0159      	lsls	r1, r3, #5
 8004dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dcc:	0150      	lsls	r0, r2, #5
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	1a51      	subs	r1, r2, r1
 8004dd6:	6139      	str	r1, [r7, #16]
 8004dd8:	4629      	mov	r1, r5
 8004dda:	eb63 0301 	sbc.w	r3, r3, r1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dec:	4659      	mov	r1, fp
 8004dee:	018b      	lsls	r3, r1, #6
 8004df0:	4651      	mov	r1, sl
 8004df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004df6:	4651      	mov	r1, sl
 8004df8:	018a      	lsls	r2, r1, #6
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8004e00:	4659      	mov	r1, fp
 8004e02:	eb63 0901 	sbc.w	r9, r3, r1
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1a:	4690      	mov	r8, r2
 8004e1c:	4699      	mov	r9, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	eb18 0303 	adds.w	r3, r8, r3
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	462b      	mov	r3, r5
 8004e28:	eb49 0303 	adc.w	r3, r9, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	024b      	lsls	r3, r1, #9
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e44:	4621      	mov	r1, r4
 8004e46:	024a      	lsls	r2, r1, #9
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	2200      	movs	r2, #0
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e58:	f7fb fa22 	bl	80002a0 <__aeabi_uldivmod>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4613      	mov	r3, r2
 8004e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e64:	e058      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e66:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	099b      	lsrs	r3, r3, #6
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	4611      	mov	r1, r2
 8004e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	0159      	lsls	r1, r3, #5
 8004e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e92:	0150      	lsls	r0, r2, #5
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4641      	mov	r1, r8
 8004e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	00eb      	lsls	r3, r5, #3
 8004eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ece:	00e2      	lsls	r2, r4, #3
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	18e3      	adds	r3, r4, r3
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	464b      	mov	r3, r9
 8004edc:	eb45 0303 	adc.w	r3, r5, r3
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eee:	4629      	mov	r1, r5
 8004ef0:	028b      	lsls	r3, r1, #10
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ef8:	4621      	mov	r1, r4
 8004efa:	028a      	lsls	r2, r1, #10
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f02:	2200      	movs	r2, #0
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	61fa      	str	r2, [r7, #28]
 8004f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f0c:	f7fb f9c8 	bl	80002a0 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4613      	mov	r3, r2
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	3301      	adds	r3, #1
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f32:	e002      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f34:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3750      	adds	r7, #80	@ 0x50
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200

08004f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000004 	.word	0x20000004

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f70:	f7ff fff0 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	0a9b      	lsrs	r3, r3, #10
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4903      	ldr	r1, [pc, #12]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	0800e100 	.word	0x0800e100

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f98:	f7ff ffdc 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0b5b      	lsrs	r3, r3, #13
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4903      	ldr	r1, [pc, #12]	@ (8004fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	0800e100 	.word	0x0800e100

08004fbc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d035      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fe4:	4b62      	ldr	r3, [pc, #392]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fea:	f7fe ffc5 	bl	8003f78 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ff2:	f7fe ffc1 	bl	8003f78 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0b0      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005004:	4b5b      	ldr	r3, [pc, #364]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	019a      	lsls	r2, r3, #6
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	071b      	lsls	r3, r3, #28
 800501c:	4955      	ldr	r1, [pc, #340]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005024:	4b52      	ldr	r3, [pc, #328]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502a:	f7fe ffa5 	bl	8003f78 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005032:	f7fe ffa1 	bl	8003f78 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e090      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005044:	4b4b      	ldr	r3, [pc, #300]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8083 	beq.w	8005164 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	4b44      	ldr	r3, [pc, #272]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	4a43      	ldr	r2, [pc, #268]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800506c:	6413      	str	r3, [r2, #64]	@ 0x40
 800506e:	4b41      	ldr	r3, [pc, #260]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800507a:	4b3f      	ldr	r3, [pc, #252]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3e      	ldr	r2, [pc, #248]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005084:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005086:	f7fe ff77 	bl	8003f78 <HAL_GetTick>
 800508a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508e:	f7fe ff73 	bl	8003f78 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e062      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050a0:	4b35      	ldr	r3, [pc, #212]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ac:	4b31      	ldr	r3, [pc, #196]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d02f      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d028      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050d4:	4b29      	ldr	r3, [pc, #164]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050da:	4b28      	ldr	r3, [pc, #160]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050e0:	4a24      	ldr	r2, [pc, #144]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050e6:	4b23      	ldr	r3, [pc, #140]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d114      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050f2:	f7fe ff41 	bl	8003f78 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f8:	e00a      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fa:	f7fe ff3d 	bl	8003f78 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005108:	4293      	cmp	r3, r2
 800510a:	d901      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e02a      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005110:	4b18      	ldr	r3, [pc, #96]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ee      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005128:	d10d      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800512a:	4b12      	ldr	r3, [pc, #72]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800513a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800513e:	490d      	ldr	r1, [pc, #52]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005140:	4313      	orrs	r3, r2
 8005142:	608b      	str	r3, [r1, #8]
 8005144:	e005      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005146:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4a0a      	ldr	r2, [pc, #40]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800514c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005150:	6093      	str	r3, [r2, #8]
 8005152:	4b08      	ldr	r3, [pc, #32]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005154:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515e:	4905      	ldr	r1, [pc, #20]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005160:	4313      	orrs	r3, r2
 8005162:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	42470068 	.word	0x42470068
 8005174:	40023800 	.word	0x40023800
 8005178:	40007000 	.word	0x40007000
 800517c:	42470e40 	.word	0x42470e40

08005180 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e073      	b.n	800527a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	7f5b      	ldrb	r3, [r3, #29]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fe fba4 	bl	80038f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d055      	beq.n	8005268 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	22ca      	movs	r2, #202	@ 0xca
 80051c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2253      	movs	r2, #83	@ 0x53
 80051ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fa99 	bl	8005704 <RTC_EnterInitMode>
 80051d2:	4603      	mov	r3, r0
 80051d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d12c      	bne.n	8005236 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80051ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6919      	ldr	r1, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	041a      	lsls	r2, r3, #16
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 faa0 	bl	8005772 <RTC_ExitInitMode>
 8005232:	4603      	mov	r3, r0
 8005234:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d110      	bne.n	800525e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800524a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	22ff      	movs	r2, #255	@ 0xff
 8005264:	625a      	str	r2, [r3, #36]	@ 0x24
 8005266:	e001      	b.n	800526c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005282:	b590      	push	{r4, r7, lr}
 8005284:	b087      	sub	sp, #28
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	7f1b      	ldrb	r3, [r3, #28]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_RTC_SetTime+0x1c>
 800529a:	2302      	movs	r3, #2
 800529c:	e087      	b.n	80053ae <HAL_RTC_SetTime+0x12c>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2202      	movs	r2, #2
 80052a8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d126      	bne.n	80052fe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2200      	movs	r2, #0
 80052c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fa77 	bl	80057bc <RTC_ByteToBcd2>
 80052ce:	4603      	mov	r3, r0
 80052d0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fa70 	bl	80057bc <RTC_ByteToBcd2>
 80052dc:	4603      	mov	r3, r0
 80052de:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052e0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	789b      	ldrb	r3, [r3, #2]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fa68 	bl	80057bc <RTC_ByteToBcd2>
 80052ec:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052ee:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	78db      	ldrb	r3, [r3, #3]
 80052f6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e018      	b.n	8005330 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2200      	movs	r2, #0
 8005310:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800531e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005324:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	78db      	ldrb	r3, [r3, #3]
 800532a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	22ca      	movs	r2, #202	@ 0xca
 8005336:	625a      	str	r2, [r3, #36]	@ 0x24
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2253      	movs	r2, #83	@ 0x53
 800533e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f9df 	bl	8005704 <RTC_EnterInitMode>
 8005346:	4603      	mov	r3, r0
 8005348:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d120      	bne.n	8005392 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800535a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800535e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800536e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6899      	ldr	r1, [r3, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	431a      	orrs	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f9f2 	bl	8005772 <RTC_ExitInitMode>
 800538e:	4603      	mov	r3, r0
 8005390:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	22ff      	movs	r2, #255	@ 0xff
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]

  return status;
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd90      	pop	{r4, r7, pc}

080053b6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80053e8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80053ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005416:	b2da      	uxtb	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	0d9b      	lsrs	r3, r3, #22
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d11a      	bne.n	8005468 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f9de 	bl	80057f8 <RTC_Bcd2ToByte>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f9d5 	bl	80057f8 <RTC_Bcd2ToByte>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	789b      	ldrb	r3, [r3, #2]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f9cc 	bl	80057f8 <RTC_Bcd2ToByte>
 8005460:	4603      	mov	r3, r0
 8005462:	461a      	mov	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005472:	b590      	push	{r4, r7, lr}
 8005474:	b087      	sub	sp, #28
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	7f1b      	ldrb	r3, [r3, #28]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_RTC_SetDate+0x1c>
 800548a:	2302      	movs	r3, #2
 800548c:	e071      	b.n	8005572 <HAL_RTC_SetDate+0x100>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2202      	movs	r2, #2
 8005498:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10e      	bne.n	80054be <HAL_RTC_SetDate+0x4c>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	f023 0310 	bic.w	r3, r3, #16
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	330a      	adds	r3, #10
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11c      	bne.n	80054fe <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	78db      	ldrb	r3, [r3, #3]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 f977 	bl	80057bc <RTC_ByteToBcd2>
 80054ce:	4603      	mov	r3, r0
 80054d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f970 	bl	80057bc <RTC_ByteToBcd2>
 80054dc:	4603      	mov	r3, r0
 80054de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	789b      	ldrb	r3, [r3, #2]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f968 	bl	80057bc <RTC_ByteToBcd2>
 80054ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e00e      	b.n	800551c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	78db      	ldrb	r3, [r3, #3]
 8005502:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800550a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005510:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	22ca      	movs	r2, #202	@ 0xca
 8005522:	625a      	str	r2, [r3, #36]	@ 0x24
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2253      	movs	r2, #83	@ 0x53
 800552a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f8e9 	bl	8005704 <RTC_EnterInitMode>
 8005532:	4603      	mov	r3, r0
 8005534:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005536:	7cfb      	ldrb	r3, [r7, #19]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005546:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800554a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f910 	bl	8005772 <RTC_ExitInitMode>
 8005552:	4603      	mov	r3, r0
 8005554:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	22ff      	movs	r2, #255	@ 0xff
 8005568:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]

  return status;
 8005570:	7cfb      	ldrb	r3, [r7, #19]
}
 8005572:	4618      	mov	r0, r3
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	bd90      	pop	{r4, r7, pc}

0800557a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005594:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005598:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	0b5b      	lsrs	r3, r3, #13
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11a      	bne.n	800560e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	78db      	ldrb	r3, [r3, #3]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f90b 	bl	80057f8 <RTC_Bcd2ToByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f902 	bl	80057f8 <RTC_Bcd2ToByte>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	789b      	ldrb	r3, [r3, #2]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f8f9 	bl	80057f8 <RTC_Bcd2ToByte>
 8005606:	4603      	mov	r3, r0
 8005608:	461a      	mov	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005620:	4b1f      	ldr	r3, [pc, #124]	@ (80056a0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005622:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005626:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d012      	beq.n	800565c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00b      	beq.n	800565c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005654:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f824 	bl	80056a4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d012      	beq.n	8005690 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005688:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f904 	bl	8005898 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	775a      	strb	r2, [r3, #29]
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40013c00 	.word	0x40013c00

080056a4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005700 <HAL_RTC_WaitForSynchro+0x48>)
 80056ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056cc:	f7fe fc54 	bl	8003f78 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056d2:	e009      	b.n	80056e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056d4:	f7fe fc50 	bl	8003f78 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056e2:	d901      	bls.n	80056e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e007      	b.n	80056f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0ee      	beq.n	80056d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	00017f5f 	.word	0x00017f5f

08005704 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d122      	bne.n	8005768 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005730:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005732:	f7fe fc21 	bl	8003f78 <HAL_GetTick>
 8005736:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005738:	e00c      	b.n	8005754 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800573a:	f7fe fc1d 	bl	8003f78 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005748:	d904      	bls.n	8005754 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2204      	movs	r2, #4
 800574e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <RTC_EnterInitMode+0x64>
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d1e8      	bne.n	800573a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800578c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ff8b 	bl	80056b8 <HAL_RTC_WaitForSynchro>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2204      	movs	r2, #4
 80057ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80057ca:	e005      	b.n	80057d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	3b0a      	subs	r3, #10
 80057d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	2b09      	cmp	r3, #9
 80057dc:	d8f6      	bhi.n	80057cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	b2db      	uxtb	r3, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	b2db      	uxtb	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	b2db      	uxtb	r3, r3
 8005824:	4413      	add	r3, r2
 8005826:	b2db      	uxtb	r3, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3350      	adds	r3, #80	@ 0x50
 800584a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4413      	add	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3350      	adds	r3, #80	@ 0x50
 800587c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e022      	b.n	8005904 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d105      	bne.n	80058d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fe f83f 	bl	8003954 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2203      	movs	r2, #3
 80058da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f814 	bl	800590c <HAL_SD_InitCard>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e00a      	b.n	8005904 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800590c:	b5b0      	push	{r4, r5, r7, lr}
 800590e:	b08e      	sub	sp, #56	@ 0x38
 8005910:	af04      	add	r7, sp, #16
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005924:	2300      	movs	r3, #0
 8005926:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005928:	2376      	movs	r3, #118	@ 0x76
 800592a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681d      	ldr	r5, [r3, #0]
 8005930:	466c      	mov	r4, sp
 8005932:	f107 0318 	add.w	r3, r7, #24
 8005936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800593a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800593e:	f107 030c 	add.w	r3, r7, #12
 8005942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005944:	4628      	mov	r0, r5
 8005946:	f003 f951 	bl	8008bec <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800594a:	4b2a      	ldr	r3, [pc, #168]	@ (80059f4 <HAL_SD_InitCard+0xe8>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f003 f992 	bl	8008c7e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800595a:	4b26      	ldr	r3, [pc, #152]	@ (80059f4 <HAL_SD_InitCard+0xe8>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005960:	2002      	movs	r0, #2
 8005962:	f7fe fb15 	bl	8003f90 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fe7a 	bl	8006660 <SD_PowerON>
 800596c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e02e      	b.n	80059ea <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fd99 	bl	80064c4 <SD_InitCard>
 8005992:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e01b      	b.n	80059ea <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059ba:	4618      	mov	r0, r3
 80059bc:	f003 f9f1 	bl	8008da2 <SDMMC_CmdBlockLength>
 80059c0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00f      	beq.n	80059e8 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a0a      	ldr	r2, [pc, #40]	@ (80059f8 <HAL_SD_InitCard+0xec>)
 80059ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3728      	adds	r7, #40	@ 0x28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bdb0      	pop	{r4, r5, r7, pc}
 80059f2:	bf00      	nop
 80059f4:	422580a0 	.word	0x422580a0
 80059f8:	004005ff 	.word	0x004005ff

080059fc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b092      	sub	sp, #72	@ 0x48
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a0a:	f7fe fab5 	bl	8003f78 <HAL_GetTick>
 8005a0e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e1c5      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	f040 81b8 	bne.w	8005dac <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	441a      	add	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d907      	bls.n	8005a60 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e1ac      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2203      	movs	r2, #3
 8005a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d002      	beq.n	8005a7e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7a:	025b      	lsls	r3, r3, #9
 8005a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a82:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	025b      	lsls	r3, r3, #9
 8005a88:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005a8a:	2390      	movs	r3, #144	@ 0x90
 8005a8c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f107 0214 	add.w	r2, r7, #20
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f003 f950 	bl	8008d4a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d90a      	bls.n	8005ac6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005abc:	4618      	mov	r0, r3
 8005abe:	f003 f9b4 	bl	8008e2a <SDMMC_CmdReadMultiBlock>
 8005ac2:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ac4:	e009      	b.n	8005ada <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f003 f987 	bl	8008de6 <SDMMC_CmdReadSingleBlock>
 8005ad8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d012      	beq.n	8005b06 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a7e      	ldr	r2, [pc, #504]	@ (8005ce0 <HAL_SD_ReadBlocks+0x2e4>)
 8005ae6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e159      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b0a:	e061      	b.n	8005bd0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d03c      	beq.n	8005b94 <HAL_SD_ReadBlocks+0x198>
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d039      	beq.n	8005b94 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b24:	e033      	b.n	8005b8e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f003 f889 	bl	8008c42 <SDIO_ReadFIFO>
 8005b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b42:	3b01      	subs	r3, #1
 8005b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	3301      	adds	r3, #1
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5e:	0c1b      	lsrs	r3, r3, #16
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b68:	3301      	adds	r3, #1
 8005b6a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	0e1b      	lsrs	r3, r3, #24
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7e:	3301      	adds	r3, #1
 8005b80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b84:	3b01      	subs	r3, #1
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	d9c8      	bls.n	8005b26 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b94:	f7fe f9f0 	bl	8003f78 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d902      	bls.n	8005baa <HAL_SD_ReadBlocks+0x1ae>
 8005ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d112      	bne.n	8005bd0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a4c      	ldr	r2, [pc, #304]	@ (8005ce0 <HAL_SD_ReadBlocks+0x2e4>)
 8005bb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0f4      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bd6:	f240 332a 	movw	r3, #810	@ 0x32a
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d095      	beq.n	8005b0c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d022      	beq.n	8005c34 <HAL_SD_ReadBlocks+0x238>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d91f      	bls.n	8005c34 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d01b      	beq.n	8005c34 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f003 f979 	bl	8008ef8 <SDMMC_CmdStopTransfer>
 8005c06:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d012      	beq.n	8005c34 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a33      	ldr	r2, [pc, #204]	@ (8005ce0 <HAL_SD_ReadBlocks+0x2e4>)
 8005c14:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0c2      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_SD_ReadBlocks+0x254>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d012      	beq.n	8005c76 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a22      	ldr	r2, [pc, #136]	@ (8005ce0 <HAL_SD_ReadBlocks+0x2e4>)
 8005c56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5c:	f043 0208 	orr.w	r2, r3, #8
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0a1      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d012      	beq.n	8005caa <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <HAL_SD_ReadBlocks+0x2e4>)
 8005c8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	f043 0202 	orr.w	r2, r3, #2
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e087      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d064      	beq.n	8005d82 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a08      	ldr	r2, [pc, #32]	@ (8005ce0 <HAL_SD_ReadBlocks+0x2e4>)
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e06d      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
 8005cde:	bf00      	nop
 8005ce0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f002 ffaa 	bl	8008c42 <SDIO_ReadFIFO>
 8005cee:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d00:	3b01      	subs	r3, #1
 8005d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d10:	3301      	adds	r3, #1
 8005d12:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d16:	3b01      	subs	r3, #1
 8005d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d22:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	3301      	adds	r3, #1
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d32:	0e1b      	lsrs	r3, r3, #24
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d38:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d42:	3b01      	subs	r3, #1
 8005d44:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005d46:	f7fe f917 	bl	8003f78 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d902      	bls.n	8005d5c <HAL_SD_ReadBlocks+0x360>
 8005d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d112      	bne.n	8005d82 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a18      	ldr	r2, [pc, #96]	@ (8005dc4 <HAL_SD_ReadBlocks+0x3c8>)
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e01b      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_SD_ReadBlocks+0x39a>
 8005d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1a6      	bne.n	8005ce4 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005d9e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e006      	b.n	8005dba <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3748      	adds	r7, #72	@ 0x48
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	004005ff 	.word	0x004005ff

08005dc8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b092      	sub	sp, #72	@ 0x48
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005dd6:	f7fe f8cf 	bl	8003f78 <HAL_GetTick>
 8005dda:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d107      	bne.n	8005dfa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e16d      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	f040 8160 	bne.w	80060c8 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	441a      	add	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d907      	bls.n	8005e2c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e154      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d002      	beq.n	8005e4a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	025b      	lsls	r3, r3, #9
 8005e48:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	025b      	lsls	r3, r3, #9
 8005e54:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005e56:	2390      	movs	r3, #144	@ 0x90
 8005e58:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f107 0218 	add.w	r2, r7, #24
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f002 ff6a 	bl	8008d4a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d90a      	bls.n	8005e92 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f003 f812 	bl	8008eb2 <SDMMC_CmdWriteMultiBlock>
 8005e8e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005e90:	e009      	b.n	8005ea6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2210      	movs	r2, #16
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f002 ffe5 	bl	8008e6e <SDMMC_CmdWriteSingleBlock>
 8005ea4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d012      	beq.n	8005ed2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a8b      	ldr	r2, [pc, #556]	@ (80060e0 <HAL_SD_WriteBlocks+0x318>)
 8005eb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e101      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005ed6:	e065      	b.n	8005fa4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d040      	beq.n	8005f68 <HAL_SD_WriteBlocks+0x1a0>
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d03d      	beq.n	8005f68 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005eec:	2300      	movs	r3, #0
 8005eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ef0:	e037      	b.n	8005f62 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efa:	3301      	adds	r3, #1
 8005efc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f00:	3b01      	subs	r3, #1
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	021a      	lsls	r2, r3, #8
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	3301      	adds	r3, #1
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	041a      	lsls	r2, r3, #16
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f30:	3b01      	subs	r3, #1
 8005f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	061a      	lsls	r2, r3, #24
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f42:	3301      	adds	r3, #1
 8005f44:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f107 0214 	add.w	r2, r7, #20
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f002 fe80 	bl	8008c5c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5e:	3301      	adds	r3, #1
 8005f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f64:	2b07      	cmp	r3, #7
 8005f66:	d9c4      	bls.n	8005ef2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f68:	f7fe f806 	bl	8003f78 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d902      	bls.n	8005f7e <HAL_SD_WriteBlocks+0x1b6>
 8005f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d112      	bne.n	8005fa4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a57      	ldr	r2, [pc, #348]	@ (80060e0 <HAL_SD_WriteBlocks+0x318>)
 8005f84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e098      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005faa:	f240 331a 	movw	r3, #794	@ 0x31a
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d091      	beq.n	8005ed8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d022      	beq.n	8006008 <HAL_SD_WriteBlocks+0x240>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d91f      	bls.n	8006008 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d01b      	beq.n	8006008 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f002 ff8f 	bl	8008ef8 <SDMMC_CmdStopTransfer>
 8005fda:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d012      	beq.n	8006008 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80060e0 <HAL_SD_WriteBlocks+0x318>)
 8005fe8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e066      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_SD_WriteBlocks+0x25c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006020:	2b00      	cmp	r3, #0
 8006022:	d012      	beq.n	800604a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2d      	ldr	r2, [pc, #180]	@ (80060e0 <HAL_SD_WriteBlocks+0x318>)
 800602a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006030:	f043 0208 	orr.w	r2, r3, #8
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e045      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d012      	beq.n	800607e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a20      	ldr	r2, [pc, #128]	@ (80060e0 <HAL_SD_WriteBlocks+0x318>)
 800605e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	f043 0202 	orr.w	r2, r3, #2
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e02b      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	d012      	beq.n	80060b2 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a13      	ldr	r2, [pc, #76]	@ (80060e0 <HAL_SD_WriteBlocks+0x318>)
 8006092:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	f043 0210 	orr.w	r2, r3, #16
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e011      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80060ba:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e006      	b.n	80060d6 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3748      	adds	r7, #72	@ 0x48
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	004005ff 	.word	0x004005ff

080060e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f2:	0f9b      	lsrs	r3, r3, #30
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fe:	0e9b      	lsrs	r3, r3, #26
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	b2da      	uxtb	r2, r3
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006110:	0e1b      	lsrs	r3, r3, #24
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	b2da      	uxtb	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006122:	0c1b      	lsrs	r3, r3, #16
 8006124:	b2da      	uxtb	r2, r3
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	b2da      	uxtb	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800613a:	b2da      	uxtb	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006144:	0d1b      	lsrs	r3, r3, #20
 8006146:	b29a      	uxth	r2, r3
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	b2da      	uxtb	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006162:	0bdb      	lsrs	r3, r3, #15
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	b2da      	uxtb	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006174:	0b9b      	lsrs	r3, r3, #14
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	b2da      	uxtb	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006186:	0b5b      	lsrs	r3, r3, #13
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006198:	0b1b      	lsrs	r3, r3, #12
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2200      	movs	r2, #0
 80061aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d163      	bne.n	800627c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061b8:	009a      	lsls	r2, r3, #2
 80061ba:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061be:	4013      	ands	r3, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80061c4:	0f92      	lsrs	r2, r2, #30
 80061c6:	431a      	orrs	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061d0:	0edb      	lsrs	r3, r3, #27
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e2:	0e1b      	lsrs	r3, r3, #24
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f4:	0d5b      	lsrs	r3, r3, #21
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006206:	0c9b      	lsrs	r3, r3, #18
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	b2da      	uxtb	r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006218:	0bdb      	lsrs	r3, r3, #15
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	b2da      	uxtb	r2, r3
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	7e1b      	ldrb	r3, [r3, #24]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	3302      	adds	r3, #2
 800623c:	2201      	movs	r2, #1
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006246:	fb03 f202 	mul.w	r2, r3, r2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	7a1b      	ldrb	r3, [r3, #8]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 030f 	and.w	r3, r3, #15
 8006258:	2201      	movs	r2, #1
 800625a:	409a      	lsls	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006268:	0a52      	lsrs	r2, r2, #9
 800626a:	fb03 f202 	mul.w	r2, r3, r2
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006278:	661a      	str	r2, [r3, #96]	@ 0x60
 800627a:	e031      	b.n	80062e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006280:	2b01      	cmp	r3, #1
 8006282:	d11d      	bne.n	80062c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006288:	041b      	lsls	r3, r3, #16
 800628a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	431a      	orrs	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	3301      	adds	r3, #1
 80062a0:	029a      	lsls	r2, r3, #10
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062b4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80062be:	e00f      	b.n	80062e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a58      	ldr	r2, [pc, #352]	@ (8006428 <HAL_SD_GetCardCSD+0x344>)
 80062c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e09d      	b.n	800641c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e4:	0b9b      	lsrs	r3, r3, #14
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630e:	b2da      	uxtb	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006318:	0fdb      	lsrs	r3, r3, #31
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	0f5b      	lsrs	r3, r3, #29
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	b2da      	uxtb	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	0e9b      	lsrs	r3, r3, #26
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	b2da      	uxtb	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006348:	0d9b      	lsrs	r3, r3, #22
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	b2da      	uxtb	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635a:	0d5b      	lsrs	r3, r3, #21
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006376:	0c1b      	lsrs	r3, r3, #16
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	b2da      	uxtb	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638a:	0bdb      	lsrs	r3, r3, #15
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639e:	0b9b      	lsrs	r3, r3, #14
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b2:	0b5b      	lsrs	r3, r3, #13
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c6:	0b1b      	lsrs	r3, r3, #12
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063da:	0a9b      	lsrs	r3, r3, #10
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800640a:	b2da      	uxtb	r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	004005ff 	.word	0x004005ff

0800642c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006490:	f107 030c 	add.w	r3, r7, #12
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f970 	bl	800677c <SD_SendStatus>
 800649c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	0a5b      	lsrs	r3, r3, #9
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80064ba:	693b      	ldr	r3, [r7, #16]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064c4:	b5b0      	push	{r4, r5, r7, lr}
 80064c6:	b094      	sub	sp, #80	@ 0x50
 80064c8:	af04      	add	r7, sp, #16
 80064ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80064cc:	2301      	movs	r3, #1
 80064ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f002 fbe0 	bl	8008c9a <SDIO_GetPowerState>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80064e4:	e0b8      	b.n	8006658 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d02f      	beq.n	800654e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f002 fdc7 	bl	8009086 <SDMMC_CmdSendCID>
 80064f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80064fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <SD_InitCard+0x40>
    {
      return errorstate;
 8006500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006502:	e0a9      	b.n	8006658 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f002 fc0a 	bl	8008d24 <SDIO_GetResponse>
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2104      	movs	r1, #4
 800651c:	4618      	mov	r0, r3
 800651e:	f002 fc01 	bl	8008d24 <SDIO_GetResponse>
 8006522:	4602      	mov	r2, r0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2108      	movs	r1, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f002 fbf8 	bl	8008d24 <SDIO_GetResponse>
 8006534:	4602      	mov	r2, r0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	210c      	movs	r1, #12
 8006540:	4618      	mov	r0, r3
 8006542:	f002 fbef 	bl	8008d24 <SDIO_GetResponse>
 8006546:	4602      	mov	r2, r0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006552:	2b03      	cmp	r3, #3
 8006554:	d00d      	beq.n	8006572 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f107 020e 	add.w	r2, r7, #14
 800655e:	4611      	mov	r1, r2
 8006560:	4618      	mov	r0, r3
 8006562:	f002 fdcd 	bl	8009100 <SDMMC_CmdSetRelAdd>
 8006566:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <SD_InitCard+0xae>
    {
      return errorstate;
 800656e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006570:	e072      	b.n	8006658 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006576:	2b03      	cmp	r3, #3
 8006578:	d036      	beq.n	80065e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800657a:	89fb      	ldrh	r3, [r7, #14]
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f002 fd97 	bl	80090c2 <SDMMC_CmdSendCSD>
 8006594:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800659c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659e:	e05b      	b.n	8006658 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 fbbc 	bl	8008d24 <SDIO_GetResponse>
 80065ac:	4602      	mov	r2, r0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2104      	movs	r1, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f002 fbb3 	bl	8008d24 <SDIO_GetResponse>
 80065be:	4602      	mov	r2, r0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2108      	movs	r1, #8
 80065ca:	4618      	mov	r0, r3
 80065cc:	f002 fbaa 	bl	8008d24 <SDIO_GetResponse>
 80065d0:	4602      	mov	r2, r0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	210c      	movs	r1, #12
 80065dc:	4618      	mov	r0, r3
 80065de:	f002 fba1 	bl	8008d24 <SDIO_GetResponse>
 80065e2:	4602      	mov	r2, r0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2104      	movs	r1, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f002 fb98 	bl	8008d24 <SDIO_GetResponse>
 80065f4:	4603      	mov	r3, r0
 80065f6:	0d1a      	lsrs	r2, r3, #20
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80065fc:	f107 0310 	add.w	r3, r7, #16
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fd6e 	bl	80060e4 <HAL_SD_GetCardCSD>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800660e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006612:	e021      	b.n	8006658 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6819      	ldr	r1, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	2200      	movs	r2, #0
 8006620:	461c      	mov	r4, r3
 8006622:	4615      	mov	r5, r2
 8006624:	4622      	mov	r2, r4
 8006626:	462b      	mov	r3, r5
 8006628:	4608      	mov	r0, r1
 800662a:	f002 fc87 	bl	8008f3c <SDMMC_CmdSelDesel>
 800662e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <SD_InitCard+0x176>
  {
    return errorstate;
 8006636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006638:	e00e      	b.n	8006658 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	466c      	mov	r4, sp
 8006642:	f103 0210 	add.w	r2, r3, #16
 8006646:	ca07      	ldmia	r2, {r0, r1, r2}
 8006648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800664c:	3304      	adds	r3, #4
 800664e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006650:	4628      	mov	r0, r5
 8006652:	f002 facb 	bl	8008bec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3740      	adds	r7, #64	@ 0x40
 800665c:	46bd      	mov	sp, r7
 800665e:	bdb0      	pop	{r4, r5, r7, pc}

08006660 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f002 fc82 	bl	8008f82 <SDMMC_CmdGoIdleState>
 800667e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	e072      	b.n	8006770 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f002 fc95 	bl	8008fbe <SDMMC_CmdOperCond>
 8006694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f002 fc6b 	bl	8008f82 <SDMMC_CmdGoIdleState>
 80066ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <SD_PowerON+0x5e>
    {
      return errorstate;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	e05b      	b.n	8006770 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d137      	bne.n	8006736 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f002 fc95 	bl	8008ffc <SDMMC_CmdAppCommand>
 80066d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d02d      	beq.n	8006736 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80066de:	e047      	b.n	8006770 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2100      	movs	r1, #0
 80066e6:	4618      	mov	r0, r3
 80066e8:	f002 fc88 	bl	8008ffc <SDMMC_CmdAppCommand>
 80066ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	e03b      	b.n	8006770 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	491e      	ldr	r1, [pc, #120]	@ (8006778 <SD_PowerON+0x118>)
 80066fe:	4618      	mov	r0, r3
 8006700:	f002 fc9e 	bl	8009040 <SDMMC_CmdAppOperCommand>
 8006704:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800670c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006710:	e02e      	b.n	8006770 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2100      	movs	r1, #0
 8006718:	4618      	mov	r0, r3
 800671a:	f002 fb03 	bl	8008d24 <SDIO_GetResponse>
 800671e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	0fdb      	lsrs	r3, r3, #31
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <SD_PowerON+0xcc>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <SD_PowerON+0xce>
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]

    count++;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	3301      	adds	r3, #1
 8006734:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800673c:	4293      	cmp	r3, r2
 800673e:	d802      	bhi.n	8006746 <SD_PowerON+0xe6>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0cc      	beq.n	80066e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800674c:	4293      	cmp	r3, r2
 800674e:	d902      	bls.n	8006756 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006754:	e00c      	b.n	8006770 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	645a      	str	r2, [r3, #68]	@ 0x44
 8006766:	e002      	b.n	800676e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	c1100000 	.word	0xc1100000

0800677c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800678c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006790:	e018      	b.n	80067c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f002 fccf 	bl	8009142 <SDMMC_CmdSendStatus>
 80067a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	e009      	b.n	80067c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f002 fab4 	bl	8008d24 <SDIO_GetResponse>
 80067bc:	4602      	mov	r2, r0
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e07b      	b.n	80068d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d108      	bne.n	80067f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067ee:	d009      	beq.n	8006804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	61da      	str	r2, [r3, #28]
 80067f6:	e005      	b.n	8006804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fd f900 	bl	8003a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006888:	ea42 0103 	orr.w	r1, r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	f003 0104 	and.w	r1, r3, #4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068aa:	f003 0210 	and.w	r2, r3, #16
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068ee:	f7fd fb43 	bl	8003f78 <HAL_GetTick>
 80068f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	d001      	beq.n	8006908 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
 8006906:	e12a      	b.n	8006b5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_SPI_Transmit+0x36>
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e122      	b.n	8006b5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_SPI_Transmit+0x48>
 8006922:	2302      	movs	r3, #2
 8006924:	e11b      	b.n	8006b5e <HAL_SPI_Transmit+0x280>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	88fa      	ldrh	r2, [r7, #6]
 8006946:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006974:	d10f      	bne.n	8006996 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b40      	cmp	r3, #64	@ 0x40
 80069a2:	d007      	beq.n	80069b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069bc:	d152      	bne.n	8006a64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_SPI_Transmit+0xee>
 80069c6:	8b7b      	ldrh	r3, [r7, #26]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d145      	bne.n	8006a58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d0:	881a      	ldrh	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069dc:	1c9a      	adds	r2, r3, #2
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069f0:	e032      	b.n	8006a58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d112      	bne.n	8006a26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a24:	e018      	b.n	8006a58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a26:	f7fd faa7 	bl	8003f78 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d803      	bhi.n	8006a3e <HAL_SPI_Transmit+0x160>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d102      	bne.n	8006a44 <HAL_SPI_Transmit+0x166>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e082      	b.n	8006b5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1c7      	bne.n	80069f2 <HAL_SPI_Transmit+0x114>
 8006a62:	e053      	b.n	8006b0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_SPI_Transmit+0x194>
 8006a6c:	8b7b      	ldrh	r3, [r7, #26]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d147      	bne.n	8006b02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a98:	e033      	b.n	8006b02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d113      	bne.n	8006ad0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ace:	e018      	b.n	8006b02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ad0:	f7fd fa52 	bl	8003f78 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d803      	bhi.n	8006ae8 <HAL_SPI_Transmit+0x20a>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d102      	bne.n	8006aee <HAL_SPI_Transmit+0x210>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e02d      	b.n	8006b5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1c6      	bne.n	8006a9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fbd9 	bl	80072c8 <SPI_EndRxTxTransaction>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
  }
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3720      	adds	r7, #32
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b088      	sub	sp, #32
 8006b6a:	af02      	add	r7, sp, #8
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	4613      	mov	r3, r2
 8006b74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d001      	beq.n	8006b86 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
 8006b84:	e104      	b.n	8006d90 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <HAL_SPI_Receive+0x2c>
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0fc      	b.n	8006d90 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b9e:	d112      	bne.n	8006bc6 <HAL_SPI_Receive+0x60>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2204      	movs	r2, #4
 8006bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f8eb 	bl	8006d98 <HAL_SPI_TransmitReceive>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	e0e4      	b.n	8006d90 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bc6:	f7fd f9d7 	bl	8003f78 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_SPI_Receive+0x74>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e0da      	b.n	8006d90 <HAL_SPI_Receive+0x22a>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2204      	movs	r2, #4
 8006be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	88fa      	ldrh	r2, [r7, #6]
 8006bfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c28:	d10f      	bne.n	8006c4a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c54:	2b40      	cmp	r3, #64	@ 0x40
 8006c56:	d007      	beq.n	8006c68 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d170      	bne.n	8006d52 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c70:	e035      	b.n	8006cde <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d115      	bne.n	8006cac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f103 020c 	add.w	r2, r3, #12
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8c:	7812      	ldrb	r2, [r2, #0]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006caa:	e018      	b.n	8006cde <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cac:	f7fd f964 	bl	8003f78 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d803      	bhi.n	8006cc4 <HAL_SPI_Receive+0x15e>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d102      	bne.n	8006cca <HAL_SPI_Receive+0x164>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e058      	b.n	8006d90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1c4      	bne.n	8006c72 <HAL_SPI_Receive+0x10c>
 8006ce8:	e038      	b.n	8006d5c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d113      	bne.n	8006d20 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d02:	b292      	uxth	r2, r2
 8006d04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0a:	1c9a      	adds	r2, r3, #2
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d1e:	e018      	b.n	8006d52 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d20:	f7fd f92a 	bl	8003f78 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d803      	bhi.n	8006d38 <HAL_SPI_Receive+0x1d2>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d36:	d102      	bne.n	8006d3e <HAL_SPI_Receive+0x1d8>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e01e      	b.n	8006d90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1c6      	bne.n	8006cea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fa4b 	bl	80071fc <SPI_EndRxTransaction>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
  }
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	@ 0x28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006da6:	2301      	movs	r3, #1
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006daa:	f7fd f8e5 	bl	8003f78 <HAL_GetTick>
 8006dae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006db6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dc2:	7ffb      	ldrb	r3, [r7, #31]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d00c      	beq.n	8006de2 <HAL_SPI_TransmitReceive+0x4a>
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dce:	d106      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x46>
 8006dd8:	7ffb      	ldrb	r3, [r7, #31]
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d001      	beq.n	8006de2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006dde:	2302      	movs	r3, #2
 8006de0:	e17f      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_SPI_TransmitReceive+0x5c>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_SPI_TransmitReceive+0x5c>
 8006dee:	887b      	ldrh	r3, [r7, #2]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e174      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_SPI_TransmitReceive+0x6e>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e16d      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x34a>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d003      	beq.n	8006e22 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	887a      	ldrh	r2, [r7, #2]
 8006e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	887a      	ldrh	r2, [r7, #2]
 8006e38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	887a      	ldrh	r2, [r7, #2]
 8006e44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	887a      	ldrh	r2, [r7, #2]
 8006e4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e62:	2b40      	cmp	r3, #64	@ 0x40
 8006e64:	d007      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7e:	d17e      	bne.n	8006f7e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_SPI_TransmitReceive+0xf6>
 8006e88:	8afb      	ldrh	r3, [r7, #22]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d16c      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9e:	1c9a      	adds	r2, r3, #2
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eb2:	e059      	b.n	8006f68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d11b      	bne.n	8006efa <HAL_SPI_TransmitReceive+0x162>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d016      	beq.n	8006efa <HAL_SPI_TransmitReceive+0x162>
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d113      	bne.n	8006efa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed6:	881a      	ldrh	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee2:	1c9a      	adds	r2, r3, #2
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d119      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x1a4>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d014      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f24:	1c9a      	adds	r2, r3, #2
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f3c:	f7fd f81c 	bl	8003f78 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d80d      	bhi.n	8006f68 <HAL_SPI_TransmitReceive+0x1d0>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d009      	beq.n	8006f68 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e0bc      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1a0      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x11c>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d19b      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x11c>
 8006f7c:	e082      	b.n	8007084 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x1f4>
 8006f86:	8afb      	ldrh	r3, [r7, #22]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d171      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb2:	e05d      	b.n	8007070 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d11c      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x264>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d017      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x264>
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d114      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d119      	bne.n	800703e <HAL_SPI_TransmitReceive+0x2a6>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d014      	beq.n	800703e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800703a:	2301      	movs	r3, #1
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800703e:	f7fc ff9b 	bl	8003f78 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800704a:	429a      	cmp	r2, r3
 800704c:	d803      	bhi.n	8007056 <HAL_SPI_TransmitReceive+0x2be>
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d102      	bne.n	800705c <HAL_SPI_TransmitReceive+0x2c4>
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e038      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d19c      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x21c>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d197      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f91d 	bl	80072c8 <SPI_EndRxTxTransaction>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e01d      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80070e0:	2300      	movs	r3, #0
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3728      	adds	r7, #40	@ 0x28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070fc:	f7fc ff3c 	bl	8003f78 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4413      	add	r3, r2
 800710a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800710c:	f7fc ff34 	bl	8003f78 <HAL_GetTick>
 8007110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007112:	4b39      	ldr	r3, [pc, #228]	@ (80071f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	015b      	lsls	r3, r3, #5
 8007118:	0d1b      	lsrs	r3, r3, #20
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	fb02 f303 	mul.w	r3, r2, r3
 8007120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007122:	e055      	b.n	80071d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712a:	d051      	beq.n	80071d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800712c:	f7fc ff24 	bl	8003f78 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	429a      	cmp	r2, r3
 800713a:	d902      	bls.n	8007142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d13d      	bne.n	80071be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800715a:	d111      	bne.n	8007180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007164:	d004      	beq.n	8007170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716e:	d107      	bne.n	8007180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800717e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007188:	d10f      	bne.n	80071aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e018      	b.n	80071f0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e002      	b.n	80071d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4013      	ands	r3, r2
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	429a      	cmp	r2, r3
 80071de:	bf0c      	ite	eq
 80071e0:	2301      	moveq	r3, #1
 80071e2:	2300      	movne	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d19a      	bne.n	8007124 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3720      	adds	r7, #32
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000004 	.word	0x20000004

080071fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007210:	d111      	bne.n	8007236 <SPI_EndRxTransaction+0x3a>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800721a:	d004      	beq.n	8007226 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007224:	d107      	bne.n	8007236 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007234:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800723e:	d12a      	bne.n	8007296 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007248:	d012      	beq.n	8007270 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2200      	movs	r2, #0
 8007252:	2180      	movs	r1, #128	@ 0x80
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff ff49 	bl	80070ec <SPI_WaitFlagStateUntilTimeout>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d02d      	beq.n	80072bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e026      	b.n	80072be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	2101      	movs	r1, #1
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff ff36 	bl	80070ec <SPI_WaitFlagStateUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d01a      	beq.n	80072bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728a:	f043 0220 	orr.w	r2, r3, #32
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e013      	b.n	80072be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	2101      	movs	r1, #1
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff ff23 	bl	80070ec <SPI_WaitFlagStateUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b0:	f043 0220 	orr.w	r2, r3, #32
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e000      	b.n	80072be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2201      	movs	r2, #1
 80072dc:	2102      	movs	r1, #2
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff ff04 	bl	80070ec <SPI_WaitFlagStateUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d007      	beq.n	80072fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ee:	f043 0220 	orr.w	r2, r3, #32
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e032      	b.n	8007360 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007368 <SPI_EndRxTxTransaction+0xa0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1b      	ldr	r2, [pc, #108]	@ (800736c <SPI_EndRxTxTransaction+0xa4>)
 8007300:	fba2 2303 	umull	r2, r3, r2, r3
 8007304:	0d5b      	lsrs	r3, r3, #21
 8007306:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800730a:	fb02 f303 	mul.w	r3, r2, r3
 800730e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007318:	d112      	bne.n	8007340 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2200      	movs	r2, #0
 8007322:	2180      	movs	r1, #128	@ 0x80
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff fee1 	bl	80070ec <SPI_WaitFlagStateUntilTimeout>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d016      	beq.n	800735e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007334:	f043 0220 	orr.w	r2, r3, #32
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e00f      	b.n	8007360 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	3b01      	subs	r3, #1
 800734a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	2b80      	cmp	r3, #128	@ 0x80
 8007358:	d0f2      	beq.n	8007340 <SPI_EndRxTxTransaction+0x78>
 800735a:	e000      	b.n	800735e <SPI_EndRxTxTransaction+0x96>
        break;
 800735c:	bf00      	nop
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000004 	.word	0x20000004
 800736c:	165e9f81 	.word	0x165e9f81

08007370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e041      	b.n	8007406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7fc fb8c 	bl	8003ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f000 f9b6 	bl	8007720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	d001      	beq.n	8007428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e04e      	b.n	80074c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0201 	orr.w	r2, r2, #1
 800743e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a23      	ldr	r2, [pc, #140]	@ (80074d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d022      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x80>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007452:	d01d      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x80>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a1f      	ldr	r2, [pc, #124]	@ (80074d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d018      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x80>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1e      	ldr	r2, [pc, #120]	@ (80074dc <HAL_TIM_Base_Start_IT+0xcc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d013      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x80>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1c      	ldr	r2, [pc, #112]	@ (80074e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00e      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x80>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1b      	ldr	r2, [pc, #108]	@ (80074e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d009      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x80>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a19      	ldr	r2, [pc, #100]	@ (80074e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x80>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <HAL_TIM_Base_Start_IT+0xdc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d111      	bne.n	80074b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b06      	cmp	r3, #6
 80074a0:	d010      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0201 	orr.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b2:	e007      	b.n	80074c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0201 	orr.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40000400 	.word	0x40000400
 80074dc:	40000800 	.word	0x40000800
 80074e0:	40000c00 	.word	0x40000c00
 80074e4:	40010400 	.word	0x40010400
 80074e8:	40014000 	.word	0x40014000
 80074ec:	40001800 	.word	0x40001800

080074f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d020      	beq.n	8007554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01b      	beq.n	8007554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0202 	mvn.w	r2, #2
 8007524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f8d2 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 8007540:	e005      	b.n	800754e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8c4 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8d5 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d020      	beq.n	80075a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01b      	beq.n	80075a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0204 	mvn.w	r2, #4
 8007570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2202      	movs	r2, #2
 8007576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8ac 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 800758c:	e005      	b.n	800759a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f89e 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f8af 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d020      	beq.n	80075ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01b      	beq.n	80075ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0208 	mvn.w	r2, #8
 80075bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2204      	movs	r2, #4
 80075c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f886 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 80075d8:	e005      	b.n	80075e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f878 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f889 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d020      	beq.n	8007638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01b      	beq.n	8007638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0210 	mvn.w	r2, #16
 8007608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2208      	movs	r2, #8
 800760e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f860 	bl	80076e4 <HAL_TIM_IC_CaptureCallback>
 8007624:	e005      	b.n	8007632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f852 	bl	80076d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f863 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00c      	beq.n	800765c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0201 	mvn.w	r2, #1
 8007654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fa fe54 	bl	8002304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00c      	beq.n	8007680 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f97c 	bl	8007978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00c      	beq.n	80076a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f834 	bl	800770c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0220 	mvn.w	r2, #32
 80076c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f94e 	bl	8007964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a43      	ldr	r2, [pc, #268]	@ (8007840 <TIM_Base_SetConfig+0x120>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773e:	d00f      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a40      	ldr	r2, [pc, #256]	@ (8007844 <TIM_Base_SetConfig+0x124>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00b      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a3f      	ldr	r2, [pc, #252]	@ (8007848 <TIM_Base_SetConfig+0x128>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a3e      	ldr	r2, [pc, #248]	@ (800784c <TIM_Base_SetConfig+0x12c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a3d      	ldr	r2, [pc, #244]	@ (8007850 <TIM_Base_SetConfig+0x130>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a32      	ldr	r2, [pc, #200]	@ (8007840 <TIM_Base_SetConfig+0x120>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d02b      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007780:	d027      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2f      	ldr	r2, [pc, #188]	@ (8007844 <TIM_Base_SetConfig+0x124>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d023      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a2e      	ldr	r2, [pc, #184]	@ (8007848 <TIM_Base_SetConfig+0x128>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d01f      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2d      	ldr	r2, [pc, #180]	@ (800784c <TIM_Base_SetConfig+0x12c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d01b      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2c      	ldr	r2, [pc, #176]	@ (8007850 <TIM_Base_SetConfig+0x130>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d017      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007854 <TIM_Base_SetConfig+0x134>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d013      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007858 <TIM_Base_SetConfig+0x138>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00f      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a29      	ldr	r2, [pc, #164]	@ (800785c <TIM_Base_SetConfig+0x13c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00b      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a28      	ldr	r2, [pc, #160]	@ (8007860 <TIM_Base_SetConfig+0x140>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d007      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a27      	ldr	r2, [pc, #156]	@ (8007864 <TIM_Base_SetConfig+0x144>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a26      	ldr	r2, [pc, #152]	@ (8007868 <TIM_Base_SetConfig+0x148>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d108      	bne.n	80077e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a0e      	ldr	r2, [pc, #56]	@ (8007840 <TIM_Base_SetConfig+0x120>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_Base_SetConfig+0xf2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a10      	ldr	r2, [pc, #64]	@ (8007850 <TIM_Base_SetConfig+0x130>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d103      	bne.n	800781a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f043 0204 	orr.w	r2, r3, #4
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40010000 	.word	0x40010000
 8007844:	40000400 	.word	0x40000400
 8007848:	40000800 	.word	0x40000800
 800784c:	40000c00 	.word	0x40000c00
 8007850:	40010400 	.word	0x40010400
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800
 8007860:	40001800 	.word	0x40001800
 8007864:	40001c00 	.word	0x40001c00
 8007868:	40002000 	.word	0x40002000

0800786c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007880:	2302      	movs	r3, #2
 8007882:	e05a      	b.n	800793a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a21      	ldr	r2, [pc, #132]	@ (8007948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d022      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d0:	d01d      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d018      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a18      	ldr	r2, [pc, #96]	@ (8007958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a17      	ldr	r2, [pc, #92]	@ (800795c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a15      	ldr	r2, [pc, #84]	@ (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d10c      	bne.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4313      	orrs	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000
 800794c:	40000400 	.word	0x40000400
 8007950:	40000800 	.word	0x40000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	40010400 	.word	0x40010400
 800795c:	40014000 	.word	0x40014000
 8007960:	40001800 	.word	0x40001800

08007964 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e042      	b.n	8007a24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fc f8a6 	bl	8003b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2224      	movs	r2, #36	@ 0x24
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fe97 	bl	8008704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	@ 0x28
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d175      	bne.n	8007b38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_UART_Transmit+0x2c>
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e06e      	b.n	8007b3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2221      	movs	r2, #33	@ 0x21
 8007a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a6a:	f7fc fa85 	bl	8003f78 <HAL_GetTick>
 8007a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	88fa      	ldrh	r2, [r7, #6]
 8007a74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	88fa      	ldrh	r2, [r7, #6]
 8007a7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a84:	d108      	bne.n	8007a98 <HAL_UART_Transmit+0x6c>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d104      	bne.n	8007a98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e003      	b.n	8007aa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007aa0:	e02e      	b.n	8007b00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2180      	movs	r1, #128	@ 0x80
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fbfb 	bl	80082a8 <UART_WaitOnFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e03a      	b.n	8007b3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10b      	bne.n	8007ae2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	3302      	adds	r3, #2
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	e007      	b.n	8007af2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	3301      	adds	r3, #1
 8007af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1cb      	bne.n	8007aa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2140      	movs	r1, #64	@ 0x40
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fbc7 	bl	80082a8 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e006      	b.n	8007b3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	e000      	b.n	8007b3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007b38:	2302      	movs	r3, #2
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3720      	adds	r7, #32
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b08a      	sub	sp, #40	@ 0x28
 8007b46:	af02      	add	r7, sp, #8
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	603b      	str	r3, [r7, #0]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	f040 8081 	bne.w	8007c66 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_UART_Receive+0x2e>
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e079      	b.n	8007c68 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2222      	movs	r2, #34	@ 0x22
 8007b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b88:	f7fc f9f6 	bl	8003f78 <HAL_GetTick>
 8007b8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	88fa      	ldrh	r2, [r7, #6]
 8007b98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ba2:	d108      	bne.n	8007bb6 <HAL_UART_Receive+0x74>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d104      	bne.n	8007bb6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	e003      	b.n	8007bbe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007bbe:	e047      	b.n	8007c50 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2120      	movs	r1, #32
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fb6c 	bl	80082a8 <UART_WaitOnFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e042      	b.n	8007c68 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10c      	bne.n	8007c02 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	61bb      	str	r3, [r7, #24]
 8007c00:	e01f      	b.n	8007c42 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c0a:	d007      	beq.n	8007c1c <HAL_UART_Receive+0xda>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <HAL_UART_Receive+0xe8>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e008      	b.n	8007c3c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1b2      	bne.n	8007bc0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e000      	b.n	8007c68 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007c66:	2302      	movs	r3, #2
  }
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d121      	bne.n	8007cce <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <HAL_UART_Transmit_IT+0x26>
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e01a      	b.n	8007cd0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2221      	movs	r2, #33	@ 0x21
 8007cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007cc8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e000      	b.n	8007cd0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007cce:	2302      	movs	r3, #2
  }
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d112      	bne.n	8007d1c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_UART_Receive_IT+0x26>
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e00b      	b.n	8007d1e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fb21 	bl	800835a <UART_Start_Receive_IT>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	e000      	b.n	8007d1e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007d1c:	2302      	movs	r3, #2
  }
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10f      	bne.n	8007d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <HAL_UART_IRQHandler+0x66>
 8007d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fbfd 	bl	8008586 <UART_Receive_IT>
      return;
 8007d8c:	e273      	b.n	8008276 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80de 	beq.w	8007f54 <HAL_UART_IRQHandler+0x22c>
 8007d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 80d1 	beq.w	8007f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_UART_IRQHandler+0xae>
 8007dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dce:	f043 0201 	orr.w	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_UART_IRQHandler+0xd2>
 8007de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df2:	f043 0202 	orr.w	r2, r3, #2
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <HAL_UART_IRQHandler+0xf6>
 8007e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e16:	f043 0204 	orr.w	r2, r3, #4
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d011      	beq.n	8007e4e <HAL_UART_IRQHandler+0x126>
 8007e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d105      	bne.n	8007e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e46:	f043 0208 	orr.w	r2, r3, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 820a 	beq.w	800826c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5c:	f003 0320 	and.w	r3, r3, #32
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <HAL_UART_IRQHandler+0x14e>
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fb88 	bl	8008586 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e80:	2b40      	cmp	r3, #64	@ 0x40
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <HAL_UART_IRQHandler+0x17a>
 8007e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d04f      	beq.n	8007f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa93 	bl	80083ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb2:	2b40      	cmp	r3, #64	@ 0x40
 8007eb4:	d141      	bne.n	8007f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3314      	adds	r3, #20
 8007ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3314      	adds	r3, #20
 8007ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1d9      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d013      	beq.n	8007f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0e:	4a8a      	ldr	r2, [pc, #552]	@ (8008138 <HAL_UART_IRQHandler+0x410>)
 8007f10:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fc f9df 	bl	80042da <HAL_DMA_Abort_IT>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d016      	beq.n	8007f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f30:	e00e      	b.n	8007f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9a2 	bl	800827c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f38:	e00a      	b.n	8007f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f99e 	bl	800827c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f40:	e006      	b.n	8007f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f99a 	bl	800827c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007f4e:	e18d      	b.n	800826c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f50:	bf00      	nop
    return;
 8007f52:	e18b      	b.n	800826c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	f040 8167 	bne.w	800822c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8160 	beq.w	800822c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8159 	beq.w	800822c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60bb      	str	r3, [r7, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	60bb      	str	r3, [r7, #8]
 8007f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9a:	2b40      	cmp	r3, #64	@ 0x40
 8007f9c:	f040 80ce 	bne.w	800813c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80a9 	beq.w	8008108 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	f080 80a2 	bcs.w	8008108 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd6:	f000 8088 	beq.w	80080ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330c      	adds	r3, #12
 8007fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800800a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008012:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800801e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1d9      	bne.n	8007fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3314      	adds	r3, #20
 800802c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3314      	adds	r3, #20
 8008046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800804a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800804e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008052:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800805c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e1      	bne.n	8008026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3314      	adds	r3, #20
 8008068:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3314      	adds	r3, #20
 8008082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800808c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e3      	bne.n	8008062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	330c      	adds	r3, #12
 80080ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080ba:	f023 0310 	bic.w	r3, r3, #16
 80080be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	330c      	adds	r3, #12
 80080c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80080cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80080ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80080da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e3      	bne.n	80080a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fc f888 	bl	80041fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8c5 	bl	8008290 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008106:	e0b3      	b.n	8008270 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800810c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008110:	429a      	cmp	r2, r3
 8008112:	f040 80ad 	bne.w	8008270 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008120:	f040 80a6 	bne.w	8008270 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f8ad 	bl	8008290 <HAL_UARTEx_RxEventCallback>
      return;
 8008136:	e09b      	b.n	8008270 <HAL_UART_IRQHandler+0x548>
 8008138:	08008495 	.word	0x08008495
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008144:	b29b      	uxth	r3, r3
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 808e 	beq.w	8008274 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8089 	beq.w	8008274 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008186:	647a      	str	r2, [r7, #68]	@ 0x44
 8008188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800818c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e3      	bne.n	8008162 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3314      	adds	r3, #20
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	623b      	str	r3, [r7, #32]
   return(result);
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3314      	adds	r3, #20
 80081ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80081be:	633a      	str	r2, [r7, #48]	@ 0x30
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e3      	bne.n	800819a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0310 	bic.w	r3, r3, #16
 80081f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008204:	61fa      	str	r2, [r7, #28]
 8008206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	69b9      	ldr	r1, [r7, #24]
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	617b      	str	r3, [r7, #20]
   return(result);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e3      	bne.n	80081e0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800821e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f833 	bl	8008290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800822a:	e023      	b.n	8008274 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800822c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <HAL_UART_IRQHandler+0x524>
 8008238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800823c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f936 	bl	80084b6 <UART_Transmit_IT>
    return;
 800824a:	e014      	b.n	8008276 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800824c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00e      	beq.n	8008276 <HAL_UART_IRQHandler+0x54e>
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800825c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f976 	bl	8008556 <UART_EndTransmit_IT>
    return;
 800826a:	e004      	b.n	8008276 <HAL_UART_IRQHandler+0x54e>
    return;
 800826c:	bf00      	nop
 800826e:	e002      	b.n	8008276 <HAL_UART_IRQHandler+0x54e>
      return;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <HAL_UART_IRQHandler+0x54e>
      return;
 8008274:	bf00      	nop
  }
}
 8008276:	37e8      	adds	r7, #232	@ 0xe8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	4613      	mov	r3, r2
 80082b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b8:	e03b      	b.n	8008332 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d037      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c2:	f7fb fe59 	bl	8003f78 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	6a3a      	ldr	r2, [r7, #32]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d302      	bcc.n	80082d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e03a      	b.n	8008352 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d023      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0x8a>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b80      	cmp	r3, #128	@ 0x80
 80082ee:	d020      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0x8a>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b40      	cmp	r3, #64	@ 0x40
 80082f4:	d01d      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b08      	cmp	r3, #8
 8008302:	d116      	bne.n	8008332 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f857 	bl	80083ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2208      	movs	r2, #8
 8008324:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e00f      	b.n	8008352 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4013      	ands	r3, r2
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	429a      	cmp	r2, r3
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	461a      	mov	r2, r3
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	429a      	cmp	r2, r3
 800834e:	d0b4      	beq.n	80082ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2222      	movs	r2, #34	@ 0x22
 8008384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800839e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0220 	orr.w	r2, r2, #32
 80083be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b095      	sub	sp, #84	@ 0x54
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	330c      	adds	r3, #12
 80083dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80083f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e5      	bne.n	80083d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3314      	adds	r3, #20
 8008410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	61fb      	str	r3, [r7, #28]
   return(result);
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3314      	adds	r3, #20
 8008428:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800842a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800842c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e5      	bne.n	800840a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008442:	2b01      	cmp	r3, #1
 8008444:	d119      	bne.n	800847a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60bb      	str	r3, [r7, #8]
   return(result);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	647b      	str	r3, [r7, #68]	@ 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008466:	61ba      	str	r2, [r7, #24]
 8008468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6979      	ldr	r1, [r7, #20]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	613b      	str	r3, [r7, #16]
   return(result);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008488:	bf00      	nop
 800848a:	3754      	adds	r7, #84	@ 0x54
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff fee7 	bl	800827c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b21      	cmp	r3, #33	@ 0x21
 80084c8:	d13e      	bne.n	8008548 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d2:	d114      	bne.n	80084fe <UART_Transmit_IT+0x48>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d110      	bne.n	80084fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	1c9a      	adds	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	621a      	str	r2, [r3, #32]
 80084fc:	e008      	b.n	8008510 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	1c59      	adds	r1, r3, #1
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6211      	str	r1, [r2, #32]
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008514:	b29b      	uxth	r3, r3
 8008516:	3b01      	subs	r3, #1
 8008518:	b29b      	uxth	r3, r3
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4619      	mov	r1, r3
 800851e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10f      	bne.n	8008544 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008532:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008542:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800856c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f9 ff44 	bl	8002404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b08c      	sub	sp, #48	@ 0x30
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b22      	cmp	r3, #34	@ 0x22
 80085a0:	f040 80aa 	bne.w	80086f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ac:	d115      	bne.n	80085da <UART_Receive_IT+0x54>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d111      	bne.n	80085da <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d2:	1c9a      	adds	r2, r3, #2
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80085d8:	e024      	b.n	8008624 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e8:	d007      	beq.n	80085fa <UART_Receive_IT+0x74>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <UART_Receive_IT+0x82>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e008      	b.n	800861a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008614:	b2da      	uxtb	r2, r3
 8008616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008618:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	4619      	mov	r1, r3
 8008632:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008634:	2b00      	cmp	r3, #0
 8008636:	d15d      	bne.n	80086f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0220 	bic.w	r2, r2, #32
 8008646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008656:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695a      	ldr	r2, [r3, #20]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0201 	bic.w	r2, r2, #1
 8008666:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	2b01      	cmp	r3, #1
 800867c:	d135      	bne.n	80086ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	330c      	adds	r3, #12
 800868a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	613b      	str	r3, [r7, #16]
   return(result);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f023 0310 	bic.w	r3, r3, #16
 800869a:	627b      	str	r3, [r7, #36]	@ 0x24
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a4:	623a      	str	r2, [r7, #32]
 80086a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	69f9      	ldr	r1, [r7, #28]
 80086aa:	6a3a      	ldr	r2, [r7, #32]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e5      	bne.n	8008684 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0310 	and.w	r3, r3, #16
 80086c2:	2b10      	cmp	r3, #16
 80086c4:	d10a      	bne.n	80086dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff fdd4 	bl	8008290 <HAL_UARTEx_RxEventCallback>
 80086e8:	e002      	b.n	80086f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 fe1c 	bl	8002328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	e002      	b.n	80086fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	e000      	b.n	80086fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086f8:	2302      	movs	r3, #2
  }
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3730      	adds	r7, #48	@ 0x30
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008708:	b0c0      	sub	sp, #256	@ 0x100
 800870a:	af00      	add	r7, sp, #0
 800870c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800871c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008720:	68d9      	ldr	r1, [r3, #12]
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	ea40 0301 	orr.w	r3, r0, r1
 800872c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800872e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	431a      	orrs	r2, r3
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	431a      	orrs	r2, r3
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800875c:	f021 010c 	bic.w	r1, r1, #12
 8008760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800876a:	430b      	orrs	r3, r1
 800876c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800876e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800877a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877e:	6999      	ldr	r1, [r3, #24]
 8008780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	ea40 0301 	orr.w	r3, r0, r1
 800878a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b8f      	ldr	r3, [pc, #572]	@ (80089d0 <UART_SetConfig+0x2cc>)
 8008794:	429a      	cmp	r2, r3
 8008796:	d005      	beq.n	80087a4 <UART_SetConfig+0xa0>
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4b8d      	ldr	r3, [pc, #564]	@ (80089d4 <UART_SetConfig+0x2d0>)
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d104      	bne.n	80087ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087a4:	f7fc fbf6 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 80087a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80087ac:	e003      	b.n	80087b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087ae:	f7fc fbdd 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 80087b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087c0:	f040 810c 	bne.w	80089dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80087d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80087d6:	4622      	mov	r2, r4
 80087d8:	462b      	mov	r3, r5
 80087da:	1891      	adds	r1, r2, r2
 80087dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80087de:	415b      	adcs	r3, r3
 80087e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80087e6:	4621      	mov	r1, r4
 80087e8:	eb12 0801 	adds.w	r8, r2, r1
 80087ec:	4629      	mov	r1, r5
 80087ee:	eb43 0901 	adc.w	r9, r3, r1
 80087f2:	f04f 0200 	mov.w	r2, #0
 80087f6:	f04f 0300 	mov.w	r3, #0
 80087fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008806:	4690      	mov	r8, r2
 8008808:	4699      	mov	r9, r3
 800880a:	4623      	mov	r3, r4
 800880c:	eb18 0303 	adds.w	r3, r8, r3
 8008810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008814:	462b      	mov	r3, r5
 8008816:	eb49 0303 	adc.w	r3, r9, r3
 800881a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800881e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800882a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800882e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008832:	460b      	mov	r3, r1
 8008834:	18db      	adds	r3, r3, r3
 8008836:	653b      	str	r3, [r7, #80]	@ 0x50
 8008838:	4613      	mov	r3, r2
 800883a:	eb42 0303 	adc.w	r3, r2, r3
 800883e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008848:	f7f7 fd2a 	bl	80002a0 <__aeabi_uldivmod>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4b61      	ldr	r3, [pc, #388]	@ (80089d8 <UART_SetConfig+0x2d4>)
 8008852:	fba3 2302 	umull	r2, r3, r3, r2
 8008856:	095b      	lsrs	r3, r3, #5
 8008858:	011c      	lsls	r4, r3, #4
 800885a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800885e:	2200      	movs	r2, #0
 8008860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008864:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800886c:	4642      	mov	r2, r8
 800886e:	464b      	mov	r3, r9
 8008870:	1891      	adds	r1, r2, r2
 8008872:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008874:	415b      	adcs	r3, r3
 8008876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800887c:	4641      	mov	r1, r8
 800887e:	eb12 0a01 	adds.w	sl, r2, r1
 8008882:	4649      	mov	r1, r9
 8008884:	eb43 0b01 	adc.w	fp, r3, r1
 8008888:	f04f 0200 	mov.w	r2, #0
 800888c:	f04f 0300 	mov.w	r3, #0
 8008890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800889c:	4692      	mov	sl, r2
 800889e:	469b      	mov	fp, r3
 80088a0:	4643      	mov	r3, r8
 80088a2:	eb1a 0303 	adds.w	r3, sl, r3
 80088a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088aa:	464b      	mov	r3, r9
 80088ac:	eb4b 0303 	adc.w	r3, fp, r3
 80088b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80088c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80088c8:	460b      	mov	r3, r1
 80088ca:	18db      	adds	r3, r3, r3
 80088cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ce:	4613      	mov	r3, r2
 80088d0:	eb42 0303 	adc.w	r3, r2, r3
 80088d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80088da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80088de:	f7f7 fcdf 	bl	80002a0 <__aeabi_uldivmod>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4611      	mov	r1, r2
 80088e8:	4b3b      	ldr	r3, [pc, #236]	@ (80089d8 <UART_SetConfig+0x2d4>)
 80088ea:	fba3 2301 	umull	r2, r3, r3, r1
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	2264      	movs	r2, #100	@ 0x64
 80088f2:	fb02 f303 	mul.w	r3, r2, r3
 80088f6:	1acb      	subs	r3, r1, r3
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80088fe:	4b36      	ldr	r3, [pc, #216]	@ (80089d8 <UART_SetConfig+0x2d4>)
 8008900:	fba3 2302 	umull	r2, r3, r3, r2
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800890c:	441c      	add	r4, r3
 800890e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008912:	2200      	movs	r2, #0
 8008914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008918:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800891c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008920:	4642      	mov	r2, r8
 8008922:	464b      	mov	r3, r9
 8008924:	1891      	adds	r1, r2, r2
 8008926:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008928:	415b      	adcs	r3, r3
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800892c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008930:	4641      	mov	r1, r8
 8008932:	1851      	adds	r1, r2, r1
 8008934:	6339      	str	r1, [r7, #48]	@ 0x30
 8008936:	4649      	mov	r1, r9
 8008938:	414b      	adcs	r3, r1
 800893a:	637b      	str	r3, [r7, #52]	@ 0x34
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	f04f 0300 	mov.w	r3, #0
 8008944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008948:	4659      	mov	r1, fp
 800894a:	00cb      	lsls	r3, r1, #3
 800894c:	4651      	mov	r1, sl
 800894e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008952:	4651      	mov	r1, sl
 8008954:	00ca      	lsls	r2, r1, #3
 8008956:	4610      	mov	r0, r2
 8008958:	4619      	mov	r1, r3
 800895a:	4603      	mov	r3, r0
 800895c:	4642      	mov	r2, r8
 800895e:	189b      	adds	r3, r3, r2
 8008960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008964:	464b      	mov	r3, r9
 8008966:	460a      	mov	r2, r1
 8008968:	eb42 0303 	adc.w	r3, r2, r3
 800896c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800897c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008984:	460b      	mov	r3, r1
 8008986:	18db      	adds	r3, r3, r3
 8008988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800898a:	4613      	mov	r3, r2
 800898c:	eb42 0303 	adc.w	r3, r2, r3
 8008990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800899a:	f7f7 fc81 	bl	80002a0 <__aeabi_uldivmod>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4b0d      	ldr	r3, [pc, #52]	@ (80089d8 <UART_SetConfig+0x2d4>)
 80089a4:	fba3 1302 	umull	r1, r3, r3, r2
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	2164      	movs	r1, #100	@ 0x64
 80089ac:	fb01 f303 	mul.w	r3, r1, r3
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	3332      	adds	r3, #50	@ 0x32
 80089b6:	4a08      	ldr	r2, [pc, #32]	@ (80089d8 <UART_SetConfig+0x2d4>)
 80089b8:	fba2 2303 	umull	r2, r3, r2, r3
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	f003 0207 	and.w	r2, r3, #7
 80089c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4422      	add	r2, r4
 80089ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089cc:	e106      	b.n	8008bdc <UART_SetConfig+0x4d8>
 80089ce:	bf00      	nop
 80089d0:	40011000 	.word	0x40011000
 80089d4:	40011400 	.word	0x40011400
 80089d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80089ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80089ee:	4642      	mov	r2, r8
 80089f0:	464b      	mov	r3, r9
 80089f2:	1891      	adds	r1, r2, r2
 80089f4:	6239      	str	r1, [r7, #32]
 80089f6:	415b      	adcs	r3, r3
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089fe:	4641      	mov	r1, r8
 8008a00:	1854      	adds	r4, r2, r1
 8008a02:	4649      	mov	r1, r9
 8008a04:	eb43 0501 	adc.w	r5, r3, r1
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	00eb      	lsls	r3, r5, #3
 8008a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a16:	00e2      	lsls	r2, r4, #3
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	4643      	mov	r3, r8
 8008a1e:	18e3      	adds	r3, r4, r3
 8008a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a24:	464b      	mov	r3, r9
 8008a26:	eb45 0303 	adc.w	r3, r5, r3
 8008a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	008b      	lsls	r3, r1, #2
 8008a4e:	4621      	mov	r1, r4
 8008a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a54:	4621      	mov	r1, r4
 8008a56:	008a      	lsls	r2, r1, #2
 8008a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a5c:	f7f7 fc20 	bl	80002a0 <__aeabi_uldivmod>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4b60      	ldr	r3, [pc, #384]	@ (8008be8 <UART_SetConfig+0x4e4>)
 8008a66:	fba3 2302 	umull	r2, r3, r3, r2
 8008a6a:	095b      	lsrs	r3, r3, #5
 8008a6c:	011c      	lsls	r4, r3, #4
 8008a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a80:	4642      	mov	r2, r8
 8008a82:	464b      	mov	r3, r9
 8008a84:	1891      	adds	r1, r2, r2
 8008a86:	61b9      	str	r1, [r7, #24]
 8008a88:	415b      	adcs	r3, r3
 8008a8a:	61fb      	str	r3, [r7, #28]
 8008a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a90:	4641      	mov	r1, r8
 8008a92:	1851      	adds	r1, r2, r1
 8008a94:	6139      	str	r1, [r7, #16]
 8008a96:	4649      	mov	r1, r9
 8008a98:	414b      	adcs	r3, r1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	00cb      	lsls	r3, r1, #3
 8008aac:	4651      	mov	r1, sl
 8008aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ab2:	4651      	mov	r1, sl
 8008ab4:	00ca      	lsls	r2, r1, #3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	4642      	mov	r2, r8
 8008abe:	189b      	adds	r3, r3, r2
 8008ac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	460a      	mov	r2, r1
 8008ac8:	eb42 0303 	adc.w	r3, r2, r3
 8008acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ada:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	f04f 0300 	mov.w	r3, #0
 8008ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008ae8:	4649      	mov	r1, r9
 8008aea:	008b      	lsls	r3, r1, #2
 8008aec:	4641      	mov	r1, r8
 8008aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008af2:	4641      	mov	r1, r8
 8008af4:	008a      	lsls	r2, r1, #2
 8008af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008afa:	f7f7 fbd1 	bl	80002a0 <__aeabi_uldivmod>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	4b38      	ldr	r3, [pc, #224]	@ (8008be8 <UART_SetConfig+0x4e4>)
 8008b06:	fba3 2301 	umull	r2, r3, r3, r1
 8008b0a:	095b      	lsrs	r3, r3, #5
 8008b0c:	2264      	movs	r2, #100	@ 0x64
 8008b0e:	fb02 f303 	mul.w	r3, r2, r3
 8008b12:	1acb      	subs	r3, r1, r3
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	3332      	adds	r3, #50	@ 0x32
 8008b18:	4a33      	ldr	r2, [pc, #204]	@ (8008be8 <UART_SetConfig+0x4e4>)
 8008b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b24:	441c      	add	r4, r3
 8008b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008b34:	4642      	mov	r2, r8
 8008b36:	464b      	mov	r3, r9
 8008b38:	1891      	adds	r1, r2, r2
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	415b      	adcs	r3, r3
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b44:	4641      	mov	r1, r8
 8008b46:	1851      	adds	r1, r2, r1
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	414b      	adcs	r3, r1
 8008b4e:	607b      	str	r3, [r7, #4]
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b5c:	4659      	mov	r1, fp
 8008b5e:	00cb      	lsls	r3, r1, #3
 8008b60:	4651      	mov	r1, sl
 8008b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b66:	4651      	mov	r1, sl
 8008b68:	00ca      	lsls	r2, r1, #3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	4642      	mov	r2, r8
 8008b72:	189b      	adds	r3, r3, r2
 8008b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b76:	464b      	mov	r3, r9
 8008b78:	460a      	mov	r2, r1
 8008b7a:	eb42 0303 	adc.w	r3, r2, r3
 8008b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	f04f 0300 	mov.w	r3, #0
 8008b94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b98:	4649      	mov	r1, r9
 8008b9a:	008b      	lsls	r3, r1, #2
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	008a      	lsls	r2, r1, #2
 8008ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008baa:	f7f7 fb79 	bl	80002a0 <__aeabi_uldivmod>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008be8 <UART_SetConfig+0x4e4>)
 8008bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bb8:	095b      	lsrs	r3, r3, #5
 8008bba:	2164      	movs	r1, #100	@ 0x64
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	3332      	adds	r3, #50	@ 0x32
 8008bc6:	4a08      	ldr	r2, [pc, #32]	@ (8008be8 <UART_SetConfig+0x4e4>)
 8008bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	f003 020f 	and.w	r2, r3, #15
 8008bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4422      	add	r2, r4
 8008bda:	609a      	str	r2, [r3, #8]
}
 8008bdc:	bf00      	nop
 8008bde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008be2:	46bd      	mov	sp, r7
 8008be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008be8:	51eb851f 	.word	0x51eb851f

08008bec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008bec:	b084      	sub	sp, #16
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	f107 001c 	add.w	r0, r7, #28
 8008bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008c02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008c04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008c06:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008c0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008c0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008c12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008c16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008c26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	b004      	add	sp, #16
 8008c40:	4770      	bx	lr

08008c42 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2203      	movs	r2, #3
 8008c8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cd4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008cda:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ce0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008cf0:	f023 030f 	bic.w	r3, r3, #15
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	b2db      	uxtb	r3, r3
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3314      	adds	r3, #20
 8008d32:	461a      	mov	r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	4413      	add	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
}  
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d70:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d76:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0

}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b088      	sub	sp, #32
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008db0:	2310      	movs	r3, #16
 8008db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008db4:	2340      	movs	r3, #64	@ 0x40
 8008db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008db8:	2300      	movs	r3, #0
 8008dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff ff74 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dd2:	2110      	movs	r1, #16
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f9d7 	bl	8009188 <SDMMC_GetCmdResp1>
 8008dda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3720      	adds	r7, #32
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b088      	sub	sp, #32
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008df4:	2311      	movs	r3, #17
 8008df6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008df8:	2340      	movs	r3, #64	@ 0x40
 8008dfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff ff52 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e16:	2111      	movs	r1, #17
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f9b5 	bl	8009188 <SDMMC_GetCmdResp1>
 8008e1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e20:	69fb      	ldr	r3, [r7, #28]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3720      	adds	r7, #32
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b088      	sub	sp, #32
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e38:	2312      	movs	r3, #18
 8008e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e3c:	2340      	movs	r3, #64	@ 0x40
 8008e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e4a:	f107 0308 	add.w	r3, r7, #8
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff ff30 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e5a:	2112      	movs	r1, #18
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f993 	bl	8009188 <SDMMC_GetCmdResp1>
 8008e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e64:	69fb      	ldr	r3, [r7, #28]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3720      	adds	r7, #32
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b088      	sub	sp, #32
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e7c:	2318      	movs	r3, #24
 8008e7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e80:	2340      	movs	r3, #64	@ 0x40
 8008e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e8e:	f107 0308 	add.w	r3, r7, #8
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff ff0e 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e9e:	2118      	movs	r1, #24
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f971 	bl	8009188 <SDMMC_GetCmdResp1>
 8008ea6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b088      	sub	sp, #32
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008ec0:	2319      	movs	r3, #25
 8008ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ec4:	2340      	movs	r3, #64	@ 0x40
 8008ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ed0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff feec 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ee2:	2119      	movs	r1, #25
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f94f 	bl	8009188 <SDMMC_GetCmdResp1>
 8008eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eec:	69fb      	ldr	r3, [r7, #28]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3720      	adds	r7, #32
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f04:	230c      	movs	r3, #12
 8008f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f08:	2340      	movs	r3, #64	@ 0x40
 8008f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff feca 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008f22:	4a05      	ldr	r2, [pc, #20]	@ (8008f38 <SDMMC_CmdStopTransfer+0x40>)
 8008f24:	210c      	movs	r1, #12
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f92e 	bl	8009188 <SDMMC_GetCmdResp1>
 8008f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f2e:	69fb      	ldr	r3, [r7, #28]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3720      	adds	r7, #32
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	05f5e100 	.word	0x05f5e100

08008f3c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	@ 0x28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f4c:	2307      	movs	r3, #7
 8008f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f50:	2340      	movs	r3, #64	@ 0x40
 8008f52:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f5c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f5e:	f107 0310 	add.w	r3, r7, #16
 8008f62:	4619      	mov	r1, r3
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fea6 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f6e:	2107      	movs	r1, #7
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f909 	bl	8009188 <SDMMC_GetCmdResp1>
 8008f76:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3728      	adds	r7, #40	@ 0x28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b088      	sub	sp, #32
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008f92:	2300      	movs	r3, #0
 8008f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fa0:	f107 0308 	add.w	r3, r7, #8
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff fe85 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fb23 	bl	80095f8 <SDMMC_GetCmdError>
 8008fb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b088      	sub	sp, #32
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fc6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008fca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fcc:	2308      	movs	r3, #8
 8008fce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fd0:	2340      	movs	r3, #64	@ 0x40
 8008fd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fde:	f107 0308 	add.w	r3, r7, #8
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7ff fe66 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fab6 	bl	800955c <SDMMC_GetCmdResp7>
 8008ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3720      	adds	r7, #32
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800900a:	2337      	movs	r3, #55	@ 0x37
 800900c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800900e:	2340      	movs	r3, #64	@ 0x40
 8009010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800901a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fe47 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800902c:	2137      	movs	r1, #55	@ 0x37
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f8aa 	bl	8009188 <SDMMC_GetCmdResp1>
 8009034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009036:	69fb      	ldr	r3, [r7, #28]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3720      	adds	r7, #32
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009056:	2329      	movs	r3, #41	@ 0x29
 8009058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800905a:	2340      	movs	r3, #64	@ 0x40
 800905c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800905e:	2300      	movs	r3, #0
 8009060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009066:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009068:	f107 0308 	add.w	r3, r7, #8
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fe21 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9bd 	bl	80093f4 <SDMMC_GetCmdResp3>
 800907a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800907c:	69fb      	ldr	r3, [r7, #28]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b088      	sub	sp, #32
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009092:	2302      	movs	r3, #2
 8009094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009096:	23c0      	movs	r3, #192	@ 0xc0
 8009098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800909e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090a4:	f107 0308 	add.w	r3, r7, #8
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fe03 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f957 	bl	8009364 <SDMMC_GetCmdResp2>
 80090b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090b8:	69fb      	ldr	r3, [r7, #28]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3720      	adds	r7, #32
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b088      	sub	sp, #32
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80090d0:	2309      	movs	r3, #9
 80090d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80090d4:	23c0      	movs	r3, #192	@ 0xc0
 80090d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090e2:	f107 0308 	add.w	r3, r7, #8
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff fde4 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f938 	bl	8009364 <SDMMC_GetCmdResp2>
 80090f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090f6:	69fb      	ldr	r3, [r7, #28]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800910e:	2303      	movs	r3, #3
 8009110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009112:	2340      	movs	r3, #64	@ 0x40
 8009114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800911a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800911e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff fdc5 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	2103      	movs	r1, #3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f99d 	bl	8009470 <SDMMC_GetCmdResp6>
 8009136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009138:	69fb      	ldr	r3, [r7, #28]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3720      	adds	r7, #32
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b088      	sub	sp, #32
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009150:	230d      	movs	r3, #13
 8009152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009154:	2340      	movs	r3, #64	@ 0x40
 8009156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009158:	2300      	movs	r3, #0
 800915a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800915c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009160:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009162:	f107 0308 	add.w	r3, r7, #8
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff fda4 	bl	8008cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800916e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009172:	210d      	movs	r1, #13
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f807 	bl	8009188 <SDMMC_GetCmdResp1>
 800917a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800917c:	69fb      	ldr	r3, [r7, #28]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	460b      	mov	r3, r1
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009196:	4b70      	ldr	r3, [pc, #448]	@ (8009358 <SDMMC_GetCmdResp1+0x1d0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a70      	ldr	r2, [pc, #448]	@ (800935c <SDMMC_GetCmdResp1+0x1d4>)
 800919c:	fba2 2303 	umull	r2, r3, r2, r3
 80091a0:	0a5a      	lsrs	r2, r3, #9
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	fb02 f303 	mul.w	r3, r2, r3
 80091a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	1e5a      	subs	r2, r3, #1
 80091ae:	61fa      	str	r2, [r7, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091b8:	e0c9      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0ef      	beq.n	80091aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1ea      	bne.n	80091aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d004      	beq.n	80091ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2204      	movs	r2, #4
 80091e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091e6:	2304      	movs	r3, #4
 80091e8:	e0b1      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e0a6      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	22c5      	movs	r2, #197	@ 0xc5
 8009204:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff fd7f 	bl	8008d0a <SDIO_GetCommandResponse>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	4293      	cmp	r3, r2
 8009214:	d001      	beq.n	800921a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009216:	2301      	movs	r3, #1
 8009218:	e099      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800921a:	2100      	movs	r1, #0
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f7ff fd81 	bl	8008d24 <SDIO_GetResponse>
 8009222:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4b4e      	ldr	r3, [pc, #312]	@ (8009360 <SDMMC_GetCmdResp1+0x1d8>)
 8009228:	4013      	ands	r3, r2
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800922e:	2300      	movs	r3, #0
 8009230:	e08d      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da02      	bge.n	800923e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800923c:	e087      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009248:	2340      	movs	r3, #64	@ 0x40
 800924a:	e080      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009256:	2380      	movs	r3, #128	@ 0x80
 8009258:	e079      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009268:	e071      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009278:	e069      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009288:	e061      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009298:	e059      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092a8:	e051      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092b8:	e049      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80092c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80092c8:	e041      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80092d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092d8:	e039      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80092e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80092e8:	e031      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80092f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80092f8:	e029      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009304:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009308:	e021      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009314:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009318:	e019      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009324:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009328:	e011      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009334:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009338:	e009      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009344:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009348:	e001      	b.n	800934e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800934a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800934e:	4618      	mov	r0, r3
 8009350:	3720      	adds	r7, #32
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000004 	.word	0x20000004
 800935c:	10624dd3 	.word	0x10624dd3
 8009360:	fdffe008 	.word	0xfdffe008

08009364 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800936c:	4b1f      	ldr	r3, [pc, #124]	@ (80093ec <SDMMC_GetCmdResp2+0x88>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a1f      	ldr	r2, [pc, #124]	@ (80093f0 <SDMMC_GetCmdResp2+0x8c>)
 8009372:	fba2 2303 	umull	r2, r3, r2, r3
 8009376:	0a5b      	lsrs	r3, r3, #9
 8009378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800937c:	fb02 f303 	mul.w	r3, r2, r3
 8009380:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1e5a      	subs	r2, r3, #1
 8009386:	60fa      	str	r2, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800938c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009390:	e026      	b.n	80093e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009396:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0ef      	beq.n	8009382 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1ea      	bne.n	8009382 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d004      	beq.n	80093c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2204      	movs	r2, #4
 80093bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093be:	2304      	movs	r3, #4
 80093c0:	e00e      	b.n	80093e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d004      	beq.n	80093d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e003      	b.n	80093e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	22c5      	movs	r2, #197	@ 0xc5
 80093dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	20000004 	.word	0x20000004
 80093f0:	10624dd3 	.word	0x10624dd3

080093f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009468 <SDMMC_GetCmdResp3+0x74>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1a      	ldr	r2, [pc, #104]	@ (800946c <SDMMC_GetCmdResp3+0x78>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	0a5b      	lsrs	r3, r3, #9
 8009408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800940c:	fb02 f303 	mul.w	r3, r2, r3
 8009410:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	1e5a      	subs	r2, r3, #1
 8009416:	60fa      	str	r2, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d102      	bne.n	8009422 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800941c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009420:	e01b      	b.n	800945a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009426:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0ef      	beq.n	8009412 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1ea      	bne.n	8009412 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2204      	movs	r2, #4
 800944c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800944e:	2304      	movs	r3, #4
 8009450:	e003      	b.n	800945a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	22c5      	movs	r2, #197	@ 0xc5
 8009456:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20000004 	.word	0x20000004
 800946c:	10624dd3 	.word	0x10624dd3

08009470 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	460b      	mov	r3, r1
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800947e:	4b35      	ldr	r3, [pc, #212]	@ (8009554 <SDMMC_GetCmdResp6+0xe4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a35      	ldr	r2, [pc, #212]	@ (8009558 <SDMMC_GetCmdResp6+0xe8>)
 8009484:	fba2 2303 	umull	r2, r3, r2, r3
 8009488:	0a5b      	lsrs	r3, r3, #9
 800948a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	1e5a      	subs	r2, r3, #1
 8009498:	61fa      	str	r2, [r7, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d102      	bne.n	80094a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800949e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094a2:	e052      	b.n	800954a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0ef      	beq.n	8009494 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1ea      	bne.n	8009494 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c2:	f003 0304 	and.w	r3, r3, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2204      	movs	r2, #4
 80094ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094d0:	2304      	movs	r3, #4
 80094d2:	e03a      	b.n	800954a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d004      	beq.n	80094ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e02f      	b.n	800954a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff fc0d 	bl	8008d0a <SDIO_GetCommandResponse>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d001      	beq.n	80094fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e025      	b.n	800954a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	22c5      	movs	r2, #197	@ 0xc5
 8009502:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009504:	2100      	movs	r1, #0
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f7ff fc0c 	bl	8008d24 <SDIO_GetResponse>
 800950c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	0c1b      	lsrs	r3, r3, #16
 800951c:	b29a      	uxth	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009522:	2300      	movs	r3, #0
 8009524:	e011      	b.n	800954a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009534:	e009      	b.n	800954a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009544:	e001      	b.n	800954a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800954a:	4618      	mov	r0, r3
 800954c:	3720      	adds	r7, #32
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000004 	.word	0x20000004
 8009558:	10624dd3 	.word	0x10624dd3

0800955c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009564:	4b22      	ldr	r3, [pc, #136]	@ (80095f0 <SDMMC_GetCmdResp7+0x94>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a22      	ldr	r2, [pc, #136]	@ (80095f4 <SDMMC_GetCmdResp7+0x98>)
 800956a:	fba2 2303 	umull	r2, r3, r2, r3
 800956e:	0a5b      	lsrs	r3, r3, #9
 8009570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009574:	fb02 f303 	mul.w	r3, r2, r3
 8009578:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	60fa      	str	r2, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009584:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009588:	e02c      	b.n	80095e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800958e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0ef      	beq.n	800957a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1ea      	bne.n	800957a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2204      	movs	r2, #4
 80095b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095b6:	2304      	movs	r3, #4
 80095b8:	e014      	b.n	80095e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e009      	b.n	80095e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2240      	movs	r2, #64	@ 0x40
 80095e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80095e2:	2300      	movs	r3, #0
  
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	20000004 	.word	0x20000004
 80095f4:	10624dd3 	.word	0x10624dd3

080095f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009600:	4b11      	ldr	r3, [pc, #68]	@ (8009648 <SDMMC_GetCmdError+0x50>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a11      	ldr	r2, [pc, #68]	@ (800964c <SDMMC_GetCmdError+0x54>)
 8009606:	fba2 2303 	umull	r2, r3, r2, r3
 800960a:	0a5b      	lsrs	r3, r3, #9
 800960c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009610:	fb02 f303 	mul.w	r3, r2, r3
 8009614:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	60fa      	str	r2, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009620:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009624:	e009      	b.n	800963a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800962a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0f1      	beq.n	8009616 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	22c5      	movs	r2, #197	@ 0xc5
 8009636:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20000004 	.word	0x20000004
 800964c:	10624dd3 	.word	0x10624dd3

08009650 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009654:	4904      	ldr	r1, [pc, #16]	@ (8009668 <MX_FATFS_Init+0x18>)
 8009656:	4805      	ldr	r0, [pc, #20]	@ (800966c <MX_FATFS_Init+0x1c>)
 8009658:	f002 fc5c 	bl	800bf14 <FATFS_LinkDriver>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	4b03      	ldr	r3, [pc, #12]	@ (8009670 <MX_FATFS_Init+0x20>)
 8009662:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009664:	bf00      	nop
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20000878 	.word	0x20000878
 800966c:	0800e4fc 	.word	0x0800e4fc
 8009670:	20000874 	.word	0x20000874

08009674 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009678:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800967a:	4618      	mov	r0, r3
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800968e:	f000 f86b 	bl	8009768 <BSP_SD_IsDetected>
 8009692:	4603      	mov	r3, r0
 8009694:	2b01      	cmp	r3, #1
 8009696:	d001      	beq.n	800969c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e005      	b.n	80096a8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800969c:	4804      	ldr	r0, [pc, #16]	@ (80096b0 <BSP_SD_Init+0x2c>)
 800969e:	f7fc f905 	bl	80058ac <HAL_SD_Init>
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80096a6:	79fb      	ldrb	r3, [r7, #7]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	20000598 	.word	0x20000598

080096b4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	68f9      	ldr	r1, [r7, #12]
 80096d0:	4806      	ldr	r0, [pc, #24]	@ (80096ec <BSP_SD_ReadBlocks+0x38>)
 80096d2:	f7fc f993 	bl	80059fc <HAL_SD_ReadBlocks>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000598 	.word	0x20000598

080096f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	68f9      	ldr	r1, [r7, #12]
 800970c:	4806      	ldr	r0, [pc, #24]	@ (8009728 <BSP_SD_WriteBlocks+0x38>)
 800970e:	f7fc fb5b 	bl	8005dc8 <HAL_SD_WriteBlocks>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000598 	.word	0x20000598

0800972c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009730:	4805      	ldr	r0, [pc, #20]	@ (8009748 <BSP_SD_GetCardState+0x1c>)
 8009732:	f7fc fea7 	bl	8006484 <HAL_SD_GetCardState>
 8009736:	4603      	mov	r3, r0
 8009738:	2b04      	cmp	r3, #4
 800973a:	bf14      	ite	ne
 800973c:	2301      	movne	r3, #1
 800973e:	2300      	moveq	r3, #0
 8009740:	b2db      	uxtb	r3, r3
}
 8009742:	4618      	mov	r0, r3
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000598 	.word	0x20000598

0800974c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	4803      	ldr	r0, [pc, #12]	@ (8009764 <BSP_SD_GetCardInfo+0x18>)
 8009758:	f7fc fe68 	bl	800642c <HAL_SD_GetCardInfo>
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20000598 	.word	0x20000598

08009768 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800976e:	2301      	movs	r3, #1
 8009770:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	b2db      	uxtb	r3, r3
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800978e:	4b0b      	ldr	r3, [pc, #44]	@ (80097bc <SD_CheckStatus+0x38>)
 8009790:	2201      	movs	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009794:	f7ff ffca 	bl	800972c <BSP_SD_GetCardState>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d107      	bne.n	80097ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800979e:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <SD_CheckStatus+0x38>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f023 0301 	bic.w	r3, r3, #1
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	4b04      	ldr	r3, [pc, #16]	@ (80097bc <SD_CheckStatus+0x38>)
 80097ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80097ae:	4b03      	ldr	r3, [pc, #12]	@ (80097bc <SD_CheckStatus+0x38>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b2db      	uxtb	r3, r3
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	2000000d 	.word	0x2000000d

080097c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80097ca:	4b0b      	ldr	r3, [pc, #44]	@ (80097f8 <SD_initialize+0x38>)
 80097cc:	2201      	movs	r2, #1
 80097ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80097d0:	f7ff ff58 	bl	8009684 <BSP_SD_Init>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d107      	bne.n	80097ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff ffd1 	bl	8009784 <SD_CheckStatus>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	4b04      	ldr	r3, [pc, #16]	@ (80097f8 <SD_initialize+0x38>)
 80097e8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80097ea:	4b03      	ldr	r3, [pc, #12]	@ (80097f8 <SD_initialize+0x38>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b2db      	uxtb	r3, r3
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	2000000d 	.word	0x2000000d

080097fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff ffbb 	bl	8009784 <SD_CheckStatus>
 800980e:	4603      	mov	r3, r0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60b9      	str	r1, [r7, #8]
 8009820:	607a      	str	r2, [r7, #4]
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800982c:	f04f 33ff 	mov.w	r3, #4294967295
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f7ff ff3d 	bl	80096b4 <BSP_SD_ReadBlocks>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d107      	bne.n	8009850 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009840:	bf00      	nop
 8009842:	f7ff ff73 	bl	800972c <BSP_SD_GetCardState>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1fa      	bne.n	8009842 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800986e:	f04f 33ff 	mov.w	r3, #4294967295
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	68b8      	ldr	r0, [r7, #8]
 8009878:	f7ff ff3a 	bl	80096f0 <BSP_SD_WriteBlocks>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d107      	bne.n	8009892 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009882:	bf00      	nop
 8009884:	f7ff ff52 	bl	800972c <BSP_SD_GetCardState>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1fa      	bne.n	8009884 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08c      	sub	sp, #48	@ 0x30
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	603a      	str	r2, [r7, #0]
 80098a6:	71fb      	strb	r3, [r7, #7]
 80098a8:	460b      	mov	r3, r1
 80098aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098b2:	4b25      	ldr	r3, [pc, #148]	@ (8009948 <SD_ioctl+0xac>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 0301 	and.w	r3, r3, #1
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <SD_ioctl+0x28>
 80098c0:	2303      	movs	r3, #3
 80098c2:	e03c      	b.n	800993e <SD_ioctl+0xa2>

  switch (cmd)
 80098c4:	79bb      	ldrb	r3, [r7, #6]
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d834      	bhi.n	8009934 <SD_ioctl+0x98>
 80098ca:	a201      	add	r2, pc, #4	@ (adr r2, 80098d0 <SD_ioctl+0x34>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	080098e1 	.word	0x080098e1
 80098d4:	080098e9 	.word	0x080098e9
 80098d8:	08009901 	.word	0x08009901
 80098dc:	0800991b 	.word	0x0800991b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098e6:	e028      	b.n	800993a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098e8:	f107 030c 	add.w	r3, r7, #12
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff ff2d 	bl	800974c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098fe:	e01c      	b.n	800993a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009900:	f107 030c 	add.w	r3, r7, #12
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff ff21 	bl	800974c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800990a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990c:	b29a      	uxth	r2, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009918:	e00f      	b.n	800993a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800991a:	f107 030c 	add.w	r3, r7, #12
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff ff14 	bl	800974c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009926:	0a5a      	lsrs	r2, r3, #9
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009932:	e002      	b.n	800993a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009934:	2304      	movs	r3, #4
 8009936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800993a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800993e:	4618      	mov	r0, r3
 8009940:	3730      	adds	r7, #48	@ 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	2000000d 	.word	0x2000000d

0800994c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	4a08      	ldr	r2, [pc, #32]	@ (800997c <disk_status+0x30>)
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	79fa      	ldrb	r2, [r7, #7]
 8009964:	4905      	ldr	r1, [pc, #20]	@ (800997c <disk_status+0x30>)
 8009966:	440a      	add	r2, r1
 8009968:	7a12      	ldrb	r2, [r2, #8]
 800996a:	4610      	mov	r0, r2
 800996c:	4798      	blx	r3
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	200008a4 	.word	0x200008a4

08009980 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	4a0e      	ldr	r2, [pc, #56]	@ (80099cc <disk_initialize+0x4c>)
 8009992:	5cd3      	ldrb	r3, [r2, r3]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d114      	bne.n	80099c2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	4a0c      	ldr	r2, [pc, #48]	@ (80099cc <disk_initialize+0x4c>)
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	79fa      	ldrb	r2, [r7, #7]
 80099a6:	4909      	ldr	r1, [pc, #36]	@ (80099cc <disk_initialize+0x4c>)
 80099a8:	440a      	add	r2, r1
 80099aa:	7a12      	ldrb	r2, [r2, #8]
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d103      	bne.n	80099c2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	4a03      	ldr	r2, [pc, #12]	@ (80099cc <disk_initialize+0x4c>)
 80099be:	2101      	movs	r1, #1
 80099c0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	200008a4 	.word	0x200008a4

080099d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4a0a      	ldr	r2, [pc, #40]	@ (8009a0c <disk_read+0x3c>)
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	689c      	ldr	r4, [r3, #8]
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4a07      	ldr	r2, [pc, #28]	@ (8009a0c <disk_read+0x3c>)
 80099f0:	4413      	add	r3, r2
 80099f2:	7a18      	ldrb	r0, [r3, #8]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68b9      	ldr	r1, [r7, #8]
 80099fa:	47a0      	blx	r4
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd90      	pop	{r4, r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200008a4 	.word	0x200008a4

08009a10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4a0a      	ldr	r2, [pc, #40]	@ (8009a4c <disk_write+0x3c>)
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	68dc      	ldr	r4, [r3, #12]
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	4a07      	ldr	r2, [pc, #28]	@ (8009a4c <disk_write+0x3c>)
 8009a30:	4413      	add	r3, r2
 8009a32:	7a18      	ldrb	r0, [r3, #8]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	47a0      	blx	r4
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200008a4 	.word	0x200008a4

08009a50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	603a      	str	r2, [r7, #0]
 8009a5a:	71fb      	strb	r3, [r7, #7]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	4a09      	ldr	r2, [pc, #36]	@ (8009a88 <disk_ioctl+0x38>)
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	79fa      	ldrb	r2, [r7, #7]
 8009a6e:	4906      	ldr	r1, [pc, #24]	@ (8009a88 <disk_ioctl+0x38>)
 8009a70:	440a      	add	r2, r1
 8009a72:	7a10      	ldrb	r0, [r2, #8]
 8009a74:	79b9      	ldrb	r1, [r7, #6]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	4798      	blx	r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	200008a4 	.word	0x200008a4

08009a8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3301      	adds	r3, #1
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a9c:	89fb      	ldrh	r3, [r7, #14]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	b21a      	sxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	b21b      	sxth	r3, r3
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	b21b      	sxth	r3, r3
 8009aac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009aae:	89fb      	ldrh	r3, [r7, #14]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3303      	adds	r3, #3
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	3202      	adds	r2, #2
 8009ad4:	7812      	ldrb	r2, [r2, #0]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	021b      	lsls	r3, r3, #8
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7812      	ldrb	r2, [r2, #0]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
	return rv;
 8009af4:	68fb      	ldr	r3, [r7, #12]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	887a      	ldrh	r2, [r7, #2]
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	887b      	ldrh	r3, [r7, #2]
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	887a      	ldrh	r2, [r7, #2]
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	0a1b      	lsrs	r3, r3, #8
 8009b52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	607a      	str	r2, [r7, #4]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	701a      	strb	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00d      	beq.n	8009bc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	1c53      	adds	r3, r2, #1
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	1c59      	adds	r1, r3, #1
 8009bb4:	6179      	str	r1, [r7, #20]
 8009bb6:	7812      	ldrb	r2, [r2, #0]
 8009bb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	607b      	str	r3, [r7, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f1      	bne.n	8009baa <mem_cpy+0x1a>
	}
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009bd2:	b480      	push	{r7}
 8009bd4:	b087      	sub	sp, #28
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	617a      	str	r2, [r7, #20]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f3      	bne.n	8009be2 <mem_set+0x10>
}
 8009bfa:	bf00      	nop
 8009bfc:	bf00      	nop
 8009bfe:	371c      	adds	r7, #28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009c08:	b480      	push	{r7}
 8009c0a:	b089      	sub	sp, #36	@ 0x24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	61fb      	str	r3, [r7, #28]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	61fa      	str	r2, [r7, #28]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	61ba      	str	r2, [r7, #24]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	1acb      	subs	r3, r1, r3
 8009c34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	607b      	str	r3, [r7, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <mem_cmp+0x40>
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0eb      	beq.n	8009c20 <mem_cmp+0x18>

	return r;
 8009c48:	697b      	ldr	r3, [r7, #20]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3724      	adds	r7, #36	@ 0x24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c60:	e002      	b.n	8009c68 <chk_chr+0x12>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3301      	adds	r3, #1
 8009c66:	607b      	str	r3, [r7, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <chk_chr+0x26>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d1f2      	bne.n	8009c62 <chk_chr+0xc>
	return *str;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c96:	2300      	movs	r3, #0
 8009c98:	60bb      	str	r3, [r7, #8]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e029      	b.n	8009cf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ca0:	4a27      	ldr	r2, [pc, #156]	@ (8009d40 <chk_lock+0xb4>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	011b      	lsls	r3, r3, #4
 8009ca6:	4413      	add	r3, r2
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01d      	beq.n	8009cea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cae:	4a24      	ldr	r2, [pc, #144]	@ (8009d40 <chk_lock+0xb4>)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	4413      	add	r3, r2
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d116      	bne.n	8009cee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009d40 <chk_lock+0xb4>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	4413      	add	r3, r2
 8009cc8:	3304      	adds	r3, #4
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d10c      	bne.n	8009cee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8009d40 <chk_lock+0xb4>)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	4413      	add	r3, r2
 8009cdc:	3308      	adds	r3, #8
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d102      	bne.n	8009cee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ce8:	e007      	b.n	8009cfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cea:	2301      	movs	r3, #1
 8009cec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d9d2      	bls.n	8009ca0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d109      	bne.n	8009d14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <chk_lock+0x80>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d101      	bne.n	8009d10 <chk_lock+0x84>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	e010      	b.n	8009d32 <chk_lock+0xa6>
 8009d10:	2312      	movs	r3, #18
 8009d12:	e00e      	b.n	8009d32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d108      	bne.n	8009d2c <chk_lock+0xa0>
 8009d1a:	4a09      	ldr	r2, [pc, #36]	@ (8009d40 <chk_lock+0xb4>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	4413      	add	r3, r2
 8009d22:	330c      	adds	r3, #12
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d2a:	d101      	bne.n	8009d30 <chk_lock+0xa4>
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	e000      	b.n	8009d32 <chk_lock+0xa6>
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	20000884 	.word	0x20000884

08009d44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	607b      	str	r3, [r7, #4]
 8009d4e:	e002      	b.n	8009d56 <enq_lock+0x12>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3301      	adds	r3, #1
 8009d54:	607b      	str	r3, [r7, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d806      	bhi.n	8009d6a <enq_lock+0x26>
 8009d5c:	4a09      	ldr	r2, [pc, #36]	@ (8009d84 <enq_lock+0x40>)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	4413      	add	r3, r2
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1f2      	bne.n	8009d50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000884 	.word	0x20000884

08009d88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	e01f      	b.n	8009dd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d98:	4a41      	ldr	r2, [pc, #260]	@ (8009ea0 <inc_lock+0x118>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	4413      	add	r3, r2
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d113      	bne.n	8009dd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009daa:	4a3d      	ldr	r2, [pc, #244]	@ (8009ea0 <inc_lock+0x118>)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	4413      	add	r3, r2
 8009db2:	3304      	adds	r3, #4
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d109      	bne.n	8009dd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009dbe:	4a38      	ldr	r2, [pc, #224]	@ (8009ea0 <inc_lock+0x118>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d006      	beq.n	8009de0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d9dc      	bls.n	8009d98 <inc_lock+0x10>
 8009dde:	e000      	b.n	8009de2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009de0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d132      	bne.n	8009e4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e002      	b.n	8009df4 <inc_lock+0x6c>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3301      	adds	r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d806      	bhi.n	8009e08 <inc_lock+0x80>
 8009dfa:	4a29      	ldr	r2, [pc, #164]	@ (8009ea0 <inc_lock+0x118>)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	4413      	add	r3, r2
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1f2      	bne.n	8009dee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d101      	bne.n	8009e12 <inc_lock+0x8a>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e040      	b.n	8009e94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	4922      	ldr	r1, [pc, #136]	@ (8009ea0 <inc_lock+0x118>)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	440b      	add	r3, r1
 8009e1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	491e      	ldr	r1, [pc, #120]	@ (8009ea0 <inc_lock+0x118>)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	011b      	lsls	r3, r3, #4
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695a      	ldr	r2, [r3, #20]
 8009e34:	491a      	ldr	r1, [pc, #104]	@ (8009ea0 <inc_lock+0x118>)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	440b      	add	r3, r1
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e40:	4a17      	ldr	r2, [pc, #92]	@ (8009ea0 <inc_lock+0x118>)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	4413      	add	r3, r2
 8009e48:	330c      	adds	r3, #12
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <inc_lock+0xe0>
 8009e54:	4a12      	ldr	r2, [pc, #72]	@ (8009ea0 <inc_lock+0x118>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	4413      	add	r3, r2
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <inc_lock+0xe0>
 8009e64:	2300      	movs	r3, #0
 8009e66:	e015      	b.n	8009e94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d108      	bne.n	8009e80 <inc_lock+0xf8>
 8009e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ea0 <inc_lock+0x118>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	4413      	add	r3, r2
 8009e76:	330c      	adds	r3, #12
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	e001      	b.n	8009e84 <inc_lock+0xfc>
 8009e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e84:	4906      	ldr	r1, [pc, #24]	@ (8009ea0 <inc_lock+0x118>)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	440b      	add	r3, r1
 8009e8c:	330c      	adds	r3, #12
 8009e8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3301      	adds	r3, #1
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	20000884 	.word	0x20000884

08009ea4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	607b      	str	r3, [r7, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d825      	bhi.n	8009f04 <dec_lock+0x60>
		n = Files[i].ctr;
 8009eb8:	4a17      	ldr	r2, [pc, #92]	@ (8009f18 <dec_lock+0x74>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	4413      	add	r3, r2
 8009ec0:	330c      	adds	r3, #12
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ecc:	d101      	bne.n	8009ed2 <dec_lock+0x2e>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ed2:	89fb      	ldrh	r3, [r7, #14]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <dec_lock+0x3a>
 8009ed8:	89fb      	ldrh	r3, [r7, #14]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ede:	4a0e      	ldr	r2, [pc, #56]	@ (8009f18 <dec_lock+0x74>)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	4413      	add	r3, r2
 8009ee6:	330c      	adds	r3, #12
 8009ee8:	89fa      	ldrh	r2, [r7, #14]
 8009eea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009eec:	89fb      	ldrh	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <dec_lock+0x5a>
 8009ef2:	4a09      	ldr	r2, [pc, #36]	@ (8009f18 <dec_lock+0x74>)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	4413      	add	r3, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	737b      	strb	r3, [r7, #13]
 8009f02:	e001      	b.n	8009f08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f04:	2302      	movs	r3, #2
 8009f06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20000884 	.word	0x20000884

08009f1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e010      	b.n	8009f4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f60 <clear_lock+0x44>)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	4413      	add	r3, r2
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d105      	bne.n	8009f46 <clear_lock+0x2a>
 8009f3a:	4a09      	ldr	r2, [pc, #36]	@ (8009f60 <clear_lock+0x44>)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	4413      	add	r3, r2
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d9eb      	bls.n	8009f2a <clear_lock+0xe>
	}
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	20000884 	.word	0x20000884

08009f64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	78db      	ldrb	r3, [r3, #3]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d034      	beq.n	8009fe2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7858      	ldrb	r0, [r3, #1]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f88:	2301      	movs	r3, #1
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	f7ff fd40 	bl	8009a10 <disk_write>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	73fb      	strb	r3, [r7, #15]
 8009f9a:	e022      	b.n	8009fe2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d217      	bcs.n	8009fe2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	789b      	ldrb	r3, [r3, #2]
 8009fb6:	613b      	str	r3, [r7, #16]
 8009fb8:	e010      	b.n	8009fdc <sync_window+0x78>
					wsect += fs->fsize;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	7858      	ldrb	r0, [r3, #1]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fce:	2301      	movs	r3, #1
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	f7ff fd1d 	bl	8009a10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d8eb      	bhi.n	8009fba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffe:	683a      	ldr	r2, [r7, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d01b      	beq.n	800a03c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ffad 	bl	8009f64 <sync_window>
 800a00a:	4603      	mov	r3, r0
 800a00c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d113      	bne.n	800a03c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7858      	ldrb	r0, [r3, #1]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a01e:	2301      	movs	r3, #1
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	f7ff fcd5 	bl	80099d0 <disk_read>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d004      	beq.n	800a036 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a02c:	f04f 33ff 	mov.w	r3, #4294967295
 800a030:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a032:	2301      	movs	r3, #1
 800a034:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
	...

0800a048 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff ff87 	bl	8009f64 <sync_window>
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d158      	bne.n	800a112 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d148      	bne.n	800a0fa <sync_fs+0xb2>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	791b      	ldrb	r3, [r3, #4]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d144      	bne.n	800a0fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3330      	adds	r3, #48	@ 0x30
 800a074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a078:	2100      	movs	r1, #0
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff fda9 	bl	8009bd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3330      	adds	r3, #48	@ 0x30
 800a084:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a088:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff fd38 	bl	8009b02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3330      	adds	r3, #48	@ 0x30
 800a096:	4921      	ldr	r1, [pc, #132]	@ (800a11c <sync_fs+0xd4>)
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff fd4d 	bl	8009b38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3330      	adds	r3, #48	@ 0x30
 800a0a2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a0a6:	491e      	ldr	r1, [pc, #120]	@ (800a120 <sync_fs+0xd8>)
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff fd45 	bl	8009b38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3330      	adds	r3, #48	@ 0x30
 800a0b2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f7ff fd3b 	bl	8009b38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3330      	adds	r3, #48	@ 0x30
 800a0c6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f7ff fd31 	bl	8009b38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	1c5a      	adds	r2, r3, #1
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7858      	ldrb	r0, [r3, #1]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f7ff fc8e 	bl	8009a10 <disk_write>
			fs->fsi_flag = 0;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff fca4 	bl	8009a50 <disk_ioctl>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <sync_fs+0xca>
 800a10e:	2301      	movs	r3, #1
 800a110:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	41615252 	.word	0x41615252
 800a120:	61417272 	.word	0x61417272

0800a124 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	3b02      	subs	r3, #2
 800a132:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	3b02      	subs	r3, #2
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d301      	bcc.n	800a144 <clust2sect+0x20>
 800a140:	2300      	movs	r3, #0
 800a142:	e008      	b.n	800a156 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	895b      	ldrh	r3, [r3, #10]
 800a148:	461a      	mov	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	fb03 f202 	mul.w	r2, r3, r2
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a154:	4413      	add	r3, r2
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b086      	sub	sp, #24
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d904      	bls.n	800a182 <get_fat+0x20>
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d302      	bcc.n	800a188 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a182:	2301      	movs	r3, #1
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	e08e      	b.n	800a2a6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a188:	f04f 33ff 	mov.w	r3, #4294967295
 800a18c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b03      	cmp	r3, #3
 800a194:	d061      	beq.n	800a25a <get_fat+0xf8>
 800a196:	2b03      	cmp	r3, #3
 800a198:	dc7b      	bgt.n	800a292 <get_fat+0x130>
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d002      	beq.n	800a1a4 <get_fat+0x42>
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d041      	beq.n	800a226 <get_fat+0xc4>
 800a1a2:	e076      	b.n	800a292 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	6a1a      	ldr	r2, [r3, #32]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	0a5b      	lsrs	r3, r3, #9
 800a1ba:	4413      	add	r3, r2
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6938      	ldr	r0, [r7, #16]
 800a1c0:	f7ff ff14 	bl	8009fec <move_window>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d166      	bne.n	800a298 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	60fa      	str	r2, [r7, #12]
 800a1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	6a1a      	ldr	r2, [r3, #32]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	0a5b      	lsrs	r3, r3, #9
 800a1e6:	4413      	add	r3, r2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6938      	ldr	r0, [r7, #16]
 800a1ec:	f7ff fefe 	bl	8009fec <move_window>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d152      	bne.n	800a29c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4413      	add	r3, r2
 800a200:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	4313      	orrs	r3, r2
 800a20a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <get_fat+0xba>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	091b      	lsrs	r3, r3, #4
 800a21a:	e002      	b.n	800a222 <get_fat+0xc0>
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a222:	617b      	str	r3, [r7, #20]
			break;
 800a224:	e03f      	b.n	800a2a6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	6a1a      	ldr	r2, [r3, #32]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	4413      	add	r3, r2
 800a230:	4619      	mov	r1, r3
 800a232:	6938      	ldr	r0, [r7, #16]
 800a234:	f7ff feda 	bl	8009fec <move_window>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d130      	bne.n	800a2a0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	005b      	lsls	r3, r3, #1
 800a248:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a24c:	4413      	add	r3, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fc1c 	bl	8009a8c <ld_word>
 800a254:	4603      	mov	r3, r0
 800a256:	617b      	str	r3, [r7, #20]
			break;
 800a258:	e025      	b.n	800a2a6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	6a1a      	ldr	r2, [r3, #32]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	09db      	lsrs	r3, r3, #7
 800a262:	4413      	add	r3, r2
 800a264:	4619      	mov	r1, r3
 800a266:	6938      	ldr	r0, [r7, #16]
 800a268:	f7ff fec0 	bl	8009fec <move_window>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d118      	bne.n	800a2a4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a280:	4413      	add	r3, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fc1a 	bl	8009abc <ld_dword>
 800a288:	4603      	mov	r3, r0
 800a28a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a28e:	617b      	str	r3, [r7, #20]
			break;
 800a290:	e009      	b.n	800a2a6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a292:	2301      	movs	r3, #1
 800a294:	617b      	str	r3, [r7, #20]
 800a296:	e006      	b.n	800a2a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a298:	bf00      	nop
 800a29a:	e004      	b.n	800a2a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a29c:	bf00      	nop
 800a29e:	e002      	b.n	800a2a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2a0:	bf00      	nop
 800a2a2:	e000      	b.n	800a2a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2a4:	bf00      	nop
		}
	}

	return val;
 800a2a6:	697b      	ldr	r3, [r7, #20]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b089      	sub	sp, #36	@ 0x24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	f240 80d9 	bls.w	800a47a <put_fat+0x1ca>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	f080 80d3 	bcs.w	800a47a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	f000 8096 	beq.w	800a40a <put_fat+0x15a>
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	f300 80cb 	bgt.w	800a47a <put_fat+0x1ca>
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d002      	beq.n	800a2ee <put_fat+0x3e>
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d06e      	beq.n	800a3ca <put_fat+0x11a>
 800a2ec:	e0c5      	b.n	800a47a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	61bb      	str	r3, [r7, #24]
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	085b      	lsrs	r3, r3, #1
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a1a      	ldr	r2, [r3, #32]
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	0a5b      	lsrs	r3, r3, #9
 800a304:	4413      	add	r3, r2
 800a306:	4619      	mov	r1, r3
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fe6f 	bl	8009fec <move_window>
 800a30e:	4603      	mov	r3, r0
 800a310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a312:	7ffb      	ldrb	r3, [r7, #31]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f040 80a9 	bne.w	800a46c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	1c59      	adds	r1, r3, #1
 800a324:	61b9      	str	r1, [r7, #24]
 800a326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32a:	4413      	add	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00d      	beq.n	800a354 <put_fat+0xa4>
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	b25b      	sxtb	r3, r3
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	b25a      	sxtb	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	b25b      	sxtb	r3, r3
 800a34c:	4313      	orrs	r3, r2
 800a34e:	b25b      	sxtb	r3, r3
 800a350:	b2db      	uxtb	r3, r3
 800a352:	e001      	b.n	800a358 <put_fat+0xa8>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2201      	movs	r2, #1
 800a360:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6a1a      	ldr	r2, [r3, #32]
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	0a5b      	lsrs	r3, r3, #9
 800a36a:	4413      	add	r3, r2
 800a36c:	4619      	mov	r1, r3
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f7ff fe3c 	bl	8009fec <move_window>
 800a374:	4603      	mov	r3, r0
 800a376:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a378:	7ffb      	ldrb	r3, [r7, #31]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d178      	bne.n	800a470 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38a:	4413      	add	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <put_fat+0xf0>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	091b      	lsrs	r3, r3, #4
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	e00e      	b.n	800a3be <put_fat+0x10e>
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	b25b      	sxtb	r3, r3
 800a3a6:	f023 030f 	bic.w	r3, r3, #15
 800a3aa:	b25a      	sxtb	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	0a1b      	lsrs	r3, r3, #8
 800a3b0:	b25b      	sxtb	r3, r3
 800a3b2:	f003 030f 	and.w	r3, r3, #15
 800a3b6:	b25b      	sxtb	r3, r3
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	b25b      	sxtb	r3, r3
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	70da      	strb	r2, [r3, #3]
			break;
 800a3c8:	e057      	b.n	800a47a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1a      	ldr	r2, [r3, #32]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	0a1b      	lsrs	r3, r3, #8
 800a3d2:	4413      	add	r3, r2
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7ff fe08 	bl	8009fec <move_window>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3e0:	7ffb      	ldrb	r3, [r7, #31]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d146      	bne.n	800a474 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a3f4:	4413      	add	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	b292      	uxth	r2, r2
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fb80 	bl	8009b02 <st_word>
			fs->wflag = 1;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	70da      	strb	r2, [r3, #3]
			break;
 800a408:	e037      	b.n	800a47a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a1a      	ldr	r2, [r3, #32]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	09db      	lsrs	r3, r3, #7
 800a412:	4413      	add	r3, r2
 800a414:	4619      	mov	r1, r3
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fde8 	bl	8009fec <move_window>
 800a41c:	4603      	mov	r3, r0
 800a41e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a420:	7ffb      	ldrb	r3, [r7, #31]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d128      	bne.n	800a478 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a43a:	4413      	add	r3, r2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff fb3d 	bl	8009abc <ld_dword>
 800a442:	4603      	mov	r3, r0
 800a444:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a448:	4323      	orrs	r3, r4
 800a44a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a45a:	4413      	add	r3, r2
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fb6a 	bl	8009b38 <st_dword>
			fs->wflag = 1;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2201      	movs	r2, #1
 800a468:	70da      	strb	r2, [r3, #3]
			break;
 800a46a:	e006      	b.n	800a47a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a46c:	bf00      	nop
 800a46e:	e004      	b.n	800a47a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a470:	bf00      	nop
 800a472:	e002      	b.n	800a47a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a474:	bf00      	nop
 800a476:	e000      	b.n	800a47a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a478:	bf00      	nop
		}
	}
	return res;
 800a47a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3724      	adds	r7, #36	@ 0x24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd90      	pop	{r4, r7, pc}

0800a484 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d904      	bls.n	800a4aa <remove_chain+0x26>
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d301      	bcc.n	800a4ae <remove_chain+0x2a>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e04b      	b.n	800a546 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00c      	beq.n	800a4ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b8:	6879      	ldr	r1, [r7, #4]
 800a4ba:	69b8      	ldr	r0, [r7, #24]
 800a4bc:	f7ff fef8 	bl	800a2b0 <put_fat>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a4c4:	7ffb      	ldrb	r3, [r7, #31]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <remove_chain+0x4a>
 800a4ca:	7ffb      	ldrb	r3, [r7, #31]
 800a4cc:	e03b      	b.n	800a546 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a4ce:	68b9      	ldr	r1, [r7, #8]
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fe46 	bl	800a162 <get_fat>
 800a4d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d031      	beq.n	800a542 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d101      	bne.n	800a4e8 <remove_chain+0x64>
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	e02e      	b.n	800a546 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	d101      	bne.n	800a4f4 <remove_chain+0x70>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e028      	b.n	800a546 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	69b8      	ldr	r0, [r7, #24]
 800a4fa:	f7ff fed9 	bl	800a2b0 <put_fat>
 800a4fe:	4603      	mov	r3, r0
 800a500:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a502:	7ffb      	ldrb	r3, [r7, #31]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <remove_chain+0x88>
 800a508:	7ffb      	ldrb	r3, [r7, #31]
 800a50a:	e01c      	b.n	800a546 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	691a      	ldr	r2, [r3, #16]
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	3b02      	subs	r3, #2
 800a516:	429a      	cmp	r2, r3
 800a518:	d20b      	bcs.n	800a532 <remove_chain+0xae>
			fs->free_clst++;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	791b      	ldrb	r3, [r3, #4]
 800a528:	f043 0301 	orr.w	r3, r3, #1
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d3c6      	bcc.n	800a4ce <remove_chain+0x4a>
 800a540:	e000      	b.n	800a544 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a542:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3720      	adds	r7, #32
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b088      	sub	sp, #32
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10d      	bne.n	800a580 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <create_chain+0x2c>
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	429a      	cmp	r2, r3
 800a578:	d31b      	bcc.n	800a5b2 <create_chain+0x64>
 800a57a:	2301      	movs	r3, #1
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	e018      	b.n	800a5b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fded 	bl	800a162 <get_fat>
 800a588:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d801      	bhi.n	800a594 <create_chain+0x46>
 800a590:	2301      	movs	r3, #1
 800a592:	e070      	b.n	800a676 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59a:	d101      	bne.n	800a5a0 <create_chain+0x52>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	e06a      	b.n	800a676 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d201      	bcs.n	800a5ae <create_chain+0x60>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	e063      	b.n	800a676 <create_chain+0x128>
		scl = clst;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d307      	bcc.n	800a5d6 <create_chain+0x88>
				ncl = 2;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a5ca:	69fa      	ldr	r2, [r7, #28]
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d901      	bls.n	800a5d6 <create_chain+0x88>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e04f      	b.n	800a676 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a5d6:	69f9      	ldr	r1, [r7, #28]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fdc2 	bl	800a162 <get_fat>
 800a5de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00e      	beq.n	800a604 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d003      	beq.n	800a5f4 <create_chain+0xa6>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d101      	bne.n	800a5f8 <create_chain+0xaa>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	e03e      	b.n	800a676 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d1da      	bne.n	800a5b6 <create_chain+0x68>
 800a600:	2300      	movs	r3, #0
 800a602:	e038      	b.n	800a676 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a604:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a606:	f04f 32ff 	mov.w	r2, #4294967295
 800a60a:	69f9      	ldr	r1, [r7, #28]
 800a60c:	6938      	ldr	r0, [r7, #16]
 800a60e:	f7ff fe4f 	bl	800a2b0 <put_fat>
 800a612:	4603      	mov	r3, r0
 800a614:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d109      	bne.n	800a630 <create_chain+0xe2>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d006      	beq.n	800a630 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6938      	ldr	r0, [r7, #16]
 800a628:	f7ff fe42 	bl	800a2b0 <put_fat>
 800a62c:	4603      	mov	r3, r0
 800a62e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d116      	bne.n	800a664 <create_chain+0x116>
		fs->last_clst = ncl;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	69fa      	ldr	r2, [r7, #28]
 800a63a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	691a      	ldr	r2, [r3, #16]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	3b02      	subs	r3, #2
 800a646:	429a      	cmp	r2, r3
 800a648:	d804      	bhi.n	800a654 <create_chain+0x106>
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	1e5a      	subs	r2, r3, #1
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	791b      	ldrb	r3, [r3, #4]
 800a658:	f043 0301 	orr.w	r3, r3, #1
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	711a      	strb	r2, [r3, #4]
 800a662:	e007      	b.n	800a674 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a664:	7dfb      	ldrb	r3, [r7, #23]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d102      	bne.n	800a670 <create_chain+0x122>
 800a66a:	f04f 33ff 	mov.w	r3, #4294967295
 800a66e:	e000      	b.n	800a672 <create_chain+0x124>
 800a670:	2301      	movs	r3, #1
 800a672:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a674:	69fb      	ldr	r3, [r7, #28]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3720      	adds	r7, #32
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a67e:	b480      	push	{r7}
 800a680:	b087      	sub	sp, #28
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a692:	3304      	adds	r3, #4
 800a694:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	0a5b      	lsrs	r3, r3, #9
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	8952      	ldrh	r2, [r2, #10]
 800a69e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	1d1a      	adds	r2, r3, #4
 800a6a8:	613a      	str	r2, [r7, #16]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <clmt_clust+0x3a>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e010      	b.n	800a6da <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d307      	bcc.n	800a6d0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6ce:	e7e9      	b.n	800a6a4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a6d0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	4413      	add	r3, r2
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b086      	sub	sp, #24
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6fc:	d204      	bcs.n	800a708 <dir_sdi+0x22>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	f003 031f 	and.w	r3, r3, #31
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <dir_sdi+0x26>
		return FR_INT_ERR;
 800a708:	2302      	movs	r3, #2
 800a70a:	e063      	b.n	800a7d4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <dir_sdi+0x46>
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d902      	bls.n	800a72c <dir_sdi+0x46>
		clst = fs->dirbase;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10c      	bne.n	800a74c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	8912      	ldrh	r2, [r2, #8]
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d301      	bcc.n	800a742 <dir_sdi+0x5c>
 800a73e:	2302      	movs	r3, #2
 800a740:	e048      	b.n	800a7d4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	61da      	str	r2, [r3, #28]
 800a74a:	e029      	b.n	800a7a0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	895b      	ldrh	r3, [r3, #10]
 800a750:	025b      	lsls	r3, r3, #9
 800a752:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a754:	e019      	b.n	800a78a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6979      	ldr	r1, [r7, #20]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff fd01 	bl	800a162 <get_fat>
 800a760:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a768:	d101      	bne.n	800a76e <dir_sdi+0x88>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e032      	b.n	800a7d4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d904      	bls.n	800a77e <dir_sdi+0x98>
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d301      	bcc.n	800a782 <dir_sdi+0x9c>
 800a77e:	2302      	movs	r3, #2
 800a780:	e028      	b.n	800a7d4 <dir_sdi+0xee>
			ofs -= csz;
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d2e1      	bcs.n	800a756 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a792:	6979      	ldr	r1, [r7, #20]
 800a794:	6938      	ldr	r0, [r7, #16]
 800a796:	f7ff fcc5 	bl	800a124 <clust2sect>
 800a79a:	4602      	mov	r2, r0
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <dir_sdi+0xcc>
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	e010      	b.n	800a7d4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69da      	ldr	r2, [r3, #28]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	0a5b      	lsrs	r3, r3, #9
 800a7ba:	441a      	add	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7cc:	441a      	add	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	3320      	adds	r3, #32
 800a7f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <dir_next+0x28>
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a802:	d301      	bcc.n	800a808 <dir_next+0x2c>
 800a804:	2304      	movs	r3, #4
 800a806:	e0aa      	b.n	800a95e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f040 8098 	bne.w	800a944 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	095b      	lsrs	r3, r3, #5
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	8912      	ldrh	r2, [r2, #8]
 800a82e:	4293      	cmp	r3, r2
 800a830:	f0c0 8088 	bcc.w	800a944 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	61da      	str	r2, [r3, #28]
 800a83a:	2304      	movs	r3, #4
 800a83c:	e08f      	b.n	800a95e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	0a5b      	lsrs	r3, r3, #9
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	8952      	ldrh	r2, [r2, #10]
 800a846:	3a01      	subs	r2, #1
 800a848:	4013      	ands	r3, r2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d17a      	bne.n	800a944 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	4619      	mov	r1, r3
 800a856:	4610      	mov	r0, r2
 800a858:	f7ff fc83 	bl	800a162 <get_fat>
 800a85c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d801      	bhi.n	800a868 <dir_next+0x8c>
 800a864:	2302      	movs	r3, #2
 800a866:	e07a      	b.n	800a95e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86e:	d101      	bne.n	800a874 <dir_next+0x98>
 800a870:	2301      	movs	r3, #1
 800a872:	e074      	b.n	800a95e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d358      	bcc.n	800a930 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	61da      	str	r2, [r3, #28]
 800a88a:	2304      	movs	r3, #4
 800a88c:	e067      	b.n	800a95e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	4619      	mov	r1, r3
 800a896:	4610      	mov	r0, r2
 800a898:	f7ff fe59 	bl	800a54e <create_chain>
 800a89c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <dir_next+0xcc>
 800a8a4:	2307      	movs	r3, #7
 800a8a6:	e05a      	b.n	800a95e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <dir_next+0xd6>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e055      	b.n	800a95e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d101      	bne.n	800a8be <dir_next+0xe2>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e04f      	b.n	800a95e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff fb50 	bl	8009f64 <sync_window>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <dir_next+0xf2>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e047      	b.n	800a95e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3330      	adds	r3, #48	@ 0x30
 800a8d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff f97a 	bl	8009bd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8de:	2300      	movs	r3, #0
 800a8e0:	613b      	str	r3, [r7, #16]
 800a8e2:	6979      	ldr	r1, [r7, #20]
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7ff fc1d 	bl	800a124 <clust2sect>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a8f0:	e012      	b.n	800a918 <dir_next+0x13c>
						fs->wflag = 1;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff fb33 	bl	8009f64 <sync_window>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <dir_next+0x12c>
 800a904:	2301      	movs	r3, #1
 800a906:	e02a      	b.n	800a95e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	3301      	adds	r3, #1
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	895b      	ldrh	r3, [r3, #10]
 800a91c:	461a      	mov	r2, r3
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	4293      	cmp	r3, r2
 800a922:	d3e6      	bcc.n	800a8f2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	1ad2      	subs	r2, r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a936:	6979      	ldr	r1, [r7, #20]
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f7ff fbf3 	bl	800a124 <clust2sect>
 800a93e:	4602      	mov	r2, r0
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a956:	441a      	add	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a976:	2100      	movs	r1, #0
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff feb4 	bl	800a6e6 <dir_sdi>
 800a97e:	4603      	mov	r3, r0
 800a980:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d12b      	bne.n	800a9e0 <dir_alloc+0x7a>
		n = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	4619      	mov	r1, r3
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7ff fb2a 	bl	8009fec <move_window>
 800a998:	4603      	mov	r3, r0
 800a99a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a99c:	7dfb      	ldrb	r3, [r7, #23]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d11d      	bne.n	800a9de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2be5      	cmp	r3, #229	@ 0xe5
 800a9aa:	d004      	beq.n	800a9b6 <dir_alloc+0x50>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d107      	bne.n	800a9c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	613b      	str	r3, [r7, #16]
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d102      	bne.n	800a9ca <dir_alloc+0x64>
 800a9c4:	e00c      	b.n	800a9e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff ff05 	bl	800a7dc <dir_next>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0d7      	beq.n	800a98c <dir_alloc+0x26>
 800a9dc:	e000      	b.n	800a9e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a9de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d101      	bne.n	800a9ea <dir_alloc+0x84>
 800a9e6:	2307      	movs	r3, #7
 800a9e8:	75fb      	strb	r3, [r7, #23]
	return res;
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	331a      	adds	r3, #26
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff f842 	bl	8009a8c <ld_word>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d109      	bne.n	800aa28 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	3314      	adds	r3, #20
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff f837 	bl	8009a8c <ld_word>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aa28:	68fb      	ldr	r3, [r7, #12]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	331a      	adds	r3, #26
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	b292      	uxth	r2, r2
 800aa46:	4611      	mov	r1, r2
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff f85a 	bl	8009b02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d109      	bne.n	800aa6a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f103 0214 	add.w	r2, r3, #20
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	0c1b      	lsrs	r3, r3, #16
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f7ff f84c 	bl	8009b02 <st_word>
	}
}
 800aa6a:	bf00      	nop
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b086      	sub	sp, #24
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa80:	2100      	movs	r1, #0
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fe2f 	bl	800a6e6 <dir_sdi>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <dir_find+0x24>
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	e03e      	b.n	800ab14 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6938      	ldr	r0, [r7, #16]
 800aa9e:	f7ff faa5 	bl	8009fec <move_window>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d12f      	bne.n	800ab0c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d102      	bne.n	800aac0 <dir_find+0x4e>
 800aaba:	2304      	movs	r3, #4
 800aabc:	75fb      	strb	r3, [r7, #23]
 800aabe:	e028      	b.n	800ab12 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	330b      	adds	r3, #11
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	330b      	adds	r3, #11
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	f003 0308 	and.w	r3, r3, #8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10a      	bne.n	800aaf8 <dir_find+0x86>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a18      	ldr	r0, [r3, #32]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3324      	adds	r3, #36	@ 0x24
 800aaea:	220b      	movs	r2, #11
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7ff f88b 	bl	8009c08 <mem_cmp>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff fe6e 	bl	800a7dc <dir_next>
 800ab00:	4603      	mov	r3, r0
 800ab02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0c5      	beq.n	800aa96 <dir_find+0x24>
 800ab0a:	e002      	b.n	800ab12 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ab0c:	bf00      	nop
 800ab0e:	e000      	b.n	800ab12 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab10:	bf00      	nop

	return res;
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff ff1a 	bl	800a966 <dir_alloc>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d11c      	bne.n	800ab76 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	4619      	mov	r1, r3
 800ab42:	68b8      	ldr	r0, [r7, #8]
 800ab44:	f7ff fa52 	bl	8009fec <move_window>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d111      	bne.n	800ab76 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	2220      	movs	r2, #32
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7ff f839 	bl	8009bd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a18      	ldr	r0, [r3, #32]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3324      	adds	r3, #36	@ 0x24
 800ab68:	220b      	movs	r2, #11
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f7ff f810 	bl	8009b90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2201      	movs	r2, #1
 800ab74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	3324      	adds	r3, #36	@ 0x24
 800ab94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab96:	220b      	movs	r2, #11
 800ab98:	2120      	movs	r1, #32
 800ab9a:	68b8      	ldr	r0, [r7, #8]
 800ab9c:	f7ff f819 	bl	8009bd2 <mem_set>
	si = i = 0; ni = 8;
 800aba0:	2300      	movs	r3, #0
 800aba2:	613b      	str	r3, [r7, #16]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	2308      	movs	r3, #8
 800abaa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	1c5a      	adds	r2, r3, #1
 800abb0:	61fa      	str	r2, [r7, #28]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800abba:	7efb      	ldrb	r3, [r7, #27]
 800abbc:	2b20      	cmp	r3, #32
 800abbe:	d94e      	bls.n	800ac5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800abc0:	7efb      	ldrb	r3, [r7, #27]
 800abc2:	2b2f      	cmp	r3, #47	@ 0x2f
 800abc4:	d006      	beq.n	800abd4 <create_name+0x54>
 800abc6:	7efb      	ldrb	r3, [r7, #27]
 800abc8:	2b5c      	cmp	r3, #92	@ 0x5c
 800abca:	d110      	bne.n	800abee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800abcc:	e002      	b.n	800abd4 <create_name+0x54>
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	3301      	adds	r3, #1
 800abd2:	61fb      	str	r3, [r7, #28]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b2f      	cmp	r3, #47	@ 0x2f
 800abde:	d0f6      	beq.n	800abce <create_name+0x4e>
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b5c      	cmp	r3, #92	@ 0x5c
 800abea:	d0f0      	beq.n	800abce <create_name+0x4e>
			break;
 800abec:	e038      	b.n	800ac60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800abee:	7efb      	ldrb	r3, [r7, #27]
 800abf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800abf2:	d003      	beq.n	800abfc <create_name+0x7c>
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d30c      	bcc.n	800ac16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2b0b      	cmp	r3, #11
 800ac00:	d002      	beq.n	800ac08 <create_name+0x88>
 800ac02:	7efb      	ldrb	r3, [r7, #27]
 800ac04:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac06:	d001      	beq.n	800ac0c <create_name+0x8c>
 800ac08:	2306      	movs	r3, #6
 800ac0a:	e044      	b.n	800ac96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ac0c:	2308      	movs	r3, #8
 800ac0e:	613b      	str	r3, [r7, #16]
 800ac10:	230b      	movs	r3, #11
 800ac12:	617b      	str	r3, [r7, #20]
			continue;
 800ac14:	e022      	b.n	800ac5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ac16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	da04      	bge.n	800ac28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ac1e:	7efb      	ldrb	r3, [r7, #27]
 800ac20:	3b80      	subs	r3, #128	@ 0x80
 800ac22:	4a1f      	ldr	r2, [pc, #124]	@ (800aca0 <create_name+0x120>)
 800ac24:	5cd3      	ldrb	r3, [r2, r3]
 800ac26:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ac28:	7efb      	ldrb	r3, [r7, #27]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	481d      	ldr	r0, [pc, #116]	@ (800aca4 <create_name+0x124>)
 800ac2e:	f7ff f812 	bl	8009c56 <chk_chr>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <create_name+0xbc>
 800ac38:	2306      	movs	r3, #6
 800ac3a:	e02c      	b.n	800ac96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ac3c:	7efb      	ldrb	r3, [r7, #27]
 800ac3e:	2b60      	cmp	r3, #96	@ 0x60
 800ac40:	d905      	bls.n	800ac4e <create_name+0xce>
 800ac42:	7efb      	ldrb	r3, [r7, #27]
 800ac44:	2b7a      	cmp	r3, #122	@ 0x7a
 800ac46:	d802      	bhi.n	800ac4e <create_name+0xce>
 800ac48:	7efb      	ldrb	r3, [r7, #27]
 800ac4a:	3b20      	subs	r3, #32
 800ac4c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	613a      	str	r2, [r7, #16]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	4413      	add	r3, r2
 800ac58:	7efa      	ldrb	r2, [r7, #27]
 800ac5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac5c:	e7a6      	b.n	800abac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	441a      	add	r2, r3
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <create_name+0xf4>
 800ac70:	2306      	movs	r3, #6
 800ac72:	e010      	b.n	800ac96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2be5      	cmp	r3, #229	@ 0xe5
 800ac7a:	d102      	bne.n	800ac82 <create_name+0x102>
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2205      	movs	r2, #5
 800ac80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac82:	7efb      	ldrb	r3, [r7, #27]
 800ac84:	2b20      	cmp	r3, #32
 800ac86:	d801      	bhi.n	800ac8c <create_name+0x10c>
 800ac88:	2204      	movs	r2, #4
 800ac8a:	e000      	b.n	800ac8e <create_name+0x10e>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	330b      	adds	r3, #11
 800ac92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	0800e510 	.word	0x0800e510
 800aca4:	0800e08c 	.word	0x0800e08c

0800aca8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800acbc:	e002      	b.n	800acc4 <follow_path+0x1c>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	3301      	adds	r3, #1
 800acc2:	603b      	str	r3, [r7, #0]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b2f      	cmp	r3, #47	@ 0x2f
 800acca:	d0f8      	beq.n	800acbe <follow_path+0x16>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b5c      	cmp	r3, #92	@ 0x5c
 800acd2:	d0f4      	beq.n	800acbe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2200      	movs	r2, #0
 800acd8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b1f      	cmp	r3, #31
 800ace0:	d80a      	bhi.n	800acf8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2280      	movs	r2, #128	@ 0x80
 800ace6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800acea:	2100      	movs	r1, #0
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff fcfa 	bl	800a6e6 <dir_sdi>
 800acf2:	4603      	mov	r3, r0
 800acf4:	75fb      	strb	r3, [r7, #23]
 800acf6:	e043      	b.n	800ad80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800acf8:	463b      	mov	r3, r7
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ff3f 	bl	800ab80 <create_name>
 800ad02:	4603      	mov	r3, r0
 800ad04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d134      	bne.n	800ad76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7ff feb0 	bl	800aa72 <dir_find>
 800ad12:	4603      	mov	r3, r0
 800ad14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ad1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	2b04      	cmp	r3, #4
 800ad28:	d127      	bne.n	800ad7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad2a:	7afb      	ldrb	r3, [r7, #11]
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d122      	bne.n	800ad7a <follow_path+0xd2>
 800ad34:	2305      	movs	r3, #5
 800ad36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ad38:	e01f      	b.n	800ad7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad3a:	7afb      	ldrb	r3, [r7, #11]
 800ad3c:	f003 0304 	and.w	r3, r3, #4
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d11c      	bne.n	800ad7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	799b      	ldrb	r3, [r3, #6]
 800ad48:	f003 0310 	and.w	r3, r3, #16
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ad50:	2305      	movs	r3, #5
 800ad52:	75fb      	strb	r3, [r7, #23]
 800ad54:	e014      	b.n	800ad80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad64:	4413      	add	r3, r2
 800ad66:	4619      	mov	r1, r3
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7ff fe43 	bl	800a9f4 <ld_clust>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad74:	e7c0      	b.n	800acf8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ad76:	bf00      	nop
 800ad78:	e002      	b.n	800ad80 <follow_path+0xd8>
				break;
 800ad7a:	bf00      	nop
 800ad7c:	e000      	b.n	800ad80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad7e:	bf00      	nop
			}
		}
	}

	return res;
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b087      	sub	sp, #28
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad92:	f04f 33ff 	mov.w	r3, #4294967295
 800ad96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d031      	beq.n	800ae04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	e002      	b.n	800adae <get_ldnumber+0x24>
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3301      	adds	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d903      	bls.n	800adbe <get_ldnumber+0x34>
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b3a      	cmp	r3, #58	@ 0x3a
 800adbc:	d1f4      	bne.n	800ada8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b3a      	cmp	r3, #58	@ 0x3a
 800adc4:	d11c      	bne.n	800ae00 <get_ldnumber+0x76>
			tp = *path;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	60fa      	str	r2, [r7, #12]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	3b30      	subs	r3, #48	@ 0x30
 800add6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b09      	cmp	r3, #9
 800addc:	d80e      	bhi.n	800adfc <get_ldnumber+0x72>
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d10a      	bne.n	800adfc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d107      	bne.n	800adfc <get_ldnumber+0x72>
					vol = (int)i;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	3301      	adds	r3, #1
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	e002      	b.n	800ae06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae00:	2300      	movs	r3, #0
 800ae02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae04:	693b      	ldr	r3, [r7, #16]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
	...

0800ae14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	70da      	strb	r2, [r3, #3]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff f8dc 	bl	8009fec <move_window>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <check_fs+0x2a>
 800ae3a:	2304      	movs	r3, #4
 800ae3c:	e038      	b.n	800aeb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3330      	adds	r3, #48	@ 0x30
 800ae42:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fe20 	bl	8009a8c <ld_word>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	461a      	mov	r2, r3
 800ae50:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d001      	beq.n	800ae5c <check_fs+0x48>
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e029      	b.n	800aeb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae62:	2be9      	cmp	r3, #233	@ 0xe9
 800ae64:	d009      	beq.n	800ae7a <check_fs+0x66>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae6c:	2beb      	cmp	r3, #235	@ 0xeb
 800ae6e:	d11e      	bne.n	800aeae <check_fs+0x9a>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ae76:	2b90      	cmp	r3, #144	@ 0x90
 800ae78:	d119      	bne.n	800aeae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3330      	adds	r3, #48	@ 0x30
 800ae7e:	3336      	adds	r3, #54	@ 0x36
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fe1b 	bl	8009abc <ld_dword>
 800ae86:	4603      	mov	r3, r0
 800ae88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae8c:	4a0a      	ldr	r2, [pc, #40]	@ (800aeb8 <check_fs+0xa4>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d101      	bne.n	800ae96 <check_fs+0x82>
 800ae92:	2300      	movs	r3, #0
 800ae94:	e00c      	b.n	800aeb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3330      	adds	r3, #48	@ 0x30
 800ae9a:	3352      	adds	r3, #82	@ 0x52
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe fe0d 	bl	8009abc <ld_dword>
 800aea2:	4603      	mov	r3, r0
 800aea4:	4a05      	ldr	r2, [pc, #20]	@ (800aebc <check_fs+0xa8>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d101      	bne.n	800aeae <check_fs+0x9a>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e000      	b.n	800aeb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aeae:	2302      	movs	r3, #2
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	00544146 	.word	0x00544146
 800aebc:	33544146 	.word	0x33544146

0800aec0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b096      	sub	sp, #88	@ 0x58
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7ff ff58 	bl	800ad8a <get_ldnumber>
 800aeda:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aedc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	da01      	bge.n	800aee6 <find_volume+0x26>
 800aee2:	230b      	movs	r3, #11
 800aee4:	e22d      	b.n	800b342 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aee6:	4aa1      	ldr	r2, [pc, #644]	@ (800b16c <find_volume+0x2ac>)
 800aee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <find_volume+0x3a>
 800aef6:	230c      	movs	r3, #12
 800aef8:	e223      	b.n	800b342 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aefe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	f023 0301 	bic.w	r3, r3, #1
 800af06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800af08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d01a      	beq.n	800af46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800af10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af12:	785b      	ldrb	r3, [r3, #1]
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fd19 	bl	800994c <disk_status>
 800af1a:	4603      	mov	r3, r0
 800af1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800af20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10c      	bne.n	800af46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d007      	beq.n	800af42 <find_volume+0x82>
 800af32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af36:	f003 0304 	and.w	r3, r3, #4
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800af3e:	230a      	movs	r3, #10
 800af40:	e1ff      	b.n	800b342 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800af42:	2300      	movs	r3, #0
 800af44:	e1fd      	b.n	800b342 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af48:	2200      	movs	r2, #0
 800af4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af56:	785b      	ldrb	r3, [r3, #1]
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fd11 	bl	8009980 <disk_initialize>
 800af5e:	4603      	mov	r3, r0
 800af60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af70:	2303      	movs	r3, #3
 800af72:	e1e6      	b.n	800b342 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d007      	beq.n	800af8a <find_volume+0xca>
 800af7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af86:	230a      	movs	r3, #10
 800af88:	e1db      	b.n	800b342 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af92:	f7ff ff3f 	bl	800ae14 <check_fs>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d149      	bne.n	800b038 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800afa4:	2300      	movs	r3, #0
 800afa6:	643b      	str	r3, [r7, #64]	@ 0x40
 800afa8:	e01e      	b.n	800afe8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800afaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800afb8:	4413      	add	r3, r2
 800afba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800afbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbe:	3304      	adds	r3, #4
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d006      	beq.n	800afd4 <find_volume+0x114>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc8:	3308      	adds	r3, #8
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fd76 	bl	8009abc <ld_dword>
 800afd0:	4602      	mov	r2, r0
 800afd2:	e000      	b.n	800afd6 <find_volume+0x116>
 800afd4:	2200      	movs	r2, #0
 800afd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	3358      	adds	r3, #88	@ 0x58
 800afdc:	443b      	add	r3, r7
 800afde:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800afe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afe4:	3301      	adds	r3, #1
 800afe6:	643b      	str	r3, [r7, #64]	@ 0x40
 800afe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afea:	2b03      	cmp	r3, #3
 800afec:	d9dd      	bls.n	800afaa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800afee:	2300      	movs	r3, #0
 800aff0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800aff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <find_volume+0x13e>
 800aff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800affa:	3b01      	subs	r3, #1
 800affc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800affe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	3358      	adds	r3, #88	@ 0x58
 800b004:	443b      	add	r3, r7
 800b006:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b00a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b00c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <find_volume+0x15e>
 800b012:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b014:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b016:	f7ff fefd 	bl	800ae14 <check_fs>
 800b01a:	4603      	mov	r3, r0
 800b01c:	e000      	b.n	800b020 <find_volume+0x160>
 800b01e:	2303      	movs	r3, #3
 800b020:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b024:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d905      	bls.n	800b038 <find_volume+0x178>
 800b02c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b02e:	3301      	adds	r3, #1
 800b030:	643b      	str	r3, [r7, #64]	@ 0x40
 800b032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b034:	2b03      	cmp	r3, #3
 800b036:	d9e2      	bls.n	800affe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b038:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d101      	bne.n	800b044 <find_volume+0x184>
 800b040:	2301      	movs	r3, #1
 800b042:	e17e      	b.n	800b342 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b044:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d901      	bls.n	800b050 <find_volume+0x190>
 800b04c:	230d      	movs	r3, #13
 800b04e:	e178      	b.n	800b342 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b052:	3330      	adds	r3, #48	@ 0x30
 800b054:	330b      	adds	r3, #11
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fd18 	bl	8009a8c <ld_word>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b062:	d001      	beq.n	800b068 <find_volume+0x1a8>
 800b064:	230d      	movs	r3, #13
 800b066:	e16c      	b.n	800b342 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	3330      	adds	r3, #48	@ 0x30
 800b06c:	3316      	adds	r3, #22
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fd0c 	bl	8009a8c <ld_word>
 800b074:	4603      	mov	r3, r0
 800b076:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d106      	bne.n	800b08c <find_volume+0x1cc>
 800b07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b080:	3330      	adds	r3, #48	@ 0x30
 800b082:	3324      	adds	r3, #36	@ 0x24
 800b084:	4618      	mov	r0, r3
 800b086:	f7fe fd19 	bl	8009abc <ld_dword>
 800b08a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b090:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b094:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09e:	789b      	ldrb	r3, [r3, #2]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d005      	beq.n	800b0b0 <find_volume+0x1f0>
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a6:	789b      	ldrb	r3, [r3, #2]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d001      	beq.n	800b0b0 <find_volume+0x1f0>
 800b0ac:	230d      	movs	r3, #13
 800b0ae:	e148      	b.n	800b342 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b2:	789b      	ldrb	r3, [r3, #2]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b8:	fb02 f303 	mul.w	r3, r2, r3
 800b0bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0cc:	895b      	ldrh	r3, [r3, #10]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <find_volume+0x224>
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d4:	895b      	ldrh	r3, [r3, #10]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0da:	895b      	ldrh	r3, [r3, #10]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	4013      	ands	r3, r2
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <find_volume+0x228>
 800b0e4:	230d      	movs	r3, #13
 800b0e6:	e12c      	b.n	800b342 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ea:	3330      	adds	r3, #48	@ 0x30
 800b0ec:	3311      	adds	r3, #17
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fccc 	bl	8009a8c <ld_word>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fe:	891b      	ldrh	r3, [r3, #8]
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	b29b      	uxth	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <find_volume+0x24e>
 800b10a:	230d      	movs	r3, #13
 800b10c:	e119      	b.n	800b342 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	3330      	adds	r3, #48	@ 0x30
 800b112:	3313      	adds	r3, #19
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe fcb9 	bl	8009a8c <ld_word>
 800b11a:	4603      	mov	r3, r0
 800b11c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <find_volume+0x272>
 800b124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b126:	3330      	adds	r3, #48	@ 0x30
 800b128:	3320      	adds	r3, #32
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fe fcc6 	bl	8009abc <ld_dword>
 800b130:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b134:	3330      	adds	r3, #48	@ 0x30
 800b136:	330e      	adds	r3, #14
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe fca7 	bl	8009a8c <ld_word>
 800b13e:	4603      	mov	r3, r0
 800b140:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b142:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <find_volume+0x28c>
 800b148:	230d      	movs	r3, #13
 800b14a:	e0fa      	b.n	800b342 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b14c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b14e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b150:	4413      	add	r3, r2
 800b152:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b154:	8912      	ldrh	r2, [r2, #8]
 800b156:	0912      	lsrs	r2, r2, #4
 800b158:	b292      	uxth	r2, r2
 800b15a:	4413      	add	r3, r2
 800b15c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b15e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b162:	429a      	cmp	r2, r3
 800b164:	d204      	bcs.n	800b170 <find_volume+0x2b0>
 800b166:	230d      	movs	r3, #13
 800b168:	e0eb      	b.n	800b342 <find_volume+0x482>
 800b16a:	bf00      	nop
 800b16c:	2000087c 	.word	0x2000087c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b178:	8952      	ldrh	r2, [r2, #10]
 800b17a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b17e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <find_volume+0x2ca>
 800b186:	230d      	movs	r3, #13
 800b188:	e0db      	b.n	800b342 <find_volume+0x482>
		fmt = FS_FAT32;
 800b18a:	2303      	movs	r3, #3
 800b18c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b192:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b196:	4293      	cmp	r3, r2
 800b198:	d802      	bhi.n	800b1a0 <find_volume+0x2e0>
 800b19a:	2302      	movs	r3, #2
 800b19c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d802      	bhi.n	800b1b0 <find_volume+0x2f0>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	1c9a      	adds	r2, r3, #2
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1bc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b1be:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b1c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1c2:	441a      	add	r2, r3
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b1c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1cc:	441a      	add	r2, r3
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b1d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d11e      	bne.n	800b218 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1dc:	3330      	adds	r3, #48	@ 0x30
 800b1de:	332a      	adds	r3, #42	@ 0x2a
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fe fc53 	bl	8009a8c <ld_word>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <find_volume+0x330>
 800b1ec:	230d      	movs	r3, #13
 800b1ee:	e0a8      	b.n	800b342 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f2:	891b      	ldrh	r3, [r3, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <find_volume+0x33c>
 800b1f8:	230d      	movs	r3, #13
 800b1fa:	e0a2      	b.n	800b342 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	3330      	adds	r3, #48	@ 0x30
 800b200:	332c      	adds	r3, #44	@ 0x2c
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fc5a 	bl	8009abc <ld_dword>
 800b208:	4602      	mov	r2, r0
 800b20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	647b      	str	r3, [r7, #68]	@ 0x44
 800b216:	e01f      	b.n	800b258 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21a:	891b      	ldrh	r3, [r3, #8]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <find_volume+0x364>
 800b220:	230d      	movs	r3, #13
 800b222:	e08e      	b.n	800b342 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b226:	6a1a      	ldr	r2, [r3, #32]
 800b228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b22a:	441a      	add	r2, r3
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b234:	2b02      	cmp	r3, #2
 800b236:	d103      	bne.n	800b240 <find_volume+0x380>
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	e00a      	b.n	800b256 <find_volume+0x396>
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	695a      	ldr	r2, [r3, #20]
 800b244:	4613      	mov	r3, r2
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	4413      	add	r3, r2
 800b24a:	085a      	lsrs	r2, r3, #1
 800b24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b256:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	699a      	ldr	r2, [r3, #24]
 800b25c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b25e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b262:	0a5b      	lsrs	r3, r3, #9
 800b264:	429a      	cmp	r2, r3
 800b266:	d201      	bcs.n	800b26c <find_volume+0x3ac>
 800b268:	230d      	movs	r3, #13
 800b26a:	e06a      	b.n	800b342 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26e:	f04f 32ff 	mov.w	r2, #4294967295
 800b272:	611a      	str	r2, [r3, #16]
 800b274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b276:	691a      	ldr	r2, [r3, #16]
 800b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	2280      	movs	r2, #128	@ 0x80
 800b280:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b282:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b286:	2b03      	cmp	r3, #3
 800b288:	d149      	bne.n	800b31e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28c:	3330      	adds	r3, #48	@ 0x30
 800b28e:	3330      	adds	r3, #48	@ 0x30
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fbfb 	bl	8009a8c <ld_word>
 800b296:	4603      	mov	r3, r0
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d140      	bne.n	800b31e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b29c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b29e:	3301      	adds	r3, #1
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2a4:	f7fe fea2 	bl	8009fec <move_window>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d137      	bne.n	800b31e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b6:	3330      	adds	r3, #48	@ 0x30
 800b2b8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fe fbe5 	bl	8009a8c <ld_word>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d127      	bne.n	800b31e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d0:	3330      	adds	r3, #48	@ 0x30
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe fbf2 	bl	8009abc <ld_dword>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	4a1c      	ldr	r2, [pc, #112]	@ (800b34c <find_volume+0x48c>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d11e      	bne.n	800b31e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e2:	3330      	adds	r3, #48	@ 0x30
 800b2e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fbe7 	bl	8009abc <ld_dword>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	4a17      	ldr	r2, [pc, #92]	@ (800b350 <find_volume+0x490>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d113      	bne.n	800b31e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f8:	3330      	adds	r3, #48	@ 0x30
 800b2fa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fbdc 	bl	8009abc <ld_dword>
 800b304:	4602      	mov	r2, r0
 800b306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b308:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30c:	3330      	adds	r3, #48	@ 0x30
 800b30e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fbd2 	bl	8009abc <ld_dword>
 800b318:	4602      	mov	r2, r0
 800b31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b324:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b326:	4b0b      	ldr	r3, [pc, #44]	@ (800b354 <find_volume+0x494>)
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	3301      	adds	r3, #1
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <find_volume+0x494>)
 800b330:	801a      	strh	r2, [r3, #0]
 800b332:	4b08      	ldr	r3, [pc, #32]	@ (800b354 <find_volume+0x494>)
 800b334:	881a      	ldrh	r2, [r3, #0]
 800b336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b338:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b33a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b33c:	f7fe fdee 	bl	8009f1c <clear_lock>
#endif
	return FR_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3758      	adds	r7, #88	@ 0x58
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	41615252 	.word	0x41615252
 800b350:	61417272 	.word	0x61417272
 800b354:	20000880 	.word	0x20000880

0800b358 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b362:	2309      	movs	r3, #9
 800b364:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d01c      	beq.n	800b3a6 <validate+0x4e>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d018      	beq.n	800b3a6 <validate+0x4e>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d013      	beq.n	800b3a6 <validate+0x4e>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	889a      	ldrh	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	88db      	ldrh	r3, [r3, #6]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d10c      	bne.n	800b3a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	785b      	ldrb	r3, [r3, #1]
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fada 	bl	800994c <disk_status>
 800b398:	4603      	mov	r3, r0
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <validate+0x4e>
			res = FR_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <validate+0x5a>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	e000      	b.n	800b3b4 <validate+0x5c>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	6013      	str	r3, [r2, #0]
	return res;
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b088      	sub	sp, #32
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b3d6:	f107 0310 	add.w	r3, r7, #16
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff fcd5 	bl	800ad8a <get_ldnumber>
 800b3e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	da01      	bge.n	800b3ec <f_mount+0x28>
 800b3e8:	230b      	movs	r3, #11
 800b3ea:	e02b      	b.n	800b444 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b3ec:	4a17      	ldr	r2, [pc, #92]	@ (800b44c <f_mount+0x88>)
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d005      	beq.n	800b408 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3fc:	69b8      	ldr	r0, [r7, #24]
 800b3fe:	f7fe fd8d 	bl	8009f1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	490d      	ldr	r1, [pc, #52]	@ (800b44c <f_mount+0x88>)
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <f_mount+0x66>
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d001      	beq.n	800b42e <f_mount+0x6a>
 800b42a:	2300      	movs	r3, #0
 800b42c:	e00a      	b.n	800b444 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b42e:	f107 010c 	add.w	r1, r7, #12
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	2200      	movs	r2, #0
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff fd41 	bl	800aec0 <find_volume>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b442:	7dfb      	ldrb	r3, [r7, #23]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3720      	adds	r7, #32
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	2000087c 	.word	0x2000087c

0800b450 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b098      	sub	sp, #96	@ 0x60
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	4613      	mov	r3, r2
 800b45c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <f_open+0x18>
 800b464:	2309      	movs	r3, #9
 800b466:	e1a9      	b.n	800b7bc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b46e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b470:	79fa      	ldrb	r2, [r7, #7]
 800b472:	f107 0110 	add.w	r1, r7, #16
 800b476:	f107 0308 	add.w	r3, r7, #8
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7ff fd20 	bl	800aec0 <find_volume>
 800b480:	4603      	mov	r3, r0
 800b482:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b486:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f040 818d 	bne.w	800b7aa <f_open+0x35a>
		dj.obj.fs = fs;
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	f107 0314 	add.w	r3, r7, #20
 800b49a:	4611      	mov	r1, r2
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7ff fc03 	bl	800aca8 <follow_path>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b4a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d118      	bne.n	800b4e2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b4b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4b4:	b25b      	sxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	da03      	bge.n	800b4c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b4ba:	2306      	movs	r3, #6
 800b4bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b4c0:	e00f      	b.n	800b4e2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	bf8c      	ite	hi
 800b4c8:	2301      	movhi	r3, #1
 800b4ca:	2300      	movls	r3, #0
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f107 0314 	add.w	r3, r7, #20
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fe fbd8 	bl	8009c8c <chk_lock>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4e2:	79fb      	ldrb	r3, [r7, #7]
 800b4e4:	f003 031c 	and.w	r3, r3, #28
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d07f      	beq.n	800b5ec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b4ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d017      	beq.n	800b524 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d10e      	bne.n	800b51a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4fc:	f7fe fc22 	bl	8009d44 <enq_lock>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d006      	beq.n	800b514 <f_open+0xc4>
 800b506:	f107 0314 	add.w	r3, r7, #20
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff fb06 	bl	800ab1c <dir_register>
 800b510:	4603      	mov	r3, r0
 800b512:	e000      	b.n	800b516 <f_open+0xc6>
 800b514:	2312      	movs	r3, #18
 800b516:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	f043 0308 	orr.w	r3, r3, #8
 800b520:	71fb      	strb	r3, [r7, #7]
 800b522:	e010      	b.n	800b546 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b524:	7ebb      	ldrb	r3, [r7, #26]
 800b526:	f003 0311 	and.w	r3, r3, #17
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <f_open+0xe6>
					res = FR_DENIED;
 800b52e:	2307      	movs	r3, #7
 800b530:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b534:	e007      	b.n	800b546 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <f_open+0xf6>
 800b540:	2308      	movs	r3, #8
 800b542:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b546:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d168      	bne.n	800b620 <f_open+0x1d0>
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	f003 0308 	and.w	r3, r3, #8
 800b554:	2b00      	cmp	r3, #0
 800b556:	d063      	beq.n	800b620 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b558:	f7fe f88c 	bl	8009674 <get_fattime>
 800b55c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b560:	330e      	adds	r3, #14
 800b562:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b564:	4618      	mov	r0, r3
 800b566:	f7fe fae7 	bl	8009b38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56c:	3316      	adds	r3, #22
 800b56e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe fae1 	bl	8009b38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b578:	330b      	adds	r3, #11
 800b57a:	2220      	movs	r2, #32
 800b57c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b582:	4611      	mov	r1, r2
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fa35 	bl	800a9f4 <ld_clust>
 800b58a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b590:	2200      	movs	r2, #0
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff fa4d 	bl	800aa32 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b59a:	331c      	adds	r3, #28
 800b59c:	2100      	movs	r1, #0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe faca 	bl	8009b38 <st_dword>
					fs->wflag = 1;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d037      	beq.n	800b620 <f_open+0x1d0>
						dw = fs->winsect;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b5b6:	f107 0314 	add.w	r3, r7, #20
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe ff60 	bl	800a484 <remove_chain>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d126      	bne.n	800b620 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fd08 	bl	8009fec <move_window>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5e6:	3a01      	subs	r2, #1
 800b5e8:	60da      	str	r2, [r3, #12]
 800b5ea:	e019      	b.n	800b620 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d115      	bne.n	800b620 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5f4:	7ebb      	ldrb	r3, [r7, #26]
 800b5f6:	f003 0310 	and.w	r3, r3, #16
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b5fe:	2304      	movs	r3, #4
 800b600:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b604:	e00c      	b.n	800b620 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d007      	beq.n	800b620 <f_open+0x1d0>
 800b610:	7ebb      	ldrb	r3, [r7, #26]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b00      	cmp	r3, #0
 800b618:	d002      	beq.n	800b620 <f_open+0x1d0>
						res = FR_DENIED;
 800b61a:	2307      	movs	r3, #7
 800b61c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b620:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b624:	2b00      	cmp	r3, #0
 800b626:	d126      	bne.n	800b676 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	f003 0308 	and.w	r3, r3, #8
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b638:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b648:	79fb      	ldrb	r3, [r7, #7]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	bf8c      	ite	hi
 800b64e:	2301      	movhi	r3, #1
 800b650:	2300      	movls	r3, #0
 800b652:	b2db      	uxtb	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	f107 0314 	add.w	r3, r7, #20
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fb93 	bl	8009d88 <inc_lock>
 800b662:	4602      	mov	r2, r0
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <f_open+0x226>
 800b670:	2302      	movs	r3, #2
 800b672:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b676:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 8095 	bne.w	800b7aa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff f9b4 	bl	800a9f4 <ld_clust>
 800b68c:	4602      	mov	r2, r0
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b694:	331c      	adds	r3, #28
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe fa10 	bl	8009abc <ld_dword>
 800b69c:	4602      	mov	r2, r0
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	88da      	ldrh	r2, [r3, #6]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	79fa      	ldrb	r2, [r7, #7]
 800b6ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3330      	adds	r3, #48	@ 0x30
 800b6d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe fa7a 	bl	8009bd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	f003 0320 	and.w	r3, r3, #32
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d060      	beq.n	800b7aa <f_open+0x35a>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d05c      	beq.n	800b7aa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	895b      	ldrh	r3, [r3, #10]
 800b6fc:	025b      	lsls	r3, r3, #9
 800b6fe:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b70c:	e016      	b.n	800b73c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fd25 	bl	800a162 <get_fat>
 800b718:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b71a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d802      	bhi.n	800b726 <f_open+0x2d6>
 800b720:	2302      	movs	r3, #2
 800b722:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72c:	d102      	bne.n	800b734 <f_open+0x2e4>
 800b72e:	2301      	movs	r3, #1
 800b730:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b734:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b73c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <f_open+0x2fc>
 800b744:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b748:	429a      	cmp	r2, r3
 800b74a:	d8e0      	bhi.n	800b70e <f_open+0x2be>
				}
				fp->clust = clst;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b750:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b752:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b756:	2b00      	cmp	r3, #0
 800b758:	d127      	bne.n	800b7aa <f_open+0x35a>
 800b75a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b760:	2b00      	cmp	r3, #0
 800b762:	d022      	beq.n	800b7aa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe fcdb 	bl	800a124 <clust2sect>
 800b76e:	6478      	str	r0, [r7, #68]	@ 0x44
 800b770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b772:	2b00      	cmp	r3, #0
 800b774:	d103      	bne.n	800b77e <f_open+0x32e>
						res = FR_INT_ERR;
 800b776:	2302      	movs	r3, #2
 800b778:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b77c:	e015      	b.n	800b7aa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b780:	0a5a      	lsrs	r2, r3, #9
 800b782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b784:	441a      	add	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	7858      	ldrb	r0, [r3, #1]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a1a      	ldr	r2, [r3, #32]
 800b798:	2301      	movs	r3, #1
 800b79a:	f7fe f919 	bl	80099d0 <disk_read>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <f_open+0x35a>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <f_open+0x368>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b7b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3760      	adds	r7, #96	@ 0x60
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08e      	sub	sp, #56	@ 0x38
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f107 0214 	add.w	r2, r7, #20
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff fdb7 	bl	800b358 <validate>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d107      	bne.n	800b808 <f_read+0x44>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	7d5b      	ldrb	r3, [r3, #21]
 800b7fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b800:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b804:	2b00      	cmp	r3, #0
 800b806:	d002      	beq.n	800b80e <f_read+0x4a>
 800b808:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b80c:	e115      	b.n	800ba3a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	7d1b      	ldrb	r3, [r3, #20]
 800b812:	f003 0301 	and.w	r3, r3, #1
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <f_read+0x5a>
 800b81a:	2307      	movs	r3, #7
 800b81c:	e10d      	b.n	800ba3a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	429a      	cmp	r2, r3
 800b830:	f240 80fe 	bls.w	800ba30 <f_read+0x26c>
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b838:	e0fa      	b.n	800ba30 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b842:	2b00      	cmp	r3, #0
 800b844:	f040 80c6 	bne.w	800b9d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	0a5b      	lsrs	r3, r3, #9
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	8952      	ldrh	r2, [r2, #10]
 800b852:	3a01      	subs	r2, #1
 800b854:	4013      	ands	r3, r2
 800b856:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d12f      	bne.n	800b8be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d103      	bne.n	800b86e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b86c:	e013      	b.n	800b896 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b872:	2b00      	cmp	r3, #0
 800b874:	d007      	beq.n	800b886 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	4619      	mov	r1, r3
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f7fe fefe 	bl	800a67e <clmt_clust>
 800b882:	6338      	str	r0, [r7, #48]	@ 0x30
 800b884:	e007      	b.n	800b896 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f7fe fc67 	bl	800a162 <get_fat>
 800b894:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d804      	bhi.n	800b8a6 <f_read+0xe2>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	755a      	strb	r2, [r3, #21]
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	e0c9      	b.n	800ba3a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ac:	d104      	bne.n	800b8b8 <f_read+0xf4>
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	755a      	strb	r2, [r3, #21]
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e0c0      	b.n	800ba3a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	69db      	ldr	r3, [r3, #28]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	f7fe fc2c 	bl	800a124 <clust2sect>
 800b8cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d104      	bne.n	800b8de <f_read+0x11a>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	755a      	strb	r2, [r3, #21]
 800b8da:	2302      	movs	r3, #2
 800b8dc:	e0ad      	b.n	800ba3a <f_read+0x276>
			sect += csect;
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	0a5b      	lsrs	r3, r3, #9
 800b8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d039      	beq.n	800b966 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f6:	4413      	add	r3, r2
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	8952      	ldrh	r2, [r2, #10]
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d905      	bls.n	800b90c <f_read+0x148>
					cc = fs->csize - csect;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	895b      	ldrh	r3, [r3, #10]
 800b904:	461a      	mov	r2, r3
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	7858      	ldrb	r0, [r3, #1]
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b916:	f7fe f85b 	bl	80099d0 <disk_read>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <f_read+0x166>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2201      	movs	r2, #1
 800b924:	755a      	strb	r2, [r3, #21]
 800b926:	2301      	movs	r3, #1
 800b928:	e087      	b.n	800ba3a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	7d1b      	ldrb	r3, [r3, #20]
 800b92e:	b25b      	sxtb	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	da14      	bge.n	800b95e <f_read+0x19a>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6a1a      	ldr	r2, [r3, #32]
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b93e:	429a      	cmp	r2, r3
 800b940:	d90d      	bls.n	800b95e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6a1a      	ldr	r2, [r3, #32]
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	025b      	lsls	r3, r3, #9
 800b94c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b94e:	18d0      	adds	r0, r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3330      	adds	r3, #48	@ 0x30
 800b954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b958:	4619      	mov	r1, r3
 800b95a:	f7fe f919 	bl	8009b90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b960:	025b      	lsls	r3, r3, #9
 800b962:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b964:	e050      	b.n	800ba08 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d02e      	beq.n	800b9ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	7d1b      	ldrb	r3, [r3, #20]
 800b974:	b25b      	sxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	da18      	bge.n	800b9ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	7858      	ldrb	r0, [r3, #1]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6a1a      	ldr	r2, [r3, #32]
 800b988:	2301      	movs	r3, #1
 800b98a:	f7fe f841 	bl	8009a10 <disk_write>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d004      	beq.n	800b99e <f_read+0x1da>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2201      	movs	r2, #1
 800b998:	755a      	strb	r2, [r3, #21]
 800b99a:	2301      	movs	r3, #1
 800b99c:	e04d      	b.n	800ba3a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	7d1b      	ldrb	r3, [r3, #20]
 800b9a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	7858      	ldrb	r0, [r3, #1]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	f7fe f809 	bl	80099d0 <disk_read>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <f_read+0x20a>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	755a      	strb	r2, [r3, #21]
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e035      	b.n	800ba3a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	69ba      	ldr	r2, [r7, #24]
 800b9d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9dc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b9e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d901      	bls.n	800b9ee <f_read+0x22a>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fc:	4413      	add	r3, r2
 800b9fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba00:	4619      	mov	r1, r3
 800ba02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba04:	f7fe f8c4 	bl	8009b90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ba08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0c:	4413      	add	r3, r2
 800ba0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	699a      	ldr	r2, [r3, #24]
 800ba14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba16:	441a      	add	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	619a      	str	r2, [r3, #24]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba22:	441a      	add	r2, r3
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f47f af01 	bne.w	800b83a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3738      	adds	r7, #56	@ 0x38
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b08c      	sub	sp, #48	@ 0x30
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	60b9      	str	r1, [r7, #8]
 800ba4c:	607a      	str	r2, [r7, #4]
 800ba4e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f107 0210 	add.w	r2, r7, #16
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff fc78 	bl	800b358 <validate>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ba6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d107      	bne.n	800ba86 <f_write+0x44>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	7d5b      	ldrb	r3, [r3, #21]
 800ba7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ba7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <f_write+0x4a>
 800ba86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba8a:	e14b      	b.n	800bd24 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	7d1b      	ldrb	r3, [r3, #20]
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <f_write+0x5a>
 800ba98:	2307      	movs	r3, #7
 800ba9a:	e143      	b.n	800bd24 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	699a      	ldr	r2, [r3, #24]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	441a      	add	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	699b      	ldr	r3, [r3, #24]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	f080 812d 	bcs.w	800bd08 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	43db      	mvns	r3, r3
 800bab4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bab6:	e127      	b.n	800bd08 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f040 80e3 	bne.w	800bc8c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	0a5b      	lsrs	r3, r3, #9
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	8952      	ldrh	r2, [r2, #10]
 800bad0:	3a01      	subs	r2, #1
 800bad2:	4013      	ands	r3, r2
 800bad4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d143      	bne.n	800bb64 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10c      	bne.n	800bafe <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800baea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baec:	2b00      	cmp	r3, #0
 800baee:	d11a      	bne.n	800bb26 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2100      	movs	r1, #0
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fd2a 	bl	800a54e <create_chain>
 800bafa:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bafc:	e013      	b.n	800bb26 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d007      	beq.n	800bb16 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f7fe fdb6 	bl	800a67e <clmt_clust>
 800bb12:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bb14:	e007      	b.n	800bb26 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7fe fd15 	bl	800a54e <create_chain>
 800bb24:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 80f2 	beq.w	800bd12 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d104      	bne.n	800bb3e <f_write+0xfc>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2202      	movs	r2, #2
 800bb38:	755a      	strb	r2, [r3, #21]
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	e0f2      	b.n	800bd24 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb44:	d104      	bne.n	800bb50 <f_write+0x10e>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	755a      	strb	r2, [r3, #21]
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e0e9      	b.n	800bd24 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb54:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d102      	bne.n	800bb64 <f_write+0x122>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb62:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	7d1b      	ldrb	r3, [r3, #20]
 800bb68:	b25b      	sxtb	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	da18      	bge.n	800bba0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	7858      	ldrb	r0, [r3, #1]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6a1a      	ldr	r2, [r3, #32]
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	f7fd ff47 	bl	8009a10 <disk_write>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d004      	beq.n	800bb92 <f_write+0x150>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	755a      	strb	r2, [r3, #21]
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e0c8      	b.n	800bd24 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	7d1b      	ldrb	r3, [r3, #20]
 800bb96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	4619      	mov	r1, r3
 800bba8:	4610      	mov	r0, r2
 800bbaa:	f7fe fabb 	bl	800a124 <clust2sect>
 800bbae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d104      	bne.n	800bbc0 <f_write+0x17e>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2202      	movs	r2, #2
 800bbba:	755a      	strb	r2, [r3, #21]
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	e0b1      	b.n	800bd24 <f_write+0x2e2>
			sect += csect;
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	0a5b      	lsrs	r3, r3, #9
 800bbcc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d03c      	beq.n	800bc4e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	4413      	add	r3, r2
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	8952      	ldrh	r2, [r2, #10]
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d905      	bls.n	800bbee <f_write+0x1ac>
					cc = fs->csize - csect;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	895b      	ldrh	r3, [r3, #10]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	7858      	ldrb	r0, [r3, #1]
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	69f9      	ldr	r1, [r7, #28]
 800bbf8:	f7fd ff0a 	bl	8009a10 <disk_write>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d004      	beq.n	800bc0c <f_write+0x1ca>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2201      	movs	r2, #1
 800bc06:	755a      	strb	r2, [r3, #21]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e08b      	b.n	800bd24 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6a1a      	ldr	r2, [r3, #32]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	6a3a      	ldr	r2, [r7, #32]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d915      	bls.n	800bc46 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6a1a      	ldr	r2, [r3, #32]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	025b      	lsls	r3, r3, #9
 800bc2a:	69fa      	ldr	r2, [r7, #28]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc32:	4619      	mov	r1, r3
 800bc34:	f7fd ffac 	bl	8009b90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	7d1b      	ldrb	r3, [r3, #20]
 800bc3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	025b      	lsls	r3, r3, #9
 800bc4a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bc4c:	e03f      	b.n	800bcce <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d016      	beq.n	800bc86 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	699a      	ldr	r2, [r3, #24]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d210      	bcs.n	800bc86 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	7858      	ldrb	r0, [r3, #1]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc6e:	2301      	movs	r3, #1
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	f7fd fead 	bl	80099d0 <disk_read>
 800bc76:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d004      	beq.n	800bc86 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	755a      	strb	r2, [r3, #21]
 800bc82:	2301      	movs	r3, #1
 800bc84:	e04e      	b.n	800bd24 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc94:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bc98:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bc9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d901      	bls.n	800bca6 <f_write+0x264>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb4:	4413      	add	r3, r2
 800bcb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcb8:	69f9      	ldr	r1, [r7, #28]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fd ff68 	bl	8009b90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	7d1b      	ldrb	r3, [r3, #20]
 800bcc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd2:	4413      	add	r3, r2
 800bcd4:	61fb      	str	r3, [r7, #28]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	699a      	ldr	r2, [r3, #24]
 800bcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcdc:	441a      	add	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	619a      	str	r2, [r3, #24]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	68da      	ldr	r2, [r3, #12]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	bf38      	it	cc
 800bcee:	461a      	movcc	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	60da      	str	r2, [r3, #12]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfa:	441a      	add	r2, r3
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	601a      	str	r2, [r3, #0]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	1ad3      	subs	r3, r2, r3
 800bd06:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f47f aed4 	bne.w	800bab8 <f_write+0x76>
 800bd10:	e000      	b.n	800bd14 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd12:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	7d1b      	ldrb	r3, [r3, #20]
 800bd18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3730      	adds	r7, #48	@ 0x30
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f107 0208 	add.w	r2, r7, #8
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff fb0b 	bl	800b358 <validate>
 800bd42:	4603      	mov	r3, r0
 800bd44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d168      	bne.n	800be1e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	7d1b      	ldrb	r3, [r3, #20]
 800bd50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d062      	beq.n	800be1e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	7d1b      	ldrb	r3, [r3, #20]
 800bd5c:	b25b      	sxtb	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	da15      	bge.n	800bd8e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	7858      	ldrb	r0, [r3, #1]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1a      	ldr	r2, [r3, #32]
 800bd70:	2301      	movs	r3, #1
 800bd72:	f7fd fe4d 	bl	8009a10 <disk_write>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <f_sync+0x54>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e04f      	b.n	800be20 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	7d1b      	ldrb	r3, [r3, #20]
 800bd84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bd8e:	f7fd fc71 	bl	8009674 <get_fattime>
 800bd92:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	f7fe f925 	bl	8009fec <move_window>
 800bda2:	4603      	mov	r3, r0
 800bda4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d138      	bne.n	800be1e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	330b      	adds	r3, #11
 800bdb6:	781a      	ldrb	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	330b      	adds	r3, #11
 800bdbc:	f042 0220 	orr.w	r2, r2, #32
 800bdc0:	b2d2      	uxtb	r2, r2
 800bdc2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	f7fe fe2f 	bl	800aa32 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f103 021c 	add.w	r2, r3, #28
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7fd fea9 	bl	8009b38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	3316      	adds	r3, #22
 800bdea:	6939      	ldr	r1, [r7, #16]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fd fea3 	bl	8009b38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3312      	adds	r3, #18
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fd fe82 	bl	8009b02 <st_word>
					fs->wflag = 1;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2201      	movs	r2, #1
 800be02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	4618      	mov	r0, r3
 800be08:	f7fe f91e 	bl	800a048 <sync_fs>
 800be0c:	4603      	mov	r3, r0
 800be0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	7d1b      	ldrb	r3, [r3, #20]
 800be14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff ff7b 	bl	800bd2c <f_sync>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d118      	bne.n	800be72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f107 0208 	add.w	r2, r7, #8
 800be46:	4611      	mov	r1, r2
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff fa85 	bl	800b358 <validate>
 800be4e:	4603      	mov	r3, r0
 800be50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10c      	bne.n	800be72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fe f821 	bl	8009ea4 <dec_lock>
 800be62:	4603      	mov	r3, r0
 800be64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d102      	bne.n	800be72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800be72:	7bfb      	ldrb	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be8a:	2301      	movs	r3, #1
 800be8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be92:	4b1f      	ldr	r3, [pc, #124]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800be94:	7a5b      	ldrb	r3, [r3, #9]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d131      	bne.n	800bf00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be9c:	4b1c      	ldr	r3, [pc, #112]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800be9e:	7a5b      	ldrb	r3, [r3, #9]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	461a      	mov	r2, r3
 800bea4:	4b1a      	ldr	r3, [pc, #104]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800bea6:	2100      	movs	r1, #0
 800bea8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800beaa:	4b19      	ldr	r3, [pc, #100]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800beac:	7a5b      	ldrb	r3, [r3, #9]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	4a17      	ldr	r2, [pc, #92]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800beba:	4b15      	ldr	r3, [pc, #84]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800bebc:	7a5b      	ldrb	r3, [r3, #9]
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	461a      	mov	r2, r3
 800bec2:	4b13      	ldr	r3, [pc, #76]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800bec4:	4413      	add	r3, r2
 800bec6:	79fa      	ldrb	r2, [r7, #7]
 800bec8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800beca:	4b11      	ldr	r3, [pc, #68]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800becc:	7a5b      	ldrb	r3, [r3, #9]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	b2d1      	uxtb	r1, r2
 800bed4:	4a0e      	ldr	r2, [pc, #56]	@ (800bf10 <FATFS_LinkDriverEx+0x94>)
 800bed6:	7251      	strb	r1, [r2, #9]
 800bed8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800beda:	7dbb      	ldrb	r3, [r7, #22]
 800bedc:	3330      	adds	r3, #48	@ 0x30
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	3301      	adds	r3, #1
 800bee8:	223a      	movs	r2, #58	@ 0x3a
 800beea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	3302      	adds	r3, #2
 800bef0:	222f      	movs	r2, #47	@ 0x2f
 800bef2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	3303      	adds	r3, #3
 800bef8:	2200      	movs	r2, #0
 800befa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	200008a4 	.word	0x200008a4

0800bf14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf1e:	2200      	movs	r2, #0
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff ffaa 	bl	800be7c <FATFS_LinkDriverEx>
 800bf28:	4603      	mov	r3, r0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <atoi>:
 800bf32:	220a      	movs	r2, #10
 800bf34:	2100      	movs	r1, #0
 800bf36:	f000 b87d 	b.w	800c034 <strtol>
	...

0800bf3c <_strtol_l.constprop.0>:
 800bf3c:	2b24      	cmp	r3, #36	@ 0x24
 800bf3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf42:	4686      	mov	lr, r0
 800bf44:	4690      	mov	r8, r2
 800bf46:	d801      	bhi.n	800bf4c <_strtol_l.constprop.0+0x10>
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d106      	bne.n	800bf5a <_strtol_l.constprop.0+0x1e>
 800bf4c:	f000 f92a 	bl	800c1a4 <__errno>
 800bf50:	2316      	movs	r3, #22
 800bf52:	6003      	str	r3, [r0, #0]
 800bf54:	2000      	movs	r0, #0
 800bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5a:	4834      	ldr	r0, [pc, #208]	@ (800c02c <_strtol_l.constprop.0+0xf0>)
 800bf5c:	460d      	mov	r5, r1
 800bf5e:	462a      	mov	r2, r5
 800bf60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf64:	5d06      	ldrb	r6, [r0, r4]
 800bf66:	f016 0608 	ands.w	r6, r6, #8
 800bf6a:	d1f8      	bne.n	800bf5e <_strtol_l.constprop.0+0x22>
 800bf6c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf6e:	d12d      	bne.n	800bfcc <_strtol_l.constprop.0+0x90>
 800bf70:	782c      	ldrb	r4, [r5, #0]
 800bf72:	2601      	movs	r6, #1
 800bf74:	1c95      	adds	r5, r2, #2
 800bf76:	f033 0210 	bics.w	r2, r3, #16
 800bf7a:	d109      	bne.n	800bf90 <_strtol_l.constprop.0+0x54>
 800bf7c:	2c30      	cmp	r4, #48	@ 0x30
 800bf7e:	d12a      	bne.n	800bfd6 <_strtol_l.constprop.0+0x9a>
 800bf80:	782a      	ldrb	r2, [r5, #0]
 800bf82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf86:	2a58      	cmp	r2, #88	@ 0x58
 800bf88:	d125      	bne.n	800bfd6 <_strtol_l.constprop.0+0x9a>
 800bf8a:	786c      	ldrb	r4, [r5, #1]
 800bf8c:	2310      	movs	r3, #16
 800bf8e:	3502      	adds	r5, #2
 800bf90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bf94:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf98:	2200      	movs	r2, #0
 800bf9a:	fbbc f9f3 	udiv	r9, ip, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	fb03 ca19 	mls	sl, r3, r9, ip
 800bfa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bfa8:	2f09      	cmp	r7, #9
 800bfaa:	d81b      	bhi.n	800bfe4 <_strtol_l.constprop.0+0xa8>
 800bfac:	463c      	mov	r4, r7
 800bfae:	42a3      	cmp	r3, r4
 800bfb0:	dd27      	ble.n	800c002 <_strtol_l.constprop.0+0xc6>
 800bfb2:	1c57      	adds	r7, r2, #1
 800bfb4:	d007      	beq.n	800bfc6 <_strtol_l.constprop.0+0x8a>
 800bfb6:	4581      	cmp	r9, r0
 800bfb8:	d320      	bcc.n	800bffc <_strtol_l.constprop.0+0xc0>
 800bfba:	d101      	bne.n	800bfc0 <_strtol_l.constprop.0+0x84>
 800bfbc:	45a2      	cmp	sl, r4
 800bfbe:	db1d      	blt.n	800bffc <_strtol_l.constprop.0+0xc0>
 800bfc0:	fb00 4003 	mla	r0, r0, r3, r4
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfca:	e7eb      	b.n	800bfa4 <_strtol_l.constprop.0+0x68>
 800bfcc:	2c2b      	cmp	r4, #43	@ 0x2b
 800bfce:	bf04      	itt	eq
 800bfd0:	782c      	ldrbeq	r4, [r5, #0]
 800bfd2:	1c95      	addeq	r5, r2, #2
 800bfd4:	e7cf      	b.n	800bf76 <_strtol_l.constprop.0+0x3a>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1da      	bne.n	800bf90 <_strtol_l.constprop.0+0x54>
 800bfda:	2c30      	cmp	r4, #48	@ 0x30
 800bfdc:	bf0c      	ite	eq
 800bfde:	2308      	moveq	r3, #8
 800bfe0:	230a      	movne	r3, #10
 800bfe2:	e7d5      	b.n	800bf90 <_strtol_l.constprop.0+0x54>
 800bfe4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bfe8:	2f19      	cmp	r7, #25
 800bfea:	d801      	bhi.n	800bff0 <_strtol_l.constprop.0+0xb4>
 800bfec:	3c37      	subs	r4, #55	@ 0x37
 800bfee:	e7de      	b.n	800bfae <_strtol_l.constprop.0+0x72>
 800bff0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bff4:	2f19      	cmp	r7, #25
 800bff6:	d804      	bhi.n	800c002 <_strtol_l.constprop.0+0xc6>
 800bff8:	3c57      	subs	r4, #87	@ 0x57
 800bffa:	e7d8      	b.n	800bfae <_strtol_l.constprop.0+0x72>
 800bffc:	f04f 32ff 	mov.w	r2, #4294967295
 800c000:	e7e1      	b.n	800bfc6 <_strtol_l.constprop.0+0x8a>
 800c002:	1c53      	adds	r3, r2, #1
 800c004:	d108      	bne.n	800c018 <_strtol_l.constprop.0+0xdc>
 800c006:	2322      	movs	r3, #34	@ 0x22
 800c008:	f8ce 3000 	str.w	r3, [lr]
 800c00c:	4660      	mov	r0, ip
 800c00e:	f1b8 0f00 	cmp.w	r8, #0
 800c012:	d0a0      	beq.n	800bf56 <_strtol_l.constprop.0+0x1a>
 800c014:	1e69      	subs	r1, r5, #1
 800c016:	e006      	b.n	800c026 <_strtol_l.constprop.0+0xea>
 800c018:	b106      	cbz	r6, 800c01c <_strtol_l.constprop.0+0xe0>
 800c01a:	4240      	negs	r0, r0
 800c01c:	f1b8 0f00 	cmp.w	r8, #0
 800c020:	d099      	beq.n	800bf56 <_strtol_l.constprop.0+0x1a>
 800c022:	2a00      	cmp	r2, #0
 800c024:	d1f6      	bne.n	800c014 <_strtol_l.constprop.0+0xd8>
 800c026:	f8c8 1000 	str.w	r1, [r8]
 800c02a:	e794      	b.n	800bf56 <_strtol_l.constprop.0+0x1a>
 800c02c:	0800e591 	.word	0x0800e591

0800c030 <_strtol_r>:
 800c030:	f7ff bf84 	b.w	800bf3c <_strtol_l.constprop.0>

0800c034 <strtol>:
 800c034:	4613      	mov	r3, r2
 800c036:	460a      	mov	r2, r1
 800c038:	4601      	mov	r1, r0
 800c03a:	4802      	ldr	r0, [pc, #8]	@ (800c044 <strtol+0x10>)
 800c03c:	6800      	ldr	r0, [r0, #0]
 800c03e:	f7ff bf7d 	b.w	800bf3c <_strtol_l.constprop.0>
 800c042:	bf00      	nop
 800c044:	20000010 	.word	0x20000010

0800c048 <sniprintf>:
 800c048:	b40c      	push	{r2, r3}
 800c04a:	b530      	push	{r4, r5, lr}
 800c04c:	4b17      	ldr	r3, [pc, #92]	@ (800c0ac <sniprintf+0x64>)
 800c04e:	1e0c      	subs	r4, r1, #0
 800c050:	681d      	ldr	r5, [r3, #0]
 800c052:	b09d      	sub	sp, #116	@ 0x74
 800c054:	da08      	bge.n	800c068 <sniprintf+0x20>
 800c056:	238b      	movs	r3, #139	@ 0x8b
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	f04f 30ff 	mov.w	r0, #4294967295
 800c05e:	b01d      	add	sp, #116	@ 0x74
 800c060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c064:	b002      	add	sp, #8
 800c066:	4770      	bx	lr
 800c068:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c06c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c070:	bf14      	ite	ne
 800c072:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c076:	4623      	moveq	r3, r4
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	9307      	str	r3, [sp, #28]
 800c07c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c080:	9002      	str	r0, [sp, #8]
 800c082:	9006      	str	r0, [sp, #24]
 800c084:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c088:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c08a:	ab21      	add	r3, sp, #132	@ 0x84
 800c08c:	a902      	add	r1, sp, #8
 800c08e:	4628      	mov	r0, r5
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	f000 fa15 	bl	800c4c0 <_svfiprintf_r>
 800c096:	1c43      	adds	r3, r0, #1
 800c098:	bfbc      	itt	lt
 800c09a:	238b      	movlt	r3, #139	@ 0x8b
 800c09c:	602b      	strlt	r3, [r5, #0]
 800c09e:	2c00      	cmp	r4, #0
 800c0a0:	d0dd      	beq.n	800c05e <sniprintf+0x16>
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	701a      	strb	r2, [r3, #0]
 800c0a8:	e7d9      	b.n	800c05e <sniprintf+0x16>
 800c0aa:	bf00      	nop
 800c0ac:	20000010 	.word	0x20000010

0800c0b0 <siscanf>:
 800c0b0:	b40e      	push	{r1, r2, r3}
 800c0b2:	b530      	push	{r4, r5, lr}
 800c0b4:	b09c      	sub	sp, #112	@ 0x70
 800c0b6:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c0b8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c0bc:	f854 5b04 	ldr.w	r5, [r4], #4
 800c0c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c0c4:	9002      	str	r0, [sp, #8]
 800c0c6:	9006      	str	r0, [sp, #24]
 800c0c8:	f7f4 f88c 	bl	80001e4 <strlen>
 800c0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c0fc <siscanf+0x4c>)
 800c0ce:	9003      	str	r0, [sp, #12]
 800c0d0:	9007      	str	r0, [sp, #28]
 800c0d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0d4:	480a      	ldr	r0, [pc, #40]	@ (800c100 <siscanf+0x50>)
 800c0d6:	9401      	str	r4, [sp, #4]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0dc:	9314      	str	r3, [sp, #80]	@ 0x50
 800c0de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c0e6:	462a      	mov	r2, r5
 800c0e8:	4623      	mov	r3, r4
 800c0ea:	a902      	add	r1, sp, #8
 800c0ec:	6800      	ldr	r0, [r0, #0]
 800c0ee:	f000 fb3b 	bl	800c768 <__ssvfiscanf_r>
 800c0f2:	b01c      	add	sp, #112	@ 0x70
 800c0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0f8:	b003      	add	sp, #12
 800c0fa:	4770      	bx	lr
 800c0fc:	0800c105 	.word	0x0800c105
 800c100:	20000010 	.word	0x20000010

0800c104 <__seofread>:
 800c104:	2000      	movs	r0, #0
 800c106:	4770      	bx	lr

0800c108 <memcmp>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	3901      	subs	r1, #1
 800c10c:	4402      	add	r2, r0
 800c10e:	4290      	cmp	r0, r2
 800c110:	d101      	bne.n	800c116 <memcmp+0xe>
 800c112:	2000      	movs	r0, #0
 800c114:	e005      	b.n	800c122 <memcmp+0x1a>
 800c116:	7803      	ldrb	r3, [r0, #0]
 800c118:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c11c:	42a3      	cmp	r3, r4
 800c11e:	d001      	beq.n	800c124 <memcmp+0x1c>
 800c120:	1b18      	subs	r0, r3, r4
 800c122:	bd10      	pop	{r4, pc}
 800c124:	3001      	adds	r0, #1
 800c126:	e7f2      	b.n	800c10e <memcmp+0x6>

0800c128 <memset>:
 800c128:	4402      	add	r2, r0
 800c12a:	4603      	mov	r3, r0
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d100      	bne.n	800c132 <memset+0xa>
 800c130:	4770      	bx	lr
 800c132:	f803 1b01 	strb.w	r1, [r3], #1
 800c136:	e7f9      	b.n	800c12c <memset+0x4>

0800c138 <strchr>:
 800c138:	b2c9      	uxtb	r1, r1
 800c13a:	4603      	mov	r3, r0
 800c13c:	4618      	mov	r0, r3
 800c13e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c142:	b112      	cbz	r2, 800c14a <strchr+0x12>
 800c144:	428a      	cmp	r2, r1
 800c146:	d1f9      	bne.n	800c13c <strchr+0x4>
 800c148:	4770      	bx	lr
 800c14a:	2900      	cmp	r1, #0
 800c14c:	bf18      	it	ne
 800c14e:	2000      	movne	r0, #0
 800c150:	4770      	bx	lr

0800c152 <strncpy>:
 800c152:	b510      	push	{r4, lr}
 800c154:	3901      	subs	r1, #1
 800c156:	4603      	mov	r3, r0
 800c158:	b132      	cbz	r2, 800c168 <strncpy+0x16>
 800c15a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c15e:	f803 4b01 	strb.w	r4, [r3], #1
 800c162:	3a01      	subs	r2, #1
 800c164:	2c00      	cmp	r4, #0
 800c166:	d1f7      	bne.n	800c158 <strncpy+0x6>
 800c168:	441a      	add	r2, r3
 800c16a:	2100      	movs	r1, #0
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d100      	bne.n	800c172 <strncpy+0x20>
 800c170:	bd10      	pop	{r4, pc}
 800c172:	f803 1b01 	strb.w	r1, [r3], #1
 800c176:	e7f9      	b.n	800c16c <strncpy+0x1a>

0800c178 <strstr>:
 800c178:	780a      	ldrb	r2, [r1, #0]
 800c17a:	b570      	push	{r4, r5, r6, lr}
 800c17c:	b96a      	cbnz	r2, 800c19a <strstr+0x22>
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	429a      	cmp	r2, r3
 800c182:	d109      	bne.n	800c198 <strstr+0x20>
 800c184:	460c      	mov	r4, r1
 800c186:	4605      	mov	r5, r0
 800c188:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d0f6      	beq.n	800c17e <strstr+0x6>
 800c190:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c194:	429e      	cmp	r6, r3
 800c196:	d0f7      	beq.n	800c188 <strstr+0x10>
 800c198:	3001      	adds	r0, #1
 800c19a:	7803      	ldrb	r3, [r0, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1ef      	bne.n	800c180 <strstr+0x8>
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	e7ec      	b.n	800c17e <strstr+0x6>

0800c1a4 <__errno>:
 800c1a4:	4b01      	ldr	r3, [pc, #4]	@ (800c1ac <__errno+0x8>)
 800c1a6:	6818      	ldr	r0, [r3, #0]
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	20000010 	.word	0x20000010

0800c1b0 <__libc_init_array>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	4d0d      	ldr	r5, [pc, #52]	@ (800c1e8 <__libc_init_array+0x38>)
 800c1b4:	4c0d      	ldr	r4, [pc, #52]	@ (800c1ec <__libc_init_array+0x3c>)
 800c1b6:	1b64      	subs	r4, r4, r5
 800c1b8:	10a4      	asrs	r4, r4, #2
 800c1ba:	2600      	movs	r6, #0
 800c1bc:	42a6      	cmp	r6, r4
 800c1be:	d109      	bne.n	800c1d4 <__libc_init_array+0x24>
 800c1c0:	4d0b      	ldr	r5, [pc, #44]	@ (800c1f0 <__libc_init_array+0x40>)
 800c1c2:	4c0c      	ldr	r4, [pc, #48]	@ (800c1f4 <__libc_init_array+0x44>)
 800c1c4:	f001 f864 	bl	800d290 <_init>
 800c1c8:	1b64      	subs	r4, r4, r5
 800c1ca:	10a4      	asrs	r4, r4, #2
 800c1cc:	2600      	movs	r6, #0
 800c1ce:	42a6      	cmp	r6, r4
 800c1d0:	d105      	bne.n	800c1de <__libc_init_array+0x2e>
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d8:	4798      	blx	r3
 800c1da:	3601      	adds	r6, #1
 800c1dc:	e7ee      	b.n	800c1bc <__libc_init_array+0xc>
 800c1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e2:	4798      	blx	r3
 800c1e4:	3601      	adds	r6, #1
 800c1e6:	e7f2      	b.n	800c1ce <__libc_init_array+0x1e>
 800c1e8:	0800e6e8 	.word	0x0800e6e8
 800c1ec:	0800e6e8 	.word	0x0800e6e8
 800c1f0:	0800e6e8 	.word	0x0800e6e8
 800c1f4:	0800e6ec 	.word	0x0800e6ec

0800c1f8 <__retarget_lock_acquire_recursive>:
 800c1f8:	4770      	bx	lr

0800c1fa <__retarget_lock_release_recursive>:
 800c1fa:	4770      	bx	lr

0800c1fc <memcpy>:
 800c1fc:	440a      	add	r2, r1
 800c1fe:	4291      	cmp	r1, r2
 800c200:	f100 33ff 	add.w	r3, r0, #4294967295
 800c204:	d100      	bne.n	800c208 <memcpy+0xc>
 800c206:	4770      	bx	lr
 800c208:	b510      	push	{r4, lr}
 800c20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c20e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c212:	4291      	cmp	r1, r2
 800c214:	d1f9      	bne.n	800c20a <memcpy+0xe>
 800c216:	bd10      	pop	{r4, pc}

0800c218 <_free_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4605      	mov	r5, r0
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d041      	beq.n	800c2a4 <_free_r+0x8c>
 800c220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c224:	1f0c      	subs	r4, r1, #4
 800c226:	2b00      	cmp	r3, #0
 800c228:	bfb8      	it	lt
 800c22a:	18e4      	addlt	r4, r4, r3
 800c22c:	f000 f8e0 	bl	800c3f0 <__malloc_lock>
 800c230:	4a1d      	ldr	r2, [pc, #116]	@ (800c2a8 <_free_r+0x90>)
 800c232:	6813      	ldr	r3, [r2, #0]
 800c234:	b933      	cbnz	r3, 800c244 <_free_r+0x2c>
 800c236:	6063      	str	r3, [r4, #4]
 800c238:	6014      	str	r4, [r2, #0]
 800c23a:	4628      	mov	r0, r5
 800c23c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c240:	f000 b8dc 	b.w	800c3fc <__malloc_unlock>
 800c244:	42a3      	cmp	r3, r4
 800c246:	d908      	bls.n	800c25a <_free_r+0x42>
 800c248:	6820      	ldr	r0, [r4, #0]
 800c24a:	1821      	adds	r1, r4, r0
 800c24c:	428b      	cmp	r3, r1
 800c24e:	bf01      	itttt	eq
 800c250:	6819      	ldreq	r1, [r3, #0]
 800c252:	685b      	ldreq	r3, [r3, #4]
 800c254:	1809      	addeq	r1, r1, r0
 800c256:	6021      	streq	r1, [r4, #0]
 800c258:	e7ed      	b.n	800c236 <_free_r+0x1e>
 800c25a:	461a      	mov	r2, r3
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	b10b      	cbz	r3, 800c264 <_free_r+0x4c>
 800c260:	42a3      	cmp	r3, r4
 800c262:	d9fa      	bls.n	800c25a <_free_r+0x42>
 800c264:	6811      	ldr	r1, [r2, #0]
 800c266:	1850      	adds	r0, r2, r1
 800c268:	42a0      	cmp	r0, r4
 800c26a:	d10b      	bne.n	800c284 <_free_r+0x6c>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	4401      	add	r1, r0
 800c270:	1850      	adds	r0, r2, r1
 800c272:	4283      	cmp	r3, r0
 800c274:	6011      	str	r1, [r2, #0]
 800c276:	d1e0      	bne.n	800c23a <_free_r+0x22>
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	6053      	str	r3, [r2, #4]
 800c27e:	4408      	add	r0, r1
 800c280:	6010      	str	r0, [r2, #0]
 800c282:	e7da      	b.n	800c23a <_free_r+0x22>
 800c284:	d902      	bls.n	800c28c <_free_r+0x74>
 800c286:	230c      	movs	r3, #12
 800c288:	602b      	str	r3, [r5, #0]
 800c28a:	e7d6      	b.n	800c23a <_free_r+0x22>
 800c28c:	6820      	ldr	r0, [r4, #0]
 800c28e:	1821      	adds	r1, r4, r0
 800c290:	428b      	cmp	r3, r1
 800c292:	bf04      	itt	eq
 800c294:	6819      	ldreq	r1, [r3, #0]
 800c296:	685b      	ldreq	r3, [r3, #4]
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	bf04      	itt	eq
 800c29c:	1809      	addeq	r1, r1, r0
 800c29e:	6021      	streq	r1, [r4, #0]
 800c2a0:	6054      	str	r4, [r2, #4]
 800c2a2:	e7ca      	b.n	800c23a <_free_r+0x22>
 800c2a4:	bd38      	pop	{r3, r4, r5, pc}
 800c2a6:	bf00      	nop
 800c2a8:	200009f4 	.word	0x200009f4

0800c2ac <sbrk_aligned>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c2ec <sbrk_aligned+0x40>)
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	6831      	ldr	r1, [r6, #0]
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	b911      	cbnz	r1, 800c2be <sbrk_aligned+0x12>
 800c2b8:	f000 ff34 	bl	800d124 <_sbrk_r>
 800c2bc:	6030      	str	r0, [r6, #0]
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f000 ff2f 	bl	800d124 <_sbrk_r>
 800c2c6:	1c43      	adds	r3, r0, #1
 800c2c8:	d103      	bne.n	800c2d2 <sbrk_aligned+0x26>
 800c2ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	bd70      	pop	{r4, r5, r6, pc}
 800c2d2:	1cc4      	adds	r4, r0, #3
 800c2d4:	f024 0403 	bic.w	r4, r4, #3
 800c2d8:	42a0      	cmp	r0, r4
 800c2da:	d0f8      	beq.n	800c2ce <sbrk_aligned+0x22>
 800c2dc:	1a21      	subs	r1, r4, r0
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 ff20 	bl	800d124 <_sbrk_r>
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d1f2      	bne.n	800c2ce <sbrk_aligned+0x22>
 800c2e8:	e7ef      	b.n	800c2ca <sbrk_aligned+0x1e>
 800c2ea:	bf00      	nop
 800c2ec:	200009f0 	.word	0x200009f0

0800c2f0 <_malloc_r>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	1ccd      	adds	r5, r1, #3
 800c2f6:	f025 0503 	bic.w	r5, r5, #3
 800c2fa:	3508      	adds	r5, #8
 800c2fc:	2d0c      	cmp	r5, #12
 800c2fe:	bf38      	it	cc
 800c300:	250c      	movcc	r5, #12
 800c302:	2d00      	cmp	r5, #0
 800c304:	4606      	mov	r6, r0
 800c306:	db01      	blt.n	800c30c <_malloc_r+0x1c>
 800c308:	42a9      	cmp	r1, r5
 800c30a:	d904      	bls.n	800c316 <_malloc_r+0x26>
 800c30c:	230c      	movs	r3, #12
 800c30e:	6033      	str	r3, [r6, #0]
 800c310:	2000      	movs	r0, #0
 800c312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3ec <_malloc_r+0xfc>
 800c31a:	f000 f869 	bl	800c3f0 <__malloc_lock>
 800c31e:	f8d8 3000 	ldr.w	r3, [r8]
 800c322:	461c      	mov	r4, r3
 800c324:	bb44      	cbnz	r4, 800c378 <_malloc_r+0x88>
 800c326:	4629      	mov	r1, r5
 800c328:	4630      	mov	r0, r6
 800c32a:	f7ff ffbf 	bl	800c2ac <sbrk_aligned>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	4604      	mov	r4, r0
 800c332:	d158      	bne.n	800c3e6 <_malloc_r+0xf6>
 800c334:	f8d8 4000 	ldr.w	r4, [r8]
 800c338:	4627      	mov	r7, r4
 800c33a:	2f00      	cmp	r7, #0
 800c33c:	d143      	bne.n	800c3c6 <_malloc_r+0xd6>
 800c33e:	2c00      	cmp	r4, #0
 800c340:	d04b      	beq.n	800c3da <_malloc_r+0xea>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	4639      	mov	r1, r7
 800c346:	4630      	mov	r0, r6
 800c348:	eb04 0903 	add.w	r9, r4, r3
 800c34c:	f000 feea 	bl	800d124 <_sbrk_r>
 800c350:	4581      	cmp	r9, r0
 800c352:	d142      	bne.n	800c3da <_malloc_r+0xea>
 800c354:	6821      	ldr	r1, [r4, #0]
 800c356:	1a6d      	subs	r5, r5, r1
 800c358:	4629      	mov	r1, r5
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7ff ffa6 	bl	800c2ac <sbrk_aligned>
 800c360:	3001      	adds	r0, #1
 800c362:	d03a      	beq.n	800c3da <_malloc_r+0xea>
 800c364:	6823      	ldr	r3, [r4, #0]
 800c366:	442b      	add	r3, r5
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	f8d8 3000 	ldr.w	r3, [r8]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	bb62      	cbnz	r2, 800c3cc <_malloc_r+0xdc>
 800c372:	f8c8 7000 	str.w	r7, [r8]
 800c376:	e00f      	b.n	800c398 <_malloc_r+0xa8>
 800c378:	6822      	ldr	r2, [r4, #0]
 800c37a:	1b52      	subs	r2, r2, r5
 800c37c:	d420      	bmi.n	800c3c0 <_malloc_r+0xd0>
 800c37e:	2a0b      	cmp	r2, #11
 800c380:	d917      	bls.n	800c3b2 <_malloc_r+0xc2>
 800c382:	1961      	adds	r1, r4, r5
 800c384:	42a3      	cmp	r3, r4
 800c386:	6025      	str	r5, [r4, #0]
 800c388:	bf18      	it	ne
 800c38a:	6059      	strne	r1, [r3, #4]
 800c38c:	6863      	ldr	r3, [r4, #4]
 800c38e:	bf08      	it	eq
 800c390:	f8c8 1000 	streq.w	r1, [r8]
 800c394:	5162      	str	r2, [r4, r5]
 800c396:	604b      	str	r3, [r1, #4]
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 f82f 	bl	800c3fc <__malloc_unlock>
 800c39e:	f104 000b 	add.w	r0, r4, #11
 800c3a2:	1d23      	adds	r3, r4, #4
 800c3a4:	f020 0007 	bic.w	r0, r0, #7
 800c3a8:	1ac2      	subs	r2, r0, r3
 800c3aa:	bf1c      	itt	ne
 800c3ac:	1a1b      	subne	r3, r3, r0
 800c3ae:	50a3      	strne	r3, [r4, r2]
 800c3b0:	e7af      	b.n	800c312 <_malloc_r+0x22>
 800c3b2:	6862      	ldr	r2, [r4, #4]
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	bf0c      	ite	eq
 800c3b8:	f8c8 2000 	streq.w	r2, [r8]
 800c3bc:	605a      	strne	r2, [r3, #4]
 800c3be:	e7eb      	b.n	800c398 <_malloc_r+0xa8>
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	6864      	ldr	r4, [r4, #4]
 800c3c4:	e7ae      	b.n	800c324 <_malloc_r+0x34>
 800c3c6:	463c      	mov	r4, r7
 800c3c8:	687f      	ldr	r7, [r7, #4]
 800c3ca:	e7b6      	b.n	800c33a <_malloc_r+0x4a>
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	d1fb      	bne.n	800c3cc <_malloc_r+0xdc>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	6053      	str	r3, [r2, #4]
 800c3d8:	e7de      	b.n	800c398 <_malloc_r+0xa8>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	6033      	str	r3, [r6, #0]
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f000 f80c 	bl	800c3fc <__malloc_unlock>
 800c3e4:	e794      	b.n	800c310 <_malloc_r+0x20>
 800c3e6:	6005      	str	r5, [r0, #0]
 800c3e8:	e7d6      	b.n	800c398 <_malloc_r+0xa8>
 800c3ea:	bf00      	nop
 800c3ec:	200009f4 	.word	0x200009f4

0800c3f0 <__malloc_lock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	@ (800c3f8 <__malloc_lock+0x8>)
 800c3f2:	f7ff bf01 	b.w	800c1f8 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	200009ec 	.word	0x200009ec

0800c3fc <__malloc_unlock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	@ (800c404 <__malloc_unlock+0x8>)
 800c3fe:	f7ff befc 	b.w	800c1fa <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	200009ec 	.word	0x200009ec

0800c408 <__ssputs_r>:
 800c408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c40c:	688e      	ldr	r6, [r1, #8]
 800c40e:	461f      	mov	r7, r3
 800c410:	42be      	cmp	r6, r7
 800c412:	680b      	ldr	r3, [r1, #0]
 800c414:	4682      	mov	sl, r0
 800c416:	460c      	mov	r4, r1
 800c418:	4690      	mov	r8, r2
 800c41a:	d82d      	bhi.n	800c478 <__ssputs_r+0x70>
 800c41c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c424:	d026      	beq.n	800c474 <__ssputs_r+0x6c>
 800c426:	6965      	ldr	r5, [r4, #20]
 800c428:	6909      	ldr	r1, [r1, #16]
 800c42a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c42e:	eba3 0901 	sub.w	r9, r3, r1
 800c432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c436:	1c7b      	adds	r3, r7, #1
 800c438:	444b      	add	r3, r9
 800c43a:	106d      	asrs	r5, r5, #1
 800c43c:	429d      	cmp	r5, r3
 800c43e:	bf38      	it	cc
 800c440:	461d      	movcc	r5, r3
 800c442:	0553      	lsls	r3, r2, #21
 800c444:	d527      	bpl.n	800c496 <__ssputs_r+0x8e>
 800c446:	4629      	mov	r1, r5
 800c448:	f7ff ff52 	bl	800c2f0 <_malloc_r>
 800c44c:	4606      	mov	r6, r0
 800c44e:	b360      	cbz	r0, 800c4aa <__ssputs_r+0xa2>
 800c450:	6921      	ldr	r1, [r4, #16]
 800c452:	464a      	mov	r2, r9
 800c454:	f7ff fed2 	bl	800c1fc <memcpy>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c45e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	6126      	str	r6, [r4, #16]
 800c466:	6165      	str	r5, [r4, #20]
 800c468:	444e      	add	r6, r9
 800c46a:	eba5 0509 	sub.w	r5, r5, r9
 800c46e:	6026      	str	r6, [r4, #0]
 800c470:	60a5      	str	r5, [r4, #8]
 800c472:	463e      	mov	r6, r7
 800c474:	42be      	cmp	r6, r7
 800c476:	d900      	bls.n	800c47a <__ssputs_r+0x72>
 800c478:	463e      	mov	r6, r7
 800c47a:	6820      	ldr	r0, [r4, #0]
 800c47c:	4632      	mov	r2, r6
 800c47e:	4641      	mov	r1, r8
 800c480:	f000 fe35 	bl	800d0ee <memmove>
 800c484:	68a3      	ldr	r3, [r4, #8]
 800c486:	1b9b      	subs	r3, r3, r6
 800c488:	60a3      	str	r3, [r4, #8]
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	4433      	add	r3, r6
 800c48e:	6023      	str	r3, [r4, #0]
 800c490:	2000      	movs	r0, #0
 800c492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c496:	462a      	mov	r2, r5
 800c498:	f000 fe54 	bl	800d144 <_realloc_r>
 800c49c:	4606      	mov	r6, r0
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d1e0      	bne.n	800c464 <__ssputs_r+0x5c>
 800c4a2:	6921      	ldr	r1, [r4, #16]
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	f7ff feb7 	bl	800c218 <_free_r>
 800c4aa:	230c      	movs	r3, #12
 800c4ac:	f8ca 3000 	str.w	r3, [sl]
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4bc:	e7e9      	b.n	800c492 <__ssputs_r+0x8a>
	...

0800c4c0 <_svfiprintf_r>:
 800c4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	4698      	mov	r8, r3
 800c4c6:	898b      	ldrh	r3, [r1, #12]
 800c4c8:	061b      	lsls	r3, r3, #24
 800c4ca:	b09d      	sub	sp, #116	@ 0x74
 800c4cc:	4607      	mov	r7, r0
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	d510      	bpl.n	800c4f6 <_svfiprintf_r+0x36>
 800c4d4:	690b      	ldr	r3, [r1, #16]
 800c4d6:	b973      	cbnz	r3, 800c4f6 <_svfiprintf_r+0x36>
 800c4d8:	2140      	movs	r1, #64	@ 0x40
 800c4da:	f7ff ff09 	bl	800c2f0 <_malloc_r>
 800c4de:	6028      	str	r0, [r5, #0]
 800c4e0:	6128      	str	r0, [r5, #16]
 800c4e2:	b930      	cbnz	r0, 800c4f2 <_svfiprintf_r+0x32>
 800c4e4:	230c      	movs	r3, #12
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ec:	b01d      	add	sp, #116	@ 0x74
 800c4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f2:	2340      	movs	r3, #64	@ 0x40
 800c4f4:	616b      	str	r3, [r5, #20]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4fa:	2320      	movs	r3, #32
 800c4fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c500:	f8cd 800c 	str.w	r8, [sp, #12]
 800c504:	2330      	movs	r3, #48	@ 0x30
 800c506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c6a4 <_svfiprintf_r+0x1e4>
 800c50a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c50e:	f04f 0901 	mov.w	r9, #1
 800c512:	4623      	mov	r3, r4
 800c514:	469a      	mov	sl, r3
 800c516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c51a:	b10a      	cbz	r2, 800c520 <_svfiprintf_r+0x60>
 800c51c:	2a25      	cmp	r2, #37	@ 0x25
 800c51e:	d1f9      	bne.n	800c514 <_svfiprintf_r+0x54>
 800c520:	ebba 0b04 	subs.w	fp, sl, r4
 800c524:	d00b      	beq.n	800c53e <_svfiprintf_r+0x7e>
 800c526:	465b      	mov	r3, fp
 800c528:	4622      	mov	r2, r4
 800c52a:	4629      	mov	r1, r5
 800c52c:	4638      	mov	r0, r7
 800c52e:	f7ff ff6b 	bl	800c408 <__ssputs_r>
 800c532:	3001      	adds	r0, #1
 800c534:	f000 80a7 	beq.w	800c686 <_svfiprintf_r+0x1c6>
 800c538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c53a:	445a      	add	r2, fp
 800c53c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c53e:	f89a 3000 	ldrb.w	r3, [sl]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 809f 	beq.w	800c686 <_svfiprintf_r+0x1c6>
 800c548:	2300      	movs	r3, #0
 800c54a:	f04f 32ff 	mov.w	r2, #4294967295
 800c54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c552:	f10a 0a01 	add.w	sl, sl, #1
 800c556:	9304      	str	r3, [sp, #16]
 800c558:	9307      	str	r3, [sp, #28]
 800c55a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c55e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c560:	4654      	mov	r4, sl
 800c562:	2205      	movs	r2, #5
 800c564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c568:	484e      	ldr	r0, [pc, #312]	@ (800c6a4 <_svfiprintf_r+0x1e4>)
 800c56a:	f7f3 fe49 	bl	8000200 <memchr>
 800c56e:	9a04      	ldr	r2, [sp, #16]
 800c570:	b9d8      	cbnz	r0, 800c5aa <_svfiprintf_r+0xea>
 800c572:	06d0      	lsls	r0, r2, #27
 800c574:	bf44      	itt	mi
 800c576:	2320      	movmi	r3, #32
 800c578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c57c:	0711      	lsls	r1, r2, #28
 800c57e:	bf44      	itt	mi
 800c580:	232b      	movmi	r3, #43	@ 0x2b
 800c582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c586:	f89a 3000 	ldrb.w	r3, [sl]
 800c58a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c58c:	d015      	beq.n	800c5ba <_svfiprintf_r+0xfa>
 800c58e:	9a07      	ldr	r2, [sp, #28]
 800c590:	4654      	mov	r4, sl
 800c592:	2000      	movs	r0, #0
 800c594:	f04f 0c0a 	mov.w	ip, #10
 800c598:	4621      	mov	r1, r4
 800c59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c59e:	3b30      	subs	r3, #48	@ 0x30
 800c5a0:	2b09      	cmp	r3, #9
 800c5a2:	d94b      	bls.n	800c63c <_svfiprintf_r+0x17c>
 800c5a4:	b1b0      	cbz	r0, 800c5d4 <_svfiprintf_r+0x114>
 800c5a6:	9207      	str	r2, [sp, #28]
 800c5a8:	e014      	b.n	800c5d4 <_svfiprintf_r+0x114>
 800c5aa:	eba0 0308 	sub.w	r3, r0, r8
 800c5ae:	fa09 f303 	lsl.w	r3, r9, r3
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	9304      	str	r3, [sp, #16]
 800c5b6:	46a2      	mov	sl, r4
 800c5b8:	e7d2      	b.n	800c560 <_svfiprintf_r+0xa0>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	1d19      	adds	r1, r3, #4
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	9103      	str	r1, [sp, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bfbb      	ittet	lt
 800c5c6:	425b      	neglt	r3, r3
 800c5c8:	f042 0202 	orrlt.w	r2, r2, #2
 800c5cc:	9307      	strge	r3, [sp, #28]
 800c5ce:	9307      	strlt	r3, [sp, #28]
 800c5d0:	bfb8      	it	lt
 800c5d2:	9204      	strlt	r2, [sp, #16]
 800c5d4:	7823      	ldrb	r3, [r4, #0]
 800c5d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5d8:	d10a      	bne.n	800c5f0 <_svfiprintf_r+0x130>
 800c5da:	7863      	ldrb	r3, [r4, #1]
 800c5dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5de:	d132      	bne.n	800c646 <_svfiprintf_r+0x186>
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	1d1a      	adds	r2, r3, #4
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	9203      	str	r2, [sp, #12]
 800c5e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5ec:	3402      	adds	r4, #2
 800c5ee:	9305      	str	r3, [sp, #20]
 800c5f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6b4 <_svfiprintf_r+0x1f4>
 800c5f4:	7821      	ldrb	r1, [r4, #0]
 800c5f6:	2203      	movs	r2, #3
 800c5f8:	4650      	mov	r0, sl
 800c5fa:	f7f3 fe01 	bl	8000200 <memchr>
 800c5fe:	b138      	cbz	r0, 800c610 <_svfiprintf_r+0x150>
 800c600:	9b04      	ldr	r3, [sp, #16]
 800c602:	eba0 000a 	sub.w	r0, r0, sl
 800c606:	2240      	movs	r2, #64	@ 0x40
 800c608:	4082      	lsls	r2, r0
 800c60a:	4313      	orrs	r3, r2
 800c60c:	3401      	adds	r4, #1
 800c60e:	9304      	str	r3, [sp, #16]
 800c610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c614:	4824      	ldr	r0, [pc, #144]	@ (800c6a8 <_svfiprintf_r+0x1e8>)
 800c616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c61a:	2206      	movs	r2, #6
 800c61c:	f7f3 fdf0 	bl	8000200 <memchr>
 800c620:	2800      	cmp	r0, #0
 800c622:	d036      	beq.n	800c692 <_svfiprintf_r+0x1d2>
 800c624:	4b21      	ldr	r3, [pc, #132]	@ (800c6ac <_svfiprintf_r+0x1ec>)
 800c626:	bb1b      	cbnz	r3, 800c670 <_svfiprintf_r+0x1b0>
 800c628:	9b03      	ldr	r3, [sp, #12]
 800c62a:	3307      	adds	r3, #7
 800c62c:	f023 0307 	bic.w	r3, r3, #7
 800c630:	3308      	adds	r3, #8
 800c632:	9303      	str	r3, [sp, #12]
 800c634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c636:	4433      	add	r3, r6
 800c638:	9309      	str	r3, [sp, #36]	@ 0x24
 800c63a:	e76a      	b.n	800c512 <_svfiprintf_r+0x52>
 800c63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c640:	460c      	mov	r4, r1
 800c642:	2001      	movs	r0, #1
 800c644:	e7a8      	b.n	800c598 <_svfiprintf_r+0xd8>
 800c646:	2300      	movs	r3, #0
 800c648:	3401      	adds	r4, #1
 800c64a:	9305      	str	r3, [sp, #20]
 800c64c:	4619      	mov	r1, r3
 800c64e:	f04f 0c0a 	mov.w	ip, #10
 800c652:	4620      	mov	r0, r4
 800c654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c658:	3a30      	subs	r2, #48	@ 0x30
 800c65a:	2a09      	cmp	r2, #9
 800c65c:	d903      	bls.n	800c666 <_svfiprintf_r+0x1a6>
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d0c6      	beq.n	800c5f0 <_svfiprintf_r+0x130>
 800c662:	9105      	str	r1, [sp, #20]
 800c664:	e7c4      	b.n	800c5f0 <_svfiprintf_r+0x130>
 800c666:	fb0c 2101 	mla	r1, ip, r1, r2
 800c66a:	4604      	mov	r4, r0
 800c66c:	2301      	movs	r3, #1
 800c66e:	e7f0      	b.n	800c652 <_svfiprintf_r+0x192>
 800c670:	ab03      	add	r3, sp, #12
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	462a      	mov	r2, r5
 800c676:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b0 <_svfiprintf_r+0x1f0>)
 800c678:	a904      	add	r1, sp, #16
 800c67a:	4638      	mov	r0, r7
 800c67c:	f3af 8000 	nop.w
 800c680:	1c42      	adds	r2, r0, #1
 800c682:	4606      	mov	r6, r0
 800c684:	d1d6      	bne.n	800c634 <_svfiprintf_r+0x174>
 800c686:	89ab      	ldrh	r3, [r5, #12]
 800c688:	065b      	lsls	r3, r3, #25
 800c68a:	f53f af2d 	bmi.w	800c4e8 <_svfiprintf_r+0x28>
 800c68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c690:	e72c      	b.n	800c4ec <_svfiprintf_r+0x2c>
 800c692:	ab03      	add	r3, sp, #12
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	462a      	mov	r2, r5
 800c698:	4b05      	ldr	r3, [pc, #20]	@ (800c6b0 <_svfiprintf_r+0x1f0>)
 800c69a:	a904      	add	r1, sp, #16
 800c69c:	4638      	mov	r0, r7
 800c69e:	f000 fa45 	bl	800cb2c <_printf_i>
 800c6a2:	e7ed      	b.n	800c680 <_svfiprintf_r+0x1c0>
 800c6a4:	0800e691 	.word	0x0800e691
 800c6a8:	0800e69b 	.word	0x0800e69b
 800c6ac:	00000000 	.word	0x00000000
 800c6b0:	0800c409 	.word	0x0800c409
 800c6b4:	0800e697 	.word	0x0800e697

0800c6b8 <_sungetc_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	1c4b      	adds	r3, r1, #1
 800c6bc:	4614      	mov	r4, r2
 800c6be:	d103      	bne.n	800c6c8 <_sungetc_r+0x10>
 800c6c0:	f04f 35ff 	mov.w	r5, #4294967295
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	bd38      	pop	{r3, r4, r5, pc}
 800c6c8:	8993      	ldrh	r3, [r2, #12]
 800c6ca:	f023 0320 	bic.w	r3, r3, #32
 800c6ce:	8193      	strh	r3, [r2, #12]
 800c6d0:	6853      	ldr	r3, [r2, #4]
 800c6d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c6d4:	b2cd      	uxtb	r5, r1
 800c6d6:	b18a      	cbz	r2, 800c6fc <_sungetc_r+0x44>
 800c6d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	dd08      	ble.n	800c6f0 <_sungetc_r+0x38>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	1e5a      	subs	r2, r3, #1
 800c6e2:	6022      	str	r2, [r4, #0]
 800c6e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c6e8:	6863      	ldr	r3, [r4, #4]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	6063      	str	r3, [r4, #4]
 800c6ee:	e7e9      	b.n	800c6c4 <_sungetc_r+0xc>
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	f000 fcc2 	bl	800d07a <__submore>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d0f1      	beq.n	800c6de <_sungetc_r+0x26>
 800c6fa:	e7e1      	b.n	800c6c0 <_sungetc_r+0x8>
 800c6fc:	6921      	ldr	r1, [r4, #16]
 800c6fe:	6822      	ldr	r2, [r4, #0]
 800c700:	b141      	cbz	r1, 800c714 <_sungetc_r+0x5c>
 800c702:	4291      	cmp	r1, r2
 800c704:	d206      	bcs.n	800c714 <_sungetc_r+0x5c>
 800c706:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c70a:	42a9      	cmp	r1, r5
 800c70c:	d102      	bne.n	800c714 <_sungetc_r+0x5c>
 800c70e:	3a01      	subs	r2, #1
 800c710:	6022      	str	r2, [r4, #0]
 800c712:	e7ea      	b.n	800c6ea <_sungetc_r+0x32>
 800c714:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c71c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c71e:	2303      	movs	r3, #3
 800c720:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c722:	4623      	mov	r3, r4
 800c724:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	2301      	movs	r3, #1
 800c72c:	e7de      	b.n	800c6ec <_sungetc_r+0x34>

0800c72e <__ssrefill_r>:
 800c72e:	b510      	push	{r4, lr}
 800c730:	460c      	mov	r4, r1
 800c732:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c734:	b169      	cbz	r1, 800c752 <__ssrefill_r+0x24>
 800c736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c73a:	4299      	cmp	r1, r3
 800c73c:	d001      	beq.n	800c742 <__ssrefill_r+0x14>
 800c73e:	f7ff fd6b 	bl	800c218 <_free_r>
 800c742:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c744:	6063      	str	r3, [r4, #4]
 800c746:	2000      	movs	r0, #0
 800c748:	6360      	str	r0, [r4, #52]	@ 0x34
 800c74a:	b113      	cbz	r3, 800c752 <__ssrefill_r+0x24>
 800c74c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	bd10      	pop	{r4, pc}
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	2300      	movs	r3, #0
 800c758:	6063      	str	r3, [r4, #4]
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f043 0320 	orr.w	r3, r3, #32
 800c760:	81a3      	strh	r3, [r4, #12]
 800c762:	f04f 30ff 	mov.w	r0, #4294967295
 800c766:	e7f3      	b.n	800c750 <__ssrefill_r+0x22>

0800c768 <__ssvfiscanf_r>:
 800c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c76c:	460c      	mov	r4, r1
 800c76e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c772:	2100      	movs	r1, #0
 800c774:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c778:	49a5      	ldr	r1, [pc, #660]	@ (800ca10 <__ssvfiscanf_r+0x2a8>)
 800c77a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c77c:	f10d 0804 	add.w	r8, sp, #4
 800c780:	49a4      	ldr	r1, [pc, #656]	@ (800ca14 <__ssvfiscanf_r+0x2ac>)
 800c782:	4fa5      	ldr	r7, [pc, #660]	@ (800ca18 <__ssvfiscanf_r+0x2b0>)
 800c784:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c788:	4606      	mov	r6, r0
 800c78a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	7813      	ldrb	r3, [r2, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 8158 	beq.w	800ca46 <__ssvfiscanf_r+0x2de>
 800c796:	5cf9      	ldrb	r1, [r7, r3]
 800c798:	f011 0108 	ands.w	r1, r1, #8
 800c79c:	f102 0501 	add.w	r5, r2, #1
 800c7a0:	d019      	beq.n	800c7d6 <__ssvfiscanf_r+0x6e>
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd0f      	ble.n	800c7c8 <__ssvfiscanf_r+0x60>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	781a      	ldrb	r2, [r3, #0]
 800c7ac:	5cba      	ldrb	r2, [r7, r2]
 800c7ae:	0712      	lsls	r2, r2, #28
 800c7b0:	d401      	bmi.n	800c7b6 <__ssvfiscanf_r+0x4e>
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	e7eb      	b.n	800c78e <__ssvfiscanf_r+0x26>
 800c7b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c7b8:	3201      	adds	r2, #1
 800c7ba:	9245      	str	r2, [sp, #276]	@ 0x114
 800c7bc:	6862      	ldr	r2, [r4, #4]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	3a01      	subs	r2, #1
 800c7c2:	6062      	str	r2, [r4, #4]
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	e7ec      	b.n	800c7a2 <__ssvfiscanf_r+0x3a>
 800c7c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	4798      	blx	r3
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0e9      	beq.n	800c7a8 <__ssvfiscanf_r+0x40>
 800c7d4:	e7ed      	b.n	800c7b2 <__ssvfiscanf_r+0x4a>
 800c7d6:	2b25      	cmp	r3, #37	@ 0x25
 800c7d8:	d012      	beq.n	800c800 <__ssvfiscanf_r+0x98>
 800c7da:	4699      	mov	r9, r3
 800c7dc:	6863      	ldr	r3, [r4, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f340 8093 	ble.w	800c90a <__ssvfiscanf_r+0x1a2>
 800c7e4:	6822      	ldr	r2, [r4, #0]
 800c7e6:	7813      	ldrb	r3, [r2, #0]
 800c7e8:	454b      	cmp	r3, r9
 800c7ea:	f040 812c 	bne.w	800ca46 <__ssvfiscanf_r+0x2de>
 800c7ee:	6863      	ldr	r3, [r4, #4]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	6063      	str	r3, [r4, #4]
 800c7f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c7f6:	3201      	adds	r2, #1
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	6022      	str	r2, [r4, #0]
 800c7fc:	9345      	str	r3, [sp, #276]	@ 0x114
 800c7fe:	e7d8      	b.n	800c7b2 <__ssvfiscanf_r+0x4a>
 800c800:	9141      	str	r1, [sp, #260]	@ 0x104
 800c802:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c804:	7853      	ldrb	r3, [r2, #1]
 800c806:	2b2a      	cmp	r3, #42	@ 0x2a
 800c808:	bf02      	ittt	eq
 800c80a:	2310      	moveq	r3, #16
 800c80c:	1c95      	addeq	r5, r2, #2
 800c80e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c810:	220a      	movs	r2, #10
 800c812:	46a9      	mov	r9, r5
 800c814:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c818:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c81c:	2b09      	cmp	r3, #9
 800c81e:	d91e      	bls.n	800c85e <__ssvfiscanf_r+0xf6>
 800c820:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ca1c <__ssvfiscanf_r+0x2b4>
 800c824:	2203      	movs	r2, #3
 800c826:	4650      	mov	r0, sl
 800c828:	f7f3 fcea 	bl	8000200 <memchr>
 800c82c:	b138      	cbz	r0, 800c83e <__ssvfiscanf_r+0xd6>
 800c82e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c830:	eba0 000a 	sub.w	r0, r0, sl
 800c834:	2301      	movs	r3, #1
 800c836:	4083      	lsls	r3, r0
 800c838:	4313      	orrs	r3, r2
 800c83a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c83c:	464d      	mov	r5, r9
 800c83e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c842:	2b78      	cmp	r3, #120	@ 0x78
 800c844:	d806      	bhi.n	800c854 <__ssvfiscanf_r+0xec>
 800c846:	2b57      	cmp	r3, #87	@ 0x57
 800c848:	d810      	bhi.n	800c86c <__ssvfiscanf_r+0x104>
 800c84a:	2b25      	cmp	r3, #37	@ 0x25
 800c84c:	d0c5      	beq.n	800c7da <__ssvfiscanf_r+0x72>
 800c84e:	d857      	bhi.n	800c900 <__ssvfiscanf_r+0x198>
 800c850:	2b00      	cmp	r3, #0
 800c852:	d065      	beq.n	800c920 <__ssvfiscanf_r+0x1b8>
 800c854:	2303      	movs	r3, #3
 800c856:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c858:	230a      	movs	r3, #10
 800c85a:	9342      	str	r3, [sp, #264]	@ 0x108
 800c85c:	e078      	b.n	800c950 <__ssvfiscanf_r+0x1e8>
 800c85e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c860:	fb02 1103 	mla	r1, r2, r3, r1
 800c864:	3930      	subs	r1, #48	@ 0x30
 800c866:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c868:	464d      	mov	r5, r9
 800c86a:	e7d2      	b.n	800c812 <__ssvfiscanf_r+0xaa>
 800c86c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c870:	2a20      	cmp	r2, #32
 800c872:	d8ef      	bhi.n	800c854 <__ssvfiscanf_r+0xec>
 800c874:	a101      	add	r1, pc, #4	@ (adr r1, 800c87c <__ssvfiscanf_r+0x114>)
 800c876:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c92f 	.word	0x0800c92f
 800c880:	0800c855 	.word	0x0800c855
 800c884:	0800c855 	.word	0x0800c855
 800c888:	0800c989 	.word	0x0800c989
 800c88c:	0800c855 	.word	0x0800c855
 800c890:	0800c855 	.word	0x0800c855
 800c894:	0800c855 	.word	0x0800c855
 800c898:	0800c855 	.word	0x0800c855
 800c89c:	0800c855 	.word	0x0800c855
 800c8a0:	0800c855 	.word	0x0800c855
 800c8a4:	0800c855 	.word	0x0800c855
 800c8a8:	0800c99f 	.word	0x0800c99f
 800c8ac:	0800c985 	.word	0x0800c985
 800c8b0:	0800c907 	.word	0x0800c907
 800c8b4:	0800c907 	.word	0x0800c907
 800c8b8:	0800c907 	.word	0x0800c907
 800c8bc:	0800c855 	.word	0x0800c855
 800c8c0:	0800c941 	.word	0x0800c941
 800c8c4:	0800c855 	.word	0x0800c855
 800c8c8:	0800c855 	.word	0x0800c855
 800c8cc:	0800c855 	.word	0x0800c855
 800c8d0:	0800c855 	.word	0x0800c855
 800c8d4:	0800c9af 	.word	0x0800c9af
 800c8d8:	0800c949 	.word	0x0800c949
 800c8dc:	0800c927 	.word	0x0800c927
 800c8e0:	0800c855 	.word	0x0800c855
 800c8e4:	0800c855 	.word	0x0800c855
 800c8e8:	0800c9ab 	.word	0x0800c9ab
 800c8ec:	0800c855 	.word	0x0800c855
 800c8f0:	0800c985 	.word	0x0800c985
 800c8f4:	0800c855 	.word	0x0800c855
 800c8f8:	0800c855 	.word	0x0800c855
 800c8fc:	0800c92f 	.word	0x0800c92f
 800c900:	3b45      	subs	r3, #69	@ 0x45
 800c902:	2b02      	cmp	r3, #2
 800c904:	d8a6      	bhi.n	800c854 <__ssvfiscanf_r+0xec>
 800c906:	2305      	movs	r3, #5
 800c908:	e021      	b.n	800c94e <__ssvfiscanf_r+0x1e6>
 800c90a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c90c:	4621      	mov	r1, r4
 800c90e:	4630      	mov	r0, r6
 800c910:	4798      	blx	r3
 800c912:	2800      	cmp	r0, #0
 800c914:	f43f af66 	beq.w	800c7e4 <__ssvfiscanf_r+0x7c>
 800c918:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c91a:	2800      	cmp	r0, #0
 800c91c:	f040 808b 	bne.w	800ca36 <__ssvfiscanf_r+0x2ce>
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	e08b      	b.n	800ca3e <__ssvfiscanf_r+0x2d6>
 800c926:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c928:	f042 0220 	orr.w	r2, r2, #32
 800c92c:	9241      	str	r2, [sp, #260]	@ 0x104
 800c92e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c934:	9241      	str	r2, [sp, #260]	@ 0x104
 800c936:	2210      	movs	r2, #16
 800c938:	2b6e      	cmp	r3, #110	@ 0x6e
 800c93a:	9242      	str	r2, [sp, #264]	@ 0x108
 800c93c:	d902      	bls.n	800c944 <__ssvfiscanf_r+0x1dc>
 800c93e:	e005      	b.n	800c94c <__ssvfiscanf_r+0x1e4>
 800c940:	2300      	movs	r3, #0
 800c942:	9342      	str	r3, [sp, #264]	@ 0x108
 800c944:	2303      	movs	r3, #3
 800c946:	e002      	b.n	800c94e <__ssvfiscanf_r+0x1e6>
 800c948:	2308      	movs	r3, #8
 800c94a:	9342      	str	r3, [sp, #264]	@ 0x108
 800c94c:	2304      	movs	r3, #4
 800c94e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	dd39      	ble.n	800c9ca <__ssvfiscanf_r+0x262>
 800c956:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c958:	0659      	lsls	r1, r3, #25
 800c95a:	d404      	bmi.n	800c966 <__ssvfiscanf_r+0x1fe>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	781a      	ldrb	r2, [r3, #0]
 800c960:	5cba      	ldrb	r2, [r7, r2]
 800c962:	0712      	lsls	r2, r2, #28
 800c964:	d438      	bmi.n	800c9d8 <__ssvfiscanf_r+0x270>
 800c966:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c968:	2b02      	cmp	r3, #2
 800c96a:	dc47      	bgt.n	800c9fc <__ssvfiscanf_r+0x294>
 800c96c:	466b      	mov	r3, sp
 800c96e:	4622      	mov	r2, r4
 800c970:	a941      	add	r1, sp, #260	@ 0x104
 800c972:	4630      	mov	r0, r6
 800c974:	f000 f9fa 	bl	800cd6c <_scanf_chars>
 800c978:	2801      	cmp	r0, #1
 800c97a:	d064      	beq.n	800ca46 <__ssvfiscanf_r+0x2de>
 800c97c:	2802      	cmp	r0, #2
 800c97e:	f47f af18 	bne.w	800c7b2 <__ssvfiscanf_r+0x4a>
 800c982:	e7c9      	b.n	800c918 <__ssvfiscanf_r+0x1b0>
 800c984:	220a      	movs	r2, #10
 800c986:	e7d7      	b.n	800c938 <__ssvfiscanf_r+0x1d0>
 800c988:	4629      	mov	r1, r5
 800c98a:	4640      	mov	r0, r8
 800c98c:	f000 fb3c 	bl	800d008 <__sccl>
 800c990:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c996:	9341      	str	r3, [sp, #260]	@ 0x104
 800c998:	4605      	mov	r5, r0
 800c99a:	2301      	movs	r3, #1
 800c99c:	e7d7      	b.n	800c94e <__ssvfiscanf_r+0x1e6>
 800c99e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c9a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9a4:	9341      	str	r3, [sp, #260]	@ 0x104
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e7d1      	b.n	800c94e <__ssvfiscanf_r+0x1e6>
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	e7cf      	b.n	800c94e <__ssvfiscanf_r+0x1e6>
 800c9ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c9b0:	06c3      	lsls	r3, r0, #27
 800c9b2:	f53f aefe 	bmi.w	800c7b2 <__ssvfiscanf_r+0x4a>
 800c9b6:	9b00      	ldr	r3, [sp, #0]
 800c9b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c9ba:	1d19      	adds	r1, r3, #4
 800c9bc:	9100      	str	r1, [sp, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	07c0      	lsls	r0, r0, #31
 800c9c2:	bf4c      	ite	mi
 800c9c4:	801a      	strhmi	r2, [r3, #0]
 800c9c6:	601a      	strpl	r2, [r3, #0]
 800c9c8:	e6f3      	b.n	800c7b2 <__ssvfiscanf_r+0x4a>
 800c9ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	4798      	blx	r3
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d0bf      	beq.n	800c956 <__ssvfiscanf_r+0x1ee>
 800c9d6:	e79f      	b.n	800c918 <__ssvfiscanf_r+0x1b0>
 800c9d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c9da:	3201      	adds	r2, #1
 800c9dc:	9245      	str	r2, [sp, #276]	@ 0x114
 800c9de:	6862      	ldr	r2, [r4, #4]
 800c9e0:	3a01      	subs	r2, #1
 800c9e2:	2a00      	cmp	r2, #0
 800c9e4:	6062      	str	r2, [r4, #4]
 800c9e6:	dd02      	ble.n	800c9ee <__ssvfiscanf_r+0x286>
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	6023      	str	r3, [r4, #0]
 800c9ec:	e7b6      	b.n	800c95c <__ssvfiscanf_r+0x1f4>
 800c9ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	4798      	blx	r3
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d0b0      	beq.n	800c95c <__ssvfiscanf_r+0x1f4>
 800c9fa:	e78d      	b.n	800c918 <__ssvfiscanf_r+0x1b0>
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	dc0f      	bgt.n	800ca20 <__ssvfiscanf_r+0x2b8>
 800ca00:	466b      	mov	r3, sp
 800ca02:	4622      	mov	r2, r4
 800ca04:	a941      	add	r1, sp, #260	@ 0x104
 800ca06:	4630      	mov	r0, r6
 800ca08:	f000 fa0a 	bl	800ce20 <_scanf_i>
 800ca0c:	e7b4      	b.n	800c978 <__ssvfiscanf_r+0x210>
 800ca0e:	bf00      	nop
 800ca10:	0800c6b9 	.word	0x0800c6b9
 800ca14:	0800c72f 	.word	0x0800c72f
 800ca18:	0800e591 	.word	0x0800e591
 800ca1c:	0800e697 	.word	0x0800e697
 800ca20:	4b0a      	ldr	r3, [pc, #40]	@ (800ca4c <__ssvfiscanf_r+0x2e4>)
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f43f aec5 	beq.w	800c7b2 <__ssvfiscanf_r+0x4a>
 800ca28:	466b      	mov	r3, sp
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	a941      	add	r1, sp, #260	@ 0x104
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f3af 8000 	nop.w
 800ca34:	e7a0      	b.n	800c978 <__ssvfiscanf_r+0x210>
 800ca36:	89a3      	ldrh	r3, [r4, #12]
 800ca38:	065b      	lsls	r3, r3, #25
 800ca3a:	f53f af71 	bmi.w	800c920 <__ssvfiscanf_r+0x1b8>
 800ca3e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ca42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca46:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ca48:	e7f9      	b.n	800ca3e <__ssvfiscanf_r+0x2d6>
 800ca4a:	bf00      	nop
 800ca4c:	00000000 	.word	0x00000000

0800ca50 <_printf_common>:
 800ca50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca54:	4616      	mov	r6, r2
 800ca56:	4698      	mov	r8, r3
 800ca58:	688a      	ldr	r2, [r1, #8]
 800ca5a:	690b      	ldr	r3, [r1, #16]
 800ca5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca60:	4293      	cmp	r3, r2
 800ca62:	bfb8      	it	lt
 800ca64:	4613      	movlt	r3, r2
 800ca66:	6033      	str	r3, [r6, #0]
 800ca68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca6c:	4607      	mov	r7, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	b10a      	cbz	r2, 800ca76 <_printf_common+0x26>
 800ca72:	3301      	adds	r3, #1
 800ca74:	6033      	str	r3, [r6, #0]
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	0699      	lsls	r1, r3, #26
 800ca7a:	bf42      	ittt	mi
 800ca7c:	6833      	ldrmi	r3, [r6, #0]
 800ca7e:	3302      	addmi	r3, #2
 800ca80:	6033      	strmi	r3, [r6, #0]
 800ca82:	6825      	ldr	r5, [r4, #0]
 800ca84:	f015 0506 	ands.w	r5, r5, #6
 800ca88:	d106      	bne.n	800ca98 <_printf_common+0x48>
 800ca8a:	f104 0a19 	add.w	sl, r4, #25
 800ca8e:	68e3      	ldr	r3, [r4, #12]
 800ca90:	6832      	ldr	r2, [r6, #0]
 800ca92:	1a9b      	subs	r3, r3, r2
 800ca94:	42ab      	cmp	r3, r5
 800ca96:	dc26      	bgt.n	800cae6 <_printf_common+0x96>
 800ca98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca9c:	6822      	ldr	r2, [r4, #0]
 800ca9e:	3b00      	subs	r3, #0
 800caa0:	bf18      	it	ne
 800caa2:	2301      	movne	r3, #1
 800caa4:	0692      	lsls	r2, r2, #26
 800caa6:	d42b      	bmi.n	800cb00 <_printf_common+0xb0>
 800caa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800caac:	4641      	mov	r1, r8
 800caae:	4638      	mov	r0, r7
 800cab0:	47c8      	blx	r9
 800cab2:	3001      	adds	r0, #1
 800cab4:	d01e      	beq.n	800caf4 <_printf_common+0xa4>
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	6922      	ldr	r2, [r4, #16]
 800caba:	f003 0306 	and.w	r3, r3, #6
 800cabe:	2b04      	cmp	r3, #4
 800cac0:	bf02      	ittt	eq
 800cac2:	68e5      	ldreq	r5, [r4, #12]
 800cac4:	6833      	ldreq	r3, [r6, #0]
 800cac6:	1aed      	subeq	r5, r5, r3
 800cac8:	68a3      	ldr	r3, [r4, #8]
 800caca:	bf0c      	ite	eq
 800cacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cad0:	2500      	movne	r5, #0
 800cad2:	4293      	cmp	r3, r2
 800cad4:	bfc4      	itt	gt
 800cad6:	1a9b      	subgt	r3, r3, r2
 800cad8:	18ed      	addgt	r5, r5, r3
 800cada:	2600      	movs	r6, #0
 800cadc:	341a      	adds	r4, #26
 800cade:	42b5      	cmp	r5, r6
 800cae0:	d11a      	bne.n	800cb18 <_printf_common+0xc8>
 800cae2:	2000      	movs	r0, #0
 800cae4:	e008      	b.n	800caf8 <_printf_common+0xa8>
 800cae6:	2301      	movs	r3, #1
 800cae8:	4652      	mov	r2, sl
 800caea:	4641      	mov	r1, r8
 800caec:	4638      	mov	r0, r7
 800caee:	47c8      	blx	r9
 800caf0:	3001      	adds	r0, #1
 800caf2:	d103      	bne.n	800cafc <_printf_common+0xac>
 800caf4:	f04f 30ff 	mov.w	r0, #4294967295
 800caf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafc:	3501      	adds	r5, #1
 800cafe:	e7c6      	b.n	800ca8e <_printf_common+0x3e>
 800cb00:	18e1      	adds	r1, r4, r3
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	2030      	movs	r0, #48	@ 0x30
 800cb06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cb0a:	4422      	add	r2, r4
 800cb0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cb10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cb14:	3302      	adds	r3, #2
 800cb16:	e7c7      	b.n	800caa8 <_printf_common+0x58>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	4641      	mov	r1, r8
 800cb1e:	4638      	mov	r0, r7
 800cb20:	47c8      	blx	r9
 800cb22:	3001      	adds	r0, #1
 800cb24:	d0e6      	beq.n	800caf4 <_printf_common+0xa4>
 800cb26:	3601      	adds	r6, #1
 800cb28:	e7d9      	b.n	800cade <_printf_common+0x8e>
	...

0800cb2c <_printf_i>:
 800cb2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	7e0f      	ldrb	r7, [r1, #24]
 800cb32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cb34:	2f78      	cmp	r7, #120	@ 0x78
 800cb36:	4691      	mov	r9, r2
 800cb38:	4680      	mov	r8, r0
 800cb3a:	460c      	mov	r4, r1
 800cb3c:	469a      	mov	sl, r3
 800cb3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cb42:	d807      	bhi.n	800cb54 <_printf_i+0x28>
 800cb44:	2f62      	cmp	r7, #98	@ 0x62
 800cb46:	d80a      	bhi.n	800cb5e <_printf_i+0x32>
 800cb48:	2f00      	cmp	r7, #0
 800cb4a:	f000 80d2 	beq.w	800ccf2 <_printf_i+0x1c6>
 800cb4e:	2f58      	cmp	r7, #88	@ 0x58
 800cb50:	f000 80b9 	beq.w	800ccc6 <_printf_i+0x19a>
 800cb54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb5c:	e03a      	b.n	800cbd4 <_printf_i+0xa8>
 800cb5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb62:	2b15      	cmp	r3, #21
 800cb64:	d8f6      	bhi.n	800cb54 <_printf_i+0x28>
 800cb66:	a101      	add	r1, pc, #4	@ (adr r1, 800cb6c <_printf_i+0x40>)
 800cb68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb6c:	0800cbc5 	.word	0x0800cbc5
 800cb70:	0800cbd9 	.word	0x0800cbd9
 800cb74:	0800cb55 	.word	0x0800cb55
 800cb78:	0800cb55 	.word	0x0800cb55
 800cb7c:	0800cb55 	.word	0x0800cb55
 800cb80:	0800cb55 	.word	0x0800cb55
 800cb84:	0800cbd9 	.word	0x0800cbd9
 800cb88:	0800cb55 	.word	0x0800cb55
 800cb8c:	0800cb55 	.word	0x0800cb55
 800cb90:	0800cb55 	.word	0x0800cb55
 800cb94:	0800cb55 	.word	0x0800cb55
 800cb98:	0800ccd9 	.word	0x0800ccd9
 800cb9c:	0800cc03 	.word	0x0800cc03
 800cba0:	0800cc93 	.word	0x0800cc93
 800cba4:	0800cb55 	.word	0x0800cb55
 800cba8:	0800cb55 	.word	0x0800cb55
 800cbac:	0800ccfb 	.word	0x0800ccfb
 800cbb0:	0800cb55 	.word	0x0800cb55
 800cbb4:	0800cc03 	.word	0x0800cc03
 800cbb8:	0800cb55 	.word	0x0800cb55
 800cbbc:	0800cb55 	.word	0x0800cb55
 800cbc0:	0800cc9b 	.word	0x0800cc9b
 800cbc4:	6833      	ldr	r3, [r6, #0]
 800cbc6:	1d1a      	adds	r2, r3, #4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	6032      	str	r2, [r6, #0]
 800cbcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e09d      	b.n	800cd14 <_printf_i+0x1e8>
 800cbd8:	6833      	ldr	r3, [r6, #0]
 800cbda:	6820      	ldr	r0, [r4, #0]
 800cbdc:	1d19      	adds	r1, r3, #4
 800cbde:	6031      	str	r1, [r6, #0]
 800cbe0:	0606      	lsls	r6, r0, #24
 800cbe2:	d501      	bpl.n	800cbe8 <_printf_i+0xbc>
 800cbe4:	681d      	ldr	r5, [r3, #0]
 800cbe6:	e003      	b.n	800cbf0 <_printf_i+0xc4>
 800cbe8:	0645      	lsls	r5, r0, #25
 800cbea:	d5fb      	bpl.n	800cbe4 <_printf_i+0xb8>
 800cbec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cbf0:	2d00      	cmp	r5, #0
 800cbf2:	da03      	bge.n	800cbfc <_printf_i+0xd0>
 800cbf4:	232d      	movs	r3, #45	@ 0x2d
 800cbf6:	426d      	negs	r5, r5
 800cbf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbfc:	4859      	ldr	r0, [pc, #356]	@ (800cd64 <_printf_i+0x238>)
 800cbfe:	230a      	movs	r3, #10
 800cc00:	e011      	b.n	800cc26 <_printf_i+0xfa>
 800cc02:	6821      	ldr	r1, [r4, #0]
 800cc04:	6833      	ldr	r3, [r6, #0]
 800cc06:	0608      	lsls	r0, r1, #24
 800cc08:	f853 5b04 	ldr.w	r5, [r3], #4
 800cc0c:	d402      	bmi.n	800cc14 <_printf_i+0xe8>
 800cc0e:	0649      	lsls	r1, r1, #25
 800cc10:	bf48      	it	mi
 800cc12:	b2ad      	uxthmi	r5, r5
 800cc14:	2f6f      	cmp	r7, #111	@ 0x6f
 800cc16:	4853      	ldr	r0, [pc, #332]	@ (800cd64 <_printf_i+0x238>)
 800cc18:	6033      	str	r3, [r6, #0]
 800cc1a:	bf14      	ite	ne
 800cc1c:	230a      	movne	r3, #10
 800cc1e:	2308      	moveq	r3, #8
 800cc20:	2100      	movs	r1, #0
 800cc22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cc26:	6866      	ldr	r6, [r4, #4]
 800cc28:	60a6      	str	r6, [r4, #8]
 800cc2a:	2e00      	cmp	r6, #0
 800cc2c:	bfa2      	ittt	ge
 800cc2e:	6821      	ldrge	r1, [r4, #0]
 800cc30:	f021 0104 	bicge.w	r1, r1, #4
 800cc34:	6021      	strge	r1, [r4, #0]
 800cc36:	b90d      	cbnz	r5, 800cc3c <_printf_i+0x110>
 800cc38:	2e00      	cmp	r6, #0
 800cc3a:	d04b      	beq.n	800ccd4 <_printf_i+0x1a8>
 800cc3c:	4616      	mov	r6, r2
 800cc3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc42:	fb03 5711 	mls	r7, r3, r1, r5
 800cc46:	5dc7      	ldrb	r7, [r0, r7]
 800cc48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc4c:	462f      	mov	r7, r5
 800cc4e:	42bb      	cmp	r3, r7
 800cc50:	460d      	mov	r5, r1
 800cc52:	d9f4      	bls.n	800cc3e <_printf_i+0x112>
 800cc54:	2b08      	cmp	r3, #8
 800cc56:	d10b      	bne.n	800cc70 <_printf_i+0x144>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	07df      	lsls	r7, r3, #31
 800cc5c:	d508      	bpl.n	800cc70 <_printf_i+0x144>
 800cc5e:	6923      	ldr	r3, [r4, #16]
 800cc60:	6861      	ldr	r1, [r4, #4]
 800cc62:	4299      	cmp	r1, r3
 800cc64:	bfde      	ittt	le
 800cc66:	2330      	movle	r3, #48	@ 0x30
 800cc68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc70:	1b92      	subs	r2, r2, r6
 800cc72:	6122      	str	r2, [r4, #16]
 800cc74:	f8cd a000 	str.w	sl, [sp]
 800cc78:	464b      	mov	r3, r9
 800cc7a:	aa03      	add	r2, sp, #12
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	4640      	mov	r0, r8
 800cc80:	f7ff fee6 	bl	800ca50 <_printf_common>
 800cc84:	3001      	adds	r0, #1
 800cc86:	d14a      	bne.n	800cd1e <_printf_i+0x1f2>
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8c:	b004      	add	sp, #16
 800cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	f043 0320 	orr.w	r3, r3, #32
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	4833      	ldr	r0, [pc, #204]	@ (800cd68 <_printf_i+0x23c>)
 800cc9c:	2778      	movs	r7, #120	@ 0x78
 800cc9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	6831      	ldr	r1, [r6, #0]
 800cca6:	061f      	lsls	r7, r3, #24
 800cca8:	f851 5b04 	ldr.w	r5, [r1], #4
 800ccac:	d402      	bmi.n	800ccb4 <_printf_i+0x188>
 800ccae:	065f      	lsls	r7, r3, #25
 800ccb0:	bf48      	it	mi
 800ccb2:	b2ad      	uxthmi	r5, r5
 800ccb4:	6031      	str	r1, [r6, #0]
 800ccb6:	07d9      	lsls	r1, r3, #31
 800ccb8:	bf44      	itt	mi
 800ccba:	f043 0320 	orrmi.w	r3, r3, #32
 800ccbe:	6023      	strmi	r3, [r4, #0]
 800ccc0:	b11d      	cbz	r5, 800ccca <_printf_i+0x19e>
 800ccc2:	2310      	movs	r3, #16
 800ccc4:	e7ac      	b.n	800cc20 <_printf_i+0xf4>
 800ccc6:	4827      	ldr	r0, [pc, #156]	@ (800cd64 <_printf_i+0x238>)
 800ccc8:	e7e9      	b.n	800cc9e <_printf_i+0x172>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	f023 0320 	bic.w	r3, r3, #32
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	e7f6      	b.n	800ccc2 <_printf_i+0x196>
 800ccd4:	4616      	mov	r6, r2
 800ccd6:	e7bd      	b.n	800cc54 <_printf_i+0x128>
 800ccd8:	6833      	ldr	r3, [r6, #0]
 800ccda:	6825      	ldr	r5, [r4, #0]
 800ccdc:	6961      	ldr	r1, [r4, #20]
 800ccde:	1d18      	adds	r0, r3, #4
 800cce0:	6030      	str	r0, [r6, #0]
 800cce2:	062e      	lsls	r6, r5, #24
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	d501      	bpl.n	800ccec <_printf_i+0x1c0>
 800cce8:	6019      	str	r1, [r3, #0]
 800ccea:	e002      	b.n	800ccf2 <_printf_i+0x1c6>
 800ccec:	0668      	lsls	r0, r5, #25
 800ccee:	d5fb      	bpl.n	800cce8 <_printf_i+0x1bc>
 800ccf0:	8019      	strh	r1, [r3, #0]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	6123      	str	r3, [r4, #16]
 800ccf6:	4616      	mov	r6, r2
 800ccf8:	e7bc      	b.n	800cc74 <_printf_i+0x148>
 800ccfa:	6833      	ldr	r3, [r6, #0]
 800ccfc:	1d1a      	adds	r2, r3, #4
 800ccfe:	6032      	str	r2, [r6, #0]
 800cd00:	681e      	ldr	r6, [r3, #0]
 800cd02:	6862      	ldr	r2, [r4, #4]
 800cd04:	2100      	movs	r1, #0
 800cd06:	4630      	mov	r0, r6
 800cd08:	f7f3 fa7a 	bl	8000200 <memchr>
 800cd0c:	b108      	cbz	r0, 800cd12 <_printf_i+0x1e6>
 800cd0e:	1b80      	subs	r0, r0, r6
 800cd10:	6060      	str	r0, [r4, #4]
 800cd12:	6863      	ldr	r3, [r4, #4]
 800cd14:	6123      	str	r3, [r4, #16]
 800cd16:	2300      	movs	r3, #0
 800cd18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd1c:	e7aa      	b.n	800cc74 <_printf_i+0x148>
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	4632      	mov	r2, r6
 800cd22:	4649      	mov	r1, r9
 800cd24:	4640      	mov	r0, r8
 800cd26:	47d0      	blx	sl
 800cd28:	3001      	adds	r0, #1
 800cd2a:	d0ad      	beq.n	800cc88 <_printf_i+0x15c>
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	079b      	lsls	r3, r3, #30
 800cd30:	d413      	bmi.n	800cd5a <_printf_i+0x22e>
 800cd32:	68e0      	ldr	r0, [r4, #12]
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	4298      	cmp	r0, r3
 800cd38:	bfb8      	it	lt
 800cd3a:	4618      	movlt	r0, r3
 800cd3c:	e7a6      	b.n	800cc8c <_printf_i+0x160>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	4632      	mov	r2, r6
 800cd42:	4649      	mov	r1, r9
 800cd44:	4640      	mov	r0, r8
 800cd46:	47d0      	blx	sl
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d09d      	beq.n	800cc88 <_printf_i+0x15c>
 800cd4c:	3501      	adds	r5, #1
 800cd4e:	68e3      	ldr	r3, [r4, #12]
 800cd50:	9903      	ldr	r1, [sp, #12]
 800cd52:	1a5b      	subs	r3, r3, r1
 800cd54:	42ab      	cmp	r3, r5
 800cd56:	dcf2      	bgt.n	800cd3e <_printf_i+0x212>
 800cd58:	e7eb      	b.n	800cd32 <_printf_i+0x206>
 800cd5a:	2500      	movs	r5, #0
 800cd5c:	f104 0619 	add.w	r6, r4, #25
 800cd60:	e7f5      	b.n	800cd4e <_printf_i+0x222>
 800cd62:	bf00      	nop
 800cd64:	0800e6a2 	.word	0x0800e6a2
 800cd68:	0800e6b3 	.word	0x0800e6b3

0800cd6c <_scanf_chars>:
 800cd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd70:	4615      	mov	r5, r2
 800cd72:	688a      	ldr	r2, [r1, #8]
 800cd74:	4680      	mov	r8, r0
 800cd76:	460c      	mov	r4, r1
 800cd78:	b932      	cbnz	r2, 800cd88 <_scanf_chars+0x1c>
 800cd7a:	698a      	ldr	r2, [r1, #24]
 800cd7c:	2a00      	cmp	r2, #0
 800cd7e:	bf14      	ite	ne
 800cd80:	f04f 32ff 	movne.w	r2, #4294967295
 800cd84:	2201      	moveq	r2, #1
 800cd86:	608a      	str	r2, [r1, #8]
 800cd88:	6822      	ldr	r2, [r4, #0]
 800cd8a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ce1c <_scanf_chars+0xb0>
 800cd8e:	06d1      	lsls	r1, r2, #27
 800cd90:	bf5f      	itttt	pl
 800cd92:	681a      	ldrpl	r2, [r3, #0]
 800cd94:	1d11      	addpl	r1, r2, #4
 800cd96:	6019      	strpl	r1, [r3, #0]
 800cd98:	6816      	ldrpl	r6, [r2, #0]
 800cd9a:	2700      	movs	r7, #0
 800cd9c:	69a0      	ldr	r0, [r4, #24]
 800cd9e:	b188      	cbz	r0, 800cdc4 <_scanf_chars+0x58>
 800cda0:	2801      	cmp	r0, #1
 800cda2:	d107      	bne.n	800cdb4 <_scanf_chars+0x48>
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	781a      	ldrb	r2, [r3, #0]
 800cda8:	6963      	ldr	r3, [r4, #20]
 800cdaa:	5c9b      	ldrb	r3, [r3, r2]
 800cdac:	b953      	cbnz	r3, 800cdc4 <_scanf_chars+0x58>
 800cdae:	2f00      	cmp	r7, #0
 800cdb0:	d031      	beq.n	800ce16 <_scanf_chars+0xaa>
 800cdb2:	e022      	b.n	800cdfa <_scanf_chars+0x8e>
 800cdb4:	2802      	cmp	r0, #2
 800cdb6:	d120      	bne.n	800cdfa <_scanf_chars+0x8e>
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cdc0:	071b      	lsls	r3, r3, #28
 800cdc2:	d41a      	bmi.n	800cdfa <_scanf_chars+0x8e>
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	06da      	lsls	r2, r3, #27
 800cdc8:	bf5e      	ittt	pl
 800cdca:	682b      	ldrpl	r3, [r5, #0]
 800cdcc:	781b      	ldrbpl	r3, [r3, #0]
 800cdce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cdd2:	682a      	ldr	r2, [r5, #0]
 800cdd4:	686b      	ldr	r3, [r5, #4]
 800cdd6:	3201      	adds	r2, #1
 800cdd8:	602a      	str	r2, [r5, #0]
 800cdda:	68a2      	ldr	r2, [r4, #8]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	3a01      	subs	r2, #1
 800cde0:	606b      	str	r3, [r5, #4]
 800cde2:	3701      	adds	r7, #1
 800cde4:	60a2      	str	r2, [r4, #8]
 800cde6:	b142      	cbz	r2, 800cdfa <_scanf_chars+0x8e>
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dcd7      	bgt.n	800cd9c <_scanf_chars+0x30>
 800cdec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	4798      	blx	r3
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d0d0      	beq.n	800cd9c <_scanf_chars+0x30>
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	f013 0310 	ands.w	r3, r3, #16
 800ce00:	d105      	bne.n	800ce0e <_scanf_chars+0xa2>
 800ce02:	68e2      	ldr	r2, [r4, #12]
 800ce04:	3201      	adds	r2, #1
 800ce06:	60e2      	str	r2, [r4, #12]
 800ce08:	69a2      	ldr	r2, [r4, #24]
 800ce0a:	b102      	cbz	r2, 800ce0e <_scanf_chars+0xa2>
 800ce0c:	7033      	strb	r3, [r6, #0]
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	443b      	add	r3, r7
 800ce12:	6123      	str	r3, [r4, #16]
 800ce14:	2000      	movs	r0, #0
 800ce16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1a:	bf00      	nop
 800ce1c:	0800e591 	.word	0x0800e591

0800ce20 <_scanf_i>:
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	4698      	mov	r8, r3
 800ce26:	4b74      	ldr	r3, [pc, #464]	@ (800cff8 <_scanf_i+0x1d8>)
 800ce28:	460c      	mov	r4, r1
 800ce2a:	4682      	mov	sl, r0
 800ce2c:	4616      	mov	r6, r2
 800ce2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce32:	b087      	sub	sp, #28
 800ce34:	ab03      	add	r3, sp, #12
 800ce36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce3a:	4b70      	ldr	r3, [pc, #448]	@ (800cffc <_scanf_i+0x1dc>)
 800ce3c:	69a1      	ldr	r1, [r4, #24]
 800ce3e:	4a70      	ldr	r2, [pc, #448]	@ (800d000 <_scanf_i+0x1e0>)
 800ce40:	2903      	cmp	r1, #3
 800ce42:	bf08      	it	eq
 800ce44:	461a      	moveq	r2, r3
 800ce46:	68a3      	ldr	r3, [r4, #8]
 800ce48:	9201      	str	r2, [sp, #4]
 800ce4a:	1e5a      	subs	r2, r3, #1
 800ce4c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ce50:	bf88      	it	hi
 800ce52:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ce56:	4627      	mov	r7, r4
 800ce58:	bf82      	ittt	hi
 800ce5a:	eb03 0905 	addhi.w	r9, r3, r5
 800ce5e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ce62:	60a3      	strhi	r3, [r4, #8]
 800ce64:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ce68:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ce6c:	bf98      	it	ls
 800ce6e:	f04f 0900 	movls.w	r9, #0
 800ce72:	6023      	str	r3, [r4, #0]
 800ce74:	463d      	mov	r5, r7
 800ce76:	f04f 0b00 	mov.w	fp, #0
 800ce7a:	6831      	ldr	r1, [r6, #0]
 800ce7c:	ab03      	add	r3, sp, #12
 800ce7e:	7809      	ldrb	r1, [r1, #0]
 800ce80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ce84:	2202      	movs	r2, #2
 800ce86:	f7f3 f9bb 	bl	8000200 <memchr>
 800ce8a:	b328      	cbz	r0, 800ced8 <_scanf_i+0xb8>
 800ce8c:	f1bb 0f01 	cmp.w	fp, #1
 800ce90:	d159      	bne.n	800cf46 <_scanf_i+0x126>
 800ce92:	6862      	ldr	r2, [r4, #4]
 800ce94:	b92a      	cbnz	r2, 800cea2 <_scanf_i+0x82>
 800ce96:	6822      	ldr	r2, [r4, #0]
 800ce98:	2108      	movs	r1, #8
 800ce9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce9e:	6061      	str	r1, [r4, #4]
 800cea0:	6022      	str	r2, [r4, #0]
 800cea2:	6822      	ldr	r2, [r4, #0]
 800cea4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800cea8:	6022      	str	r2, [r4, #0]
 800ceaa:	68a2      	ldr	r2, [r4, #8]
 800ceac:	1e51      	subs	r1, r2, #1
 800ceae:	60a1      	str	r1, [r4, #8]
 800ceb0:	b192      	cbz	r2, 800ced8 <_scanf_i+0xb8>
 800ceb2:	6832      	ldr	r2, [r6, #0]
 800ceb4:	1c51      	adds	r1, r2, #1
 800ceb6:	6031      	str	r1, [r6, #0]
 800ceb8:	7812      	ldrb	r2, [r2, #0]
 800ceba:	f805 2b01 	strb.w	r2, [r5], #1
 800cebe:	6872      	ldr	r2, [r6, #4]
 800cec0:	3a01      	subs	r2, #1
 800cec2:	2a00      	cmp	r2, #0
 800cec4:	6072      	str	r2, [r6, #4]
 800cec6:	dc07      	bgt.n	800ced8 <_scanf_i+0xb8>
 800cec8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800cecc:	4631      	mov	r1, r6
 800cece:	4650      	mov	r0, sl
 800ced0:	4790      	blx	r2
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f040 8085 	bne.w	800cfe2 <_scanf_i+0x1c2>
 800ced8:	f10b 0b01 	add.w	fp, fp, #1
 800cedc:	f1bb 0f03 	cmp.w	fp, #3
 800cee0:	d1cb      	bne.n	800ce7a <_scanf_i+0x5a>
 800cee2:	6863      	ldr	r3, [r4, #4]
 800cee4:	b90b      	cbnz	r3, 800ceea <_scanf_i+0xca>
 800cee6:	230a      	movs	r3, #10
 800cee8:	6063      	str	r3, [r4, #4]
 800ceea:	6863      	ldr	r3, [r4, #4]
 800ceec:	4945      	ldr	r1, [pc, #276]	@ (800d004 <_scanf_i+0x1e4>)
 800ceee:	6960      	ldr	r0, [r4, #20]
 800cef0:	1ac9      	subs	r1, r1, r3
 800cef2:	f000 f889 	bl	800d008 <__sccl>
 800cef6:	f04f 0b00 	mov.w	fp, #0
 800cefa:	68a3      	ldr	r3, [r4, #8]
 800cefc:	6822      	ldr	r2, [r4, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d03d      	beq.n	800cf7e <_scanf_i+0x15e>
 800cf02:	6831      	ldr	r1, [r6, #0]
 800cf04:	6960      	ldr	r0, [r4, #20]
 800cf06:	f891 c000 	ldrb.w	ip, [r1]
 800cf0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d035      	beq.n	800cf7e <_scanf_i+0x15e>
 800cf12:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800cf16:	d124      	bne.n	800cf62 <_scanf_i+0x142>
 800cf18:	0510      	lsls	r0, r2, #20
 800cf1a:	d522      	bpl.n	800cf62 <_scanf_i+0x142>
 800cf1c:	f10b 0b01 	add.w	fp, fp, #1
 800cf20:	f1b9 0f00 	cmp.w	r9, #0
 800cf24:	d003      	beq.n	800cf2e <_scanf_i+0x10e>
 800cf26:	3301      	adds	r3, #1
 800cf28:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	6873      	ldr	r3, [r6, #4]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	6073      	str	r3, [r6, #4]
 800cf36:	dd1b      	ble.n	800cf70 <_scanf_i+0x150>
 800cf38:	6833      	ldr	r3, [r6, #0]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	6033      	str	r3, [r6, #0]
 800cf3e:	68a3      	ldr	r3, [r4, #8]
 800cf40:	3b01      	subs	r3, #1
 800cf42:	60a3      	str	r3, [r4, #8]
 800cf44:	e7d9      	b.n	800cefa <_scanf_i+0xda>
 800cf46:	f1bb 0f02 	cmp.w	fp, #2
 800cf4a:	d1ae      	bne.n	800ceaa <_scanf_i+0x8a>
 800cf4c:	6822      	ldr	r2, [r4, #0]
 800cf4e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800cf52:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cf56:	d1bf      	bne.n	800ced8 <_scanf_i+0xb8>
 800cf58:	2110      	movs	r1, #16
 800cf5a:	6061      	str	r1, [r4, #4]
 800cf5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf60:	e7a2      	b.n	800cea8 <_scanf_i+0x88>
 800cf62:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800cf66:	6022      	str	r2, [r4, #0]
 800cf68:	780b      	ldrb	r3, [r1, #0]
 800cf6a:	f805 3b01 	strb.w	r3, [r5], #1
 800cf6e:	e7de      	b.n	800cf2e <_scanf_i+0x10e>
 800cf70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cf74:	4631      	mov	r1, r6
 800cf76:	4650      	mov	r0, sl
 800cf78:	4798      	blx	r3
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d0df      	beq.n	800cf3e <_scanf_i+0x11e>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	05d9      	lsls	r1, r3, #23
 800cf82:	d50d      	bpl.n	800cfa0 <_scanf_i+0x180>
 800cf84:	42bd      	cmp	r5, r7
 800cf86:	d909      	bls.n	800cf9c <_scanf_i+0x17c>
 800cf88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cf8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf90:	4632      	mov	r2, r6
 800cf92:	4650      	mov	r0, sl
 800cf94:	4798      	blx	r3
 800cf96:	f105 39ff 	add.w	r9, r5, #4294967295
 800cf9a:	464d      	mov	r5, r9
 800cf9c:	42bd      	cmp	r5, r7
 800cf9e:	d028      	beq.n	800cff2 <_scanf_i+0x1d2>
 800cfa0:	6822      	ldr	r2, [r4, #0]
 800cfa2:	f012 0210 	ands.w	r2, r2, #16
 800cfa6:	d113      	bne.n	800cfd0 <_scanf_i+0x1b0>
 800cfa8:	702a      	strb	r2, [r5, #0]
 800cfaa:	6863      	ldr	r3, [r4, #4]
 800cfac:	9e01      	ldr	r6, [sp, #4]
 800cfae:	4639      	mov	r1, r7
 800cfb0:	4650      	mov	r0, sl
 800cfb2:	47b0      	blx	r6
 800cfb4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb8:	6821      	ldr	r1, [r4, #0]
 800cfba:	1d1a      	adds	r2, r3, #4
 800cfbc:	f8c8 2000 	str.w	r2, [r8]
 800cfc0:	f011 0f20 	tst.w	r1, #32
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	d00f      	beq.n	800cfe8 <_scanf_i+0x1c8>
 800cfc8:	6018      	str	r0, [r3, #0]
 800cfca:	68e3      	ldr	r3, [r4, #12]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	60e3      	str	r3, [r4, #12]
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	1bed      	subs	r5, r5, r7
 800cfd4:	445d      	add	r5, fp
 800cfd6:	442b      	add	r3, r5
 800cfd8:	6123      	str	r3, [r4, #16]
 800cfda:	2000      	movs	r0, #0
 800cfdc:	b007      	add	sp, #28
 800cfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe2:	f04f 0b00 	mov.w	fp, #0
 800cfe6:	e7ca      	b.n	800cf7e <_scanf_i+0x15e>
 800cfe8:	07ca      	lsls	r2, r1, #31
 800cfea:	bf4c      	ite	mi
 800cfec:	8018      	strhmi	r0, [r3, #0]
 800cfee:	6018      	strpl	r0, [r3, #0]
 800cff0:	e7eb      	b.n	800cfca <_scanf_i+0x1aa>
 800cff2:	2001      	movs	r0, #1
 800cff4:	e7f2      	b.n	800cfdc <_scanf_i+0x1bc>
 800cff6:	bf00      	nop
 800cff8:	0800e0d0 	.word	0x0800e0d0
 800cffc:	0800c031 	.word	0x0800c031
 800d000:	0800d27d 	.word	0x0800d27d
 800d004:	0800e6d4 	.word	0x0800e6d4

0800d008 <__sccl>:
 800d008:	b570      	push	{r4, r5, r6, lr}
 800d00a:	780b      	ldrb	r3, [r1, #0]
 800d00c:	4604      	mov	r4, r0
 800d00e:	2b5e      	cmp	r3, #94	@ 0x5e
 800d010:	bf0b      	itete	eq
 800d012:	784b      	ldrbeq	r3, [r1, #1]
 800d014:	1c4a      	addne	r2, r1, #1
 800d016:	1c8a      	addeq	r2, r1, #2
 800d018:	2100      	movne	r1, #0
 800d01a:	bf08      	it	eq
 800d01c:	2101      	moveq	r1, #1
 800d01e:	3801      	subs	r0, #1
 800d020:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d024:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d028:	42a8      	cmp	r0, r5
 800d02a:	d1fb      	bne.n	800d024 <__sccl+0x1c>
 800d02c:	b90b      	cbnz	r3, 800d032 <__sccl+0x2a>
 800d02e:	1e50      	subs	r0, r2, #1
 800d030:	bd70      	pop	{r4, r5, r6, pc}
 800d032:	f081 0101 	eor.w	r1, r1, #1
 800d036:	54e1      	strb	r1, [r4, r3]
 800d038:	4610      	mov	r0, r2
 800d03a:	4602      	mov	r2, r0
 800d03c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d040:	2d2d      	cmp	r5, #45	@ 0x2d
 800d042:	d005      	beq.n	800d050 <__sccl+0x48>
 800d044:	2d5d      	cmp	r5, #93	@ 0x5d
 800d046:	d016      	beq.n	800d076 <__sccl+0x6e>
 800d048:	2d00      	cmp	r5, #0
 800d04a:	d0f1      	beq.n	800d030 <__sccl+0x28>
 800d04c:	462b      	mov	r3, r5
 800d04e:	e7f2      	b.n	800d036 <__sccl+0x2e>
 800d050:	7846      	ldrb	r6, [r0, #1]
 800d052:	2e5d      	cmp	r6, #93	@ 0x5d
 800d054:	d0fa      	beq.n	800d04c <__sccl+0x44>
 800d056:	42b3      	cmp	r3, r6
 800d058:	dcf8      	bgt.n	800d04c <__sccl+0x44>
 800d05a:	3002      	adds	r0, #2
 800d05c:	461a      	mov	r2, r3
 800d05e:	3201      	adds	r2, #1
 800d060:	4296      	cmp	r6, r2
 800d062:	54a1      	strb	r1, [r4, r2]
 800d064:	dcfb      	bgt.n	800d05e <__sccl+0x56>
 800d066:	1af2      	subs	r2, r6, r3
 800d068:	3a01      	subs	r2, #1
 800d06a:	1c5d      	adds	r5, r3, #1
 800d06c:	42b3      	cmp	r3, r6
 800d06e:	bfa8      	it	ge
 800d070:	2200      	movge	r2, #0
 800d072:	18ab      	adds	r3, r5, r2
 800d074:	e7e1      	b.n	800d03a <__sccl+0x32>
 800d076:	4610      	mov	r0, r2
 800d078:	e7da      	b.n	800d030 <__sccl+0x28>

0800d07a <__submore>:
 800d07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d07e:	460c      	mov	r4, r1
 800d080:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d082:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d086:	4299      	cmp	r1, r3
 800d088:	d11d      	bne.n	800d0c6 <__submore+0x4c>
 800d08a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d08e:	f7ff f92f 	bl	800c2f0 <_malloc_r>
 800d092:	b918      	cbnz	r0, 800d09c <__submore+0x22>
 800d094:	f04f 30ff 	mov.w	r0, #4294967295
 800d098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d09c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d0a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d0a6:	6360      	str	r0, [r4, #52]	@ 0x34
 800d0a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d0ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d0b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d0b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d0b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d0bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d0c0:	6020      	str	r0, [r4, #0]
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	e7e8      	b.n	800d098 <__submore+0x1e>
 800d0c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d0c8:	0077      	lsls	r7, r6, #1
 800d0ca:	463a      	mov	r2, r7
 800d0cc:	f000 f83a 	bl	800d144 <_realloc_r>
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d0de      	beq.n	800d094 <__submore+0x1a>
 800d0d6:	eb00 0806 	add.w	r8, r0, r6
 800d0da:	4601      	mov	r1, r0
 800d0dc:	4632      	mov	r2, r6
 800d0de:	4640      	mov	r0, r8
 800d0e0:	f7ff f88c 	bl	800c1fc <memcpy>
 800d0e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d0e8:	f8c4 8000 	str.w	r8, [r4]
 800d0ec:	e7e9      	b.n	800d0c2 <__submore+0x48>

0800d0ee <memmove>:
 800d0ee:	4288      	cmp	r0, r1
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	eb01 0402 	add.w	r4, r1, r2
 800d0f6:	d902      	bls.n	800d0fe <memmove+0x10>
 800d0f8:	4284      	cmp	r4, r0
 800d0fa:	4623      	mov	r3, r4
 800d0fc:	d807      	bhi.n	800d10e <memmove+0x20>
 800d0fe:	1e43      	subs	r3, r0, #1
 800d100:	42a1      	cmp	r1, r4
 800d102:	d008      	beq.n	800d116 <memmove+0x28>
 800d104:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d108:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d10c:	e7f8      	b.n	800d100 <memmove+0x12>
 800d10e:	4402      	add	r2, r0
 800d110:	4601      	mov	r1, r0
 800d112:	428a      	cmp	r2, r1
 800d114:	d100      	bne.n	800d118 <memmove+0x2a>
 800d116:	bd10      	pop	{r4, pc}
 800d118:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d11c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d120:	e7f7      	b.n	800d112 <memmove+0x24>
	...

0800d124 <_sbrk_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d06      	ldr	r5, [pc, #24]	@ (800d140 <_sbrk_r+0x1c>)
 800d128:	2300      	movs	r3, #0
 800d12a:	4604      	mov	r4, r0
 800d12c:	4608      	mov	r0, r1
 800d12e:	602b      	str	r3, [r5, #0]
 800d130:	f7f6 fe4a 	bl	8003dc8 <_sbrk>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_sbrk_r+0x1a>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_sbrk_r+0x1a>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	200009e8 	.word	0x200009e8

0800d144 <_realloc_r>:
 800d144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d148:	4680      	mov	r8, r0
 800d14a:	4615      	mov	r5, r2
 800d14c:	460c      	mov	r4, r1
 800d14e:	b921      	cbnz	r1, 800d15a <_realloc_r+0x16>
 800d150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d154:	4611      	mov	r1, r2
 800d156:	f7ff b8cb 	b.w	800c2f0 <_malloc_r>
 800d15a:	b92a      	cbnz	r2, 800d168 <_realloc_r+0x24>
 800d15c:	f7ff f85c 	bl	800c218 <_free_r>
 800d160:	2400      	movs	r4, #0
 800d162:	4620      	mov	r0, r4
 800d164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d168:	f000 f88a 	bl	800d280 <_malloc_usable_size_r>
 800d16c:	4285      	cmp	r5, r0
 800d16e:	4606      	mov	r6, r0
 800d170:	d802      	bhi.n	800d178 <_realloc_r+0x34>
 800d172:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d176:	d8f4      	bhi.n	800d162 <_realloc_r+0x1e>
 800d178:	4629      	mov	r1, r5
 800d17a:	4640      	mov	r0, r8
 800d17c:	f7ff f8b8 	bl	800c2f0 <_malloc_r>
 800d180:	4607      	mov	r7, r0
 800d182:	2800      	cmp	r0, #0
 800d184:	d0ec      	beq.n	800d160 <_realloc_r+0x1c>
 800d186:	42b5      	cmp	r5, r6
 800d188:	462a      	mov	r2, r5
 800d18a:	4621      	mov	r1, r4
 800d18c:	bf28      	it	cs
 800d18e:	4632      	movcs	r2, r6
 800d190:	f7ff f834 	bl	800c1fc <memcpy>
 800d194:	4621      	mov	r1, r4
 800d196:	4640      	mov	r0, r8
 800d198:	f7ff f83e 	bl	800c218 <_free_r>
 800d19c:	463c      	mov	r4, r7
 800d19e:	e7e0      	b.n	800d162 <_realloc_r+0x1e>

0800d1a0 <_strtoul_l.constprop.0>:
 800d1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	4e34      	ldr	r6, [pc, #208]	@ (800d278 <_strtoul_l.constprop.0+0xd8>)
 800d1a6:	4686      	mov	lr, r0
 800d1a8:	460d      	mov	r5, r1
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1b0:	5d37      	ldrb	r7, [r6, r4]
 800d1b2:	f017 0708 	ands.w	r7, r7, #8
 800d1b6:	d1f8      	bne.n	800d1aa <_strtoul_l.constprop.0+0xa>
 800d1b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d1ba:	d12f      	bne.n	800d21c <_strtoul_l.constprop.0+0x7c>
 800d1bc:	782c      	ldrb	r4, [r5, #0]
 800d1be:	2701      	movs	r7, #1
 800d1c0:	1c85      	adds	r5, r0, #2
 800d1c2:	f033 0010 	bics.w	r0, r3, #16
 800d1c6:	d109      	bne.n	800d1dc <_strtoul_l.constprop.0+0x3c>
 800d1c8:	2c30      	cmp	r4, #48	@ 0x30
 800d1ca:	d12c      	bne.n	800d226 <_strtoul_l.constprop.0+0x86>
 800d1cc:	7828      	ldrb	r0, [r5, #0]
 800d1ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d1d2:	2858      	cmp	r0, #88	@ 0x58
 800d1d4:	d127      	bne.n	800d226 <_strtoul_l.constprop.0+0x86>
 800d1d6:	786c      	ldrb	r4, [r5, #1]
 800d1d8:	2310      	movs	r3, #16
 800d1da:	3502      	adds	r5, #2
 800d1dc:	f04f 38ff 	mov.w	r8, #4294967295
 800d1e0:	2600      	movs	r6, #0
 800d1e2:	fbb8 f8f3 	udiv	r8, r8, r3
 800d1e6:	fb03 f908 	mul.w	r9, r3, r8
 800d1ea:	ea6f 0909 	mvn.w	r9, r9
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d1f4:	f1bc 0f09 	cmp.w	ip, #9
 800d1f8:	d81c      	bhi.n	800d234 <_strtoul_l.constprop.0+0x94>
 800d1fa:	4664      	mov	r4, ip
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	dd2a      	ble.n	800d256 <_strtoul_l.constprop.0+0xb6>
 800d200:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d204:	d007      	beq.n	800d216 <_strtoul_l.constprop.0+0x76>
 800d206:	4580      	cmp	r8, r0
 800d208:	d322      	bcc.n	800d250 <_strtoul_l.constprop.0+0xb0>
 800d20a:	d101      	bne.n	800d210 <_strtoul_l.constprop.0+0x70>
 800d20c:	45a1      	cmp	r9, r4
 800d20e:	db1f      	blt.n	800d250 <_strtoul_l.constprop.0+0xb0>
 800d210:	fb00 4003 	mla	r0, r0, r3, r4
 800d214:	2601      	movs	r6, #1
 800d216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d21a:	e7e9      	b.n	800d1f0 <_strtoul_l.constprop.0+0x50>
 800d21c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d21e:	bf04      	itt	eq
 800d220:	782c      	ldrbeq	r4, [r5, #0]
 800d222:	1c85      	addeq	r5, r0, #2
 800d224:	e7cd      	b.n	800d1c2 <_strtoul_l.constprop.0+0x22>
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1d8      	bne.n	800d1dc <_strtoul_l.constprop.0+0x3c>
 800d22a:	2c30      	cmp	r4, #48	@ 0x30
 800d22c:	bf0c      	ite	eq
 800d22e:	2308      	moveq	r3, #8
 800d230:	230a      	movne	r3, #10
 800d232:	e7d3      	b.n	800d1dc <_strtoul_l.constprop.0+0x3c>
 800d234:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d238:	f1bc 0f19 	cmp.w	ip, #25
 800d23c:	d801      	bhi.n	800d242 <_strtoul_l.constprop.0+0xa2>
 800d23e:	3c37      	subs	r4, #55	@ 0x37
 800d240:	e7dc      	b.n	800d1fc <_strtoul_l.constprop.0+0x5c>
 800d242:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d246:	f1bc 0f19 	cmp.w	ip, #25
 800d24a:	d804      	bhi.n	800d256 <_strtoul_l.constprop.0+0xb6>
 800d24c:	3c57      	subs	r4, #87	@ 0x57
 800d24e:	e7d5      	b.n	800d1fc <_strtoul_l.constprop.0+0x5c>
 800d250:	f04f 36ff 	mov.w	r6, #4294967295
 800d254:	e7df      	b.n	800d216 <_strtoul_l.constprop.0+0x76>
 800d256:	1c73      	adds	r3, r6, #1
 800d258:	d106      	bne.n	800d268 <_strtoul_l.constprop.0+0xc8>
 800d25a:	2322      	movs	r3, #34	@ 0x22
 800d25c:	f8ce 3000 	str.w	r3, [lr]
 800d260:	4630      	mov	r0, r6
 800d262:	b932      	cbnz	r2, 800d272 <_strtoul_l.constprop.0+0xd2>
 800d264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d268:	b107      	cbz	r7, 800d26c <_strtoul_l.constprop.0+0xcc>
 800d26a:	4240      	negs	r0, r0
 800d26c:	2a00      	cmp	r2, #0
 800d26e:	d0f9      	beq.n	800d264 <_strtoul_l.constprop.0+0xc4>
 800d270:	b106      	cbz	r6, 800d274 <_strtoul_l.constprop.0+0xd4>
 800d272:	1e69      	subs	r1, r5, #1
 800d274:	6011      	str	r1, [r2, #0]
 800d276:	e7f5      	b.n	800d264 <_strtoul_l.constprop.0+0xc4>
 800d278:	0800e591 	.word	0x0800e591

0800d27c <_strtoul_r>:
 800d27c:	f7ff bf90 	b.w	800d1a0 <_strtoul_l.constprop.0>

0800d280 <_malloc_usable_size_r>:
 800d280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d284:	1f18      	subs	r0, r3, #4
 800d286:	2b00      	cmp	r3, #0
 800d288:	bfbc      	itt	lt
 800d28a:	580b      	ldrlt	r3, [r1, r0]
 800d28c:	18c0      	addlt	r0, r0, r3
 800d28e:	4770      	bx	lr

0800d290 <_init>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	bf00      	nop
 800d294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d296:	bc08      	pop	{r3}
 800d298:	469e      	mov	lr, r3
 800d29a:	4770      	bx	lr

0800d29c <_fini>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	bf00      	nop
 800d2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a2:	bc08      	pop	{r3}
 800d2a4:	469e      	mov	lr, r3
 800d2a6:	4770      	bx	lr
