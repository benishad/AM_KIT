
AMKIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002158  0800f58c  0800f58c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116e4  080116e4  000141bc  2**0
                  CONTENTS
  4 .ARM          00000008  080116e4  080116e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116ec  080116ec  000141bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116ec  080116ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116f0  080116f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000046c  20000000  080116f4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       000001bc  10000000  08011b60  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000da0  2000046c  2000046c  0001446c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000120c  2000120c  0001446c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000141bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000213e3  00000000  00000000  000141ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004eaa  00000000  00000000  000355cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  0003a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000171f  00000000  00000000  0003c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029279  00000000  00000000  0003d8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002883f  00000000  00000000  00066b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deb23  00000000  00000000  0008f3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016ded2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008800  00000000  00000000  0016df18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00176718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000046c 	.word	0x2000046c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f574 	.word	0x0800f574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000470 	.word	0x20000470
 80001cc:	0800f574 	.word	0x0800f574

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <FM25V10_Select_Command>:


// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 파라미터로 위 매크로 명령어 받아서 전달하는 함수
void FM25V10_Select_Command(uint8_t command)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    // SPI CS 핀을 LOW로 설정하여
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY); // 명령어 전송
 800059a:	1df9      	adds	r1, r7, #7
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	2201      	movs	r2, #1
 80005a2:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <FM25V10_Select_Command+0x20>)
 80005a4:	f007 fdc7 	bl	8008136 <HAL_SPI_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000e28 	.word	0x20000e28

080005b4 <FM25V10_Set_Write_Enable>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 내부 헬퍼: 쓰기 가능 상태 설정
static void FM25V10_Set_Write_Enable(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    uint8_t CMD = CMD_WREN; // WREN 명령어 정의
 80005ba:	2306      	movs	r3, #6
 80005bc:	71fb      	strb	r3, [r7, #7]

    SPI_CS_LOW(); // CS 핀을 LOW로 설정하여 SPI 통신 시작
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <FM25V10_Set_Write_Enable+0x30>)
 80005c4:	f005 fc74 	bl	8005eb0 <HAL_GPIO_WritePin>
    FM25V10_Select_Command(CMD); // WREN 명령 전송
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffe0 	bl	8000590 <FM25V10_Select_Command>
    SPI_CS_HIGH(); // CS 핀을 HIGH로 설정하여 SPI 통신 종료
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <FM25V10_Set_Write_Enable+0x30>)
 80005d6:	f005 fc6b 	bl	8005eb0 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000

080005e8 <FM25V10_Set_Write_Disable>:

static void FM25V10_Set_Write_Disable(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
    uint8_t CMD = CMD_WRDI; // WRDI 명령어 정의
 80005ee:	2304      	movs	r3, #4
 80005f0:	71fb      	strb	r3, [r7, #7]

    SPI_CS_LOW(); // CS 핀을 LOW로 설정하여 SPI 통신 시작
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <FM25V10_Set_Write_Disable+0x30>)
 80005f8:	f005 fc5a 	bl	8005eb0 <HAL_GPIO_WritePin>
    FM25V10_Select_Command(CMD); // WRDI 명령 전송
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffc6 	bl	8000590 <FM25V10_Select_Command>
    SPI_CS_HIGH(); // CS 핀을 HIGH로 설정하여 SPI 통신 종료
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <FM25V10_Set_Write_Disable+0x30>)
 800060a:	f005 fc51 	bl	8005eb0 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020000 	.word	0x40020000

0800061c <Memory_Write_Enable>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

void Memory_Write_Enable(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // FM25V10 메모리 쓰기 가능 상태로 설정
    FM25V10_Set_Write_Enable();
 8000620:	f7ff ffc8 	bl	80005b4 <FM25V10_Set_Write_Enable>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <Memory_Write_Disable>:


void Memory_Write_Disable(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    // FM25V10 메모리 쓰기 불가능 상태로 설정
    FM25V10_Set_Write_Disable();
 800062c:	f7ff ffdc 	bl	80005e8 <FM25V10_Set_Write_Disable>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <FM25V10_Write>:
// addr : 메모리 주소 (0x0000 ~ 0x1FFF)
// pData: 쓸 데이터 버퍼  
// len  : 바이트 수  
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef FM25V10_Write(uint16_t addr, const uint8_t *pData, uint16_t len)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	80fb      	strh	r3, [r7, #6]
 8000640:	4613      	mov	r3, r2
 8000642:	80bb      	strh	r3, [r7, #4]
    // 길이가 0이면 예외
    if (len == 0 || pData == NULL)
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <FM25V10_Write+0x1c>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <FM25V10_Write+0x20>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000650:	2301      	movs	r3, #1
 8000652:	e039      	b.n	80006c8 <FM25V10_Write+0x94>
    }

    // 1) 쓰기 허가
    Memory_Write_Enable();
 8000654:	f7ff ffe2 	bl	800061c <Memory_Write_Enable>

    // 2) CS LOW , FRAM 활성화
    SPI_CS_LOW();
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	481c      	ldr	r0, [pc, #112]	@ (80006d0 <FM25V10_Write+0x9c>)
 800065e:	f005 fc27 	bl	8005eb0 <HAL_GPIO_WritePin>
        (addr >> 8) & 0xFF,
        (addr      ) & 0xFF
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, 3, HAL_MAX_DELAY);
#endif
    uint8_t header[4] = {
 8000662:	2302      	movs	r3, #2
 8000664:	723b      	strb	r3, [r7, #8]
        CMD_WRITE,
        (uint8_t)(addr >> 16),   // 상위 주소 바이트 (addr이 16비트라면 항상 0)
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	141b      	asrs	r3, r3, #16
 800066a:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800066c:	727b      	strb	r3, [r7, #9]
        (uint8_t)(addr >> 8),    // 중간 주소 바이트
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	b29b      	uxth	r3, r3
 8000674:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000676:	72bb      	strb	r3, [r7, #10]
        (uint8_t)(addr)          // 하위 주소 바이트
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800067c:	72fb      	strb	r3, [r7, #11]
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, sizeof(header), HAL_MAX_DELAY);
 800067e:	f107 0108 	add.w	r1, r7, #8
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2204      	movs	r2, #4
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <FM25V10_Write+0xa0>)
 800068a:	f007 fd54 	bl	8008136 <HAL_SPI_Transmit>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <FM25V10_Write+0x72>
    {
        SPI_CS_HIGH();
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <FM25V10_Write+0x9c>)
 800069e:	f005 fc07 	bl	8005eb0 <HAL_GPIO_WritePin>
        return st;
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	e010      	b.n	80006c8 <FM25V10_Write+0x94>
    }

    // 4) 데이터 전송
    st = HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, len, HAL_MAX_DELAY);
 80006a6:	88ba      	ldrh	r2, [r7, #4]
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	6839      	ldr	r1, [r7, #0]
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <FM25V10_Write+0xa0>)
 80006b0:	f007 fd41 	bl	8008136 <HAL_SPI_Transmit>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]

    // 5) CS HIGH
    SPI_CS_HIGH();
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <FM25V10_Write+0x9c>)
 80006be:	f005 fbf7 	bl	8005eb0 <HAL_GPIO_WritePin>

    // 6) 쓰기 종료
    Memory_Write_Disable();
 80006c2:	f7ff ffb1 	bl	8000628 <Memory_Write_Disable>

    return st;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40020000 	.word	0x40020000
 80006d4:	20000e28 	.word	0x20000e28

080006d8 <Memory_Write>:

HAL_StatusTypeDef Memory_Write(uint16_t addr, const uint8_t *pData, uint16_t len)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
    // 내부 드라이버 함수 호출
    return FM25V10_Write(addr, pData, len);
 80006e8:	88ba      	ldrh	r2, [r7, #4]
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	6839      	ldr	r1, [r7, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffa0 	bl	8000634 <FM25V10_Write>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <FM25V10_Read>:
// addr : 메모리 주소 (0x0000 ~ 0x1FFF)
// pData: 읽은 데이터 버퍼
// len  : 바이트 수
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef FM25V10_Read(uint16_t addr, uint8_t *pData, uint16_t len)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	80fb      	strh	r3, [r7, #6]
 800070c:	4613      	mov	r3, r2
 800070e:	80bb      	strh	r3, [r7, #4]
    // 길이가 0이면 예외
    if (len == 0 || pData == NULL)
 8000710:	88bb      	ldrh	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <FM25V10_Read+0x1c>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <FM25V10_Read+0x20>
    {
        return HAL_ERROR; // 잘못된 파라미터
 800071c:	2301      	movs	r3, #1
 800071e:	e035      	b.n	800078c <FM25V10_Read+0x8c>
    }

    // 1) CS LOW , FRAM 활성화
    SPI_CS_LOW();
 8000720:	2200      	movs	r2, #0
 8000722:	2110      	movs	r1, #16
 8000724:	481b      	ldr	r0, [pc, #108]	@ (8000794 <FM25V10_Read+0x94>)
 8000726:	f005 fbc3 	bl	8005eb0 <HAL_GPIO_WritePin>
        (addr >> 8) & 0xFF,
        (addr     ) & 0xFF
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, 3, HAL_MAX_DELAY);
#endif
    uint8_t header[4] = {
 800072a:	2303      	movs	r3, #3
 800072c:	723b      	strb	r3, [r7, #8]
        CMD_READ,
        (uint8_t)(addr >> 16),
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	141b      	asrs	r3, r3, #16
 8000732:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000734:	727b      	strb	r3, [r7, #9]
        (uint8_t)(addr >> 8),
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800073e:	72bb      	strb	r3, [r7, #10]
        (uint8_t)(addr)
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000744:	72fb      	strb	r3, [r7, #11]
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, sizeof(header), HAL_MAX_DELAY);
 8000746:	f107 0108 	add.w	r1, r7, #8
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2204      	movs	r2, #4
 8000750:	4811      	ldr	r0, [pc, #68]	@ (8000798 <FM25V10_Read+0x98>)
 8000752:	f007 fcf0 	bl	8008136 <HAL_SPI_Transmit>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d006      	beq.n	800076e <FM25V10_Read+0x6e>
    {
        SPI_CS_HIGH();
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <FM25V10_Read+0x94>)
 8000766:	f005 fba3 	bl	8005eb0 <HAL_GPIO_WritePin>
        return st;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	e00e      	b.n	800078c <FM25V10_Read+0x8c>
    }

    // 데이터 수신
    st = HAL_SPI_Receive(&hspi1, pData, len, HAL_MAX_DELAY);
 800076e:	88ba      	ldrh	r2, [r7, #4]
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <FM25V10_Read+0x98>)
 8000778:	f007 fe21 	bl	80083be <HAL_SPI_Receive>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
    SPI_CS_HIGH();
 8000780:	2201      	movs	r2, #1
 8000782:	2110      	movs	r1, #16
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <FM25V10_Read+0x94>)
 8000786:	f005 fb93 	bl	8005eb0 <HAL_GPIO_WritePin>

    return st;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40020000 	.word	0x40020000
 8000798:	20000e28 	.word	0x20000e28

0800079c <Memory_Read>:

HAL_StatusTypeDef Memory_Read(uint16_t addr, uint8_t *pData, uint16_t len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	80fb      	strh	r3, [r7, #6]
 80007a8:	4613      	mov	r3, r2
 80007aa:	80bb      	strh	r3, [r7, #4]
    // 내부 드라이버 함수 호출
    return FM25V10_Read(addr, pData, len);
 80007ac:	88ba      	ldrh	r2, [r7, #4]
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	6839      	ldr	r1, [r7, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffa4 	bl	8000700 <FM25V10_Read>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <Load_TimeStatus_FRAM>:
//                                                                                   
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 부팅 시 호출: 플래그 복원
HAL_StatusTypeDef Load_TimeStatus_FRAM(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(TIME_FLAG_ADDR, &flag, 1);
 80007ca:	1dbb      	adds	r3, r7, #6
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ffe3 	bl	800079c <Memory_Read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]

    g_nTime_Status = (flag==DEVICE_TIME_SYNCED)
                    ? DEVICE_TIME_SYNCED
                    : DEVICE_TIME_NOT_SYNCED;
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
    g_nTime_Status = (flag==DEVICE_TIME_SYNCED)
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <Load_TimeStatus_FRAM+0x34>)
 80007ea:	701a      	strb	r2, [r3, #0]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "LOAD Time Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif
                    
    return st;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000100e 	.word	0x2000100e

080007fc <Save_TimeStatus_FRAM>:

// 동기화 완료 시 호출: 플래그 저장
HAL_StatusTypeDef Save_TimeStatus_FRAM(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nTime_Status;
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <Save_TimeStatus_FRAM+0x24>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "SAVE Time Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(TIME_FLAG_ADDR, &flag, 1);
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff ff62 	bl	80006d8 <Memory_Write>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000100e 	.word	0x2000100e

08000824 <Load_Wifi_Status_FRAM>:
//      \  /\  /   _| |_| |     _| |_            ____) |  | |/ ____ \| |  | |__| |____) |
//       \/  \/   |_____|_|    |_____|          |_____/   |_/_/    \_\_|   \____/|_____/ 
//                                                                                       
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef Load_Wifi_Status_FRAM(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(WIFI_FLAG_ADDR, &flag, 1);
 800082a:	1dbb      	adds	r3, r7, #6
 800082c:	2201      	movs	r2, #1
 800082e:	4619      	mov	r1, r3
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff ffb3 	bl	800079c <Memory_Read>
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]

    g_nWifi_Status = (flag==DEVICE_WIFI_CONNECTED)
                    ? DEVICE_WIFI_CONNECTED
                    : DEVICE_WIFI_DISCONNECTED;
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	bf0c      	ite	eq
 8000840:	2301      	moveq	r3, #1
 8000842:	2300      	movne	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461a      	mov	r2, r3
    g_nWifi_Status = (flag==DEVICE_WIFI_CONNECTED)
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <Load_Wifi_Status_FRAM+0x34>)
 800084a:	701a      	strb	r2, [r3, #0]
#if DEBUG_MODE
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "LOAD Wifi Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif
    return st;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000100d 	.word	0x2000100d

0800085c <Save_Wifi_Status_FRAM>:

// 동기화 완료 시 호출: 플래그 저장
HAL_StatusTypeDef Save_Wifi_Status_FRAM(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nWifi_Status;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <Save_Wifi_Status_FRAM+0x24>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "SAVE Wifi Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(WIFI_FLAG_ADDR, &flag, 1);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff ff32 	bl	80006d8 <Memory_Write>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000100d 	.word	0x2000100d

08000884 <Load_Wifi_SSID_Status_FRAM>:
//                                                                               
// ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 와이파이 SSID 상태를 불러오는 함수
// 이 함수는 WiFi SSID 플래그를 읽고, g_nWifi_SSID_Status를 업데이트합니다.
HAL_StatusTypeDef Load_Wifi_SSID_Status_FRAM(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(WIFI_SSID_FLAG_ADDR, &flag, 1);
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	2201      	movs	r2, #1
 800088e:	4619      	mov	r1, r3
 8000890:	2098      	movs	r0, #152	@ 0x98
 8000892:	f7ff ff83 	bl	800079c <Memory_Read>
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]

    g_nWifi_SSID_Status = (flag==DEVICE_WIFI_SSID_SET)
                    ? DEVICE_WIFI_SSID_SET
                    : DEVICE_WIFI_SSID_NOT_SET;
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	2b01      	cmp	r3, #1
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
    g_nWifi_SSID_Status = (flag==DEVICE_WIFI_SSID_SET)
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <Load_Wifi_SSID_Status_FRAM+0x34>)
 80008aa:	701a      	strb	r2, [r3, #0]
#if DEBUG_MODE
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "LOAD Wifi SSID Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif
    return st;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20001010 	.word	0x20001010

080008bc <Save_Wifi_SSID_FRAM>:

// 와이파이 SSID 저장 함수
HAL_StatusTypeDef Save_Wifi_SSID_FRAM(const char *ssid)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    PAT_WiFi_Info pWiFiInfo = AT_Get_WiFi_Info();
 80008c4:	f000 fabe 	bl	8000e44 <AT_Get_WiFi_Info>
 80008c8:	6178      	str	r0, [r7, #20]

    if (pWiFiInfo == NULL)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <Save_Wifi_SSID_FRAM+0x18>
    {
        return HAL_ERROR; // WiFi 정보 구조체가 NULL인 경우
 80008d0:	2301      	movs	r3, #1
 80008d2:	e02f      	b.n	8000934 <Save_Wifi_SSID_FRAM+0x78>
    }

    // ssid가 NULL이거나 길이가 64바이트를 초과하거나 빈 문자열인 경우
    if (ssid == NULL || strlen(ssid) + 1 > sizeof(pWiFiInfo->ssid) || *ssid == '\0')
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00a      	beq.n	80008f0 <Save_Wifi_SSID_FRAM+0x34>
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fc82 	bl	80001e4 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	3301      	adds	r3, #1
 80008e4:	2b40      	cmp	r3, #64	@ 0x40
 80008e6:	d803      	bhi.n	80008f0 <Save_Wifi_SSID_FRAM+0x34>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <Save_Wifi_SSID_FRAM+0x38>
    {
        return HAL_ERROR; // 잘못된 파라미터
 80008f0:	2301      	movs	r3, #1
 80008f2:	e01f      	b.n	8000934 <Save_Wifi_SSID_FRAM+0x78>
    }

    uint8_t flag = DEVICE_WIFI_SSID_SET; // SSID가 설정됨을 나타내는 플래그
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]

    // WiFi SSID 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(WIFI_SSID_FLAG_ADDR, &flag, 1);
 80008f8:	f107 030f 	add.w	r3, r7, #15
 80008fc:	2201      	movs	r2, #1
 80008fe:	4619      	mov	r1, r3
 8000900:	2098      	movs	r0, #152	@ 0x98
 8000902:	f7ff fee9 	bl	80006d8 <Memory_Write>
 8000906:	4603      	mov	r3, r0
 8000908:	74fb      	strb	r3, [r7, #19]
    if (st != HAL_OK)
 800090a:	7cfb      	ldrb	r3, [r7, #19]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <Save_Wifi_SSID_FRAM+0x58>
    {
        return st; // 플래그 저장 실패
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	e00f      	b.n	8000934 <Save_Wifi_SSID_FRAM+0x78>
    }

    uint16_t len = (uint16_t)(strlen(ssid) + 1); // 문자열 길이 + NULL 문자
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fc65 	bl	80001e4 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29b      	uxth	r3, r3
 800091e:	3301      	adds	r3, #1
 8000920:	823b      	strh	r3, [r7, #16]

    // WiFi SSID 데이터 저장
    st = Memory_Write(WIFI_SSID_ADDR, (const uint8_t*)ssid, len);
 8000922:	8a3b      	ldrh	r3, [r7, #16]
 8000924:	461a      	mov	r2, r3
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	2099      	movs	r0, #153	@ 0x99
 800092a:	f7ff fed5 	bl	80006d8 <Memory_Write>
 800092e:	4603      	mov	r3, r0
 8000930:	74fb      	strb	r3, [r7, #19]

    return st;
 8000932:	7cfb      	ldrb	r3, [r7, #19]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <Save_Wifi_Password_FRAM>:
    return st;
}

// 와이파이 PW 저장 함수
HAL_StatusTypeDef Save_Wifi_Password_FRAM(const char *password)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    PAT_WiFi_Info pWiFiInfo = AT_Get_WiFi_Info();
 8000944:	f000 fa7e 	bl	8000e44 <AT_Get_WiFi_Info>
 8000948:	6178      	str	r0, [r7, #20]

    if (pWiFiInfo == NULL)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d101      	bne.n	8000954 <Save_Wifi_Password_FRAM+0x18>
    {
        return HAL_ERROR; // WiFi 정보 구조체가 NULL인 경우
 8000950:	2301      	movs	r3, #1
 8000952:	e02f      	b.n	80009b4 <Save_Wifi_Password_FRAM+0x78>
    }

    // ssid가 NULL이거나 길이가 64바이트를 초과하거나 빈 문자열인 경우
    if (password == NULL || strlen(password) + 1 > sizeof(pWiFiInfo->password) || *password == '\0')
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00a      	beq.n	8000970 <Save_Wifi_Password_FRAM+0x34>
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fc42 	bl	80001e4 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	3301      	adds	r3, #1
 8000964:	2b40      	cmp	r3, #64	@ 0x40
 8000966:	d803      	bhi.n	8000970 <Save_Wifi_Password_FRAM+0x34>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d101      	bne.n	8000974 <Save_Wifi_Password_FRAM+0x38>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000970:	2301      	movs	r3, #1
 8000972:	e01f      	b.n	80009b4 <Save_Wifi_Password_FRAM+0x78>
    }

    uint8_t flag = DEVICE_WIFI_PASSWORD_SET; // 비밀번호가 설정됨을 나타내는 플래그
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]

    // WiFi 비밀번호 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(WIFI_PASSWORD_FLAG_ADDR, &flag, 1);
 8000978:	f107 030f 	add.w	r3, r7, #15
 800097c:	2201      	movs	r2, #1
 800097e:	4619      	mov	r1, r3
 8000980:	20d9      	movs	r0, #217	@ 0xd9
 8000982:	f7ff fea9 	bl	80006d8 <Memory_Write>
 8000986:	4603      	mov	r3, r0
 8000988:	74fb      	strb	r3, [r7, #19]
    if (st != HAL_OK)
 800098a:	7cfb      	ldrb	r3, [r7, #19]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <Save_Wifi_Password_FRAM+0x58>
    {
        return st; // 플래그 저장 실패
 8000990:	7cfb      	ldrb	r3, [r7, #19]
 8000992:	e00f      	b.n	80009b4 <Save_Wifi_Password_FRAM+0x78>
    }

    uint16_t len = (uint16_t)(strlen(password) + 1); // 문자열 길이 + NULL 문자
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fc25 	bl	80001e4 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29b      	uxth	r3, r3
 800099e:	3301      	adds	r3, #1
 80009a0:	823b      	strh	r3, [r7, #16]

    // WiFi 비밀번호 데이터 저장
    st = Memory_Write(WIFI_PASSWORD_ADDR, (const uint8_t*)password, len);
 80009a2:	8a3b      	ldrh	r3, [r7, #16]
 80009a4:	461a      	mov	r2, r3
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	20da      	movs	r0, #218	@ 0xda
 80009aa:	f7ff fe95 	bl	80006d8 <Memory_Write>
 80009ae:	4603      	mov	r3, r0
 80009b0:	74fb      	strb	r3, [r7, #19]

    return st;
 80009b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <Load_Token_Status_FRAM>:
//      |_|  \____/|_|\_\______|_| \_|     |_____/   |_/_/    \_\____/|_____/ 
//                                                                            
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 토큰 상태를 로드하는 함수
HAL_StatusTypeDef Load_Token_Status_FRAM(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(TOKEN_FLAG_ADDR, &flag, 1);
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	2201      	movs	r2, #1
 80009c6:	4619      	mov	r1, r3
 80009c8:	2010      	movs	r0, #16
 80009ca:	f7ff fee7 	bl	800079c <Memory_Read>
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]

    g_nToken_Status = (flag==DEVICE_TOKEN_SET)
                    ? DEVICE_TOKEN_SET
                    : DEVICE_TOKEN_NOT_SET;
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	bf0c      	ite	eq
 80009d8:	2301      	moveq	r3, #1
 80009da:	2300      	movne	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
    g_nToken_Status = (flag==DEVICE_TOKEN_SET)
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <Load_Token_Status_FRAM+0x34>)
 80009e2:	701a      	strb	r2, [r3, #0]

    return st;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000100f 	.word	0x2000100f

080009f4 <Save_Token_Status_FRAM>:

// 토큰 상태를 저장하는 함수
HAL_StatusTypeDef Save_Token_Status_FRAM(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nToken_Status;
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <Save_Token_Status_FRAM+0x24>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]

    return Memory_Write(TOKEN_FLAG_ADDR, &flag, 1);
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	2010      	movs	r0, #16
 8000a08:	f7ff fe66 	bl	80006d8 <Memory_Write>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000100f 	.word	0x2000100f

08000a1c <Save_Token_FRAM>:

// 토큰을 저장하는 함수
HAL_StatusTypeDef Save_Token_FRAM(const char *token)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 8000a24:	f004 f918 	bl	8004c58 <SERVER_API_Get_Data>
 8000a28:	6178      	str	r0, [r7, #20]
    if (pApiData == NULL)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <Save_Token_FRAM+0x18>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 8000a30:	2301      	movs	r3, #1
 8000a32:	e02f      	b.n	8000a94 <Save_Token_FRAM+0x78>
    }

    if (token == NULL || strlen(token)+1 > sizeof(pApiData->sToken) || *token == '\0')
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00a      	beq.n	8000a50 <Save_Token_FRAM+0x34>
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fbd2 	bl	80001e4 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	3301      	adds	r3, #1
 8000a44:	2b80      	cmp	r3, #128	@ 0x80
 8000a46:	d803      	bhi.n	8000a50 <Save_Token_FRAM+0x34>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <Save_Token_FRAM+0x38>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000a50:	2301      	movs	r3, #1
 8000a52:	e01f      	b.n	8000a94 <Save_Token_FRAM+0x78>
    }

    uint8_t flag = DEVICE_TOKEN_SET; // 토큰이 설정됨을 나타내는 플래그
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]

    // 토큰 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(TOKEN_FLAG_ADDR, &flag, 1);
 8000a58:	f107 030f 	add.w	r3, r7, #15
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2010      	movs	r0, #16
 8000a62:	f7ff fe39 	bl	80006d8 <Memory_Write>
 8000a66:	4603      	mov	r3, r0
 8000a68:	74fb      	strb	r3, [r7, #19]
    if (st != HAL_OK)
 8000a6a:	7cfb      	ldrb	r3, [r7, #19]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <Save_Token_FRAM+0x58>
    {
        return st; // 플래그 저장 실패
 8000a70:	7cfb      	ldrb	r3, [r7, #19]
 8000a72:	e00f      	b.n	8000a94 <Save_Token_FRAM+0x78>
    }

    uint16_t len = (uint16_t)(strlen(token)+1); // 문자열 길이 + NULL 문자
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fbb5 	bl	80001e4 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	3301      	adds	r3, #1
 8000a80:	823b      	strh	r3, [r7, #16]

    // 토큰 데이터 저장
    st = Memory_Write(TOKEN_ADDR, (const uint8_t*)token, len);
 8000a82:	8a3b      	ldrh	r3, [r7, #16]
 8000a84:	461a      	mov	r2, r3
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2011      	movs	r0, #17
 8000a8a:	f7ff fe25 	bl	80006d8 <Memory_Write>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	74fb      	strb	r3, [r7, #19]
    
    return st;
 8000a92:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <Load_Token_FRAM>:

// 토큰을 읽는 함수
HAL_StatusTypeDef Load_Token_FRAM(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
    // 토큰을 저장하는 구조체를 가져옴
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 8000aa2:	f004 f8d9 	bl	8004c58 <SERVER_API_Get_Data>
 8000aa6:	60b8      	str	r0, [r7, #8]
    if (pApiData == NULL)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <Load_Token_FRAM+0x16>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e02c      	b.n	8000b0c <Load_Token_FRAM+0x70>
    }
    uint8_t flag;
    HAL_StatusTypeDef st = Memory_Read(TOKEN_FLAG_ADDR, &flag, 1);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2010      	movs	r0, #16
 8000aba:	f7ff fe6f 	bl	800079c <Memory_Read>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <Load_Token_FRAM+0x30>
    {
        return st; // 플래그 읽기 실패
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	e01f      	b.n	8000b0c <Load_Token_FRAM+0x70>
    }
    if (flag == DEVICE_TOKEN_SET)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d10f      	bne.n	8000af2 <Load_Token_FRAM+0x56>
    {
        // 토큰이 설정되어 있으면 토큰 데이터를 읽음
        st = Memory_Read(TOKEN_ADDR, (uint8_t*)pApiData->sToken, sizeof(pApiData->sToken) - 1);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	227f      	movs	r2, #127	@ 0x7f
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2011      	movs	r0, #17
 8000ada:	f7ff fe5f 	bl	800079c <Memory_Read>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
        if (st == HAL_OK)
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d107      	bne.n	8000af8 <Load_Token_FRAM+0x5c>
        {
            pApiData->sToken[sizeof(pApiData->sToken) - 1] = '\0'; // 문자열 종료
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8000af0:	e002      	b.n	8000af8 <Load_Token_FRAM+0x5c>
        }
    }
    else
    {
        // 토큰이 설정되어 있지 않으면 빈 문자열로 초기화
        pApiData->sToken[0] = '\0';
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
    }
    // 토큰 상태를 업데이트
    g_nToken_Status = (flag == DEVICE_TOKEN_SET) ? DEVICE_TOKEN_SET : DEVICE_TOKEN_NOT_SET;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	bf0c      	ite	eq
 8000afe:	2301      	moveq	r3, #1
 8000b00:	2300      	movne	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <Load_Token_FRAM+0x78>)
 8000b08:	701a      	strb	r2, [r3, #0]
        // 토큰이 설정되어 있으면 토큰 값도 출력
        HAL_UART_Transmit(&huart1, (uint8_t*)pApiData->sToken, strlen(pApiData->sToken), HAL_MAX_DELAY);
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY); // 줄바꿈 추가
    }
#endif
    return st;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000100f 	.word	0x2000100f

08000b18 <Load_MAC_Status_FRAM>:
//   |_|  |_/_/    \_\_____|   |_____/   |_/_/    \_\____/|_____/ 
//                                                                
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// MAC 주소가 설정되어 있는지 확인하는 함수
HAL_StatusTypeDef Load_MAC_Status_FRAM(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(MAC_FLAG_ADDR, &flag, 1);
 8000b1e:	1dbb      	adds	r3, r7, #6
 8000b20:	2201      	movs	r2, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	2091      	movs	r0, #145	@ 0x91
 8000b26:	f7ff fe39 	bl	800079c <Memory_Read>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]

    g_nMac_Status = (flag==DEVICE_MAC_SET)
                    ? DEVICE_MAC_SET
                    : DEVICE_MAC_NOT_SET;
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	bf0c      	ite	eq
 8000b34:	2301      	moveq	r3, #1
 8000b36:	2300      	movne	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
    g_nMac_Status = (flag==DEVICE_MAC_SET)
 8000b3c:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <Load_MAC_Status_FRAM+0x34>)
 8000b3e:	701a      	strb	r2, [r3, #0]
    char macStatusMsg[50];
    snprintf(macStatusMsg, sizeof(macStatusMsg), "LOAD MAC Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)macStatusMsg, strlen(macStatusMsg), HAL_MAX_DELAY);
#endif

    return st;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20001011 	.word	0x20001011

08000b50 <Save_MAC_Status_FRAM>:

// Mac 주소 상태를 저장하는 함수
HAL_StatusTypeDef Save_MAC_Status_FRAM(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nMac_Status;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <Save_MAC_Status_FRAM+0x24>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
    char macStatusMsg[50];
    snprintf(macStatusMsg, sizeof(macStatusMsg), "SAVE MAC Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)macStatusMsg, strlen(macStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(MAC_FLAG_ADDR, &flag, 1);
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4619      	mov	r1, r3
 8000b62:	2091      	movs	r0, #145	@ 0x91
 8000b64:	f7ff fdb8 	bl	80006d8 <Memory_Write>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20001011 	.word	0x20001011

08000b78 <Save_MAC_FRAM>:

// MAC 주소를 저장하는 함수
HAL_StatusTypeDef Save_MAC_FRAM(const char *mac)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    if (mac == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <Save_MAC_FRAM+0x12>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000b86:	2301      	movs	r3, #1
 8000b88:	e01e      	b.n	8000bc8 <Save_MAC_FRAM+0x50>
    }

    uint8_t flag = DEVICE_MAC_SET; // MAC 주소가 설정됨을 나타내는 플래그
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73bb      	strb	r3, [r7, #14]

    // MAC 주소 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(MAC_FLAG_ADDR, &flag, 1);
 8000b8e:	f107 030e 	add.w	r3, r7, #14
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	2091      	movs	r0, #145	@ 0x91
 8000b98:	f7ff fd9e 	bl	80006d8 <Memory_Write>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <Save_MAC_FRAM+0x32>
    {
        return st; // 플래그 저장 실패
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	e00e      	b.n	8000bc8 <Save_MAC_FRAM+0x50>
    }

    // MAC 주소 데이터 저장
    st = Memory_Write(MAC_ADDR, (const uint8_t*)mac, strlen(mac)+1); // MAC 주소는 6바이트
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fb1a 	bl	80001e4 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2092      	movs	r0, #146	@ 0x92
 8000bbe:	f7ff fd8b 	bl	80006d8 <Memory_Write>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	73fb      	strb	r3, [r7, #15]

    return st;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Load_MAC_FRAM>:

// MAC 주소를 읽는 함수
HAL_StatusTypeDef Load_MAC_FRAM(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
    // MAC 주소를 저장하는 구조체를 가져옴
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 8000bd6:	f004 f83f 	bl	8004c58 <SERVER_API_Get_Data>
 8000bda:	60b8      	str	r0, [r7, #8]
    if (pApiData == NULL)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <Load_MAC_FRAM+0x16>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 8000be2:	2301      	movs	r3, #1
 8000be4:	e031      	b.n	8000c4a <Load_MAC_FRAM+0x7a>
    }
    
    uint8_t flag;
    HAL_StatusTypeDef st = Memory_Read(MAC_FLAG_ADDR, &flag, 1);
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	2091      	movs	r0, #145	@ 0x91
 8000bee:	f7ff fdd5 	bl	800079c <Memory_Read>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <Load_MAC_FRAM+0x30>
    {
        return st; // 플래그 읽기 실패
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	e024      	b.n	8000c4a <Load_MAC_FRAM+0x7a>
    }
    
    if (flag == DEVICE_MAC_SET)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d110      	bne.n	8000c28 <Load_MAC_FRAM+0x58>
    {
        // MAC 주소가 설정되어 있으면 MAC 주소 데이터를 읽음
        st = Memory_Read(MAC_ADDR, (uint8_t*)pApiData->sMac, sizeof(pApiData->sMac) - 1);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	3380      	adds	r3, #128	@ 0x80
 8000c0a:	2211      	movs	r2, #17
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2092      	movs	r0, #146	@ 0x92
 8000c10:	f7ff fdc4 	bl	800079c <Memory_Read>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]
        if (st == HAL_OK)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10b      	bne.n	8000c36 <Load_MAC_FRAM+0x66>
        {
            // MAC 주소는 6바이트이므로 문자열 종료 필요 없음
            pApiData->sMac[sizeof(pApiData->sMac)-1] = '\0'; // 문자열 종료
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
 8000c26:	e006      	b.n	8000c36 <Load_MAC_FRAM+0x66>
        }
    }
    else
    {
        // MAC 주소가 설정되어 있지 않으면 빈 문자열로 초기화
        memset(pApiData->sMac, 0, sizeof(pApiData->sMac));
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3380      	adds	r3, #128	@ 0x80
 8000c2c:	2212      	movs	r2, #18
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f00c ffaa 	bl	800db8a <memset>
    }
    
    // MAC 주소 상태를 업데이트
    g_nMac_Status = (flag == DEVICE_MAC_SET) ? DEVICE_MAC_SET : DEVICE_MAC_NOT_SET;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <Load_MAC_FRAM+0x84>)
 8000c46:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)pApiData->sMac, strlen(pApiData->sMac), HAL_MAX_DELAY);
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY); // 줄바꿈 추가
    }
#endif

    return st;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001011 	.word	0x20001011

08000c58 <FRAM_Init>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 초기화 함수
void FRAM_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    SPI_CS_HIGH();
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2110      	movs	r1, #16
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <FRAM_Init+0x14>)
 8000c62:	f005 f925 	bl	8005eb0 <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40020000 	.word	0x40020000

08000c70 <DEVICE_Get_Control>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// CCMRAM 초기화
__CCMRAM__ Device_Control g_deviceControl; // 기기 조작 구조체 인스턴스
PDevice_Control DEVICE_Get_Control(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
    // g_deviceControl의 주소를 반환
    return &g_deviceControl;
 8000c74:	4b02      	ldr	r3, [pc, #8]	@ (8000c80 <DEVICE_Get_Control+0x10>)
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	10000000 	.word	0x10000000

08000c84 <DEVICE_Init>:

void DEVICE_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    // g_deviceControl 구조체를 0으로 초기화
    memset(&g_deviceControl, 0, sizeof(g_deviceControl));
 8000c88:	220c      	movs	r2, #12
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <DEVICE_Init+0x14>)
 8000c8e:	f00c ff7c 	bl	800db8a <memset>

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	10000000 	.word	0x10000000

08000c9c <Device_Mode_Set>:
// ──────────────────────────────────────────────────────────────────────────────

int Device_Mode_Set(int mode)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    PDevice_Control pDeviceControl = DEVICE_Get_Control();
 8000ca4:	f7ff ffe4 	bl	8000c70 <DEVICE_Get_Control>
 8000ca8:	60f8      	str	r0, [r7, #12]

    // 모드 설정
    switch (mode)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b07      	cmp	r3, #7
 8000cae:	d827      	bhi.n	8000d00 <Device_Mode_Set+0x64>
 8000cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb8 <Device_Mode_Set+0x1c>)
 8000cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000cd9 	.word	0x08000cd9
 8000cbc:	08000ce1 	.word	0x08000ce1
 8000cc0:	08000ce9 	.word	0x08000ce9
 8000cc4:	08000d01 	.word	0x08000d01
 8000cc8:	08000d01 	.word	0x08000d01
 8000ccc:	08000d01 	.word	0x08000d01
 8000cd0:	08000cf1 	.word	0x08000cf1
 8000cd4:	08000cf9 	.word	0x08000cf9
    {
    case MODE_MASTER:
        pDeviceControl->g_nMode = MODE_MASTER; // 마스터 모드로 설정
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
        break;
 8000cde:	e012      	b.n	8000d06 <Device_Mode_Set+0x6a>
    case MODE_SLAVE:
        pDeviceControl->g_nMode = MODE_SLAVE; // 슬레이브 모드로 설정
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	609a      	str	r2, [r3, #8]
        break;
 8000ce6:	e00e      	b.n	8000d06 <Device_Mode_Set+0x6a>
    case MODE_AP:
        pDeviceControl->g_nMode = MODE_AP; // AP 모드로 설정
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2202      	movs	r2, #2
 8000cec:	609a      	str	r2, [r3, #8]
        break;
 8000cee:	e00a      	b.n	8000d06 <Device_Mode_Set+0x6a>
    case MODE_DEBUG:
        pDeviceControl->g_nMode = MODE_DEBUG; // 디버그 모드로 설정
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	609a      	str	r2, [r3, #8]
        break;
 8000cf6:	e006      	b.n	8000d06 <Device_Mode_Set+0x6a>
    case MODE_TEST:
        pDeviceControl->g_nMode = MODE_TEST; // 테스트 모드로 설정
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	609a      	str	r2, [r3, #8]
        break;
 8000cfe:	e002      	b.n	8000d06 <Device_Mode_Set+0x6a>
    default:
        return -1; // 잘못된 모드 값 처리
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	e001      	b.n	8000d0a <Device_Mode_Set+0x6e>
    }

    return pDeviceControl->g_nMode; // 현재 모드 반환
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	689b      	ldr	r3, [r3, #8]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop

08000d14 <Device_Mode_Check>:



int Device_Mode_Check(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
    PDevice_Control pDeviceControl = DEVICE_Get_Control();
 8000d1a:	f7ff ffa9 	bl	8000c70 <DEVICE_Get_Control>
 8000d1e:	6078      	str	r0, [r7, #4]

    int mode = pDeviceControl->g_nMode; // 현재 모드 가져오기
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	603b      	str	r3, [r7, #0]

    // 0,0,0,0
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000d26:	4b40      	ldr	r3, [pc, #256]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d117      	bne.n	8000d62 <Device_Mode_Check+0x4e>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000d32:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d111      	bne.n	8000d62 <Device_Mode_Check+0x4e>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) == DIP_3_Pin &&
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d10b      	bne.n	8000d62 <Device_Mode_Check+0x4e>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) == DIP_4_Pin)
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) == DIP_3_Pin &&
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d105      	bne.n	8000d62 <Device_Mode_Check+0x4e>
    {
        mode = Device_Mode_Set(MODE_MASTER); // 마스터 모드로 설정 및 업데이트
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ffa0 	bl	8000c9c <Device_Mode_Set>
 8000d5c:	6038      	str	r0, [r7, #0]

        return mode;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	e05d      	b.n	8000e1e <Device_Mode_Check+0x10a>
    }

    // 딥스위치 상태 확인 esp32를 AP모드 사용할지 결정
    // 3,4번 DIP 스위치가 모두 HIGH 상태일 때 AP 모드로 설정
    // 0,0,1,1
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000d62:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d117      	bne.n	8000d9e <Device_Mode_Check+0x8a>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d111      	bne.n	8000d9e <Device_Mode_Check+0x8a>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin && 
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d00b      	beq.n	8000d9e <Device_Mode_Check+0x8a>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) != DIP_4_Pin)
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin && 
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d005      	beq.n	8000d9e <Device_Mode_Check+0x8a>
    {
        mode = Device_Mode_Set(MODE_AP); // AP 모드로 설정 및 업데이트
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff ff82 	bl	8000c9c <Device_Mode_Set>
 8000d98:	6038      	str	r0, [r7, #0]
        // pDeviceControl->g_nMode = MODE_AP; // AP 모드로 설정
        // mode = pDeviceControl->g_nMode; // 현재 모드 업데이트

        // g_nMode = MODE_AP; // AP 모드로 설정

        return mode;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	e03f      	b.n	8000e1e <Device_Mode_Check+0x10a>
    }
    else
    {
        g_nMode = MODE_MASTER; // 기본적으로 마스터 모드로 설정
 8000d9e:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <Device_Mode_Check+0x118>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
    }

    // 딥스위치 1,3,4 번 HIGH 상태일때 디버그 모드
    // 1,0,1,1
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d017      	beq.n	8000de0 <Device_Mode_Check+0xcc>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d111      	bne.n	8000de0 <Device_Mode_Check+0xcc>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d00b      	beq.n	8000de0 <Device_Mode_Check+0xcc>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) != DIP_4_Pin)
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d005      	beq.n	8000de0 <Device_Mode_Check+0xcc>
    {
        mode = Device_Mode_Set(MODE_DEBUG); // 디버그 모드로 설정 및 업데이트
 8000dd4:	2006      	movs	r0, #6
 8000dd6:	f7ff ff61 	bl	8000c9c <Device_Mode_Set>
 8000dda:	6038      	str	r0, [r7, #0]
        // pDeviceControl->g_nMode = MODE_DEBUG; // 디버그 모드로 설정
        // mode = pDeviceControl->g_nMode; // 현재 모드 업데이트

        // g_nMode = MODE_DEBUG; // 디버그 모드로 설정

        return mode;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	e01e      	b.n	8000e1e <Device_Mode_Check+0x10a>
    }

    // 딥스위치 1,3 번 HIGH 상태일때 테스트 모드
    // 1,0,1,0
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d017      	beq.n	8000e1c <Device_Mode_Check+0x108>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d111      	bne.n	8000e1c <Device_Mode_Check+0x108>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d00b      	beq.n	8000e1c <Device_Mode_Check+0x108>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) == DIP_4_Pin)
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <Device_Mode_Check+0x114>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d105      	bne.n	8000e1c <Device_Mode_Check+0x108>
    {
        mode = Device_Mode_Set(MODE_TEST); // 테스트 모드로 설정 및 업데이트
 8000e10:	2007      	movs	r0, #7
 8000e12:	f7ff ff43 	bl	8000c9c <Device_Mode_Set>
 8000e16:	6038      	str	r0, [r7, #0]


        return mode;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	e000      	b.n	8000e1e <Device_Mode_Check+0x10a>
    }

    return mode;
 8000e1c:	683b      	ldr	r3, [r7, #0]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	2000100c 	.word	0x2000100c

08000e30 <AT_Get_UTC_Time>:

__CCMRAM__ AT_UTC_Time g_atUtcTime;
__CCMRAM__ AT_WiFi_Info g_atWiFiInfo;

PAT_UTC_Time AT_Get_UTC_Time(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
    // 현재 UTC 시간을 반환
    return &g_atUtcTime;
 8000e34:	4b02      	ldr	r3, [pc, #8]	@ (8000e40 <AT_Get_UTC_Time+0x10>)
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	1000000c 	.word	0x1000000c

08000e44 <AT_Get_WiFi_Info>:

PAT_WiFi_Info AT_Get_WiFi_Info(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
    // 현재 WiFi 정보를 반환
    return &g_atWiFiInfo;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <AT_Get_WiFi_Info+0x10>)
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	10000028 	.word	0x10000028

08000e58 <UTC_Time_Init>:

// CCMRAM 초기화
void UTC_Time_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    memset(&g_atUtcTime, 0, sizeof(g_atUtcTime));
 8000e5c:	221c      	movs	r2, #28
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <UTC_Time_Init+0x14>)
 8000e62:	f00c fe92 	bl	800db8a <memset>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	1000000c 	.word	0x1000000c

08000e70 <WiFi_Info_Init>:

void WiFi_Info_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    // WiFi 정보 구조체 초기화
    memset(&g_atWiFiInfo, 0, sizeof(g_atWiFiInfo));
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	2100      	movs	r1, #0
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <WiFi_Info_Init+0x14>)
 8000e7a:	f00c fe86 	bl	800db8a <memset>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	10000028 	.word	0x10000028

08000e88 <ESP_AT_Boot>:
}

#endif // 0

int ESP_AT_Boot(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
    int result;
    // AT 커맨드로 AT 전송
    const char *cmd = "AT\r\n";
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <ESP_AT_Boot+0x70>)
 8000e90:	613b      	str	r3, [r7, #16]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8000e92:	6938      	ldr	r0, [r7, #16]
 8000e94:	f000 fa94 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 8000e98:	60f8      	str	r0, [r7, #12]
    const char *success = "AT command successful!\r\n";
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <ESP_AT_Boot+0x74>)
 8000e9c:	60bb      	str	r3, [r7, #8]
    const char *fail = "AT command failed!\r\n";
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <ESP_AT_Boot+0x78>)
 8000ea0:	607b      	str	r3, [r7, #4]

    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d014      	beq.n	8000ed2 <ESP_AT_Boot+0x4a>
 8000ea8:	4916      	ldr	r1, [pc, #88]	@ (8000f04 <ESP_AT_Boot+0x7c>)
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f00c ff04 	bl	800dcb8 <strstr>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00d      	beq.n	8000ed2 <ESP_AT_Boot+0x4a>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8000eb6:	68b8      	ldr	r0, [r7, #8]
 8000eb8:	f7ff f994 	bl	80001e4 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <ESP_AT_Boot+0x80>)
 8000ec8:	f008 f9dc 	bl	8009284 <HAL_UART_Transmit>

        result = AT_OK; // 성공 코드
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e00c      	b.n	8000eec <ESP_AT_Boot+0x64>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff f986 	bl	80001e4 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <ESP_AT_Boot+0x80>)
 8000ee4:	f008 f9ce 	bl	8009284 <HAL_UART_Transmit>

        result = AT_ERROR; // 실패 코드
 8000ee8:	2301      	movs	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
    }

    // 결과 반환
    return result;
 8000eec:	697b      	ldr	r3, [r7, #20]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	0800f58c 	.word	0x0800f58c
 8000efc:	0800f594 	.word	0x0800f594
 8000f00:	0800f5b0 	.word	0x0800f5b0
 8000f04:	0800f5c8 	.word	0x0800f5c8
 8000f08:	20000f10 	.word	0x20000f10

08000f0c <ESP_AT_Send_WiFi_Config>:



// SD카드에 WIFI 설정을 가져롸 AT 명령어로 ESP32에 전송하는 함수
int ESP_AT_Send_WiFi_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0aa      	sub	sp, #168	@ 0xa8
 8000f10:	af02      	add	r7, sp, #8
    int result = 0; // 결과 변수 초기화
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    // SD_Card_Get_WiFi_SSID(void) 함수로 SSID를 가져옴
    const char* ssid = SD_Card_Get_WiFi_SSID();
 8000f18:	f003 fcf8 	bl	800490c <SD_Card_Get_WiFi_SSID>
 8000f1c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    const char* password = SD_Card_Get_WiFi_Password();
 8000f20:	f003 fd70 	bl	8004a04 <SD_Card_Get_WiFi_Password>
 8000f24:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    
    const char * response = NULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    const char *success = "WiFi configuration sent successfully!\r\n";
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fec <ESP_AT_Send_WiFi_Config+0xe0>)
 8000f30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const char *fail = "Failed to send WiFi configuration!\r\n";
 8000f34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <ESP_AT_Send_WiFi_Config+0xe4>)
 8000f36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    char cmd[128]={0}; // AT 명령어를 저장할 버퍼
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	227c      	movs	r2, #124	@ 0x7c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00c fe1f 	bl	800db8a <memset>

    int len = snprintf(cmd, sizeof(cmd), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000f4c:	1d38      	adds	r0, r7, #4
 8000f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f58:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <ESP_AT_Send_WiFi_Config+0xe8>)
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	f00c fd62 	bl	800da24 <sniprintf>
 8000f60:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    if (len < 0 || len >= (int)sizeof(cmd))
 8000f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db03      	blt.n	8000f74 <ESP_AT_Send_WiFi_Config+0x68>
 8000f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f72:	dd01      	ble.n	8000f78 <ESP_AT_Send_WiFi_Config+0x6c>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8000f74:	f002 f8be 	bl	80030f4 <Error_Handler>
    }

    // ESP_AT_Send_Command_Sync(cmd);
    response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fa20 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 8000f80:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    
    if (response != NULL && strstr(response, "OK") != NULL)
 8000f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d018      	beq.n	8000fbe <ESP_AT_Send_WiFi_Config+0xb2>
 8000f8c:	491a      	ldr	r1, [pc, #104]	@ (8000ff8 <ESP_AT_Send_WiFi_Config+0xec>)
 8000f8e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000f92:	f00c fe91 	bl	800dcb8 <strstr>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d010      	beq.n	8000fbe <ESP_AT_Send_WiFi_Config+0xb2>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8000f9c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000fa0:	f7ff f920 	bl	80001e4 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000fb0:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <ESP_AT_Send_WiFi_Config+0xf0>)
 8000fb2:	f008 f967 	bl	8009284 <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000fbc:	e00f      	b.n	8000fde <ESP_AT_Send_WiFi_Config+0xd2>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8000fbe:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000fc2:	f7ff f90f 	bl	80001e4 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <ESP_AT_Send_WiFi_Config+0xf0>)
 8000fd4:	f008 f956 	bl	8009284 <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }
    
    // return DEVICE_WIFI_CONNECTED; // 성공
    return result;
 8000fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	37a0      	adds	r7, #160	@ 0xa0
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	0800f5cc 	.word	0x0800f5cc
 8000ff0:	0800f5f4 	.word	0x0800f5f4
 8000ff4:	0800f61c 	.word	0x0800f61c
 8000ff8:	0800f5c8 	.word	0x0800f5c8
 8000ffc:	20000f10 	.word	0x20000f10

08001000 <ESP_AT_Send_Command_Sync>:

// 동기방식 ESP32 AT 명령 전송 함수
// 이 함수는 명령어를 전송하고, 응답을 기다려서 결과를 PC(UART1)로 전송합니다.

void ESP_AT_Send_Command_Sync(const char* cmd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	f5ad 6d02 	sub.w	sp, sp, #2080	@ 0x820
 8001006:	af00      	add	r7, sp, #0
 8001008:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800100c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001010:	6018      	str	r0, [r3, #0]
    char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
 8001012:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001016:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	3304      	adds	r3, #4
 8001020:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f00c fdaf 	bl	800db8a <memset>
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 8001032:	f004 fbcd 	bl	80057d0 <HAL_GetTick>
 8001036:	f8c7 0818 	str.w	r0, [r7, #2072]	@ 0x818

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 800103a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800103e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f7ff f8ce 	bl	80001e4 <strlen>
 8001048:	f8c7 0810 	str.w	r0, [r7, #2064]	@ 0x810
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 800104c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8001050:	b29a      	uxth	r2, r3
 8001052:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001056:	f6a3 011c 	subw	r1, r3, #2076	@ 0x81c
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6809      	ldr	r1, [r1, #0]
 8001060:	4858      	ldr	r0, [pc, #352]	@ (80011c4 <ESP_AT_Send_Command_Sync+0x1c4>)
 8001062:	f008 f90f 	bl	8009284 <HAL_UART_Transmit>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d053      	beq.n	8001114 <ESP_AT_Send_Command_Sync+0x114>
    {
        Error_Handler();
 800106c:	f002 f842 	bl	80030f4 <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 8001070:	e050      	b.n	8001114 <ESP_AT_Send_Command_Sync+0x114>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8001072:	f107 010f 	add.w	r1, r7, #15
 8001076:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800107a:	2201      	movs	r2, #1
 800107c:	4851      	ldr	r0, [pc, #324]	@ (80011c4 <ESP_AT_Send_Command_Sync+0x1c4>)
 800107e:	f008 f98c 	bl	800939a <HAL_UART_Receive>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d13b      	bne.n	8001100 <ESP_AT_Send_Command_Sync+0x100>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 8001088:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001092:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001096:	f6a2 0211 	subw	r2, r2, #2065	@ 0x811
 800109a:	7811      	ldrb	r1, [r2, #0]
 800109c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80010a0:	f5a2 6201 	sub.w	r2, r2, #2064	@ 0x810
 80010a4:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 80010a6:	2206      	movs	r2, #6
 80010a8:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d30e      	bcc.n	80010ce <ESP_AT_Send_Command_Sync+0xce>
 80010b0:	2206      	movs	r2, #6
 80010b2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	f107 0210 	add.w	r2, r7, #16
 80010bc:	4413      	add	r3, r2
 80010be:	2206      	movs	r2, #6
 80010c0:	4941      	ldr	r1, [pc, #260]	@ (80011c8 <ESP_AT_Send_Command_Sync+0x1c8>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00c fd51 	bl	800db6a <memcmp>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d02c      	beq.n	8001128 <ESP_AT_Send_Command_Sync+0x128>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 80010ce:	2209      	movs	r2, #9
 80010d0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d30e      	bcc.n	80010f6 <ESP_AT_Send_Command_Sync+0xf6>
 80010d8:	2209      	movs	r2, #9
 80010da:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	f107 0210 	add.w	r2, r7, #16
 80010e4:	4413      	add	r3, r2
 80010e6:	2209      	movs	r2, #9
 80010e8:	4938      	ldr	r1, [pc, #224]	@ (80011cc <ESP_AT_Send_Command_Sync+0x1cc>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00c fd3d 	bl	800db6a <memcmp>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <ESP_AT_Send_Command_Sync+0x122>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 80010f6:	f004 fb6b 	bl	80057d0 <HAL_GetTick>
 80010fa:	f8c7 0818 	str.w	r0, [r7, #2072]	@ 0x818
 80010fe:	e009      	b.n	8001114 <ESP_AT_Send_Command_Sync+0x114>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 8001100:	f004 fb66 	bl	80057d0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001110:	4293      	cmp	r3, r2
 8001112:	d808      	bhi.n	8001126 <ESP_AT_Send_Command_Sync+0x126>
    while (pos < RESP_BUF_SIZE - 1)
 8001114:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001118:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800111c:	4293      	cmp	r3, r2
 800111e:	d9a8      	bls.n	8001072 <ESP_AT_Send_Command_Sync+0x72>
 8001120:	e002      	b.n	8001128 <ESP_AT_Send_Command_Sync+0x128>
                break;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <ESP_AT_Send_Command_Sync+0x128>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 8001126:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 8001128:	f004 fb52 	bl	80057d0 <HAL_GetTick>
 800112c:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8001130:	e01d      	b.n	800116e <ESP_AT_Send_Command_Sync+0x16e>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8001132:	f107 010f 	add.w	r1, r7, #15
 8001136:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800113a:	2201      	movs	r2, #1
 800113c:	4821      	ldr	r0, [pc, #132]	@ (80011c4 <ESP_AT_Send_Command_Sync+0x1c4>)
 800113e:	f008 f92c 	bl	800939a <HAL_UART_Receive>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d112      	bne.n	800116e <ESP_AT_Send_Command_Sync+0x16e>
        {
            respBuf[pos++] = ch;
 8001148:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001152:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001156:	f6a2 0211 	subw	r2, r2, #2065	@ 0x811
 800115a:	7811      	ldrb	r1, [r2, #0]
 800115c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001160:	f5a2 6201 	sub.w	r2, r2, #2064	@ 0x810
 8001164:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 8001166:	f004 fb33 	bl	80057d0 <HAL_GetTick>
 800116a:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 800116e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001172:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8001176:	4293      	cmp	r3, r2
 8001178:	d808      	bhi.n	800118c <ESP_AT_Send_Command_Sync+0x18c>
 800117a:	f004 fb29 	bl	80057d0 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800118a:	d3d2      	bcc.n	8001132 <ESP_AT_Send_Command_Sync+0x132>
        }
    }
    respBuf[pos] = '\0';
 800118c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001190:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 8001194:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001198:	4413      	add	r3, r2
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 800119e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d009      	beq.n	80011ba <ESP_AT_Send_Command_Sync+0x1ba>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 80011a6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f107 0110 	add.w	r1, r7, #16
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <ESP_AT_Send_Command_Sync+0x1d0>)
 80011b6:	f008 f865 	bl	8009284 <HAL_UART_Transmit>
    }
}
 80011ba:	bf00      	nop
 80011bc:	f507 6702 	add.w	r7, r7, #2080	@ 0x820
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000f58 	.word	0x20000f58
 80011c8:	08010ae0 	.word	0x08010ae0
 80011cc:	08010ae8 	.word	0x08010ae8
 80011d0:	20000f10 	.word	0x20000f10

080011d4 <ESP_AT_Send_Command_Sync_Get_int>:

// 명령 성공 실패를 AT_OK,AT_ERROR 으로 반환하는 함수
int ESP_AT_Send_Command_Sync_Get_int(const char* cmd)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	f5ad 6d02 	sub.w	sp, sp, #2080	@ 0x820
 80011da:	af00      	add	r7, sp, #0
 80011dc:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80011e0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80011e4:	6018      	str	r0, [r3, #0]
    char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
 80011e6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80011ea:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	3304      	adds	r3, #4
 80011f4:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00c fcc5 	bl	800db8a <memset>
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 8001206:	f004 fae3 	bl	80057d0 <HAL_GetTick>
 800120a:	f8c7 0818 	str.w	r0, [r7, #2072]	@ 0x818

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 800120e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001212:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f7fe ffe4 	bl	80001e4 <strlen>
 800121c:	f8c7 0810 	str.w	r0, [r7, #2064]	@ 0x810
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 8001220:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8001224:	b29a      	uxth	r2, r3
 8001226:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800122a:	f6a3 011c 	subw	r1, r3, #2076	@ 0x81c
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	6809      	ldr	r1, [r1, #0]
 8001234:	485e      	ldr	r0, [pc, #376]	@ (80013b0 <ESP_AT_Send_Command_Sync_Get_int+0x1dc>)
 8001236:	f008 f825 	bl	8009284 <HAL_UART_Transmit>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d053      	beq.n	80012e8 <ESP_AT_Send_Command_Sync_Get_int+0x114>
    {
        Error_Handler();
 8001240:	f001 ff58 	bl	80030f4 <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 8001244:	e050      	b.n	80012e8 <ESP_AT_Send_Command_Sync_Get_int+0x114>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8001246:	f107 010f 	add.w	r1, r7, #15
 800124a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800124e:	2201      	movs	r2, #1
 8001250:	4857      	ldr	r0, [pc, #348]	@ (80013b0 <ESP_AT_Send_Command_Sync_Get_int+0x1dc>)
 8001252:	f008 f8a2 	bl	800939a <HAL_UART_Receive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d13b      	bne.n	80012d4 <ESP_AT_Send_Command_Sync_Get_int+0x100>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 800125c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001266:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800126a:	f6a2 0211 	subw	r2, r2, #2065	@ 0x811
 800126e:	7811      	ldrb	r1, [r2, #0]
 8001270:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001274:	f5a2 6201 	sub.w	r2, r2, #2064	@ 0x810
 8001278:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 800127a:	2206      	movs	r2, #6
 800127c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001280:	4293      	cmp	r3, r2
 8001282:	d30e      	bcc.n	80012a2 <ESP_AT_Send_Command_Sync_Get_int+0xce>
 8001284:	2206      	movs	r2, #6
 8001286:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	f107 0210 	add.w	r2, r7, #16
 8001290:	4413      	add	r3, r2
 8001292:	2206      	movs	r2, #6
 8001294:	4947      	ldr	r1, [pc, #284]	@ (80013b4 <ESP_AT_Send_Command_Sync_Get_int+0x1e0>)
 8001296:	4618      	mov	r0, r3
 8001298:	f00c fc67 	bl	800db6a <memcmp>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d02c      	beq.n	80012fc <ESP_AT_Send_Command_Sync_Get_int+0x128>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 80012a2:	2209      	movs	r2, #9
 80012a4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d30e      	bcc.n	80012ca <ESP_AT_Send_Command_Sync_Get_int+0xf6>
 80012ac:	2209      	movs	r2, #9
 80012ae:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	f107 0210 	add.w	r2, r7, #16
 80012b8:	4413      	add	r3, r2
 80012ba:	2209      	movs	r2, #9
 80012bc:	493e      	ldr	r1, [pc, #248]	@ (80013b8 <ESP_AT_Send_Command_Sync_Get_int+0x1e4>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f00c fc53 	bl	800db6a <memcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d015      	beq.n	80012f6 <ESP_AT_Send_Command_Sync_Get_int+0x122>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 80012ca:	f004 fa81 	bl	80057d0 <HAL_GetTick>
 80012ce:	f8c7 0818 	str.w	r0, [r7, #2072]	@ 0x818
 80012d2:	e009      	b.n	80012e8 <ESP_AT_Send_Command_Sync_Get_int+0x114>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 80012d4:	f004 fa7c 	bl	80057d0 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d808      	bhi.n	80012fa <ESP_AT_Send_Command_Sync_Get_int+0x126>
    while (pos < RESP_BUF_SIZE - 1)
 80012e8:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80012ec:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d9a8      	bls.n	8001246 <ESP_AT_Send_Command_Sync_Get_int+0x72>
 80012f4:	e002      	b.n	80012fc <ESP_AT_Send_Command_Sync_Get_int+0x128>
                break;
 80012f6:	bf00      	nop
 80012f8:	e000      	b.n	80012fc <ESP_AT_Send_Command_Sync_Get_int+0x128>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 80012fa:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 80012fc:	f004 fa68 	bl	80057d0 <HAL_GetTick>
 8001300:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8001304:	e01d      	b.n	8001342 <ESP_AT_Send_Command_Sync_Get_int+0x16e>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8001306:	f107 010f 	add.w	r1, r7, #15
 800130a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800130e:	2201      	movs	r2, #1
 8001310:	4827      	ldr	r0, [pc, #156]	@ (80013b0 <ESP_AT_Send_Command_Sync_Get_int+0x1dc>)
 8001312:	f008 f842 	bl	800939a <HAL_UART_Receive>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d112      	bne.n	8001342 <ESP_AT_Send_Command_Sync_Get_int+0x16e>
        {
            respBuf[pos++] = ch;
 800131c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001326:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800132a:	f6a2 0211 	subw	r2, r2, #2065	@ 0x811
 800132e:	7811      	ldrb	r1, [r2, #0]
 8001330:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001334:	f5a2 6201 	sub.w	r2, r2, #2064	@ 0x810
 8001338:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 800133a:	f004 fa49 	bl	80057d0 <HAL_GetTick>
 800133e:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8001342:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001346:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800134a:	4293      	cmp	r3, r2
 800134c:	d808      	bhi.n	8001360 <ESP_AT_Send_Command_Sync_Get_int+0x18c>
 800134e:	f004 fa3f 	bl	80057d0 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800135e:	d3d2      	bcc.n	8001306 <ESP_AT_Send_Command_Sync_Get_int+0x132>
        }
    }
    respBuf[pos] = '\0';
 8001360:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001364:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 8001368:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800136c:	4413      	add	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 8001372:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <ESP_AT_Send_Command_Sync_Get_int+0x1ba>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 800137a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800137e:	b29a      	uxth	r2, r3
 8001380:	f107 0110 	add.w	r1, r7, #16
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <ESP_AT_Send_Command_Sync_Get_int+0x1e8>)
 800138a:	f007 ff7b 	bl	8009284 <HAL_UART_Transmit>
    }

    // 응답 성공 반환
    if (strstr(respBuf, END_MARKER))
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4908      	ldr	r1, [pc, #32]	@ (80013b4 <ESP_AT_Send_Command_Sync_Get_int+0x1e0>)
 8001394:	4618      	mov	r0, r3
 8001396:	f00c fc8f 	bl	800dcb8 <strstr>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <ESP_AT_Send_Command_Sync_Get_int+0x1d0>
    {
        return AT_OK; // 성공
 80013a0:	2300      	movs	r3, #0
 80013a2:	e000      	b.n	80013a6 <ESP_AT_Send_Command_Sync_Get_int+0x1d2>
    }

    return AT_ERROR; // 실패
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	f507 6702 	add.w	r7, r7, #2080	@ 0x820
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000f58 	.word	0x20000f58
 80013b4:	08010ae0 	.word	0x08010ae0
 80013b8:	08010ae8 	.word	0x08010ae8
 80013bc:	20000f10 	.word	0x20000f10

080013c0 <ESP_AT_Send_Command_Sync_Get_Result>:

// 동기방식 ESP32 AT 명령 전송 함수
// 반환값으로 응답 문자열을 반환
const char* ESP_AT_Send_Command_Sync_Get_Result(const char* cmd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    static char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 80013cc:	f004 fa00 	bl	80057d0 <HAL_GetTick>
 80013d0:	61b8      	str	r0, [r7, #24]

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7fe ff06 	bl	80001e4 <strlen>
 80013d8:	6138      	str	r0, [r7, #16]
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4845      	ldr	r0, [pc, #276]	@ (80014fc <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 80013e6:	f007 ff4d 	bl	8009284 <HAL_UART_Transmit>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d042      	beq.n	8001476 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        Error_Handler();
 80013f0:	f001 fe80 	bl	80030f4 <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 80013f4:	e03f      	b.n	8001476 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 80013f6:	f107 010f 	add.w	r1, r7, #15
 80013fa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80013fe:	2201      	movs	r2, #1
 8001400:	483e      	ldr	r0, [pc, #248]	@ (80014fc <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 8001402:	f007 ffca 	bl	800939a <HAL_UART_Receive>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d12b      	bne.n	8001464 <ESP_AT_Send_Command_Sync_Get_Result+0xa4>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	61fa      	str	r2, [r7, #28]
 8001412:	7bf9      	ldrb	r1, [r7, #15]
 8001414:	4a3a      	ldr	r2, [pc, #232]	@ (8001500 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8001416:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 8001418:	2206      	movs	r2, #6
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4293      	cmp	r3, r2
 800141e:	d30c      	bcc.n	800143a <ESP_AT_Send_Command_Sync_Get_Result+0x7a>
 8001420:	2206      	movs	r2, #6
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	4a36      	ldr	r2, [pc, #216]	@ (8001500 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8001428:	4413      	add	r3, r2
 800142a:	2206      	movs	r2, #6
 800142c:	4935      	ldr	r1, [pc, #212]	@ (8001504 <ESP_AT_Send_Command_Sync_Get_Result+0x144>)
 800142e:	4618      	mov	r0, r3
 8001430:	f00c fb9b 	bl	800db6a <memcmp>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d026      	beq.n	8001488 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 800143a:	2209      	movs	r2, #9
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4293      	cmp	r3, r2
 8001440:	d30c      	bcc.n	800145c <ESP_AT_Send_Command_Sync_Get_Result+0x9c>
 8001442:	2209      	movs	r2, #9
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 800144a:	4413      	add	r3, r2
 800144c:	2209      	movs	r2, #9
 800144e:	492e      	ldr	r1, [pc, #184]	@ (8001508 <ESP_AT_Send_Command_Sync_Get_Result+0x148>)
 8001450:	4618      	mov	r0, r3
 8001452:	f00c fb8a 	bl	800db6a <memcmp>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d012      	beq.n	8001482 <ESP_AT_Send_Command_Sync_Get_Result+0xc2>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 800145c:	f004 f9b8 	bl	80057d0 <HAL_GetTick>
 8001460:	61b8      	str	r0, [r7, #24]
 8001462:	e008      	b.n	8001476 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 8001464:	f004 f9b4 	bl	80057d0 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001472:	4293      	cmp	r3, r2
 8001474:	d807      	bhi.n	8001486 <ESP_AT_Send_Command_Sync_Get_Result+0xc6>
    while (pos < RESP_BUF_SIZE - 1)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800147c:	4293      	cmp	r3, r2
 800147e:	d9ba      	bls.n	80013f6 <ESP_AT_Send_Command_Sync_Get_Result+0x36>
 8001480:	e002      	b.n	8001488 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
                break;
 8001482:	bf00      	nop
 8001484:	e000      	b.n	8001488 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 8001486:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 8001488:	f004 f9a2 	bl	80057d0 <HAL_GetTick>
 800148c:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 800148e:	e013      	b.n	80014b8 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8001490:	f107 010f 	add.w	r1, r7, #15
 8001494:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001498:	2201      	movs	r2, #1
 800149a:	4818      	ldr	r0, [pc, #96]	@ (80014fc <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 800149c:	f007 ff7d 	bl	800939a <HAL_UART_Receive>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d108      	bne.n	80014b8 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
        {
            respBuf[pos++] = ch;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	61fa      	str	r2, [r7, #28]
 80014ac:	7bf9      	ldrb	r1, [r7, #15]
 80014ae:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80014b0:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 80014b2:	f004 f98d 	bl	80057d0 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80014be:	4293      	cmp	r3, r2
 80014c0:	d807      	bhi.n	80014d2 <ESP_AT_Send_Command_Sync_Get_Result+0x112>
 80014c2:	f004 f985 	bl	80057d0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014d0:	d3de      	bcc.n	8001490 <ESP_AT_Send_Command_Sync_Get_Result+0xd0>
        }
    }
    respBuf[pos] = '\0';
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <ESP_AT_Send_Command_Sync_Get_Result+0x132>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	4905      	ldr	r1, [pc, #20]	@ (8001500 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <ESP_AT_Send_Command_Sync_Get_Result+0x14c>)
 80014ee:	f007 fec9 	bl	8009284 <HAL_UART_Transmit>
    }

    return respBuf; // 응답 버퍼를 반환
 80014f2:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000f58 	.word	0x20000f58
 8001500:	200004d0 	.word	0x200004d0
 8001504:	08010ae0 	.word	0x08010ae0
 8001508:	08010ae8 	.word	0x08010ae8
 800150c:	20000f10 	.word	0x20000f10

08001510 <ESP_AT_Get_Firmware_Version>:



// ESP32 AT 명령어로 펌웨어 조회
int ESP_AT_Get_Firmware_Version(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
    int result = 0; // 결과 변수 초기화
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]

    // AT 명령어 전송
    const char *cmd = "AT+GMR\r\n";
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <ESP_AT_Get_Firmware_Version+0x74>)
 800151c:	613b      	str	r3, [r7, #16]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 800151e:	6938      	ldr	r0, [r7, #16]
 8001520:	f7ff ff4e 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 8001524:	60f8      	str	r0, [r7, #12]
    const char *success = "AT firmware command successful!\r\n";
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <ESP_AT_Get_Firmware_Version+0x78>)
 8001528:	60bb      	str	r3, [r7, #8]
    const char *fail = "AT firmware command failed!\r\n";
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <ESP_AT_Get_Firmware_Version+0x7c>)
 800152c:	607b      	str	r3, [r7, #4]

    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d014      	beq.n	800155e <ESP_AT_Get_Firmware_Version+0x4e>
 8001534:	4916      	ldr	r1, [pc, #88]	@ (8001590 <ESP_AT_Get_Firmware_Version+0x80>)
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f00c fbbe 	bl	800dcb8 <strstr>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00d      	beq.n	800155e <ESP_AT_Get_Firmware_Version+0x4e>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f7fe fe4e 	bl	80001e4 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	4810      	ldr	r0, [pc, #64]	@ (8001594 <ESP_AT_Get_Firmware_Version+0x84>)
 8001554:	f007 fe96 	bl	8009284 <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e00c      	b.n	8001578 <ESP_AT_Get_Firmware_Version+0x68>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7fe fe40 	bl	80001e4 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4809      	ldr	r0, [pc, #36]	@ (8001594 <ESP_AT_Get_Firmware_Version+0x84>)
 8001570:	f007 fe88 	bl	8009284 <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
    }

    // 결과 반환
    return result;
 8001578:	697b      	ldr	r3, [r7, #20]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	0800f634 	.word	0x0800f634
 8001588:	0800f640 	.word	0x0800f640
 800158c:	0800f664 	.word	0x0800f664
 8001590:	0800f5c8 	.word	0x0800f5c8
 8001594:	20000f10 	.word	0x20000f10

08001598 <ESP_AT_Get_Token>:




const char* ESP_AT_Get_Token(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0c6      	sub	sp, #280	@ 0x118
 800159c:	af00      	add	r7, sp, #0
    const char *response = NULL; // 응답 문자열을 저장할 변수
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    // 1) 보낼 JSON 문자열 정의 (큰 따옴표는 백슬래시로 이스케이프)
    const char *jsonBody = "{\\\"uid\\\":\\\"kimss@andamiro.com\\\"\\,\\\"pwd\\\":\\\"temp1234!\\\"}";
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <ESP_AT_Get_Token+0xf4>)
 80015a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // 2) AT+HTTPCLIENT 명령어 문자열 생성
    char atCmd[256];
    int len = snprintf(atCmd, sizeof(atCmd),
 80015aa:	4638      	mov	r0, r7
 80015ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015b0:	4a37      	ldr	r2, [pc, #220]	@ (8001690 <ESP_AT_Get_Token+0xf8>)
 80015b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b6:	f00c fa35 	bl	800da24 <sniprintf>
 80015ba:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        "AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/user\",\"dev-api.andamiro.net\",\"/test/user\",2,\"%s\"\r\n",
        jsonBody);
    
    if (len < 0 || len >= (int)sizeof(atCmd)) 
 80015be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db03      	blt.n	80015ce <ESP_AT_Get_Token+0x36>
 80015c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015ca:	2bff      	cmp	r3, #255	@ 0xff
 80015cc:	dd01      	ble.n	80015d2 <ESP_AT_Get_Token+0x3a>
    {
        // snprintf 실패 또는 버퍼 부족
        Error_Handler();
 80015ce:	f001 fd91 	bl	80030f4 <Error_Handler>
    }

    // 3) 위 함수로 AT 명령 전송 및 응답 처리
    response = ESP_AT_Send_Command_Sync_Get_Result(atCmd);
 80015d2:	463b      	mov	r3, r7
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fef3 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 80015da:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    // response에는 
    //Ast/user","dev-api.andamiro.net","/test/user",2,"{\"uid\":\"kimss@andamiro.com\"\,\"pwd\":\"temp1234!\"}"+HTTPCLIENT:72,{"token":"eEx4NVhXZ2p5MlBBRjJ3eU9CbGJJeUtSbzlvUDU4TzJ0ZCtRSE9FdHZDTT0="}OK
    // 형태의 응답이 저장됨
    // token 값 추출
    const char *tokenStart = strstr(response, "\"token\":\"");
 80015de:	492d      	ldr	r1, [pc, #180]	@ (8001694 <ESP_AT_Get_Token+0xfc>)
 80015e0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80015e4:	f00c fb68 	bl	800dcb8 <strstr>
 80015e8:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

    static char token[128]; // 충분히 큰 버퍼

    // "token":" 문자열을 찾아서 토큰 시작 위치를 찾음
    if (tokenStart != NULL) 
 80015ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d027      	beq.n	8001644 <ESP_AT_Get_Token+0xac>
    {
        tokenStart += strlen("\"token\":\""); // 토큰 시작 위치로 이동
 80015f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80015f8:	3309      	adds	r3, #9
 80015fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

        const char *tokenEnd = strchr(tokenStart, '\"'); // 다음 큰 따옴표 찾기
 80015fe:	2122      	movs	r1, #34	@ 0x22
 8001600:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001604:	f00c fac9 	bl	800db9a <strchr>
 8001608:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
        
        if (tokenEnd != NULL) 
 800160c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001610:	2b00      	cmp	r3, #0
 8001612:	d017      	beq.n	8001644 <ESP_AT_Get_Token+0xac>
        {
            size_t tokenLength = tokenEnd - tokenStart; // 토큰 길이 계산
 8001614:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001618:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

            // 순수 토큰만 추출
            if (tokenLength < sizeof(token)) 
 8001622:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001626:	2b7f      	cmp	r3, #127	@ 0x7f
 8001628:	d80c      	bhi.n	8001644 <ESP_AT_Get_Token+0xac>
            {
                //tokenLength -= 2; // 버퍼 크기 제한
                strncpy(token, tokenStart, tokenLength);
 800162a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800162e:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001632:	4819      	ldr	r0, [pc, #100]	@ (8001698 <ESP_AT_Get_Token+0x100>)
 8001634:	f00c fad0 	bl	800dbd8 <strncpy>
                token[tokenLength] = '\0'; // 문자열 종료
 8001638:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <ESP_AT_Get_Token+0x100>)
 800163a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800163e:	4413      	add	r3, r2
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
                // 이제 token 변수에 토큰 값이 저장됨
            }
        }
    }
    // 4) 추출된 토큰을 PC(UART1)로 전송
    if (token[0] != '\0') 
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <ESP_AT_Get_Token+0x100>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d012      	beq.n	8001672 <ESP_AT_Get_Token+0xda>
    {
        // tokjen을 PC로 전송
        HAL_UART_Transmit(&huart1, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
 800164c:	4812      	ldr	r0, [pc, #72]	@ (8001698 <ESP_AT_Get_Token+0x100>)
 800164e:	f7fe fdc9 	bl	80001e4 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	490f      	ldr	r1, [pc, #60]	@ (8001698 <ESP_AT_Get_Token+0x100>)
 800165c:	480f      	ldr	r0, [pc, #60]	@ (800169c <ESP_AT_Get_Token+0x104>)
 800165e:	f007 fe11 	bl	8009284 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	2202      	movs	r2, #2
 8001668:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <ESP_AT_Get_Token+0x108>)
 800166a:	480c      	ldr	r0, [pc, #48]	@ (800169c <ESP_AT_Get_Token+0x104>)
 800166c:	f007 fe0a 	bl	8009284 <HAL_UART_Transmit>
 8001670:	e006      	b.n	8001680 <ESP_AT_Get_Token+0xe8>
    } 
    else 
    {
        // 토큰 추출 실패 시 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)"Token extraction failed\r\n", 25, HAL_MAX_DELAY);
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	2219      	movs	r2, #25
 8001678:	490a      	ldr	r1, [pc, #40]	@ (80016a4 <ESP_AT_Get_Token+0x10c>)
 800167a:	4808      	ldr	r0, [pc, #32]	@ (800169c <ESP_AT_Get_Token+0x104>)
 800167c:	f007 fe02 	bl	8009284 <HAL_UART_Transmit>
    }

    // 토큰 저장
    // SERVER_API_Set_Token(token); // 서버 API 토큰 저장 함수 호출

    return token; // 토큰 반환
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <ESP_AT_Get_Token+0x100>)
}
 8001682:	4618      	mov	r0, r3
 8001684:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0800f684 	.word	0x0800f684
 8001690:	0800f6bc 	.word	0x0800f6bc
 8001694:	0800f724 	.word	0x0800f724
 8001698:	20000cd0 	.word	0x20000cd0
 800169c:	20000f10 	.word	0x20000f10
 80016a0:	0800f730 	.word	0x0800f730
 80016a4:	0800f734 	.word	0x0800f734

080016a8 <ESP_AT_Get_MAC_Address>:



// ESP32 기기 고유값 반환
const char* ESP_AT_Get_MAC_Address(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
    // AT+CIPSTAMAC? 명령어 전송
    const char *cmd = "AT+CIPSTAMAC?\r\n";
 80016ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <ESP_AT_Get_MAC_Address+0xf0>)
 80016b0:	617b      	str	r3, [r7, #20]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff fe84 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 80016b8:	6138      	str	r0, [r7, #16]

    // 응답에서 MAC 주소 추출
    // "40:4c:ca:50:2c:04" 형식에서 :을 제외한 영문대문자숫자 12개로 구성된 MAC 주소를 추출
    // 예: +CIPSTAMAC:"40:4c:ca:50:2c:04" -> 404CCA502C04
    const char *macStart = strstr(response, "CIPSTAMAC:\""); // CIPSTAMAC:" 문자열 찾기
 80016ba:	4938      	ldr	r1, [pc, #224]	@ (800179c <ESP_AT_Get_MAC_Address+0xf4>)
 80016bc:	6938      	ldr	r0, [r7, #16]
 80016be:	f00c fafb 	bl	800dcb8 <strstr>
 80016c2:	60f8      	str	r0, [r7, #12]
    static char macAddress[18] = {0}; // MAC 주소를 저장할 버퍼 (17자 + NULL)

    // 응답에서 MAC 주소 추출, 콜론을 제외한 문자만 추출
    if (macStart != NULL) 
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d041      	beq.n	800174e <ESP_AT_Get_MAC_Address+0xa6>
    {
        macStart += strlen("CIPSTAMAC:\""); // 처음 따옴표 다음 위치로 이동
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	330b      	adds	r3, #11
 80016ce:	60fb      	str	r3, [r7, #12]
        const char *macEnd = strchr(macStart, '\"'); // 두번째 따옴표 찾기
 80016d0:	2122      	movs	r1, #34	@ 0x22
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f00c fa61 	bl	800db9a <strchr>
 80016d8:	60b8      	str	r0, [r7, #8]
        if (macEnd != NULL) 
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d036      	beq.n	800174e <ESP_AT_Get_MAC_Address+0xa6>
        {
            size_t macLength = macEnd - macStart; // MAC 주소 길이 계산
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	607b      	str	r3, [r7, #4]
            
            if (macLength < 18) // MAC 주소는 17자 + NULL, 콜른을 제외한 길이 12자 + NULL
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b11      	cmp	r3, #17
 80016ec:	d82f      	bhi.n	800174e <ESP_AT_Get_MAC_Address+0xa6>
            {
                // 콜론을 제외한 문자만 추출
                size_t j = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
                for (size_t i = 0; i < macLength; i++) 
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	e021      	b.n	800173c <ESP_AT_Get_MAC_Address+0x94>
                {
                    if (macStart[i] != ':') 
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b3a      	cmp	r3, #58	@ 0x3a
 8001702:	d018      	beq.n	8001736 <ESP_AT_Get_MAC_Address+0x8e>
                    {
                        macAddress[j++] = toupper(macStart[i]); // 대문자로 변환하여 저장
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4413      	add	r3, r2
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	70fb      	strb	r3, [r7, #3]
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	3301      	adds	r3, #1
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <ESP_AT_Get_MAC_Address+0xf8>)
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d103      	bne.n	8001728 <ESP_AT_Get_MAC_Address+0x80>
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	f1a3 0220 	sub.w	r2, r3, #32
 8001726:	e000      	b.n	800172a <ESP_AT_Get_MAC_Address+0x82>
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	1c59      	adds	r1, r3, #1
 800172e:	61f9      	str	r1, [r7, #28]
 8001730:	b2d1      	uxtb	r1, r2
 8001732:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <ESP_AT_Get_MAC_Address+0xfc>)
 8001734:	54d1      	strb	r1, [r2, r3]
                for (size_t i = 0; i < macLength; i++) 
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	3301      	adds	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	d3d9      	bcc.n	80016f8 <ESP_AT_Get_MAC_Address+0x50>
                    }
                }
                macAddress[j] = '\0'; // 문자열 종료
 8001744:	4a17      	ldr	r2, [pc, #92]	@ (80017a4 <ESP_AT_Get_MAC_Address+0xfc>)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#endif
    // PC(UART1)로 MAC 주소 전송
    HAL_UART_Transmit(&huart1, (uint8_t*)macAddress, strlen(macAddress), HAL_MAX_DELAY);
 800174e:	4815      	ldr	r0, [pc, #84]	@ (80017a4 <ESP_AT_Get_MAC_Address+0xfc>)
 8001750:	f7fe fd48 	bl	80001e4 <strlen>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	4911      	ldr	r1, [pc, #68]	@ (80017a4 <ESP_AT_Get_MAC_Address+0xfc>)
 800175e:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <ESP_AT_Get_MAC_Address+0x100>)
 8001760:	f007 fd90 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	2202      	movs	r2, #2
 800176a:	4910      	ldr	r1, [pc, #64]	@ (80017ac <ESP_AT_Get_MAC_Address+0x104>)
 800176c:	480e      	ldr	r0, [pc, #56]	@ (80017a8 <ESP_AT_Get_MAC_Address+0x100>)
 800176e:	f007 fd89 	bl	8009284 <HAL_UART_Transmit>

    // 반환할 주소가 없다면
    if (macAddress[0] == '\0') 
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <ESP_AT_Get_MAC_Address+0xfc>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <ESP_AT_Get_MAC_Address+0xe4>
    {
        // MAC 주소 추출 실패 시 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)"MAC address extraction failed\r\n", 31, HAL_MAX_DELAY);
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	221f      	movs	r2, #31
 8001780:	490b      	ldr	r1, [pc, #44]	@ (80017b0 <ESP_AT_Get_MAC_Address+0x108>)
 8001782:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <ESP_AT_Get_MAC_Address+0x100>)
 8001784:	f007 fd7e 	bl	8009284 <HAL_UART_Transmit>
        return NULL; // 실패 시 NULL 반환
 8001788:	2300      	movs	r3, #0
 800178a:	e000      	b.n	800178e <ESP_AT_Get_MAC_Address+0xe6>
    }

    return macAddress; // MAC 주소 반환
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <ESP_AT_Get_MAC_Address+0xfc>)
}
 800178e:	4618      	mov	r0, r3
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	0800f750 	.word	0x0800f750
 800179c:	0800f760 	.word	0x0800f760
 80017a0:	080114e8 	.word	0x080114e8
 80017a4:	20000d50 	.word	0x20000d50
 80017a8:	20000f10 	.word	0x20000f10
 80017ac:	0800f730 	.word	0x0800f730
 80017b0:	0800f76c 	.word	0x0800f76c

080017b4 <ESP_AT_Set_SNTP_Time>:


// 파라미터로 UTC 매크로를 받아서 시간은 설정하는 함수
int ESP_AT_Set_SNTP_Time(int utcOffset)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0a8      	sub	sp, #160	@ 0xa0
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    int result = 0; // 결과 변수 초기화
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    PAT_UTC_Time pAtUtcTime = AT_Get_UTC_Time(); // UTC 시간 구조체 포인터
 80017c2:	f7ff fb35 	bl	8000e30 <AT_Get_UTC_Time>
 80017c6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    char cmd[128];
    
    // SNTP 서버 연결
    // 한국 NTP 서버 설정
    // ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG=1,900,\"pool.ntp.org\",\"time.google.com\"\r\n"); // NTP 서버 설정
    int len = snprintf(cmd, sizeof(cmd), "AT+CIPSNTPCFG=1,%d,\"pool.ntp.org\",\"time.google.com\"\r\n", utcOffset);
 80017ca:	f107 000c 	add.w	r0, r7, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4ab3      	ldr	r2, [pc, #716]	@ (8001aa0 <ESP_AT_Set_SNTP_Time+0x2ec>)
 80017d2:	2180      	movs	r1, #128	@ 0x80
 80017d4:	f00c f926 	bl	800da24 <sniprintf>
 80017d8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    if (len < 0 || len >= (int)sizeof(cmd)) 
 80017dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db03      	blt.n	80017ec <ESP_AT_Set_SNTP_Time+0x38>
 80017e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ea:	dd04      	ble.n	80017f6 <ESP_AT_Set_SNTP_Time+0x42>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 80017ec:	f001 fc82 	bl	80030f4 <Error_Handler>
        result = AT_ERROR; // 실패 코드
 80017f0:	2301      	movs	r3, #1
 80017f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }

    ESP_AT_Send_Command_Sync(cmd);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fc00 	bl	8001000 <ESP_AT_Send_Command_Sync>

    // 설정 확인
    ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG?\r\n");
 8001800:	48a8      	ldr	r0, [pc, #672]	@ (8001aa4 <ESP_AT_Set_SNTP_Time+0x2f0>)
 8001802:	f7ff fbfd 	bl	8001000 <ESP_AT_Send_Command_Sync>

    // 시간 확인
    const char *response = ESP_AT_Send_Command_Sync_Get_Result("AT+CIPSNTPTIME?\r\n");
 8001806:	48a8      	ldr	r0, [pc, #672]	@ (8001aa8 <ESP_AT_Set_SNTP_Time+0x2f4>)
 8001808:	f7ff fdda 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 800180c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // 예: +CIPSNTPTIME:Tue Jun 24 14:59:31 2025 형식으로 응답

    // ──────────────────────────────────────────────────────────────────────────────

    pAtUtcTime = AT_Get_UTC_Time();
 8001810:	f7ff fb0e 	bl	8000e30 <AT_Get_UTC_Time>
 8001814:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    // ──────────────────────────────────────────────────────────────────────────────
    
    // 응답에서 요일 추출
    const char *timeStart = strstr(response, "CIPSNTPTIME:"); // CIPSTAMAC:" 문자열 찾기
 8001818:	49a4      	ldr	r1, [pc, #656]	@ (8001aac <ESP_AT_Set_SNTP_Time+0x2f8>)
 800181a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800181e:	f00c fa4b 	bl	800dcb8 <strstr>
 8001822:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    
    static char dayOfWeek[4] = {0}; // 요일을 저장할 버퍼 (3자 + NULL)

    // 응답에서 요일 추출
    if (timeStart != NULL) 
 8001826:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <ESP_AT_Set_SNTP_Time+0x96>
    {
        timeStart += strlen("CIPSNTPTIME:");
 800182e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001832:	330c      	adds	r3, #12
 8001834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        strncpy(dayOfWeek, timeStart, 3);
 8001838:	2203      	movs	r2, #3
 800183a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800183e:	489c      	ldr	r0, [pc, #624]	@ (8001ab0 <ESP_AT_Set_SNTP_Time+0x2fc>)
 8001840:	f00c f9ca 	bl	800dbd8 <strncpy>
        dayOfWeek[3] = '\0'; // 문자열 종료
 8001844:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab0 <ESP_AT_Set_SNTP_Time+0x2fc>)
 8001846:	2200      	movs	r2, #0
 8001848:	70da      	strb	r2, [r3, #3]
    }

    // 요일 RTC숫자로 변환하여 구조체에 저장
    pAtUtcTime->sDayOfWeek = Month_String_To_Number(dayOfWeek); // 구조체에 요일 RTC숫자 저장
 800184a:	4899      	ldr	r0, [pc, #612]	@ (8001ab0 <ESP_AT_Set_SNTP_Time+0x2fc>)
 800184c:	f002 fe0e 	bl	800446c <Month_String_To_Number>
 8001850:	4602      	mov	r2, r0
 8001852:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001856:	60da      	str	r2, [r3, #12]

    HAL_UART_Transmit(&huart1, (uint8_t*)dayOfWeek, strlen(dayOfWeek), HAL_MAX_DELAY);
 8001858:	4895      	ldr	r0, [pc, #596]	@ (8001ab0 <ESP_AT_Set_SNTP_Time+0x2fc>)
 800185a:	f7fe fcc3 	bl	80001e4 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	4992      	ldr	r1, [pc, #584]	@ (8001ab0 <ESP_AT_Set_SNTP_Time+0x2fc>)
 8001868:	4892      	ldr	r0, [pc, #584]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 800186a:	f007 fd0b 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	2202      	movs	r2, #2
 8001874:	4990      	ldr	r1, [pc, #576]	@ (8001ab8 <ESP_AT_Set_SNTP_Time+0x304>)
 8001876:	488f      	ldr	r0, [pc, #572]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 8001878:	f007 fd04 	bl	8009284 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char month[4] = {0}; // 월을 저장할 버퍼 (3자 + NULL)

    // 응답에서 월 추출
    if (timeStart != NULL) 
 800187c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00d      	beq.n	80018a0 <ESP_AT_Set_SNTP_Time+0xec>
    {
        timeStart += 4; // 요일 다음 공백 문자로 이동
 8001884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001888:	3304      	adds	r3, #4
 800188a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 월 이름을 3글자 추출
        strncpy(month, timeStart, 3);
 800188e:	2203      	movs	r2, #3
 8001890:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001894:	4889      	ldr	r0, [pc, #548]	@ (8001abc <ESP_AT_Set_SNTP_Time+0x308>)
 8001896:	f00c f99f 	bl	800dbd8 <strncpy>
        month[3] = '\0'; // 문자열 종료
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <ESP_AT_Set_SNTP_Time+0x308>)
 800189c:	2200      	movs	r2, #0
 800189e:	70da      	strb	r2, [r3, #3]
    }

    // 월 이름을 RTC숫자로 변환하여 구조체에 저장
    pAtUtcTime->sMonth = Month_String_To_Number(month); // 구조체에 월 RTC숫자 저장
 80018a0:	4886      	ldr	r0, [pc, #536]	@ (8001abc <ESP_AT_Set_SNTP_Time+0x308>)
 80018a2:	f002 fde3 	bl	800446c <Month_String_To_Number>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018ac:	605a      	str	r2, [r3, #4]
    
    HAL_UART_Transmit(&huart1, (uint8_t*)month, strlen(month), HAL_MAX_DELAY);
 80018ae:	4883      	ldr	r0, [pc, #524]	@ (8001abc <ESP_AT_Set_SNTP_Time+0x308>)
 80018b0:	f7fe fc98 	bl	80001e4 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	497f      	ldr	r1, [pc, #508]	@ (8001abc <ESP_AT_Set_SNTP_Time+0x308>)
 80018be:	487d      	ldr	r0, [pc, #500]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 80018c0:	f007 fce0 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	2202      	movs	r2, #2
 80018ca:	497b      	ldr	r1, [pc, #492]	@ (8001ab8 <ESP_AT_Set_SNTP_Time+0x304>)
 80018cc:	4879      	ldr	r0, [pc, #484]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 80018ce:	f007 fcd9 	bl	8009284 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────
    
    static char day[3] = {0}; // 일을 저장할 버퍼 (2자 + NULL)

    // 응답에서 일 추출
    if (timeStart != NULL) 
 80018d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00d      	beq.n	80018f6 <ESP_AT_Set_SNTP_Time+0x142>
    {
        timeStart += 4; // 월 다음 공백 문자로 이동
 80018da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018de:	3304      	adds	r3, #4
 80018e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 일 숫자를 2글자 추출
        strncpy(day, timeStart, 2);
 80018e4:	2202      	movs	r2, #2
 80018e6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80018ea:	4875      	ldr	r0, [pc, #468]	@ (8001ac0 <ESP_AT_Set_SNTP_Time+0x30c>)
 80018ec:	f00c f974 	bl	800dbd8 <strncpy>
        day[2] = '\0'; // 문자열 종료
 80018f0:	4b73      	ldr	r3, [pc, #460]	@ (8001ac0 <ESP_AT_Set_SNTP_Time+0x30c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	709a      	strb	r2, [r3, #2]
    }
    
    pAtUtcTime->sDay = atoi(day); // 문자열을 정수로 변환하여 구조체에 저장
 80018f6:	4872      	ldr	r0, [pc, #456]	@ (8001ac0 <ESP_AT_Set_SNTP_Time+0x30c>)
 80018f8:	f00b ff47 	bl	800d78a <atoi>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001902:	609a      	str	r2, [r3, #8]

    HAL_UART_Transmit(&huart1, (uint8_t*)day, strlen(day), HAL_MAX_DELAY);
 8001904:	486e      	ldr	r0, [pc, #440]	@ (8001ac0 <ESP_AT_Set_SNTP_Time+0x30c>)
 8001906:	f7fe fc6d 	bl	80001e4 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	496b      	ldr	r1, [pc, #428]	@ (8001ac0 <ESP_AT_Set_SNTP_Time+0x30c>)
 8001914:	4867      	ldr	r0, [pc, #412]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 8001916:	f007 fcb5 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	2202      	movs	r2, #2
 8001920:	4965      	ldr	r1, [pc, #404]	@ (8001ab8 <ESP_AT_Set_SNTP_Time+0x304>)
 8001922:	4864      	ldr	r0, [pc, #400]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 8001924:	f007 fcae 	bl	8009284 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char time[3] = {0}; // 시를 저장할 버퍼 (2자 + NULL)

    // 응답에서 시 추출
    if (timeStart != NULL) 
 8001928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00d      	beq.n	800194c <ESP_AT_Set_SNTP_Time+0x198>
    {
        timeStart += 3; // 일 다음 콜론 문자로 이동
 8001930:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001934:	3303      	adds	r3, #3
 8001936:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 시 숫자를 2글자 추출
        strncpy(time, timeStart, 2);
 800193a:	2202      	movs	r2, #2
 800193c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001940:	4860      	ldr	r0, [pc, #384]	@ (8001ac4 <ESP_AT_Set_SNTP_Time+0x310>)
 8001942:	f00c f949 	bl	800dbd8 <strncpy>
        time[2] = '\0'; // 문자열 종료
 8001946:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <ESP_AT_Set_SNTP_Time+0x310>)
 8001948:	2200      	movs	r2, #0
 800194a:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sHour = atoi(time); // 문자열을 정수로 변환하여 구조체에 저장
 800194c:	485d      	ldr	r0, [pc, #372]	@ (8001ac4 <ESP_AT_Set_SNTP_Time+0x310>)
 800194e:	f00b ff1c 	bl	800d78a <atoi>
 8001952:	4602      	mov	r2, r0
 8001954:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001958:	611a      	str	r2, [r3, #16]

    HAL_UART_Transmit(&huart1, (uint8_t*)time, strlen(time), HAL_MAX_DELAY);
 800195a:	485a      	ldr	r0, [pc, #360]	@ (8001ac4 <ESP_AT_Set_SNTP_Time+0x310>)
 800195c:	f7fe fc42 	bl	80001e4 <strlen>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	4956      	ldr	r1, [pc, #344]	@ (8001ac4 <ESP_AT_Set_SNTP_Time+0x310>)
 800196a:	4852      	ldr	r0, [pc, #328]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 800196c:	f007 fc8a 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	2202      	movs	r2, #2
 8001976:	4950      	ldr	r1, [pc, #320]	@ (8001ab8 <ESP_AT_Set_SNTP_Time+0x304>)
 8001978:	484e      	ldr	r0, [pc, #312]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 800197a:	f007 fc83 	bl	8009284 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char minute[3] = {0}; // 분을 저장할 버퍼 (2자 + NULL)

    // 응답에서 분 추출
    if (timeStart != NULL) 
 800197e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <ESP_AT_Set_SNTP_Time+0x1ee>
    {
        timeStart += 3; // 시 다음 콜론 문자로 이동
 8001986:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800198a:	3303      	adds	r3, #3
 800198c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 분 숫자를 2글자 추출
        strncpy(minute, timeStart, 2);
 8001990:	2202      	movs	r2, #2
 8001992:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001996:	484c      	ldr	r0, [pc, #304]	@ (8001ac8 <ESP_AT_Set_SNTP_Time+0x314>)
 8001998:	f00c f91e 	bl	800dbd8 <strncpy>
        minute[2] = '\0'; // 문자열 종료
 800199c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac8 <ESP_AT_Set_SNTP_Time+0x314>)
 800199e:	2200      	movs	r2, #0
 80019a0:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sMinute = atoi(minute); // 문자열을 정수로 변환하여 구조체에 저장
 80019a2:	4849      	ldr	r0, [pc, #292]	@ (8001ac8 <ESP_AT_Set_SNTP_Time+0x314>)
 80019a4:	f00b fef1 	bl	800d78a <atoi>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019ae:	615a      	str	r2, [r3, #20]

    HAL_UART_Transmit(&huart1, (uint8_t*)minute, strlen(minute), HAL_MAX_DELAY);
 80019b0:	4845      	ldr	r0, [pc, #276]	@ (8001ac8 <ESP_AT_Set_SNTP_Time+0x314>)
 80019b2:	f7fe fc17 	bl	80001e4 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	4942      	ldr	r1, [pc, #264]	@ (8001ac8 <ESP_AT_Set_SNTP_Time+0x314>)
 80019c0:	483c      	ldr	r0, [pc, #240]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 80019c2:	f007 fc5f 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	2202      	movs	r2, #2
 80019cc:	493a      	ldr	r1, [pc, #232]	@ (8001ab8 <ESP_AT_Set_SNTP_Time+0x304>)
 80019ce:	4839      	ldr	r0, [pc, #228]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 80019d0:	f007 fc58 	bl	8009284 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char second[3] = {0}; // 초를 저장할 버퍼 (2자 + NULL)

    // 응답에서 초 추출
    if (timeStart != NULL) 
 80019d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00d      	beq.n	80019f8 <ESP_AT_Set_SNTP_Time+0x244>
    {
        timeStart += 3; // 분 다음 콜론 문자로 이동
 80019dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019e0:	3303      	adds	r3, #3
 80019e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 초 숫자를 2글자 추출
        strncpy(second, timeStart, 2);
 80019e6:	2202      	movs	r2, #2
 80019e8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80019ec:	4837      	ldr	r0, [pc, #220]	@ (8001acc <ESP_AT_Set_SNTP_Time+0x318>)
 80019ee:	f00c f8f3 	bl	800dbd8 <strncpy>
        second[2] = '\0'; // 문자열 종료
 80019f2:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <ESP_AT_Set_SNTP_Time+0x318>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sSecond = atoi(second); // 문자열을 정수로 변환하여 구조체에 저장
 80019f8:	4834      	ldr	r0, [pc, #208]	@ (8001acc <ESP_AT_Set_SNTP_Time+0x318>)
 80019fa:	f00b fec6 	bl	800d78a <atoi>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a04:	619a      	str	r2, [r3, #24]

    HAL_UART_Transmit(&huart1, (uint8_t*)second, strlen(second), HAL_MAX_DELAY);
 8001a06:	4831      	ldr	r0, [pc, #196]	@ (8001acc <ESP_AT_Set_SNTP_Time+0x318>)
 8001a08:	f7fe fbec 	bl	80001e4 <strlen>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	492d      	ldr	r1, [pc, #180]	@ (8001acc <ESP_AT_Set_SNTP_Time+0x318>)
 8001a16:	4827      	ldr	r0, [pc, #156]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 8001a18:	f007 fc34 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	2202      	movs	r2, #2
 8001a22:	4925      	ldr	r1, [pc, #148]	@ (8001ab8 <ESP_AT_Set_SNTP_Time+0x304>)
 8001a24:	4823      	ldr	r0, [pc, #140]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 8001a26:	f007 fc2d 	bl	8009284 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char year[5] = {0}; // 년도를 저장할 버퍼 (4자 + NULL)

    // 응답에서 년도 추출
    if (timeStart != NULL) 
 8001a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00d      	beq.n	8001a4e <ESP_AT_Set_SNTP_Time+0x29a>
    {
        timeStart += 3; // 초 다음 공백 문자로 이동
 8001a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a36:	3303      	adds	r3, #3
 8001a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 년도 숫자를 4글자 추출
        strncpy(year, timeStart, 4);
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001a42:	4823      	ldr	r0, [pc, #140]	@ (8001ad0 <ESP_AT_Set_SNTP_Time+0x31c>)
 8001a44:	f00c f8c8 	bl	800dbd8 <strncpy>
        year[4] = '\0'; // 문자열 종료
 8001a48:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <ESP_AT_Set_SNTP_Time+0x31c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	711a      	strb	r2, [r3, #4]
    }

    pAtUtcTime->sYear = atoi(year); // 문자열을 정수로 변환하여 구조체에 저장
 8001a4e:	4820      	ldr	r0, [pc, #128]	@ (8001ad0 <ESP_AT_Set_SNTP_Time+0x31c>)
 8001a50:	f00b fe9b 	bl	800d78a <atoi>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a5a:	601a      	str	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, (uint8_t*)year, strlen(year), HAL_MAX_DELAY);
 8001a5c:	481c      	ldr	r0, [pc, #112]	@ (8001ad0 <ESP_AT_Set_SNTP_Time+0x31c>)
 8001a5e:	f7fe fbc1 	bl	80001e4 <strlen>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	4919      	ldr	r1, [pc, #100]	@ (8001ad0 <ESP_AT_Set_SNTP_Time+0x31c>)
 8001a6c:	4811      	ldr	r0, [pc, #68]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 8001a6e:	f007 fc09 	bl	8009284 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	2202      	movs	r2, #2
 8001a78:	490f      	ldr	r1, [pc, #60]	@ (8001ab8 <ESP_AT_Set_SNTP_Time+0x304>)
 8001a7a:	480e      	ldr	r0, [pc, #56]	@ (8001ab4 <ESP_AT_Set_SNTP_Time+0x300>)
 8001a7c:	f007 fc02 	bl	8009284 <HAL_UART_Transmit>

    // ──────────────────────────────────────────────────────────────────────────────

    if (result == AT_ERROR) // 에러 발생 시
 8001a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <ESP_AT_Set_SNTP_Time+0x2d8>
    {
        return AT_ERROR; // 실패 코드 반환
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e004      	b.n	8001a96 <ESP_AT_Set_SNTP_Time+0x2e2>
    }
    
    result = AT_OK; // 성공 코드
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    return result; // 결과 반환
 8001a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	37a0      	adds	r7, #160	@ 0xa0
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	0800f78c 	.word	0x0800f78c
 8001aa4:	0800f7c4 	.word	0x0800f7c4
 8001aa8:	0800f7d8 	.word	0x0800f7d8
 8001aac:	0800f7ec 	.word	0x0800f7ec
 8001ab0:	20000d64 	.word	0x20000d64
 8001ab4:	20000f10 	.word	0x20000f10
 8001ab8:	0800f730 	.word	0x0800f730
 8001abc:	20000d68 	.word	0x20000d68
 8001ac0:	20000d6c 	.word	0x20000d6c
 8001ac4:	20000d70 	.word	0x20000d70
 8001ac8:	20000d74 	.word	0x20000d74
 8001acc:	20000d78 	.word	0x20000d78
 8001ad0:	20000d7c 	.word	0x20000d7c

08001ad4 <Handle_IPD_and_Respond>:

// ──────────────────────────────────────────────────────────────────────────────
// ──────────────────────────────────────────────────────────────────────────────

void Handle_IPD_and_Respond(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	f5ad 7d74 	sub.w	sp, sp, #976	@ 0x3d0
 8001ada:	af02      	add	r7, sp, #8
    uint32_t start;
    uint16_t linkID, dataLen;

    while (1)
    {
        int  hdrPos = 0, payPos = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

        // — 1) '+IPD' 헤더 수집 (‘:’ 포함)
        do {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001ae8:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001aec:	23c8      	movs	r3, #200	@ 0xc8
 8001aee:	2201      	movs	r2, #1
 8001af0:	48c0      	ldr	r0, [pc, #768]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001af2:	f007 fc52 	bl	800939a <HAL_UART_Receive>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
            {
                continue;
            }
        } while (ch != '+');
 8001afa:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001afe:	2b2b      	cmp	r3, #43	@ 0x2b
 8001b00:	d1f2      	bne.n	8001ae8 <Handle_IPD_and_Respond+0x14>
        ipdHdr[hdrPos++] = '+';
 8001b02:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8001b0c:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 8001b10:	443b      	add	r3, r7
 8001b12:	222b      	movs	r2, #43	@ 0x2b
 8001b14:	f803 2c70 	strb.w	r2, [r3, #-112]

        while (hdrPos < IPD_HDR_MAX-1)
 8001b18:	e01b      	b.n	8001b52 <Handle_IPD_and_Respond+0x7e>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001b1a:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001b1e:	23c8      	movs	r3, #200	@ 0xc8
 8001b20:	2201      	movs	r2, #1
 8001b22:	48b4      	ldr	r0, [pc, #720]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001b24:	f007 fc39 	bl	800939a <HAL_UART_Receive>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <Handle_IPD_and_Respond+0x5e>
            {
                Error_Handler();
 8001b2e:	f001 fae1 	bl	80030f4 <Error_Handler>
            }
            ipdHdr[hdrPos++] = ch;
 8001b32:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8001b3c:	f897 239b 	ldrb.w	r2, [r7, #923]	@ 0x39b
 8001b40:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 8001b44:	443b      	add	r3, r7
 8001b46:	f803 2c70 	strb.w	r2, [r3, #-112]
            if (ch == ':')
 8001b4a:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001b4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b50:	d004      	beq.n	8001b5c <Handle_IPD_and_Respond+0x88>
        while (hdrPos < IPD_HDR_MAX-1)
 8001b52:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001b56:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b58:	dddf      	ble.n	8001b1a <Handle_IPD_and_Respond+0x46>
 8001b5a:	e000      	b.n	8001b5e <Handle_IPD_and_Respond+0x8a>
            {
                break;
 8001b5c:	bf00      	nop
            }
        }
        ipdHdr[hdrPos] = '\0';
 8001b5e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8001b62:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001b66:	4413      	add	r3, r2
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]

        // — 2) linkID, dataLen 파싱
        if (sscanf(ipdHdr, "+IPD,%hu,%hu:", &linkID, &dataLen) != 2)
 8001b6c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001b70:	f507 72ab 	add.w	r2, r7, #342	@ 0x156
 8001b74:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 8001b78:	499f      	ldr	r1, [pc, #636]	@ (8001df8 <Handle_IPD_and_Respond+0x324>)
 8001b7a:	f00b ff87 	bl	800da8c <siscanf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	f040 8135 	bne.w	8001df0 <Handle_IPD_and_Respond+0x31c>
        {
            continue;
        }

        // — 3) dataLen 바이트만큼 payload 수집 (CR/LF 포함)
        for (uint16_t i = 0; i < dataLen && payPos < PAYLOAD_MAX-1; ++i)
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8a7 33be 	strh.w	r3, [r7, #958]	@ 0x3be
 8001b8c:	e01c      	b.n	8001bc8 <Handle_IPD_and_Respond+0xf4>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001b8e:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001b92:	23c8      	movs	r3, #200	@ 0xc8
 8001b94:	2201      	movs	r2, #1
 8001b96:	4897      	ldr	r0, [pc, #604]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001b98:	f007 fbff 	bl	800939a <HAL_UART_Receive>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <Handle_IPD_and_Respond+0xd2>
            {
                Error_Handler();
 8001ba2:	f001 faa7 	bl	80030f4 <Error_Handler>
            }
            payload[payPos++] = ch;
 8001ba6:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001bb0:	f897 139b 	ldrb.w	r1, [r7, #923]	@ 0x39b
 8001bb4:	f507 7272 	add.w	r2, r7, #968	@ 0x3c8
 8001bb8:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
 8001bbc:	54d1      	strb	r1, [r2, r3]
        for (uint16_t i = 0; i < dataLen && payPos < PAYLOAD_MAX-1; ++i)
 8001bbe:	f8b7 33be 	ldrh.w	r3, [r7, #958]	@ 0x3be
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f8a7 33be 	strh.w	r3, [r7, #958]	@ 0x3be
 8001bc8:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001bcc:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f8b7 23be 	ldrh.w	r2, [r7, #958]	@ 0x3be
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d204      	bcs.n	8001be4 <Handle_IPD_and_Respond+0x110>
 8001bda:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001bde:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001be2:	ddd4      	ble.n	8001b8e <Handle_IPD_and_Respond+0xba>
        }
        payload[payPos] = '\0';
 8001be4:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001be8:	f5a3 721c 	sub.w	r2, r3, #624	@ 0x270
 8001bec:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

        // — 4) GET 라인 파싱
        //    예: "GET /path HTTP/1.1"
        char method[8], url[128];
        int isIcon = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
        if (sscanf(payload, "%7s %127s", method, url) == 2)
 8001bfc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c00:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 8001c04:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8001c08:	497c      	ldr	r1, [pc, #496]	@ (8001dfc <Handle_IPD_and_Respond+0x328>)
 8001c0a:	f00b ff3f 	bl	800da8c <siscanf>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d10b      	bne.n	8001c2c <Handle_IPD_and_Respond+0x158>
        {
            if (strcmp(url, "/apple-touch-icon-precomposed.png") == 0)
 8001c14:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c18:	4979      	ldr	r1, [pc, #484]	@ (8001e00 <Handle_IPD_and_Respond+0x32c>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fad8 	bl	80001d0 <strcmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <Handle_IPD_and_Respond+0x158>
            {
                isIcon = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
        }

        // — 5) 응답 헤더/바디 준비
        char  respHdr[128];
        int   hdrLen, bodyLen;
        if (isIcon)
 8001c2c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d016      	beq.n	8001c62 <Handle_IPD_and_Respond+0x18e>
        {
            // 204 No Content
            const char *hdr204 =
 8001c34:	4b73      	ldr	r3, [pc, #460]	@ (8001e04 <Handle_IPD_and_Respond+0x330>)
 8001c36:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
              "HTTP/1.1 204 No Content\r\n"
              "Connection: close\r\n"
              "\r\n";
            hdrLen  = strlen(hdr204);
 8001c3a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	@ 0x3a8
 8001c3e:	f7fe fad1 	bl	80001e4 <strlen>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
            strncpy(respHdr, hdr204, hdrLen);
 8001c48:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8001c4c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001c50:	f8d7 13a8 	ldr.w	r1, [r7, #936]	@ 0x3a8
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00b ffbf 	bl	800dbd8 <strncpy>
            bodyLen = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8001c60:	e017      	b.n	8001c92 <Handle_IPD_and_Respond+0x1be>
        }
        else
        {
            // 200 OK + HTML
            // bodyLen = sizeof(htmlBody) - 1;
            bodyLen = htmlBodyLen;
 8001c62:	4b69      	ldr	r3, [pc, #420]	@ (8001e08 <Handle_IPD_and_Respond+0x334>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
            hdrLen  = snprintf(respHdr, sizeof(respHdr),
 8001c6a:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001c6e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001c72:	4a66      	ldr	r2, [pc, #408]	@ (8001e0c <Handle_IPD_and_Respond+0x338>)
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	f00b fed5 	bl	800da24 <sniprintf>
 8001c7a:	f8c7 03b4 	str.w	r0, [r7, #948]	@ 0x3b4
              "Content-Type: text/html\r\n"
              "Content-Length: %d\r\n"
              "Connection: close\r\n"
              "\r\n",
              bodyLen);
            if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
 8001c7e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db03      	blt.n	8001c8e <Handle_IPD_and_Respond+0x1ba>
 8001c86:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c8c:	dd01      	ble.n	8001c92 <Handle_IPD_and_Respond+0x1be>
            {
                Error_Handler();
 8001c8e:	f001 fa31 	bl	80030f4 <Error_Handler>
            }
        }

        // — 6) AT+CIPSEND=<linkID>,<hdrLen+bodyLen>
        int totalLen = hdrLen + bodyLen;
 8001c92:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8001c96:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
        char cmd[64];
        int  cmdLen = snprintf(cmd, sizeof(cmd),
 8001ca0:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001ca4:	f2a3 2372 	subw	r3, r3, #626	@ 0x272
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	1d38      	adds	r0, r7, #4
 8001cae:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	4a56      	ldr	r2, [pc, #344]	@ (8001e10 <Handle_IPD_and_Respond+0x33c>)
 8001cb8:	2140      	movs	r1, #64	@ 0x40
 8001cba:	f00b feb3 	bl	800da24 <sniprintf>
 8001cbe:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
                        "AT+CIPSEND=%d,%d\r\n",
                        linkID, totalLen);
        if (cmdLen < 0 || cmdLen >= (int)sizeof(cmd))
 8001cc2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db03      	blt.n	8001cd2 <Handle_IPD_and_Respond+0x1fe>
 8001cca:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001cce:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cd0:	dd01      	ble.n	8001cd6 <Handle_IPD_and_Respond+0x202>
        {
            Error_Handler();
 8001cd2:	f001 fa0f 	bl	80030f4 <Error_Handler>
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY);
 8001cd6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	1d39      	adds	r1, r7, #4
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	4844      	ldr	r0, [pc, #272]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001ce4:	f007 face 	bl	8009284 <HAL_UART_Transmit>

        // — 7) '>' 프롬프트 대기
        start = HAL_GetTick();
 8001ce8:	f003 fd72 	bl	80057d0 <HAL_GetTick>
 8001cec:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c
        do
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT)== HAL_OK
 8001cf0:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001cf4:	23c8      	movs	r3, #200	@ 0xc8
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	483e      	ldr	r0, [pc, #248]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001cfa:	f007 fb4e 	bl	800939a <HAL_UART_Receive>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <Handle_IPD_and_Respond+0x238>
                && ch == '>')
 8001d04:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001d08:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d0a:	d008      	beq.n	8001d1e <Handle_IPD_and_Respond+0x24a>
            {
                break;
            }
        } while (HAL_GetTick() - start < RX_TIMEOUT);
 8001d0c:	f003 fd60 	bl	80057d0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d1a:	d9e9      	bls.n	8001cf0 <Handle_IPD_and_Respond+0x21c>
 8001d1c:	e000      	b.n	8001d20 <Handle_IPD_and_Respond+0x24c>
                break;
 8001d1e:	bf00      	nop

        // — 8) 헤더 + (icon이면 바디 없음 / 아니면 htmlBody) 전송
        HAL_UART_Transmit(&huart2, (uint8_t*)respHdr, hdrLen, HAL_MAX_DELAY);
 8001d20:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	4831      	ldr	r0, [pc, #196]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001d30:	f007 faa8 	bl	8009284 <HAL_UART_Transmit>
        if (!isIcon)
 8001d34:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d108      	bne.n	8001d4e <Handle_IPD_and_Respond+0x27a>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)htmlBody, bodyLen, HAL_MAX_DELAY);
 8001d3c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	4933      	ldr	r1, [pc, #204]	@ (8001e14 <Handle_IPD_and_Respond+0x340>)
 8001d48:	482a      	ldr	r0, [pc, #168]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001d4a:	f007 fa9b 	bl	8009284 <HAL_UART_Transmit>
        }

        // — 9) “SEND OK” URC 대기 (최대 SEND_TIMEOUT)
        start = HAL_GetTick();
 8001d4e:	f003 fd3f 	bl	80057d0 <HAL_GetTick>
 8001d52:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c
        const char sendOk[] = "SEND OK";
 8001d56:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001d5a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e18 <Handle_IPD_and_Respond+0x344>)
 8001d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d64:	e883 0003 	stmia.w	r3, {r0, r1}
        int  match = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8001d6e:	e022      	b.n	8001db6 <Handle_IPD_and_Respond+0x2e2>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT)== HAL_OK)
 8001d70:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001d74:	23c8      	movs	r3, #200	@ 0xc8
 8001d76:	2201      	movs	r2, #1
 8001d78:	481e      	ldr	r0, [pc, #120]	@ (8001df4 <Handle_IPD_and_Respond+0x320>)
 8001d7a:	f007 fb0e 	bl	800939a <HAL_UART_Receive>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d118      	bne.n	8001db6 <Handle_IPD_and_Respond+0x2e2>
            {
                if (ch == sendOk[match])
 8001d84:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001d88:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001d8c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001d90:	4413      	add	r3, r2
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d109      	bne.n	8001db0 <Handle_IPD_and_Respond+0x2dc>
                {
                    if (++match == (int)strlen(sendOk))
 8001d9c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001da0:	3301      	adds	r3, #1
 8001da2:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001da6:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d103      	bne.n	8001db6 <Handle_IPD_and_Respond+0x2e2>
                    {
                        break;
 8001dae:	e00b      	b.n	8001dc8 <Handle_IPD_and_Respond+0x2f4>
                    }
                }
                else
                {
                    match = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8001db6:	f003 fd0b 	bl	80057d0 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dc6:	d3d3      	bcc.n	8001d70 <Handle_IPD_and_Respond+0x29c>
                }
            }
        }

        // — 10) 안전 딜레이 후 연결 종료
        HAL_Delay(50);
 8001dc8:	2032      	movs	r0, #50	@ 0x32
 8001dca:	f003 fd0d 	bl	80057e8 <HAL_Delay>
        cmdLen = snprintf(cmd, sizeof(cmd),
 8001dce:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001dd2:	f2a3 2372 	subw	r3, r3, #626	@ 0x272
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	1d38      	adds	r0, r7, #4
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <Handle_IPD_and_Respond+0x348>)
 8001ddc:	2140      	movs	r1, #64	@ 0x40
 8001dde:	f00b fe21 	bl	800da24 <sniprintf>
 8001de2:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
                         "AT+CIPCLOSE=%d\r\n",
                         linkID);
        ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fae9 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 8001dee:	e675      	b.n	8001adc <Handle_IPD_and_Respond+0x8>
            continue;
 8001df0:	bf00      	nop
    {
 8001df2:	e673      	b.n	8001adc <Handle_IPD_and_Respond+0x8>
 8001df4:	20000f58 	.word	0x20000f58
 8001df8:	0800f938 	.word	0x0800f938
 8001dfc:	0800f948 	.word	0x0800f948
 8001e00:	0800f954 	.word	0x0800f954
 8001e04:	0800f978 	.word	0x0800f978
 8001e08:	08010b68 	.word	0x08010b68
 8001e0c:	0800f9a8 	.word	0x0800f9a8
 8001e10:	0800f870 	.word	0x0800f870
 8001e14:	08010b0c 	.word	0x08010b0c
 8001e18:	0800f9fc 	.word	0x0800f9fc
 8001e1c:	0800f884 	.word	0x0800f884

08001e20 <Handle_IPD_and_Respond_7>:



// 라디오 박스 체크 와이파이 기능 추가
void Handle_IPD_and_Respond_7(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	f5ad 6d98 	sub.w	sp, sp, #1216	@ 0x4c0
 8001e26:	af02      	add	r7, sp, #8
    uint32_t start;
    char     respHdr[128];
    int      hdrLen;
    char     cmd[64];
    int      cmdLen, match;
    int      isLed=0, isIcon=0, isScan=0, isConnect=0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498

    const char sendOk[] = "SEND OK";
 8001e40:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001e44:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001e48:	4ac2      	ldr	r2, [pc, #776]	@ (8002154 <Handle_IPD_and_Respond_7+0x334>)
 8001e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e4e:	e883 0003 	stmia.w	r3, {r0, r1}

    // htmlBody_inline_4 를 담는 변수 설정, body = htmlBody_inline_4 형식
    const char* body = htmlBody_inline_4;
 8001e52:	4bc1      	ldr	r3, [pc, #772]	@ (8002158 <Handle_IPD_and_Respond_7+0x338>)
 8001e54:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
    // htmlBody_inline_4Len
    int bodyLen = htmlBody_inline_4Len;
 8001e58:	4bc0      	ldr	r3, [pc, #768]	@ (800215c <Handle_IPD_and_Respond_7+0x33c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

    while (1)
    {
        isLed = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
        isIcon = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
        isScan = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
        isConnect = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 8001e78:	e008      	b.n	8001e8c <Handle_IPD_and_Respond_7+0x6c>
        // '+' 문자 대기
        do {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
            {
                // return;
                goto IPD_START; // 재시도
 8001e7a:	bf00      	nop
 8001e7c:	e006      	b.n	8001e8c <Handle_IPD_and_Respond_7+0x6c>
        while (hdrPos < IPD_HDR_MAX - 1)
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
            {
                // return;
                goto IPD_START; // 재시도
 8001e7e:	bf00      	nop
 8001e80:	e004      	b.n	8001e8c <Handle_IPD_and_Respond_7+0x6c>

        // — 2) linkID, dataLen 파싱
        if (sscanf(ipdHdr, "+IPD,%hu,%hu:", &linkID, &dataLen) != 2)
        {
            // return;
            goto IPD_START; // 재시도
 8001e82:	bf00      	nop
 8001e84:	e002      	b.n	8001e8c <Handle_IPD_and_Respond_7+0x6c>
        for (uint16_t i = 0; i < dataLen; ++i)
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
            {
                // return;
                goto IPD_START; // 재시도
 8001e86:	bf00      	nop
 8001e88:	e000      	b.n	8001e8c <Handle_IPD_and_Respond_7+0x6c>
                bodyLen);
        }
        if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
        {
            // return;
            goto IPD_START; // 재시도
 8001e8a:	bf00      	nop
        hdrPos = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001e92:	f207 4167 	addw	r1, r7, #1127	@ 0x467
 8001e96:	23c8      	movs	r3, #200	@ 0xc8
 8001e98:	2201      	movs	r2, #1
 8001e9a:	48b1      	ldr	r0, [pc, #708]	@ (8002160 <Handle_IPD_and_Respond_7+0x340>)
 8001e9c:	f007 fa7d 	bl	800939a <HAL_UART_Receive>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e9      	bne.n	8001e7a <Handle_IPD_and_Respond_7+0x5a>
        } while (ch != '+');
 8001ea6:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 8001eaa:	2b2b      	cmp	r3, #43	@ 0x2b
 8001eac:	d1f1      	bne.n	8001e92 <Handle_IPD_and_Respond_7+0x72>
        ipdHdr[hdrPos++] = '+';
 8001eae:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	f8c7 24b4 	str.w	r2, [r7, #1204]	@ 0x4b4
 8001eb8:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8001ebc:	443b      	add	r3, r7
 8001ebe:	222b      	movs	r2, #43	@ 0x2b
 8001ec0:	f803 2c94 	strb.w	r2, [r3, #-148]
        while (hdrPos < IPD_HDR_MAX - 1)
 8001ec4:	e019      	b.n	8001efa <Handle_IPD_and_Respond_7+0xda>
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001ec6:	f207 4167 	addw	r1, r7, #1127	@ 0x467
 8001eca:	23c8      	movs	r3, #200	@ 0xc8
 8001ecc:	2201      	movs	r2, #1
 8001ece:	48a4      	ldr	r0, [pc, #656]	@ (8002160 <Handle_IPD_and_Respond_7+0x340>)
 8001ed0:	f007 fa63 	bl	800939a <HAL_UART_Receive>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1d1      	bne.n	8001e7e <Handle_IPD_and_Respond_7+0x5e>
            ipdHdr[hdrPos++] = ch;
 8001eda:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	f8c7 24b4 	str.w	r2, [r7, #1204]	@ 0x4b4
 8001ee4:	f897 2467 	ldrb.w	r2, [r7, #1127]	@ 0x467
 8001ee8:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8001eec:	443b      	add	r3, r7
 8001eee:	f803 2c94 	strb.w	r2, [r3, #-148]
            if (ch == ':')
 8001ef2:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 8001ef6:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ef8:	d004      	beq.n	8001f04 <Handle_IPD_and_Respond_7+0xe4>
        while (hdrPos < IPD_HDR_MAX - 1)
 8001efa:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001efe:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f00:	dde1      	ble.n	8001ec6 <Handle_IPD_and_Respond_7+0xa6>
 8001f02:	e000      	b.n	8001f06 <Handle_IPD_and_Respond_7+0xe6>
                break;
 8001f04:	bf00      	nop
        ipdHdr[hdrPos] = '\0';
 8001f06:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 8001f0a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001f0e:	4413      	add	r3, r2
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
        if (sscanf(ipdHdr, "+IPD,%hu,%hu:", &linkID, &dataLen) != 2)
 8001f14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001f18:	f207 2222 	addw	r2, r7, #546	@ 0x222
 8001f1c:	f207 4024 	addw	r0, r7, #1060	@ 0x424
 8001f20:	4990      	ldr	r1, [pc, #576]	@ (8002164 <Handle_IPD_and_Respond_7+0x344>)
 8001f22:	f00b fdb3 	bl	800da8c <siscanf>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d1aa      	bne.n	8001e82 <Handle_IPD_and_Respond_7+0x62>
        payPos = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
        for (uint16_t i = 0; i < dataLen; ++i)
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8a7 3492 	strh.w	r3, [r7, #1170]	@ 0x492
 8001f38:	e01f      	b.n	8001f7a <Handle_IPD_and_Respond_7+0x15a>
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001f3a:	f207 4167 	addw	r1, r7, #1127	@ 0x467
 8001f3e:	23c8      	movs	r3, #200	@ 0xc8
 8001f40:	2201      	movs	r2, #1
 8001f42:	4887      	ldr	r0, [pc, #540]	@ (8002160 <Handle_IPD_and_Respond_7+0x340>)
 8001f44:	f007 fa29 	bl	800939a <HAL_UART_Receive>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d19b      	bne.n	8001e86 <Handle_IPD_and_Respond_7+0x66>
            if (payPos < PAYLOAD_MAX - 1)
 8001f4e:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 8001f52:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001f56:	dc0b      	bgt.n	8001f70 <Handle_IPD_and_Respond_7+0x150>
                payload[payPos++] = ch;
 8001f58:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	f8c7 24b0 	str.w	r2, [r7, #1200]	@ 0x4b0
 8001f62:	f897 1467 	ldrb.w	r1, [r7, #1127]	@ 0x467
 8001f66:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8001f6a:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8001f6e:	54d1      	strb	r1, [r2, r3]
        for (uint16_t i = 0; i < dataLen; ++i)
 8001f70:	f8b7 3492 	ldrh.w	r3, [r7, #1170]	@ 0x492
 8001f74:	3301      	adds	r3, #1
 8001f76:	f8a7 3492 	strh.w	r3, [r7, #1170]	@ 0x492
 8001f7a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001f7e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f8b7 2492 	ldrh.w	r2, [r7, #1170]	@ 0x492
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3d6      	bcc.n	8001f3a <Handle_IPD_and_Respond_7+0x11a>
        payload[payPos] = '\0';
 8001f8c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001f90:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001f94:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 8001f98:	4413      	add	r3, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
        char method[8] = {0}, url[128] = {0};
 8001f9e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001fa2:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001fb2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	227c      	movs	r2, #124	@ 0x7c
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00b fde2 	bl	800db8a <memset>
        if (sscanf(payload, "%7s %127s", method, url) == 2)
 8001fc6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001fca:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8001fce:	f507 7009 	add.w	r0, r7, #548	@ 0x224
 8001fd2:	4965      	ldr	r1, [pc, #404]	@ (8002168 <Handle_IPD_and_Respond_7+0x348>)
 8001fd4:	f00b fd5a 	bl	800da8c <siscanf>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d13c      	bne.n	8002058 <Handle_IPD_and_Respond_7+0x238>
            if (strcmp(url, "/scan") == 0)
 8001fde:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001fe2:	4962      	ldr	r1, [pc, #392]	@ (800216c <Handle_IPD_and_Respond_7+0x34c>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f8f3 	bl	80001d0 <strcmp>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <Handle_IPD_and_Respond_7+0x1d8>
                isScan = 1;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 8001ff6:	e02f      	b.n	8002058 <Handle_IPD_and_Respond_7+0x238>
            else if (strcmp(url, "/led") == 0)
 8001ff8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ffc:	495c      	ldr	r1, [pc, #368]	@ (8002170 <Handle_IPD_and_Respond_7+0x350>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f8e6 	bl	80001d0 <strcmp>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <Handle_IPD_and_Respond_7+0x1f2>
                isLed = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8002010:	e022      	b.n	8002058 <Handle_IPD_and_Respond_7+0x238>
            else if (strcmp(url, "/favicon.ico") == 0 || strstr(url, "apple-touch-icon") != NULL)
 8002012:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002016:	4957      	ldr	r1, [pc, #348]	@ (8002174 <Handle_IPD_and_Respond_7+0x354>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe f8d9 	bl	80001d0 <strcmp>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <Handle_IPD_and_Respond_7+0x216>
 8002024:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002028:	4953      	ldr	r1, [pc, #332]	@ (8002178 <Handle_IPD_and_Respond_7+0x358>)
 800202a:	4618      	mov	r0, r3
 800202c:	f00b fe44 	bl	800dcb8 <strstr>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <Handle_IPD_and_Respond_7+0x21e>
                isIcon = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 800203c:	e00c      	b.n	8002058 <Handle_IPD_and_Respond_7+0x238>
            else if (strncmp(url, "/connect?", 9) == 0)
 800203e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002042:	2209      	movs	r2, #9
 8002044:	494d      	ldr	r1, [pc, #308]	@ (800217c <Handle_IPD_and_Respond_7+0x35c>)
 8002046:	4618      	mov	r0, r3
 8002048:	f00b fdb4 	bl	800dbb4 <strncmp>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <Handle_IPD_and_Respond_7+0x238>
                isConnect = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
        if (isScan)
 8002058:	f8d7 349c 	ldr.w	r3, [r7, #1180]	@ 0x49c
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80d6 	beq.w	800220e <Handle_IPD_and_Respond_7+0x3ee>
            const char *html = g_nWifiListReady ? g_cWifiListHtml
 8002062:	4b47      	ldr	r3, [pc, #284]	@ (8002180 <Handle_IPD_and_Respond_7+0x360>)
 8002064:	681b      	ldr	r3, [r3, #0]
                                       : "<li>Scanning…</li>";
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <Handle_IPD_and_Respond_7+0x24e>
 800206a:	4b46      	ldr	r3, [pc, #280]	@ (8002184 <Handle_IPD_and_Respond_7+0x364>)
 800206c:	e000      	b.n	8002070 <Handle_IPD_and_Respond_7+0x250>
 800206e:	4b46      	ldr	r3, [pc, #280]	@ (8002188 <Handle_IPD_and_Respond_7+0x368>)
            const char *html = g_nWifiListReady ? g_cWifiListHtml
 8002070:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
                (int)strlen(html));
 8002074:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8002078:	f7fe f8b4 	bl	80001e4 <strlen>
 800207c:	4603      	mov	r3, r0
            hdrLen = snprintf(hdr, sizeof(hdr),
 800207e:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8002082:	4a42      	ldr	r2, [pc, #264]	@ (800218c <Handle_IPD_and_Respond_7+0x36c>)
 8002084:	2180      	movs	r1, #128	@ 0x80
 8002086:	f00b fccd 	bl	800da24 <sniprintf>
 800208a:	f8c7 04ac 	str.w	r0, [r7, #1196]	@ 0x4ac
            int total = hdrLen + strlen(html);
 800208e:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8002092:	f7fe f8a7 	bl	80001e4 <strlen>
 8002096:	4602      	mov	r2, r0
 8002098:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 800209c:	4413      	add	r3, r2
 800209e:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
            snprintf(cmd, sizeof(cmd),
 80020a2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80020a6:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80020b2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	4a35      	ldr	r2, [pc, #212]	@ (8002190 <Handle_IPD_and_Respond_7+0x370>)
 80020bc:	2140      	movs	r1, #64	@ 0x40
 80020be:	f00b fcb1 	bl	800da24 <sniprintf>
            HAL_UART_Transmit(&huart2,(uint8_t*)cmd,strlen(cmd),HAL_MAX_DELAY);
 80020c2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f88c 	bl	80001e4 <strlen>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	4821      	ldr	r0, [pc, #132]	@ (8002160 <Handle_IPD_and_Respond_7+0x340>)
 80020da:	f007 f8d3 	bl	8009284 <HAL_UART_Transmit>
            start = HAL_GetTick();
 80020de:	f003 fb77 	bl	80057d0 <HAL_GetTick>
 80020e2:	f8c7 0484 	str.w	r0, [r7, #1156]	@ 0x484
                if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 80020e6:	f207 4167 	addw	r1, r7, #1127	@ 0x467
 80020ea:	23c8      	movs	r3, #200	@ 0xc8
 80020ec:	2201      	movs	r2, #1
 80020ee:	481c      	ldr	r0, [pc, #112]	@ (8002160 <Handle_IPD_and_Respond_7+0x340>)
 80020f0:	f007 f953 	bl	800939a <HAL_UART_Receive>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <Handle_IPD_and_Respond_7+0x2e2>
                    ch == '>')
 80020fa:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
                if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 80020fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8002100:	d008      	beq.n	8002114 <Handle_IPD_and_Respond_7+0x2f4>
            } while (HAL_GetTick() - start < RX_TIMEOUT);
 8002102:	f003 fb65 	bl	80057d0 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002110:	d9e9      	bls.n	80020e6 <Handle_IPD_and_Respond_7+0x2c6>
 8002112:	e000      	b.n	8002116 <Handle_IPD_and_Respond_7+0x2f6>
                    break;
 8002114:	bf00      	nop
            HAL_UART_Transmit(&huart2,(uint8_t*)hdr, hdrLen, HAL_MAX_DELAY);
 8002116:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 800211a:	b29a      	uxth	r2, r3
 800211c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
 8002124:	480e      	ldr	r0, [pc, #56]	@ (8002160 <Handle_IPD_and_Respond_7+0x340>)
 8002126:	f007 f8ad 	bl	8009284 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2,(uint8_t*)html, strlen(html), HAL_MAX_DELAY);
 800212a:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 800212e:	f7fe f859 	bl	80001e4 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	b29a      	uxth	r2, r3
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 800213e:	4808      	ldr	r0, [pc, #32]	@ (8002160 <Handle_IPD_and_Respond_7+0x340>)
 8002140:	f007 f8a0 	bl	8009284 <HAL_UART_Transmit>
            match = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
            start = HAL_GetTick();
 800214a:	f003 fb41 	bl	80057d0 <HAL_GetTick>
 800214e:	f8c7 0484 	str.w	r0, [r7, #1156]	@ 0x484
            while (HAL_GetTick() - start < SEND_TIMEOUT)
 8002152:	e042      	b.n	80021da <Handle_IPD_and_Respond_7+0x3ba>
 8002154:	0800f9fc 	.word	0x0800f9fc
 8002158:	08010b6c 	.word	0x08010b6c
 800215c:	08011450 	.word	0x08011450
 8002160:	20000f58 	.word	0x20000f58
 8002164:	0800f938 	.word	0x0800f938
 8002168:	0800f948 	.word	0x0800f948
 800216c:	0800fbfc 	.word	0x0800fbfc
 8002170:	0800fc04 	.word	0x0800fc04
 8002174:	0800fa10 	.word	0x0800fa10
 8002178:	0800fbe8 	.word	0x0800fbe8
 800217c:	0800fcf4 	.word	0x0800fcf4
 8002180:	2000107c 	.word	0x2000107c
 8002184:	20000008 	.word	0x20000008
 8002188:	0800fcdc 	.word	0x0800fcdc
 800218c:	0800fb84 	.word	0x0800fb84
 8002190:	0800fb08 	.word	0x0800fb08
                if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK)
 8002194:	f207 4167 	addw	r1, r7, #1127	@ 0x467
 8002198:	23c8      	movs	r3, #200	@ 0xc8
 800219a:	2201      	movs	r2, #1
 800219c:	48cb      	ldr	r0, [pc, #812]	@ (80024cc <Handle_IPD_and_Respond_7+0x6ac>)
 800219e:	f007 f8fc 	bl	800939a <HAL_UART_Receive>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d118      	bne.n	80021da <Handle_IPD_and_Respond_7+0x3ba>
                    if (ch == sendOk[match])
 80021a8:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80021ac:	f5a3 7258 	sub.w	r2, r3, #864	@ 0x360
 80021b0:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 80021b4:	4413      	add	r3, r2
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 80021bc:	429a      	cmp	r2, r3
 80021be:	d109      	bne.n	80021d4 <Handle_IPD_and_Respond_7+0x3b4>
                        if (++match == (int)strlen(sendOk))
 80021c0:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 80021c4:	3301      	adds	r3, #1
 80021c6:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
 80021ca:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 80021ce:	2b07      	cmp	r3, #7
 80021d0:	d103      	bne.n	80021da <Handle_IPD_and_Respond_7+0x3ba>
                            break;
 80021d2:	e00b      	b.n	80021ec <Handle_IPD_and_Respond_7+0x3cc>
                        match = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
            while (HAL_GetTick() - start < SEND_TIMEOUT)
 80021da:	f003 faf9 	bl	80057d0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ea:	d3d3      	bcc.n	8002194 <Handle_IPD_and_Respond_7+0x374>
            snprintf(cmd, sizeof(cmd), "AT+CIPCLOSE=%hu\r\n", linkID);
 80021ec:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80021f0:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80021fa:	4ab5      	ldr	r2, [pc, #724]	@ (80024d0 <Handle_IPD_and_Respond_7+0x6b0>)
 80021fc:	2140      	movs	r1, #64	@ 0x40
 80021fe:	f00b fc11 	bl	800da24 <sniprintf>
            ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8002202:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f8da 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
            continue;
 800220c:	e159      	b.n	80024c2 <Handle_IPD_and_Respond_7+0x6a2>
        if (isIcon)
 800220e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <Handle_IPD_and_Respond_7+0x410>
            bodyLen = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
            hdrLen = snprintf(respHdr, sizeof(respHdr),
 800221c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002220:	4aac      	ldr	r2, [pc, #688]	@ (80024d4 <Handle_IPD_and_Respond_7+0x6b4>)
 8002222:	2180      	movs	r1, #128	@ 0x80
 8002224:	4618      	mov	r0, r3
 8002226:	f00b fbfd 	bl	800da24 <sniprintf>
 800222a:	f8c7 04ac 	str.w	r0, [r7, #1196]	@ 0x4ac
 800222e:	e009      	b.n	8002244 <Handle_IPD_and_Respond_7+0x424>
            hdrLen = snprintf(respHdr, sizeof(respHdr),
 8002230:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8002234:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8002238:	4aa7      	ldr	r2, [pc, #668]	@ (80024d8 <Handle_IPD_and_Respond_7+0x6b8>)
 800223a:	2180      	movs	r1, #128	@ 0x80
 800223c:	f00b fbf2 	bl	800da24 <sniprintf>
 8002240:	f8c7 04ac 	str.w	r0, [r7, #1196]	@ 0x4ac
        if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
 8002244:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8002248:	2b00      	cmp	r3, #0
 800224a:	f6ff ae1e 	blt.w	8001e8a <Handle_IPD_and_Respond_7+0x6a>
 800224e:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8002252:	2b7f      	cmp	r3, #127	@ 0x7f
 8002254:	f73f ae19 	bgt.w	8001e8a <Handle_IPD_and_Respond_7+0x6a>
        }

        // 만약 /quit 요청이면 STM32 쪽으로 UART1 신호 전송
        if (isLed)
 8002258:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01a      	beq.n	8002296 <Handle_IPD_and_Respond_7+0x476>
            // // 인터럽트로 전송
            // HAL_UART_Transmit_IT(&huart1, (uint8_t*)stmMsg, strlen(stmMsg));
            // RX_LED_Toggle();

            // wifi ssid 가 FRAM에 저장되어 있는지 확인
            const char stmMsg[] = "SSID OK\r\n";
 8002260:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8002264:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8002268:	4a9c      	ldr	r2, [pc, #624]	@ (80024dc <Handle_IPD_and_Respond_7+0x6bc>)
 800226a:	ca07      	ldmia	r2, {r0, r1, r2}
 800226c:	c303      	stmia	r3!, {r0, r1}
 800226e:	801a      	strh	r2, [r3, #0]
            
            Load_Wifi_SSID_Status_FRAM();
 8002270:	f7fe fb08 	bl	8000884 <Load_Wifi_SSID_Status_FRAM>
            if (g_nWifi_SSID_Status == DEVICE_WIFI_SSID_SET)
 8002274:	4b9a      	ldr	r3, [pc, #616]	@ (80024e0 <Handle_IPD_and_Respond_7+0x6c0>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <Handle_IPD_and_Respond_7+0x46c>
            {
                HAL_UART_Transmit_IT(&huart1, (uint8_t*)stmMsg, strlen(stmMsg));
 800227c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002280:	2209      	movs	r2, #9
 8002282:	4619      	mov	r1, r3
 8002284:	4897      	ldr	r0, [pc, #604]	@ (80024e4 <Handle_IPD_and_Respond_7+0x6c4>)
 8002286:	f007 f91f 	bl	80094c8 <HAL_UART_Transmit_IT>
 800228a:	e004      	b.n	8002296 <Handle_IPD_and_Respond_7+0x476>
            }
            else
            {
                HAL_UART_Transmit_IT(&huart1, (uint8_t*)"SSID NOT SET\r\n", 15);
 800228c:	220f      	movs	r2, #15
 800228e:	4996      	ldr	r1, [pc, #600]	@ (80024e8 <Handle_IPD_and_Respond_7+0x6c8>)
 8002290:	4894      	ldr	r0, [pc, #592]	@ (80024e4 <Handle_IPD_and_Respond_7+0x6c4>)
 8002292:	f007 f919 	bl	80094c8 <HAL_UART_Transmit_IT>
            }
        }


        if (isConnect)
 8002296:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06d      	beq.n	800237a <Handle_IPD_and_Respond_7+0x55a>
        {
            /* 1) 쿼리 파싱 -------------------------------- */
            char ssid[64]={0}, pw[64]={0};
 800229e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80022a2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	3304      	adds	r3, #4
 80022ac:	223c      	movs	r2, #60	@ 0x3c
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b fc6a 	bl	800db8a <memset>
 80022b6:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80022ba:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	3304      	adds	r3, #4
 80022c4:	223c      	movs	r2, #60	@ 0x3c
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f00b fc5e 	bl	800db8a <memset>
            char *params = strchr(url, '?') + 1;        // "ssid=...&pw=..."
 80022ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80022d2:	213f      	movs	r1, #63	@ 0x3f
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00b fc60 	bl	800db9a <strchr>
 80022da:	4603      	mov	r3, r0
 80022dc:	3301      	adds	r3, #1
 80022de:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
            sscanf(params, "ssid=%63[^&]&pw=%63s", ssid, pw);
 80022e2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022e6:	1d3a      	adds	r2, r7, #4
 80022e8:	4980      	ldr	r1, [pc, #512]	@ (80024ec <Handle_IPD_and_Respond_7+0x6cc>)
 80022ea:	f8d7 0480 	ldr.w	r0, [r7, #1152]	@ 0x480
 80022ee:	f00b fbcd 	bl	800da8c <siscanf>

            urlDecodeInPlace(ssid);
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fa39 	bl	800276c <urlDecodeInPlace>
            urlDecodeInPlace(pw);                       // 공백·특수문자 처리
 80022fa:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fa34 	bl	800276c <urlDecodeInPlace>
            // char cmd[160];
            // snprintf(cmd, sizeof(cmd), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pw);
            // const char *joinResp = ESP_AT_Send_Command_Sync_Get_Result(cmd);

            // 접속을 하지 않고 SSID/PW를 FRAM에 저장
            Save_Wifi_SSID_FRAM(ssid);
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fad8 	bl	80008bc <Save_Wifi_SSID_FRAM>
            Save_Wifi_Password_FRAM(pw);
 800230c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fb13 	bl	800093c <Save_Wifi_Password_FRAM>

            // 저장 후 브라우저 응답
            const char *joinResp = "OK"; // 가정: 접속 성공했다고 가정
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <Handle_IPD_and_Respond_7+0x6d0>)
 8002318:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c

            /* 3) 브라우저 응답 ----------------------------- */
            const char *body = strstr(joinResp, "OK") ?
 800231c:	4974      	ldr	r1, [pc, #464]	@ (80024f0 <Handle_IPD_and_Respond_7+0x6d0>)
 800231e:	f8d7 047c 	ldr.w	r0, [r7, #1148]	@ 0x47c
 8002322:	f00b fcc9 	bl	800dcb8 <strstr>
 8002326:	4603      	mov	r3, r0
                "<html><body><h1>저장 시도 중…</h1></body></html>" :
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <Handle_IPD_and_Respond_7+0x510>
 800232c:	4b71      	ldr	r3, [pc, #452]	@ (80024f4 <Handle_IPD_and_Respond_7+0x6d4>)
 800232e:	e000      	b.n	8002332 <Handle_IPD_and_Respond_7+0x512>
 8002330:	4b71      	ldr	r3, [pc, #452]	@ (80024f8 <Handle_IPD_and_Respond_7+0x6d8>)
            const char *body = strstr(joinResp, "OK") ?
 8002332:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
                "<html><body><h1>저장 실패!</h1></body></html>";

            int bodyLen = strlen(body);
 8002336:	f8d7 0478 	ldr.w	r0, [r7, #1144]	@ 0x478
 800233a:	f7fd ff53 	bl	80001e4 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
            int hdrLen  = snprintf(respHdr, sizeof(respHdr),
 8002344:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8002348:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 800234c:	4a6b      	ldr	r2, [pc, #428]	@ (80024fc <Handle_IPD_and_Respond_7+0x6dc>)
 800234e:	2180      	movs	r1, #128	@ 0x80
 8002350:	f00b fb68 	bl	800da24 <sniprintf>
 8002354:	f8c7 0470 	str.w	r0, [r7, #1136]	@ 0x470
                "HTTP/1.1 200 OK\r\n"
                "Content-Type: text/html\r\n"
                "Content-Length: %d\r\n"
                "Connection: close\r\n\r\n", bodyLen);

            SendViaCipSend(linkID, respHdr, hdrLen, body, bodyLen);      // 기존 헬퍼 재사용
 8002358:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800235c:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 8002360:	8818      	ldrh	r0, [r3, #0]
 8002362:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8002366:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8002370:	f8d7 2470 	ldr.w	r2, [r7, #1136]	@ 0x470
 8002374:	f000 f8c6 	bl	8002504 <SendViaCipSend>
            continue;
 8002378:	e0a3      	b.n	80024c2 <Handle_IPD_and_Respond_7+0x6a2>
        }

        // -------------------------------------

        // — 6) AT+CIPSEND=<linkID>,<hdrLen+bodyLen>
        cmdLen = snprintf(cmd, sizeof(cmd), "AT+CIPSEND=%hu,%d\r\n",
 800237a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800237e:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	@ 0x4ac
 800238a:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 800238e:	4413      	add	r3, r2
 8002390:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	460b      	mov	r3, r1
 8002398:	4a59      	ldr	r2, [pc, #356]	@ (8002500 <Handle_IPD_and_Respond_7+0x6e0>)
 800239a:	2140      	movs	r1, #64	@ 0x40
 800239c:	f00b fb42 	bl	800da24 <sniprintf>
 80023a0:	f8c7 0488 	str.w	r0, [r7, #1160]	@ 0x488
                        linkID, hdrLen + bodyLen);
        if (cmdLen < 0 || cmdLen >= (int)sizeof(cmd))
 80023a4:	f8d7 3488 	ldr.w	r3, [r7, #1160]	@ 0x488
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f2c0 808b 	blt.w	80024c4 <Handle_IPD_and_Respond_7+0x6a4>
 80023ae:	f8d7 3488 	ldr.w	r3, [r7, #1160]	@ 0x488
 80023b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80023b4:	f300 8086 	bgt.w	80024c4 <Handle_IPD_and_Respond_7+0x6a4>
        {
            return;
        }

        HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY);
 80023b8:	f8d7 3488 	ldr.w	r3, [r7, #1160]	@ 0x488
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	4841      	ldr	r0, [pc, #260]	@ (80024cc <Handle_IPD_and_Respond_7+0x6ac>)
 80023c8:	f006 ff5c 	bl	8009284 <HAL_UART_Transmit>

        // -------------------------------------

        // — 7) '>' 프롬프트 대기
        start = HAL_GetTick();
 80023cc:	f003 fa00 	bl	80057d0 <HAL_GetTick>
 80023d0:	f8c7 0484 	str.w	r0, [r7, #1156]	@ 0x484
        do {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 80023d4:	f207 4167 	addw	r1, r7, #1127	@ 0x467
 80023d8:	23c8      	movs	r3, #200	@ 0xc8
 80023da:	2201      	movs	r2, #1
 80023dc:	483b      	ldr	r0, [pc, #236]	@ (80024cc <Handle_IPD_and_Respond_7+0x6ac>)
 80023de:	f006 ffdc 	bl	800939a <HAL_UART_Receive>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <Handle_IPD_and_Respond_7+0x5d0>
                ch == '>')
 80023e8:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 80023ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80023ee:	d008      	beq.n	8002402 <Handle_IPD_and_Respond_7+0x5e2>
            {
                break;
            }
        } while (HAL_GetTick() - start < RX_TIMEOUT);
 80023f0:	f003 f9ee 	bl	80057d0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80023fe:	d9e9      	bls.n	80023d4 <Handle_IPD_and_Respond_7+0x5b4>
 8002400:	e000      	b.n	8002404 <Handle_IPD_and_Respond_7+0x5e4>
                break;
 8002402:	bf00      	nop

        // -------------------------------------

        // — 8) 헤더/바디 전송
        HAL_UART_Transmit(&huart2, (uint8_t*)respHdr, hdrLen, HAL_MAX_DELAY);
 8002404:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8002408:	b29a      	uxth	r2, r3
 800240a:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	482e      	ldr	r0, [pc, #184]	@ (80024cc <Handle_IPD_and_Respond_7+0x6ac>)
 8002414:	f006 ff36 	bl	8009284 <HAL_UART_Transmit>
        // HAL_UART_Transmit(&huart1, (uint8_t*)respHdr, hdrLen, HAL_MAX_DELAY);
        if (!isIcon)
 8002418:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <Handle_IPD_and_Respond_7+0x614>
        {
            // HAL_UART_Transmit(&huart2, (uint8_t*)htmlBody_inline_2, htmlBody_inline_2Len, HAL_MAX_DELAY);
            // 위에서 정의한 body 변수를 사용
            HAL_UART_Transmit(&huart2, (uint8_t*)body, bodyLen, HAL_MAX_DELAY);
 8002420:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8002424:	b29a      	uxth	r2, r3
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	f8d7 148c 	ldr.w	r1, [r7, #1164]	@ 0x48c
 800242e:	4827      	ldr	r0, [pc, #156]	@ (80024cc <Handle_IPD_and_Respond_7+0x6ac>)
 8002430:	f006 ff28 	bl	8009284 <HAL_UART_Transmit>

        // -------------------------------------

        // — 9) "SEND OK" URC 대기
        // const char sendOk[] = "SEND OK";
        match = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
        start = HAL_GetTick();
 800243a:	f003 f9c9 	bl	80057d0 <HAL_GetTick>
 800243e:	f8c7 0484 	str.w	r0, [r7, #1156]	@ 0x484
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8002442:	e022      	b.n	800248a <Handle_IPD_and_Respond_7+0x66a>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK)
 8002444:	f207 4167 	addw	r1, r7, #1127	@ 0x467
 8002448:	23c8      	movs	r3, #200	@ 0xc8
 800244a:	2201      	movs	r2, #1
 800244c:	481f      	ldr	r0, [pc, #124]	@ (80024cc <Handle_IPD_and_Respond_7+0x6ac>)
 800244e:	f006 ffa4 	bl	800939a <HAL_UART_Receive>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d118      	bne.n	800248a <Handle_IPD_and_Respond_7+0x66a>
            {
                if (ch == sendOk[match])
 8002458:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800245c:	f5a3 7258 	sub.w	r2, r3, #864	@ 0x360
 8002460:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 8002464:	4413      	add	r3, r2
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 800246c:	429a      	cmp	r2, r3
 800246e:	d109      	bne.n	8002484 <Handle_IPD_and_Respond_7+0x664>
                {
                    if (++match == (int)strlen(sendOk))
 8002470:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 8002474:	3301      	adds	r3, #1
 8002476:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
 800247a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 800247e:	2b07      	cmp	r3, #7
 8002480:	d103      	bne.n	800248a <Handle_IPD_and_Respond_7+0x66a>
                    {
                        break;
 8002482:	e00b      	b.n	800249c <Handle_IPD_and_Respond_7+0x67c>
                    }
                }
                else
                {
                    match = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 800248a:	f003 f9a1 	bl	80057d0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800249a:	d3d3      	bcc.n	8002444 <Handle_IPD_and_Respond_7+0x624>

        // -------------------------------------

        // — 10) 연결 종료
        // HAL_Delay(50);
        cmdLen = snprintf(cmd, sizeof(cmd), "AT+CIPCLOSE=%hu\r\n", linkID);
 800249c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80024a0:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <Handle_IPD_and_Respond_7+0x6b0>)
 80024ac:	2140      	movs	r1, #64	@ 0x40
 80024ae:	f00b fab9 	bl	800da24 <sniprintf>
 80024b2:	f8c7 0488 	str.w	r0, [r7, #1160]	@ 0x488
        ESP_AT_Send_Command_Sync_Get_Result(cmd);
 80024b6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe ff80 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 80024c0:	e000      	b.n	80024c4 <Handle_IPD_and_Respond_7+0x6a4>
    {
 80024c2:	e4cd      	b.n	8001e60 <Handle_IPD_and_Respond_7+0x40>
        break; // HTML 응답 후 루프 종료
    }
}
 80024c4:	f507 6797 	add.w	r7, r7, #1208	@ 0x4b8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000f58 	.word	0x20000f58
 80024d0:	0800fb1c 	.word	0x0800fb1c
 80024d4:	0800f978 	.word	0x0800f978
 80024d8:	0800fb84 	.word	0x0800fb84
 80024dc:	0800fd94 	.word	0x0800fd94
 80024e0:	20001010 	.word	0x20001010
 80024e4:	20000f10 	.word	0x20000f10
 80024e8:	0800fd00 	.word	0x0800fd00
 80024ec:	0800fd10 	.word	0x0800fd10
 80024f0:	0800f5c8 	.word	0x0800f5c8
 80024f4:	0800fd28 	.word	0x0800fd28
 80024f8:	0800fd60 	.word	0x0800fd60
 80024fc:	0800f9a8 	.word	0x0800f9a8
 8002500:	0800fb08 	.word	0x0800fb08

08002504 <SendViaCipSend>:
 * body/bodyLen : HTTP 바디(없으면 NULL/0)
 * ────────────────────────────────────────────────────────── */
static void SendViaCipSend(uint16_t linkID,
                           const char *hdr,  int hdrLen,
                           const char *body, int bodyLen)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b094      	sub	sp, #80	@ 0x50
 8002508:	af02      	add	r7, sp, #8
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4603      	mov	r3, r0
 8002512:	81fb      	strh	r3, [r7, #14]
    char cmd[32];
    int  cmdLen;

    /* 1) AT+CIPSEND=<linkID>,<bytes> -------------------------------- */
    cmdLen = snprintf(cmd, sizeof(cmd),
 8002514:	89f9      	ldrh	r1, [r7, #14]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800251a:	4413      	add	r3, r2
 800251c:	f107 001c 	add.w	r0, r7, #28
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	460b      	mov	r3, r1
 8002524:	4a3f      	ldr	r2, [pc, #252]	@ (8002624 <SendViaCipSend+0x120>)
 8002526:	2120      	movs	r1, #32
 8002528:	f00b fa7c 	bl	800da24 <sniprintf>
 800252c:	6438      	str	r0, [r7, #64]	@ 0x40
                      "AT+CIPSEND=%hu,%d\r\n",
                      linkID, hdrLen + bodyLen);
    HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY);
 800252e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002530:	b29a      	uxth	r2, r3
 8002532:	f107 011c 	add.w	r1, r7, #28
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	483b      	ldr	r0, [pc, #236]	@ (8002628 <SendViaCipSend+0x124>)
 800253c:	f006 fea2 	bl	8009284 <HAL_UART_Transmit>

    /* 2) '>' 프롬프트 대기 ---------------------------------------- */
    uint8_t ch;
    uint32_t t0 = HAL_GetTick();
 8002540:	f003 f946 	bl	80057d0 <HAL_GetTick>
 8002544:	63f8      	str	r0, [r7, #60]	@ 0x3c
    while (HAL_GetTick() - t0 < RX_TIMEOUT) {
 8002546:	e00c      	b.n	8002562 <SendViaCipSend+0x5e>
        if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 8002548:	f107 011b 	add.w	r1, r7, #27
 800254c:	23c8      	movs	r3, #200	@ 0xc8
 800254e:	2201      	movs	r2, #1
 8002550:	4835      	ldr	r0, [pc, #212]	@ (8002628 <SendViaCipSend+0x124>)
 8002552:	f006 ff22 	bl	800939a <HAL_UART_Receive>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <SendViaCipSend+0x5e>
            ch == '>') {
 800255c:	7efb      	ldrb	r3, [r7, #27]
        if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 800255e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002560:	d007      	beq.n	8002572 <SendViaCipSend+0x6e>
    while (HAL_GetTick() - t0 < RX_TIMEOUT) {
 8002562:	f003 f935 	bl	80057d0 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2bc7      	cmp	r3, #199	@ 0xc7
 800256e:	d9eb      	bls.n	8002548 <SendViaCipSend+0x44>
 8002570:	e000      	b.n	8002574 <SendViaCipSend+0x70>
            break;
 8002572:	bf00      	nop
        }
    }

    /* 3) 헤더 + 바디 전송 ----------------------------------------- */
    HAL_UART_Transmit(&huart2, (uint8_t*)hdr, hdrLen, HAL_MAX_DELAY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	b29a      	uxth	r2, r3
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	482a      	ldr	r0, [pc, #168]	@ (8002628 <SendViaCipSend+0x124>)
 8002580:	f006 fe80 	bl	8009284 <HAL_UART_Transmit>
    if (bodyLen > 0 && body)
 8002584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002586:	2b00      	cmp	r3, #0
 8002588:	dd0a      	ble.n	80025a0 <SendViaCipSend+0x9c>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <SendViaCipSend+0x9c>
        HAL_UART_Transmit(&huart2,(uint8_t*)body,bodyLen,HAL_MAX_DELAY);
 8002590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002592:	b29a      	uxth	r2, r3
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	4823      	ldr	r0, [pc, #140]	@ (8002628 <SendViaCipSend+0x124>)
 800259c:	f006 fe72 	bl	8009284 <HAL_UART_Transmit>

    /* 4) "SEND OK" 확인 ------------------------------------------- */
    const char ok[] = "SEND OK";
 80025a0:	4a22      	ldr	r2, [pc, #136]	@ (800262c <SendViaCipSend+0x128>)
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025aa:	e883 0003 	stmia.w	r3, {r0, r1}
    int  match = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	647b      	str	r3, [r7, #68]	@ 0x44
    t0 = HAL_GetTick();
 80025b2:	f003 f90d 	bl	80057d0 <HAL_GetTick>
 80025b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    while (HAL_GetTick() - t0 < SEND_TIMEOUT) {
 80025b8:	e019      	b.n	80025ee <SendViaCipSend+0xea>
        if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK) {
 80025ba:	f107 011b 	add.w	r1, r7, #27
 80025be:	23c8      	movs	r3, #200	@ 0xc8
 80025c0:	2201      	movs	r2, #1
 80025c2:	4819      	ldr	r0, [pc, #100]	@ (8002628 <SendViaCipSend+0x124>)
 80025c4:	f006 fee9 	bl	800939a <HAL_UART_Receive>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <SendViaCipSend+0xea>
            match = (ch == ok[match]) ? match + 1 : 0;
 80025ce:	f107 0210 	add.w	r2, r7, #16
 80025d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d4:	4413      	add	r3, r2
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	7efb      	ldrb	r3, [r7, #27]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d102      	bne.n	80025e4 <SendViaCipSend+0xe0>
 80025de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025e0:	3301      	adds	r3, #1
 80025e2:	e000      	b.n	80025e6 <SendViaCipSend+0xe2>
 80025e4:	2300      	movs	r3, #0
 80025e6:	647b      	str	r3, [r7, #68]	@ 0x44
            if (match == (int)sizeof(ok)-1) break;     /* 완료 */
 80025e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	d008      	beq.n	8002600 <SendViaCipSend+0xfc>
    while (HAL_GetTick() - t0 < SEND_TIMEOUT) {
 80025ee:	f003 f8ef 	bl	80057d0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025fc:	d3dd      	bcc.n	80025ba <SendViaCipSend+0xb6>
 80025fe:	e000      	b.n	8002602 <SendViaCipSend+0xfe>
            if (match == (int)sizeof(ok)-1) break;     /* 완료 */
 8002600:	bf00      	nop
        }
    }

    /* 5) 링크 종료 -------------------------------------------------- */
    cmdLen = snprintf(cmd, sizeof(cmd),
 8002602:	89fb      	ldrh	r3, [r7, #14]
 8002604:	f107 001c 	add.w	r0, r7, #28
 8002608:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <SendViaCipSend+0x12c>)
 800260a:	2120      	movs	r1, #32
 800260c:	f00b fa0a 	bl	800da24 <sniprintf>
 8002610:	6438      	str	r0, [r7, #64]	@ 0x40
                      "AT+CIPCLOSE=%hu\r\n", linkID);
    ESP_AT_Send_Command_Sync_Get_Result(cmd);          /* 응답은 무시해도 OK */
 8002612:	f107 031c 	add.w	r3, r7, #28
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fed2 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
}
 800261c:	bf00      	nop
 800261e:	3748      	adds	r7, #72	@ 0x48
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	0800fb08 	.word	0x0800fb08
 8002628:	20000f58 	.word	0x20000f58
 800262c:	0800f9fc 	.word	0x0800f9fc
 8002630:	0800fb1c 	.word	0x0800fb1c

08002634 <parseCwlapToHtml>:


// ──────────────────────────────────────────────────────────────────────────────
// --------+CWLAP 라인들을 HTML <li>목록으로 바꿔 캐시에 넣기 ------------- 
void parseCwlapToHtml(const char *src, char *dst, size_t dstLen)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	f6ad 0d68 	subw	sp, sp, #2152	@ 0x868
 800263a:	af02      	add	r7, sp, #8
 800263c:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 8002640:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 8002644:	6018      	str	r0, [r3, #0]
 8002646:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 800264a:	f6a3 0358 	subw	r3, r3, #2136	@ 0x858
 800264e:	6019      	str	r1, [r3, #0]
 8002650:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 8002654:	f6a3 035c 	subw	r3, r3, #2140	@ 0x85c
 8002658:	601a      	str	r2, [r3, #0]
    /* strtok 이 원본을 수정하므로 임시 버퍼 준비 */
    char tmp[RESP_BUF_SIZE];
    strncpy(tmp, src, sizeof(tmp));
 800265a:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 800265e:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 8002662:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8002666:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	f00b fab4 	bl	800dbd8 <strncpy>

    size_t pos = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
    char *line = strtok(tmp, "\r\n");
 8002676:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800267a:	4937      	ldr	r1, [pc, #220]	@ (8002758 <parseCwlapToHtml+0x124>)
 800267c:	4618      	mov	r0, r3
 800267e:	f00b fabf 	bl	800dc00 <strtok>
 8002682:	f8c7 0858 	str.w	r0, [r7, #2136]	@ 0x858

    while (line) {
 8002686:	e04a      	b.n	800271e <parseCwlapToHtml+0xea>
        if (strncmp(line, "+CWLAP:", 7) == 0) {
 8002688:	2207      	movs	r2, #7
 800268a:	4934      	ldr	r1, [pc, #208]	@ (800275c <parseCwlapToHtml+0x128>)
 800268c:	f8d7 0858 	ldr.w	r0, [r7, #2136]	@ 0x858
 8002690:	f00b fa90 	bl	800dbb4 <strncmp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d13b      	bne.n	8002712 <parseCwlapToHtml+0xde>
            char ssid[64]; int rssi;
            if (sscanf(line,
 800269a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800269e:	f107 0214 	add.w	r2, r7, #20
 80026a2:	492f      	ldr	r1, [pc, #188]	@ (8002760 <parseCwlapToHtml+0x12c>)
 80026a4:	f8d7 0858 	ldr.w	r0, [r7, #2136]	@ 0x858
 80026a8:	f00b f9f0 	bl	800da8c <siscanf>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d12f      	bne.n	8002712 <parseCwlapToHtml+0xde>
                // pos += snprintf(dst+pos, dstLen-pos,
                //                 "<li>%s (%ddBm)</li>", ssid, rssi);
                
                // Handle_IPD_and_Respond_7 사용시 아래
                // 라디오 버튼 기능을 위해 변경
                pos += snprintf(dst+pos, dstLen-pos,
 80026b2:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 80026b6:	f6a3 0358 	subw	r3, r3, #2136	@ 0x858
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f8d7 385c 	ldr.w	r3, [r7, #2140]	@ 0x85c
 80026c0:	18d0      	adds	r0, r2, r3
 80026c2:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 80026c6:	f6a3 035c 	subw	r3, r3, #2140	@ 0x85c
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	f8d7 385c 	ldr.w	r3, [r7, #2140]	@ 0x85c
 80026d0:	1ad1      	subs	r1, r2, r3
 80026d2:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 80026d6:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f107 0214 	add.w	r2, r7, #20
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002764 <parseCwlapToHtml+0x130>)
 80026ec:	f00b f99a 	bl	800da24 <sniprintf>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	f8d7 385c 	ldr.w	r3, [r7, #2140]	@ 0x85c
 80026f8:	4413      	add	r3, r2
 80026fa:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
                                "<li data-ssid=\"%s\">%s (%ddBm)</li>", ssid, ssid, rssi);
                if (pos > dstLen-64) break;   // 가드
 80026fe:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 8002702:	f6a3 035c 	subw	r3, r3, #2140	@ 0x85c
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3b40      	subs	r3, #64	@ 0x40
 800270a:	f8d7 285c 	ldr.w	r2, [r7, #2140]	@ 0x85c
 800270e:	429a      	cmp	r2, r3
 8002710:	d80a      	bhi.n	8002728 <parseCwlapToHtml+0xf4>
            }
        }
        line = strtok(NULL, "\r\n");
 8002712:	4911      	ldr	r1, [pc, #68]	@ (8002758 <parseCwlapToHtml+0x124>)
 8002714:	2000      	movs	r0, #0
 8002716:	f00b fa73 	bl	800dc00 <strtok>
 800271a:	f8c7 0858 	str.w	r0, [r7, #2136]	@ 0x858
    while (line) {
 800271e:	f8d7 3858 	ldr.w	r3, [r7, #2136]	@ 0x858
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1b0      	bne.n	8002688 <parseCwlapToHtml+0x54>
 8002726:	e000      	b.n	800272a <parseCwlapToHtml+0xf6>
                if (pos > dstLen-64) break;   // 가드
 8002728:	bf00      	nop
    }
    if (pos == 0) {
 800272a:	f8d7 385c 	ldr.w	r3, [r7, #2140]	@ 0x85c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <parseCwlapToHtml+0x118>
        strncpy(dst, "<li>No networks found</li>", dstLen);
 8002732:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 8002736:	f6a3 025c 	subw	r2, r3, #2140	@ 0x85c
 800273a:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 800273e:	f6a3 0358 	subw	r3, r3, #2136	@ 0x858
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4908      	ldr	r1, [pc, #32]	@ (8002768 <parseCwlapToHtml+0x134>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	f00b fa46 	bl	800dbd8 <strncpy>
    }
}
 800274c:	bf00      	nop
 800274e:	f507 6706 	add.w	r7, r7, #2144	@ 0x860
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	0800f730 	.word	0x0800f730
 800275c:	0800fc3c 	.word	0x0800fc3c
 8002760:	0800fc44 	.word	0x0800fc44
 8002764:	0800fda0 	.word	0x0800fda0
 8002768:	0800fc74 	.word	0x0800fc74

0800276c <urlDecodeInPlace>:

// HTTP 쿼리스트링에 들어오는 “퍼센트 인코딩”(URL encoding)을
// 평문 문자열로 되돌리는 함수
// 예: "Hello%20World" → "Hello World"
void urlDecodeInPlace(char *s)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    char *p=s, *q=s;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	613b      	str	r3, [r7, #16]
    while (*p) {
 800277c:	e040      	b.n	8002800 <urlDecodeInPlace+0x94>
        if (*p=='%' && isxdigit(p[1]) && isxdigit(p[2])) {
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b25      	cmp	r3, #37	@ 0x25
 8002784:	d127      	bne.n	80027d6 <urlDecodeInPlace+0x6a>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4a22      	ldr	r2, [pc, #136]	@ (8002818 <urlDecodeInPlace+0xac>)
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01c      	beq.n	80027d6 <urlDecodeInPlace+0x6a>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3302      	adds	r3, #2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <urlDecodeInPlace+0xac>)
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d011      	beq.n	80027d6 <urlDecodeInPlace+0x6a>
            int v;
            sscanf(p+1,"%2x",&v);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	f107 020c 	add.w	r2, r7, #12
 80027ba:	4918      	ldr	r1, [pc, #96]	@ (800281c <urlDecodeInPlace+0xb0>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f00b f965 	bl	800da8c <siscanf>
            *q++ = (char)v; p+=3;
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	613a      	str	r2, [r7, #16]
 80027ca:	b2ca      	uxtb	r2, r1
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3303      	adds	r3, #3
 80027d2:	617b      	str	r3, [r7, #20]
        if (*p=='%' && isxdigit(p[1]) && isxdigit(p[2])) {
 80027d4:	e014      	b.n	8002800 <urlDecodeInPlace+0x94>
        } else if (*p=='+') { *q++=' '; p++; }
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b2b      	cmp	r3, #43	@ 0x2b
 80027dc:	d108      	bne.n	80027f0 <urlDecodeInPlace+0x84>
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	613a      	str	r2, [r7, #16]
 80027e4:	2220      	movs	r2, #32
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e007      	b.n	8002800 <urlDecodeInPlace+0x94>
        else { *q++=*p++; }
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	1c53      	adds	r3, r2, #1
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1c59      	adds	r1, r3, #1
 80027fa:	6139      	str	r1, [r7, #16]
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
    while (*p) {
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ba      	bne.n	800277e <urlDecodeInPlace+0x12>
    }
    *q = '\0';
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	080114e8 	.word	0x080114e8
 800281c:	0800fdc4 	.word	0x0800fdc4

08002820 <LED_Init>:
*
*/

// LED 초기화 함수
void LED_Init(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
    // RCC AHB1 버스에서 GPIOE 클럭 enable (bit4)
    RCC->AHB1ENR |= (1 << 4);
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <LED_Init+0xfc>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a3c      	ldr	r2, [pc, #240]	@ (800291c <LED_Init+0xfc>)
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
    // 잠깐 대기하여 클럭이 안정화되도록
    volatile uint32_t tmp = RCC->AHB1ENR;
 8002832:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <LED_Init+0xfc>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	607b      	str	r3, [r7, #4]

    // ==============================================================

    // PE8 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    RX_LED_GPIO_Port->MODER &= ~(0x3U << (8 * 2));  // 먼저 클리어
 8002838:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <LED_Init+0x100>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a38      	ldr	r2, [pc, #224]	@ (8002920 <LED_Init+0x100>)
 800283e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002842:	6013      	str	r3, [r2, #0]
    RX_LED_GPIO_Port->MODER |=  (0x1U << (8 * 2));  // 0b01: Output
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <LED_Init+0x100>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a35      	ldr	r2, [pc, #212]	@ (8002920 <LED_Init+0x100>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284e:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    RX_LED_GPIO_Port->OTYPER &= ~(1U << 8);
 8002850:	4b33      	ldr	r3, [pc, #204]	@ (8002920 <LED_Init+0x100>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a32      	ldr	r2, [pc, #200]	@ (8002920 <LED_Init+0x100>)
 8002856:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800285a:	6053      	str	r3, [r2, #4]
    // RX_LED_GPIO_Port->OTYPER |=  (1U << 8); // open drain은 사용하지 않음
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    RX_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (8 * 2));
 800285c:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <LED_Init+0x100>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a2f      	ldr	r2, [pc, #188]	@ (8002920 <LED_Init+0x100>)
 8002862:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002866:	6093      	str	r3, [r2, #8]
    RX_LED_GPIO_Port->OSPEEDR |=  (0x2U << (8 * 2));
 8002868:	4b2d      	ldr	r3, [pc, #180]	@ (8002920 <LED_Init+0x100>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a2c      	ldr	r2, [pc, #176]	@ (8002920 <LED_Init+0x100>)
 800286e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002872:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    RX_LED_GPIO_Port->PUPDR &= ~(0x3U << (8 * 2));
 8002874:	4b2a      	ldr	r3, [pc, #168]	@ (8002920 <LED_Init+0x100>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a29      	ldr	r2, [pc, #164]	@ (8002920 <LED_Init+0x100>)
 800287a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800287e:	60d3      	str	r3, [r2, #12]

    // PE9 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    TX_LED_GPIO_Port->MODER &= ~(0x3U << (9 * 2));  // 먼저 클리어
 8002880:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <LED_Init+0x100>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a26      	ldr	r2, [pc, #152]	@ (8002920 <LED_Init+0x100>)
 8002886:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800288a:	6013      	str	r3, [r2, #0]
    TX_LED_GPIO_Port->MODER |=  (0x1U << (9 * 2));  // 0b01: Output
 800288c:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <LED_Init+0x100>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a23      	ldr	r2, [pc, #140]	@ (8002920 <LED_Init+0x100>)
 8002892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002896:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    TX_LED_GPIO_Port->OTYPER &= ~(1U << 9);
 8002898:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <LED_Init+0x100>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a20      	ldr	r2, [pc, #128]	@ (8002920 <LED_Init+0x100>)
 800289e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028a2:	6053      	str	r3, [r2, #4]
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    TX_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (9 * 2));
 80028a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002920 <LED_Init+0x100>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <LED_Init+0x100>)
 80028aa:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80028ae:	6093      	str	r3, [r2, #8]
    TX_LED_GPIO_Port->OSPEEDR |=  (0x2U << (9 * 2));
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <LED_Init+0x100>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002920 <LED_Init+0x100>)
 80028b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028ba:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    TX_LED_GPIO_Port->PUPDR &= ~(0x3U << (9 * 2));
 80028bc:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <LED_Init+0x100>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <LED_Init+0x100>)
 80028c2:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80028c6:	60d3      	str	r3, [r2, #12]


    // PE10 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    STATUS_LED_GPIO_Port->MODER &= ~(0x3U << (10 * 2));  // 먼저 클리어
 80028c8:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <LED_Init+0x100>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <LED_Init+0x100>)
 80028ce:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80028d2:	6013      	str	r3, [r2, #0]
    STATUS_LED_GPIO_Port->MODER |=  (0x1U << (10 * 2));  // 0b01: Output
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <LED_Init+0x100>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <LED_Init+0x100>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028de:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    STATUS_LED_GPIO_Port->OTYPER &= ~(1U << 10);
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <LED_Init+0x100>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <LED_Init+0x100>)
 80028e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028ea:	6053      	str	r3, [r2, #4]
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    STATUS_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (10 * 2));
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <LED_Init+0x100>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <LED_Init+0x100>)
 80028f2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80028f6:	6093      	str	r3, [r2, #8]
    STATUS_LED_GPIO_Port->OSPEEDR |=  (0x2U << (10 * 2));
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <LED_Init+0x100>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a08      	ldr	r2, [pc, #32]	@ (8002920 <LED_Init+0x100>)
 80028fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002902:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    STATUS_LED_GPIO_Port->PUPDR &= ~(0x3U << (10 * 2));
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <LED_Init+0x100>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a05      	ldr	r2, [pc, #20]	@ (8002920 <LED_Init+0x100>)
 800290a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800290e:	60d3      	str	r3, [r2, #12]
    
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40023800 	.word	0x40023800
 8002920:	40021000 	.word	0x40021000

08002924 <RX_LED_On>:


// LED On: PE8을 1로 설정 (BSRR 사용)
void RX_LED_On(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
    RX_LED_GPIO_Port->BSRR = (1U << 8);       // set PE8
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <RX_LED_On+0x18>)
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	619a      	str	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <RX_LED_Off>:

// LED Off: PE8을 0으로 설정 (BSRR 상위 16비트에 1을 쓰면 reset)
void RX_LED_Off(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
    RX_LED_GPIO_Port->BSRR = (1U << (8 + 16)); // reset PE8
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <RX_LED_Off+0x18>)
 8002946:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800294a:	619a      	str	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <TX_LED_On>:
    RX_LED_GPIO_Port->ODR ^= (1U << 8); // toggle PE8
}

// LED On: PE9을 1로 설정 (BSRR 사용)
void TX_LED_On(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
    TX_LED_GPIO_Port->BSRR = (1U << 9);       // set PE9
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <TX_LED_On+0x18>)
 8002962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002966:	619a      	str	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000

08002978 <STATUS_LED_On>:
}


// LED On: PE10을 1로 설정 (BSRR 사용)
void STATUS_LED_On(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
    // BSRR 레지스터 하위 16비트에 1을 쓰면 set
    STATUS_LED_GPIO_Port->BSRR = (1U << 10);
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <STATUS_LED_On+0x18>)
 800297e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002982:	619a      	str	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <STATUS_LED_Off>:

// LED Off: PE10을 0으로 설정 (BSRR 상위 16비트에 1을 쓰면 reset)
void STATUS_LED_Off(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
    // BSRR 레지스터 상위 16비트(bit16+핀번호)에 1을 쓰면 reset
    STATUS_LED_GPIO_Port->BSRR = (1U << (10 + 16));
 8002998:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <STATUS_LED_Off+0x18>)
 800299a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800299e:	619a      	str	r2, [r3, #24]
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029b4:	f002 fea6 	bl	8005704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b8:	f000 f854 	bl	8002a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029bc:	f000 fa64 	bl	8002e88 <MX_GPIO_Init>
  MX_RTC_Init();
 80029c0:	f000 f8bc 	bl	8002b3c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 80029c4:	f000 f92c 	bl	8002c20 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80029c8:	f000 f94a 	bl	8002c60 <MX_SPI1_Init>
  MX_TIM7_Init();
 80029cc:	f000 f97e 	bl	8002ccc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80029d0:	f000 f9dc 	bl	8002d8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80029d4:	f000 fa04 	bl	8002de0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80029d8:	f000 fa2c 	bl	8002e34 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80029dc:	f008 fa64 	bl	800aea8 <MX_FATFS_Init>
  MX_UART4_Init();
 80029e0:	f000 f9aa 	bl	8002d38 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  // CCM 영역 초기화

  Oper_CCM_Init();
 80029e4:	f001 fb0a 	bl	8003ffc <Oper_CCM_Init>
  
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // 타이머 인터럽트 모드로 시작 (TIM7은 이미 PSC/ARR로 1 kHz, 1 ms 인터럽트로 설정되어 있다고 가정)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80029e8:	4817      	ldr	r0, [pc, #92]	@ (8002a48 <main+0x98>)
 80029ea:	f006 f93d 	bl	8008c68 <HAL_TIM_Base_Start_IT>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <main+0x48>
  {
    Error_Handler();
 80029f4:	f000 fb7e 	bl	80030f4 <Error_Handler>
  }

  // 1) 콜백 기반 수신을 시작 (1바이트)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 80029f8:	2201      	movs	r2, #1
 80029fa:	4914      	ldr	r1, [pc, #80]	@ (8002a4c <main+0x9c>)
 80029fc:	4814      	ldr	r0, [pc, #80]	@ (8002a50 <main+0xa0>)
 80029fe:	f006 fd99 	bl	8009534 <HAL_UART_Receive_IT>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <main+0x5c>
  {
    // 수신 시작 실패 처리
    Error_Handler();
 8002a08:	f000 fb74 	bl	80030f4 <Error_Handler>
  }

  // SIM uart 콜백 기반 수신 시작
  if (HAL_UART_Receive_IT(&huart3, &rxSIMByte, 1) != HAL_OK)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4911      	ldr	r1, [pc, #68]	@ (8002a54 <main+0xa4>)
 8002a10:	4811      	ldr	r0, [pc, #68]	@ (8002a58 <main+0xa8>)
 8002a12:	f006 fd8f 	bl	8009534 <HAL_UART_Receive_IT>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <main+0x70>
  {
    // SIM 수신 시작 실패 처리
    Error_Handler();
 8002a1c:	f000 fb6a 	bl	80030f4 <Error_Handler>
  // }

  // ──────────────────────────────────────────────────────────────────────────────

  // CCM은 아니지만 기본 초기화
  Oper_Init();
 8002a20:	f001 faf8 	bl	8004014 <Oper_Init>

  // ──────────────────────────────────────────────────────────────────────────────
  
  // 딥스위치 체크
  Mode_Check(); // AP 모드 체크 및 설정
 8002a24:	f000 fb96 	bl	8003154 <Mode_Check>
  
  // ──────────────────────────────────────────────────────────────────────────────

  Main_System();
 8002a28:	f001 fabc 	bl	8003fa4 <Main_System>

  // ──────────────────────────────────────────────────────────────────────────────

  // ──────────────────────────────────────────────────────────────────────────────

  Oper_Boot();
 8002a2c:	f001 fb02 	bl	8004034 <Oper_Boot>

  // AP 모드 인지 확인
  if (g_nMode != MODE_AP)
 8002a30:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <main+0xac>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d001      	beq.n	8002a3c <main+0x8c>
  {
    // 토큰 값, 모기체 고유 값, 자기체 고유 값 서버로 전송
    Server_Send_Boot();
 8002a38:	f002 f95e 	bl	8004cf8 <Server_Send_Boot>
    // Test_Server_Send_Boot(); // 박과장님 서버로 날림
  }


  g_nBoot_Status = BOOT_SUCCESS; // 부팅 성공 상태로 설정
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <main+0xb0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]



  while (1)
  {
    Master_Proc(); // 메인 프로세스 실행
 8002a42:	f000 fc67 	bl	8003314 <Master_Proc>
 8002a46:	e7fc      	b.n	8002a42 <main+0x92>
 8002a48:	20000e80 	.word	0x20000e80
 8002a4c:	2000100a 	.word	0x2000100a
 8002a50:	20000f10 	.word	0x20000f10
 8002a54:	2000100b 	.word	0x2000100b
 8002a58:	20000fa0 	.word	0x20000fa0
 8002a5c:	2000100c 	.word	0x2000100c
 8002a60:	20000000 	.word	0x20000000

08002a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b094      	sub	sp, #80	@ 0x50
 8002a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6a:	f107 0320 	add.w	r3, r7, #32
 8002a6e:	2230      	movs	r2, #48	@ 0x30
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00b f889 	bl	800db8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <SystemClock_Config+0xd0>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	4a28      	ldr	r2, [pc, #160]	@ (8002b34 <SystemClock_Config+0xd0>)
 8002a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a98:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <SystemClock_Config+0xd0>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <SystemClock_Config+0xd4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <SystemClock_Config+0xd4>)
 8002aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <SystemClock_Config+0xd4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002ac0:	2305      	movs	r3, #5
 8002ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002aca:	2301      	movs	r3, #1
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ad2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ad8:	2304      	movs	r3, #4
 8002ada:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002adc:	23a8      	movs	r3, #168	@ 0xa8
 8002ade:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ae4:	2307      	movs	r3, #7
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae8:	f107 0320 	add.w	r3, r7, #32
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 f9f9 	bl	8005ee4 <HAL_RCC_OscConfig>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002af8:	f000 fafc 	bl	80030f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002afc:	230f      	movs	r3, #15
 8002afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b00:	2302      	movs	r3, #2
 8002b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2105      	movs	r1, #5
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 fc5a 	bl	80063d4 <HAL_RCC_ClockConfig>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002b26:	f000 fae5 	bl	80030f4 <Error_Handler>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3750      	adds	r7, #80	@ 0x50
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40007000 	.word	0x40007000

08002b3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  // 위 3개 구조체 변수는 사용안함, 주석처리
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b40:	4b33      	ldr	r3, [pc, #204]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b42:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <MX_RTC_Init+0xd8>)
 8002b44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b46:	4b32      	ldr	r3, [pc, #200]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b4c:	4b30      	ldr	r3, [pc, #192]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b4e:	227f      	movs	r2, #127	@ 0x7f
 8002b50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b52:	4b2f      	ldr	r3, [pc, #188]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b54:	22ff      	movs	r2, #255	@ 0xff
 8002b56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b58:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b64:	4b2a      	ldr	r3, [pc, #168]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b6a:	4829      	ldr	r0, [pc, #164]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b6c:	f003 ff34 	bl	80069d8 <HAL_RTC_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002b76:	f000 fabd 	bl	80030f4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  // RTC 백업 레지스터를 읽어 초기화 여부 확인
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_REG) != RTC_MAGIC_VALUE)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4824      	ldr	r0, [pc, #144]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b7e:	f004 fa9f 	bl	80070c0 <HAL_RTCEx_BKUPRead>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d035      	beq.n	8002bf8 <MX_RTC_Init+0xbc>
  {
    // RTC 백업 레지스터가 초기화되지 않았거나 값이 일치하지 않으면 RTC를 초기화
    // RTC 백업 레지스터에 초기화 마크를 기록
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_REG, RTC_MAGIC_VALUE);
 8002b8c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002b90:	2101      	movs	r1, #1
 8002b92:	481f      	ldr	r0, [pc, #124]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002b94:	f004 fa7a 	bl	800708c <HAL_RTCEx_BKUPWrite>

    // RTC 시간과 날짜를 초기화
    g_Time.Hours = 0x0;  // 00:00:00
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <MX_RTC_Init+0xdc>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = 0x0;
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <MX_RTC_Init+0xdc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = 0x0;
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <MX_RTC_Init+0xdc>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002baa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <MX_RTC_Init+0xdc>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <MX_RTC_Init+0xdc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BCD) != HAL_OK)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4917      	ldr	r1, [pc, #92]	@ (8002c18 <MX_RTC_Init+0xdc>)
 8002bba:	4815      	ldr	r0, [pc, #84]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002bbc:	f003 ff8d 	bl	8006ada <HAL_RTC_SetTime>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_RTC_Init+0x8e>
    {
      // 초기화 실패 처리
      Error_Handler();
 8002bc6:	f000 fa95 	bl	80030f4 <Error_Handler>
    }
    g_Date.WeekDay = RTC_WEEKDAY_MONDAY;    // 월요일
 8002bca:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <MX_RTC_Init+0xe0>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
    g_Date.Month = RTC_MONTH_JANUARY;       // 1월
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <MX_RTC_Init+0xe0>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	705a      	strb	r2, [r3, #1]
    g_Date.Date = 0x1;                      // 1일
 8002bd6:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <MX_RTC_Init+0xe0>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	709a      	strb	r2, [r3, #2]
    g_Date.Year = 0x25;                     // 2025년 (BCD 형식으로 25)
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <MX_RTC_Init+0xe0>)
 8002bde:	2225      	movs	r2, #37	@ 0x25
 8002be0:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BCD) != HAL_OK)
 8002be2:	2201      	movs	r2, #1
 8002be4:	490d      	ldr	r1, [pc, #52]	@ (8002c1c <MX_RTC_Init+0xe0>)
 8002be6:	480a      	ldr	r0, [pc, #40]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002be8:	f004 f86f 	bl	8006cca <HAL_RTC_SetDate>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <MX_RTC_Init+0xd0>
    {
      // 초기화 실패 처리
      Error_Handler();
 8002bf2:	f000 fa7f 	bl	80030f4 <Error_Handler>
  // }
  /* USER CODE BEGIN RTC_Init 2 */
// 위 코드 사용안함===============================================================================
  /* USER CODE END RTC_Init 2 */

}
 8002bf6:	e009      	b.n	8002c0c <MX_RTC_Init+0xd0>
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4907      	ldr	r1, [pc, #28]	@ (8002c18 <MX_RTC_Init+0xdc>)
 8002bfc:	4804      	ldr	r0, [pc, #16]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002bfe:	f004 f806 	bl	8006c0e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 8002c02:	2201      	movs	r2, #1
 8002c04:	4905      	ldr	r1, [pc, #20]	@ (8002c1c <MX_RTC_Init+0xe0>)
 8002c06:	4802      	ldr	r0, [pc, #8]	@ (8002c10 <MX_RTC_Init+0xd4>)
 8002c08:	f004 f8e3 	bl	8006dd2 <HAL_RTC_GetDate>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000d84 	.word	0x20000d84
 8002c14:	40002800 	.word	0x40002800
 8002c18:	20000fe8 	.word	0x20000fe8
 8002c1c:	20000ffc 	.word	0x20000ffc

08002c20 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <MX_SDIO_SD_Init+0x38>)
 8002c26:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <MX_SDIO_SD_Init+0x3c>)
 8002c28:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <MX_SDIO_SD_Init+0x38>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <MX_SDIO_SD_Init+0x38>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <MX_SDIO_SD_Init+0x38>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <MX_SDIO_SD_Init+0x38>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c42:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <MX_SDIO_SD_Init+0x38>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002c48:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <MX_SDIO_SD_Init+0x38>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	20000da4 	.word	0x20000da4
 8002c5c:	40012c00 	.word	0x40012c00

08002c60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c64:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c66:	4a18      	ldr	r2, [pc, #96]	@ (8002cc8 <MX_SPI1_Init+0x68>)
 8002c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c6a:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c72:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c78:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c84:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c92:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c9e:	4b09      	ldr	r3, [pc, #36]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca4:	4b07      	ldr	r3, [pc, #28]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002cac:	220a      	movs	r2, #10
 8002cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cb0:	4804      	ldr	r0, [pc, #16]	@ (8002cc4 <MX_SPI1_Init+0x64>)
 8002cb2:	f005 f9b7 	bl	8008024 <HAL_SPI_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cbc:	f000 fa1a 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000e28 	.word	0x20000e28
 8002cc8:	40013000 	.word	0x40013000

08002ccc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cdc:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <MX_TIM7_Init+0x68>)
 8002cde:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002ce2:	2263      	movs	r2, #99	@ 0x63
 8002ce4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 8002cec:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cee:	f240 3247 	movw	r2, #839	@ 0x347
 8002cf2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002cfa:	480d      	ldr	r0, [pc, #52]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cfc:	f005 ff64 	bl	8008bc8 <HAL_TIM_Base_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002d06:	f000 f9f5 	bl	80030f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002d18:	f006 f9d4 	bl	80090c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002d22:	f000 f9e7 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000e80 	.word	0x20000e80
 8002d34:	40001400 	.word	0x40001400

08002d38 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <MX_UART4_Init+0x50>)
 8002d40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d5e:	220c      	movs	r2, #12
 8002d60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d6e:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <MX_UART4_Init+0x4c>)
 8002d70:	f006 fa38 	bl	80091e4 <HAL_UART_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002d7a:	f000 f9bb 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000ec8 	.word	0x20000ec8
 8002d88:	40004c00 	.word	0x40004c00

08002d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <MX_USART1_UART_Init+0x50>)
 8002d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002d98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002db0:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002db2:	220c      	movs	r2, #12
 8002db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002db6:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dc2:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002dc4:	f006 fa0e 	bl	80091e4 <HAL_UART_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002dce:	f000 f991 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000f10 	.word	0x20000f10
 8002ddc:	40011000 	.word	0x40011000

08002de0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <MX_USART2_UART_Init+0x50>)
 8002de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002df2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e06:	220c      	movs	r2, #12
 8002e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0a:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e16:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e18:	f006 f9e4 	bl	80091e4 <HAL_UART_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e22:	f000 f967 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000f58 	.word	0x20000f58
 8002e30:	40004400 	.word	0x40004400

08002e34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <MX_USART3_UART_Init+0x50>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_USART3_UART_Init+0x4c>)
 8002e6c:	f006 f9ba 	bl	80091e4 <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e76:	f000 f93d 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000fa0 	.word	0x20000fa0
 8002e84:	40004800 	.word	0x40004800

08002e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	@ 0x30
 8002e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	60da      	str	r2, [r3, #12]
 8002e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ea8:	f043 0310 	orr.w	r3, r3, #16
 8002eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eae:	4b48      	ldr	r3, [pc, #288]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	4b44      	ldr	r3, [pc, #272]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a43      	ldr	r2, [pc, #268]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b41      	ldr	r3, [pc, #260]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b36      	ldr	r3, [pc, #216]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a35      	ldr	r2, [pc, #212]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a27      	ldr	r2, [pc, #156]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002f34:	f043 0308 	orr.w	r3, r3, #8
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b25      	ldr	r3, [pc, #148]	@ (8002fd0 <MX_GPIO_Init+0x148>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2110      	movs	r1, #16
 8002f4a:	4822      	ldr	r0, [pc, #136]	@ (8002fd4 <MX_GPIO_Init+0x14c>)
 8002f4c:	f002 ffb0 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8002f56:	4820      	ldr	r0, [pc, #128]	@ (8002fd8 <MX_GPIO_Init+0x150>)
 8002f58:	f002 ffaa 	bl	8005eb0 <HAL_GPIO_WritePin>
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIP_3_Pin DIP_4_Pin DIP_1_Pin DIP_2_Pin */
  GPIO_InitStruct.Pin = DIP_3_Pin|DIP_4_Pin|DIP_1_Pin|DIP_2_Pin;
 8002f5c:	230f      	movs	r3, #15
 8002f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	481a      	ldr	r0, [pc, #104]	@ (8002fd8 <MX_GPIO_Init+0x150>)
 8002f70:	f002 fe02 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002f74:	2310      	movs	r3, #16
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4812      	ldr	r0, [pc, #72]	@ (8002fd4 <MX_GPIO_Init+0x14c>)
 8002f8c:	f002 fdf4 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin M_PWR_KEY_Pin
                           ESP_EN_Pin USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8002f90:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002f94:	61fb      	str	r3, [r7, #28]
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f96:	2301      	movs	r3, #1
 8002f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	480b      	ldr	r0, [pc, #44]	@ (8002fd8 <MX_GPIO_Init+0x150>)
 8002faa:	f002 fde5 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002fae:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002fb2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4806      	ldr	r0, [pc, #24]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002fc4:	f002 fdd8 	bl	8005b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fc8:	bf00      	nop
 8002fca:	3730      	adds	r7, #48	@ 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40020c00 	.word	0x40020c00

08002fe0 <HAL_TIM_PeriodElapsedCallback>:
//
// =======================================================================================================
/* tim 7 인터럽트 처리부 */
/* TIM7 업데이트 인터럽트 콜백 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a04      	ldr	r2, [pc, #16]	@ (8003000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    Timer_Interrupt_Proc();
 8002ff2:	f000 fe91 	bl	8003d18 <Timer_Interrupt_Proc>
      //   Error_Handler();
      // }      
    }
#endif
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40001400 	.word	0x40001400

08003004 <HAL_UART_RxCpltCallback>:
//
// =======================================================================================================
/* uart 1 처리부 */
/* UART Rx Complete 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  // uart1에서 수신된 바이트를 처리
  if (huart->Instance == USART1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_UART_RxCpltCallback+0xb0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d109      	bne.n	800302a <HAL_UART_RxCpltCallback+0x26>
  {
    // 1) 에코: 받은 바이트를 바로 송신
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 8003016:	2201      	movs	r2, #1
 8003018:	4927      	ldr	r1, [pc, #156]	@ (80030b8 <HAL_UART_RxCpltCallback+0xb4>)
 800301a:	4828      	ldr	r0, [pc, #160]	@ (80030bc <HAL_UART_RxCpltCallback+0xb8>)
 800301c:	f006 fa54 	bl	80094c8 <HAL_UART_Transmit_IT>

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8003020:	2201      	movs	r2, #1
 8003022:	4925      	ldr	r1, [pc, #148]	@ (80030b8 <HAL_UART_RxCpltCallback+0xb4>)
 8003024:	4825      	ldr	r0, [pc, #148]	@ (80030bc <HAL_UART_RxCpltCallback+0xb8>)
 8003026:	f006 fa85 	bl	8009534 <HAL_UART_Receive_IT>
  }

  // uart2에서 수신된 바이트를 처리

  if (huart->Instance == USART2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <HAL_UART_RxCpltCallback+0xbc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d12b      	bne.n	800308c <HAL_UART_RxCpltCallback+0x88>
  {
    char c = g_atRxByte;
 8003034:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <HAL_UART_RxCpltCallback+0xc0>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	73fb      	strb	r3, [r7, #15]

    // 1) 수신 바이트를 라인 버퍼에 저장
    if (atIdx < AT_RX_BUF_SIZE-1)
 800303a:	4b23      	ldr	r3, [pc, #140]	@ (80030c8 <HAL_UART_RxCpltCallback+0xc4>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003040:	d809      	bhi.n	8003056 <HAL_UART_RxCpltCallback+0x52>
    {
      atLineBuf[atIdx++] = c;
 8003042:	4b21      	ldr	r3, [pc, #132]	@ (80030c8 <HAL_UART_RxCpltCallback+0xc4>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	b291      	uxth	r1, r2
 800304a:	4a1f      	ldr	r2, [pc, #124]	@ (80030c8 <HAL_UART_RxCpltCallback+0xc4>)
 800304c:	8011      	strh	r1, [r2, #0]
 800304e:	4619      	mov	r1, r3
 8003050:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <HAL_UART_RxCpltCallback+0xc8>)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	5453      	strb	r3, [r2, r1]
    }

    // 2) '\n' 이 들어오면 한 줄 완성
    if (c == '\n' || c == '\r')
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b0a      	cmp	r3, #10
 800305a:	d002      	beq.n	8003062 <HAL_UART_RxCpltCallback+0x5e>
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b0d      	cmp	r3, #13
 8003060:	d10f      	bne.n	8003082 <HAL_UART_RxCpltCallback+0x7e>
    {
      atLineBuf[atIdx] = '\0';  // 문자열 종료
 8003062:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <HAL_UART_RxCpltCallback+0xc4>)
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <HAL_UART_RxCpltCallback+0xc8>)
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

      // AT 명령어 처리 로직 (예: AT 명령어 파싱 및 응답)
      // 여기서 atLineBuf를 사용하여 AT 명령어를 처리
      // 받은 명령을 다시 STM uart 송신
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)atLineBuf, atIdx);
 800306e:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <HAL_UART_RxCpltCallback+0xc4>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	4915      	ldr	r1, [pc, #84]	@ (80030cc <HAL_UART_RxCpltCallback+0xc8>)
 8003076:	4811      	ldr	r0, [pc, #68]	@ (80030bc <HAL_UART_RxCpltCallback+0xb8>)
 8003078:	f006 fa26 	bl	80094c8 <HAL_UART_Transmit_IT>

      atIdx = 0;  // 인덱스 초기화
 800307c:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <HAL_UART_RxCpltCallback+0xc4>)
 800307e:	2200      	movs	r2, #0
 8003080:	801a      	strh	r2, [r3, #0]
    }

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
 8003082:	2201      	movs	r2, #1
 8003084:	490f      	ldr	r1, [pc, #60]	@ (80030c4 <HAL_UART_RxCpltCallback+0xc0>)
 8003086:	4812      	ldr	r0, [pc, #72]	@ (80030d0 <HAL_UART_RxCpltCallback+0xcc>)
 8003088:	f006 fa54 	bl	8009534 <HAL_UART_Receive_IT>
  }

  // uart3에서 수신된 바이트를 처리
  if (huart->Instance == USART3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a10      	ldr	r2, [pc, #64]	@ (80030d4 <HAL_UART_RxCpltCallback+0xd0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d109      	bne.n	80030aa <HAL_UART_RxCpltCallback+0xa6>
  {
    // SIM 카드에서 수신된 바이트를 처리
    // 예: SIM 카드 응답을 UART1로 전달
    HAL_UART_Transmit_IT(&huart1, &rxSIMByte, 1);
 8003096:	2201      	movs	r2, #1
 8003098:	490f      	ldr	r1, [pc, #60]	@ (80030d8 <HAL_UART_RxCpltCallback+0xd4>)
 800309a:	4808      	ldr	r0, [pc, #32]	@ (80030bc <HAL_UART_RxCpltCallback+0xb8>)
 800309c:	f006 fa14 	bl	80094c8 <HAL_UART_Transmit_IT>

    // 다시 수신 대기
    HAL_UART_Receive_IT(&huart3, &rxSIMByte, 1);
 80030a0:	2201      	movs	r2, #1
 80030a2:	490d      	ldr	r1, [pc, #52]	@ (80030d8 <HAL_UART_RxCpltCallback+0xd4>)
 80030a4:	480d      	ldr	r0, [pc, #52]	@ (80030dc <HAL_UART_RxCpltCallback+0xd8>)
 80030a6:	f006 fa45 	bl	8009534 <HAL_UART_Receive_IT>
        // 2) 다시 UART2 수신 대기
        HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
    }
#endif

}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40011000 	.word	0x40011000
 80030b8:	2000100a 	.word	0x2000100a
 80030bc:	20000f10 	.word	0x20000f10
 80030c0:	40004400 	.word	0x40004400
 80030c4:	20000488 	.word	0x20000488
 80030c8:	200004cc 	.word	0x200004cc
 80030cc:	2000048c 	.word	0x2000048c
 80030d0:	20000f58 	.word	0x20000f58
 80030d4:	40004800 	.word	0x40004800
 80030d8:	2000100b 	.word	0x2000100b
 80030dc:	20000fa0 	.word	0x20000fa0

080030e0 <HAL_UART_TxCpltCallback>:

/* UART 전송 완료 콜백 (필요 시..) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  // 전송 완료 후 다른 처리가 필요하면 여기에…
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <Error_Handler+0x8>

08003100 <SD_Card_Check>:
// ──────────────────────────────────────────────────────────────────────────────

// ──────────────────────────────────────────────────────────────────────────────

void SD_Card_Check(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
    int isSd = SD_Card_Is_Exist(); // SD 카드 존재 여부 확인
 8003106:	f001 fd87 	bl	8004c18 <SD_Card_Is_Exist>
 800310a:	6078      	str	r0, [r7, #4]

    while (isSd == SD_ERROR)
 800310c:	e017      	b.n	800313e <SD_Card_Check+0x3e>
    {
        HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_SET);  // LED ON
 800310e:	2201      	movs	r2, #1
 8003110:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003114:	480e      	ldr	r0, [pc, #56]	@ (8003150 <SD_Card_Check+0x50>)
 8003116:	f002 fecb 	bl	8005eb0 <HAL_GPIO_WritePin>
        HAL_Delay(200);  // 0.5초 대기
 800311a:	20c8      	movs	r0, #200	@ 0xc8
 800311c:	f002 fb64 	bl	80057e8 <HAL_Delay>
        HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_RESET); // LED OFF
 8003120:	2200      	movs	r2, #0
 8003122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003126:	480a      	ldr	r0, [pc, #40]	@ (8003150 <SD_Card_Check+0x50>)
 8003128:	f002 fec2 	bl	8005eb0 <HAL_GPIO_WritePin>
        HAL_Delay(200);  // 0.5초 대기
 800312c:	20c8      	movs	r0, #200	@ 0xc8
 800312e:	f002 fb5b 	bl	80057e8 <HAL_Delay>

        isSd = SD_Card_Is_Exist(); // SD 카드 존재 여부 확인
 8003132:	f001 fd71 	bl	8004c18 <SD_Card_Is_Exist>
 8003136:	6078      	str	r0, [r7, #4]
        if(isSd == SD_OK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <SD_Card_Check+0x46>
    while (isSd == SD_ERROR)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d0e4      	beq.n	800310e <SD_Card_Check+0xe>
        {
            break; // SD 카드가 존재하면 루프 종료
        }
    }
}
 8003144:	e000      	b.n	8003148 <SD_Card_Check+0x48>
            break; // SD 카드가 존재하면 루프 종료
 8003146:	bf00      	nop
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000

08003154 <Mode_Check>:


// ──────────────────────────────────────────────────────────────────────────────

void Mode_Check(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
    int mode = Device_Mode_Check(); // 현재 모드 확인
 800315a:	f7fd fddb 	bl	8000d14 <Device_Mode_Check>
 800315e:	6078      	str	r0, [r7, #4]

    // Device_Mode_Check 함수에서 모드가 변경되어 반영했으므로 아래는 따로 진행안해도 무관
    switch (mode)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b07      	cmp	r3, #7
 8003164:	d812      	bhi.n	800318c <Mode_Check+0x38>
 8003166:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <Mode_Check+0x18>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	0800318d 	.word	0x0800318d
 8003170:	0800318d 	.word	0x0800318d
 8003174:	0800318d 	.word	0x0800318d
 8003178:	0800318d 	.word	0x0800318d
 800317c:	0800318d 	.word	0x0800318d
 8003180:	0800318d 	.word	0x0800318d
 8003184:	0800318d 	.word	0x0800318d
 8003188:	0800318d 	.word	0x0800318d
        break;
    case MODE_TEST:
        break;
    
    default:
        break;
 800318c:	bf00      	nop
    }

    g_nMode = mode; // 현재 모드
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <Mode_Check+0x4c>)
 8003194:	701a      	strb	r2, [r3, #0]
    
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000100c 	.word	0x2000100c

080031a4 <AP_Mode_Proc>:

// ──────────────────────────────────────────────────────────────────────────────

// AP 모드 프로세스
void AP_Mode_Proc(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
    int step = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
    int result = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
    int bootLoop = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]

    // ====================================================================

    // 부팅 동작
    while (bootLoop)
 80031b6:	e044      	b.n	8003242 <AP_Mode_Proc+0x9e>
    {
        switch (step)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d03d      	beq.n	800323a <AP_Mode_Proc+0x96>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	dc3d      	bgt.n	8003240 <AP_Mode_Proc+0x9c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <AP_Mode_Proc+0x2e>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d01a      	beq.n	8003206 <AP_Mode_Proc+0x62>
        case 2:
            bootLoop = 0; // 부팅 루프 종료
            break;
        
        default:
            break;
 80031d0:	e036      	b.n	8003240 <AP_Mode_Proc+0x9c>
            result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 80031d2:	f001 fae9 	bl	80047a8 <SD_Card_Boot>
 80031d6:	6078      	str	r0, [r7, #4]
            SD_Card_Log("SD Card Boot...\n");
 80031d8:	4828      	ldr	r0, [pc, #160]	@ (800327c <AP_Mode_Proc+0xd8>)
 80031da:	f001 fc9d 	bl	8004b18 <SD_Card_Log>
            if (result == SD_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <AP_Mode_Proc+0x4e>
                SD_Card_Log("SD Card Booted Successfully!\n");
 80031e4:	4826      	ldr	r0, [pc, #152]	@ (8003280 <AP_Mode_Proc+0xdc>)
 80031e6:	f001 fc97 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
            break;
 80031f0:	e027      	b.n	8003242 <AP_Mode_Proc+0x9e>
                SD_Card_Log("SD Card Boot Failed!\n");
 80031f2:	4824      	ldr	r0, [pc, #144]	@ (8003284 <AP_Mode_Proc+0xe0>)
 80031f4:	f001 fc90 	bl	8004b18 <SD_Card_Log>
                SD_Card_Log("again...\n");
 80031f8:	4823      	ldr	r0, [pc, #140]	@ (8003288 <AP_Mode_Proc+0xe4>)
 80031fa:	f001 fc8d 	bl	8004b18 <SD_Card_Log>
                Error_Proc(1);
 80031fe:	2001      	movs	r0, #1
 8003200:	f000 f858 	bl	80032b4 <Error_Proc>
            break;
 8003204:	e01d      	b.n	8003242 <AP_Mode_Proc+0x9e>
            result = ESP_AT_Boot(); // ESP32 AT 테스트
 8003206:	f7fd fe3f 	bl	8000e88 <ESP_AT_Boot>
 800320a:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 AT Boot...\n");
 800320c:	481f      	ldr	r0, [pc, #124]	@ (800328c <AP_Mode_Proc+0xe8>)
 800320e:	f001 fc83 	bl	8004b18 <SD_Card_Log>
            if (result == AT_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <AP_Mode_Proc+0x82>
                SD_Card_Log("ESP32 AT Booted Successfully!\n");
 8003218:	481d      	ldr	r0, [pc, #116]	@ (8003290 <AP_Mode_Proc+0xec>)
 800321a:	f001 fc7d 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
            break;
 8003224:	e00d      	b.n	8003242 <AP_Mode_Proc+0x9e>
                SD_Card_Log("ESP32 AT Boot Failed!\n");
 8003226:	481b      	ldr	r0, [pc, #108]	@ (8003294 <AP_Mode_Proc+0xf0>)
 8003228:	f001 fc76 	bl	8004b18 <SD_Card_Log>
                SD_Card_Log("again...\n");
 800322c:	4816      	ldr	r0, [pc, #88]	@ (8003288 <AP_Mode_Proc+0xe4>)
 800322e:	f001 fc73 	bl	8004b18 <SD_Card_Log>
                Error_Proc(1);
 8003232:	2001      	movs	r0, #1
 8003234:	f000 f83e 	bl	80032b4 <Error_Proc>
            break;
 8003238:	e003      	b.n	8003242 <AP_Mode_Proc+0x9e>
            bootLoop = 0; // 부팅 루프 종료
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
            break;
 800323e:	e000      	b.n	8003242 <AP_Mode_Proc+0x9e>
            break;
 8003240:	bf00      	nop
    while (bootLoop)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1b7      	bne.n	80031b8 <AP_Mode_Proc+0x14>

    //     ESP_AP_Server(); // ESP32 AP 서버 시작
    // }

    // 와이파이 드라이버 초기화
    ESP_AT_Send_Command_Sync("AT+CWINIT=1\r\n");
 8003248:	4813      	ldr	r0, [pc, #76]	@ (8003298 <AP_Mode_Proc+0xf4>)
 800324a:	f7fd fed9 	bl	8001000 <ESP_AT_Send_Command_Sync>

    // softAP 모드로 설정
    ESP_AT_Send_Command_Sync("AT+CWMODE=3\r\n");
 800324e:	4813      	ldr	r0, [pc, #76]	@ (800329c <AP_Mode_Proc+0xf8>)
 8003250:	f7fd fed6 	bl	8001000 <ESP_AT_Send_Command_Sync>
    
    // AP SSID와 비밀번호 설정
    // ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT_AP\",\"12345678\",5,3\r\n");
    ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT_AP\",\"\",5,0\r\n");
 8003254:	4812      	ldr	r0, [pc, #72]	@ (80032a0 <AP_Mode_Proc+0xfc>)
 8003256:	f7fd fed3 	bl	8001000 <ESP_AT_Send_Command_Sync>

    // SoftAP DHCP 서버 활성화
    ESP_AT_Send_Command_Sync("AT+CWDHCP=1,2\r\n");
 800325a:	4812      	ldr	r0, [pc, #72]	@ (80032a4 <AP_Mode_Proc+0x100>)
 800325c:	f7fd fed0 	bl	8001000 <ESP_AT_Send_Command_Sync>

    // SoftAP IP 주소 설정
    ESP_AT_Send_Command_Sync("AT+CIPAP=\"192.168.4.1\",\"255.255.255.0\"\r\n");
 8003260:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <AP_Mode_Proc+0x104>)
 8003262:	f7fd fecd 	bl	8001000 <ESP_AT_Send_Command_Sync>

    // 멀티플 커넥션 모드 설정
    ESP_AT_Send_Command_Sync("AT+CIPMUX=1\r\n");
 8003266:	4811      	ldr	r0, [pc, #68]	@ (80032ac <AP_Mode_Proc+0x108>)
 8003268:	f7fd feca 	bl	8001000 <ESP_AT_Send_Command_Sync>

    // HTTP 서버 시작
    ESP_AT_Send_Command_Sync("AT+CIPSERVER=1,80\r\n");
 800326c:	4810      	ldr	r0, [pc, #64]	@ (80032b0 <AP_Mode_Proc+0x10c>)
 800326e:	f7fd fec7 	bl	8001000 <ESP_AT_Send_Command_Sync>

    Handle_IPD_and_Respond(); // 클라이언트 요청 처리
 8003272:	f7fe fc2f 	bl	8001ad4 <Handle_IPD_and_Respond>

    while (1)
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <AP_Mode_Proc+0xd2>
 800327a:	bf00      	nop
 800327c:	0800fdc8 	.word	0x0800fdc8
 8003280:	0800fddc 	.word	0x0800fddc
 8003284:	0800fdfc 	.word	0x0800fdfc
 8003288:	0800fe14 	.word	0x0800fe14
 800328c:	0800fe20 	.word	0x0800fe20
 8003290:	0800fe34 	.word	0x0800fe34
 8003294:	0800fe54 	.word	0x0800fe54
 8003298:	0800fe6c 	.word	0x0800fe6c
 800329c:	0800fe7c 	.word	0x0800fe7c
 80032a0:	0800fe8c 	.word	0x0800fe8c
 80032a4:	0800feac 	.word	0x0800feac
 80032a8:	0800febc 	.word	0x0800febc
 80032ac:	0800fee8 	.word	0x0800fee8
 80032b0:	0800fef8 	.word	0x0800fef8

080032b4 <Error_Proc>:
//                                                                              
// ──────────────────────────────────────────────────────────────────────────────
// 파라미터 0 : Error_Handler 호출
// 파라미터 !0 : uart1 코맨트 전송
void Error_Proc(int errorCode)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    const char *comment = "Check Log.txt!\r\n";
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <Error_Proc+0x58>)
 80032be:	60fb      	str	r3, [r7, #12]

    switch (errorCode)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <Error_Proc+0x1a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d003      	beq.n	80032d4 <Error_Proc+0x20>
 80032cc:	e00e      	b.n	80032ec <Error_Proc+0x38>
    {
    case 0:
        Error_Handler();
 80032ce:	f7ff ff11 	bl	80030f4 <Error_Handler>
        break;
 80032d2:	e017      	b.n	8003304 <Error_Proc+0x50>
    case 1:
        HAL_UART_Transmit(&huart1, (uint8_t*)comment, strlen(comment), HAL_MAX_DELAY);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7fc ff85 	bl	80001e4 <strlen>
 80032da:	4603      	mov	r3, r0
 80032dc:	b29a      	uxth	r2, r3
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	480a      	ldr	r0, [pc, #40]	@ (8003310 <Error_Proc+0x5c>)
 80032e6:	f005 ffcd 	bl	8009284 <HAL_UART_Transmit>
        break;
 80032ea:	e00b      	b.n	8003304 <Error_Proc+0x50>
    
    default:
        HAL_UART_Transmit(&huart1, (uint8_t*)comment, strlen(comment), HAL_MAX_DELAY);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7fc ff79 	bl	80001e4 <strlen>
 80032f2:	4603      	mov	r3, r0
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	4804      	ldr	r0, [pc, #16]	@ (8003310 <Error_Proc+0x5c>)
 80032fe:	f005 ffc1 	bl	8009284 <HAL_UART_Transmit>
        break;
 8003302:	bf00      	nop
    }
    
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	0800ff0c 	.word	0x0800ff0c
 8003310:	20000f10 	.word	0x20000f10

08003314 <Master_Proc>:
//   | |  | |/ ____ \ ____) |  | |  | |____| | \ \           | |    | | \ \| |__| | |____ 
//   |_|  |_/_/    \_\_____/   |_|  |______|_|  \_\          |_|    |_|  \_\\____/ \_____|
//                                                                                        
// ──────────────────────────────────────────────────────────────────────────────
void Master_Proc(void) 
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
    switch (g_nBoot_Step)
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <Master_Proc+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
    case 0:
            
      break;
    
    default:
      break;
 800331e:	bf00      	nop
    }

    SD_Card_Check(); // SD 카드 존재 여부 확인
 8003320:	f7ff feee 	bl	8003100 <SD_Card_Check>
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20001018 	.word	0x20001018

0800332c <DEBUG_Proc>:
//   | |__| | |____| |_) | |__| | |__| |          | |    | | \ \| |__| | |____ 
//   |_____/|______|____/ \____/ \_____|          |_|    |_|  \_\\____/ \_____|
//                                                                             
// ─────────────────────────────────────────────────────────────────────────────
void DEBUG_Proc(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b0c8      	sub	sp, #288	@ 0x120
 8003330:	af00      	add	r7, sp, #0
    // 디버그 모드인걸 uart로 알리기
    const char *debugMsg = "DEBUG MODE ACTIVE!\r\n";
 8003332:	4bca      	ldr	r3, [pc, #808]	@ (800365c <DEBUG_Proc+0x330>)
 8003334:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8003338:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800333c:	f7fc ff52 	bl	80001e4 <strlen>
 8003340:	4603      	mov	r3, r0
 8003342:	b29a      	uxth	r2, r3
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800334c:	48c4      	ldr	r0, [pc, #784]	@ (8003660 <DEBUG_Proc+0x334>)
 800334e:	f005 ff99 	bl	8009284 <HAL_UART_Transmit>

    // SIM_Init(); // SIM 모듈 초기화, 앞에서 이미 했음

    // SIM 모듈 전원 끄기
    // HAL_TICK 사용
    uint32_t start = HAL_GetTick();
 8003352:	f002 fa3d 	bl	80057d0 <HAL_GetTick>
 8003356:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    uint8_t  ch;
    size_t   idx = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    int step = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    int result = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    int bootLoop = 1;
 800336c:	2301      	movs	r3, #1
 800336e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    const char *macAddress;

    // 테스트 모드 부팅 동작
    while (bootLoop)
 8003372:	e11b      	b.n	80035ac <DEBUG_Proc+0x280>
    {
        // 10ms 단위로 진행
        if (ms_tick_1 % 10 == 0)
 8003374:	4bbb      	ldr	r3, [pc, #748]	@ (8003664 <DEBUG_Proc+0x338>)
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	4bbb      	ldr	r3, [pc, #748]	@ (8003668 <DEBUG_Proc+0x33c>)
 800337a:	fba3 1302 	umull	r1, r3, r3, r2
 800337e:	08d9      	lsrs	r1, r3, #3
 8003380:	460b      	mov	r3, r1
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 810d 	bne.w	80035ac <DEBUG_Proc+0x280>
        {
            switch (step)
 8003392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003396:	2b04      	cmp	r3, #4
 8003398:	f200 8108 	bhi.w	80035ac <DEBUG_Proc+0x280>
 800339c:	a201      	add	r2, pc, #4	@ (adr r2, 80033a4 <DEBUG_Proc+0x78>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033b9 	.word	0x080033b9
 80033a8:	0800340f 	.word	0x0800340f
 80033ac:	08003465 	.word	0x08003465
 80033b0:	08003501 	.word	0x08003501
 80033b4:	08003559 	.word	0x08003559
            {
            case TEST_STEP_SD_BOOT:
                result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 80033b8:	f001 f9f6 	bl	80047a8 <SD_Card_Boot>
 80033bc:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
                
                SD_Card_Log("SD Card Boot...\n");
 80033c0:	48aa      	ldr	r0, [pc, #680]	@ (800366c <DEBUG_Proc+0x340>)
 80033c2:	f001 fba9 	bl	8004b18 <SD_Card_Log>
                
                if (result == SD_OK)
 80033c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <DEBUG_Proc+0xd4>
                {
                    SD_Card_Log("SD Card Booted Successfully!\n");
 80033ce:	48a8      	ldr	r0, [pc, #672]	@ (8003670 <DEBUG_Proc+0x344>)
 80033d0:	f001 fba2 	bl	8004b18 <SD_Card_Log>
                    debugMsg = "SD Card Booted Successfully!\n";
 80033d4:	4ba6      	ldr	r3, [pc, #664]	@ (8003670 <DEBUG_Proc+0x344>)
 80033d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 80033da:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80033de:	f7fc ff01 	bl	80001e4 <strlen>
 80033e2:	4603      	mov	r3, r0
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80033ee:	489c      	ldr	r0, [pc, #624]	@ (8003660 <DEBUG_Proc+0x334>)
 80033f0:	f005 ff48 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 80033f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033f8:	3301      	adds	r3, #1
 80033fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                    SD_Card_Log("again...\n");
                    // SD 카드 부팅 실패 시 에러 처리
                    // Error_Handler();
                    // Error_Proc(1);
                }
                break;
 80033fe:	e0d5      	b.n	80035ac <DEBUG_Proc+0x280>
                    SD_Card_Log("SD Card Boot Failed!\n");
 8003400:	489c      	ldr	r0, [pc, #624]	@ (8003674 <DEBUG_Proc+0x348>)
 8003402:	f001 fb89 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003406:	489c      	ldr	r0, [pc, #624]	@ (8003678 <DEBUG_Proc+0x34c>)
 8003408:	f001 fb86 	bl	8004b18 <SD_Card_Log>
                break;
 800340c:	e0ce      	b.n	80035ac <DEBUG_Proc+0x280>
                // ----------------------
            case TEST_STEP_ESP_BOOT:
                result = ESP_AT_Boot(); // ESP32 AT 테스트
 800340e:	f7fd fd3b 	bl	8000e88 <ESP_AT_Boot>
 8003412:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

                SD_Card_Log("ESP32 AT Boot...\n");
 8003416:	4899      	ldr	r0, [pc, #612]	@ (800367c <DEBUG_Proc+0x350>)
 8003418:	f001 fb7e 	bl	8004b18 <SD_Card_Log>

                if (result == AT_OK)
 800341c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003420:	2b00      	cmp	r3, #0
 8003422:	d118      	bne.n	8003456 <DEBUG_Proc+0x12a>
                {
                    SD_Card_Log("ESP32 AT Booted Successfully!\n");
 8003424:	4896      	ldr	r0, [pc, #600]	@ (8003680 <DEBUG_Proc+0x354>)
 8003426:	f001 fb77 	bl	8004b18 <SD_Card_Log>
                    debugMsg = "ESP32 AT Booted Successfully!\n";
 800342a:	4b95      	ldr	r3, [pc, #596]	@ (8003680 <DEBUG_Proc+0x354>)
 800342c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8003430:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003434:	f7fc fed6 	bl	80001e4 <strlen>
 8003438:	4603      	mov	r3, r0
 800343a:	b29a      	uxth	r2, r3
 800343c:	f04f 33ff 	mov.w	r3, #4294967295
 8003440:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8003444:	4886      	ldr	r0, [pc, #536]	@ (8003660 <DEBUG_Proc+0x334>)
 8003446:	f005 ff1d 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 800344a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800344e:	3301      	adds	r3, #1
 8003450:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                    SD_Card_Log("again...\n");
                    // ESP32 AT 부팅 실패 시 에러 처리
                    //Error_Handler();
                    // Error_Proc(1);
                }
                break;
 8003454:	e0aa      	b.n	80035ac <DEBUG_Proc+0x280>
                    SD_Card_Log("ESP32 AT Boot Failed!\n");
 8003456:	488b      	ldr	r0, [pc, #556]	@ (8003684 <DEBUG_Proc+0x358>)
 8003458:	f001 fb5e 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 800345c:	4886      	ldr	r0, [pc, #536]	@ (8003678 <DEBUG_Proc+0x34c>)
 800345e:	f001 fb5b 	bl	8004b18 <SD_Card_Log>
                break;
 8003462:	e0a3      	b.n	80035ac <DEBUG_Proc+0x280>
                // ----------------------
            case TEST_STEP_MAC_CONFIG:
                // MAC 주소 상태 로드
                Load_MAC_Status_FRAM(); // FRAM에서 MAC 주소 상태 로드
 8003464:	f7fd fb58 	bl	8000b18 <Load_MAC_Status_FRAM>

                g_nMac_Status = DEVICE_MAC_NOT_SET;
 8003468:	4b87      	ldr	r3, [pc, #540]	@ (8003688 <DEBUG_Proc+0x35c>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]

                SD_Card_Log("MAC Address Configuration...\n");
 800346e:	4887      	ldr	r0, [pc, #540]	@ (800368c <DEBUG_Proc+0x360>)
 8003470:	f001 fb52 	bl	8004b18 <SD_Card_Log>

                if (g_nMac_Status == DEVICE_MAC_NOT_SET) // MAC 주소가 설정되지 않은 경우
 8003474:	4b84      	ldr	r3, [pc, #528]	@ (8003688 <DEBUG_Proc+0x35c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d136      	bne.n	80034ea <DEBUG_Proc+0x1be>
                {
                    macAddress = ESP_AT_Get_MAC_Address(); // ESP32 AT 명령어를 통해 MAC 주소 조회
 800347c:	f7fe f914 	bl	80016a8 <ESP_AT_Get_MAC_Address>
 8003480:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100

                    // MAC 주소 저장
                    SERVER_API_Set_MAC_Address(macAddress);  // 서버 API MAC 주소 저장 함수 호출
 8003484:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8003488:	f001 fc18 	bl	8004cbc <SERVER_API_Set_MAC_Address>

                    // 메모리에 MAC 주소 저장
                    Save_MAC_FRAM(macAddress); // FRAM에 MAC 주소 저장
 800348c:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8003490:	f7fd fb72 	bl	8000b78 <Save_MAC_FRAM>
                    
                    g_nMac_Status = DEVICE_MAC_SET; // MAC 주소 상태 업데이트
 8003494:	4b7c      	ldr	r3, [pc, #496]	@ (8003688 <DEBUG_Proc+0x35c>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
                    Save_MAC_Status_FRAM(); // FRAM에 MAC 주소 상태 저장
 800349a:	f7fd fb59 	bl	8000b50 <Save_MAC_Status_FRAM>

                    SD_Card_Log("MAC Address Set Successfully!\n");
 800349e:	487c      	ldr	r0, [pc, #496]	@ (8003690 <DEBUG_Proc+0x364>)
 80034a0:	f001 fb3a 	bl	8004b18 <SD_Card_Log>
                    debugMsg = "MAC Address Set Successfully!\n";
 80034a4:	4b7a      	ldr	r3, [pc, #488]	@ (8003690 <DEBUG_Proc+0x364>)
 80034a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 80034aa:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80034ae:	f7fc fe99 	bl	80001e4 <strlen>
 80034b2:	4603      	mov	r3, r0
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80034be:	4868      	ldr	r0, [pc, #416]	@ (8003660 <DEBUG_Proc+0x334>)
 80034c0:	f005 fee0 	bl	8009284 <HAL_UART_Transmit>
                    // macAddress uart1로 전송
                    HAL_UART_Transmit(&huart1, (uint8_t*)macAddress, strlen(macAddress), HAL_MAX_DELAY);
 80034c4:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80034c8:	f7fc fe8c 	bl	80001e4 <strlen>
 80034cc:	4603      	mov	r3, r0
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
 80034d4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80034d8:	4861      	ldr	r0, [pc, #388]	@ (8003660 <DEBUG_Proc+0x334>)
 80034da:	f005 fed3 	bl	8009284 <HAL_UART_Transmit>

                    step++; // 다음 단계로 이동
 80034de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e2:	3301      	adds	r3, #1
 80034e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

                    SD_Card_Log("MAC Address Already Set!\n");

                    step++; // 다음 단계로 이동
                }
                break;
 80034e8:	e060      	b.n	80035ac <DEBUG_Proc+0x280>
                    Load_MAC_FRAM(); // FRAM에서 MAC 주소 로드
 80034ea:	f7fd fb71 	bl	8000bd0 <Load_MAC_FRAM>
                    SD_Card_Log("MAC Address Already Set!\n");
 80034ee:	4869      	ldr	r0, [pc, #420]	@ (8003694 <DEBUG_Proc+0x368>)
 80034f0:	f001 fb12 	bl	8004b18 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 80034f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034f8:	3301      	adds	r3, #1
 80034fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                break;
 80034fe:	e055      	b.n	80035ac <DEBUG_Proc+0x280>
                // ----------------------
            case TEST_STEP_WIFI_CONFIG:
                // 와이파이 드라이버 초기화
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CWINIT=1\r\n");
 8003500:	4865      	ldr	r0, [pc, #404]	@ (8003698 <DEBUG_Proc+0x36c>)
 8003502:	f7fd fe67 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 8003506:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

                SD_Card_Log("ESP32 WiFi Init...\n");
 800350a:	4864      	ldr	r0, [pc, #400]	@ (800369c <DEBUG_Proc+0x370>)
 800350c:	f001 fb04 	bl	8004b18 <SD_Card_Log>

                if (result == AT_OK)
 8003510:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003514:	2b00      	cmp	r3, #0
 8003516:	d118      	bne.n	800354a <DEBUG_Proc+0x21e>
                {
                    SD_Card_Log("ESP32 WiFi Init Success!\n");
 8003518:	4861      	ldr	r0, [pc, #388]	@ (80036a0 <DEBUG_Proc+0x374>)
 800351a:	f001 fafd 	bl	8004b18 <SD_Card_Log>
                    debugMsg = "ESP32 WiFi Init Success!\n";
 800351e:	4b60      	ldr	r3, [pc, #384]	@ (80036a0 <DEBUG_Proc+0x374>)
 8003520:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8003524:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003528:	f7fc fe5c 	bl	80001e4 <strlen>
 800352c:	4603      	mov	r3, r0
 800352e:	b29a      	uxth	r2, r3
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8003538:	4849      	ldr	r0, [pc, #292]	@ (8003660 <DEBUG_Proc+0x334>)
 800353a:	f005 fea3 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 800353e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003542:	3301      	adds	r3, #1
 8003544:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                    SD_Card_Log("ESP32 WiFi Init Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 WiFi 초기화 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 8003548:	e030      	b.n	80035ac <DEBUG_Proc+0x280>
                    SD_Card_Log("ESP32 WiFi Init Failed!\n");
 800354a:	4856      	ldr	r0, [pc, #344]	@ (80036a4 <DEBUG_Proc+0x378>)
 800354c:	f001 fae4 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003550:	4849      	ldr	r0, [pc, #292]	@ (8003678 <DEBUG_Proc+0x34c>)
 8003552:	f001 fae1 	bl	8004b18 <SD_Card_Log>
                break;
 8003556:	e029      	b.n	80035ac <DEBUG_Proc+0x280>
                // ----------------------
            case TEST_STEP_WIFI_MODE_SET:
                // softAP 모드로 설정
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CWMODE=2\r\n");
 8003558:	4853      	ldr	r0, [pc, #332]	@ (80036a8 <DEBUG_Proc+0x37c>)
 800355a:	f7fd fe3b 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 800355e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
                SD_Card_Log("ESP32 Set SoftAP Mode...\n");
 8003562:	4852      	ldr	r0, [pc, #328]	@ (80036ac <DEBUG_Proc+0x380>)
 8003564:	f001 fad8 	bl	8004b18 <SD_Card_Log>
                if (result == AT_OK)
 8003568:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800356c:	2b00      	cmp	r3, #0
 800356e:	d116      	bne.n	800359e <DEBUG_Proc+0x272>
                {
                    SD_Card_Log("ESP32 Set SoftAP Mode Success!\n");
 8003570:	484f      	ldr	r0, [pc, #316]	@ (80036b0 <DEBUG_Proc+0x384>)
 8003572:	f001 fad1 	bl	8004b18 <SD_Card_Log>
                    debugMsg = "ESP32 Set SoftAP Mode Success!\n";
 8003576:	4b4e      	ldr	r3, [pc, #312]	@ (80036b0 <DEBUG_Proc+0x384>)
 8003578:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 800357c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003580:	f7fc fe30 	bl	80001e4 <strlen>
 8003584:	4603      	mov	r3, r0
 8003586:	b29a      	uxth	r2, r3
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
 800358c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8003590:	4833      	ldr	r0, [pc, #204]	@ (8003660 <DEBUG_Proc+0x334>)
 8003592:	f005 fe77 	bl	8009284 <HAL_UART_Transmit>

                    bootLoop = 0; // 부팅 루프 종료
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
                    SD_Card_Log("ESP32 Set SoftAP Mode Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 SoftAP 모드 설정 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 800359c:	e005      	b.n	80035aa <DEBUG_Proc+0x27e>
                    SD_Card_Log("ESP32 Set SoftAP Mode Failed!\n");
 800359e:	4845      	ldr	r0, [pc, #276]	@ (80036b4 <DEBUG_Proc+0x388>)
 80035a0:	f001 faba 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 80035a4:	4834      	ldr	r0, [pc, #208]	@ (8003678 <DEBUG_Proc+0x34c>)
 80035a6:	f001 fab7 	bl	8004b18 <SD_Card_Log>
                break;
 80035aa:	bf00      	nop
    while (bootLoop)
 80035ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f aedf 	bne.w	8003374 <DEBUG_Proc+0x48>
    // while ((HAL_GetTick() - start) < 100)
    // {   
    //     SIM_PWR_ON();  // OFF 해야 HIGH 신호 발생, 오실로스코프 찍어보셈
    // }

    start = HAL_GetTick();
 80035b6:	f002 f90b 	bl	80057d0 <HAL_GetTick>
 80035ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    while ((HAL_GetTick() - start) < 200)
 80035be:	e001      	b.n	80035c4 <DEBUG_Proc+0x298>
    {
        SIM_PWR_OFF();   // ON 해야 LOW 신호 발생
 80035c0:	f001 fcc2 	bl	8004f48 <SIM_PWR_OFF>
    while ((HAL_GetTick() - start) < 200)
 80035c4:	f002 f904 	bl	80057d0 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80035d2:	d9f5      	bls.n	80035c0 <DEBUG_Proc+0x294>
    }
    // SIM 모듈 상태 ON 1.1초
    HAL_UART_Transmit(&huart1, (uint8_t*)"SIM ON!\r\n", 10, HAL_MAX_DELAY);
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	220a      	movs	r2, #10
 80035da:	4937      	ldr	r1, [pc, #220]	@ (80036b8 <DEBUG_Proc+0x38c>)
 80035dc:	4820      	ldr	r0, [pc, #128]	@ (8003660 <DEBUG_Proc+0x334>)
 80035de:	f005 fe51 	bl	8009284 <HAL_UART_Transmit>
    start = HAL_GetTick();
 80035e2:	f002 f8f5 	bl	80057d0 <HAL_GetTick>
 80035e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    while ((HAL_GetTick() - start) < 200)
 80035ea:	e001      	b.n	80035f0 <DEBUG_Proc+0x2c4>
    {
        SIM_PWR_ON();   // ON 해야 LOW 신호 발생
 80035ec:	f001 fc9e 	bl	8004f2c <SIM_PWR_ON>
    while ((HAL_GetTick() - start) < 200)
 80035f0:	f002 f8ee 	bl	80057d0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80035fe:	d9f5      	bls.n	80035ec <DEBUG_Proc+0x2c0>
    }
    SIM_PWR_OFF();   // ON 해야 LOW 신호 발생
 8003600:	f001 fca2 	bl	8004f48 <SIM_PWR_OFF>
    }
#endif
    // uart 3에서 들어오는 값 확인
    char resp[256];
    size_t n;
    n = SIM_UART_ReadData(resp, sizeof(resp), 10000, 1000); // 10초 전체 대기, 바이트당 1000ms 대기
 8003604:	4638      	mov	r0, r7
 8003606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800360e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003612:	f001 fca7 	bl	8004f64 <SIM_UART_ReadData>
 8003616:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    if (n > 0)
 800361a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <DEBUG_Proc+0x31c>
    {
        resp[n] = '\0'; // 문자열 종료
 8003622:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003626:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800362a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362e:	4413      	add	r3, r2
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)resp, n, HAL_MAX_DELAY); // uart1로 전송
 8003634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003638:	b29a      	uxth	r2, r3
 800363a:	4639      	mov	r1, r7
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	4807      	ldr	r0, [pc, #28]	@ (8003660 <DEBUG_Proc+0x334>)
 8003642:	f005 fe1f 	bl	8009284 <HAL_UART_Transmit>
 8003646:	e007      	b.n	8003658 <DEBUG_Proc+0x32c>
    }
    else
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)"No data received!\r\n", 20, HAL_MAX_DELAY);
 8003648:	f04f 33ff 	mov.w	r3, #4294967295
 800364c:	2214      	movs	r2, #20
 800364e:	491b      	ldr	r1, [pc, #108]	@ (80036bc <DEBUG_Proc+0x390>)
 8003650:	4803      	ldr	r0, [pc, #12]	@ (8003660 <DEBUG_Proc+0x334>)
 8003652:	f005 fe17 	bl	8009284 <HAL_UART_Transmit>
    }

    
    while (1)
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <DEBUG_Proc+0x32c>
 800365c:	0800ff20 	.word	0x0800ff20
 8003660:	20000f10 	.word	0x20000f10
 8003664:	20001000 	.word	0x20001000
 8003668:	cccccccd 	.word	0xcccccccd
 800366c:	0800fdc8 	.word	0x0800fdc8
 8003670:	0800fddc 	.word	0x0800fddc
 8003674:	0800fdfc 	.word	0x0800fdfc
 8003678:	0800fe14 	.word	0x0800fe14
 800367c:	0800fe20 	.word	0x0800fe20
 8003680:	0800fe34 	.word	0x0800fe34
 8003684:	0800fe54 	.word	0x0800fe54
 8003688:	20001011 	.word	0x20001011
 800368c:	0800ff38 	.word	0x0800ff38
 8003690:	0800ff58 	.word	0x0800ff58
 8003694:	0800ff78 	.word	0x0800ff78
 8003698:	0800fe6c 	.word	0x0800fe6c
 800369c:	0800ff94 	.word	0x0800ff94
 80036a0:	0800ffa8 	.word	0x0800ffa8
 80036a4:	0800ffc4 	.word	0x0800ffc4
 80036a8:	0800ffe0 	.word	0x0800ffe0
 80036ac:	0800fff0 	.word	0x0800fff0
 80036b0:	0801000c 	.word	0x0801000c
 80036b4:	0801002c 	.word	0x0801002c
 80036b8:	0801004c 	.word	0x0801004c
 80036bc:	08010058 	.word	0x08010058

080036c0 <Test_Proc>:
//      | |  | |____ ____) |  | |             | |    | | \ \| |__| | |____ 
//      |_|  |______|_____/   |_|             |_|    |_|  \_\\____/ \_____|
//                                                                                                                                 
// ─────────────────────────────────────────────────────────────────────────────
void Test_Proc(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b0ac      	sub	sp, #176	@ 0xb0
 80036c4:	af00      	add	r7, sp, #0
    // 테스트 모드 프로세스
    // 마스터 시퀀스 테스트
    // 순서 ESP AP 모드열어서 휴대폰으로 WIFI 접속
    // 웹사이트 접근
    
    int step = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int result = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    int bootLoop = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    const char *macAddress;
 
    const char *testMsg = "TEST MODE ACTIVE!\r\n";
 80036d8:	4bcc      	ldr	r3, [pc, #816]	@ (8003a0c <Test_Proc+0x34c>)
 80036da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 80036de:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80036e2:	f7fc fd7f 	bl	80001e4 <strlen>
 80036e6:	4603      	mov	r3, r0
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80036f2:	48c7      	ldr	r0, [pc, #796]	@ (8003a10 <Test_Proc+0x350>)
 80036f4:	f005 fdc6 	bl	8009284 <HAL_UART_Transmit>

    // 테스트 모드 부팅 동작
    while (bootLoop)
 80036f8:	e2d4      	b.n	8003ca4 <Test_Proc+0x5e4>
    {
        // 10ms 단위로 진행
        if (ms_tick_1 % 10 == 0)
 80036fa:	4bc6      	ldr	r3, [pc, #792]	@ (8003a14 <Test_Proc+0x354>)
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	4bc6      	ldr	r3, [pc, #792]	@ (8003a18 <Test_Proc+0x358>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	08d9      	lsrs	r1, r3, #3
 8003706:	460b      	mov	r3, r1
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 82c6 	bne.w	8003ca4 <Test_Proc+0x5e4>
        {
            switch (step)
 8003718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800371c:	2b16      	cmp	r3, #22
 800371e:	f200 82c0 	bhi.w	8003ca2 <Test_Proc+0x5e2>
 8003722:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <Test_Proc+0x68>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003785 	.word	0x08003785
 800372c:	080037db 	.word	0x080037db
 8003730:	08003831 	.word	0x08003831
 8003734:	080038cd 	.word	0x080038cd
 8003738:	08003925 	.word	0x08003925
 800373c:	0800397d 	.word	0x0800397d
 8003740:	08003a81 	.word	0x08003a81
 8003744:	08003b2f 	.word	0x08003b2f
 8003748:	08003b87 	.word	0x08003b87
 800374c:	08003bdf 	.word	0x08003bdf
 8003750:	08003c37 	.word	0x08003c37
 8003754:	08003c95 	.word	0x08003c95
 8003758:	08003ca3 	.word	0x08003ca3
 800375c:	08003ca3 	.word	0x08003ca3
 8003760:	08003ca3 	.word	0x08003ca3
 8003764:	08003ca3 	.word	0x08003ca3
 8003768:	08003ca3 	.word	0x08003ca3
 800376c:	08003ca3 	.word	0x08003ca3
 8003770:	08003ca3 	.word	0x08003ca3
 8003774:	08003ca3 	.word	0x08003ca3
 8003778:	08003ca3 	.word	0x08003ca3
 800377c:	08003ca3 	.word	0x08003ca3
 8003780:	08003c9b 	.word	0x08003c9b
            {
            case TEST_STEP_SD_BOOT:
                result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 8003784:	f001 f810 	bl	80047a8 <SD_Card_Boot>
 8003788:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                
                SD_Card_Log("SD Card Boot...\n");
 800378c:	48a3      	ldr	r0, [pc, #652]	@ (8003a1c <Test_Proc+0x35c>)
 800378e:	f001 f9c3 	bl	8004b18 <SD_Card_Log>
                
                if (result == SD_OK)
 8003792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <Test_Proc+0x10c>
                {
                    SD_Card_Log("SD Card Booted Successfully!\n");
 800379a:	48a1      	ldr	r0, [pc, #644]	@ (8003a20 <Test_Proc+0x360>)
 800379c:	f001 f9bc 	bl	8004b18 <SD_Card_Log>
                    testMsg = "SD Card Booted Successfully!\n";
 80037a0:	4b9f      	ldr	r3, [pc, #636]	@ (8003a20 <Test_Proc+0x360>)
 80037a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 80037a6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80037aa:	f7fc fd1b 	bl	80001e4 <strlen>
 80037ae:	4603      	mov	r3, r0
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80037ba:	4895      	ldr	r0, [pc, #596]	@ (8003a10 <Test_Proc+0x350>)
 80037bc:	f005 fd62 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 80037c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037c4:	3301      	adds	r3, #1
 80037c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("again...\n");
                    // SD 카드 부팅 실패 시 에러 처리
                    // Error_Handler();
                    // Error_Proc(1);
                }
                break;
 80037ca:	e26b      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("SD Card Boot Failed!\n");
 80037cc:	4895      	ldr	r0, [pc, #596]	@ (8003a24 <Test_Proc+0x364>)
 80037ce:	f001 f9a3 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 80037d2:	4895      	ldr	r0, [pc, #596]	@ (8003a28 <Test_Proc+0x368>)
 80037d4:	f001 f9a0 	bl	8004b18 <SD_Card_Log>
                break;
 80037d8:	e264      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_ESP_BOOT:
                result = ESP_AT_Boot(); // ESP32 AT 테스트
 80037da:	f7fd fb55 	bl	8000e88 <ESP_AT_Boot>
 80037de:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                SD_Card_Log("ESP32 AT Boot...\n");
 80037e2:	4892      	ldr	r0, [pc, #584]	@ (8003a2c <Test_Proc+0x36c>)
 80037e4:	f001 f998 	bl	8004b18 <SD_Card_Log>

                if (result == AT_OK)
 80037e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d118      	bne.n	8003822 <Test_Proc+0x162>
                {
                    SD_Card_Log("ESP32 AT Booted Successfully!\n");
 80037f0:	488f      	ldr	r0, [pc, #572]	@ (8003a30 <Test_Proc+0x370>)
 80037f2:	f001 f991 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 AT Booted Successfully!\n";
 80037f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003a30 <Test_Proc+0x370>)
 80037f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 80037fc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003800:	f7fc fcf0 	bl	80001e4 <strlen>
 8003804:	4603      	mov	r3, r0
 8003806:	b29a      	uxth	r2, r3
 8003808:	f04f 33ff 	mov.w	r3, #4294967295
 800380c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003810:	487f      	ldr	r0, [pc, #508]	@ (8003a10 <Test_Proc+0x350>)
 8003812:	f005 fd37 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 8003816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800381a:	3301      	adds	r3, #1
 800381c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("again...\n");
                    // ESP32 AT 부팅 실패 시 에러 처리
                    //Error_Handler();
                    // Error_Proc(1);
                }
                break;
 8003820:	e240      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 AT Boot Failed!\n");
 8003822:	4884      	ldr	r0, [pc, #528]	@ (8003a34 <Test_Proc+0x374>)
 8003824:	f001 f978 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003828:	487f      	ldr	r0, [pc, #508]	@ (8003a28 <Test_Proc+0x368>)
 800382a:	f001 f975 	bl	8004b18 <SD_Card_Log>
                break;
 800382e:	e239      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_MAC_CONFIG:
                // MAC 주소 상태 로드
                Load_MAC_Status_FRAM(); // FRAM에서 MAC 주소 상태 로드
 8003830:	f7fd f972 	bl	8000b18 <Load_MAC_Status_FRAM>

                g_nMac_Status = DEVICE_MAC_NOT_SET;
 8003834:	4b80      	ldr	r3, [pc, #512]	@ (8003a38 <Test_Proc+0x378>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]

                SD_Card_Log("MAC Address Configuration...\n");
 800383a:	4880      	ldr	r0, [pc, #512]	@ (8003a3c <Test_Proc+0x37c>)
 800383c:	f001 f96c 	bl	8004b18 <SD_Card_Log>

                if (g_nMac_Status == DEVICE_MAC_NOT_SET) // MAC 주소가 설정되지 않은 경우
 8003840:	4b7d      	ldr	r3, [pc, #500]	@ (8003a38 <Test_Proc+0x378>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d136      	bne.n	80038b6 <Test_Proc+0x1f6>
                {
                    macAddress = ESP_AT_Get_MAC_Address(); // ESP32 AT 명령어를 통해 MAC 주소 조회
 8003848:	f7fd ff2e 	bl	80016a8 <ESP_AT_Get_MAC_Address>
 800384c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

                    // MAC 주소 저장
                    SERVER_API_Set_MAC_Address(macAddress);  // 서버 API MAC 주소 저장 함수 호출
 8003850:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003854:	f001 fa32 	bl	8004cbc <SERVER_API_Set_MAC_Address>

                    // 메모리에 MAC 주소 저장
                    Save_MAC_FRAM(macAddress); // FRAM에 MAC 주소 저장
 8003858:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800385c:	f7fd f98c 	bl	8000b78 <Save_MAC_FRAM>
                    
                    g_nMac_Status = DEVICE_MAC_SET; // MAC 주소 상태 업데이트
 8003860:	4b75      	ldr	r3, [pc, #468]	@ (8003a38 <Test_Proc+0x378>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
                    Save_MAC_Status_FRAM(); // FRAM에 MAC 주소 상태 저장
 8003866:	f7fd f973 	bl	8000b50 <Save_MAC_Status_FRAM>

                    SD_Card_Log("MAC Address Set Successfully!\n");
 800386a:	4875      	ldr	r0, [pc, #468]	@ (8003a40 <Test_Proc+0x380>)
 800386c:	f001 f954 	bl	8004b18 <SD_Card_Log>
                    testMsg = "MAC Address Set Successfully!\n";
 8003870:	4b73      	ldr	r3, [pc, #460]	@ (8003a40 <Test_Proc+0x380>)
 8003872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003876:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800387a:	f7fc fcb3 	bl	80001e4 <strlen>
 800387e:	4603      	mov	r3, r0
 8003880:	b29a      	uxth	r2, r3
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800388a:	4861      	ldr	r0, [pc, #388]	@ (8003a10 <Test_Proc+0x350>)
 800388c:	f005 fcfa 	bl	8009284 <HAL_UART_Transmit>
                    // macAddress uart1로 전송
                    HAL_UART_Transmit(&huart1, (uint8_t*)macAddress, strlen(macAddress), HAL_MAX_DELAY);
 8003890:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003894:	f7fc fca6 	bl	80001e4 <strlen>
 8003898:	4603      	mov	r3, r0
 800389a:	b29a      	uxth	r2, r3
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a4:	485a      	ldr	r0, [pc, #360]	@ (8003a10 <Test_Proc+0x350>)
 80038a6:	f005 fced 	bl	8009284 <HAL_UART_Transmit>

                    step++; // 다음 단계로 이동
 80038aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038ae:	3301      	adds	r3, #1
 80038b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                    SD_Card_Log("MAC Address Already Set!\n");

                    step++; // 다음 단계로 이동
                }
                break;
 80038b4:	e1f6      	b.n	8003ca4 <Test_Proc+0x5e4>
                    Load_MAC_FRAM(); // FRAM에서 MAC 주소 로드
 80038b6:	f7fd f98b 	bl	8000bd0 <Load_MAC_FRAM>
                    SD_Card_Log("MAC Address Already Set!\n");
 80038ba:	4862      	ldr	r0, [pc, #392]	@ (8003a44 <Test_Proc+0x384>)
 80038bc:	f001 f92c 	bl	8004b18 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 80038c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038c4:	3301      	adds	r3, #1
 80038c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                break;
 80038ca:	e1eb      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_WIFI_CONFIG:
                // 와이파이 드라이버 초기화
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CWINIT=1\r\n");
 80038cc:	485e      	ldr	r0, [pc, #376]	@ (8003a48 <Test_Proc+0x388>)
 80038ce:	f7fd fc81 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 80038d2:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                SD_Card_Log("ESP32 WiFi Init...\n");
 80038d6:	485d      	ldr	r0, [pc, #372]	@ (8003a4c <Test_Proc+0x38c>)
 80038d8:	f001 f91e 	bl	8004b18 <SD_Card_Log>

                if (result == AT_OK)
 80038dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d118      	bne.n	8003916 <Test_Proc+0x256>
                {
                    SD_Card_Log("ESP32 WiFi Init Success!\n");
 80038e4:	485a      	ldr	r0, [pc, #360]	@ (8003a50 <Test_Proc+0x390>)
 80038e6:	f001 f917 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 WiFi Init Success!\n";
 80038ea:	4b59      	ldr	r3, [pc, #356]	@ (8003a50 <Test_Proc+0x390>)
 80038ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 80038f0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80038f4:	f7fc fc76 	bl	80001e4 <strlen>
 80038f8:	4603      	mov	r3, r0
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003904:	4842      	ldr	r0, [pc, #264]	@ (8003a10 <Test_Proc+0x350>)
 8003906:	f005 fcbd 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 800390a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800390e:	3301      	adds	r3, #1
 8003910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("ESP32 WiFi Init Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 WiFi 초기화 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 8003914:	e1c6      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 WiFi Init Failed!\n");
 8003916:	484f      	ldr	r0, [pc, #316]	@ (8003a54 <Test_Proc+0x394>)
 8003918:	f001 f8fe 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 800391c:	4842      	ldr	r0, [pc, #264]	@ (8003a28 <Test_Proc+0x368>)
 800391e:	f001 f8fb 	bl	8004b18 <SD_Card_Log>
                break;
 8003922:	e1bf      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_WIFI_MODE_SET:
                // softAP 모드로 설정
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CWMODE=3\r\n");
 8003924:	484c      	ldr	r0, [pc, #304]	@ (8003a58 <Test_Proc+0x398>)
 8003926:	f7fd fc55 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 800392a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                SD_Card_Log("ESP32 Set SoftAP Mode...\n");
 800392e:	484b      	ldr	r0, [pc, #300]	@ (8003a5c <Test_Proc+0x39c>)
 8003930:	f001 f8f2 	bl	8004b18 <SD_Card_Log>
                if (result == AT_OK)
 8003934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d118      	bne.n	800396e <Test_Proc+0x2ae>
                {
                    SD_Card_Log("ESP32 Set SoftAP Mode Success!\n");
 800393c:	4848      	ldr	r0, [pc, #288]	@ (8003a60 <Test_Proc+0x3a0>)
 800393e:	f001 f8eb 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 Set SoftAP Mode Success!\n";
 8003942:	4b47      	ldr	r3, [pc, #284]	@ (8003a60 <Test_Proc+0x3a0>)
 8003944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003948:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800394c:	f7fc fc4a 	bl	80001e4 <strlen>
 8003950:	4603      	mov	r3, r0
 8003952:	b29a      	uxth	r2, r3
 8003954:	f04f 33ff 	mov.w	r3, #4294967295
 8003958:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800395c:	482c      	ldr	r0, [pc, #176]	@ (8003a10 <Test_Proc+0x350>)
 800395e:	f005 fc91 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 8003962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003966:	3301      	adds	r3, #1
 8003968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("ESP32 Set SoftAP Mode Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 SoftAP 모드 설정 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 800396c:	e19a      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 Set SoftAP Mode Failed!\n");
 800396e:	483d      	ldr	r0, [pc, #244]	@ (8003a64 <Test_Proc+0x3a4>)
 8003970:	f001 f8d2 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003974:	482c      	ldr	r0, [pc, #176]	@ (8003a28 <Test_Proc+0x368>)
 8003976:	f001 f8cf 	bl	8004b18 <SD_Card_Log>
                break;
 800397a:	e193      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_WIFI_SCAN:
                // 와이파이 스캔
                const char *wifiScanResult = ESP_AT_Send_Command_Sync_Get_Result("AT+CWLAP\r\n");
 800397c:	483a      	ldr	r0, [pc, #232]	@ (8003a68 <Test_Proc+0x3a8>)
 800397e:	f7fd fd1f 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 8003982:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
                SD_Card_Log("ESP32 WiFi Scan...\n");
 8003986:	4839      	ldr	r0, [pc, #228]	@ (8003a6c <Test_Proc+0x3ac>)
 8003988:	f001 f8c6 	bl	8004b18 <SD_Card_Log>

                if (wifiScanResult != NULL) // 주변 WiFi 네트워크 있음
 800398c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003990:	2b00      	cmp	r3, #0
 8003992:	d032      	beq.n	80039fa <Test_Proc+0x33a>
                {
                    SD_Card_Log("ESP32 WiFi Scan Success!\n");
 8003994:	4836      	ldr	r0, [pc, #216]	@ (8003a70 <Test_Proc+0x3b0>)
 8003996:	f001 f8bf 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 WiFi Scan Success!\n";
 800399a:	4b35      	ldr	r3, [pc, #212]	@ (8003a70 <Test_Proc+0x3b0>)
 800399c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 80039a0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80039a4:	f7fc fc1e 	bl	80001e4 <strlen>
 80039a8:	4603      	mov	r3, r0
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80039b4:	4816      	ldr	r0, [pc, #88]	@ (8003a10 <Test_Proc+0x350>)
 80039b6:	f005 fc65 	bl	8009284 <HAL_UART_Transmit>
                    HAL_UART_Transmit(&huart1, (uint8_t*)wifiScanResult, strlen(wifiScanResult), HAL_MAX_DELAY);
 80039ba:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80039be:	f7fc fc11 	bl	80001e4 <strlen>
 80039c2:	4603      	mov	r3, r0
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80039ce:	4810      	ldr	r0, [pc, #64]	@ (8003a10 <Test_Proc+0x350>)
 80039d0:	f005 fc58 	bl	8009284 <HAL_UART_Transmit>
                    
                    
                    /* 2 단계에서 HTML을 채워 넣기 위해 먼저 0 초기화 */
                    g_cWifiListHtml[0] = '\0';
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <Test_Proc+0x3b4>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]

                    /* 2 단계: 파싱 & HTML 생성 */
                    parseCwlapToHtml(wifiScanResult, g_cWifiListHtml, WIFI_HTML_MAX);
 80039da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039de:	4925      	ldr	r1, [pc, #148]	@ (8003a74 <Test_Proc+0x3b4>)
 80039e0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80039e4:	f7fe fe26 	bl	8002634 <parseCwlapToHtml>

                    g_nWifiListReady = 1;          // 캐시 준비 완료
 80039e8:	4b23      	ldr	r3, [pc, #140]	@ (8003a78 <Test_Proc+0x3b8>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
                    




                    step++; // 다음 단계로 이동
 80039ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039f2:	3301      	adds	r3, #1
 80039f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    // SD_Card_Log("again...\n");
                    // ESP32 WiFi 스캔 실패 시 에러 처리
                    // Error_Proc(1);
                    step++; // 다음 단계로 이동
                }
                break;
 80039f8:	e154      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 WiFi Scan Failed!\n");
 80039fa:	4820      	ldr	r0, [pc, #128]	@ (8003a7c <Test_Proc+0x3bc>)
 80039fc:	f001 f88c 	bl	8004b18 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 8003a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a04:	3301      	adds	r3, #1
 8003a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                break;
 8003a0a:	e14b      	b.n	8003ca4 <Test_Proc+0x5e4>
 8003a0c:	0801006c 	.word	0x0801006c
 8003a10:	20000f10 	.word	0x20000f10
 8003a14:	20001000 	.word	0x20001000
 8003a18:	cccccccd 	.word	0xcccccccd
 8003a1c:	0800fdc8 	.word	0x0800fdc8
 8003a20:	0800fddc 	.word	0x0800fddc
 8003a24:	0800fdfc 	.word	0x0800fdfc
 8003a28:	0800fe14 	.word	0x0800fe14
 8003a2c:	0800fe20 	.word	0x0800fe20
 8003a30:	0800fe34 	.word	0x0800fe34
 8003a34:	0800fe54 	.word	0x0800fe54
 8003a38:	20001011 	.word	0x20001011
 8003a3c:	0800ff38 	.word	0x0800ff38
 8003a40:	0800ff58 	.word	0x0800ff58
 8003a44:	0800ff78 	.word	0x0800ff78
 8003a48:	0800fe6c 	.word	0x0800fe6c
 8003a4c:	0800ff94 	.word	0x0800ff94
 8003a50:	0800ffa8 	.word	0x0800ffa8
 8003a54:	0800ffc4 	.word	0x0800ffc4
 8003a58:	0800fe7c 	.word	0x0800fe7c
 8003a5c:	0800fff0 	.word	0x0800fff0
 8003a60:	0801000c 	.word	0x0801000c
 8003a64:	0801002c 	.word	0x0801002c
 8003a68:	08010080 	.word	0x08010080
 8003a6c:	0801008c 	.word	0x0801008c
 8003a70:	080100a0 	.word	0x080100a0
 8003a74:	20000008 	.word	0x20000008
 8003a78:	2000107c 	.word	0x2000107c
 8003a7c:	080100bc 	.word	0x080100bc
                // ----------------------
            case TEST_STEP_SOFTAP_SET:
                char ssidCmd[64];
                int len = snprintf(
 8003a80:	1d38      	adds	r0, r7, #4
 8003a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a86:	4a8c      	ldr	r2, [pc, #560]	@ (8003cb8 <Test_Proc+0x5f8>)
 8003a88:	2140      	movs	r1, #64	@ 0x40
 8003a8a:	f009 ffcb 	bl	800da24 <sniprintf>
 8003a8e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
                    ssidCmd, sizeof(ssidCmd),
                    "AT+CWSAP=\"AMKIT_%s\",\"\",5,0\r\n",
                    macAddress
                );
                if (len < 0 || len >= (int)sizeof(ssidCmd))
 8003a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db03      	blt.n	8003aa2 <Test_Proc+0x3e2>
 8003a9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aa0:	dd02      	ble.n	8003aa8 <Test_Proc+0x3e8>
                {
                    // 오류 처리
                    Error_Proc(1);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f7ff fc06 	bl	80032b4 <Error_Proc>
                }

                // AP SSID와 비밀번호 설정
                // result = ESP_AT_Send_Command_Sync_Get_int("AT+CWSAP=\"AMKIT_AP\",\"\",5,0\r\n");
                result = ESP_AT_Send_Command_Sync_Get_int(ssidCmd);
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd fb92 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 8003ab0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                SD_Card_Log("ESP32 Set SoftAP SSID and Password...\n");
 8003ab4:	4881      	ldr	r0, [pc, #516]	@ (8003cbc <Test_Proc+0x5fc>)
 8003ab6:	f001 f82f 	bl	8004b18 <SD_Card_Log>
                if (result == AT_OK)
 8003aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d12e      	bne.n	8003b20 <Test_Proc+0x460>
                {
                    SD_Card_Log("ESP32 Set SoftAP SSID and Password Success!\n");
 8003ac2:	487f      	ldr	r0, [pc, #508]	@ (8003cc0 <Test_Proc+0x600>)
 8003ac4:	f001 f828 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 Set SoftAP SSID and Password Success!\n";
 8003ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8003cc0 <Test_Proc+0x600>)
 8003aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003ace:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003ad2:	f7fc fb87 	bl	80001e4 <strlen>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003ae2:	4878      	ldr	r0, [pc, #480]	@ (8003cc4 <Test_Proc+0x604>)
 8003ae4:	f005 fbce 	bl	8009284 <HAL_UART_Transmit>
                    // SSID 확인
                    char logMsg[80];
                    snprintf(logMsg, sizeof(logMsg), "SSID => AMKIT_%s\r\n", macAddress);
 8003ae8:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8003aec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003af0:	4a75      	ldr	r2, [pc, #468]	@ (8003cc8 <Test_Proc+0x608>)
 8003af2:	2150      	movs	r1, #80	@ 0x50
 8003af4:	f009 ff96 	bl	800da24 <sniprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*)logMsg, strlen(logMsg), HAL_MAX_DELAY);
 8003af8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fb71 	bl	80001e4 <strlen>
 8003b02:	4603      	mov	r3, r0
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	486d      	ldr	r0, [pc, #436]	@ (8003cc4 <Test_Proc+0x604>)
 8003b10:	f005 fbb8 	bl	8009284 <HAL_UART_Transmit>

                    step++; // 다음 단계로 이동
 8003b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("ESP32 Set SoftAP SSID and Password Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 SoftAP SSID와 비밀번호 설정 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 8003b1e:	e0c1      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 Set SoftAP SSID and Password Failed!\n");
 8003b20:	486a      	ldr	r0, [pc, #424]	@ (8003ccc <Test_Proc+0x60c>)
 8003b22:	f000 fff9 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003b26:	486a      	ldr	r0, [pc, #424]	@ (8003cd0 <Test_Proc+0x610>)
 8003b28:	f000 fff6 	bl	8004b18 <SD_Card_Log>
                break;
 8003b2c:	e0ba      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_SOFTAP_DHCP:
                // SoftAP DHCP 서버 활성화
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CWDHCP=1,2\r\n");
 8003b2e:	4869      	ldr	r0, [pc, #420]	@ (8003cd4 <Test_Proc+0x614>)
 8003b30:	f7fd fb50 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 8003b34:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                SD_Card_Log("ESP32 Enable SoftAP DHCP Server...\n");
 8003b38:	4867      	ldr	r0, [pc, #412]	@ (8003cd8 <Test_Proc+0x618>)
 8003b3a:	f000 ffed 	bl	8004b18 <SD_Card_Log>
                if (result == AT_OK)
 8003b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <Test_Proc+0x4b8>
                {
                    SD_Card_Log("ESP32 Enable SoftAP DHCP Server Success!\n");
 8003b46:	4865      	ldr	r0, [pc, #404]	@ (8003cdc <Test_Proc+0x61c>)
 8003b48:	f000 ffe6 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 Enable SoftAP DHCP Server Success!\n";
 8003b4c:	4b63      	ldr	r3, [pc, #396]	@ (8003cdc <Test_Proc+0x61c>)
 8003b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003b52:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003b56:	f7fc fb45 	bl	80001e4 <strlen>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003b66:	4857      	ldr	r0, [pc, #348]	@ (8003cc4 <Test_Proc+0x604>)
 8003b68:	f005 fb8c 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 8003b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b70:	3301      	adds	r3, #1
 8003b72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("ESP32 Enable SoftAP DHCP Server Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 SoftAP DHCP 서버 활성화 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 8003b76:	e095      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 Enable SoftAP DHCP Server Failed!\n");
 8003b78:	4859      	ldr	r0, [pc, #356]	@ (8003ce0 <Test_Proc+0x620>)
 8003b7a:	f000 ffcd 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003b7e:	4854      	ldr	r0, [pc, #336]	@ (8003cd0 <Test_Proc+0x610>)
 8003b80:	f000 ffca 	bl	8004b18 <SD_Card_Log>
                break;
 8003b84:	e08e      	b.n	8003ca4 <Test_Proc+0x5e4>
                    // ESP32 SoftAP IP 주소 조회 실패 시 에러 처리
                    Error_Proc(1);
                }
            #else
                // SoftAP IP 주소 설정
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CIPAP=\"192.168.4.1\",\"255.255.255.0\"\r\n");
 8003b86:	4857      	ldr	r0, [pc, #348]	@ (8003ce4 <Test_Proc+0x624>)
 8003b88:	f7fd fb24 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 8003b8c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                SD_Card_Log("ESP32 Set SoftAP IP Address...\n");
 8003b90:	4855      	ldr	r0, [pc, #340]	@ (8003ce8 <Test_Proc+0x628>)
 8003b92:	f000 ffc1 	bl	8004b18 <SD_Card_Log>
                if (result == AT_OK)
 8003b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d118      	bne.n	8003bd0 <Test_Proc+0x510>
                {
                    SD_Card_Log("ESP32 Set SoftAP IP Address Success!\n");
 8003b9e:	4853      	ldr	r0, [pc, #332]	@ (8003cec <Test_Proc+0x62c>)
 8003ba0:	f000 ffba 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 Set SoftAP IP Address Success!\n";
 8003ba4:	4b51      	ldr	r3, [pc, #324]	@ (8003cec <Test_Proc+0x62c>)
 8003ba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003baa:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003bae:	f7fc fb19 	bl	80001e4 <strlen>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003bbe:	4841      	ldr	r0, [pc, #260]	@ (8003cc4 <Test_Proc+0x604>)
 8003bc0:	f005 fb60 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 8003bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("again...\n");
                    // ESP32 SoftAP IP 주소 설정 실패 시 에러 처리
                    // Error_Proc(1);
                }
            #endif
                break;
 8003bce:	e069      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 Set SoftAP IP Address Failed!\n");
 8003bd0:	4847      	ldr	r0, [pc, #284]	@ (8003cf0 <Test_Proc+0x630>)
 8003bd2:	f000 ffa1 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003bd6:	483e      	ldr	r0, [pc, #248]	@ (8003cd0 <Test_Proc+0x610>)
 8003bd8:	f000 ff9e 	bl	8004b18 <SD_Card_Log>
                break;
 8003bdc:	e062      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_MULTIPLE_CONNECTION:
                // 멀티플 커넥션 모드 설정
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CIPMUX=1\r\n");
 8003bde:	4845      	ldr	r0, [pc, #276]	@ (8003cf4 <Test_Proc+0x634>)
 8003be0:	f7fd faf8 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 8003be4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                SD_Card_Log("ESP32 Set Multiple Connection Mode...\n");
 8003be8:	4843      	ldr	r0, [pc, #268]	@ (8003cf8 <Test_Proc+0x638>)
 8003bea:	f000 ff95 	bl	8004b18 <SD_Card_Log>
                if (result == AT_OK)
 8003bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <Test_Proc+0x568>
                {
                    SD_Card_Log("ESP32 Set Multiple Connection Mode Success!\n");
 8003bf6:	4841      	ldr	r0, [pc, #260]	@ (8003cfc <Test_Proc+0x63c>)
 8003bf8:	f000 ff8e 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 Set Multiple Connection Mode Success!\n";
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8003cfc <Test_Proc+0x63c>)
 8003bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003c02:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003c06:	f7fc faed 	bl	80001e4 <strlen>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003c16:	482b      	ldr	r0, [pc, #172]	@ (8003cc4 <Test_Proc+0x604>)
 8003c18:	f005 fb34 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 8003c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c20:	3301      	adds	r3, #1
 8003c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                    SD_Card_Log("ESP32 Set Multiple Connection Mode Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 멀티플 커넥션 모드 설정 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 8003c26:	e03d      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 Set Multiple Connection Mode Failed!\n");
 8003c28:	4835      	ldr	r0, [pc, #212]	@ (8003d00 <Test_Proc+0x640>)
 8003c2a:	f000 ff75 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003c2e:	4828      	ldr	r0, [pc, #160]	@ (8003cd0 <Test_Proc+0x610>)
 8003c30:	f000 ff72 	bl	8004b18 <SD_Card_Log>
                break;
 8003c34:	e036      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_HTTP_SERVER_START:
                // HTTP 서버 시작
                result = ESP_AT_Send_Command_Sync_Get_int("AT+CIPSERVER=1,80\r\n");
 8003c36:	4833      	ldr	r0, [pc, #204]	@ (8003d04 <Test_Proc+0x644>)
 8003c38:	f7fd facc 	bl	80011d4 <ESP_AT_Send_Command_Sync_Get_int>
 8003c3c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                SD_Card_Log("ESP32 Start HTTP Server...\n");
 8003c40:	4831      	ldr	r0, [pc, #196]	@ (8003d08 <Test_Proc+0x648>)
 8003c42:	f000 ff69 	bl	8004b18 <SD_Card_Log>
                if (result == AT_OK)
 8003c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d11b      	bne.n	8003c86 <Test_Proc+0x5c6>
                {
                    SD_Card_Log("ESP32 Start HTTP Server Success!\n");
 8003c4e:	482f      	ldr	r0, [pc, #188]	@ (8003d0c <Test_Proc+0x64c>)
 8003c50:	f000 ff62 	bl	8004b18 <SD_Card_Log>
                    testMsg = "ESP32 Start HTTP Server Success!\n";
 8003c54:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <Test_Proc+0x64c>)
 8003c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003c5a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003c5e:	f7fc fac1 	bl	80001e4 <strlen>
 8003c62:	4603      	mov	r3, r0
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003c6e:	4815      	ldr	r0, [pc, #84]	@ (8003cc4 <Test_Proc+0x604>)
 8003c70:	f005 fb08 	bl	8009284 <HAL_UART_Transmit>
                    step++; // 다음 단계로 이동
 8003c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                    g_nBoot_Status = BOOT_SUCCESS; // 부팅 성공 상태로 설정
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <Test_Proc+0x650>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
                    SD_Card_Log("ESP32 Start HTTP Server Failed!\n");
                    SD_Card_Log("again...\n");
                    // ESP32 HTTP 서버 시작 실패 시 에러 처리
                    // Error_Proc(1);
                }
                break;
 8003c84:	e00e      	b.n	8003ca4 <Test_Proc+0x5e4>
                    SD_Card_Log("ESP32 Start HTTP Server Failed!\n");
 8003c86:	4823      	ldr	r0, [pc, #140]	@ (8003d14 <Test_Proc+0x654>)
 8003c88:	f000 ff46 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 8003c8c:	4810      	ldr	r0, [pc, #64]	@ (8003cd0 <Test_Proc+0x610>)
 8003c8e:	f000 ff43 	bl	8004b18 <SD_Card_Log>
                break;
 8003c92:	e007      	b.n	8003ca4 <Test_Proc+0x5e4>
                // ----------------------
            case TEST_STEP_CLIENT_REQUEST:
                Handle_IPD_and_Respond_7(); // 클라이언트 요청 처리
 8003c94:	f7fe f8c4 	bl	8001e20 <Handle_IPD_and_Respond_7>
                break;
 8003c98:	e004      	b.n	8003ca4 <Test_Proc+0x5e4>

            case 22:
                bootLoop = 0; // 부팅 루프 종료
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 8003ca0:	e000      	b.n	8003ca4 <Test_Proc+0x5e4>
            
            default:
                break;
 8003ca2:	bf00      	nop
    while (bootLoop)
 8003ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f47f ad26 	bne.w	80036fa <Test_Proc+0x3a>

        }
        
    }
    
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	37b0      	adds	r7, #176	@ 0xb0
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	080100d8 	.word	0x080100d8
 8003cbc:	080100f8 	.word	0x080100f8
 8003cc0:	08010120 	.word	0x08010120
 8003cc4:	20000f10 	.word	0x20000f10
 8003cc8:	08010150 	.word	0x08010150
 8003ccc:	08010164 	.word	0x08010164
 8003cd0:	0800fe14 	.word	0x0800fe14
 8003cd4:	0800feac 	.word	0x0800feac
 8003cd8:	08010190 	.word	0x08010190
 8003cdc:	080101b4 	.word	0x080101b4
 8003ce0:	080101e0 	.word	0x080101e0
 8003ce4:	0800febc 	.word	0x0800febc
 8003ce8:	0801020c 	.word	0x0801020c
 8003cec:	0801022c 	.word	0x0801022c
 8003cf0:	08010254 	.word	0x08010254
 8003cf4:	0800fee8 	.word	0x0800fee8
 8003cf8:	0801027c 	.word	0x0801027c
 8003cfc:	080102a4 	.word	0x080102a4
 8003d00:	080102d4 	.word	0x080102d4
 8003d04:	0800fef8 	.word	0x0800fef8
 8003d08:	08010300 	.word	0x08010300
 8003d0c:	0801031c 	.word	0x0801031c
 8003d10:	20000000 	.word	0x20000000
 8003d14:	08010340 	.word	0x08010340

08003d18 <Timer_Interrupt_Proc>:
//      |_|  |_____|_|  |_|______|_|  \_\.
//                                       
// ─────────────────────────────────────────────────────────────────────────────

void Timer_Interrupt_Proc(void)
{
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b098      	sub	sp, #96	@ 0x60
 8003d1c:	af04      	add	r7, sp, #16
    int rxTimeVal_master    = 100; // RX LED 깜빡임 시간 (ms 단위)
 8003d1e:	2364      	movs	r3, #100	@ 0x64
 8003d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int rxTimeVal_slave     = 120; // RX LED 깜빡임 시간 (ms 단위)
 8003d22:	2378      	movs	r3, #120	@ 0x78
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
    ms_tick_1++;
 8003d26:	4b91      	ldr	r3, [pc, #580]	@ (8003f6c <Timer_Interrupt_Proc+0x254>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8003f6c <Timer_Interrupt_Proc+0x254>)
 8003d30:	801a      	strh	r2, [r3, #0]

    g_nLed_tick_1++; // LED 관련 1 ms 카운터
 8003d32:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <Timer_Interrupt_Proc+0x258>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f70 <Timer_Interrupt_Proc+0x258>)
 8003d3c:	801a      	strh	r2, [r3, #0]
    
    g_nRX_Led_tick_1++; // RX LED 관련 1 ms 카운터
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	4b8b      	ldr	r3, [pc, #556]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003d48:	801a      	strh	r2, [r3, #0]

    alive_counter++;
 8003d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f78 <Timer_Interrupt_Proc+0x260>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	4b89      	ldr	r3, [pc, #548]	@ (8003f78 <Timer_Interrupt_Proc+0x260>)
 8003d54:	801a      	strh	r2, [r3, #0]
    g_nBoot_Tick++; // 부팅 타이머 증가
 8003d56:	4b89      	ldr	r3, [pc, #548]	@ (8003f7c <Timer_Interrupt_Proc+0x264>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	4a87      	ldr	r2, [pc, #540]	@ (8003f7c <Timer_Interrupt_Proc+0x264>)
 8003d5e:	6013      	str	r3, [r2, #0]

    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 8003d60:	4b82      	ldr	r3, [pc, #520]	@ (8003f6c <Timer_Interrupt_Proc+0x254>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d66:	d902      	bls.n	8003d6e <Timer_Interrupt_Proc+0x56>
    {
      ms_tick_1 = 0;
 8003d68:	4b80      	ldr	r3, [pc, #512]	@ (8003f6c <Timer_Interrupt_Proc+0x254>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
      // HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
    }

    // ====================================================================
    // 10초마다 생존 메시지 전송
    if (g_nBoot_Status == BOOT_SUCCESS && alive_counter >= 15000)    // 10 s 경과 체크
 8003d6e:	4b84      	ldr	r3, [pc, #528]	@ (8003f80 <Timer_Interrupt_Proc+0x268>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d132      	bne.n	8003ddc <Timer_Interrupt_Proc+0xc4>
 8003d76:	4b80      	ldr	r3, [pc, #512]	@ (8003f78 <Timer_Interrupt_Proc+0x260>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d92c      	bls.n	8003ddc <Timer_Interrupt_Proc+0xc4>
    {
      alive_counter = 0;
 8003d82:	4b7d      	ldr	r3, [pc, #500]	@ (8003f78 <Timer_Interrupt_Proc+0x260>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	801a      	strh	r2, [r3, #0]

      /* 1) RTC에서 현재 시간 읽기 */
      HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	497e      	ldr	r1, [pc, #504]	@ (8003f84 <Timer_Interrupt_Proc+0x26c>)
 8003d8c:	487e      	ldr	r0, [pc, #504]	@ (8003f88 <Timer_Interrupt_Proc+0x270>)
 8003d8e:	f002 ff3e 	bl	8006c0e <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8003d92:	2200      	movs	r2, #0
 8003d94:	497d      	ldr	r1, [pc, #500]	@ (8003f8c <Timer_Interrupt_Proc+0x274>)
 8003d96:	487c      	ldr	r0, [pc, #496]	@ (8003f88 <Timer_Interrupt_Proc+0x270>)
 8003d98:	f003 f81b 	bl	8006dd2 <HAL_RTC_GetDate>

      /* 2) 문자열로 포맷 */
      char buf[64];

      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003d9c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f8c <Timer_Interrupt_Proc+0x274>)
 8003d9e:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003da0:	461d      	mov	r5, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003da2:	4b7a      	ldr	r3, [pc, #488]	@ (8003f8c <Timer_Interrupt_Proc+0x274>)
 8003da4:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003da6:	461a      	mov	r2, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003da8:	4b76      	ldr	r3, [pc, #472]	@ (8003f84 <Timer_Interrupt_Proc+0x26c>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003dac:	4619      	mov	r1, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003dae:	4b75      	ldr	r3, [pc, #468]	@ (8003f84 <Timer_Interrupt_Proc+0x26c>)
 8003db0:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003db2:	461c      	mov	r4, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003db4:	4b73      	ldr	r3, [pc, #460]	@ (8003f84 <Timer_Interrupt_Proc+0x26c>)
 8003db6:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003db8:	1d38      	adds	r0, r7, #4
 8003dba:	9303      	str	r3, [sp, #12]
 8003dbc:	9402      	str	r4, [sp, #8]
 8003dbe:	9101      	str	r1, [sp, #4]
 8003dc0:	9200      	str	r2, [sp, #0]
 8003dc2:	462b      	mov	r3, r5
 8003dc4:	4a72      	ldr	r2, [pc, #456]	@ (8003f90 <Timer_Interrupt_Proc+0x278>)
 8003dc6:	2140      	movs	r1, #64	@ 0x40
 8003dc8:	f009 fe2c 	bl	800da24 <sniprintf>
 8003dcc:	6478      	str	r0, [r7, #68]	@ 0x44

      /* 3) UART로 생존 및 시간 전송 */
      // UART1로 현재 시간 전송
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 8003dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	486f      	ldr	r0, [pc, #444]	@ (8003f94 <Timer_Interrupt_Proc+0x27c>)
 8003dd8:	f005 fb76 	bl	80094c8 <HAL_UART_Transmit_IT>
    // ====================================================================
    // 100 ms마다 Status LED 상태 변경
    // 비트연산할 변수하나 만들고 NOT 연산으로 LED 상태 변경
    // 예시: g_nLed_tick_1 = ~g_nLed_tick_1
    // 100 ms마다 LED 상태 변경
    if (g_nMode != MODE_AP) // AP 모드가 아닐 때만 LED 상태 변경
 8003ddc:	4b6e      	ldr	r3, [pc, #440]	@ (8003f98 <Timer_Interrupt_Proc+0x280>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	f000 80b9 	beq.w	8003f58 <Timer_Interrupt_Proc+0x240>
    {
        if (g_nLed_tick_1 >= 100) // 100 ms 경과
 8003de6:	4b62      	ldr	r3, [pc, #392]	@ (8003f70 <Timer_Interrupt_Proc+0x258>)
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	2b63      	cmp	r3, #99	@ 0x63
 8003dec:	d915      	bls.n	8003e1a <Timer_Interrupt_Proc+0x102>
        {
            g_nLed_tick_1 = 0; // 카운터 초기화
 8003dee:	4b60      	ldr	r3, [pc, #384]	@ (8003f70 <Timer_Interrupt_Proc+0x258>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	801a      	strh	r2, [r3, #0]
            g_nLed_State = !g_nLed_State; // LED 상태 토글
 8003df4:	4b69      	ldr	r3, [pc, #420]	@ (8003f9c <Timer_Interrupt_Proc+0x284>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b65      	ldr	r3, [pc, #404]	@ (8003f9c <Timer_Interrupt_Proc+0x284>)
 8003e06:	701a      	strb	r2, [r3, #0]

            if (g_nLed_State)
 8003e08:	4b64      	ldr	r3, [pc, #400]	@ (8003f9c <Timer_Interrupt_Proc+0x284>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <Timer_Interrupt_Proc+0xfe>
            {
                STATUS_LED_On();  // LED ON
 8003e10:	f7fe fdb2 	bl	8002978 <STATUS_LED_On>
 8003e14:	e001      	b.n	8003e1a <Timer_Interrupt_Proc+0x102>
            }
            else
            {
                STATUS_LED_Off(); // LED OFF
 8003e16:	f7fe fdbd 	bl	8002994 <STATUS_LED_Off>
            }
        }
    

        // ====================================================================
        if (g_nBoot_Status == BOOT_SUCCESS)
 8003e1a:	4b59      	ldr	r3, [pc, #356]	@ (8003f80 <Timer_Interrupt_Proc+0x268>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10c      	bne.n	8003e3c <Timer_Interrupt_Proc+0x124>
        {
            // 마스터 모드, 모기체
            if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == 0)
 8003e22:	4b5f      	ldr	r3, [pc, #380]	@ (8003fa0 <Timer_Interrupt_Proc+0x288>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <Timer_Interrupt_Proc+0x11e>
            {
                // IDR 레지스터의 해당 핀이 0이면 (접지되어 있으면) MODE_MASTER
                g_nMode = MODE_MASTER;
 8003e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f98 <Timer_Interrupt_Proc+0x280>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e002      	b.n	8003e3c <Timer_Interrupt_Proc+0x124>
                // TX_LED_Off();  // LED OFF
            }
            else    // 슬레이브 모드, 자기체
            {
                // 핀이 1이면 (풀업되어 있으면) 다른 모드로…
                g_nMode = MODE_SLAVE;  // 예시
 8003e36:	4b58      	ldr	r3, [pc, #352]	@ (8003f98 <Timer_Interrupt_Proc+0x280>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]


        // 부팅 성공 이후부터 상태 LED표시 
        // 마스터 두번씩 깜빡임
        // 슬레이브 세번씩 깜빡임
        if (g_nBoot_Status == BOOT_SUCCESS)
 8003e3c:	4b50      	ldr	r3, [pc, #320]	@ (8003f80 <Timer_Interrupt_Proc+0x268>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 808f 	bne.w	8003f64 <Timer_Interrupt_Proc+0x24c>
        {
            if (g_nMode == MODE_MASTER)
 8003e46:	4b54      	ldr	r3, [pc, #336]	@ (8003f98 <Timer_Interrupt_Proc+0x280>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d132      	bne.n	8003eb4 <Timer_Interrupt_Proc+0x19c>
            {
                // 마스터 모드일 때 LED 2번 깜빡임
                if (g_nRX_Led_tick_1 == rxTimeVal_master)
 8003e4e:	4b49      	ldr	r3, [pc, #292]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d102      	bne.n	8003e60 <Timer_Interrupt_Proc+0x148>
                {
                    RX_LED_On();
 8003e5a:	f7fe fd63 	bl	8002924 <RX_LED_On>
 8003e5e:	e029      	b.n	8003eb4 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*2)
 8003e60:	4b44      	ldr	r3, [pc, #272]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d102      	bne.n	8003e74 <Timer_Interrupt_Proc+0x15c>
                {
                    RX_LED_Off();
 8003e6e:	f7fe fd67 	bl	8002940 <RX_LED_Off>
 8003e72:	e01f      	b.n	8003eb4 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*3)
 8003e74:	4b3f      	ldr	r3, [pc, #252]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	4299      	cmp	r1, r3
 8003e84:	d102      	bne.n	8003e8c <Timer_Interrupt_Proc+0x174>
                {
                    RX_LED_On();
 8003e86:	f7fe fd4d 	bl	8002924 <RX_LED_On>
 8003e8a:	e013      	b.n	8003eb4 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*4)
 8003e8c:	4b39      	ldr	r3, [pc, #228]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d102      	bne.n	8003ea0 <Timer_Interrupt_Proc+0x188>
                {
                    RX_LED_Off();
 8003e9a:	f7fe fd51 	bl	8002940 <RX_LED_Off>
 8003e9e:	e009      	b.n	8003eb4 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 >= 1000)
 8003ea0:	4b34      	ldr	r3, [pc, #208]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ea8:	d304      	bcc.n	8003eb4 <Timer_Interrupt_Proc+0x19c>
                {
                    RX_LED_Off();
 8003eaa:	f7fe fd49 	bl	8002940 <RX_LED_Off>
                    g_nRX_Led_tick_1 = 0; // 카운터 초기화
 8003eae:	4b31      	ldr	r3, [pc, #196]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	801a      	strh	r2, [r3, #0]
                }
            }
            if (g_nMode == MODE_SLAVE)
 8003eb4:	4b38      	ldr	r3, [pc, #224]	@ (8003f98 <Timer_Interrupt_Proc+0x280>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d153      	bne.n	8003f64 <Timer_Interrupt_Proc+0x24c>
            {
                // 슬레이브 모드일 때 LED 3번 깜빡임
                if (g_nRX_Led_tick_1 == rxTimeVal_slave)
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d102      	bne.n	8003ece <Timer_Interrupt_Proc+0x1b6>
                {
                    RX_LED_On();
 8003ec8:	f7fe fd2c 	bl	8002924 <RX_LED_On>
        STATUS_LED_On();
    }


    
}
 8003ecc:	e04a      	b.n	8003f64 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*2)
 8003ece:	4b29      	ldr	r3, [pc, #164]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d102      	bne.n	8003ee2 <Timer_Interrupt_Proc+0x1ca>
                    RX_LED_Off();
 8003edc:	f7fe fd30 	bl	8002940 <RX_LED_Off>
}
 8003ee0:	e040      	b.n	8003f64 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*3)
 8003ee2:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	4299      	cmp	r1, r3
 8003ef2:	d102      	bne.n	8003efa <Timer_Interrupt_Proc+0x1e2>
                    RX_LED_On();
 8003ef4:	f7fe fd16 	bl	8002924 <RX_LED_On>
}
 8003ef8:	e034      	b.n	8003f64 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*4)
 8003efa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d102      	bne.n	8003f0e <Timer_Interrupt_Proc+0x1f6>
                    RX_LED_Off();
 8003f08:	f7fe fd1a 	bl	8002940 <RX_LED_Off>
}
 8003f0c:	e02a      	b.n	8003f64 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*5)
 8003f0e:	4b19      	ldr	r3, [pc, #100]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4299      	cmp	r1, r3
 8003f1e:	d102      	bne.n	8003f26 <Timer_Interrupt_Proc+0x20e>
                    RX_LED_On();
 8003f20:	f7fe fd00 	bl	8002924 <RX_LED_On>
}
 8003f24:	e01e      	b.n	8003f64 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*6)
 8003f26:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4299      	cmp	r1, r3
 8003f38:	d102      	bne.n	8003f40 <Timer_Interrupt_Proc+0x228>
                    RX_LED_Off();
 8003f3a:	f7fe fd01 	bl	8002940 <RX_LED_Off>
}
 8003f3e:	e011      	b.n	8003f64 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 >= 1500)
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	f240 52db 	movw	r2, #1499	@ 0x5db
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d90b      	bls.n	8003f64 <Timer_Interrupt_Proc+0x24c>
                    RX_LED_Off();
 8003f4c:	f7fe fcf8 	bl	8002940 <RX_LED_Off>
                    g_nRX_Led_tick_1 = 0; // 카운터 초기화
 8003f50:	4b08      	ldr	r3, [pc, #32]	@ (8003f74 <Timer_Interrupt_Proc+0x25c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	801a      	strh	r2, [r3, #0]
}
 8003f56:	e005      	b.n	8003f64 <Timer_Interrupt_Proc+0x24c>
        RX_LED_On();
 8003f58:	f7fe fce4 	bl	8002924 <RX_LED_On>
        TX_LED_On();
 8003f5c:	f7fe fcfe 	bl	800295c <TX_LED_On>
        STATUS_LED_On();
 8003f60:	f7fe fd0a 	bl	8002978 <STATUS_LED_On>
}
 8003f64:	bf00      	nop
 8003f66:	3750      	adds	r7, #80	@ 0x50
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6c:	20001000 	.word	0x20001000
 8003f70:	20001002 	.word	0x20001002
 8003f74:	20001004 	.word	0x20001004
 8003f78:	20001008 	.word	0x20001008
 8003f7c:	20001014 	.word	0x20001014
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000fe8 	.word	0x20000fe8
 8003f88:	20000d84 	.word	0x20000d84
 8003f8c:	20000ffc 	.word	0x20000ffc
 8003f90:	08010364 	.word	0x08010364
 8003f94:	20000f10 	.word	0x20000f10
 8003f98:	2000100c 	.word	0x2000100c
 8003f9c:	20001006 	.word	0x20001006
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <Main_System>:
// ─────────────────────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────────────────────

void Main_System(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
    switch (g_nMode)
 8003fa8:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <Main_System+0x54>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	d81f      	bhi.n	8003ff0 <Main_System+0x4c>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <Main_System+0x14>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08003fdf 	.word	0x08003fdf
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08003fe5 	.word	0x08003fe5
 8003fd4:	08003feb 	.word	0x08003feb
    {
    case MODE_MASTER:
        Master_Proc();
 8003fd8:	f7ff f99c 	bl	8003314 <Master_Proc>
        break;
 8003fdc:	e009      	b.n	8003ff2 <Main_System+0x4e>
    case MODE_SLAVE:
        break;
    case MODE_AP:
        AP_Mode_Proc();
 8003fde:	f7ff f8e1 	bl	80031a4 <AP_Mode_Proc>
        break;
 8003fe2:	e006      	b.n	8003ff2 <Main_System+0x4e>
    case MODE_DEBUG:
        DEBUG_Proc();
 8003fe4:	f7ff f9a2 	bl	800332c <DEBUG_Proc>
        break;
 8003fe8:	e003      	b.n	8003ff2 <Main_System+0x4e>
    case MODE_TEST:
        // 테스트 모드 동작
        Test_Proc();
 8003fea:	f7ff fb69 	bl	80036c0 <Test_Proc>
        break;
 8003fee:	e000      	b.n	8003ff2 <Main_System+0x4e>
    
    default:
        break;
 8003ff0:	bf00      	nop
    }
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2000100c 	.word	0x2000100c

08003ffc <Oper_CCM_Init>:
//                                                       
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// CCM 영역 초기화 함수
void Oper_CCM_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
    UTC_Time_Init();      // UTC 시간 초기화
 8004000:	f7fc ff2a 	bl	8000e58 <UTC_Time_Init>
    WiFi_Info_Init();     // WiFi 정보 초기화
 8004004:	f7fc ff34 	bl	8000e70 <WiFi_Info_Init>
    SERVER_API_Init();    // 서버 API 초기화
 8004008:	f000 fe30 	bl	8004c6c <SERVER_API_Init>
    DEVICE_Init();        // 디바이스 초기화
 800400c:	f7fc fe3a 	bl	8000c84 <DEVICE_Init>
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}

08004014 <Oper_Init>:
//                                                                                                                         
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 기본 초기화
void Oper_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
    FRAM_Init(); // FRAM 초기화
 8004018:	f7fc fe1e 	bl	8000c58 <FRAM_Init>
    // 부팅 상태 초기화
    g_nBoot_Status = BOOT_IN_PROGRESS; // 부팅 상태를 부팅 중으로 설정
 800401c:	4b04      	ldr	r3, [pc, #16]	@ (8004030 <Oper_Init+0x1c>)
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]

    LED_Init(); // LED 초기화
 8004022:	f7fe fbfd 	bl	8002820 <LED_Init>
    SIM_M_PWR_KEY_Init(); // SIM 모듈 초기화
 8004026:	f000 ff65 	bl	8004ef4 <SIM_M_PWR_KEY_Init>
    // SIM_USIM_RESET_Init(); // SIM 모듈 리셋 핀 초기화

    //SIM_USIM_RESET_Clear(); // SIM 모듈 리셋 핀 초기화
    // SIM_USIM_RESET_Set(); // SIM 모듈 리셋 핀 설정
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000000 	.word	0x20000000

08004034 <Oper_Boot>:
// 4. UTC시간 서버 연결
// 5. RTC 시간 동기화
// 6. 토큰 요청 및 반환
// 7. 기기 MAC 주소 조회 (기기 고유값)
void Oper_Boot(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
    int bootLoop = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
    int step = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
    int result = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
    const char *token;
    const char *macAddress;

    while (bootLoop)
 8004046:	e1fa      	b.n	800443e <Oper_Boot+0x40a>
    {
        switch (step)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b08      	cmp	r3, #8
 800404c:	f200 81f6 	bhi.w	800443c <Oper_Boot+0x408>
 8004050:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <Oper_Boot+0x24>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800407d 	.word	0x0800407d
 800405c:	080040b1 	.word	0x080040b1
 8004060:	080040e5 	.word	0x080040e5
 8004064:	08004119 	.word	0x08004119
 8004068:	080041d1 	.word	0x080041d1
 800406c:	08004229 	.word	0x08004229
 8004070:	08004277 	.word	0x08004277
 8004074:	080042cb 	.word	0x080042cb
 8004078:	080043b9 	.word	0x080043b9
        {
        case 0:
            result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 800407c:	f000 fb94 	bl	80047a8 <SD_Card_Boot>
 8004080:	60f8      	str	r0, [r7, #12]
            
            SD_Card_Log("SD Card Boot...\n");
 8004082:	48a7      	ldr	r0, [pc, #668]	@ (8004320 <Oper_Boot+0x2ec>)
 8004084:	f000 fd48 	bl	8004b18 <SD_Card_Log>
            
            if (result == SD_OK)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <Oper_Boot+0x68>
            {
                SD_Card_Log("SD Card Booted Successfully!\n");
 800408e:	48a5      	ldr	r0, [pc, #660]	@ (8004324 <Oper_Boot+0x2f0>)
 8004090:	f000 fd42 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	3301      	adds	r3, #1
 8004098:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // SD 카드 부팅 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 800409a:	e1d0      	b.n	800443e <Oper_Boot+0x40a>
                SD_Card_Log("SD Card Boot Failed!\n");
 800409c:	48a2      	ldr	r0, [pc, #648]	@ (8004328 <Oper_Boot+0x2f4>)
 800409e:	f000 fd3b 	bl	8004b18 <SD_Card_Log>
                SD_Card_Log("again...\n");
 80040a2:	48a2      	ldr	r0, [pc, #648]	@ (800432c <Oper_Boot+0x2f8>)
 80040a4:	f000 fd38 	bl	8004b18 <SD_Card_Log>
                Error_Proc(1);
 80040a8:	2001      	movs	r0, #1
 80040aa:	f7ff f903 	bl	80032b4 <Error_Proc>
            break;
 80040ae:	e1c6      	b.n	800443e <Oper_Boot+0x40a>
            // ====================================================================
        case 1:
            result = ESP_AT_Boot(); // ESP32 AT 테스트
 80040b0:	f7fc feea 	bl	8000e88 <ESP_AT_Boot>
 80040b4:	60f8      	str	r0, [r7, #12]

            SD_Card_Log("ESP32 AT Boot...\n");
 80040b6:	489e      	ldr	r0, [pc, #632]	@ (8004330 <Oper_Boot+0x2fc>)
 80040b8:	f000 fd2e 	bl	8004b18 <SD_Card_Log>

            if (result == AT_OK)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <Oper_Boot+0x9c>
            {
                SD_Card_Log("ESP32 AT Booted Successfully!\n");
 80040c2:	489c      	ldr	r0, [pc, #624]	@ (8004334 <Oper_Boot+0x300>)
 80040c4:	f000 fd28 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3301      	adds	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // ESP32 AT 부팅 실패 시 에러 처리
                //Error_Handler();
                Error_Proc(1);
            }
            break;
 80040ce:	e1b6      	b.n	800443e <Oper_Boot+0x40a>
                SD_Card_Log("ESP32 AT Boot Failed!\n");
 80040d0:	4899      	ldr	r0, [pc, #612]	@ (8004338 <Oper_Boot+0x304>)
 80040d2:	f000 fd21 	bl	8004b18 <SD_Card_Log>
                SD_Card_Log("again...\n");
 80040d6:	4895      	ldr	r0, [pc, #596]	@ (800432c <Oper_Boot+0x2f8>)
 80040d8:	f000 fd1e 	bl	8004b18 <SD_Card_Log>
                Error_Proc(1);
 80040dc:	2001      	movs	r0, #1
 80040de:	f7ff f8e9 	bl	80032b4 <Error_Proc>
            break;
 80040e2:	e1ac      	b.n	800443e <Oper_Boot+0x40a>

        case 2:
            result = ESP_AT_Get_Firmware_Version(); // ESP32 AT 명령어로 펌웨어 버전 조회
 80040e4:	f7fd fa14 	bl	8001510 <ESP_AT_Get_Firmware_Version>
 80040e8:	60f8      	str	r0, [r7, #12]
            
            SD_Card_Log("ESP32 AT Firmware Version Retrieval...\n");
 80040ea:	4894      	ldr	r0, [pc, #592]	@ (800433c <Oper_Boot+0x308>)
 80040ec:	f000 fd14 	bl	8004b18 <SD_Card_Log>

            if (result == AT_OK)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <Oper_Boot+0xd0>
            {
                SD_Card_Log("ESP32 AT Firmware Version Retrieved Successfully!\n");
 80040f6:	4892      	ldr	r0, [pc, #584]	@ (8004340 <Oper_Boot+0x30c>)
 80040f8:	f000 fd0e 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3301      	adds	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // ESP32 AT 펌웨어 버전 조회 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 8004102:	e19c      	b.n	800443e <Oper_Boot+0x40a>
                SD_Card_Log("ESP32 AT Firmware Version Retrieval Failed!\n");
 8004104:	488f      	ldr	r0, [pc, #572]	@ (8004344 <Oper_Boot+0x310>)
 8004106:	f000 fd07 	bl	8004b18 <SD_Card_Log>
                SD_Card_Log("again...\n");
 800410a:	4888      	ldr	r0, [pc, #544]	@ (800432c <Oper_Boot+0x2f8>)
 800410c:	f000 fd04 	bl	8004b18 <SD_Card_Log>
                Error_Proc(1);
 8004110:	2001      	movs	r0, #1
 8004112:	f7ff f8cf 	bl	80032b4 <Error_Proc>
            break;
 8004116:	e192      	b.n	800443e <Oper_Boot+0x40a>
            // ====================================================================
        case 3:
            // 현재 모드가 AP 모드인지 확인
            if (g_nMode == MODE_AP) // AP 모드인 경우
 8004118:	4b8b      	ldr	r3, [pc, #556]	@ (8004348 <Oper_Boot+0x314>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d107      	bne.n	8004130 <Oper_Boot+0xfc>
            {
                SD_Card_Log("AP Mode Detected. Skipping BOOT Configuration...\n");
 8004120:	488a      	ldr	r0, [pc, #552]	@ (800434c <Oper_Boot+0x318>)
 8004122:	f000 fcf9 	bl	8004b18 <SD_Card_Log>
                step = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
                bootLoop = 0; // 부팅 루프 종료
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
                break; // WiFi 설정 단계 건너뛰기
 800412e:	e186      	b.n	800443e <Oper_Boot+0x40a>
            }
            
            // Save_Wifi_Status_FRAM_Dummy(); // wifi 상태 초기화
            Load_Wifi_Status_FRAM(); // FRAM에서 WiFi 상태 로드
 8004130:	f7fc fb78 	bl	8000824 <Load_Wifi_Status_FRAM>

            g_nWifi_Status = DEVICE_WIFI_DISCONNECTED; // WiFi 연결 상태 초기화
 8004134:	4b86      	ldr	r3, [pc, #536]	@ (8004350 <Oper_Boot+0x31c>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("WiFi Configuration...\n");
 800413a:	4886      	ldr	r0, [pc, #536]	@ (8004354 <Oper_Boot+0x320>)
 800413c:	f000 fcec 	bl	8004b18 <SD_Card_Log>

            if (g_nWifi_Status == DEVICE_WIFI_DISCONNECTED) // WiFi가 연결되지 않은 경우
 8004140:	4b83      	ldr	r3, [pc, #524]	@ (8004350 <Oper_Boot+0x31c>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11c      	bne.n	8004182 <Oper_Boot+0x14e>
            {
                // ESP32 AT 명령어를 통해 현재 WiFi 모드 조회
                ESP_AT_Send_Command_Sync("AT+CWMODE?\r\n");
 8004148:	4883      	ldr	r0, [pc, #524]	@ (8004358 <Oper_Boot+0x324>)
 800414a:	f7fc ff59 	bl	8001000 <ESP_AT_Send_Command_Sync>

                // ESP32 AT 명령어를 통해 WiFi 모드 설정 스테이션 모드 + AP모드
                ESP_AT_Send_Command_Sync("AT+CWMODE=3\r\n");
 800414e:	4883      	ldr	r0, [pc, #524]	@ (800435c <Oper_Boot+0x328>)
 8004150:	f7fc ff56 	bl	8001000 <ESP_AT_Send_Command_Sync>
                // 0 = OPEN
                // 1 = WEP
                // 2 = WPA_PSK
                // 3 = WPA2_PSK
                // 4 = WPA_WPA2_PSK
                ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT\",\"\",5,0\r\n");
 8004154:	4882      	ldr	r0, [pc, #520]	@ (8004360 <Oper_Boot+0x32c>)
 8004156:	f7fc ff53 	bl	8001000 <ESP_AT_Send_Command_Sync>

                // 연결 가능한 WiFi AP 목록 조회
                ESP_AT_Send_Command_Sync("AT+CWLAP\r\n");
 800415a:	4882      	ldr	r0, [pc, #520]	@ (8004364 <Oper_Boot+0x330>)
 800415c:	f7fc ff50 	bl	8001000 <ESP_AT_Send_Command_Sync>

                result = ESP_AT_Send_WiFi_Config(); // WiFi 설정 전송
 8004160:	f7fc fed4 	bl	8000f0c <ESP_AT_Send_WiFi_Config>
 8004164:	60f8      	str	r0, [r7, #12]

                if (result == AT_OK) // WiFi 설정 전송 성공
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <Oper_Boot+0x140>
                {
                    g_nWifi_Status = DEVICE_WIFI_CONNECTED; // WiFi 연결 상태 업데이트
 800416c:	4b78      	ldr	r3, [pc, #480]	@ (8004350 <Oper_Boot+0x31c>)
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e002      	b.n	800417a <Oper_Boot+0x146>
                }
                else
                {
                    g_nWifi_Status = DEVICE_WIFI_DISCONNECTED; // WiFi 연결 상태 업데이트 실패
 8004174:	4b76      	ldr	r3, [pc, #472]	@ (8004350 <Oper_Boot+0x31c>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
                }
            
                Save_Wifi_Status_FRAM(); // FRAM에 WiFi 상태 저장
 800417a:	f7fc fb6f 	bl	800085c <Save_Wifi_Status_FRAM>

                result = AT_OK; // WiFi 설정 성공
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
            }
            if (g_nWifi_Status == DEVICE_WIFI_CONNECTED) // WiFi가 연결된 경우
 8004182:	4b73      	ldr	r3, [pc, #460]	@ (8004350 <Oper_Boot+0x31c>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <Oper_Boot+0x162>
            {
                // ESP32 AT 명령어를 통해 현재 WiFi IP 주소 조회
                ESP_AT_Send_Command_Sync("AT+CIFSR\r\n");
 800418a:	4877      	ldr	r0, [pc, #476]	@ (8004368 <Oper_Boot+0x334>)
 800418c:	f7fc ff38 	bl	8001000 <ESP_AT_Send_Command_Sync>
                result = AT_OK; // WiFi 연결 성공
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e001      	b.n	800419a <Oper_Boot+0x166>
            } 
            else // WiFi 연결 실패 시
            {
                result = AT_ERROR; // WiFi 연결 실패
 8004196:	2301      	movs	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
            }

            if (result == AT_OK)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10d      	bne.n	80041bc <Oper_Boot+0x188>
            {
                SD_Card_Log("WiFi Configuration Sent Successfully!\n");
 80041a0:	4872      	ldr	r0, [pc, #456]	@ (800436c <Oper_Boot+0x338>)
 80041a2:	f000 fcb9 	bl	8004b18 <SD_Card_Log>

                HAL_UART_Transmit(&huart1, (uint8_t*)"WiFi Configuration Sent Successfully!\n", 40, HAL_MAX_DELAY);
 80041a6:	f04f 33ff 	mov.w	r3, #4294967295
 80041aa:	2228      	movs	r2, #40	@ 0x28
 80041ac:	496f      	ldr	r1, [pc, #444]	@ (800436c <Oper_Boot+0x338>)
 80041ae:	4870      	ldr	r0, [pc, #448]	@ (8004370 <Oper_Boot+0x33c>)
 80041b0:	f005 f868 	bl	8009284 <HAL_UART_Transmit>
                
                step++; // 다음 단계로 이동
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3301      	adds	r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // WiFi 설정 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 80041ba:	e140      	b.n	800443e <Oper_Boot+0x40a>
                SD_Card_Log("WiFi Configuration Failed!\n");
 80041bc:	486d      	ldr	r0, [pc, #436]	@ (8004374 <Oper_Boot+0x340>)
 80041be:	f000 fcab 	bl	8004b18 <SD_Card_Log>
                SD_Card_Log("again...\n");
 80041c2:	485a      	ldr	r0, [pc, #360]	@ (800432c <Oper_Boot+0x2f8>)
 80041c4:	f000 fca8 	bl	8004b18 <SD_Card_Log>
                Error_Proc(1);
 80041c8:	2001      	movs	r0, #1
 80041ca:	f7ff f873 	bl	80032b4 <Error_Proc>
            break;
 80041ce:	e136      	b.n	800443e <Oper_Boot+0x40a>
            // ====================================================================
        case 4:
            // Save_TimeStatus_FRAM_Dummy();  // 시간 상태 초기화
            // SNTP 서버 연결 및 시간 구조 저장
            Load_TimeStatus_FRAM(); // FRAM에서 시간 동기화 상태 로드
 80041d0:	f7fc faf8 	bl	80007c4 <Load_TimeStatus_FRAM>

            g_nTime_Status = DEVICE_TIME_NOT_SYNCED; // 시간 동기화 상태 초기화
 80041d4:	4b68      	ldr	r3, [pc, #416]	@ (8004378 <Oper_Boot+0x344>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("SNTP Server Connection...\n");
 80041da:	4868      	ldr	r0, [pc, #416]	@ (800437c <Oper_Boot+0x348>)
 80041dc:	f000 fc9c 	bl	8004b18 <SD_Card_Log>

            if (g_nTime_Status == DEVICE_TIME_NOT_SYNCED) // 시간 동기화가 안 된 경우
 80041e0:	4b65      	ldr	r3, [pc, #404]	@ (8004378 <Oper_Boot+0x344>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d118      	bne.n	800421a <Oper_Boot+0x1e6>
            {
                // 서버 연결 후 시간 구조 저장 
                result = ESP_AT_Set_SNTP_Time(AT_SNTP_UTC_OFFSET);
 80041e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80041ec:	f7fd fae2 	bl	80017b4 <ESP_AT_Set_SNTP_Time>
 80041f0:	60f8      	str	r0, [r7, #12]

                if (result == AT_OK) // SNTP 서버 연결 성공
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <Oper_Boot+0x1d2>
                {
                    SD_Card_Log("SNTP Server Connected Successfully!\n");
 80041f8:	4861      	ldr	r0, [pc, #388]	@ (8004380 <Oper_Boot+0x34c>)
 80041fa:	f000 fc8d 	bl	8004b18 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
            else // 시간 동기화가 이미 된 경우
            {
                SD_Card_Log("Time Already Synced!\n");
                step++; // 다음 단계로 이동
            }
            break;
 8004204:	e11b      	b.n	800443e <Oper_Boot+0x40a>
                    SD_Card_Log("SNTP Server Connection Failed!\n");
 8004206:	485f      	ldr	r0, [pc, #380]	@ (8004384 <Oper_Boot+0x350>)
 8004208:	f000 fc86 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 800420c:	4847      	ldr	r0, [pc, #284]	@ (800432c <Oper_Boot+0x2f8>)
 800420e:	f000 fc83 	bl	8004b18 <SD_Card_Log>
                    Error_Proc(1);
 8004212:	2001      	movs	r0, #1
 8004214:	f7ff f84e 	bl	80032b4 <Error_Proc>
            break;
 8004218:	e111      	b.n	800443e <Oper_Boot+0x40a>
                SD_Card_Log("Time Already Synced!\n");
 800421a:	485b      	ldr	r0, [pc, #364]	@ (8004388 <Oper_Boot+0x354>)
 800421c:	f000 fc7c 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3301      	adds	r3, #1
 8004224:	613b      	str	r3, [r7, #16]
            break;
 8004226:	e10a      	b.n	800443e <Oper_Boot+0x40a>
            // ====================================================================
        case 5:
            // 저장된 시간 구조 RTC 동기화
            if (g_nTime_Status == DEVICE_TIME_NOT_SYNCED) // 시간 동기화가 안 된 경우
 8004228:	4b53      	ldr	r3, [pc, #332]	@ (8004378 <Oper_Boot+0x344>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11b      	bne.n	8004268 <Oper_Boot+0x234>
            {
                result = RTC_Set_UTC(); // RTC 초기화 및 UTC 시간 설정
 8004230:	f000 f9aa 	bl	8004588 <RTC_Set_UTC>
 8004234:	60f8      	str	r0, [r7, #12]
                
                g_nTime_Status = DEVICE_TIME_SYNCED; // 시간 동기화 상태 업데이트
 8004236:	4b50      	ldr	r3, [pc, #320]	@ (8004378 <Oper_Boot+0x344>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]

                Save_TimeStatus_FRAM(); // FRAM에 시간 동기화 상태 저장
 800423c:	f7fc fade 	bl	80007fc <Save_TimeStatus_FRAM>
                
                if (result == RTC_OK) // RTC 설정 성공
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <Oper_Boot+0x220>
                {
                    SD_Card_Log("RTC Set to UTC Successfully!\n");
 8004246:	4851      	ldr	r0, [pc, #324]	@ (800438c <Oper_Boot+0x358>)
 8004248:	f000 fc66 	bl	8004b18 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3301      	adds	r3, #1
 8004250:	613b      	str	r3, [r7, #16]
            else
            {
                SD_Card_Log("RTC Already Synced!\n");
                step++; // 다음 단계로 이동
            }
            break;
 8004252:	e0f4      	b.n	800443e <Oper_Boot+0x40a>
                    SD_Card_Log("RTC Set to UTC Failed!\n");
 8004254:	484e      	ldr	r0, [pc, #312]	@ (8004390 <Oper_Boot+0x35c>)
 8004256:	f000 fc5f 	bl	8004b18 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 800425a:	4834      	ldr	r0, [pc, #208]	@ (800432c <Oper_Boot+0x2f8>)
 800425c:	f000 fc5c 	bl	8004b18 <SD_Card_Log>
                    Error_Proc(1);
 8004260:	2001      	movs	r0, #1
 8004262:	f7ff f827 	bl	80032b4 <Error_Proc>
            break;
 8004266:	e0ea      	b.n	800443e <Oper_Boot+0x40a>
                SD_Card_Log("RTC Already Synced!\n");
 8004268:	484a      	ldr	r0, [pc, #296]	@ (8004394 <Oper_Boot+0x360>)
 800426a:	f000 fc55 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3301      	adds	r3, #1
 8004272:	613b      	str	r3, [r7, #16]
            break;
 8004274:	e0e3      	b.n	800443e <Oper_Boot+0x40a>

        case 6:
            // 토큰 상태 로드
            Load_Token_Status_FRAM(); // FRAM에서 토큰 상태 로드
 8004276:	f7fc fba1 	bl	80009bc <Load_Token_Status_FRAM>

            g_nToken_Status = DEVICE_TOKEN_NOT_SET;
 800427a:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <Oper_Boot+0x364>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("Token Configuration...\n");
 8004280:	4846      	ldr	r0, [pc, #280]	@ (800439c <Oper_Boot+0x368>)
 8004282:	f000 fc49 	bl	8004b18 <SD_Card_Log>

            if (g_nToken_Status == DEVICE_TOKEN_NOT_SET) // 토큰이 설정되지 않은 경우
 8004286:	4b44      	ldr	r3, [pc, #272]	@ (8004398 <Oper_Boot+0x364>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d114      	bne.n	80042b8 <Oper_Boot+0x284>
            {
                token = ESP_AT_Get_Token(); // ESP32 AT 명령어를 통해 토큰 조회
 800428e:	f7fd f983 	bl	8001598 <ESP_AT_Get_Token>
 8004292:	6078      	str	r0, [r7, #4]

                SERVER_API_Set_Token(token); // 서버 API 토큰 저장 함수 호출
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fcf5 	bl	8004c84 <SERVER_API_Set_Token>

                // 메모리에 토큰 저장
                Save_Token_FRAM(token); // FRAM에 토큰 저장
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fc fbbe 	bl	8000a1c <Save_Token_FRAM>

                g_nToken_Status = DEVICE_TOKEN_SET; // 토큰 상태 업데이트
 80042a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <Oper_Boot+0x364>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
                Save_Token_Status_FRAM(); // FRAM에 토큰 상태 저장
 80042a6:	f7fc fba5 	bl	80009f4 <Save_Token_Status_FRAM>

                SD_Card_Log("Token Set Successfully!\n");
 80042aa:	483d      	ldr	r0, [pc, #244]	@ (80043a0 <Oper_Boot+0x36c>)
 80042ac:	f000 fc34 	bl	8004b18 <SD_Card_Log>

                step++; // 다음 단계로 이동
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3301      	adds	r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
                SD_Card_Log("Token Already Set!\n");

                // 다음 스텝
                step++; // 다음 단계로 이동
            }
            break;
 80042b6:	e0c2      	b.n	800443e <Oper_Boot+0x40a>
                Load_Token_FRAM(); // FRAM에서 토큰 로드
 80042b8:	f7fc fbf0 	bl	8000a9c <Load_Token_FRAM>
                SD_Card_Log("Token Already Set!\n");
 80042bc:	4839      	ldr	r0, [pc, #228]	@ (80043a4 <Oper_Boot+0x370>)
 80042be:	f000 fc2b 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
            break;
 80042c8:	e0b9      	b.n	800443e <Oper_Boot+0x40a>
        case 7:
            // MAC 주소 상태 로드
            Load_MAC_Status_FRAM(); // FRAM에서 MAC 주소 상태 로드
 80042ca:	f7fc fc25 	bl	8000b18 <Load_MAC_Status_FRAM>

            g_nMac_Status = DEVICE_MAC_NOT_SET;
 80042ce:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <Oper_Boot+0x374>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("MAC Address Configuration...\n");
 80042d4:	4835      	ldr	r0, [pc, #212]	@ (80043ac <Oper_Boot+0x378>)
 80042d6:	f000 fc1f 	bl	8004b18 <SD_Card_Log>

            if (g_nMac_Status == DEVICE_MAC_NOT_SET) // MAC 주소가 설정되지 않은 경우
 80042da:	4b33      	ldr	r3, [pc, #204]	@ (80043a8 <Oper_Boot+0x374>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d114      	bne.n	800430c <Oper_Boot+0x2d8>
            {
                macAddress = ESP_AT_Get_MAC_Address(); // ESP32 AT 명령어를 통해 MAC 주소 조회
 80042e2:	f7fd f9e1 	bl	80016a8 <ESP_AT_Get_MAC_Address>
 80042e6:	60b8      	str	r0, [r7, #8]

                // MAC 주소 저장
                SERVER_API_Set_MAC_Address(macAddress);  // 서버 API MAC 주소 저장 함수 호출
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 fce7 	bl	8004cbc <SERVER_API_Set_MAC_Address>

                // 메모리에 MAC 주소 저장
                Save_MAC_FRAM(macAddress); // FRAM에 MAC 주소 저장
 80042ee:	68b8      	ldr	r0, [r7, #8]
 80042f0:	f7fc fc42 	bl	8000b78 <Save_MAC_FRAM>
                
                g_nMac_Status = DEVICE_MAC_SET; // MAC 주소 상태 업데이트
 80042f4:	4b2c      	ldr	r3, [pc, #176]	@ (80043a8 <Oper_Boot+0x374>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
                Save_MAC_Status_FRAM(); // FRAM에 MAC 주소 상태 저장
 80042fa:	f7fc fc29 	bl	8000b50 <Save_MAC_Status_FRAM>

                SD_Card_Log("MAC Address Set Successfully!\n");
 80042fe:	482c      	ldr	r0, [pc, #176]	@ (80043b0 <Oper_Boot+0x37c>)
 8004300:	f000 fc0a 	bl	8004b18 <SD_Card_Log>

                step++; // 다음 단계로 이동
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3301      	adds	r3, #1
 8004308:	613b      	str	r3, [r7, #16]

                SD_Card_Log("MAC Address Already Set!\n");

                step++; // 다음 단계로 이동
            }
            break;
 800430a:	e098      	b.n	800443e <Oper_Boot+0x40a>
                Load_MAC_FRAM(); // FRAM에서 MAC 주소 로드
 800430c:	f7fc fc60 	bl	8000bd0 <Load_MAC_FRAM>
                SD_Card_Log("MAC Address Already Set!\n");
 8004310:	4828      	ldr	r0, [pc, #160]	@ (80043b4 <Oper_Boot+0x380>)
 8004312:	f000 fc01 	bl	8004b18 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3301      	adds	r3, #1
 800431a:	613b      	str	r3, [r7, #16]
            break;
 800431c:	e08f      	b.n	800443e <Oper_Boot+0x40a>
 800431e:	bf00      	nop
 8004320:	08010388 	.word	0x08010388
 8004324:	0801039c 	.word	0x0801039c
 8004328:	080103bc 	.word	0x080103bc
 800432c:	080103d4 	.word	0x080103d4
 8004330:	080103e0 	.word	0x080103e0
 8004334:	080103f4 	.word	0x080103f4
 8004338:	08010414 	.word	0x08010414
 800433c:	0801042c 	.word	0x0801042c
 8004340:	08010454 	.word	0x08010454
 8004344:	08010488 	.word	0x08010488
 8004348:	2000100c 	.word	0x2000100c
 800434c:	080104b8 	.word	0x080104b8
 8004350:	2000100d 	.word	0x2000100d
 8004354:	080104ec 	.word	0x080104ec
 8004358:	08010504 	.word	0x08010504
 800435c:	08010514 	.word	0x08010514
 8004360:	08010524 	.word	0x08010524
 8004364:	08010540 	.word	0x08010540
 8004368:	0801054c 	.word	0x0801054c
 800436c:	08010558 	.word	0x08010558
 8004370:	20000f10 	.word	0x20000f10
 8004374:	08010580 	.word	0x08010580
 8004378:	2000100e 	.word	0x2000100e
 800437c:	0801059c 	.word	0x0801059c
 8004380:	080105b8 	.word	0x080105b8
 8004384:	080105e0 	.word	0x080105e0
 8004388:	08010600 	.word	0x08010600
 800438c:	08010618 	.word	0x08010618
 8004390:	08010638 	.word	0x08010638
 8004394:	08010650 	.word	0x08010650
 8004398:	2000100f 	.word	0x2000100f
 800439c:	08010668 	.word	0x08010668
 80043a0:	08010680 	.word	0x08010680
 80043a4:	0801069c 	.word	0x0801069c
 80043a8:	20001011 	.word	0x20001011
 80043ac:	080106b0 	.word	0x080106b0
 80043b0:	080106d0 	.word	0x080106d0
 80043b4:	080106f0 	.word	0x080106f0
        case 8:
            // 모든 초기화가 완료된 후 최종 상태 로그
            SD_Card_Log("Device Booted Successfully!\n");
 80043b8:	4825      	ldr	r0, [pc, #148]	@ (8004450 <Oper_Boot+0x41c>)
 80043ba:	f000 fbad 	bl	8004b18 <SD_Card_Log>
            
            // 부팅 최종 시간 SD카드 기록
            SD_Card_Log("Current Boot Time: ");
 80043be:	4825      	ldr	r0, [pc, #148]	@ (8004454 <Oper_Boot+0x420>)
 80043c0:	f000 fbaa 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Year_String());
 80043c4:	f000 f954 	bl	8004670 <RTC_Get_Synced_Year_String>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fba4 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log("-");
 80043d0:	4821      	ldr	r0, [pc, #132]	@ (8004458 <Oper_Boot+0x424>)
 80043d2:	f000 fba1 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Month_String());
 80043d6:	f000 f965 	bl	80046a4 <RTC_Get_Synced_Month_String>
 80043da:	4603      	mov	r3, r0
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fb9b 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log("-");
 80043e2:	481d      	ldr	r0, [pc, #116]	@ (8004458 <Oper_Boot+0x424>)
 80043e4:	f000 fb98 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Date_String());
 80043e8:	f000 f976 	bl	80046d8 <RTC_Get_Synced_Date_String>
 80043ec:	4603      	mov	r3, r0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fb92 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(" ");
 80043f4:	4819      	ldr	r0, [pc, #100]	@ (800445c <Oper_Boot+0x428>)
 80043f6:	f000 fb8f 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Hour_String());
 80043fa:	f000 f987 	bl	800470c <RTC_Get_Synced_Hour_String>
 80043fe:	4603      	mov	r3, r0
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fb89 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(":");
 8004406:	4816      	ldr	r0, [pc, #88]	@ (8004460 <Oper_Boot+0x42c>)
 8004408:	f000 fb86 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Minute_String());
 800440c:	f000 f998 	bl	8004740 <RTC_Get_Synced_Minute_String>
 8004410:	4603      	mov	r3, r0
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fb80 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(":");
 8004418:	4811      	ldr	r0, [pc, #68]	@ (8004460 <Oper_Boot+0x42c>)
 800441a:	f000 fb7d 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Second_String());
 800441e:	f000 f9a9 	bl	8004774 <RTC_Get_Synced_Second_String>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fb77 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log("\n");
 800442a:	480e      	ldr	r0, [pc, #56]	@ (8004464 <Oper_Boot+0x430>)
 800442c:	f000 fb74 	bl	8004b18 <SD_Card_Log>
            SD_Card_Log("==================<< DONE >>==================\n");
 8004430:	480d      	ldr	r0, [pc, #52]	@ (8004468 <Oper_Boot+0x434>)
 8004432:	f000 fb71 	bl	8004b18 <SD_Card_Log>

            bootLoop = 0; // 부팅 루프 종료
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
            break;
 800443a:	e000      	b.n	800443e <Oper_Boot+0x40a>
        
        default:
            break;
 800443c:	bf00      	nop
    while (bootLoop)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f ae01 	bne.w	8004048 <Oper_Boot+0x14>
        g_nTime_Status = DEVICE_TIME_SYNCED; // 시간 동기화 상태 업데이트

        Save_TimeStatus_FRAM(); // FRAM에 시간 동기화 상태 저장
    }
#endif
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	0801070c 	.word	0x0801070c
 8004454:	0801072c 	.word	0x0801072c
 8004458:	08010740 	.word	0x08010740
 800445c:	08010744 	.word	0x08010744
 8004460:	08010748 	.word	0x08010748
 8004464:	0801074c 	.word	0x0801074c
 8004468:	08010750 	.word	0x08010750

0800446c <Month_String_To_Number>:
// PAT_UTC_Time pAtUtcTime; UTC 시간 구조체 포인터를 사용하여 시간 동기화 함수


// 월 문자열을 숫자로 변환
int Month_String_To_Number(const char* monthStr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    
    if (strcmp(monthStr, "Jan") == 0) return RTC_MONTH_JANUARY;
 8004474:	4938      	ldr	r1, [pc, #224]	@ (8004558 <Month_String_To_Number+0xec>)
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fb feaa 	bl	80001d0 <strcmp>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <Month_String_To_Number+0x1a>
 8004482:	2301      	movs	r3, #1
 8004484:	e064      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Feb") == 0) return RTC_MONTH_FEBRUARY;
 8004486:	4935      	ldr	r1, [pc, #212]	@ (800455c <Month_String_To_Number+0xf0>)
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fb fea1 	bl	80001d0 <strcmp>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <Month_String_To_Number+0x2c>
 8004494:	2302      	movs	r3, #2
 8004496:	e05b      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Mar") == 0) return RTC_MONTH_MARCH;
 8004498:	4931      	ldr	r1, [pc, #196]	@ (8004560 <Month_String_To_Number+0xf4>)
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fb fe98 	bl	80001d0 <strcmp>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <Month_String_To_Number+0x3e>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e052      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Apr") == 0) return RTC_MONTH_APRIL;
 80044aa:	492e      	ldr	r1, [pc, #184]	@ (8004564 <Month_String_To_Number+0xf8>)
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fb fe8f 	bl	80001d0 <strcmp>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <Month_String_To_Number+0x50>
 80044b8:	2304      	movs	r3, #4
 80044ba:	e049      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "May") == 0) return RTC_MONTH_MAY;
 80044bc:	492a      	ldr	r1, [pc, #168]	@ (8004568 <Month_String_To_Number+0xfc>)
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fb fe86 	bl	80001d0 <strcmp>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <Month_String_To_Number+0x62>
 80044ca:	2305      	movs	r3, #5
 80044cc:	e040      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Jun") == 0) return RTC_MONTH_JUNE;
 80044ce:	4927      	ldr	r1, [pc, #156]	@ (800456c <Month_String_To_Number+0x100>)
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fb fe7d 	bl	80001d0 <strcmp>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <Month_String_To_Number+0x74>
 80044dc:	2306      	movs	r3, #6
 80044de:	e037      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Jul") == 0) return RTC_MONTH_JULY;
 80044e0:	4923      	ldr	r1, [pc, #140]	@ (8004570 <Month_String_To_Number+0x104>)
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fb fe74 	bl	80001d0 <strcmp>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <Month_String_To_Number+0x86>
 80044ee:	2307      	movs	r3, #7
 80044f0:	e02e      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Aug") == 0) return RTC_MONTH_AUGUST;
 80044f2:	4920      	ldr	r1, [pc, #128]	@ (8004574 <Month_String_To_Number+0x108>)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fb fe6b 	bl	80001d0 <strcmp>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <Month_String_To_Number+0x98>
 8004500:	2308      	movs	r3, #8
 8004502:	e025      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Sep") == 0) return RTC_MONTH_SEPTEMBER;
 8004504:	491c      	ldr	r1, [pc, #112]	@ (8004578 <Month_String_To_Number+0x10c>)
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fb fe62 	bl	80001d0 <strcmp>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <Month_String_To_Number+0xaa>
 8004512:	2309      	movs	r3, #9
 8004514:	e01c      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Oct") == 0) return RTC_MONTH_OCTOBER;
 8004516:	4919      	ldr	r1, [pc, #100]	@ (800457c <Month_String_To_Number+0x110>)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7fb fe59 	bl	80001d0 <strcmp>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <Month_String_To_Number+0xbc>
 8004524:	2310      	movs	r3, #16
 8004526:	e013      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Nov") == 0) return RTC_MONTH_NOVEMBER;
 8004528:	4915      	ldr	r1, [pc, #84]	@ (8004580 <Month_String_To_Number+0x114>)
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fb fe50 	bl	80001d0 <strcmp>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <Month_String_To_Number+0xce>
 8004536:	2311      	movs	r3, #17
 8004538:	e00a      	b.n	8004550 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Dec") == 0) return RTC_MONTH_DECEMBER;
 800453a:	4912      	ldr	r1, [pc, #72]	@ (8004584 <Month_String_To_Number+0x118>)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fb fe47 	bl	80001d0 <strcmp>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <Month_String_To_Number+0xe0>
 8004548:	2312      	movs	r3, #18
 800454a:	e001      	b.n	8004550 <Month_String_To_Number+0xe4>

    return -1; // 잘못된 월 문자열
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	08010780 	.word	0x08010780
 800455c:	08010784 	.word	0x08010784
 8004560:	08010788 	.word	0x08010788
 8004564:	0801078c 	.word	0x0801078c
 8004568:	08010790 	.word	0x08010790
 800456c:	08010794 	.word	0x08010794
 8004570:	08010798 	.word	0x08010798
 8004574:	0801079c 	.word	0x0801079c
 8004578:	080107a0 	.word	0x080107a0
 800457c:	080107a4 	.word	0x080107a4
 8004580:	080107a8 	.word	0x080107a8
 8004584:	080107ac 	.word	0x080107ac

08004588 <RTC_Set_UTC>:
    return -1; // 잘못된 요일 문자열
}

// 저장된 UTC 시간으로 RTC 시간을 설정하는 함수
int RTC_Set_UTC(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
    int result = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	607b      	str	r3, [r7, #4]
    PAT_UTC_Time pAtUtcTime = AT_Get_UTC_Time(); // UTC 시간 구조체 포인터
 8004592:	f7fc fc4d 	bl	8000e30 <AT_Get_UTC_Time>
 8004596:	6038      	str	r0, [r7, #0]
    // ──────────────────────────────────────────────────────────────────────────────

    g_Time.Hours = (uint8_t)pAtUtcTime->sHour;       // 시
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	4b30      	ldr	r3, [pc, #192]	@ (8004660 <RTC_Set_UTC+0xd8>)
 80045a0:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = (uint8_t)pAtUtcTime->sMinute;   // 분
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004660 <RTC_Set_UTC+0xd8>)
 80045aa:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = (uint8_t)pAtUtcTime->sSecond;   // 초
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004660 <RTC_Set_UTC+0xd8>)
 80045b4:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE; // 일광 절약 시간 없음
 80045b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004660 <RTC_Set_UTC+0xd8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET; // 저장 작업 없음
 80045bc:	4b28      	ldr	r3, [pc, #160]	@ (8004660 <RTC_Set_UTC+0xd8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]

    g_Date.WeekDay = (uint8_t)pAtUtcTime->sDayOfWeek; // 요일
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	4b26      	ldr	r3, [pc, #152]	@ (8004664 <RTC_Set_UTC+0xdc>)
 80045ca:	701a      	strb	r2, [r3, #0]
    g_Date.Month = (uint8_t)pAtUtcTime->sMonth;       // 월
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4b24      	ldr	r3, [pc, #144]	@ (8004664 <RTC_Set_UTC+0xdc>)
 80045d4:	705a      	strb	r2, [r3, #1]
    g_Date.Date = (uint8_t)pAtUtcTime->sDay;          // 일
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	4b21      	ldr	r3, [pc, #132]	@ (8004664 <RTC_Set_UTC+0xdc>)
 80045de:	709a      	strb	r2, [r3, #2]
    g_Date.Year = (uint8_t)(pAtUtcTime->sYear % 100);   // 연
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a20      	ldr	r2, [pc, #128]	@ (8004668 <RTC_Set_UTC+0xe0>)
 80045e6:	fb82 1203 	smull	r1, r2, r2, r3
 80045ea:	1151      	asrs	r1, r2, #5
 80045ec:	17da      	asrs	r2, r3, #31
 80045ee:	1a8a      	subs	r2, r1, r2
 80045f0:	2164      	movs	r1, #100	@ 0x64
 80045f2:	fb01 f202 	mul.w	r2, r1, r2
 80045f6:	1a9a      	subs	r2, r3, r2
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <RTC_Set_UTC+0xdc>)
 80045fc:	70da      	strb	r2, [r3, #3]

    // 
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);   // RTC 쓰기 보호 해제
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <RTC_Set_UTC+0xe4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	22ca      	movs	r2, #202	@ 0xca
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24
 8004606:	4b19      	ldr	r3, [pc, #100]	@ (800466c <RTC_Set_UTC+0xe4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2253      	movs	r2, #83	@ 0x53
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24

    // RTC 시간 설정
    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BIN) != HAL_OK)
 800460e:	2200      	movs	r2, #0
 8004610:	4913      	ldr	r1, [pc, #76]	@ (8004660 <RTC_Set_UTC+0xd8>)
 8004612:	4816      	ldr	r0, [pc, #88]	@ (800466c <RTC_Set_UTC+0xe4>)
 8004614:	f002 fa61 	bl	8006ada <HAL_RTC_SetTime>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <RTC_Set_UTC+0x9e>
    {
        // 초기화 실패 처리
        Error_Handler();
 800461e:	f7fe fd69 	bl	80030f4 <Error_Handler>
        result = RTC_ERROR; // 실패 코드
 8004622:	2301      	movs	r3, #1
 8004624:	607b      	str	r3, [r7, #4]
    }
    // RTC 날짜 설정
    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BIN) != HAL_OK)
 8004626:	2200      	movs	r2, #0
 8004628:	490e      	ldr	r1, [pc, #56]	@ (8004664 <RTC_Set_UTC+0xdc>)
 800462a:	4810      	ldr	r0, [pc, #64]	@ (800466c <RTC_Set_UTC+0xe4>)
 800462c:	f002 fb4d 	bl	8006cca <HAL_RTC_SetDate>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <RTC_Set_UTC+0xb6>
    {
        // 초기화 실패 처리
        Error_Handler();
 8004636:	f7fe fd5d 	bl	80030f4 <Error_Handler>
        result = RTC_ERROR; // 실패 코드
 800463a:	2301      	movs	r3, #1
 800463c:	607b      	str	r3, [r7, #4]
    }

    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc); // RTC 쓰기 보호 재설정
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <RTC_Set_UTC+0xe4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	22ff      	movs	r2, #255	@ 0xff
 8004644:	625a      	str	r2, [r3, #36]	@ 0x24

    if (result == RTC_ERROR)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <RTC_Set_UTC+0xc8>
    {
        return result; // 오류 발생 시 즉시 반환
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	e002      	b.n	8004656 <RTC_Set_UTC+0xce>
    }

    result = RTC_OK; // 성공 코드    
 8004650:	2300      	movs	r3, #0
 8004652:	607b      	str	r3, [r7, #4]
    
    return result;
 8004654:	687b      	ldr	r3, [r7, #4]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000fe8 	.word	0x20000fe8
 8004664:	20000ffc 	.word	0x20000ffc
 8004668:	51eb851f 	.word	0x51eb851f
 800466c:	20000d84 	.word	0x20000d84

08004670 <RTC_Get_Synced_Year_String>:

// 저장된 연도를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Year_String(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
    static char yearString[5]; // 정적 버퍼로 연도 문자열 저장
    
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8004674:	2200      	movs	r2, #0
 8004676:	4907      	ldr	r1, [pc, #28]	@ (8004694 <RTC_Get_Synced_Year_String+0x24>)
 8004678:	4807      	ldr	r0, [pc, #28]	@ (8004698 <RTC_Get_Synced_Year_String+0x28>)
 800467a:	f002 fbaa 	bl	8006dd2 <HAL_RTC_GetDate>
    
    // snprintf(yearString, sizeof(yearString), "%04d", g_Date.Year + 2000);
    snprintf(yearString, sizeof(yearString), "%02d", (int)g_Date.Year );
 800467e:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <RTC_Get_Synced_Year_String+0x24>)
 8004680:	78db      	ldrb	r3, [r3, #3]
 8004682:	4a06      	ldr	r2, [pc, #24]	@ (800469c <RTC_Get_Synced_Year_String+0x2c>)
 8004684:	2105      	movs	r1, #5
 8004686:	4806      	ldr	r0, [pc, #24]	@ (80046a0 <RTC_Get_Synced_Year_String+0x30>)
 8004688:	f009 f9cc 	bl	800da24 <sniprintf>
    return yearString; // 연도 문자열 반환
 800468c:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <RTC_Get_Synced_Year_String+0x30>)
}
 800468e:	4618      	mov	r0, r3
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000ffc 	.word	0x20000ffc
 8004698:	20000d84 	.word	0x20000d84
 800469c:	080107cc 	.word	0x080107cc
 80046a0:	2000101c 	.word	0x2000101c

080046a4 <RTC_Get_Synced_Month_String>:
}


// 저장된 월을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Month_String(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
    static char monthString[4]; // 정적 버퍼로 월 문자열 저장

    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 80046a8:	2200      	movs	r2, #0
 80046aa:	4907      	ldr	r1, [pc, #28]	@ (80046c8 <RTC_Get_Synced_Month_String+0x24>)
 80046ac:	4807      	ldr	r0, [pc, #28]	@ (80046cc <RTC_Get_Synced_Month_String+0x28>)
 80046ae:	f002 fb90 	bl	8006dd2 <HAL_RTC_GetDate>

    snprintf(monthString, sizeof(monthString), "%02d", g_Date.Month); // 2자리 월로 포맷
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <RTC_Get_Synced_Month_String+0x24>)
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	4a06      	ldr	r2, [pc, #24]	@ (80046d0 <RTC_Get_Synced_Month_String+0x2c>)
 80046b8:	2104      	movs	r1, #4
 80046ba:	4806      	ldr	r0, [pc, #24]	@ (80046d4 <RTC_Get_Synced_Month_String+0x30>)
 80046bc:	f009 f9b2 	bl	800da24 <sniprintf>
    
    return monthString; // 월 문자열 반환
 80046c0:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <RTC_Get_Synced_Month_String+0x30>)
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000ffc 	.word	0x20000ffc
 80046cc:	20000d84 	.word	0x20000d84
 80046d0:	080107cc 	.word	0x080107cc
 80046d4:	20001024 	.word	0x20001024

080046d8 <RTC_Get_Synced_Date_String>:
    return monthString; // 월 문자열 반환
}

// 저장된 일을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Date_String(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
    static char dateString[4]; // 정적 버퍼로 일 문자열 저장

    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 80046dc:	2200      	movs	r2, #0
 80046de:	4907      	ldr	r1, [pc, #28]	@ (80046fc <RTC_Get_Synced_Date_String+0x24>)
 80046e0:	4807      	ldr	r0, [pc, #28]	@ (8004700 <RTC_Get_Synced_Date_String+0x28>)
 80046e2:	f002 fb76 	bl	8006dd2 <HAL_RTC_GetDate>

    snprintf(dateString, sizeof(dateString), "%02d", g_Date.Date); // 2자리 일로 포맷
 80046e6:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <RTC_Get_Synced_Date_String+0x24>)
 80046e8:	789b      	ldrb	r3, [r3, #2]
 80046ea:	4a06      	ldr	r2, [pc, #24]	@ (8004704 <RTC_Get_Synced_Date_String+0x2c>)
 80046ec:	2104      	movs	r1, #4
 80046ee:	4806      	ldr	r0, [pc, #24]	@ (8004708 <RTC_Get_Synced_Date_String+0x30>)
 80046f0:	f009 f998 	bl	800da24 <sniprintf>
    
    return dateString; // 일 문자열 반환
 80046f4:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <RTC_Get_Synced_Date_String+0x30>)
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000ffc 	.word	0x20000ffc
 8004700:	20000d84 	.word	0x20000d84
 8004704:	080107cc 	.word	0x080107cc
 8004708:	20001028 	.word	0x20001028

0800470c <RTC_Get_Synced_Hour_String>:
    return dateString; // 일 문자열 반환
}

// 저장된 시를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Hour_String(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
    static char hourString[4]; // 정적 버퍼로 시 문자열 저장

    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8004710:	2200      	movs	r2, #0
 8004712:	4907      	ldr	r1, [pc, #28]	@ (8004730 <RTC_Get_Synced_Hour_String+0x24>)
 8004714:	4807      	ldr	r0, [pc, #28]	@ (8004734 <RTC_Get_Synced_Hour_String+0x28>)
 8004716:	f002 fa7a 	bl	8006c0e <HAL_RTC_GetTime>
    
    snprintf(hourString, sizeof(hourString), "%02d", g_Time.Hours); // 2자리 시로 포맷
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <RTC_Get_Synced_Hour_String+0x24>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	4a06      	ldr	r2, [pc, #24]	@ (8004738 <RTC_Get_Synced_Hour_String+0x2c>)
 8004720:	2104      	movs	r1, #4
 8004722:	4806      	ldr	r0, [pc, #24]	@ (800473c <RTC_Get_Synced_Hour_String+0x30>)
 8004724:	f009 f97e 	bl	800da24 <sniprintf>
    
    return hourString; // 시 문자열 반환
 8004728:	4b04      	ldr	r3, [pc, #16]	@ (800473c <RTC_Get_Synced_Hour_String+0x30>)
}
 800472a:	4618      	mov	r0, r3
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000fe8 	.word	0x20000fe8
 8004734:	20000d84 	.word	0x20000d84
 8004738:	080107cc 	.word	0x080107cc
 800473c:	2000102c 	.word	0x2000102c

08004740 <RTC_Get_Synced_Minute_String>:
    return hourString; // 시 문자열 반환
}

// 저장됨 분을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Minute_String(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
    static char minuteString[4]; // 정적 버퍼로 분 문자열 저장
    
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8004744:	2200      	movs	r2, #0
 8004746:	4907      	ldr	r1, [pc, #28]	@ (8004764 <RTC_Get_Synced_Minute_String+0x24>)
 8004748:	4807      	ldr	r0, [pc, #28]	@ (8004768 <RTC_Get_Synced_Minute_String+0x28>)
 800474a:	f002 fa60 	bl	8006c0e <HAL_RTC_GetTime>
    
    snprintf(minuteString, sizeof(minuteString), "%02d", g_Time.Minutes); // 2자리 분으로 포맷
 800474e:	4b05      	ldr	r3, [pc, #20]	@ (8004764 <RTC_Get_Synced_Minute_String+0x24>)
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	4a06      	ldr	r2, [pc, #24]	@ (800476c <RTC_Get_Synced_Minute_String+0x2c>)
 8004754:	2104      	movs	r1, #4
 8004756:	4806      	ldr	r0, [pc, #24]	@ (8004770 <RTC_Get_Synced_Minute_String+0x30>)
 8004758:	f009 f964 	bl	800da24 <sniprintf>
    
    return minuteString; // 분 문자열 반환
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <RTC_Get_Synced_Minute_String+0x30>)
}
 800475e:	4618      	mov	r0, r3
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000fe8 	.word	0x20000fe8
 8004768:	20000d84 	.word	0x20000d84
 800476c:	080107cc 	.word	0x080107cc
 8004770:	20001030 	.word	0x20001030

08004774 <RTC_Get_Synced_Second_String>:
    return minuteString; // 분 문자열 반환
}

// 저장된 초를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Second_String(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
    static char secondString[4]; // 정적 버퍼로 초 문자열 저장
    
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8004778:	2200      	movs	r2, #0
 800477a:	4907      	ldr	r1, [pc, #28]	@ (8004798 <RTC_Get_Synced_Second_String+0x24>)
 800477c:	4807      	ldr	r0, [pc, #28]	@ (800479c <RTC_Get_Synced_Second_String+0x28>)
 800477e:	f002 fa46 	bl	8006c0e <HAL_RTC_GetTime>
    
    snprintf(secondString, sizeof(secondString), "%02d", g_Time.Seconds); // 2자리 초로 포맷
 8004782:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <RTC_Get_Synced_Second_String+0x24>)
 8004784:	789b      	ldrb	r3, [r3, #2]
 8004786:	4a06      	ldr	r2, [pc, #24]	@ (80047a0 <RTC_Get_Synced_Second_String+0x2c>)
 8004788:	2104      	movs	r1, #4
 800478a:	4806      	ldr	r0, [pc, #24]	@ (80047a4 <RTC_Get_Synced_Second_String+0x30>)
 800478c:	f009 f94a 	bl	800da24 <sniprintf>
    
    return secondString; // 초 문자열 반환
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <RTC_Get_Synced_Second_String+0x30>)
}
 8004792:	4618      	mov	r0, r3
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000fe8 	.word	0x20000fe8
 800479c:	20000d84 	.word	0x20000d84
 80047a0:	080107cc 	.word	0x080107cc
 80047a4:	20001034 	.word	0x20001034

080047a8 <SD_Card_Boot>:



// =========================================================
int SD_Card_Boot(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 80047ae:	af00      	add	r7, sp, #0
    FATFS SDFatFS;  // FATFS 구조체
    FIL SDFile;     // 파일 구조체
    FRESULT fres;   // FATFS 함수 결과
    UINT bw, br;    // 바이트 쓰기/읽기 변수

    int result = 0; // 결과 변수 초기화
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
    }
#endif // 0
    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80047b6:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80047ba:	2201      	movs	r2, #1
 80047bc:	494c      	ldr	r1, [pc, #304]	@ (80048f0 <SD_Card_Boot+0x148>)
 80047be:	4618      	mov	r0, r3
 80047c0:	f008 fa2c 	bl	800cc1c <f_mount>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
    if (fres != FR_OK)
 80047ca:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <SD_Card_Boot+0x2e>
    {
        // 마운트 실패 처리
        Error_Handler();
 80047d2:	f7fe fc8f 	bl	80030f4 <Error_Handler>
    }

    // 2) 와이파이 파일 있는지 확인
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	2201      	movs	r2, #1
 80047da:	4946      	ldr	r1, [pc, #280]	@ (80048f4 <SD_Card_Boot+0x14c>)
 80047dc:	4618      	mov	r0, r3
 80047de:	f008 fa63 	bl	800cca8 <f_open>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
    if (fres == FR_OK)
 80047e8:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11c      	bne.n	800482a <SD_Card_Boot+0x82>
    {
        // 파일이 존재하면 OK Sd카드 언마운트
        f_close(&SDFile);
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	4618      	mov	r0, r3
 80047f4:	f008 ff44 	bl	800d680 <f_close>
        fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 80047f8:	2201      	movs	r2, #1
 80047fa:	493d      	ldr	r1, [pc, #244]	@ (80048f0 <SD_Card_Boot+0x148>)
 80047fc:	2000      	movs	r0, #0
 80047fe:	f008 fa0d 	bl	800cc1c <f_mount>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 8004808:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <SD_Card_Boot+0x7a>
        {
            SD_Card_Log("SD Card Unmount Failed!\n");
 8004810:	4839      	ldr	r0, [pc, #228]	@ (80048f8 <SD_Card_Boot+0x150>)
 8004812:	f000 f981 	bl	8004b18 <SD_Card_Log>
            // 언마운트 실패 처리
            // Error_Handler();
            Error_Proc(1);
 8004816:	2001      	movs	r0, #1
 8004818:	f7fe fd4c 	bl	80032b4 <Error_Proc>

            result = SD_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        
        result = SD_OK; // 파일이 존재하면 OK
 8004822:	2300      	movs	r3, #0
 8004824:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 8004828:	e05a      	b.n	80048e0 <SD_Card_Boot+0x138>
    }
    else
    {
        // 파일이 없으면 생성
        fres = f_open(&SDFile, "wifi.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	220a      	movs	r2, #10
 800482e:	4931      	ldr	r1, [pc, #196]	@ (80048f4 <SD_Card_Boot+0x14c>)
 8004830:	4618      	mov	r0, r3
 8004832:	f008 fa39 	bl	800cca8 <f_open>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 800483c:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <SD_Card_Boot+0xae>
        {
            // 파일 열기 실패 처리
            // Error_Handler();
            Error_Proc(1);
 8004844:	2001      	movs	r0, #1
 8004846:	f7fe fd35 	bl	80032b4 <Error_Proc>
            SD_Card_Log("SD Card File Open Failed!\n");
 800484a:	482c      	ldr	r0, [pc, #176]	@ (80048fc <SD_Card_Boot+0x154>)
 800484c:	f000 f964 	bl	8004b18 <SD_Card_Log>
            result = SD_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        // 파일에 기본 Wi-Fi 설정 데이터 쓰기
        const char *wifiData = "SSID=YourSSID\nPassword=YourPassword\n";
 8004856:	4b2a      	ldr	r3, [pc, #168]	@ (8004900 <SD_Card_Boot+0x158>)
 8004858:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
        fres = f_write(&SDFile, wifiData, strlen(wifiData), &bw);
 800485c:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 8004860:	f7fb fcc0 	bl	80001e4 <strlen>
 8004864:	4602      	mov	r2, r0
 8004866:	463b      	mov	r3, r7
 8004868:	1d38      	adds	r0, r7, #4
 800486a:	f8d7 1464 	ldr.w	r1, [r7, #1124]	@ 0x464
 800486e:	f008 fd14 	bl	800d29a <f_write>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK || bw < strlen(wifiData))
 8004878:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <SD_Card_Boot+0xf0>
 8004880:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 8004884:	f7fb fcae 	bl	80001e4 <strlen>
 8004888:	4602      	mov	r2, r0
 800488a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800488e:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d90c      	bls.n	80048b2 <SD_Card_Boot+0x10a>
        {
            // 파일 쓰기 실패 처리
            f_close(&SDFile);
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	4618      	mov	r0, r3
 800489c:	f008 fef0 	bl	800d680 <f_close>
            // Error_Handler();
            Error_Proc(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fe fd07 	bl	80032b4 <Error_Proc>
            SD_Card_Log("SD Card File Write Failed!\n");
 80048a6:	4817      	ldr	r0, [pc, #92]	@ (8004904 <SD_Card_Boot+0x15c>)
 80048a8:	f000 f936 	bl	8004b18 <SD_Card_Log>
            result = SD_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        // 파일 닫기
        fres = f_close(&SDFile);
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f008 fee3 	bl	800d680 <f_close>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 80048c0:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <SD_Card_Boot+0x132>
        {
            // 파일 닫기 실패 처리
            // Error_Handler();
            Error_Proc(1);
 80048c8:	2001      	movs	r0, #1
 80048ca:	f7fe fcf3 	bl	80032b4 <Error_Proc>
            SD_Card_Log("SD Card File Close Failed!\n");
 80048ce:	480e      	ldr	r0, [pc, #56]	@ (8004908 <SD_Card_Boot+0x160>)
 80048d0:	f000 f922 	bl	8004b18 <SD_Card_Log>
            result = SD_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }

        result = SD_OK; // 파일 생성 성공
 80048da:	2300      	movs	r3, #0
 80048dc:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
    }

    return result; // SD 카드 부팅 결과 반환
 80048e0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20001088 	.word	0x20001088
 80048f4:	080107fc 	.word	0x080107fc
 80048f8:	08010808 	.word	0x08010808
 80048fc:	08010824 	.word	0x08010824
 8004900:	08010840 	.word	0x08010840
 8004904:	08010868 	.word	0x08010868
 8004908:	08010884 	.word	0x08010884

0800490c <SD_Card_Get_WiFi_SSID>:


// WIFI SSID를 반환하는 함수
const char* SD_Card_Get_WiFi_SSID(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8004912:	af00      	add	r7, sp, #0
    UINT br;              // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8004914:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8004918:	2201      	movs	r2, #1
 800491a:	4936      	ldr	r1, [pc, #216]	@ (80049f4 <SD_Card_Get_WiFi_SSID+0xe8>)
 800491c:	4618      	mov	r0, r3
 800491e:	f008 f97d 	bl	800cc1c <f_mount>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8004928:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <SD_Card_Get_WiFi_SSID+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 8004930:	f7fe fbe0 	bl	80030f4 <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 8004934:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004938:	2201      	movs	r2, #1
 800493a:	492f      	ldr	r1, [pc, #188]	@ (80049f8 <SD_Card_Get_WiFi_SSID+0xec>)
 800493c:	4618      	mov	r0, r3
 800493e:	f008 f9b3 	bl	800cca8 <f_open>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8004948:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SD_Card_Get_WiFi_SSID+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8004950:	f7fe fbd0 	bl	80030f4 <Error_Handler>
    }

    // 3) 파일에서 SSID 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 8004954:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004958:	4639      	mov	r1, r7
 800495a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800495e:	223f      	movs	r2, #63	@ 0x3f
 8004960:	f008 fb5c 	bl	800d01c <f_read>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK || br == 0)
 800496a:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <SD_Card_Get_WiFi_SSID+0x74>
 8004972:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8004976:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <SD_Card_Get_WiFi_SSID+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 8004980:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004984:	4618      	mov	r0, r3
 8004986:	f008 fe7b 	bl	800d680 <f_close>
        Error_Handler();
 800498a:	f7fe fbb3 	bl	80030f4 <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 800498e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8004992:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f507 6295 	add.w	r2, r7, #1192	@ 0x4a8
 800499c:	f5a2 6295 	sub.w	r2, r2, #1192	@ 0x4a8
 80049a0:	2100      	movs	r1, #0
 80049a2:	54d1      	strb	r1, [r2, r3]

    // 4) SSID (최초 부트에서 "SSID=YourSSID" 형식으로 저장)
    sscanf(buffer, "SSID=%31s", ssid);
 80049a4:	463b      	mov	r3, r7
 80049a6:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <SD_Card_Get_WiFi_SSID+0xf0>)
 80049a8:	4915      	ldr	r1, [pc, #84]	@ (8004a00 <SD_Card_Get_WiFi_SSID+0xf4>)
 80049aa:	4618      	mov	r0, r3
 80049ac:	f009 f86e 	bl	800da8c <siscanf>

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 80049b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80049b4:	4618      	mov	r0, r3
 80049b6:	f008 fe63 	bl	800d680 <f_close>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 80049c0:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <SD_Card_Get_WiFi_SSID+0xc0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 80049c8:	f7fe fb94 	bl	80030f4 <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 80049cc:	2201      	movs	r2, #1
 80049ce:	4909      	ldr	r1, [pc, #36]	@ (80049f4 <SD_Card_Get_WiFi_SSID+0xe8>)
 80049d0:	2000      	movs	r0, #0
 80049d2:	f008 f923 	bl	800cc1c <f_mount>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 80049dc:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <SD_Card_Get_WiFi_SSID+0xdc>
    {
        // 언마운트 실패 처리
        Error_Handler();
 80049e4:	f7fe fb86 	bl	80030f4 <Error_Handler>
    }

    return ssid; // SSID 반환
 80049e8:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <SD_Card_Get_WiFi_SSID+0xf0>)
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20001088 	.word	0x20001088
 80049f8:	080107fc 	.word	0x080107fc
 80049fc:	20001038 	.word	0x20001038
 8004a00:	080108a0 	.word	0x080108a0

08004a04 <SD_Card_Get_WiFi_Password>:

// WIFI 비밀번호를 반환하는 함수
const char* SD_Card_Get_WiFi_Password(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 8004a0a:	af00      	add	r7, sp, #0
    UINT br;                  // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8004a0c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8004a10:	2201      	movs	r2, #1
 8004a12:	493c      	ldr	r1, [pc, #240]	@ (8004b04 <SD_Card_Get_WiFi_Password+0x100>)
 8004a14:	4618      	mov	r0, r3
 8004a16:	f008 f901 	bl	800cc1c <f_mount>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8004a20:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <SD_Card_Get_WiFi_Password+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 8004a28:	f7fe fb64 	bl	80030f4 <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 8004a2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004a30:	2201      	movs	r2, #1
 8004a32:	4935      	ldr	r1, [pc, #212]	@ (8004b08 <SD_Card_Get_WiFi_Password+0x104>)
 8004a34:	4618      	mov	r0, r3
 8004a36:	f008 f937 	bl	800cca8 <f_open>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8004a40:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <SD_Card_Get_WiFi_Password+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8004a48:	f7fe fb54 	bl	80030f4 <Error_Handler>
    }

    // 3) 파일에서 비밀번호 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 8004a4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004a50:	1d39      	adds	r1, r7, #4
 8004a52:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8004a56:	223f      	movs	r2, #63	@ 0x3f
 8004a58:	f008 fae0 	bl	800d01c <f_read>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK || br == 0)
 8004a62:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <SD_Card_Get_WiFi_Password+0x74>
 8004a6a:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8004a6e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <SD_Card_Get_WiFi_Password+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 8004a78:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f008 fdff 	bl	800d680 <f_close>
        Error_Handler();
 8004a82:	f7fe fb37 	bl	80030f4 <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 8004a86:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8004a8a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8004a94:	f2a2 42ac 	subw	r2, r2, #1196	@ 0x4ac
 8004a98:	2100      	movs	r1, #0
 8004a9a:	54d1      	strb	r1, [r2, r3]

    // 4) 비밀번호 (최초 부트에서 "Password=YourPassword" 형식으로 저장)
    const char *p = strstr(buffer, "Password=");
 8004a9c:	1d3b      	adds	r3, r7, #4
 8004a9e:	491b      	ldr	r1, [pc, #108]	@ (8004b0c <SD_Card_Get_WiFi_Password+0x108>)
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f009 f909 	bl	800dcb8 <strstr>
 8004aa6:	f8c7 04a8 	str.w	r0, [r7, #1192]	@ 0x4a8
    if(p)
 8004aaa:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <SD_Card_Get_WiFi_Password+0xba>
    {
        sscanf(p, "Password=%31s", password);
 8004ab2:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <SD_Card_Get_WiFi_Password+0x10c>)
 8004ab4:	4917      	ldr	r1, [pc, #92]	@ (8004b14 <SD_Card_Get_WiFi_Password+0x110>)
 8004ab6:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 8004aba:	f008 ffe7 	bl	800da8c <siscanf>
    }
    // sscanf(buffer, "Password=%31s", password);

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 8004abe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f008 fddc 	bl	800d680 <f_close>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8004ace:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <SD_Card_Get_WiFi_Password+0xd6>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8004ad6:	f7fe fb0d 	bl	80030f4 <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8004ada:	2201      	movs	r2, #1
 8004adc:	4909      	ldr	r1, [pc, #36]	@ (8004b04 <SD_Card_Get_WiFi_Password+0x100>)
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f008 f89c 	bl	800cc1c <f_mount>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8004aea:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <SD_Card_Get_WiFi_Password+0xf2>
    {
        // 언마운트 실패 처리
        Error_Handler();
 8004af2:	f7fe faff 	bl	80030f4 <Error_Handler>
    }

    return password; // 비밀번호 반환
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <SD_Card_Get_WiFi_Password+0x10c>)
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	f507 6796 	add.w	r7, r7, #1200	@ 0x4b0
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20001088 	.word	0x20001088
 8004b08:	080107fc 	.word	0x080107fc
 8004b0c:	080108ac 	.word	0x080108ac
 8004b10:	20001058 	.word	0x20001058
 8004b14:	080108b8 	.word	0x080108b8

08004b18 <SD_Card_Log>:



// SD카드에 로그를 남기는 함수
void SD_Card_Log(const char *logMessage)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8004b24:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8004b28:	6018      	str	r0, [r3, #0]
    UINT bw;        // 바이트 쓰기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8004b2a:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4937      	ldr	r1, [pc, #220]	@ (8004c10 <SD_Card_Log+0xf8>)
 8004b32:	4618      	mov	r0, r3
 8004b34:	f008 f872 	bl	800cc1c <f_mount>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8004b3e:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <SD_Card_Log+0x32>
    {
        // 마운트 실패 처리
        Error_Handler();
 8004b46:	f7fe fad5 	bl	80030f4 <Error_Handler>
    }

    // 2) 로그 파일 열기(없으면 생성)
    fres = f_open(&SDFile, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 8004b4a:	f107 030c 	add.w	r3, r7, #12
 8004b4e:	2232      	movs	r2, #50	@ 0x32
 8004b50:	4930      	ldr	r1, [pc, #192]	@ (8004c14 <SD_Card_Log+0xfc>)
 8004b52:	4618      	mov	r0, r3
 8004b54:	f008 f8a8 	bl	800cca8 <f_open>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8004b5e:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <SD_Card_Log+0x52>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8004b66:	f7fe fac5 	bl	80030f4 <Error_Handler>
    }

    // 3) 로그 메시지 쓰기
    fres = f_write(&SDFile, logMessage, strlen(logMessage), &bw);
 8004b6a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8004b6e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	f7fb fb36 	bl	80001e4 <strlen>
 8004b78:	4604      	mov	r4, r0
 8004b7a:	f107 0308 	add.w	r3, r7, #8
 8004b7e:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8004b82:	f2a2 416c 	subw	r1, r2, #1132	@ 0x46c
 8004b86:	f107 000c 	add.w	r0, r7, #12
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	6809      	ldr	r1, [r1, #0]
 8004b8e:	f008 fb84 	bl	800d29a <f_write>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK || bw < strlen(logMessage))
 8004b98:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10e      	bne.n	8004bbe <SD_Card_Log+0xa6>
 8004ba0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8004ba4:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f7fb fb1b 	bl	80001e4 <strlen>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8004bb4:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d906      	bls.n	8004bcc <SD_Card_Log+0xb4>
    {
        // 파일 쓰기 실패 처리
        f_close(&SDFile);
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f008 fd5c 	bl	800d680 <f_close>
        Error_Handler();
 8004bc8:	f7fe fa94 	bl	80030f4 <Error_Handler>
    }

    // 4) 파일 닫기
    fres = f_close(&SDFile);
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f008 fd55 	bl	800d680 <f_close>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8004bdc:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <SD_Card_Log+0xd0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8004be4:	f7fe fa86 	bl	80030f4 <Error_Handler>
    }

    // 5) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8004be8:	2201      	movs	r2, #1
 8004bea:	4909      	ldr	r1, [pc, #36]	@ (8004c10 <SD_Card_Log+0xf8>)
 8004bec:	2000      	movs	r0, #0
 8004bee:	f008 f815 	bl	800cc1c <f_mount>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8004bf8:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <SD_Card_Log+0xec>
    {
        // 언마운트 실패 처리
        Error_Handler();
 8004c00:	f7fe fa78 	bl	80030f4 <Error_Handler>
    }
}
 8004c04:	bf00      	nop
 8004c06:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20001088 	.word	0x20001088
 8004c14:	080108c8 	.word	0x080108c8

08004c18 <SD_Card_Is_Exist>:

// SD카드가 있는지 확인하여 반환하는 함수
int SD_Card_Is_Exist(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8004c1e:	af00      	add	r7, sp, #0
    FRESULT fres;   // FATFS 함수 결과

    // --------------------------------------------------

    // 1) SD 카드 마운트 시도
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	2201      	movs	r2, #1
 8004c24:	490b      	ldr	r1, [pc, #44]	@ (8004c54 <SD_Card_Is_Exist+0x3c>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f007 fff8 	bl	800cc1c <f_mount>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
    if (fres == FR_OK)
 8004c32:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <SD_Card_Is_Exist+0x30>
    {
        // 마운트 성공 시 언마운트 후 OK 반환
        f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	4905      	ldr	r1, [pc, #20]	@ (8004c54 <SD_Card_Is_Exist+0x3c>)
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f007 ffec 	bl	800cc1c <f_mount>
        return SD_OK; // SD 카드 존재
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <SD_Card_Is_Exist+0x32>
    }
    
    return SD_ERROR; // SD 카드 없음
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20001088 	.word	0x20001088

08004c58 <SERVER_API_Get_Data>:


__CCMRAM__ Server_API_Data g_serverApiData; // 서버 API 데이터 구조체 인스턴스

PServer_API_Data SERVER_API_Get_Data(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
    // g_serverApiData의 주소를 반환
    return &g_serverApiData;
 8004c5c:	4b02      	ldr	r3, [pc, #8]	@ (8004c68 <SERVER_API_Get_Data+0x10>)
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	100000a8 	.word	0x100000a8

08004c6c <SERVER_API_Init>:

// CCMRAM 초기화
void SERVER_API_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
    // g_serverApiData 구조체를 0으로 초기화
    memset(&g_serverApiData, 0, sizeof(g_serverApiData));
 8004c70:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8004c74:	2100      	movs	r1, #0
 8004c76:	4802      	ldr	r0, [pc, #8]	@ (8004c80 <SERVER_API_Init+0x14>)
 8004c78:	f008 ff87 	bl	800db8a <memset>
}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	100000a8 	.word	0x100000a8

08004c84 <SERVER_API_Set_Token>:


// 토큰을 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_Token(const char* token)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    if (token != NULL && strlen(token) < sizeof(g_serverApiData.sToken))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00e      	beq.n	8004cb0 <SERVER_API_Set_Token+0x2c>
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fb faa6 	bl	80001e4 <strlen>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c9c:	d808      	bhi.n	8004cb0 <SERVER_API_Set_Token+0x2c>
    {
        strncpy(g_serverApiData.sToken, token, sizeof(g_serverApiData.sToken) - 1);
 8004c9e:	227f      	movs	r2, #127	@ 0x7f
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4805      	ldr	r0, [pc, #20]	@ (8004cb8 <SERVER_API_Set_Token+0x34>)
 8004ca4:	f008 ff98 	bl	800dbd8 <strncpy>
        g_serverApiData.sToken[sizeof(g_serverApiData.sToken) - 1] = '\0'; // 문자열 종료
 8004ca8:	4b03      	ldr	r3, [pc, #12]	@ (8004cb8 <SERVER_API_Set_Token+0x34>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    }
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	100000a8 	.word	0x100000a8

08004cbc <SERVER_API_Set_MAC_Address>:

// MAC 주소를 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_MAC_Address(const char* mac)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    if (mac != NULL && strlen(mac) < sizeof(g_serverApiData.sMac))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <SERVER_API_Set_MAC_Address+0x2c>
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fb fa8a 	bl	80001e4 <strlen>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b11      	cmp	r3, #17
 8004cd4:	d808      	bhi.n	8004ce8 <SERVER_API_Set_MAC_Address+0x2c>
    {
        strncpy(g_serverApiData.sMac, mac, sizeof(g_serverApiData.sMac) - 1);
 8004cd6:	2211      	movs	r2, #17
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4805      	ldr	r0, [pc, #20]	@ (8004cf0 <SERVER_API_Set_MAC_Address+0x34>)
 8004cdc:	f008 ff7c 	bl	800dbd8 <strncpy>
        g_serverApiData.sMac[sizeof(g_serverApiData.sMac) - 1] = '\0'; // 문자열 종료
 8004ce0:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SERVER_API_Set_MAC_Address+0x38>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    }
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	10000128 	.word	0x10000128
 8004cf4:	100000a8 	.word	0x100000a8

08004cf8 <Server_Send_Boot>:
// =======================================================================================================


// AT 명령어로 Json 날리기 , 서버에 날리기, 함수는 성공 여부를 반환
int Server_Send_Boot(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8004cfe:	af02      	add	r7, sp, #8
    // 토큰을 가져올 구조체
    PServer_API_Data pServerApiData = SERVER_API_Get_Data();
 8004d00:	f7ff ffaa 	bl	8004c58 <SERVER_API_Get_Data>
 8004d04:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330


    int result = 0; // 결과 변수 초기화
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    const char *success = "Boot Data sent successfully!\r\n";
 8004d0e:	4b70      	ldr	r3, [pc, #448]	@ (8004ed0 <Server_Send_Boot+0x1d8>)
 8004d10:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    const char *fail = "Failed to send Boot Data!\r\n";
 8004d14:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed4 <Server_Send_Boot+0x1dc>)
 8004d16:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    const char *tokenCheck = "Token is empty or NULL\r\n";
 8004d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed8 <Server_Send_Boot+0x1e0>)
 8004d1c:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
    const char *macPCheck = "MAC-P address is empty or NULL\r\n";
 8004d20:	4b6e      	ldr	r3, [pc, #440]	@ (8004edc <Server_Send_Boot+0x1e4>)
 8004d22:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
    const char *macCCheck = "MAC-C address is empty or NULL\r\n";
 8004d26:	4b6e      	ldr	r3, [pc, #440]	@ (8004ee0 <Server_Send_Boot+0x1e8>)
 8004d28:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c

    const char* token = pServerApiData->sToken; // 서버 API 토큰 가져오기
 8004d2c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8004d30:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
    const char* macP = pServerApiData->sMac; // MAC 주소 가져오기
 8004d34:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8004d38:	3380      	adds	r3, #128	@ 0x80
 8004d3a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    const char* macC = pServerApiData->sMac; // MAC 주소 가져오기
 8004d3e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8004d42:	3380      	adds	r3, #128	@ 0x80
 8004d44:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310

    char jsonData[256]={0}; // AT 명령어를 저장할 버퍼 // 토큰이 128바이트 공간 차지하므로 커맨드 버퍼는 충분히 커야 함
 8004d48:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004d4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	3304      	adds	r3, #4
 8004d56:	22fc      	movs	r2, #252	@ 0xfc
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f008 ff15 	bl	800db8a <memset>

    // 토큰 값 유효한지 확인
    if (token == NULL || strlen(token) == 0)
 8004d60:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <Server_Send_Boot+0x7a>
 8004d68:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10e      	bne.n	8004d90 <Server_Send_Boot+0x98>
    {
        // 토큰이 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)tokenCheck, strlen(tokenCheck), HAL_MAX_DELAY);
 8004d72:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8004d76:	f7fb fa35 	bl	80001e4 <strlen>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d82:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 8004d86:	4857      	ldr	r0, [pc, #348]	@ (8004ee4 <Server_Send_Boot+0x1ec>)
 8004d88:	f004 fa7c 	bl	8009284 <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e09a      	b.n	8004ec6 <Server_Send_Boot+0x1ce>
    }
    // MAC 주소 값 유효한지 확인
    if (macP == NULL || strlen(macP) == 0)
 8004d90:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <Server_Send_Boot+0xaa>
 8004d98:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10e      	bne.n	8004dc0 <Server_Send_Boot+0xc8>
    {
        // MAC 주소가 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)macPCheck, strlen(macPCheck), HAL_MAX_DELAY);
 8004da2:	f8d7 0320 	ldr.w	r0, [r7, #800]	@ 0x320
 8004da6:	f7fb fa1d 	bl	80001e4 <strlen>
 8004daa:	4603      	mov	r3, r0
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 8004db6:	484b      	ldr	r0, [pc, #300]	@ (8004ee4 <Server_Send_Boot+0x1ec>)
 8004db8:	f004 fa64 	bl	8009284 <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e082      	b.n	8004ec6 <Server_Send_Boot+0x1ce>
    }
    // MAC 주소 값 유효한지 확인
    if (macC == NULL || strlen(macC) == 0)
 8004dc0:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <Server_Send_Boot+0xda>
 8004dc8:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10e      	bne.n	8004df0 <Server_Send_Boot+0xf8>
    {
        // MAC 주소가 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)macCCheck, strlen(macCCheck), HAL_MAX_DELAY);
 8004dd2:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8004dd6:	f7fb fa05 	bl	80001e4 <strlen>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	f8d7 131c 	ldr.w	r1, [r7, #796]	@ 0x31c
 8004de6:	483f      	ldr	r0, [pc, #252]	@ (8004ee4 <Server_Send_Boot+0x1ec>)
 8004de8:	f004 fa4c 	bl	8009284 <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 8004dec:	2301      	movs	r3, #1
 8004dee:	e06a      	b.n	8004ec6 <Server_Send_Boot+0x1ce>
    }
    
    // 1) 보낼 JSON 문자열 정의 (큰 따옴표는 백슬래시로 이스케이프)
    int jsonDataLen = snprintf(
 8004df0:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8004df4:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004e04:	4a38      	ldr	r2, [pc, #224]	@ (8004ee8 <Server_Send_Boot+0x1f0>)
 8004e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e0a:	f008 fe0b 	bl	800da24 <sniprintf>
 8004e0e:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
        sizeof(jsonData), 
        "{\\\"token\\\":\\\"%s\\\"\\,\\\"articleid_p\\\":\\\"%s\\\"\\,\\\"articleid\\\":\\\"%s\\\"}",
        token, macP, macP
    );

    if (jsonDataLen < 0 || jsonDataLen >= (int)sizeof(jsonData)) 
 8004e12:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db03      	blt.n	8004e22 <Server_Send_Boot+0x12a>
 8004e1a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8004e1e:	2bff      	cmp	r3, #255	@ 0xff
 8004e20:	dd04      	ble.n	8004e2c <Server_Send_Boot+0x134>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8004e22:	f7fe f967 	bl	80030f4 <Error_Handler>
        result = AT_ERROR; // 실패 코드
 8004e26:	2301      	movs	r3, #1
 8004e28:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }
    
    char atCmd[512]; // 충분히 큰 버퍼

    int fullJson = snprintf(atCmd, sizeof(atCmd),
 8004e2c:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8004e30:	1d38      	adds	r0, r7, #4
 8004e32:	4a2e      	ldr	r2, [pc, #184]	@ (8004eec <Server_Send_Boot+0x1f4>)
 8004e34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e38:	f008 fdf4 	bl	800da24 <sniprintf>
 8004e3c:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
        "AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/boot\",\"dev-api.andamiro.net\",\"/test/boot\",2,\"%s\"\r\n",
        jsonData);

    if (fullJson < 0 || fullJson >= (int)sizeof(atCmd)) 
 8004e40:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	db04      	blt.n	8004e52 <Server_Send_Boot+0x15a>
 8004e48:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e50:	db04      	blt.n	8004e5c <Server_Send_Boot+0x164>
    {
        // snprintf 실패 또는 버퍼 부족
        Error_Handler();
 8004e52:	f7fe f94f 	bl	80030f4 <Error_Handler>
        result = AT_ERROR; // 실패 코드
 8004e56:	2301      	movs	r3, #1
 8004e58:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }

    // AT 명령어 전송 및 응답 처리
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(atCmd);
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc faae 	bl	80013c0 <ESP_AT_Send_Command_Sync_Get_Result>
 8004e64:	f8c7 0304 	str.w	r0, [r7, #772]	@ 0x304
    
    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL) 
 8004e68:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d018      	beq.n	8004ea2 <Server_Send_Boot+0x1aa>
 8004e70:	491f      	ldr	r1, [pc, #124]	@ (8004ef0 <Server_Send_Boot+0x1f8>)
 8004e72:	f8d7 0304 	ldr.w	r0, [r7, #772]	@ 0x304
 8004e76:	f008 ff1f 	bl	800dcb8 <strstr>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <Server_Send_Boot+0x1aa>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8004e80:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 8004e84:	f7fb f9ae 	bl	80001e4 <strlen>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 8004e94:	4813      	ldr	r0, [pc, #76]	@ (8004ee4 <Server_Send_Boot+0x1ec>)
 8004e96:	f004 f9f5 	bl	8009284 <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8004ea0:	e00f      	b.n	8004ec2 <Server_Send_Boot+0x1ca>
    } 
    else 
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8004ea2:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8004ea6:	f7fb f99d 	bl	80001e4 <strlen>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb2:	f8d7 1328 	ldr.w	r1, [r7, #808]	@ 0x328
 8004eb6:	480b      	ldr	r0, [pc, #44]	@ (8004ee4 <Server_Send_Boot+0x1ec>)
 8004eb8:	f004 f9e4 	bl	8009284 <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }

    return result; // 결과 반환
 8004ec2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f507 774e 	add.w	r7, r7, #824	@ 0x338
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	080108d0 	.word	0x080108d0
 8004ed4:	080108f0 	.word	0x080108f0
 8004ed8:	0801090c 	.word	0x0801090c
 8004edc:	08010928 	.word	0x08010928
 8004ee0:	0801094c 	.word	0x0801094c
 8004ee4:	20000f10 	.word	0x20000f10
 8004ee8:	08010970 	.word	0x08010970
 8004eec:	080109b4 	.word	0x080109b4
 8004ef0:	08010a1c 	.word	0x08010a1c

08004ef4 <SIM_M_PWR_KEY_Init>:
// ──────────────────────────────────────────────────────────────────────────────
// ──────────────────────────────────────────────────────────────────────────────

// M_PWR_KEY 초기화
void SIM_M_PWR_KEY_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0

    // M_PWR_KEY_GPIO_Port->BSRR = (1U << (11 + 16));  // ODR[11] ← 0
    M_PWR_KEY_GPIO_Port->BSRR = (1U << 11); // set PE11
#else
    // HAL라이브러리 사용해서 GPIO 초기화
    HAL_GPIO_WritePin(M_PWR_KEY_GPIO_Port, M_PWR_KEY_Pin, GPIO_PIN_SET);
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004efe:	480a      	ldr	r0, [pc, #40]	@ (8004f28 <SIM_M_PWR_KEY_Init+0x34>)
 8004f00:	f000 ffd6 	bl	8005eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(M_PWR_KEY_GPIO_Port, M_PWR_KEY_Pin, GPIO_PIN_RESET);
 8004f04:	2200      	movs	r2, #0
 8004f06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f0a:	4807      	ldr	r0, [pc, #28]	@ (8004f28 <SIM_M_PWR_KEY_Init+0x34>)
 8004f0c:	f000 ffd0 	bl	8005eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1100); // 1.1초 대기
 8004f10:	f240 404c 	movw	r0, #1100	@ 0x44c
 8004f14:	f000 fc68 	bl	80057e8 <HAL_Delay>
    HAL_GPIO_WritePin(M_PWR_KEY_GPIO_Port, M_PWR_KEY_Pin, GPIO_PIN_SET);
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f1e:	4802      	ldr	r0, [pc, #8]	@ (8004f28 <SIM_M_PWR_KEY_Init+0x34>)
 8004f20:	f000 ffc6 	bl	8005eb0 <HAL_GPIO_WritePin>


#endif
}
 8004f24:	bf00      	nop
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000

08004f2c <SIM_PWR_ON>:

void SIM_PWR_ON(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
    // M_PWR_KEY 핀을 HIGH로 설정하여 SIM 모듈 전원 ON
    M_PWR_KEY_GPIO_Port->BSRR = (1U << 11); // set PE11
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <SIM_PWR_ON+0x18>)
 8004f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f36:	619a      	str	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000

08004f48 <SIM_PWR_OFF>:

void SIM_PWR_OFF(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
    // M_PWR_KEY 핀을 LOW로 설정하여 SIM 모듈 전원 OFF
    M_PWR_KEY_GPIO_Port->BSRR = (1U << (11 + 16)); // reset PE11
 8004f4c:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <SIM_PWR_OFF+0x18>)
 8004f4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004f52:	619a      	str	r2, [r3, #24]
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000

08004f64 <SIM_UART_ReadData>:
 * @param  overall_timeout_ms  전체 읽기 최대 대기 시간 (ms)
 * @param  byte_timeout_ms     바이트당 최대 대기 시간 (ms)
 * @retval 실제 읽어온 바이트 수 (널종료 문자는 제외)
 */
size_t SIM_UART_ReadData(char *buf, size_t buf_len, uint32_t overall_timeout_ms, uint32_t byte_timeout_ms)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
    uint32_t start = HAL_GetTick();
 8004f72:	f000 fc2d 	bl	80057d0 <HAL_GetTick>
 8004f76:	61f8      	str	r0, [r7, #28]
    size_t   pos   = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61bb      	str	r3, [r7, #24]
    uint8_t  ch;

    // 읽기 루프
    while ((HAL_GetTick() - start) < overall_timeout_ms && pos < buf_len - 1)
 8004f7c:	e013      	b.n	8004fa6 <SIM_UART_ReadData+0x42>
    {
        // 1바이트 받기 (타임아웃 byte_timeout_ms)
        if (HAL_UART_Receive(&huart3, &ch, 1, byte_timeout_ms) == HAL_OK)
 8004f7e:	f107 0117 	add.w	r1, r7, #23
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4813      	ldr	r0, [pc, #76]	@ (8004fd4 <SIM_UART_ReadData+0x70>)
 8004f88:	f004 fa07 	bl	800939a <HAL_UART_Receive>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <SIM_UART_ReadData+0x42>
        {
            buf[pos++] = (char)ch;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	61ba      	str	r2, [r7, #24]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	7dfa      	ldrb	r2, [r7, #23]
 8004f9e:	701a      	strb	r2, [r3, #0]
            start = HAL_GetTick(); // 새 데이터 수신 시 전체 타임아웃 리셋
 8004fa0:	f000 fc16 	bl	80057d0 <HAL_GetTick>
 8004fa4:	61f8      	str	r0, [r7, #28]
    while ((HAL_GetTick() - start) < overall_timeout_ms && pos < buf_len - 1)
 8004fa6:	f000 fc13 	bl	80057d0 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d904      	bls.n	8004fc0 <SIM_UART_ReadData+0x5c>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d3de      	bcc.n	8004f7e <SIM_UART_ReadData+0x1a>
        }
        // else: byte_timeout_ms 경과 시 재시도, overall_timeout_ms 만료 전까지
    }

    buf[pos] = '\0'; // 널종료
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
    return pos;
 8004fca:	69bb      	ldr	r3, [r7, #24]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000fa0 	.word	0x20000fa0

08004fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <HAL_MspInit+0x4c>)
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8005024 <HAL_MspInit+0x4c>)
 8004fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <HAL_MspInit+0x4c>)
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <HAL_MspInit+0x4c>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	4a08      	ldr	r2, [pc, #32]	@ (8005024 <HAL_MspInit+0x4c>)
 8005004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005008:	6413      	str	r3, [r2, #64]	@ 0x40
 800500a:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_MspInit+0x4c>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800

08005028 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a10      	ldr	r2, [pc, #64]	@ (8005084 <HAL_RTC_MspInit+0x5c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d119      	bne.n	800507c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005048:	2302      	movs	r3, #2
 800504a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800504c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005050:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	4618      	mov	r0, r3
 8005058:	f001 fbdc 	bl	8006814 <HAL_RCCEx_PeriphCLKConfig>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005062:	f7fe f847 	bl	80030f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005066:	4b08      	ldr	r3, [pc, #32]	@ (8005088 <HAL_RTC_MspInit+0x60>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	2100      	movs	r1, #0
 8005070:	2029      	movs	r0, #41	@ 0x29
 8005072:	f000 fcb8 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005076:	2029      	movs	r0, #41	@ 0x29
 8005078:	f000 fcd1 	bl	8005a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800507c:	bf00      	nop
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40002800 	.word	0x40002800
 8005088:	42470e3c 	.word	0x42470e3c

0800508c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	@ 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	60da      	str	r2, [r3, #12]
 80050a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a28      	ldr	r2, [pc, #160]	@ (800514c <HAL_SD_MspInit+0xc0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d14a      	bne.n	8005144 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b6:	4a26      	ldr	r2, [pc, #152]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80050bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80050be:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	4b20      	ldr	r3, [pc, #128]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050da:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	4b19      	ldr	r3, [pc, #100]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050f0:	f043 0308 	orr.w	r3, r3, #8
 80050f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050f6:	4b16      	ldr	r3, [pc, #88]	@ (8005150 <HAL_SD_MspInit+0xc4>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005102:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005108:	2302      	movs	r3, #2
 800510a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005110:	2303      	movs	r3, #3
 8005112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005114:	230c      	movs	r3, #12
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	4619      	mov	r1, r3
 800511e:	480d      	ldr	r0, [pc, #52]	@ (8005154 <HAL_SD_MspInit+0xc8>)
 8005120:	f000 fd2a 	bl	8005b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005124:	2304      	movs	r3, #4
 8005126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005130:	2303      	movs	r3, #3
 8005132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005134:	230c      	movs	r3, #12
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	4619      	mov	r1, r3
 800513e:	4806      	ldr	r0, [pc, #24]	@ (8005158 <HAL_SD_MspInit+0xcc>)
 8005140:	f000 fd1a 	bl	8005b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005144:	bf00      	nop
 8005146:	3728      	adds	r7, #40	@ 0x28
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40023800 	.word	0x40023800
 8005154:	40020800 	.word	0x40020800
 8005158:	40020c00 	.word	0x40020c00

0800515c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	@ 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <HAL_SPI_MspInit+0x84>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d12b      	bne.n	80051d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	4b18      	ldr	r3, [pc, #96]	@ (80051e4 <HAL_SPI_MspInit+0x88>)
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	4a17      	ldr	r2, [pc, #92]	@ (80051e4 <HAL_SPI_MspInit+0x88>)
 8005188:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800518c:	6453      	str	r3, [r2, #68]	@ 0x44
 800518e:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <HAL_SPI_MspInit+0x88>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005192:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	4b11      	ldr	r3, [pc, #68]	@ (80051e4 <HAL_SPI_MspInit+0x88>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	4a10      	ldr	r2, [pc, #64]	@ (80051e4 <HAL_SPI_MspInit+0x88>)
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051aa:	4b0e      	ldr	r3, [pc, #56]	@ (80051e4 <HAL_SPI_MspInit+0x88>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80051b6:	23e0      	movs	r3, #224	@ 0xe0
 80051b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ba:	2302      	movs	r3, #2
 80051bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c2:	2303      	movs	r3, #3
 80051c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051c6:	2305      	movs	r3, #5
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ca:	f107 0314 	add.w	r3, r7, #20
 80051ce:	4619      	mov	r1, r3
 80051d0:	4805      	ldr	r0, [pc, #20]	@ (80051e8 <HAL_SPI_MspInit+0x8c>)
 80051d2:	f000 fcd1 	bl	8005b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80051d6:	bf00      	nop
 80051d8:	3728      	adds	r7, #40	@ 0x28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40013000 	.word	0x40013000
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40020000 	.word	0x40020000

080051ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005234 <HAL_TIM_Base_MspInit+0x48>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d115      	bne.n	800522a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <HAL_TIM_Base_MspInit+0x4c>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	4a0c      	ldr	r2, [pc, #48]	@ (8005238 <HAL_TIM_Base_MspInit+0x4c>)
 8005208:	f043 0320 	orr.w	r3, r3, #32
 800520c:	6413      	str	r3, [r2, #64]	@ 0x40
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <HAL_TIM_Base_MspInit+0x4c>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800521a:	2200      	movs	r2, #0
 800521c:	2100      	movs	r1, #0
 800521e:	2037      	movs	r0, #55	@ 0x37
 8005220:	f000 fbe1 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005224:	2037      	movs	r0, #55	@ 0x37
 8005226:	f000 fbfa 	bl	8005a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40001400 	.word	0x40001400
 8005238:	40023800 	.word	0x40023800

0800523c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b090      	sub	sp, #64	@ 0x40
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a71      	ldr	r2, [pc, #452]	@ (8005420 <HAL_UART_MspInit+0x1e4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d12c      	bne.n	80052b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	4b70      	ldr	r3, [pc, #448]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	4a6f      	ldr	r2, [pc, #444]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 8005268:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800526c:	6413      	str	r3, [r2, #64]	@ 0x40
 800526e:	4b6d      	ldr	r3, [pc, #436]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
 800527e:	4b69      	ldr	r3, [pc, #420]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005282:	4a68      	ldr	r2, [pc, #416]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6313      	str	r3, [r2, #48]	@ 0x30
 800528a:	4b66      	ldr	r3, [pc, #408]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ESP_2_TX_Pin|ESP_2_RX_Pin;
 8005296:	2303      	movs	r3, #3
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529a:	2302      	movs	r3, #2
 800529c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a2:	2303      	movs	r3, #3
 80052a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80052a6:	2308      	movs	r3, #8
 80052a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052ae:	4619      	mov	r1, r3
 80052b0:	485d      	ldr	r0, [pc, #372]	@ (8005428 <HAL_UART_MspInit+0x1ec>)
 80052b2:	f000 fc61 	bl	8005b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80052b6:	e0ae      	b.n	8005416 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5b      	ldr	r2, [pc, #364]	@ (800542c <HAL_UART_MspInit+0x1f0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d135      	bne.n	800532e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	623b      	str	r3, [r7, #32]
 80052c6:	4b57      	ldr	r3, [pc, #348]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	4a56      	ldr	r2, [pc, #344]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80052cc:	f043 0310 	orr.w	r3, r3, #16
 80052d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80052d2:	4b54      	ldr	r3, [pc, #336]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	4b50      	ldr	r3, [pc, #320]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	4a4f      	ldr	r2, [pc, #316]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80052ee:	4b4d      	ldr	r3, [pc, #308]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80052fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80052fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005300:	2302      	movs	r3, #2
 8005302:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005304:	2300      	movs	r3, #0
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005308:	2303      	movs	r3, #3
 800530a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800530c:	2307      	movs	r3, #7
 800530e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005310:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005314:	4619      	mov	r1, r3
 8005316:	4844      	ldr	r0, [pc, #272]	@ (8005428 <HAL_UART_MspInit+0x1ec>)
 8005318:	f000 fc2e 	bl	8005b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800531c:	2200      	movs	r2, #0
 800531e:	2100      	movs	r1, #0
 8005320:	2025      	movs	r0, #37	@ 0x25
 8005322:	f000 fb60 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005326:	2025      	movs	r0, #37	@ 0x25
 8005328:	f000 fb79 	bl	8005a1e <HAL_NVIC_EnableIRQ>
}
 800532c:	e073      	b.n	8005416 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART2)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3f      	ldr	r2, [pc, #252]	@ (8005430 <HAL_UART_MspInit+0x1f4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d134      	bne.n	80053a2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005338:	2300      	movs	r3, #0
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	4b39      	ldr	r3, [pc, #228]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	4a38      	ldr	r2, [pc, #224]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 8005342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005346:	6413      	str	r3, [r2, #64]	@ 0x40
 8005348:	4b36      	ldr	r3, [pc, #216]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	4b32      	ldr	r3, [pc, #200]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	4a31      	ldr	r2, [pc, #196]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6313      	str	r3, [r2, #48]	@ 0x30
 8005364:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8005370:	230c      	movs	r3, #12
 8005372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005374:	2302      	movs	r3, #2
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005378:	2300      	movs	r3, #0
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537c:	2303      	movs	r3, #3
 800537e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005380:	2307      	movs	r3, #7
 8005382:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005384:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005388:	4619      	mov	r1, r3
 800538a:	4827      	ldr	r0, [pc, #156]	@ (8005428 <HAL_UART_MspInit+0x1ec>)
 800538c:	f000 fbf4 	bl	8005b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005390:	2200      	movs	r2, #0
 8005392:	2100      	movs	r1, #0
 8005394:	2026      	movs	r0, #38	@ 0x26
 8005396:	f000 fb26 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800539a:	2026      	movs	r0, #38	@ 0x26
 800539c:	f000 fb3f 	bl	8005a1e <HAL_NVIC_EnableIRQ>
}
 80053a0:	e039      	b.n	8005416 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART3)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a23      	ldr	r2, [pc, #140]	@ (8005434 <HAL_UART_MspInit+0x1f8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d134      	bne.n	8005416 <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80053b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80053bc:	4b19      	ldr	r3, [pc, #100]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	4a14      	ldr	r2, [pc, #80]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80053d8:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <HAL_UART_MspInit+0x1e8>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 80053e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ea:	2302      	movs	r3, #2
 80053ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f2:	2303      	movs	r3, #3
 80053f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053f6:	2307      	movs	r3, #7
 80053f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80053fe:	4619      	mov	r1, r3
 8005400:	480d      	ldr	r0, [pc, #52]	@ (8005438 <HAL_UART_MspInit+0x1fc>)
 8005402:	f000 fbb9 	bl	8005b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005406:	2200      	movs	r2, #0
 8005408:	2100      	movs	r1, #0
 800540a:	2027      	movs	r0, #39	@ 0x27
 800540c:	f000 faeb 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005410:	2027      	movs	r0, #39	@ 0x27
 8005412:	f000 fb04 	bl	8005a1e <HAL_NVIC_EnableIRQ>
}
 8005416:	bf00      	nop
 8005418:	3740      	adds	r7, #64	@ 0x40
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40004c00 	.word	0x40004c00
 8005424:	40023800 	.word	0x40023800
 8005428:	40020000 	.word	0x40020000
 800542c:	40011000 	.word	0x40011000
 8005430:	40004400 	.word	0x40004400
 8005434:	40004800 	.word	0x40004800
 8005438:	40020400 	.word	0x40020400

0800543c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <NMI_Handler+0x4>

08005444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <HardFault_Handler+0x4>

0800544c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <MemManage_Handler+0x4>

08005454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005458:	bf00      	nop
 800545a:	e7fd      	b.n	8005458 <BusFault_Handler+0x4>

0800545c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <UsageFault_Handler+0x4>

08005464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005476:	bf00      	nop
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005492:	f000 f989 	bl	80057a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <USART1_IRQHandler+0x10>)
 80054a2:	f004 f86d 	bl	8009580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000f10 	.word	0x20000f10

080054b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054b4:	4802      	ldr	r0, [pc, #8]	@ (80054c0 <USART2_IRQHandler+0x10>)
 80054b6:	f004 f863 	bl	8009580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000f58 	.word	0x20000f58

080054c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80054c8:	4802      	ldr	r0, [pc, #8]	@ (80054d4 <USART3_IRQHandler+0x10>)
 80054ca:	f004 f859 	bl	8009580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000fa0 	.word	0x20000fa0

080054d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80054dc:	4802      	ldr	r0, [pc, #8]	@ (80054e8 <RTC_Alarm_IRQHandler+0x10>)
 80054de:	f001 fcc7 	bl	8006e70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80054e2:	bf00      	nop
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000d84 	.word	0x20000d84

080054ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80054f0:	4802      	ldr	r0, [pc, #8]	@ (80054fc <TIM7_IRQHandler+0x10>)
 80054f2:	f003 fc29 	bl	8008d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000e80 	.word	0x20000e80

08005500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return 1;
 8005504:	2301      	movs	r3, #1
}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <_kill>:

int _kill(int pid, int sig)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800551a:	f008 fc29 	bl	800dd70 <__errno>
 800551e:	4603      	mov	r3, r0
 8005520:	2216      	movs	r2, #22
 8005522:	601a      	str	r2, [r3, #0]
  return -1;
 8005524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_exit>:

void _exit (int status)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005538:	f04f 31ff 	mov.w	r1, #4294967295
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ffe7 	bl	8005510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <_exit+0x12>

08005546 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b086      	sub	sp, #24
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e00a      	b.n	800556e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005558:	f3af 8000 	nop.w
 800555c:	4601      	mov	r1, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	60ba      	str	r2, [r7, #8]
 8005564:	b2ca      	uxtb	r2, r1
 8005566:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3301      	adds	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	dbf0      	blt.n	8005558 <_read+0x12>
  }

  return len;
 8005576:	687b      	ldr	r3, [r7, #4]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e009      	b.n	80055a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	60ba      	str	r2, [r7, #8]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	3301      	adds	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	dbf1      	blt.n	8005592 <_write+0x12>
  }
  return len;
 80055ae:	687b      	ldr	r3, [r7, #4]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <_close>:

int _close(int file)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80055e0:	605a      	str	r2, [r3, #4]
  return 0;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <_isatty>:

int _isatty(int file)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80055f8:	2301      	movs	r3, #1
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005628:	4a14      	ldr	r2, [pc, #80]	@ (800567c <_sbrk+0x5c>)
 800562a:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <_sbrk+0x60>)
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005634:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <_sbrk+0x64>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800563c:	4b11      	ldr	r3, [pc, #68]	@ (8005684 <_sbrk+0x64>)
 800563e:	4a12      	ldr	r2, [pc, #72]	@ (8005688 <_sbrk+0x68>)
 8005640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005642:	4b10      	ldr	r3, [pc, #64]	@ (8005684 <_sbrk+0x64>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4413      	add	r3, r2
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	429a      	cmp	r2, r3
 800564e:	d207      	bcs.n	8005660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005650:	f008 fb8e 	bl	800dd70 <__errno>
 8005654:	4603      	mov	r3, r0
 8005656:	220c      	movs	r2, #12
 8005658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	e009      	b.n	8005674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005660:	4b08      	ldr	r3, [pc, #32]	@ (8005684 <_sbrk+0x64>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005666:	4b07      	ldr	r3, [pc, #28]	@ (8005684 <_sbrk+0x64>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	4a05      	ldr	r2, [pc, #20]	@ (8005684 <_sbrk+0x64>)
 8005670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005672:	68fb      	ldr	r3, [r7, #12]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20020000 	.word	0x20020000
 8005680:	00000400 	.word	0x00000400
 8005684:	20001078 	.word	0x20001078
 8005688:	20001210 	.word	0x20001210

0800568c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <SystemInit+0x20>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	4a05      	ldr	r2, [pc, #20]	@ (80056ac <SystemInit+0x20>)
 8005698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800569c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	e000ed00 	.word	0xe000ed00

080056b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80056b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80056b4:	f7ff ffea 	bl	800568c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056b8:	480c      	ldr	r0, [pc, #48]	@ (80056ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80056ba:	490d      	ldr	r1, [pc, #52]	@ (80056f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80056bc:	4a0d      	ldr	r2, [pc, #52]	@ (80056f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80056be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056c0:	e002      	b.n	80056c8 <LoopCopyDataInit>

080056c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056c6:	3304      	adds	r3, #4

080056c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056cc:	d3f9      	bcc.n	80056c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ce:	4a0a      	ldr	r2, [pc, #40]	@ (80056f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80056d0:	4c0a      	ldr	r4, [pc, #40]	@ (80056fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80056d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056d4:	e001      	b.n	80056da <LoopFillZerobss>

080056d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056d8:	3204      	adds	r2, #4

080056da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056dc:	d3fb      	bcc.n	80056d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056de:	f008 fb4d 	bl	800dd7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056e2:	f7fd f965 	bl	80029b0 <main>
  bx  lr    
 80056e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80056e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056f0:	2000046c 	.word	0x2000046c
  ldr r2, =_sidata
 80056f4:	080116f4 	.word	0x080116f4
  ldr r2, =_sbss
 80056f8:	2000046c 	.word	0x2000046c
  ldr r4, =_ebss
 80056fc:	2000120c 	.word	0x2000120c

08005700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005700:	e7fe      	b.n	8005700 <ADC_IRQHandler>
	...

08005704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005708:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <HAL_Init+0x40>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a0d      	ldr	r2, [pc, #52]	@ (8005744 <HAL_Init+0x40>)
 800570e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <HAL_Init+0x40>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <HAL_Init+0x40>)
 800571a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800571e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005720:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <HAL_Init+0x40>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a07      	ldr	r2, [pc, #28]	@ (8005744 <HAL_Init+0x40>)
 8005726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800572a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800572c:	2003      	movs	r0, #3
 800572e:	f000 f94f 	bl	80059d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005732:	200f      	movs	r0, #15
 8005734:	f000 f808 	bl	8005748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005738:	f7ff fc4e 	bl	8004fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40023c00 	.word	0x40023c00

08005748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005750:	4b12      	ldr	r3, [pc, #72]	@ (800579c <HAL_InitTick+0x54>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b12      	ldr	r3, [pc, #72]	@ (80057a0 <HAL_InitTick+0x58>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4619      	mov	r1, r3
 800575a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800575e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f967 	bl	8005a3a <HAL_SYSTICK_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e00e      	b.n	8005794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b0f      	cmp	r3, #15
 800577a:	d80a      	bhi.n	8005792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800577c:	2200      	movs	r2, #0
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	f000 f92f 	bl	80059e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005788:	4a06      	ldr	r2, [pc, #24]	@ (80057a4 <HAL_InitTick+0x5c>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	e000      	b.n	8005794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000004 	.word	0x20000004
 80057a0:	2000040c 	.word	0x2000040c
 80057a4:	20000408 	.word	0x20000408

080057a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <HAL_IncTick+0x20>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_IncTick+0x24>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4413      	add	r3, r2
 80057b8:	4a04      	ldr	r2, [pc, #16]	@ (80057cc <HAL_IncTick+0x24>)
 80057ba:	6013      	str	r3, [r2, #0]
}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2000040c 	.word	0x2000040c
 80057cc:	20001080 	.word	0x20001080

080057d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  return uwTick;
 80057d4:	4b03      	ldr	r3, [pc, #12]	@ (80057e4 <HAL_GetTick+0x14>)
 80057d6:	681b      	ldr	r3, [r3, #0]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20001080 	.word	0x20001080

080057e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057f0:	f7ff ffee 	bl	80057d0 <HAL_GetTick>
 80057f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d005      	beq.n	800580e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005802:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <HAL_Delay+0x44>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800580e:	bf00      	nop
 8005810:	f7ff ffde 	bl	80057d0 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	429a      	cmp	r2, r3
 800581e:	d8f7      	bhi.n	8005810 <HAL_Delay+0x28>
  {
  }
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2000040c 	.word	0x2000040c

08005830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005840:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <__NVIC_SetPriorityGrouping+0x44>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800584c:	4013      	ands	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800585c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005862:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <__NVIC_SetPriorityGrouping+0x44>)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	60d3      	str	r3, [r2, #12]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800587c:	4b04      	ldr	r3, [pc, #16]	@ (8005890 <__NVIC_GetPriorityGrouping+0x18>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 0307 	and.w	r3, r3, #7
}
 8005886:	4618      	mov	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	db0b      	blt.n	80058be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	f003 021f 	and.w	r2, r3, #31
 80058ac:	4907      	ldr	r1, [pc, #28]	@ (80058cc <__NVIC_EnableIRQ+0x38>)
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	2001      	movs	r0, #1
 80058b6:	fa00 f202 	lsl.w	r2, r0, r2
 80058ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	e000e100 	.word	0xe000e100

080058d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	6039      	str	r1, [r7, #0]
 80058da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db0a      	blt.n	80058fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	490c      	ldr	r1, [pc, #48]	@ (800591c <__NVIC_SetPriority+0x4c>)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	440b      	add	r3, r1
 80058f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058f8:	e00a      	b.n	8005910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4908      	ldr	r1, [pc, #32]	@ (8005920 <__NVIC_SetPriority+0x50>)
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3b04      	subs	r3, #4
 8005908:	0112      	lsls	r2, r2, #4
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	440b      	add	r3, r1
 800590e:	761a      	strb	r2, [r3, #24]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000e100 	.word	0xe000e100
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005924:	b480      	push	{r7}
 8005926:	b089      	sub	sp, #36	@ 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	2b04      	cmp	r3, #4
 8005940:	bf28      	it	cs
 8005942:	2304      	movcs	r3, #4
 8005944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3304      	adds	r3, #4
 800594a:	2b06      	cmp	r3, #6
 800594c:	d902      	bls.n	8005954 <NVIC_EncodePriority+0x30>
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3b03      	subs	r3, #3
 8005952:	e000      	b.n	8005956 <NVIC_EncodePriority+0x32>
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	401a      	ands	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800596c:	f04f 31ff 	mov.w	r1, #4294967295
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	fa01 f303 	lsl.w	r3, r1, r3
 8005976:	43d9      	mvns	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800597c:	4313      	orrs	r3, r2
         );
}
 800597e:	4618      	mov	r0, r3
 8005980:	3724      	adds	r7, #36	@ 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800599c:	d301      	bcc.n	80059a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800599e:	2301      	movs	r3, #1
 80059a0:	e00f      	b.n	80059c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059a2:	4a0a      	ldr	r2, [pc, #40]	@ (80059cc <SysTick_Config+0x40>)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059aa:	210f      	movs	r1, #15
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	f7ff ff8e 	bl	80058d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059b4:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <SysTick_Config+0x40>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ba:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <SysTick_Config+0x40>)
 80059bc:	2207      	movs	r2, #7
 80059be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	e000e010 	.word	0xe000e010

080059d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff ff29 	bl	8005830 <__NVIC_SetPriorityGrouping>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	4603      	mov	r3, r0
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059f8:	f7ff ff3e 	bl	8005878 <__NVIC_GetPriorityGrouping>
 80059fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	6978      	ldr	r0, [r7, #20]
 8005a04:	f7ff ff8e 	bl	8005924 <NVIC_EncodePriority>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff5d 	bl	80058d0 <__NVIC_SetPriority>
}
 8005a16:	bf00      	nop
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	4603      	mov	r3, r0
 8005a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff ff31 	bl	8005894 <__NVIC_EnableIRQ>
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff ffa2 	bl	800598c <SysTick_Config>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a60:	f7ff feb6 	bl	80057d0 <HAL_GetTick>
 8005a64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d008      	beq.n	8005a84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2280      	movs	r2, #128	@ 0x80
 8005a76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e052      	b.n	8005b2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0216 	bic.w	r2, r2, #22
 8005a92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005aa2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <HAL_DMA_Abort+0x62>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0208 	bic.w	r2, r2, #8
 8005ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ad4:	e013      	b.n	8005afe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ad6:	f7ff fe7b 	bl	80057d0 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d90c      	bls.n	8005afe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2203      	movs	r2, #3
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e015      	b.n	8005b2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e4      	bne.n	8005ad6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b10:	223f      	movs	r2, #63	@ 0x3f
 8005b12:	409a      	lsls	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d004      	beq.n	8005b50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2280      	movs	r2, #128	@ 0x80
 8005b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e00c      	b.n	8005b6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2205      	movs	r2, #5
 8005b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b089      	sub	sp, #36	@ 0x24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e16b      	b.n	8005e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b94:	2201      	movs	r2, #1
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	f040 815a 	bne.w	8005e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d005      	beq.n	8005bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d130      	bne.n	8005c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4013      	ands	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c00:	2201      	movs	r2, #1
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	091b      	lsrs	r3, r3, #4
 8005c16:	f003 0201 	and.w	r2, r3, #1
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d017      	beq.n	8005c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	2203      	movs	r2, #3
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d123      	bne.n	8005cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	08da      	lsrs	r2, r3, #3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3208      	adds	r2, #8
 8005c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	220f      	movs	r2, #15
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	08da      	lsrs	r2, r3, #3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3208      	adds	r2, #8
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	2203      	movs	r2, #3
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f003 0203 	and.w	r2, r3, #3
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80b4 	beq.w	8005e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	4b60      	ldr	r3, [pc, #384]	@ (8005e84 <HAL_GPIO_Init+0x30c>)
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	4a5f      	ldr	r2, [pc, #380]	@ (8005e84 <HAL_GPIO_Init+0x30c>)
 8005d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005e84 <HAL_GPIO_Init+0x30c>)
 8005d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8005e88 <HAL_GPIO_Init+0x310>)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	3302      	adds	r3, #2
 8005d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	220f      	movs	r2, #15
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a52      	ldr	r2, [pc, #328]	@ (8005e8c <HAL_GPIO_Init+0x314>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d02b      	beq.n	8005d9e <HAL_GPIO_Init+0x226>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a51      	ldr	r2, [pc, #324]	@ (8005e90 <HAL_GPIO_Init+0x318>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d025      	beq.n	8005d9a <HAL_GPIO_Init+0x222>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a50      	ldr	r2, [pc, #320]	@ (8005e94 <HAL_GPIO_Init+0x31c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01f      	beq.n	8005d96 <HAL_GPIO_Init+0x21e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a4f      	ldr	r2, [pc, #316]	@ (8005e98 <HAL_GPIO_Init+0x320>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d019      	beq.n	8005d92 <HAL_GPIO_Init+0x21a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a4e      	ldr	r2, [pc, #312]	@ (8005e9c <HAL_GPIO_Init+0x324>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_GPIO_Init+0x216>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a4d      	ldr	r2, [pc, #308]	@ (8005ea0 <HAL_GPIO_Init+0x328>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00d      	beq.n	8005d8a <HAL_GPIO_Init+0x212>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a4c      	ldr	r2, [pc, #304]	@ (8005ea4 <HAL_GPIO_Init+0x32c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <HAL_GPIO_Init+0x20e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a4b      	ldr	r2, [pc, #300]	@ (8005ea8 <HAL_GPIO_Init+0x330>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <HAL_GPIO_Init+0x20a>
 8005d7e:	2307      	movs	r3, #7
 8005d80:	e00e      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d82:	2308      	movs	r3, #8
 8005d84:	e00c      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d86:	2306      	movs	r3, #6
 8005d88:	e00a      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d8a:	2305      	movs	r3, #5
 8005d8c:	e008      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d8e:	2304      	movs	r3, #4
 8005d90:	e006      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d92:	2303      	movs	r3, #3
 8005d94:	e004      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e002      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <HAL_GPIO_Init+0x228>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	f002 0203 	and.w	r2, r2, #3
 8005da6:	0092      	lsls	r2, r2, #2
 8005da8:	4093      	lsls	r3, r2
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005db0:	4935      	ldr	r1, [pc, #212]	@ (8005e88 <HAL_GPIO_Init+0x310>)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	089b      	lsrs	r3, r3, #2
 8005db6:	3302      	adds	r3, #2
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005de2:	4a32      	ldr	r2, [pc, #200]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005de8:	4b30      	ldr	r3, [pc, #192]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	43db      	mvns	r3, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4013      	ands	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e0c:	4a27      	ldr	r2, [pc, #156]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e12:	4b26      	ldr	r3, [pc, #152]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e36:	4a1d      	ldr	r2, [pc, #116]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e60:	4a12      	ldr	r2, [pc, #72]	@ (8005eac <HAL_GPIO_Init+0x334>)
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b0f      	cmp	r3, #15
 8005e70:	f67f ae90 	bls.w	8005b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	3724      	adds	r7, #36	@ 0x24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800
 8005e88:	40013800 	.word	0x40013800
 8005e8c:	40020000 	.word	0x40020000
 8005e90:	40020400 	.word	0x40020400
 8005e94:	40020800 	.word	0x40020800
 8005e98:	40020c00 	.word	0x40020c00
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40021400 	.word	0x40021400
 8005ea4:	40021800 	.word	0x40021800
 8005ea8:	40021c00 	.word	0x40021c00
 8005eac:	40013c00 	.word	0x40013c00

08005eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ec0:	787b      	ldrb	r3, [r7, #1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ecc:	e003      	b.n	8005ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ece:	887b      	ldrh	r3, [r7, #2]
 8005ed0:	041a      	lsls	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	619a      	str	r2, [r3, #24]
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e267      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d075      	beq.n	8005fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f02:	4b88      	ldr	r3, [pc, #544]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d00c      	beq.n	8005f28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f0e:	4b85      	ldr	r3, [pc, #532]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d112      	bne.n	8005f40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f1a:	4b82      	ldr	r3, [pc, #520]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f26:	d10b      	bne.n	8005f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f28:	4b7e      	ldr	r3, [pc, #504]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d05b      	beq.n	8005fec <HAL_RCC_OscConfig+0x108>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d157      	bne.n	8005fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e242      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f48:	d106      	bne.n	8005f58 <HAL_RCC_OscConfig+0x74>
 8005f4a:	4b76      	ldr	r3, [pc, #472]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a75      	ldr	r2, [pc, #468]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e01d      	b.n	8005f94 <HAL_RCC_OscConfig+0xb0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x98>
 8005f62:	4b70      	ldr	r3, [pc, #448]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a6f      	ldr	r2, [pc, #444]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6c      	ldr	r2, [pc, #432]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e00b      	b.n	8005f94 <HAL_RCC_OscConfig+0xb0>
 8005f7c:	4b69      	ldr	r3, [pc, #420]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a68      	ldr	r2, [pc, #416]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	4b66      	ldr	r3, [pc, #408]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a65      	ldr	r2, [pc, #404]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d013      	beq.n	8005fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9c:	f7ff fc18 	bl	80057d0 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa4:	f7ff fc14 	bl	80057d0 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	@ 0x64
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e207      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCC_OscConfig+0xc0>
 8005fc2:	e014      	b.n	8005fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc4:	f7ff fc04 	bl	80057d0 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fcc:	f7ff fc00 	bl	80057d0 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b64      	cmp	r3, #100	@ 0x64
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e1f3      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fde:	4b51      	ldr	r3, [pc, #324]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0xe8>
 8005fea:	e000      	b.n	8005fee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d063      	beq.n	80060c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006006:	4b47      	ldr	r3, [pc, #284]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800600e:	2b08      	cmp	r3, #8
 8006010:	d11c      	bne.n	800604c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006012:	4b44      	ldr	r3, [pc, #272]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d116      	bne.n	800604c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800601e:	4b41      	ldr	r3, [pc, #260]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <HAL_RCC_OscConfig+0x152>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d001      	beq.n	8006036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e1c7      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006036:	4b3b      	ldr	r3, [pc, #236]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4937      	ldr	r1, [pc, #220]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006046:	4313      	orrs	r3, r2
 8006048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800604a:	e03a      	b.n	80060c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d020      	beq.n	8006096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006054:	4b34      	ldr	r3, [pc, #208]	@ (8006128 <HAL_RCC_OscConfig+0x244>)
 8006056:	2201      	movs	r2, #1
 8006058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605a:	f7ff fbb9 	bl	80057d0 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006062:	f7ff fbb5 	bl	80057d0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e1a8      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006074:	4b2b      	ldr	r3, [pc, #172]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f0      	beq.n	8006062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006080:	4b28      	ldr	r3, [pc, #160]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4925      	ldr	r1, [pc, #148]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 8006090:	4313      	orrs	r3, r2
 8006092:	600b      	str	r3, [r1, #0]
 8006094:	e015      	b.n	80060c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006096:	4b24      	ldr	r3, [pc, #144]	@ (8006128 <HAL_RCC_OscConfig+0x244>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609c:	f7ff fb98 	bl	80057d0 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a4:	f7ff fb94 	bl	80057d0 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e187      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d036      	beq.n	800613c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d6:	4b15      	ldr	r3, [pc, #84]	@ (800612c <HAL_RCC_OscConfig+0x248>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7ff fb78 	bl	80057d0 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e4:	f7ff fb74 	bl	80057d0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e167      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <HAL_RCC_OscConfig+0x240>)
 80060f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x200>
 8006102:	e01b      	b.n	800613c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006104:	4b09      	ldr	r3, [pc, #36]	@ (800612c <HAL_RCC_OscConfig+0x248>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610a:	f7ff fb61 	bl	80057d0 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006110:	e00e      	b.n	8006130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006112:	f7ff fb5d 	bl	80057d0 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d907      	bls.n	8006130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e150      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
 8006124:	40023800 	.word	0x40023800
 8006128:	42470000 	.word	0x42470000
 800612c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	4b88      	ldr	r3, [pc, #544]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1ea      	bne.n	8006112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8097 	beq.w	8006278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614e:	4b81      	ldr	r3, [pc, #516]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10f      	bne.n	800617a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	4b7d      	ldr	r3, [pc, #500]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	4a7c      	ldr	r2, [pc, #496]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006168:	6413      	str	r3, [r2, #64]	@ 0x40
 800616a:	4b7a      	ldr	r3, [pc, #488]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617a:	4b77      	ldr	r3, [pc, #476]	@ (8006358 <HAL_RCC_OscConfig+0x474>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d118      	bne.n	80061b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006186:	4b74      	ldr	r3, [pc, #464]	@ (8006358 <HAL_RCC_OscConfig+0x474>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a73      	ldr	r2, [pc, #460]	@ (8006358 <HAL_RCC_OscConfig+0x474>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006192:	f7ff fb1d 	bl	80057d0 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619a:	f7ff fb19 	bl	80057d0 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e10c      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006358 <HAL_RCC_OscConfig+0x474>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d106      	bne.n	80061ce <HAL_RCC_OscConfig+0x2ea>
 80061c0:	4b64      	ldr	r3, [pc, #400]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c4:	4a63      	ldr	r2, [pc, #396]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80061cc:	e01c      	b.n	8006208 <HAL_RCC_OscConfig+0x324>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCC_OscConfig+0x30c>
 80061d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061da:	4a5e      	ldr	r2, [pc, #376]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061dc:	f043 0304 	orr.w	r3, r3, #4
 80061e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ee:	e00b      	b.n	8006208 <HAL_RCC_OscConfig+0x324>
 80061f0:	4b58      	ldr	r3, [pc, #352]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f4:	4a57      	ldr	r2, [pc, #348]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061f6:	f023 0301 	bic.w	r3, r3, #1
 80061fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80061fc:	4b55      	ldr	r3, [pc, #340]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006200:	4a54      	ldr	r2, [pc, #336]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006202:	f023 0304 	bic.w	r3, r3, #4
 8006206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d015      	beq.n	800623c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006210:	f7ff fade 	bl	80057d0 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006216:	e00a      	b.n	800622e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006218:	f7ff fada 	bl	80057d0 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e0cb      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	4b49      	ldr	r3, [pc, #292]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ee      	beq.n	8006218 <HAL_RCC_OscConfig+0x334>
 800623a:	e014      	b.n	8006266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800623c:	f7ff fac8 	bl	80057d0 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006242:	e00a      	b.n	800625a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006244:	f7ff fac4 	bl	80057d0 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e0b5      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625a:	4b3e      	ldr	r3, [pc, #248]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1ee      	bne.n	8006244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d105      	bne.n	8006278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800626c:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 800626e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006270:	4a38      	ldr	r2, [pc, #224]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80a1 	beq.w	80063c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006282:	4b34      	ldr	r3, [pc, #208]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 030c 	and.w	r3, r3, #12
 800628a:	2b08      	cmp	r3, #8
 800628c:	d05c      	beq.n	8006348 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d141      	bne.n	800631a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006296:	4b31      	ldr	r3, [pc, #196]	@ (800635c <HAL_RCC_OscConfig+0x478>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7ff fa98 	bl	80057d0 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a4:	f7ff fa94 	bl	80057d0 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e087      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b6:	4b27      	ldr	r3, [pc, #156]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69da      	ldr	r2, [r3, #28]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	019b      	lsls	r3, r3, #6
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	3b01      	subs	r3, #1
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	061b      	lsls	r3, r3, #24
 80062e6:	491b      	ldr	r1, [pc, #108]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062ec:	4b1b      	ldr	r3, [pc, #108]	@ (800635c <HAL_RCC_OscConfig+0x478>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f2:	f7ff fa6d 	bl	80057d0 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fa:	f7ff fa69 	bl	80057d0 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e05c      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630c:	4b11      	ldr	r3, [pc, #68]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x416>
 8006318:	e054      	b.n	80063c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631a:	4b10      	ldr	r3, [pc, #64]	@ (800635c <HAL_RCC_OscConfig+0x478>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7ff fa56 	bl	80057d0 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006328:	f7ff fa52 	bl	80057d0 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e045      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_RCC_OscConfig+0x470>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x444>
 8006346:	e03d      	b.n	80063c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d107      	bne.n	8006360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e038      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
 8006354:	40023800 	.word	0x40023800
 8006358:	40007000 	.word	0x40007000
 800635c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006360:	4b1b      	ldr	r3, [pc, #108]	@ (80063d0 <HAL_RCC_OscConfig+0x4ec>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d028      	beq.n	80063c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006378:	429a      	cmp	r2, r3
 800637a:	d121      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006386:	429a      	cmp	r2, r3
 8006388:	d11a      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006390:	4013      	ands	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006398:	4293      	cmp	r3, r2
 800639a:	d111      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	3b01      	subs	r3, #1
 80063aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063bc:	429a      	cmp	r2, r3
 80063be:	d001      	beq.n	80063c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40023800 	.word	0x40023800

080063d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0cc      	b.n	8006582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063e8:	4b68      	ldr	r3, [pc, #416]	@ (800658c <HAL_RCC_ClockConfig+0x1b8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d90c      	bls.n	8006410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f6:	4b65      	ldr	r3, [pc, #404]	@ (800658c <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b63      	ldr	r3, [pc, #396]	@ (800658c <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0b8      	b.n	8006582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d020      	beq.n	800645e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006428:	4b59      	ldr	r3, [pc, #356]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4a58      	ldr	r2, [pc, #352]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0308 	and.w	r3, r3, #8
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006440:	4b53      	ldr	r3, [pc, #332]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	4a52      	ldr	r2, [pc, #328]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800644a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800644c:	4b50      	ldr	r3, [pc, #320]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	494d      	ldr	r1, [pc, #308]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d044      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d107      	bne.n	8006482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	4b47      	ldr	r3, [pc, #284]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d119      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e07f      	b.n	8006582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d003      	beq.n	8006492 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800648e:	2b03      	cmp	r3, #3
 8006490:	d107      	bne.n	80064a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006492:	4b3f      	ldr	r3, [pc, #252]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e06f      	b.n	8006582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e067      	b.n	8006582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064b2:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f023 0203 	bic.w	r2, r3, #3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4934      	ldr	r1, [pc, #208]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064c4:	f7ff f984 	bl	80057d0 <HAL_GetTick>
 80064c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ca:	e00a      	b.n	80064e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064cc:	f7ff f980 	bl	80057d0 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e04f      	b.n	8006582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 020c 	and.w	r2, r3, #12
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d1eb      	bne.n	80064cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064f4:	4b25      	ldr	r3, [pc, #148]	@ (800658c <HAL_RCC_ClockConfig+0x1b8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d20c      	bcs.n	800651c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006502:	4b22      	ldr	r3, [pc, #136]	@ (800658c <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800650a:	4b20      	ldr	r3, [pc, #128]	@ (800658c <HAL_RCC_ClockConfig+0x1b8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d001      	beq.n	800651c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e032      	b.n	8006582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006528:	4b19      	ldr	r3, [pc, #100]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	4916      	ldr	r1, [pc, #88]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	4313      	orrs	r3, r2
 8006538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006546:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	490e      	ldr	r1, [pc, #56]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800655a:	f000 f821 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 800655e:	4602      	mov	r2, r0
 8006560:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	490a      	ldr	r1, [pc, #40]	@ (8006594 <HAL_RCC_ClockConfig+0x1c0>)
 800656c:	5ccb      	ldrb	r3, [r1, r3]
 800656e:	fa22 f303 	lsr.w	r3, r2, r3
 8006572:	4a09      	ldr	r2, [pc, #36]	@ (8006598 <HAL_RCC_ClockConfig+0x1c4>)
 8006574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006576:	4b09      	ldr	r3, [pc, #36]	@ (800659c <HAL_RCC_ClockConfig+0x1c8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff f8e4 	bl	8005748 <HAL_InitTick>

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40023c00 	.word	0x40023c00
 8006590:	40023800 	.word	0x40023800
 8006594:	08010af4 	.word	0x08010af4
 8006598:	20000004 	.word	0x20000004
 800659c:	20000408 	.word	0x20000408

080065a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a4:	b094      	sub	sp, #80	@ 0x50
 80065a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065b8:	4b79      	ldr	r3, [pc, #484]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d00d      	beq.n	80065e0 <HAL_RCC_GetSysClockFreq+0x40>
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	f200 80e1 	bhi.w	800678c <HAL_RCC_GetSysClockFreq+0x1ec>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_RCC_GetSysClockFreq+0x34>
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d003      	beq.n	80065da <HAL_RCC_GetSysClockFreq+0x3a>
 80065d2:	e0db      	b.n	800678c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065d4:	4b73      	ldr	r3, [pc, #460]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80065d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065d8:	e0db      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065da:	4b73      	ldr	r3, [pc, #460]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80065dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065de:	e0d8      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e0:	4b6f      	ldr	r3, [pc, #444]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ea:	4b6d      	ldr	r3, [pc, #436]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d063      	beq.n	80066be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065f6:	4b6a      	ldr	r3, [pc, #424]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	099b      	lsrs	r3, r3, #6
 80065fc:	2200      	movs	r2, #0
 80065fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006608:	633b      	str	r3, [r7, #48]	@ 0x30
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
 800660e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006612:	4622      	mov	r2, r4
 8006614:	462b      	mov	r3, r5
 8006616:	f04f 0000 	mov.w	r0, #0
 800661a:	f04f 0100 	mov.w	r1, #0
 800661e:	0159      	lsls	r1, r3, #5
 8006620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006624:	0150      	lsls	r0, r2, #5
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4621      	mov	r1, r4
 800662c:	1a51      	subs	r1, r2, r1
 800662e:	6139      	str	r1, [r7, #16]
 8006630:	4629      	mov	r1, r5
 8006632:	eb63 0301 	sbc.w	r3, r3, r1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006644:	4659      	mov	r1, fp
 8006646:	018b      	lsls	r3, r1, #6
 8006648:	4651      	mov	r1, sl
 800664a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800664e:	4651      	mov	r1, sl
 8006650:	018a      	lsls	r2, r1, #6
 8006652:	4651      	mov	r1, sl
 8006654:	ebb2 0801 	subs.w	r8, r2, r1
 8006658:	4659      	mov	r1, fp
 800665a:	eb63 0901 	sbc.w	r9, r3, r1
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800666a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800666e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006672:	4690      	mov	r8, r2
 8006674:	4699      	mov	r9, r3
 8006676:	4623      	mov	r3, r4
 8006678:	eb18 0303 	adds.w	r3, r8, r3
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	462b      	mov	r3, r5
 8006680:	eb49 0303 	adc.w	r3, r9, r3
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006692:	4629      	mov	r1, r5
 8006694:	024b      	lsls	r3, r1, #9
 8006696:	4621      	mov	r1, r4
 8006698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800669c:	4621      	mov	r1, r4
 800669e:	024a      	lsls	r2, r1, #9
 80066a0:	4610      	mov	r0, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a6:	2200      	movs	r2, #0
 80066a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066b0:	f7f9 fdf6 	bl	80002a0 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4613      	mov	r3, r2
 80066ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066bc:	e058      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066be:	4b38      	ldr	r3, [pc, #224]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	099b      	lsrs	r3, r3, #6
 80066c4:	2200      	movs	r2, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	4611      	mov	r1, r2
 80066ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	2300      	movs	r3, #0
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	f04f 0000 	mov.w	r0, #0
 80066e0:	f04f 0100 	mov.w	r1, #0
 80066e4:	0159      	lsls	r1, r3, #5
 80066e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ea:	0150      	lsls	r0, r2, #5
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4641      	mov	r1, r8
 80066f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80066f6:	4649      	mov	r1, r9
 80066f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800670c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006710:	ebb2 040a 	subs.w	r4, r2, sl
 8006714:	eb63 050b 	sbc.w	r5, r3, fp
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	00eb      	lsls	r3, r5, #3
 8006722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006726:	00e2      	lsls	r2, r4, #3
 8006728:	4614      	mov	r4, r2
 800672a:	461d      	mov	r5, r3
 800672c:	4643      	mov	r3, r8
 800672e:	18e3      	adds	r3, r4, r3
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	464b      	mov	r3, r9
 8006734:	eb45 0303 	adc.w	r3, r5, r3
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006746:	4629      	mov	r1, r5
 8006748:	028b      	lsls	r3, r1, #10
 800674a:	4621      	mov	r1, r4
 800674c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006750:	4621      	mov	r1, r4
 8006752:	028a      	lsls	r2, r1, #10
 8006754:	4610      	mov	r0, r2
 8006756:	4619      	mov	r1, r3
 8006758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800675a:	2200      	movs	r2, #0
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	61fa      	str	r2, [r7, #28]
 8006760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006764:	f7f9 fd9c 	bl	80002a0 <__aeabi_uldivmod>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4613      	mov	r3, r2
 800676e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006770:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	3301      	adds	r3, #1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800678a:	e002      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800678c:	4b05      	ldr	r3, [pc, #20]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800678e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006794:	4618      	mov	r0, r3
 8006796:	3750      	adds	r7, #80	@ 0x50
 8006798:	46bd      	mov	sp, r7
 800679a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800
 80067a4:	00f42400 	.word	0x00f42400
 80067a8:	007a1200 	.word	0x007a1200

080067ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b0:	4b03      	ldr	r3, [pc, #12]	@ (80067c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20000004 	.word	0x20000004

080067c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067c8:	f7ff fff0 	bl	80067ac <HAL_RCC_GetHCLKFreq>
 80067cc:	4602      	mov	r2, r0
 80067ce:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	0a9b      	lsrs	r3, r3, #10
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	4903      	ldr	r1, [pc, #12]	@ (80067e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067da:	5ccb      	ldrb	r3, [r1, r3]
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40023800 	.word	0x40023800
 80067e8:	08010b04 	.word	0x08010b04

080067ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067f0:	f7ff ffdc 	bl	80067ac <HAL_RCC_GetHCLKFreq>
 80067f4:	4602      	mov	r2, r0
 80067f6:	4b05      	ldr	r3, [pc, #20]	@ (800680c <HAL_RCC_GetPCLK2Freq+0x20>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	0b5b      	lsrs	r3, r3, #13
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	4903      	ldr	r1, [pc, #12]	@ (8006810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006802:	5ccb      	ldrb	r3, [r1, r3]
 8006804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006808:	4618      	mov	r0, r3
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40023800 	.word	0x40023800
 8006810:	08010b04 	.word	0x08010b04

08006814 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006838:	2b00      	cmp	r3, #0
 800683a:	d035      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800683c:	4b62      	ldr	r3, [pc, #392]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006842:	f7fe ffc5 	bl	80057d0 <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006848:	e008      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800684a:	f7fe ffc1 	bl	80057d0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e0b0      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800685c:	4b5b      	ldr	r3, [pc, #364]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	019a      	lsls	r2, r3, #6
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	071b      	lsls	r3, r3, #28
 8006874:	4955      	ldr	r1, [pc, #340]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800687c:	4b52      	ldr	r3, [pc, #328]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006882:	f7fe ffa5 	bl	80057d0 <HAL_GetTick>
 8006886:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006888:	e008      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800688a:	f7fe ffa1 	bl	80057d0 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e090      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800689c:	4b4b      	ldr	r3, [pc, #300]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8083 	beq.w	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	4b44      	ldr	r3, [pc, #272]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	4a43      	ldr	r2, [pc, #268]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80068c6:	4b41      	ldr	r3, [pc, #260]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068d2:	4b3f      	ldr	r3, [pc, #252]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3e      	ldr	r2, [pc, #248]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068de:	f7fe ff77 	bl	80057d0 <HAL_GetTick>
 80068e2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80068e4:	e008      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e6:	f7fe ff73 	bl	80057d0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e062      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80068f8:	4b35      	ldr	r3, [pc, #212]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006904:	4b31      	ldr	r3, [pc, #196]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800690c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d02f      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	429a      	cmp	r2, r3
 8006920:	d028      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006922:	4b2a      	ldr	r3, [pc, #168]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800692a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800692c:	4b29      	ldr	r3, [pc, #164]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800692e:	2201      	movs	r2, #1
 8006930:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006932:	4b28      	ldr	r3, [pc, #160]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006938:	4a24      	ldr	r2, [pc, #144]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800693e:	4b23      	ldr	r3, [pc, #140]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b01      	cmp	r3, #1
 8006948:	d114      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800694a:	f7fe ff41 	bl	80057d0 <HAL_GetTick>
 800694e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006950:	e00a      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006952:	f7fe ff3d 	bl	80057d0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006960:	4293      	cmp	r3, r2
 8006962:	d901      	bls.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e02a      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006968:	4b18      	ldr	r3, [pc, #96]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ee      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800697c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006980:	d10d      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006982:	4b12      	ldr	r3, [pc, #72]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006996:	490d      	ldr	r1, [pc, #52]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006998:	4313      	orrs	r3, r2
 800699a:	608b      	str	r3, [r1, #8]
 800699c:	e005      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800699e:	4b0b      	ldr	r3, [pc, #44]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	4a0a      	ldr	r2, [pc, #40]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069a8:	6093      	str	r3, [r2, #8]
 80069aa:	4b08      	ldr	r3, [pc, #32]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b6:	4905      	ldr	r1, [pc, #20]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	42470068 	.word	0x42470068
 80069cc:	40023800 	.word	0x40023800
 80069d0:	40007000 	.word	0x40007000
 80069d4:	42470e40 	.word	0x42470e40

080069d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e073      	b.n	8006ad2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7f5b      	ldrb	r3, [r3, #29]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fe fb14 	bl	8005028 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d055      	beq.n	8006ac0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	22ca      	movs	r2, #202	@ 0xca
 8006a1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2253      	movs	r2, #83	@ 0x53
 8006a22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa99 	bl	8006f5c <RTC_EnterInitMode>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d12c      	bne.n	8006a8e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68d2      	ldr	r2, [r2, #12]
 8006a6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6919      	ldr	r1, [r3, #16]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	041a      	lsls	r2, r3, #16
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 faa0 	bl	8006fca <RTC_ExitInitMode>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d110      	bne.n	8006ab6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006aa2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	22ff      	movs	r2, #255	@ 0xff
 8006abc:	625a      	str	r2, [r3, #36]	@ 0x24
 8006abe:	e001      	b.n	8006ac4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ada:	b590      	push	{r4, r7, lr}
 8006adc:	b087      	sub	sp, #28
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7f1b      	ldrb	r3, [r3, #28]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_RTC_SetTime+0x1c>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e087      	b.n	8006c06 <HAL_RTC_SetTime+0x12c>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2202      	movs	r2, #2
 8006b00:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d126      	bne.n	8006b56 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fa77 	bl	8007014 <RTC_ByteToBcd2>
 8006b26:	4603      	mov	r3, r0
 8006b28:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fa70 	bl	8007014 <RTC_ByteToBcd2>
 8006b34:	4603      	mov	r3, r0
 8006b36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b38:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	789b      	ldrb	r3, [r3, #2]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fa68 	bl	8007014 <RTC_ByteToBcd2>
 8006b44:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	78db      	ldrb	r3, [r3, #3]
 8006b4e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e018      	b.n	8006b88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	22ca      	movs	r2, #202	@ 0xca
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2253      	movs	r2, #83	@ 0x53
 8006b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f9df 	bl	8006f5c <RTC_EnterInitMode>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006ba2:	7cfb      	ldrb	r3, [r7, #19]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d120      	bne.n	8006bea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006bb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006bc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f9f2 	bl	8006fca <RTC_ExitInitMode>
 8006be6:	4603      	mov	r3, r0
 8006be8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006bea:	7cfb      	ldrb	r3, [r7, #19]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	22ff      	movs	r2, #255	@ 0xff
 8006bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]

  return status;
 8006c04:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd90      	pop	{r4, r7, pc}

08006c0e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006c40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006c44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	0d9b      	lsrs	r3, r3, #22
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11a      	bne.n	8006cc0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f9de 	bl	8007050 <RTC_Bcd2ToByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 f9d5 	bl	8007050 <RTC_Bcd2ToByte>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	789b      	ldrb	r3, [r3, #2]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f9cc 	bl	8007050 <RTC_Bcd2ToByte>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cca:	b590      	push	{r4, r7, lr}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	7f1b      	ldrb	r3, [r3, #28]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RTC_SetDate+0x1c>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e071      	b.n	8006dca <HAL_RTC_SetDate+0x100>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10e      	bne.n	8006d16 <HAL_RTC_SetDate+0x4c>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	f023 0310 	bic.w	r3, r3, #16
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	330a      	adds	r3, #10
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11c      	bne.n	8006d56 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	78db      	ldrb	r3, [r3, #3]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f977 	bl	8007014 <RTC_ByteToBcd2>
 8006d26:	4603      	mov	r3, r0
 8006d28:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f970 	bl	8007014 <RTC_ByteToBcd2>
 8006d34:	4603      	mov	r3, r0
 8006d36:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d38:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	789b      	ldrb	r3, [r3, #2]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f968 	bl	8007014 <RTC_ByteToBcd2>
 8006d44:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d46:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e00e      	b.n	8006d74 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d62:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d68:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	22ca      	movs	r2, #202	@ 0xca
 8006d7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2253      	movs	r2, #83	@ 0x53
 8006d82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f8e9 	bl	8006f5c <RTC_EnterInitMode>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10c      	bne.n	8006dae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006da2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f910 	bl	8006fca <RTC_ExitInitMode>
 8006daa:	4603      	mov	r3, r0
 8006dac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006dae:	7cfb      	ldrb	r3, [r7, #19]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	22ff      	movs	r2, #255	@ 0xff
 8006dc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]

  return status;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}

08006dd2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006dec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006df0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	0b5b      	lsrs	r3, r3, #13
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11a      	bne.n	8006e66 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 f90b 	bl	8007050 <RTC_Bcd2ToByte>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f902 	bl	8007050 <RTC_Bcd2ToByte>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	789b      	ldrb	r3, [r3, #2]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f8f9 	bl	8007050 <RTC_Bcd2ToByte>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	461a      	mov	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006e78:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006e7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006e7e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d012      	beq.n	8006eb4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006eac:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f824 	bl	8006efc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d012      	beq.n	8006ee8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006ee0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f904 	bl	80070f0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	775a      	strb	r2, [r3, #29]
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40013c00 	.word	0x40013c00

08006efc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a0d      	ldr	r2, [pc, #52]	@ (8006f58 <HAL_RTC_WaitForSynchro+0x48>)
 8006f22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f24:	f7fe fc54 	bl	80057d0 <HAL_GetTick>
 8006f28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f2a:	e009      	b.n	8006f40 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f2c:	f7fe fc50 	bl	80057d0 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f3a:	d901      	bls.n	8006f40 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e007      	b.n	8006f50 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ee      	beq.n	8006f2c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	00017f5f 	.word	0x00017f5f

08006f5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d122      	bne.n	8006fc0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f88:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f8a:	f7fe fc21 	bl	80057d0 <HAL_GetTick>
 8006f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f90:	e00c      	b.n	8006fac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f92:	f7fe fc1d 	bl	80057d0 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fa0:	d904      	bls.n	8006fac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <RTC_EnterInitMode+0x64>
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d1e8      	bne.n	8006f92 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fe4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ff8b 	bl	8006f10 <HAL_RTC_WaitForSynchro>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2204      	movs	r2, #4
 8007004:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007022:	e005      	b.n	8007030 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	3b0a      	subs	r3, #10
 800702e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b09      	cmp	r3, #9
 8007034:	d8f6      	bhi.n	8007024 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	b2da      	uxtb	r2, r3
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	4313      	orrs	r3, r2
 8007042:	b2db      	uxtb	r3, r3
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	b2db      	uxtb	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	b2db      	uxtb	r3, r3
 800707c:	4413      	add	r3, r2
 800707e:	b2db      	uxtb	r3, r3
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3350      	adds	r3, #80	@ 0x50
 80070a2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4413      	add	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3350      	adds	r3, #80	@ 0x50
 80070d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e022      	b.n	800715c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d105      	bne.n	800712e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fd ffaf 	bl	800508c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2203      	movs	r2, #3
 8007132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f814 	bl	8007164 <HAL_SD_InitCard>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e00a      	b.n	800715c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007164:	b5b0      	push	{r4, r5, r7, lr}
 8007166:	b08e      	sub	sp, #56	@ 0x38
 8007168:	af04      	add	r7, sp, #16
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007170:	2300      	movs	r3, #0
 8007172:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007178:	2300      	movs	r3, #0
 800717a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800717c:	2300      	movs	r3, #0
 800717e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007180:	2376      	movs	r3, #118	@ 0x76
 8007182:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681d      	ldr	r5, [r3, #0]
 8007188:	466c      	mov	r4, sp
 800718a:	f107 0318 	add.w	r3, r7, #24
 800718e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007196:	f107 030c 	add.w	r3, r7, #12
 800719a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800719c:	4628      	mov	r0, r5
 800719e:	f003 f951 	bl	800a444 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80071a2:	4b2a      	ldr	r3, [pc, #168]	@ (800724c <HAL_SD_InitCard+0xe8>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f003 f992 	bl	800a4d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80071b2:	4b26      	ldr	r3, [pc, #152]	@ (800724c <HAL_SD_InitCard+0xe8>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80071b8:	2002      	movs	r0, #2
 80071ba:	f7fe fb15 	bl	80057e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fe7a 	bl	8007eb8 <SD_PowerON>
 80071c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e02e      	b.n	8007242 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fd99 	bl	8007d1c <SD_InitCard>
 80071ea:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e01b      	b.n	8007242 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007212:	4618      	mov	r0, r3
 8007214:	f003 f9f1 	bl	800a5fa <SDMMC_CmdBlockLength>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a0a      	ldr	r2, [pc, #40]	@ (8007250 <HAL_SD_InitCard+0xec>)
 8007226:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3728      	adds	r7, #40	@ 0x28
 8007246:	46bd      	mov	sp, r7
 8007248:	bdb0      	pop	{r4, r5, r7, pc}
 800724a:	bf00      	nop
 800724c:	422580a0 	.word	0x422580a0
 8007250:	004005ff 	.word	0x004005ff

08007254 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b092      	sub	sp, #72	@ 0x48
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007262:	f7fe fab5 	bl	80057d0 <HAL_GetTick>
 8007266:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d107      	bne.n	8007286 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e1c5      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	f040 81b8 	bne.w	8007604 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800729a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	441a      	add	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d907      	bls.n	80072b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e1ac      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2203      	movs	r2, #3
 80072bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2200      	movs	r2, #0
 80072c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d002      	beq.n	80072d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	025b      	lsls	r3, r3, #9
 80072d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072d6:	f04f 33ff 	mov.w	r3, #4294967295
 80072da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	025b      	lsls	r3, r3, #9
 80072e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80072e2:	2390      	movs	r3, #144	@ 0x90
 80072e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80072e6:	2302      	movs	r3, #2
 80072e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80072ee:	2301      	movs	r3, #1
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f107 0214 	add.w	r2, r7, #20
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f003 f950 	bl	800a5a2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d90a      	bls.n	800731e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2202      	movs	r2, #2
 800730c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007314:	4618      	mov	r0, r3
 8007316:	f003 f9b4 	bl	800a682 <SDMMC_CmdReadMultiBlock>
 800731a:	6478      	str	r0, [r7, #68]	@ 0x44
 800731c:	e009      	b.n	8007332 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800732a:	4618      	mov	r0, r3
 800732c:	f003 f987 	bl	800a63e <SDMMC_CmdReadSingleBlock>
 8007330:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a7e      	ldr	r2, [pc, #504]	@ (8007538 <HAL_SD_ReadBlocks+0x2e4>)
 800733e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007346:	431a      	orrs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e159      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007362:	e061      	b.n	8007428 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800736a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d03c      	beq.n	80073ec <HAL_SD_ReadBlocks+0x198>
 8007372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d039      	beq.n	80073ec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007378:	2300      	movs	r3, #0
 800737a:	643b      	str	r3, [r7, #64]	@ 0x40
 800737c:	e033      	b.n	80073e6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f003 f889 	bl	800a49a <SDIO_ReadFIFO>
 8007388:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738c:	b2da      	uxtb	r2, r3
 800738e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007390:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007394:	3301      	adds	r3, #1
 8007396:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739a:	3b01      	subs	r3, #1
 800739c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073aa:	3301      	adds	r3, #1
 80073ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80073ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073b0:	3b01      	subs	r3, #1
 80073b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c0:	3301      	adds	r3, #1
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80073c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c6:	3b01      	subs	r3, #1
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	0e1b      	lsrs	r3, r3, #24
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d6:	3301      	adds	r3, #1
 80073d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80073da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073dc:	3b01      	subs	r3, #1
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80073e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e2:	3301      	adds	r3, #1
 80073e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	d9c8      	bls.n	800737e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80073ec:	f7fe f9f0 	bl	80057d0 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d902      	bls.n	8007402 <HAL_SD_ReadBlocks+0x1ae>
 80073fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d112      	bne.n	8007428 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4c      	ldr	r2, [pc, #304]	@ (8007538 <HAL_SD_ReadBlocks+0x2e4>)
 8007408:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0f4      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800742e:	f240 332a 	movw	r3, #810	@ 0x32a
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d095      	beq.n	8007364 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007442:	2b00      	cmp	r3, #0
 8007444:	d022      	beq.n	800748c <HAL_SD_ReadBlocks+0x238>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d91f      	bls.n	800748c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007450:	2b03      	cmp	r3, #3
 8007452:	d01b      	beq.n	800748c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f003 f979 	bl	800a750 <SDMMC_CmdStopTransfer>
 800745e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007462:	2b00      	cmp	r3, #0
 8007464:	d012      	beq.n	800748c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a33      	ldr	r2, [pc, #204]	@ (8007538 <HAL_SD_ReadBlocks+0x2e4>)
 800746c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007474:	431a      	orrs	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0c2      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <HAL_SD_ReadBlocks+0x254>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d012      	beq.n	80074ce <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a22      	ldr	r2, [pc, #136]	@ (8007538 <HAL_SD_ReadBlocks+0x2e4>)
 80074ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b4:	f043 0208 	orr.w	r2, r3, #8
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e0a1      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d012      	beq.n	8007502 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a15      	ldr	r2, [pc, #84]	@ (8007538 <HAL_SD_ReadBlocks+0x2e4>)
 80074e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e8:	f043 0202 	orr.w	r2, r3, #2
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e087      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d064      	beq.n	80075da <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a08      	ldr	r2, [pc, #32]	@ (8007538 <HAL_SD_ReadBlocks+0x2e4>)
 8007516:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e06d      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
 8007536:	bf00      	nop
 8007538:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f002 ffaa 	bl	800a49a <SDIO_ReadFIFO>
 8007546:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007552:	3301      	adds	r3, #1
 8007554:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007558:	3b01      	subs	r3, #1
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	0a1b      	lsrs	r3, r3, #8
 8007560:	b2da      	uxtb	r2, r3
 8007562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007564:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	3301      	adds	r3, #1
 800756a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800756c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756e:	3b01      	subs	r3, #1
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	b2da      	uxtb	r2, r3
 8007578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800757c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757e:	3301      	adds	r3, #1
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007584:	3b01      	subs	r3, #1
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758a:	0e1b      	lsrs	r3, r3, #24
 800758c:	b2da      	uxtb	r2, r3
 800758e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007590:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007594:	3301      	adds	r3, #1
 8007596:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759a:	3b01      	subs	r3, #1
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800759e:	f7fe f917 	bl	80057d0 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d902      	bls.n	80075b4 <HAL_SD_ReadBlocks+0x360>
 80075ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d112      	bne.n	80075da <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a18      	ldr	r2, [pc, #96]	@ (800761c <HAL_SD_ReadBlocks+0x3c8>)
 80075ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e01b      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_SD_ReadBlocks+0x39a>
 80075e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1a6      	bne.n	800753c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80075f6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	e006      	b.n	8007612 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007608:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
  }
}
 8007612:	4618      	mov	r0, r3
 8007614:	3748      	adds	r7, #72	@ 0x48
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	004005ff 	.word	0x004005ff

08007620 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b092      	sub	sp, #72	@ 0x48
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800762e:	f7fe f8cf 	bl	80057d0 <HAL_GetTick>
 8007632:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e16d      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	f040 8160 	bne.w	8007920 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007666:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	441a      	add	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007670:	429a      	cmp	r2, r3
 8007672:	d907      	bls.n	8007684 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007678:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e154      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2203      	movs	r2, #3
 8007688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007698:	2b01      	cmp	r3, #1
 800769a:	d002      	beq.n	80076a2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	025b      	lsls	r3, r3, #9
 80076a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295
 80076a6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	025b      	lsls	r3, r3, #9
 80076ac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076ae:	2390      	movs	r3, #144	@ 0x90
 80076b0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80076ba:	2301      	movs	r3, #1
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f107 0218 	add.w	r2, r7, #24
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f002 ff6a 	bl	800a5a2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d90a      	bls.n	80076ea <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076e0:	4618      	mov	r0, r3
 80076e2:	f003 f812 	bl	800a70a <SDMMC_CmdWriteMultiBlock>
 80076e6:	6478      	str	r0, [r7, #68]	@ 0x44
 80076e8:	e009      	b.n	80076fe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2210      	movs	r2, #16
 80076ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076f6:	4618      	mov	r0, r3
 80076f8:	f002 ffe5 	bl	800a6c6 <SDMMC_CmdWriteSingleBlock>
 80076fc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80076fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007700:	2b00      	cmp	r3, #0
 8007702:	d012      	beq.n	800772a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a8b      	ldr	r2, [pc, #556]	@ (8007938 <HAL_SD_WriteBlocks+0x318>)
 800770a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007712:	431a      	orrs	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e101      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800772e:	e065      	b.n	80077fc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d040      	beq.n	80077c0 <HAL_SD_WriteBlocks+0x1a0>
 800773e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d03d      	beq.n	80077c0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007744:	2300      	movs	r3, #0
 8007746:	643b      	str	r3, [r7, #64]	@ 0x40
 8007748:	e037      	b.n	80077ba <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800774a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007752:	3301      	adds	r3, #1
 8007754:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007758:	3b01      	subs	r3, #1
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800775c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	021a      	lsls	r2, r3, #8
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776a:	3301      	adds	r3, #1
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800776e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007770:	3b01      	subs	r3, #1
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	041a      	lsls	r2, r3, #16
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007782:	3301      	adds	r3, #1
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007788:	3b01      	subs	r3, #1
 800778a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800778c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	061a      	lsls	r2, r3, #24
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779a:	3301      	adds	r3, #1
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800779e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a0:	3b01      	subs	r3, #1
 80077a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f107 0214 	add.w	r2, r7, #20
 80077ac:	4611      	mov	r1, r2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f002 fe80 	bl	800a4b4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80077b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b6:	3301      	adds	r3, #1
 80077b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80077ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077bc:	2b07      	cmp	r3, #7
 80077be:	d9c4      	bls.n	800774a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80077c0:	f7fe f806 	bl	80057d0 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d902      	bls.n	80077d6 <HAL_SD_WriteBlocks+0x1b6>
 80077d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d112      	bne.n	80077fc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a57      	ldr	r2, [pc, #348]	@ (8007938 <HAL_SD_WriteBlocks+0x318>)
 80077dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077e4:	431a      	orrs	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e098      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007802:	f240 331a 	movw	r3, #794	@ 0x31a
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d091      	beq.n	8007730 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d022      	beq.n	8007860 <HAL_SD_WriteBlocks+0x240>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d91f      	bls.n	8007860 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007824:	2b03      	cmp	r3, #3
 8007826:	d01b      	beq.n	8007860 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f002 ff8f 	bl	800a750 <SDMMC_CmdStopTransfer>
 8007832:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007836:	2b00      	cmp	r3, #0
 8007838:	d012      	beq.n	8007860 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a3e      	ldr	r2, [pc, #248]	@ (8007938 <HAL_SD_WriteBlocks+0x318>)
 8007840:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007848:	431a      	orrs	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e066      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d106      	bne.n	800787c <HAL_SD_WriteBlocks+0x25c>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007878:	2b00      	cmp	r3, #0
 800787a:	d012      	beq.n	80078a2 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a2d      	ldr	r2, [pc, #180]	@ (8007938 <HAL_SD_WriteBlocks+0x318>)
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	f043 0208 	orr.w	r2, r3, #8
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e045      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d012      	beq.n	80078d6 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a20      	ldr	r2, [pc, #128]	@ (8007938 <HAL_SD_WriteBlocks+0x318>)
 80078b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078bc:	f043 0202 	orr.w	r2, r3, #2
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e02b      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d012      	beq.n	800790a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a13      	ldr	r2, [pc, #76]	@ (8007938 <HAL_SD_WriteBlocks+0x318>)
 80078ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f0:	f043 0210 	orr.w	r2, r3, #16
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e011      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e006      	b.n	800792e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007924:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3748      	adds	r7, #72	@ 0x48
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	004005ff 	.word	0x004005ff

0800793c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794a:	0f9b      	lsrs	r3, r3, #30
 800794c:	b2da      	uxtb	r2, r3
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007956:	0e9b      	lsrs	r3, r3, #26
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 030f 	and.w	r3, r3, #15
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007968:	0e1b      	lsrs	r3, r3, #24
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	b2da      	uxtb	r2, r3
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800797a:	0c1b      	lsrs	r3, r3, #16
 800797c:	b2da      	uxtb	r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	b2da      	uxtb	r2, r3
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007992:	b2da      	uxtb	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800799c:	0d1b      	lsrs	r3, r3, #20
 800799e:	b29a      	uxth	r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079a8:	0c1b      	lsrs	r3, r3, #16
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079ba:	0bdb      	lsrs	r3, r3, #15
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079cc:	0b9b      	lsrs	r3, r3, #14
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079de:	0b5b      	lsrs	r3, r3, #13
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079f0:	0b1b      	lsrs	r3, r3, #12
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2200      	movs	r2, #0
 8007a02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d163      	bne.n	8007ad4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a10:	009a      	lsls	r2, r3, #2
 8007a12:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007a16:	4013      	ands	r3, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007a1c:	0f92      	lsrs	r2, r2, #30
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a28:	0edb      	lsrs	r3, r3, #27
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a3a:	0e1b      	lsrs	r3, r3, #24
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a4c:	0d5b      	lsrs	r3, r3, #21
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a5e:	0c9b      	lsrs	r3, r3, #18
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a70:	0bdb      	lsrs	r3, r3, #15
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	7e1b      	ldrb	r3, [r3, #24]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	3302      	adds	r3, #2
 8007a94:	2201      	movs	r2, #1
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007a9e:	fb03 f202 	mul.w	r2, r3, r2
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	7a1b      	ldrb	r3, [r3, #8]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007ac0:	0a52      	lsrs	r2, r2, #9
 8007ac2:	fb03 f202 	mul.w	r2, r3, r2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ad0:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ad2:	e031      	b.n	8007b38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d11d      	bne.n	8007b18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ae0:	041b      	lsls	r3, r3, #16
 8007ae2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	431a      	orrs	r2, r3
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	3301      	adds	r3, #1
 8007af8:	029a      	lsls	r2, r3, #10
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b0c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	661a      	str	r2, [r3, #96]	@ 0x60
 8007b16:	e00f      	b.n	8007b38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a58      	ldr	r2, [pc, #352]	@ (8007c80 <HAL_SD_GetCardCSD+0x344>)
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e09d      	b.n	8007c74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b3c:	0b9b      	lsrs	r3, r3, #14
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b4e:	09db      	lsrs	r3, r3, #7
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b70:	0fdb      	lsrs	r3, r3, #31
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7c:	0f5b      	lsrs	r3, r3, #29
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 0303 	and.w	r3, r3, #3
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	0e9b      	lsrs	r3, r3, #26
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba0:	0d9b      	lsrs	r3, r3, #22
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb2:	0d5b      	lsrs	r3, r3, #21
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bce:	0c1b      	lsrs	r3, r3, #16
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be2:	0bdb      	lsrs	r3, r3, #15
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf6:	0b9b      	lsrs	r3, r3, #14
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c0a:	0b5b      	lsrs	r3, r3, #13
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1e:	0b1b      	lsrs	r3, r3, #12
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c32:	0a9b      	lsrs	r3, r3, #10
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	004005ff 	.word	0x004005ff

08007c84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ce8:	f107 030c 	add.w	r3, r7, #12
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f970 	bl	8007fd4 <SD_SendStatus>
 8007cf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	0a5b      	lsrs	r3, r3, #9
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007d12:	693b      	ldr	r3, [r7, #16]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d1c:	b5b0      	push	{r4, r5, r7, lr}
 8007d1e:	b094      	sub	sp, #80	@ 0x50
 8007d20:	af04      	add	r7, sp, #16
 8007d22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d24:	2301      	movs	r3, #1
 8007d26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f002 fbe0 	bl	800a4f2 <SDIO_GetPowerState>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d38:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007d3c:	e0b8      	b.n	8007eb0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d02f      	beq.n	8007da6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f002 fdc7 	bl	800a8de <SDMMC_CmdSendCID>
 8007d50:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <SD_InitCard+0x40>
    {
      return errorstate;
 8007d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5a:	e0a9      	b.n	8007eb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f002 fc0a 	bl	800a57c <SDIO_GetResponse>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2104      	movs	r1, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f002 fc01 	bl	800a57c <SDIO_GetResponse>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2108      	movs	r1, #8
 8007d86:	4618      	mov	r0, r3
 8007d88:	f002 fbf8 	bl	800a57c <SDIO_GetResponse>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	210c      	movs	r1, #12
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f002 fbef 	bl	800a57c <SDIO_GetResponse>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d00d      	beq.n	8007dca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f107 020e 	add.w	r2, r7, #14
 8007db6:	4611      	mov	r1, r2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f002 fdcd 	bl	800a958 <SDMMC_CmdSetRelAdd>
 8007dbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <SD_InitCard+0xae>
    {
      return errorstate;
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc8:	e072      	b.n	8007eb0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d036      	beq.n	8007e40 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007dd2:	89fb      	ldrh	r3, [r7, #14]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f002 fd97 	bl	800a91a <SDMMC_CmdSendCSD>
 8007dec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df6:	e05b      	b.n	8007eb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f002 fbbc 	bl	800a57c <SDIO_GetResponse>
 8007e04:	4602      	mov	r2, r0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2104      	movs	r1, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f002 fbb3 	bl	800a57c <SDIO_GetResponse>
 8007e16:	4602      	mov	r2, r0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2108      	movs	r1, #8
 8007e22:	4618      	mov	r0, r3
 8007e24:	f002 fbaa 	bl	800a57c <SDIO_GetResponse>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	210c      	movs	r1, #12
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 fba1 	bl	800a57c <SDIO_GetResponse>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2104      	movs	r1, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f002 fb98 	bl	800a57c <SDIO_GetResponse>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	0d1a      	lsrs	r2, r3, #20
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007e54:	f107 0310 	add.w	r3, r7, #16
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fd6e 	bl	800793c <HAL_SD_GetCardCSD>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e6a:	e021      	b.n	8007eb0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6819      	ldr	r1, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	2200      	movs	r2, #0
 8007e78:	461c      	mov	r4, r3
 8007e7a:	4615      	mov	r5, r2
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	462b      	mov	r3, r5
 8007e80:	4608      	mov	r0, r1
 8007e82:	f002 fc87 	bl	800a794 <SDMMC_CmdSelDesel>
 8007e86:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <SD_InitCard+0x176>
  {
    return errorstate;
 8007e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e90:	e00e      	b.n	8007eb0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681d      	ldr	r5, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	466c      	mov	r4, sp
 8007e9a:	f103 0210 	add.w	r2, r3, #16
 8007e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f002 facb 	bl	800a444 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3740      	adds	r7, #64	@ 0x40
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bdb0      	pop	{r4, r5, r7, pc}

08007eb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f002 fc82 	bl	800a7da <SDMMC_CmdGoIdleState>
 8007ed6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	e072      	b.n	8007fc8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f002 fc95 	bl	800a816 <SDMMC_CmdOperCond>
 8007eec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00d      	beq.n	8007f10 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 fc6b 	bl	800a7da <SDMMC_CmdGoIdleState>
 8007f04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	e05b      	b.n	8007fc8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d137      	bne.n	8007f8e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f002 fc95 	bl	800a854 <SDMMC_CmdAppCommand>
 8007f2a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d02d      	beq.n	8007f8e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007f36:	e047      	b.n	8007fc8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 fc88 	bl	800a854 <SDMMC_CmdAppCommand>
 8007f44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <SD_PowerON+0x98>
    {
      return errorstate;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e03b      	b.n	8007fc8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	491e      	ldr	r1, [pc, #120]	@ (8007fd0 <SD_PowerON+0x118>)
 8007f56:	4618      	mov	r0, r3
 8007f58:	f002 fc9e 	bl	800a898 <SDMMC_CmdAppOperCommand>
 8007f5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007f68:	e02e      	b.n	8007fc8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 fb03 	bl	800a57c <SDIO_GetResponse>
 8007f76:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	0fdb      	lsrs	r3, r3, #31
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <SD_PowerON+0xcc>
 8007f80:	2301      	movs	r3, #1
 8007f82:	e000      	b.n	8007f86 <SD_PowerON+0xce>
 8007f84:	2300      	movs	r3, #0
 8007f86:	613b      	str	r3, [r7, #16]

    count++;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d802      	bhi.n	8007f9e <SD_PowerON+0xe6>
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0cc      	beq.n	8007f38 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d902      	bls.n	8007fae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007fa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007fac:	e00c      	b.n	8007fc8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	645a      	str	r2, [r3, #68]	@ 0x44
 8007fbe:	e002      	b.n	8007fc6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	c1100000 	.word	0xc1100000

08007fd4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d102      	bne.n	8007fea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007fe4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fe8:	e018      	b.n	800801c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f002 fccf 	bl	800a99a <SDMMC_CmdSendStatus>
 8007ffc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	e009      	b.n	800801c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f002 fab4 	bl	800a57c <SDIO_GetResponse>
 8008014:	4602      	mov	r2, r0
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e07b      	b.n	800812e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	2b00      	cmp	r3, #0
 800803c:	d108      	bne.n	8008050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008046:	d009      	beq.n	800805c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	61da      	str	r2, [r3, #28]
 800804e:	e005      	b.n	800805c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fd f870 	bl	800515c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008092:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e0:	ea42 0103 	orr.w	r1, r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	0c1b      	lsrs	r3, r3, #16
 80080fa:	f003 0104 	and.w	r1, r3, #4
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	f003 0210 	and.w	r2, r3, #16
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800811c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b088      	sub	sp, #32
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	603b      	str	r3, [r7, #0]
 8008142:	4613      	mov	r3, r2
 8008144:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008146:	f7fd fb43 	bl	80057d0 <HAL_GetTick>
 800814a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800814c:	88fb      	ldrh	r3, [r7, #6]
 800814e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	d001      	beq.n	8008160 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800815c:	2302      	movs	r3, #2
 800815e:	e12a      	b.n	80083b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <HAL_SPI_Transmit+0x36>
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e122      	b.n	80083b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008176:	2b01      	cmp	r3, #1
 8008178:	d101      	bne.n	800817e <HAL_SPI_Transmit+0x48>
 800817a:	2302      	movs	r3, #2
 800817c:	e11b      	b.n	80083b6 <HAL_SPI_Transmit+0x280>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2203      	movs	r2, #3
 800818a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	88fa      	ldrh	r2, [r7, #6]
 800819e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081cc:	d10f      	bne.n	80081ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f8:	2b40      	cmp	r3, #64	@ 0x40
 80081fa:	d007      	beq.n	800820c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800820a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008214:	d152      	bne.n	80082bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <HAL_SPI_Transmit+0xee>
 800821e:	8b7b      	ldrh	r3, [r7, #26]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d145      	bne.n	80082b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	881a      	ldrh	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008234:	1c9a      	adds	r2, r3, #2
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800823e:	b29b      	uxth	r3, r3
 8008240:	3b01      	subs	r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008248:	e032      	b.n	80082b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b02      	cmp	r3, #2
 8008256:	d112      	bne.n	800827e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	881a      	ldrh	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	1c9a      	adds	r2, r3, #2
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800827c:	e018      	b.n	80082b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800827e:	f7fd faa7 	bl	80057d0 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	429a      	cmp	r2, r3
 800828c:	d803      	bhi.n	8008296 <HAL_SPI_Transmit+0x160>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008294:	d102      	bne.n	800829c <HAL_SPI_Transmit+0x166>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d109      	bne.n	80082b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e082      	b.n	80083b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1c7      	bne.n	800824a <HAL_SPI_Transmit+0x114>
 80082ba:	e053      	b.n	8008364 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <HAL_SPI_Transmit+0x194>
 80082c4:	8b7b      	ldrh	r3, [r7, #26]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d147      	bne.n	800835a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	330c      	adds	r3, #12
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80082f0:	e033      	b.n	800835a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d113      	bne.n	8008328 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	330c      	adds	r3, #12
 800830a:	7812      	ldrb	r2, [r2, #0]
 800830c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008326:	e018      	b.n	800835a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008328:	f7fd fa52 	bl	80057d0 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d803      	bhi.n	8008340 <HAL_SPI_Transmit+0x20a>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833e:	d102      	bne.n	8008346 <HAL_SPI_Transmit+0x210>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e02d      	b.n	80083b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1c6      	bne.n	80082f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fbd9 	bl	8008b20 <SPI_EndRxTxTransaction>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80083b4:	2300      	movs	r3, #0
  }
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3720      	adds	r7, #32
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b088      	sub	sp, #32
 80083c2:	af02      	add	r7, sp, #8
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d001      	beq.n	80083de <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80083da:	2302      	movs	r3, #2
 80083dc:	e104      	b.n	80085e8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <HAL_SPI_Receive+0x2c>
 80083e4:	88fb      	ldrh	r3, [r7, #6]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e0fc      	b.n	80085e8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083f6:	d112      	bne.n	800841e <HAL_SPI_Receive+0x60>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10e      	bne.n	800841e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2204      	movs	r2, #4
 8008404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008408:	88fa      	ldrh	r2, [r7, #6]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	4613      	mov	r3, r2
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f8eb 	bl	80085f0 <HAL_SPI_TransmitReceive>
 800841a:	4603      	mov	r3, r0
 800841c:	e0e4      	b.n	80085e8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800841e:	f7fd f9d7 	bl	80057d0 <HAL_GetTick>
 8008422:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_SPI_Receive+0x74>
 800842e:	2302      	movs	r3, #2
 8008430:	e0da      	b.n	80085e8 <HAL_SPI_Receive+0x22a>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2204      	movs	r2, #4
 800843e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	88fa      	ldrh	r2, [r7, #6]
 8008458:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008480:	d10f      	bne.n	80084a2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80084a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ac:	2b40      	cmp	r3, #64	@ 0x40
 80084ae:	d007      	beq.n	80084c0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d170      	bne.n	80085aa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80084c8:	e035      	b.n	8008536 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d115      	bne.n	8008504 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f103 020c 	add.w	r2, r3, #12
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	7812      	ldrb	r2, [r2, #0]
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008502:	e018      	b.n	8008536 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008504:	f7fd f964 	bl	80057d0 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d803      	bhi.n	800851c <HAL_SPI_Receive+0x15e>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d102      	bne.n	8008522 <HAL_SPI_Receive+0x164>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e058      	b.n	80085e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1c4      	bne.n	80084ca <HAL_SPI_Receive+0x10c>
 8008540:	e038      	b.n	80085b4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b01      	cmp	r3, #1
 800854e:	d113      	bne.n	8008578 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855a:	b292      	uxth	r2, r2
 800855c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008576:	e018      	b.n	80085aa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008578:	f7fd f92a 	bl	80057d0 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d803      	bhi.n	8008590 <HAL_SPI_Receive+0x1d2>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d102      	bne.n	8008596 <HAL_SPI_Receive+0x1d8>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e01e      	b.n	80085e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1c6      	bne.n	8008542 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fa4b 	bl	8008a54 <SPI_EndRxTransaction>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2220      	movs	r2, #32
 80085c8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80085e6:	2300      	movs	r3, #0
  }
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	@ 0x28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085fe:	2301      	movs	r3, #1
 8008600:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008602:	f7fd f8e5 	bl	80057d0 <HAL_GetTick>
 8008606:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800860e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800861a:	7ffb      	ldrb	r3, [r7, #31]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d00c      	beq.n	800863a <HAL_SPI_TransmitReceive+0x4a>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008626:	d106      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x46>
 8008630:	7ffb      	ldrb	r3, [r7, #31]
 8008632:	2b04      	cmp	r3, #4
 8008634:	d001      	beq.n	800863a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
 8008638:	e17f      	b.n	800893a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_SPI_TransmitReceive+0x5c>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <HAL_SPI_TransmitReceive+0x5c>
 8008646:	887b      	ldrh	r3, [r7, #2]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e174      	b.n	800893a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <HAL_SPI_TransmitReceive+0x6e>
 800865a:	2302      	movs	r3, #2
 800865c:	e16d      	b.n	800893a <HAL_SPI_TransmitReceive+0x34a>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b04      	cmp	r3, #4
 8008670:	d003      	beq.n	800867a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2205      	movs	r2, #5
 8008676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	887a      	ldrh	r2, [r7, #2]
 800868a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	887a      	ldrh	r2, [r7, #2]
 8008690:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	887a      	ldrh	r2, [r7, #2]
 800869c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	887a      	ldrh	r2, [r7, #2]
 80086a2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ba:	2b40      	cmp	r3, #64	@ 0x40
 80086bc:	d007      	beq.n	80086ce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086d6:	d17e      	bne.n	80087d6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0xf6>
 80086e0:	8afb      	ldrh	r3, [r7, #22]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d16c      	bne.n	80087c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ea:	881a      	ldrh	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f6:	1c9a      	adds	r2, r3, #2
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800870a:	e059      	b.n	80087c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b02      	cmp	r3, #2
 8008718:	d11b      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x162>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800871e:	b29b      	uxth	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d016      	beq.n	8008752 <HAL_SPI_TransmitReceive+0x162>
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	2b01      	cmp	r3, #1
 8008728:	d113      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872e:	881a      	ldrh	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873a:	1c9a      	adds	r2, r3, #2
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008744:	b29b      	uxth	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	2b01      	cmp	r3, #1
 800875e:	d119      	bne.n	8008794 <HAL_SPI_TransmitReceive+0x1a4>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d014      	beq.n	8008794 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008774:	b292      	uxth	r2, r2
 8008776:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877c:	1c9a      	adds	r2, r3, #2
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008786:	b29b      	uxth	r3, r3
 8008788:	3b01      	subs	r3, #1
 800878a:	b29a      	uxth	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008790:	2301      	movs	r3, #1
 8008792:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008794:	f7fd f81c 	bl	80057d0 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d80d      	bhi.n	80087c0 <HAL_SPI_TransmitReceive+0x1d0>
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d009      	beq.n	80087c0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e0bc      	b.n	800893a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1a0      	bne.n	800870c <HAL_SPI_TransmitReceive+0x11c>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d19b      	bne.n	800870c <HAL_SPI_TransmitReceive+0x11c>
 80087d4:	e082      	b.n	80088dc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <HAL_SPI_TransmitReceive+0x1f4>
 80087de:	8afb      	ldrh	r3, [r7, #22]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d171      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	330c      	adds	r3, #12
 80087ee:	7812      	ldrb	r2, [r2, #0]
 80087f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800880a:	e05d      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b02      	cmp	r3, #2
 8008818:	d11c      	bne.n	8008854 <HAL_SPI_TransmitReceive+0x264>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d017      	beq.n	8008854 <HAL_SPI_TransmitReceive+0x264>
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	2b01      	cmp	r3, #1
 8008828:	d114      	bne.n	8008854 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	330c      	adds	r3, #12
 8008834:	7812      	ldrb	r2, [r2, #0]
 8008836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008846:	b29b      	uxth	r3, r3
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b01      	cmp	r3, #1
 8008860:	d119      	bne.n	8008896 <HAL_SPI_TransmitReceive+0x2a6>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d014      	beq.n	8008896 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008892:	2301      	movs	r3, #1
 8008894:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008896:	f7fc ff9b 	bl	80057d0 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d803      	bhi.n	80088ae <HAL_SPI_TransmitReceive+0x2be>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d102      	bne.n	80088b4 <HAL_SPI_TransmitReceive+0x2c4>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d109      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e038      	b.n	800893a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d19c      	bne.n	800880c <HAL_SPI_TransmitReceive+0x21c>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d197      	bne.n	800880c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088dc:	6a3a      	ldr	r2, [r7, #32]
 80088de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f91d 	bl	8008b20 <SPI_EndRxTxTransaction>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e01d      	b.n	800893a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	613b      	str	r3, [r7, #16]
 800891a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e000      	b.n	800893a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008938:	2300      	movs	r3, #0
  }
}
 800893a:	4618      	mov	r0, r3
 800893c:	3728      	adds	r7, #40	@ 0x28
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008954:	f7fc ff3c 	bl	80057d0 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	1a9b      	subs	r3, r3, r2
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4413      	add	r3, r2
 8008962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008964:	f7fc ff34 	bl	80057d0 <HAL_GetTick>
 8008968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800896a:	4b39      	ldr	r3, [pc, #228]	@ (8008a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	015b      	lsls	r3, r3, #5
 8008970:	0d1b      	lsrs	r3, r3, #20
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	fb02 f303 	mul.w	r3, r2, r3
 8008978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800897a:	e055      	b.n	8008a28 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d051      	beq.n	8008a28 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008984:	f7fc ff24 	bl	80057d0 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	429a      	cmp	r2, r3
 8008992:	d902      	bls.n	800899a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d13d      	bne.n	8008a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089b2:	d111      	bne.n	80089d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089bc:	d004      	beq.n	80089c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c6:	d107      	bne.n	80089d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089e0:	d10f      	bne.n	8008a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e018      	b.n	8008a48 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	e002      	b.n	8008a28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4013      	ands	r3, r2
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	461a      	mov	r2, r3
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d19a      	bne.n	800897c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3720      	adds	r7, #32
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000004 	.word	0x20000004

08008a54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a68:	d111      	bne.n	8008a8e <SPI_EndRxTransaction+0x3a>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a72:	d004      	beq.n	8008a7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a7c:	d107      	bne.n	8008a8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a96:	d12a      	bne.n	8008aee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa0:	d012      	beq.n	8008ac8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2180      	movs	r1, #128	@ 0x80
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff ff49 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d02d      	beq.n	8008b14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008abc:	f043 0220 	orr.w	r2, r3, #32
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e026      	b.n	8008b16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f7ff ff36 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01a      	beq.n	8008b14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae2:	f043 0220 	orr.w	r2, r3, #32
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e013      	b.n	8008b16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2200      	movs	r2, #0
 8008af6:	2101      	movs	r1, #1
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff ff23 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d007      	beq.n	8008b14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b08:	f043 0220 	orr.w	r2, r3, #32
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e000      	b.n	8008b16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2201      	movs	r2, #1
 8008b34:	2102      	movs	r1, #2
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff ff04 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b46:	f043 0220 	orr.w	r2, r3, #32
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e032      	b.n	8008bb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b52:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc0 <SPI_EndRxTxTransaction+0xa0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1b      	ldr	r2, [pc, #108]	@ (8008bc4 <SPI_EndRxTxTransaction+0xa4>)
 8008b58:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5c:	0d5b      	lsrs	r3, r3, #21
 8008b5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b62:	fb02 f303 	mul.w	r3, r2, r3
 8008b66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b70:	d112      	bne.n	8008b98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2180      	movs	r1, #128	@ 0x80
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7ff fee1 	bl	8008944 <SPI_WaitFlagStateUntilTimeout>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d016      	beq.n	8008bb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b8c:	f043 0220 	orr.w	r2, r3, #32
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e00f      	b.n	8008bb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bae:	2b80      	cmp	r3, #128	@ 0x80
 8008bb0:	d0f2      	beq.n	8008b98 <SPI_EndRxTxTransaction+0x78>
 8008bb2:	e000      	b.n	8008bb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8008bb4:	bf00      	nop
  }

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20000004 	.word	0x20000004
 8008bc4:	165e9f81 	.word	0x165e9f81

08008bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e041      	b.n	8008c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7fc fafc 	bl	80051ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f000 f9b6 	bl	8008f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d001      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e04e      	b.n	8008d1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a23      	ldr	r2, [pc, #140]	@ (8008d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d022      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008caa:	d01d      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8008d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d018      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1e      	ldr	r2, [pc, #120]	@ (8008d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a1b      	ldr	r2, [pc, #108]	@ (8008d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d009      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a19      	ldr	r2, [pc, #100]	@ (8008d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a18      	ldr	r2, [pc, #96]	@ (8008d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d111      	bne.n	8008d0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b06      	cmp	r3, #6
 8008cf8:	d010      	beq.n	8008d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f042 0201 	orr.w	r2, r2, #1
 8008d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0a:	e007      	b.n	8008d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0201 	orr.w	r2, r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40000c00 	.word	0x40000c00
 8008d3c:	40010400 	.word	0x40010400
 8008d40:	40014000 	.word	0x40014000
 8008d44:	40001800 	.word	0x40001800

08008d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d020      	beq.n	8008dac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d01b      	beq.n	8008dac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f06f 0202 	mvn.w	r2, #2
 8008d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f8d2 	bl	8008f3c <HAL_TIM_IC_CaptureCallback>
 8008d98:	e005      	b.n	8008da6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8c4 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f8d5 	bl	8008f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d020      	beq.n	8008df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01b      	beq.n	8008df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f06f 0204 	mvn.w	r2, #4
 8008dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f8ac 	bl	8008f3c <HAL_TIM_IC_CaptureCallback>
 8008de4:	e005      	b.n	8008df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f89e 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8af 	bl	8008f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d020      	beq.n	8008e44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01b      	beq.n	8008e44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0208 	mvn.w	r2, #8
 8008e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2204      	movs	r2, #4
 8008e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f886 	bl	8008f3c <HAL_TIM_IC_CaptureCallback>
 8008e30:	e005      	b.n	8008e3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f878 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f889 	bl	8008f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f003 0310 	and.w	r3, r3, #16
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d020      	beq.n	8008e90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01b      	beq.n	8008e90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f06f 0210 	mvn.w	r2, #16
 8008e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2208      	movs	r2, #8
 8008e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f860 	bl	8008f3c <HAL_TIM_IC_CaptureCallback>
 8008e7c:	e005      	b.n	8008e8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f852 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f863 	bl	8008f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0201 	mvn.w	r2, #1
 8008eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fa f896 	bl	8002fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00c      	beq.n	8008ed8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f97c 	bl	80091d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00c      	beq.n	8008efc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f834 	bl	8008f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f003 0320 	and.w	r3, r3, #32
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00c      	beq.n	8008f20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0220 	mvn.w	r2, #32
 8008f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f94e 	bl	80091bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a43      	ldr	r2, [pc, #268]	@ (8009098 <TIM_Base_SetConfig+0x120>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d013      	beq.n	8008fb8 <TIM_Base_SetConfig+0x40>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f96:	d00f      	beq.n	8008fb8 <TIM_Base_SetConfig+0x40>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a40      	ldr	r2, [pc, #256]	@ (800909c <TIM_Base_SetConfig+0x124>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00b      	beq.n	8008fb8 <TIM_Base_SetConfig+0x40>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80090a0 <TIM_Base_SetConfig+0x128>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d007      	beq.n	8008fb8 <TIM_Base_SetConfig+0x40>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a3e      	ldr	r2, [pc, #248]	@ (80090a4 <TIM_Base_SetConfig+0x12c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_Base_SetConfig+0x40>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80090a8 <TIM_Base_SetConfig+0x130>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d108      	bne.n	8008fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a32      	ldr	r2, [pc, #200]	@ (8009098 <TIM_Base_SetConfig+0x120>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d02b      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fd8:	d027      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800909c <TIM_Base_SetConfig+0x124>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d023      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80090a0 <TIM_Base_SetConfig+0x128>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01f      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2d      	ldr	r2, [pc, #180]	@ (80090a4 <TIM_Base_SetConfig+0x12c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d01b      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80090a8 <TIM_Base_SetConfig+0x130>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d017      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80090ac <TIM_Base_SetConfig+0x134>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a2a      	ldr	r2, [pc, #168]	@ (80090b0 <TIM_Base_SetConfig+0x138>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00f      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a29      	ldr	r2, [pc, #164]	@ (80090b4 <TIM_Base_SetConfig+0x13c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00b      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a28      	ldr	r2, [pc, #160]	@ (80090b8 <TIM_Base_SetConfig+0x140>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d007      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a27      	ldr	r2, [pc, #156]	@ (80090bc <TIM_Base_SetConfig+0x144>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d003      	beq.n	800902a <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a26      	ldr	r2, [pc, #152]	@ (80090c0 <TIM_Base_SetConfig+0x148>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d108      	bne.n	800903c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a0e      	ldr	r2, [pc, #56]	@ (8009098 <TIM_Base_SetConfig+0x120>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_Base_SetConfig+0xf2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a10      	ldr	r2, [pc, #64]	@ (80090a8 <TIM_Base_SetConfig+0x130>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d103      	bne.n	8009072 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f043 0204 	orr.w	r2, r3, #4
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	601a      	str	r2, [r3, #0]
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	40010000 	.word	0x40010000
 800909c:	40000400 	.word	0x40000400
 80090a0:	40000800 	.word	0x40000800
 80090a4:	40000c00 	.word	0x40000c00
 80090a8:	40010400 	.word	0x40010400
 80090ac:	40014000 	.word	0x40014000
 80090b0:	40014400 	.word	0x40014400
 80090b4:	40014800 	.word	0x40014800
 80090b8:	40001800 	.word	0x40001800
 80090bc:	40001c00 	.word	0x40001c00
 80090c0:	40002000 	.word	0x40002000

080090c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090d8:	2302      	movs	r3, #2
 80090da:	e05a      	b.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a21      	ldr	r2, [pc, #132]	@ (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d022      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009128:	d01d      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a1d      	ldr	r2, [pc, #116]	@ (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d018      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1b      	ldr	r2, [pc, #108]	@ (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1a      	ldr	r2, [pc, #104]	@ (80091ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00e      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a18      	ldr	r2, [pc, #96]	@ (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d009      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a17      	ldr	r2, [pc, #92]	@ (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d004      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a15      	ldr	r2, [pc, #84]	@ (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d10c      	bne.n	8009180 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800916c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4313      	orrs	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40000400 	.word	0x40000400
 80091a8:	40000800 	.word	0x40000800
 80091ac:	40000c00 	.word	0x40000c00
 80091b0:	40010400 	.word	0x40010400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40001800 	.word	0x40001800

080091bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e042      	b.n	800927c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fc f816 	bl	800523c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2224      	movs	r2, #36	@ 0x24
 8009214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fe97 	bl	8009f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800923c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	695a      	ldr	r2, [r3, #20]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800924c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800925c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08a      	sub	sp, #40	@ 0x28
 8009288:	af02      	add	r7, sp, #8
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d175      	bne.n	8009390 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <HAL_UART_Transmit+0x2c>
 80092aa:	88fb      	ldrh	r3, [r7, #6]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e06e      	b.n	8009392 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2221      	movs	r2, #33	@ 0x21
 80092be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092c2:	f7fc fa85 	bl	80057d0 <HAL_GetTick>
 80092c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	88fa      	ldrh	r2, [r7, #6]
 80092cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	88fa      	ldrh	r2, [r7, #6]
 80092d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092dc:	d108      	bne.n	80092f0 <HAL_UART_Transmit+0x6c>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	e003      	b.n	80092f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092f8:	e02e      	b.n	8009358 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2200      	movs	r2, #0
 8009302:	2180      	movs	r1, #128	@ 0x80
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 fbfb 	bl	8009b00 <UART_WaitOnFlagUntilTimeout>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e03a      	b.n	8009392 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	3302      	adds	r3, #2
 8009336:	61bb      	str	r3, [r7, #24]
 8009338:	e007      	b.n	800934a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3301      	adds	r3, #1
 8009348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1cb      	bne.n	80092fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2200      	movs	r2, #0
 800936a:	2140      	movs	r1, #64	@ 0x40
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f000 fbc7 	bl	8009b00 <UART_WaitOnFlagUntilTimeout>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e006      	b.n	8009392 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	e000      	b.n	8009392 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009390:	2302      	movs	r3, #2
  }
}
 8009392:	4618      	mov	r0, r3
 8009394:	3720      	adds	r7, #32
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b08a      	sub	sp, #40	@ 0x28
 800939e:	af02      	add	r7, sp, #8
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	603b      	str	r3, [r7, #0]
 80093a6:	4613      	mov	r3, r2
 80093a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	f040 8081 	bne.w	80094be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <HAL_UART_Receive+0x2e>
 80093c2:	88fb      	ldrh	r3, [r7, #6]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e079      	b.n	80094c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2222      	movs	r2, #34	@ 0x22
 80093d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093e0:	f7fc f9f6 	bl	80057d0 <HAL_GetTick>
 80093e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	88fa      	ldrh	r2, [r7, #6]
 80093ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	88fa      	ldrh	r2, [r7, #6]
 80093f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093fa:	d108      	bne.n	800940e <HAL_UART_Receive+0x74>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d104      	bne.n	800940e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8009404:	2300      	movs	r3, #0
 8009406:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	e003      	b.n	8009416 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009416:	e047      	b.n	80094a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2200      	movs	r2, #0
 8009420:	2120      	movs	r1, #32
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fb6c 	bl	8009b00 <UART_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e042      	b.n	80094c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10c      	bne.n	800945a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944c:	b29a      	uxth	r2, r3
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	3302      	adds	r3, #2
 8009456:	61bb      	str	r3, [r7, #24]
 8009458:	e01f      	b.n	800949a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009462:	d007      	beq.n	8009474 <HAL_UART_Receive+0xda>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <HAL_UART_Receive+0xe8>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d106      	bne.n	8009482 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	b2da      	uxtb	r2, r3
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	701a      	strb	r2, [r3, #0]
 8009480:	e008      	b.n	8009494 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800948e:	b2da      	uxtb	r2, r3
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	3301      	adds	r3, #1
 8009498:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800949e:	b29b      	uxth	r3, r3
 80094a0:	3b01      	subs	r3, #1
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1b2      	bne.n	8009418 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e000      	b.n	80094c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80094be:	2302      	movs	r3, #2
  }
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3720      	adds	r7, #32
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	4613      	mov	r3, r2
 80094d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b20      	cmp	r3, #32
 80094e0:	d121      	bne.n	8009526 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <HAL_UART_Transmit_IT+0x26>
 80094e8:	88fb      	ldrh	r3, [r7, #6]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e01a      	b.n	8009528 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	88fa      	ldrh	r2, [r7, #6]
 80094fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	88fa      	ldrh	r2, [r7, #6]
 8009502:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2221      	movs	r2, #33	@ 0x21
 800950e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68da      	ldr	r2, [r3, #12]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009520:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	e000      	b.n	8009528 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009526:	2302      	movs	r3, #2
  }
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b20      	cmp	r3, #32
 800954c:	d112      	bne.n	8009574 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <HAL_UART_Receive_IT+0x26>
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e00b      	b.n	8009576 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009564:	88fb      	ldrh	r3, [r7, #6]
 8009566:	461a      	mov	r2, r3
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 fb21 	bl	8009bb2 <UART_Start_Receive_IT>
 8009570:	4603      	mov	r3, r0
 8009572:	e000      	b.n	8009576 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009574:	2302      	movs	r3, #2
  }
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b0ba      	sub	sp, #232	@ 0xe8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80095be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10f      	bne.n	80095e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d009      	beq.n	80095e6 <HAL_UART_IRQHandler+0x66>
 80095d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fbfd 	bl	8009dde <UART_Receive_IT>
      return;
 80095e4:	e273      	b.n	8009ace <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 80de 	beq.w	80097ac <HAL_UART_IRQHandler+0x22c>
 80095f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009600:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80d1 	beq.w	80097ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800960a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00b      	beq.n	800962e <HAL_UART_IRQHandler+0xae>
 8009616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800961a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009626:	f043 0201 	orr.w	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009632:	f003 0304 	and.w	r3, r3, #4
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <HAL_UART_IRQHandler+0xd2>
 800963a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800964a:	f043 0202 	orr.w	r2, r3, #2
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <HAL_UART_IRQHandler+0xf6>
 800965e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800966e:	f043 0204 	orr.w	r2, r3, #4
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d011      	beq.n	80096a6 <HAL_UART_IRQHandler+0x126>
 8009682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009686:	f003 0320 	and.w	r3, r3, #32
 800968a:	2b00      	cmp	r3, #0
 800968c:	d105      	bne.n	800969a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800968e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800969e:	f043 0208 	orr.w	r2, r3, #8
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 820a 	beq.w	8009ac4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d008      	beq.n	80096ce <HAL_UART_IRQHandler+0x14e>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fb88 	bl	8009dde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d8:	2b40      	cmp	r3, #64	@ 0x40
 80096da:	bf0c      	ite	eq
 80096dc:	2301      	moveq	r3, #1
 80096de:	2300      	movne	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ea:	f003 0308 	and.w	r3, r3, #8
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <HAL_UART_IRQHandler+0x17a>
 80096f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d04f      	beq.n	800979a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa93 	bl	8009c26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970a:	2b40      	cmp	r3, #64	@ 0x40
 800970c:	d141      	bne.n	8009792 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3314      	adds	r3, #20
 8009714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800972c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3314      	adds	r3, #20
 8009736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800973a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800973e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1d9      	bne.n	800970e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d013      	beq.n	800978a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009766:	4a8a      	ldr	r2, [pc, #552]	@ (8009990 <HAL_UART_IRQHandler+0x410>)
 8009768:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976e:	4618      	mov	r0, r3
 8009770:	f7fc f9df 	bl	8005b32 <HAL_DMA_Abort_IT>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d016      	beq.n	80097a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800977e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009788:	e00e      	b.n	80097a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f9a2 	bl	8009ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009790:	e00a      	b.n	80097a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f99e 	bl	8009ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009798:	e006      	b.n	80097a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f99a 	bl	8009ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80097a6:	e18d      	b.n	8009ac4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	bf00      	nop
    return;
 80097aa:	e18b      	b.n	8009ac4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	f040 8167 	bne.w	8009a84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ba:	f003 0310 	and.w	r3, r3, #16
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8160 	beq.w	8009a84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80097c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8159 	beq.w	8009a84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097d2:	2300      	movs	r3, #0
 80097d4:	60bb      	str	r3, [r7, #8]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	60bb      	str	r3, [r7, #8]
 80097e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f2:	2b40      	cmp	r3, #64	@ 0x40
 80097f4:	f040 80ce 	bne.w	8009994 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009804:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 80a9 	beq.w	8009960 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009816:	429a      	cmp	r2, r3
 8009818:	f080 80a2 	bcs.w	8009960 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009822:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800982e:	f000 8088 	beq.w	8009942 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	330c      	adds	r3, #12
 8009838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800984c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	330c      	adds	r3, #12
 800985a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800985e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800986a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1d9      	bne.n	8009832 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3314      	adds	r3, #20
 8009884:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800988e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009890:	f023 0301 	bic.w	r3, r3, #1
 8009894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3314      	adds	r3, #20
 800989e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80098a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80098b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e1      	bne.n	800987e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3314      	adds	r3, #20
 80098c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3314      	adds	r3, #20
 80098da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80098de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e3      	bne.n	80098ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009912:	f023 0310 	bic.w	r3, r3, #16
 8009916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	330c      	adds	r3, #12
 8009920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009924:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009926:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800992a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800992c:	e841 2300 	strex	r3, r2, [r1]
 8009930:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e3      	bne.n	8009900 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800993c:	4618      	mov	r0, r3
 800993e:	f7fc f888 	bl	8005a52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2202      	movs	r2, #2
 8009946:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009950:	b29b      	uxth	r3, r3
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	b29b      	uxth	r3, r3
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f8c5 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800995e:	e0b3      	b.n	8009ac8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009968:	429a      	cmp	r2, r3
 800996a:	f040 80ad 	bne.w	8009ac8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009978:	f040 80a6 	bne.w	8009ac8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f8ad 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
      return;
 800998e:	e09b      	b.n	8009ac8 <HAL_UART_IRQHandler+0x548>
 8009990:	08009ced 	.word	0x08009ced
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800999c:	b29b      	uxth	r3, r3
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 808e 	beq.w	8009acc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80099b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 8089 	beq.w	8009acc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	330c      	adds	r3, #12
 80099c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	330c      	adds	r3, #12
 80099da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80099de:	647a      	str	r2, [r7, #68]	@ 0x44
 80099e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099e6:	e841 2300 	strex	r3, r2, [r1]
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1e3      	bne.n	80099ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3314      	adds	r3, #20
 80099f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	623b      	str	r3, [r7, #32]
   return(result);
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	f023 0301 	bic.w	r3, r3, #1
 8009a08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3314      	adds	r3, #20
 8009a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a16:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e3      	bne.n	80099f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0310 	bic.w	r3, r3, #16
 8009a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	330c      	adds	r3, #12
 8009a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009a5c:	61fa      	str	r2, [r7, #28]
 8009a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	69b9      	ldr	r1, [r7, #24]
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	617b      	str	r3, [r7, #20]
   return(result);
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e3      	bne.n	8009a38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f833 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a82:	e023      	b.n	8009acc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d009      	beq.n	8009aa4 <HAL_UART_IRQHandler+0x524>
 8009a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f936 	bl	8009d0e <UART_Transmit_IT>
    return;
 8009aa2:	e014      	b.n	8009ace <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00e      	beq.n	8009ace <HAL_UART_IRQHandler+0x54e>
 8009ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d008      	beq.n	8009ace <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f976 	bl	8009dae <UART_EndTransmit_IT>
    return;
 8009ac2:	e004      	b.n	8009ace <HAL_UART_IRQHandler+0x54e>
    return;
 8009ac4:	bf00      	nop
 8009ac6:	e002      	b.n	8009ace <HAL_UART_IRQHandler+0x54e>
      return;
 8009ac8:	bf00      	nop
 8009aca:	e000      	b.n	8009ace <HAL_UART_IRQHandler+0x54e>
      return;
 8009acc:	bf00      	nop
  }
}
 8009ace:	37e8      	adds	r7, #232	@ 0xe8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b10:	e03b      	b.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b18:	d037      	beq.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1a:	f7fb fe59 	bl	80057d0 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	6a3a      	ldr	r2, [r7, #32]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d302      	bcc.n	8009b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e03a      	b.n	8009baa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d023      	beq.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2b80      	cmp	r3, #128	@ 0x80
 8009b46:	d020      	beq.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d01d      	beq.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0308 	and.w	r3, r3, #8
 8009b58:	2b08      	cmp	r3, #8
 8009b5a:	d116      	bne.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	617b      	str	r3, [r7, #20]
 8009b70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 f857 	bl	8009c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2208      	movs	r2, #8
 8009b7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e00f      	b.n	8009baa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	4013      	ands	r3, r2
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	bf0c      	ite	eq
 8009b9a:	2301      	moveq	r3, #1
 8009b9c:	2300      	movne	r3, #0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	79fb      	ldrb	r3, [r7, #7]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d0b4      	beq.n	8009b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b085      	sub	sp, #20
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	88fa      	ldrh	r2, [r7, #6]
 8009bca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	88fa      	ldrh	r2, [r7, #6]
 8009bd0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2222      	movs	r2, #34	@ 0x22
 8009bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009bf6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695a      	ldr	r2, [r3, #20]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0201 	orr.w	r2, r2, #1
 8009c06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68da      	ldr	r2, [r3, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0220 	orr.w	r2, r2, #32
 8009c16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b095      	sub	sp, #84	@ 0x54
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	330c      	adds	r3, #12
 8009c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	330c      	adds	r3, #12
 8009c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c56:	e841 2300 	strex	r3, r2, [r1]
 8009c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e5      	bne.n	8009c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3314      	adds	r3, #20
 8009c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	f023 0301 	bic.w	r3, r3, #1
 8009c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3314      	adds	r3, #20
 8009c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e5      	bne.n	8009c62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d119      	bne.n	8009cd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	330c      	adds	r3, #12
 8009ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f023 0310 	bic.w	r3, r3, #16
 8009cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	330c      	adds	r3, #12
 8009cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cbe:	61ba      	str	r2, [r7, #24]
 8009cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6979      	ldr	r1, [r7, #20]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	613b      	str	r3, [r7, #16]
   return(result);
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e5      	bne.n	8009c9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009ce0:	bf00      	nop
 8009ce2:	3754      	adds	r7, #84	@ 0x54
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7ff fee7 	bl	8009ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b21      	cmp	r3, #33	@ 0x21
 8009d20:	d13e      	bne.n	8009da0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d2a:	d114      	bne.n	8009d56 <UART_Transmit_IT+0x48>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d110      	bne.n	8009d56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	1c9a      	adds	r2, r3, #2
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	621a      	str	r2, [r3, #32]
 8009d54:	e008      	b.n	8009d68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	1c59      	adds	r1, r3, #1
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6211      	str	r1, [r2, #32]
 8009d60:	781a      	ldrb	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10f      	bne.n	8009d9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e000      	b.n	8009da2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009da0:	2302      	movs	r3, #2
  }
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7f9 f986 	bl	80030e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b08c      	sub	sp, #48	@ 0x30
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b22      	cmp	r3, #34	@ 0x22
 8009df8:	f040 80aa 	bne.w	8009f50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e04:	d115      	bne.n	8009e32 <UART_Receive_IT+0x54>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d111      	bne.n	8009e32 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2a:	1c9a      	adds	r2, r3, #2
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e30:	e024      	b.n	8009e7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e40:	d007      	beq.n	8009e52 <UART_Receive_IT+0x74>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <UART_Receive_IT+0x82>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d106      	bne.n	8009e60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	e008      	b.n	8009e72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e76:	1c5a      	adds	r2, r3, #1
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	3b01      	subs	r3, #1
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d15d      	bne.n	8009f4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0220 	bic.w	r2, r2, #32
 8009e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009eae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	695a      	ldr	r2, [r3, #20]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0201 	bic.w	r2, r2, #1
 8009ebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d135      	bne.n	8009f42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	613b      	str	r3, [r7, #16]
   return(result);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f023 0310 	bic.w	r3, r3, #16
 8009ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	330c      	adds	r3, #12
 8009efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009efc:	623a      	str	r2, [r7, #32]
 8009efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	69f9      	ldr	r1, [r7, #28]
 8009f02:	6a3a      	ldr	r2, [r7, #32]
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e5      	bne.n	8009edc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0310 	and.w	r3, r3, #16
 8009f1a:	2b10      	cmp	r3, #16
 8009f1c:	d10a      	bne.n	8009f34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff fdd4 	bl	8009ae8 <HAL_UARTEx_RxEventCallback>
 8009f40:	e002      	b.n	8009f48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7f9 f85e 	bl	8003004 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e002      	b.n	8009f52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e000      	b.n	8009f52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009f50:	2302      	movs	r3, #2
  }
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3730      	adds	r7, #48	@ 0x30
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f60:	b0c0      	sub	sp, #256	@ 0x100
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f78:	68d9      	ldr	r1, [r3, #12]
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	ea40 0301 	orr.w	r3, r0, r1
 8009f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	431a      	orrs	r2, r3
 8009f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009fb4:	f021 010c 	bic.w	r1, r1, #12
 8009fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fc2:	430b      	orrs	r3, r1
 8009fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd6:	6999      	ldr	r1, [r3, #24]
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	ea40 0301 	orr.w	r3, r0, r1
 8009fe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b8f      	ldr	r3, [pc, #572]	@ (800a228 <UART_SetConfig+0x2cc>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d005      	beq.n	8009ffc <UART_SetConfig+0xa0>
 8009ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800a22c <UART_SetConfig+0x2d0>)
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d104      	bne.n	800a006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ffc:	f7fc fbf6 	bl	80067ec <HAL_RCC_GetPCLK2Freq>
 800a000:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a004:	e003      	b.n	800a00e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a006:	f7fc fbdd 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 800a00a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a018:	f040 810c 	bne.w	800a234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a01c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a020:	2200      	movs	r2, #0
 800a022:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a026:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a02a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a02e:	4622      	mov	r2, r4
 800a030:	462b      	mov	r3, r5
 800a032:	1891      	adds	r1, r2, r2
 800a034:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a036:	415b      	adcs	r3, r3
 800a038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a03a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a03e:	4621      	mov	r1, r4
 800a040:	eb12 0801 	adds.w	r8, r2, r1
 800a044:	4629      	mov	r1, r5
 800a046:	eb43 0901 	adc.w	r9, r3, r1
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a05a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a05e:	4690      	mov	r8, r2
 800a060:	4699      	mov	r9, r3
 800a062:	4623      	mov	r3, r4
 800a064:	eb18 0303 	adds.w	r3, r8, r3
 800a068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a06c:	462b      	mov	r3, r5
 800a06e:	eb49 0303 	adc.w	r3, r9, r3
 800a072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a082:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a08a:	460b      	mov	r3, r1
 800a08c:	18db      	adds	r3, r3, r3
 800a08e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a090:	4613      	mov	r3, r2
 800a092:	eb42 0303 	adc.w	r3, r2, r3
 800a096:	657b      	str	r3, [r7, #84]	@ 0x54
 800a098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a09c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a0a0:	f7f6 f8fe 	bl	80002a0 <__aeabi_uldivmod>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4b61      	ldr	r3, [pc, #388]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a0aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a0ae:	095b      	lsrs	r3, r3, #5
 800a0b0:	011c      	lsls	r4, r3, #4
 800a0b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a0c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	464b      	mov	r3, r9
 800a0c8:	1891      	adds	r1, r2, r2
 800a0ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a0cc:	415b      	adcs	r3, r3
 800a0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a0d4:	4641      	mov	r1, r8
 800a0d6:	eb12 0a01 	adds.w	sl, r2, r1
 800a0da:	4649      	mov	r1, r9
 800a0dc:	eb43 0b01 	adc.w	fp, r3, r1
 800a0e0:	f04f 0200 	mov.w	r2, #0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a0ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0f4:	4692      	mov	sl, r2
 800a0f6:	469b      	mov	fp, r3
 800a0f8:	4643      	mov	r3, r8
 800a0fa:	eb1a 0303 	adds.w	r3, sl, r3
 800a0fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a102:	464b      	mov	r3, r9
 800a104:	eb4b 0303 	adc.w	r3, fp, r3
 800a108:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a118:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a11c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a120:	460b      	mov	r3, r1
 800a122:	18db      	adds	r3, r3, r3
 800a124:	643b      	str	r3, [r7, #64]	@ 0x40
 800a126:	4613      	mov	r3, r2
 800a128:	eb42 0303 	adc.w	r3, r2, r3
 800a12c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a12e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a136:	f7f6 f8b3 	bl	80002a0 <__aeabi_uldivmod>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4611      	mov	r1, r2
 800a140:	4b3b      	ldr	r3, [pc, #236]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a142:	fba3 2301 	umull	r2, r3, r3, r1
 800a146:	095b      	lsrs	r3, r3, #5
 800a148:	2264      	movs	r2, #100	@ 0x64
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
 800a14e:	1acb      	subs	r3, r1, r3
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a156:	4b36      	ldr	r3, [pc, #216]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a158:	fba3 2302 	umull	r2, r3, r3, r2
 800a15c:	095b      	lsrs	r3, r3, #5
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a164:	441c      	add	r4, r3
 800a166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a170:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a178:	4642      	mov	r2, r8
 800a17a:	464b      	mov	r3, r9
 800a17c:	1891      	adds	r1, r2, r2
 800a17e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a180:	415b      	adcs	r3, r3
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a188:	4641      	mov	r1, r8
 800a18a:	1851      	adds	r1, r2, r1
 800a18c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a18e:	4649      	mov	r1, r9
 800a190:	414b      	adcs	r3, r1
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34
 800a194:	f04f 0200 	mov.w	r2, #0
 800a198:	f04f 0300 	mov.w	r3, #0
 800a19c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	00cb      	lsls	r3, r1, #3
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1aa:	4651      	mov	r1, sl
 800a1ac:	00ca      	lsls	r2, r1, #3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	189b      	adds	r3, r3, r2
 800a1b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1bc:	464b      	mov	r3, r9
 800a1be:	460a      	mov	r2, r1
 800a1c0:	eb42 0303 	adc.w	r3, r2, r3
 800a1c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a1d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a1d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a1dc:	460b      	mov	r3, r1
 800a1de:	18db      	adds	r3, r3, r3
 800a1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	eb42 0303 	adc.w	r3, r2, r3
 800a1e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a1ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a1f2:	f7f6 f855 	bl	80002a0 <__aeabi_uldivmod>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a1fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a200:	095b      	lsrs	r3, r3, #5
 800a202:	2164      	movs	r1, #100	@ 0x64
 800a204:	fb01 f303 	mul.w	r3, r1, r3
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	3332      	adds	r3, #50	@ 0x32
 800a20e:	4a08      	ldr	r2, [pc, #32]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a210:	fba2 2303 	umull	r2, r3, r2, r3
 800a214:	095b      	lsrs	r3, r3, #5
 800a216:	f003 0207 	and.w	r2, r3, #7
 800a21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4422      	add	r2, r4
 800a222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a224:	e106      	b.n	800a434 <UART_SetConfig+0x4d8>
 800a226:	bf00      	nop
 800a228:	40011000 	.word	0x40011000
 800a22c:	40011400 	.word	0x40011400
 800a230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a238:	2200      	movs	r2, #0
 800a23a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a23e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a246:	4642      	mov	r2, r8
 800a248:	464b      	mov	r3, r9
 800a24a:	1891      	adds	r1, r2, r2
 800a24c:	6239      	str	r1, [r7, #32]
 800a24e:	415b      	adcs	r3, r3
 800a250:	627b      	str	r3, [r7, #36]	@ 0x24
 800a252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a256:	4641      	mov	r1, r8
 800a258:	1854      	adds	r4, r2, r1
 800a25a:	4649      	mov	r1, r9
 800a25c:	eb43 0501 	adc.w	r5, r3, r1
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	f04f 0300 	mov.w	r3, #0
 800a268:	00eb      	lsls	r3, r5, #3
 800a26a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a26e:	00e2      	lsls	r2, r4, #3
 800a270:	4614      	mov	r4, r2
 800a272:	461d      	mov	r5, r3
 800a274:	4643      	mov	r3, r8
 800a276:	18e3      	adds	r3, r4, r3
 800a278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a27c:	464b      	mov	r3, r9
 800a27e:	eb45 0303 	adc.w	r3, r5, r3
 800a282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a292:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a296:	f04f 0200 	mov.w	r2, #0
 800a29a:	f04f 0300 	mov.w	r3, #0
 800a29e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	008b      	lsls	r3, r1, #2
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	008a      	lsls	r2, r1, #2
 800a2b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a2b4:	f7f5 fff4 	bl	80002a0 <__aeabi_uldivmod>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4b60      	ldr	r3, [pc, #384]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a2be:	fba3 2302 	umull	r2, r3, r3, r2
 800a2c2:	095b      	lsrs	r3, r3, #5
 800a2c4:	011c      	lsls	r4, r3, #4
 800a2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a2d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a2d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a2d8:	4642      	mov	r2, r8
 800a2da:	464b      	mov	r3, r9
 800a2dc:	1891      	adds	r1, r2, r2
 800a2de:	61b9      	str	r1, [r7, #24]
 800a2e0:	415b      	adcs	r3, r3
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2e8:	4641      	mov	r1, r8
 800a2ea:	1851      	adds	r1, r2, r1
 800a2ec:	6139      	str	r1, [r7, #16]
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	414b      	adcs	r3, r1
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	f04f 0200 	mov.w	r2, #0
 800a2f8:	f04f 0300 	mov.w	r3, #0
 800a2fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a300:	4659      	mov	r1, fp
 800a302:	00cb      	lsls	r3, r1, #3
 800a304:	4651      	mov	r1, sl
 800a306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a30a:	4651      	mov	r1, sl
 800a30c:	00ca      	lsls	r2, r1, #3
 800a30e:	4610      	mov	r0, r2
 800a310:	4619      	mov	r1, r3
 800a312:	4603      	mov	r3, r0
 800a314:	4642      	mov	r2, r8
 800a316:	189b      	adds	r3, r3, r2
 800a318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a31c:	464b      	mov	r3, r9
 800a31e:	460a      	mov	r2, r1
 800a320:	eb42 0303 	adc.w	r3, r2, r3
 800a324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a332:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a340:	4649      	mov	r1, r9
 800a342:	008b      	lsls	r3, r1, #2
 800a344:	4641      	mov	r1, r8
 800a346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a34a:	4641      	mov	r1, r8
 800a34c:	008a      	lsls	r2, r1, #2
 800a34e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a352:	f7f5 ffa5 	bl	80002a0 <__aeabi_uldivmod>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	4b38      	ldr	r3, [pc, #224]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a35e:	fba3 2301 	umull	r2, r3, r3, r1
 800a362:	095b      	lsrs	r3, r3, #5
 800a364:	2264      	movs	r2, #100	@ 0x64
 800a366:	fb02 f303 	mul.w	r3, r2, r3
 800a36a:	1acb      	subs	r3, r1, r3
 800a36c:	011b      	lsls	r3, r3, #4
 800a36e:	3332      	adds	r3, #50	@ 0x32
 800a370:	4a33      	ldr	r2, [pc, #204]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a372:	fba2 2303 	umull	r2, r3, r2, r3
 800a376:	095b      	lsrs	r3, r3, #5
 800a378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a37c:	441c      	add	r4, r3
 800a37e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a382:	2200      	movs	r2, #0
 800a384:	673b      	str	r3, [r7, #112]	@ 0x70
 800a386:	677a      	str	r2, [r7, #116]	@ 0x74
 800a388:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a38c:	4642      	mov	r2, r8
 800a38e:	464b      	mov	r3, r9
 800a390:	1891      	adds	r1, r2, r2
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	415b      	adcs	r3, r3
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a39c:	4641      	mov	r1, r8
 800a39e:	1851      	adds	r1, r2, r1
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	414b      	adcs	r3, r1
 800a3a6:	607b      	str	r3, [r7, #4]
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	f04f 0300 	mov.w	r3, #0
 800a3b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	00cb      	lsls	r3, r1, #3
 800a3b8:	4651      	mov	r1, sl
 800a3ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3be:	4651      	mov	r1, sl
 800a3c0:	00ca      	lsls	r2, r1, #3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	189b      	adds	r3, r3, r2
 800a3cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3ce:	464b      	mov	r3, r9
 800a3d0:	460a      	mov	r2, r1
 800a3d2:	eb42 0303 	adc.w	r3, r2, r3
 800a3d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3e2:	667a      	str	r2, [r7, #100]	@ 0x64
 800a3e4:	f04f 0200 	mov.w	r2, #0
 800a3e8:	f04f 0300 	mov.w	r3, #0
 800a3ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	008b      	lsls	r3, r1, #2
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3fa:	4641      	mov	r1, r8
 800a3fc:	008a      	lsls	r2, r1, #2
 800a3fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a402:	f7f5 ff4d 	bl	80002a0 <__aeabi_uldivmod>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4b0d      	ldr	r3, [pc, #52]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a40c:	fba3 1302 	umull	r1, r3, r3, r2
 800a410:	095b      	lsrs	r3, r3, #5
 800a412:	2164      	movs	r1, #100	@ 0x64
 800a414:	fb01 f303 	mul.w	r3, r1, r3
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	3332      	adds	r3, #50	@ 0x32
 800a41e:	4a08      	ldr	r2, [pc, #32]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a420:	fba2 2303 	umull	r2, r3, r2, r3
 800a424:	095b      	lsrs	r3, r3, #5
 800a426:	f003 020f 	and.w	r2, r3, #15
 800a42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4422      	add	r2, r4
 800a432:	609a      	str	r2, [r3, #8]
}
 800a434:	bf00      	nop
 800a436:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a43a:	46bd      	mov	sp, r7
 800a43c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a440:	51eb851f 	.word	0x51eb851f

0800a444 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a444:	b084      	sub	sp, #16
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	f107 001c 	add.w	r0, r7, #28
 800a452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a45a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a45c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a45e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a462:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a466:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a46a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a46e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	4313      	orrs	r3, r2
 800a474:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a47e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	431a      	orrs	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	b004      	add	sp, #16
 800a498:	4770      	bx	lr

0800a49a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a52c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a532:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a538:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a548:	f023 030f 	bic.w	r3, r3, #15
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a562:	b480      	push	{r7}
 800a564:	b083      	sub	sp, #12
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	b2db      	uxtb	r3, r3
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3314      	adds	r3, #20
 800a58a:	461a      	mov	r2, r3
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	4413      	add	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
}  
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5c8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a5ce:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a5d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0

}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b088      	sub	sp, #32
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a608:	2310      	movs	r3, #16
 800a60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a60c:	2340      	movs	r3, #64	@ 0x40
 800a60e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a610:	2300      	movs	r3, #0
 800a612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a618:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a61a:	f107 0308 	add.w	r3, r7, #8
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff ff74 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a62a:	2110      	movs	r1, #16
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f9d7 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a634:	69fb      	ldr	r3, [r7, #28]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b088      	sub	sp, #32
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a64c:	2311      	movs	r3, #17
 800a64e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a650:	2340      	movs	r3, #64	@ 0x40
 800a652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a654:	2300      	movs	r3, #0
 800a656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a65c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a65e:	f107 0308 	add.w	r3, r7, #8
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ff52 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a66a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a66e:	2111      	movs	r1, #17
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f9b5 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a678:	69fb      	ldr	r3, [r7, #28]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3720      	adds	r7, #32
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b088      	sub	sp, #32
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a690:	2312      	movs	r3, #18
 800a692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a694:	2340      	movs	r3, #64	@ 0x40
 800a696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a698:	2300      	movs	r3, #0
 800a69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a69c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6a2:	f107 0308 	add.w	r3, r7, #8
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ff30 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a6ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6b2:	2112      	movs	r1, #18
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f993 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6bc:	69fb      	ldr	r3, [r7, #28]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b088      	sub	sp, #32
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a6d4:	2318      	movs	r3, #24
 800a6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6d8:	2340      	movs	r3, #64	@ 0x40
 800a6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6e6:	f107 0308 	add.w	r3, r7, #8
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff ff0e 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a6f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f6:	2118      	movs	r1, #24
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f971 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a6fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a700:	69fb      	ldr	r3, [r7, #28]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3720      	adds	r7, #32
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b088      	sub	sp, #32
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a718:	2319      	movs	r3, #25
 800a71a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a71c:	2340      	movs	r3, #64	@ 0x40
 800a71e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a72a:	f107 0308 	add.w	r3, r7, #8
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff feec 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a73a:	2119      	movs	r1, #25
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f94f 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a744:	69fb      	ldr	r3, [r7, #28]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3720      	adds	r7, #32
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a75c:	230c      	movs	r3, #12
 800a75e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a760:	2340      	movs	r3, #64	@ 0x40
 800a762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a768:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a76c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a76e:	f107 0308 	add.w	r3, r7, #8
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff feca 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a77a:	4a05      	ldr	r2, [pc, #20]	@ (800a790 <SDMMC_CmdStopTransfer+0x40>)
 800a77c:	210c      	movs	r1, #12
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f92e 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a786:	69fb      	ldr	r3, [r7, #28]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3720      	adds	r7, #32
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	05f5e100 	.word	0x05f5e100

0800a794 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b08a      	sub	sp, #40	@ 0x28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a7a4:	2307      	movs	r3, #7
 800a7a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7a8:	2340      	movs	r3, #64	@ 0x40
 800a7aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7b6:	f107 0310 	add.w	r3, r7, #16
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7ff fea6 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a7c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7c6:	2107      	movs	r1, #7
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f909 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a7ce:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3728      	adds	r7, #40	@ 0x28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b088      	sub	sp, #32
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7f8:	f107 0308 	add.w	r3, r7, #8
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff fe85 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fb23 	bl	800ae50 <SDMMC_GetCmdError>
 800a80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a80c:	69fb      	ldr	r3, [r7, #28]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b088      	sub	sp, #32
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a81e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a824:	2308      	movs	r3, #8
 800a826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a828:	2340      	movs	r3, #64	@ 0x40
 800a82a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a834:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a836:	f107 0308 	add.w	r3, r7, #8
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff fe66 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fab6 	bl	800adb4 <SDMMC_GetCmdResp7>
 800a848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a84a:	69fb      	ldr	r3, [r7, #28]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3720      	adds	r7, #32
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a862:	2337      	movs	r3, #55	@ 0x37
 800a864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a866:	2340      	movs	r3, #64	@ 0x40
 800a868:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a86a:	2300      	movs	r3, #0
 800a86c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a86e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a872:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a874:	f107 0308 	add.w	r3, r7, #8
 800a878:	4619      	mov	r1, r3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fe47 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a880:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a884:	2137      	movs	r1, #55	@ 0x37
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8aa 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a88c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a88e:	69fb      	ldr	r3, [r7, #28]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3720      	adds	r7, #32
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a8a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a8ae:	2329      	movs	r3, #41	@ 0x29
 800a8b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8b2:	2340      	movs	r3, #64	@ 0x40
 800a8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8c0:	f107 0308 	add.w	r3, r7, #8
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fe21 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f9bd 	bl	800ac4c <SDMMC_GetCmdResp3>
 800a8d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3720      	adds	r7, #32
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b088      	sub	sp, #32
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a8ee:	23c0      	movs	r3, #192	@ 0xc0
 800a8f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8fc:	f107 0308 	add.w	r3, r7, #8
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff fe03 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f957 	bl	800abbc <SDMMC_GetCmdResp2>
 800a90e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a910:	69fb      	ldr	r3, [r7, #28]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3720      	adds	r7, #32
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b088      	sub	sp, #32
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a928:	2309      	movs	r3, #9
 800a92a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a92c:	23c0      	movs	r3, #192	@ 0xc0
 800a92e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a93a:	f107 0308 	add.w	r3, r7, #8
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff fde4 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f938 	bl	800abbc <SDMMC_GetCmdResp2>
 800a94c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a94e:	69fb      	ldr	r3, [r7, #28]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3720      	adds	r7, #32
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a966:	2303      	movs	r3, #3
 800a968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a96a:	2340      	movs	r3, #64	@ 0x40
 800a96c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a96e:	2300      	movs	r3, #0
 800a970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a976:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a978:	f107 0308 	add.w	r3, r7, #8
 800a97c:	4619      	mov	r1, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff fdc5 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	2103      	movs	r1, #3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f99d 	bl	800acc8 <SDMMC_GetCmdResp6>
 800a98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a990:	69fb      	ldr	r3, [r7, #28]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3720      	adds	r7, #32
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b088      	sub	sp, #32
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a9a8:	230d      	movs	r3, #13
 800a9aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9ac:	2340      	movs	r3, #64	@ 0x40
 800a9ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9ba:	f107 0308 	add.w	r3, r7, #8
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff fda4 	bl	800a50e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a9c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ca:	210d      	movs	r1, #13
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f807 	bl	800a9e0 <SDMMC_GetCmdResp1>
 800a9d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3720      	adds	r7, #32
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a9ee:	4b70      	ldr	r3, [pc, #448]	@ (800abb0 <SDMMC_GetCmdResp1+0x1d0>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a70      	ldr	r2, [pc, #448]	@ (800abb4 <SDMMC_GetCmdResp1+0x1d4>)
 800a9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f8:	0a5a      	lsrs	r2, r3, #9
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	fb02 f303 	mul.w	r3, r2, r3
 800aa00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	1e5a      	subs	r2, r3, #1
 800aa06:	61fa      	str	r2, [r7, #28]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa10:	e0c9      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0ef      	beq.n	800aa02 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1ea      	bne.n	800aa02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d004      	beq.n	800aa42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2204      	movs	r2, #4
 800aa3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa3e:	2304      	movs	r3, #4
 800aa40:	e0b1      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2201      	movs	r2, #1
 800aa52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e0a6      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	22c5      	movs	r2, #197	@ 0xc5
 800aa5c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fd7f 	bl	800a562 <SDIO_GetCommandResponse>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d001      	beq.n	800aa72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e099      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa72:	2100      	movs	r1, #0
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7ff fd81 	bl	800a57c <SDIO_GetResponse>
 800aa7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	4b4e      	ldr	r3, [pc, #312]	@ (800abb8 <SDMMC_GetCmdResp1+0x1d8>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aa86:	2300      	movs	r3, #0
 800aa88:	e08d      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	da02      	bge.n	800aa96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa94:	e087      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aaa0:	2340      	movs	r3, #64	@ 0x40
 800aaa2:	e080      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aaae:	2380      	movs	r3, #128	@ 0x80
 800aab0:	e079      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aabc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aac0:	e071      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aacc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aad0:	e069      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aadc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aae0:	e061      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aaec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aaf0:	e059      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aafc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab00:	e051      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab10:	e049      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab20:	e041      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab30:	e039      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ab40:	e031      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ab50:	e029      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab60:	e021      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab70:	e019      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ab80:	e011      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ab8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ab90:	e009      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ab9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800aba0:	e001      	b.n	800aba6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3720      	adds	r7, #32
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20000004 	.word	0x20000004
 800abb4:	10624dd3 	.word	0x10624dd3
 800abb8:	fdffe008 	.word	0xfdffe008

0800abbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abc4:	4b1f      	ldr	r3, [pc, #124]	@ (800ac44 <SDMMC_GetCmdResp2+0x88>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a1f      	ldr	r2, [pc, #124]	@ (800ac48 <SDMMC_GetCmdResp2+0x8c>)
 800abca:	fba2 2303 	umull	r2, r3, r2, r3
 800abce:	0a5b      	lsrs	r3, r3, #9
 800abd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abd4:	fb02 f303 	mul.w	r3, r2, r3
 800abd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	1e5a      	subs	r2, r3, #1
 800abde:	60fa      	str	r2, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abe4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abe8:	e026      	b.n	800ac38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0ef      	beq.n	800abda <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1ea      	bne.n	800abda <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d004      	beq.n	800ac1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2204      	movs	r2, #4
 800ac14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac16:	2304      	movs	r3, #4
 800ac18:	e00e      	b.n	800ac38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d004      	beq.n	800ac30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e003      	b.n	800ac38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	22c5      	movs	r2, #197	@ 0xc5
 800ac34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	20000004 	.word	0x20000004
 800ac48:	10624dd3 	.word	0x10624dd3

0800ac4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac54:	4b1a      	ldr	r3, [pc, #104]	@ (800acc0 <SDMMC_GetCmdResp3+0x74>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a1a      	ldr	r2, [pc, #104]	@ (800acc4 <SDMMC_GetCmdResp3+0x78>)
 800ac5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac5e:	0a5b      	lsrs	r3, r3, #9
 800ac60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac64:	fb02 f303 	mul.w	r3, r2, r3
 800ac68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1e5a      	subs	r2, r3, #1
 800ac6e:	60fa      	str	r2, [r7, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac78:	e01b      	b.n	800acb2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0ef      	beq.n	800ac6a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1ea      	bne.n	800ac6a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d004      	beq.n	800acaa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2204      	movs	r2, #4
 800aca4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aca6:	2304      	movs	r3, #4
 800aca8:	e003      	b.n	800acb2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	22c5      	movs	r2, #197	@ 0xc5
 800acae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	20000004 	.word	0x20000004
 800acc4:	10624dd3 	.word	0x10624dd3

0800acc8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b088      	sub	sp, #32
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	460b      	mov	r3, r1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acd6:	4b35      	ldr	r3, [pc, #212]	@ (800adac <SDMMC_GetCmdResp6+0xe4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a35      	ldr	r2, [pc, #212]	@ (800adb0 <SDMMC_GetCmdResp6+0xe8>)
 800acdc:	fba2 2303 	umull	r2, r3, r2, r3
 800ace0:	0a5b      	lsrs	r3, r3, #9
 800ace2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
 800acea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	1e5a      	subs	r2, r3, #1
 800acf0:	61fa      	str	r2, [r7, #28]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acf6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acfa:	e052      	b.n	800ada2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0ef      	beq.n	800acec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1ea      	bne.n	800acec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2204      	movs	r2, #4
 800ad26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad28:	2304      	movs	r3, #4
 800ad2a:	e03a      	b.n	800ada2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e02f      	b.n	800ada2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff fc0d 	bl	800a562 <SDIO_GetCommandResponse>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d001      	beq.n	800ad56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e025      	b.n	800ada2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	22c5      	movs	r2, #197	@ 0xc5
 800ad5a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f7ff fc0c 	bl	800a57c <SDIO_GetResponse>
 800ad64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	0c1b      	lsrs	r3, r3, #16
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e011      	b.n	800ada2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad8c:	e009      	b.n	800ada2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad9c:	e001      	b.n	800ada2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3720      	adds	r7, #32
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20000004 	.word	0x20000004
 800adb0:	10624dd3 	.word	0x10624dd3

0800adb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adbc:	4b22      	ldr	r3, [pc, #136]	@ (800ae48 <SDMMC_GetCmdResp7+0x94>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a22      	ldr	r2, [pc, #136]	@ (800ae4c <SDMMC_GetCmdResp7+0x98>)
 800adc2:	fba2 2303 	umull	r2, r3, r2, r3
 800adc6:	0a5b      	lsrs	r3, r3, #9
 800adc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adcc:	fb02 f303 	mul.w	r3, r2, r3
 800add0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	60fa      	str	r2, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800addc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ade0:	e02c      	b.n	800ae3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ade6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0ef      	beq.n	800add2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1ea      	bne.n	800add2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2204      	movs	r2, #4
 800ae0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae0e:	2304      	movs	r3, #4
 800ae10:	e014      	b.n	800ae3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e009      	b.n	800ae3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2240      	movs	r2, #64	@ 0x40
 800ae38:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae3a:	2300      	movs	r3, #0
  
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	20000004 	.word	0x20000004
 800ae4c:	10624dd3 	.word	0x10624dd3

0800ae50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae58:	4b11      	ldr	r3, [pc, #68]	@ (800aea0 <SDMMC_GetCmdError+0x50>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a11      	ldr	r2, [pc, #68]	@ (800aea4 <SDMMC_GetCmdError+0x54>)
 800ae5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae62:	0a5b      	lsrs	r3, r3, #9
 800ae64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae68:	fb02 f303 	mul.w	r3, r2, r3
 800ae6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	1e5a      	subs	r2, r3, #1
 800ae72:	60fa      	str	r2, [r7, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae7c:	e009      	b.n	800ae92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f1      	beq.n	800ae6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	22c5      	movs	r2, #197	@ 0xc5
 800ae8e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20000004 	.word	0x20000004
 800aea4:	10624dd3 	.word	0x10624dd3

0800aea8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aeac:	4904      	ldr	r1, [pc, #16]	@ (800aec0 <MX_FATFS_Init+0x18>)
 800aeae:	4805      	ldr	r0, [pc, #20]	@ (800aec4 <MX_FATFS_Init+0x1c>)
 800aeb0:	f002 fc5c 	bl	800d76c <FATFS_LinkDriver>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	4b03      	ldr	r3, [pc, #12]	@ (800aec8 <MX_FATFS_Init+0x20>)
 800aeba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aebc:	bf00      	nop
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20001088 	.word	0x20001088
 800aec4:	08011454 	.word	0x08011454
 800aec8:	20001084 	.word	0x20001084

0800aecc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aed0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aee6:	f000 f86b 	bl	800afc0 <BSP_SD_IsDetected>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d001      	beq.n	800aef4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e005      	b.n	800af00 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800aef4:	4804      	ldr	r0, [pc, #16]	@ (800af08 <BSP_SD_Init+0x2c>)
 800aef6:	f7fc f905 	bl	8007104 <HAL_SD_Init>
 800aefa:	4603      	mov	r3, r0
 800aefc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800aefe:	79fb      	ldrb	r3, [r7, #7]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20000da4 	.word	0x20000da4

0800af0c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af02      	add	r7, sp, #8
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	68f9      	ldr	r1, [r7, #12]
 800af28:	4806      	ldr	r0, [pc, #24]	@ (800af44 <BSP_SD_ReadBlocks+0x38>)
 800af2a:	f7fc f993 	bl	8007254 <HAL_SD_ReadBlocks>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af38:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20000da4 	.word	0x20000da4

0800af48 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af02      	add	r7, sp, #8
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	4806      	ldr	r0, [pc, #24]	@ (800af80 <BSP_SD_WriteBlocks+0x38>)
 800af66:	f7fc fb5b 	bl	8007620 <HAL_SD_WriteBlocks>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af74:	7dfb      	ldrb	r3, [r7, #23]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20000da4 	.word	0x20000da4

0800af84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af88:	4805      	ldr	r0, [pc, #20]	@ (800afa0 <BSP_SD_GetCardState+0x1c>)
 800af8a:	f7fc fea7 	bl	8007cdc <HAL_SD_GetCardState>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b04      	cmp	r3, #4
 800af92:	bf14      	ite	ne
 800af94:	2301      	movne	r3, #1
 800af96:	2300      	moveq	r3, #0
 800af98:	b2db      	uxtb	r3, r3
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20000da4 	.word	0x20000da4

0800afa4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4803      	ldr	r0, [pc, #12]	@ (800afbc <BSP_SD_GetCardInfo+0x18>)
 800afb0:	f7fc fe68 	bl	8007c84 <HAL_SD_GetCardInfo>
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	20000da4 	.word	0x20000da4

0800afc0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afc6:	2301      	movs	r3, #1
 800afc8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	b2db      	uxtb	r3, r3
}
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800afe6:	4b0b      	ldr	r3, [pc, #44]	@ (800b014 <SD_CheckStatus+0x38>)
 800afe8:	2201      	movs	r2, #1
 800afea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800afec:	f7ff ffca 	bl	800af84 <BSP_SD_GetCardState>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d107      	bne.n	800b006 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aff6:	4b07      	ldr	r3, [pc, #28]	@ (800b014 <SD_CheckStatus+0x38>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	f023 0301 	bic.w	r3, r3, #1
 800b000:	b2da      	uxtb	r2, r3
 800b002:	4b04      	ldr	r3, [pc, #16]	@ (800b014 <SD_CheckStatus+0x38>)
 800b004:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b006:	4b03      	ldr	r3, [pc, #12]	@ (800b014 <SD_CheckStatus+0x38>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	b2db      	uxtb	r3, r3
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	2000040d 	.word	0x2000040d

0800b018 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b022:	4b0b      	ldr	r3, [pc, #44]	@ (800b050 <SD_initialize+0x38>)
 800b024:	2201      	movs	r2, #1
 800b026:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b028:	f7ff ff58 	bl	800aedc <BSP_SD_Init>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d107      	bne.n	800b042 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ffd1 	bl	800afdc <SD_CheckStatus>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b04      	ldr	r3, [pc, #16]	@ (800b050 <SD_initialize+0x38>)
 800b040:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b042:	4b03      	ldr	r3, [pc, #12]	@ (800b050 <SD_initialize+0x38>)
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	b2db      	uxtb	r3, r3
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	2000040d 	.word	0x2000040d

0800b054 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff ffbb 	bl	800afdc <SD_CheckStatus>
 800b066:	4603      	mov	r3, r0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b084:	f04f 33ff 	mov.w	r3, #4294967295
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	68b8      	ldr	r0, [r7, #8]
 800b08e:	f7ff ff3d 	bl	800af0c <BSP_SD_ReadBlocks>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d107      	bne.n	800b0a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b098:	bf00      	nop
 800b09a:	f7ff ff73 	bl	800af84 <BSP_SD_GetCardState>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1fa      	bne.n	800b09a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b086      	sub	sp, #24
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	603b      	str	r3, [r7, #0]
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	68b8      	ldr	r0, [r7, #8]
 800b0d0:	f7ff ff3a 	bl	800af48 <BSP_SD_WriteBlocks>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d107      	bne.n	800b0ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b0da:	bf00      	nop
 800b0dc:	f7ff ff52 	bl	800af84 <BSP_SD_GetCardState>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1fa      	bne.n	800b0dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08c      	sub	sp, #48	@ 0x30
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	603a      	str	r2, [r7, #0]
 800b0fe:	71fb      	strb	r3, [r7, #7]
 800b100:	460b      	mov	r3, r1
 800b102:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b10a:	4b25      	ldr	r3, [pc, #148]	@ (800b1a0 <SD_ioctl+0xac>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <SD_ioctl+0x28>
 800b118:	2303      	movs	r3, #3
 800b11a:	e03c      	b.n	800b196 <SD_ioctl+0xa2>

  switch (cmd)
 800b11c:	79bb      	ldrb	r3, [r7, #6]
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d834      	bhi.n	800b18c <SD_ioctl+0x98>
 800b122:	a201      	add	r2, pc, #4	@ (adr r2, 800b128 <SD_ioctl+0x34>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b139 	.word	0x0800b139
 800b12c:	0800b141 	.word	0x0800b141
 800b130:	0800b159 	.word	0x0800b159
 800b134:	0800b173 	.word	0x0800b173
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b13e:	e028      	b.n	800b192 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b140:	f107 030c 	add.w	r3, r7, #12
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff ff2d 	bl	800afa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b14a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b156:	e01c      	b.n	800b192 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff ff21 	bl	800afa4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b164:	b29a      	uxth	r2, r3
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b170:	e00f      	b.n	800b192 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b172:	f107 030c 	add.w	r3, r7, #12
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff ff14 	bl	800afa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17e:	0a5a      	lsrs	r2, r3, #9
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b18a:	e002      	b.n	800b192 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b18c:	2304      	movs	r3, #4
 800b18e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b196:	4618      	mov	r0, r3
 800b198:	3730      	adds	r7, #48	@ 0x30
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	2000040d 	.word	0x2000040d

0800b1a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	4a08      	ldr	r2, [pc, #32]	@ (800b1d4 <disk_status+0x30>)
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	79fa      	ldrb	r2, [r7, #7]
 800b1bc:	4905      	ldr	r1, [pc, #20]	@ (800b1d4 <disk_status+0x30>)
 800b1be:	440a      	add	r2, r1
 800b1c0:	7a12      	ldrb	r2, [r2, #8]
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	4798      	blx	r3
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	200010b4 	.word	0x200010b4

0800b1d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b1e6:	79fb      	ldrb	r3, [r7, #7]
 800b1e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b224 <disk_initialize+0x4c>)
 800b1ea:	5cd3      	ldrb	r3, [r2, r3]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d114      	bne.n	800b21a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b224 <disk_initialize+0x4c>)
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	79fa      	ldrb	r2, [r7, #7]
 800b1fe:	4909      	ldr	r1, [pc, #36]	@ (800b224 <disk_initialize+0x4c>)
 800b200:	440a      	add	r2, r1
 800b202:	7a12      	ldrb	r2, [r2, #8]
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	4603      	mov	r3, r0
 800b20a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	4a03      	ldr	r2, [pc, #12]	@ (800b224 <disk_initialize+0x4c>)
 800b216:	2101      	movs	r1, #1
 800b218:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	200010b4 	.word	0x200010b4

0800b228 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	603b      	str	r3, [r7, #0]
 800b234:	4603      	mov	r3, r0
 800b236:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	4a0a      	ldr	r2, [pc, #40]	@ (800b264 <disk_read+0x3c>)
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	689c      	ldr	r4, [r3, #8]
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	4a07      	ldr	r2, [pc, #28]	@ (800b264 <disk_read+0x3c>)
 800b248:	4413      	add	r3, r2
 800b24a:	7a18      	ldrb	r0, [r3, #8]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	68b9      	ldr	r1, [r7, #8]
 800b252:	47a0      	blx	r4
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]
  return res;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}
 800b262:	bf00      	nop
 800b264:	200010b4 	.word	0x200010b4

0800b268 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b268:	b590      	push	{r4, r7, lr}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	4a0a      	ldr	r2, [pc, #40]	@ (800b2a4 <disk_write+0x3c>)
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68dc      	ldr	r4, [r3, #12]
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	4a07      	ldr	r2, [pc, #28]	@ (800b2a4 <disk_write+0x3c>)
 800b288:	4413      	add	r3, r2
 800b28a:	7a18      	ldrb	r0, [r3, #8]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	47a0      	blx	r4
 800b294:	4603      	mov	r3, r0
 800b296:	75fb      	strb	r3, [r7, #23]
  return res;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd90      	pop	{r4, r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	200010b4 	.word	0x200010b4

0800b2a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	603a      	str	r2, [r7, #0]
 800b2b2:	71fb      	strb	r3, [r7, #7]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b2b8:	79fb      	ldrb	r3, [r7, #7]
 800b2ba:	4a09      	ldr	r2, [pc, #36]	@ (800b2e0 <disk_ioctl+0x38>)
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	79fa      	ldrb	r2, [r7, #7]
 800b2c6:	4906      	ldr	r1, [pc, #24]	@ (800b2e0 <disk_ioctl+0x38>)
 800b2c8:	440a      	add	r2, r1
 800b2ca:	7a10      	ldrb	r0, [r2, #8]
 800b2cc:	79b9      	ldrb	r1, [r7, #6]
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	4798      	blx	r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	200010b4 	.word	0x200010b4

0800b2e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b2f4:	89fb      	ldrh	r3, [r7, #14]
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	b21a      	sxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	b21b      	sxth	r3, r3
 800b300:	4313      	orrs	r3, r2
 800b302:	b21b      	sxth	r3, r3
 800b304:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b306:	89fb      	ldrh	r3, [r7, #14]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3303      	adds	r3, #3
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	021b      	lsls	r3, r3, #8
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	3202      	adds	r2, #2
 800b32c:	7812      	ldrb	r2, [r2, #0]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	021b      	lsls	r3, r3, #8
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	3201      	adds	r2, #1
 800b33a:	7812      	ldrb	r2, [r2, #0]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	021b      	lsls	r3, r3, #8
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	4313      	orrs	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b34c:	68fb      	ldr	r3, [r7, #12]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	460b      	mov	r3, r1
 800b364:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	887a      	ldrh	r2, [r7, #2]
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	887b      	ldrh	r3, [r7, #2]
 800b374:	0a1b      	lsrs	r3, r3, #8
 800b376:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	887a      	ldrh	r2, [r7, #2]
 800b380:	b2d2      	uxtb	r2, r2
 800b382:	701a      	strb	r2, [r3, #0]
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	0a1b      	lsrs	r3, r3, #8
 800b3aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	1c5a      	adds	r2, r3, #1
 800b3b0:	607a      	str	r2, [r7, #4]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	b2d2      	uxtb	r2, r2
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	0a1b      	lsrs	r3, r3, #8
 800b3bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	b2d2      	uxtb	r2, r2
 800b3c8:	701a      	strb	r2, [r3, #0]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	0a1b      	lsrs	r3, r3, #8
 800b3ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	607a      	str	r2, [r7, #4]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	b2d2      	uxtb	r2, r2
 800b3da:	701a      	strb	r2, [r3, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00d      	beq.n	800b41e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	1c53      	adds	r3, r2, #1
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	1c59      	adds	r1, r3, #1
 800b40c:	6179      	str	r1, [r7, #20]
 800b40e:	7812      	ldrb	r2, [r2, #0]
 800b410:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3b01      	subs	r3, #1
 800b416:	607b      	str	r3, [r7, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1f1      	bne.n	800b402 <mem_cpy+0x1a>
	}
}
 800b41e:	bf00      	nop
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b42a:	b480      	push	{r7}
 800b42c:	b087      	sub	sp, #28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	1c5a      	adds	r2, r3, #1
 800b43e:	617a      	str	r2, [r7, #20]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3b01      	subs	r3, #1
 800b44a:	607b      	str	r3, [r7, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1f3      	bne.n	800b43a <mem_set+0x10>
}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	371c      	adds	r7, #28
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b460:	b480      	push	{r7}
 800b462:	b089      	sub	sp, #36	@ 0x24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	61fa      	str	r2, [r7, #28]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	4619      	mov	r1, r3
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	61ba      	str	r2, [r7, #24]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	1acb      	subs	r3, r1, r3
 800b48c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3b01      	subs	r3, #1
 800b492:	607b      	str	r3, [r7, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <mem_cmp+0x40>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0eb      	beq.n	800b478 <mem_cmp+0x18>

	return r;
 800b4a0:	697b      	ldr	r3, [r7, #20]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3724      	adds	r7, #36	@ 0x24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b4b8:	e002      	b.n	800b4c0 <chk_chr+0x12>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	607b      	str	r3, [r7, #4]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <chk_chr+0x26>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d1f2      	bne.n	800b4ba <chk_chr+0xc>
	return *str;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60bb      	str	r3, [r7, #8]
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	e029      	b.n	800b54c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b4f8:	4a27      	ldr	r2, [pc, #156]	@ (800b598 <chk_lock+0xb4>)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	4413      	add	r3, r2
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d01d      	beq.n	800b542 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b506:	4a24      	ldr	r2, [pc, #144]	@ (800b598 <chk_lock+0xb4>)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	4413      	add	r3, r2
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d116      	bne.n	800b546 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b518:	4a1f      	ldr	r2, [pc, #124]	@ (800b598 <chk_lock+0xb4>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	4413      	add	r3, r2
 800b520:	3304      	adds	r3, #4
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b528:	429a      	cmp	r2, r3
 800b52a:	d10c      	bne.n	800b546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b52c:	4a1a      	ldr	r2, [pc, #104]	@ (800b598 <chk_lock+0xb4>)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	011b      	lsls	r3, r3, #4
 800b532:	4413      	add	r3, r2
 800b534:	3308      	adds	r3, #8
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d102      	bne.n	800b546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b540:	e007      	b.n	800b552 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b542:	2301      	movs	r3, #1
 800b544:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3301      	adds	r3, #1
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d9d2      	bls.n	800b4f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d109      	bne.n	800b56c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d102      	bne.n	800b564 <chk_lock+0x80>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b02      	cmp	r3, #2
 800b562:	d101      	bne.n	800b568 <chk_lock+0x84>
 800b564:	2300      	movs	r3, #0
 800b566:	e010      	b.n	800b58a <chk_lock+0xa6>
 800b568:	2312      	movs	r3, #18
 800b56a:	e00e      	b.n	800b58a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d108      	bne.n	800b584 <chk_lock+0xa0>
 800b572:	4a09      	ldr	r2, [pc, #36]	@ (800b598 <chk_lock+0xb4>)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	4413      	add	r3, r2
 800b57a:	330c      	adds	r3, #12
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b582:	d101      	bne.n	800b588 <chk_lock+0xa4>
 800b584:	2310      	movs	r3, #16
 800b586:	e000      	b.n	800b58a <chk_lock+0xa6>
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	20001094 	.word	0x20001094

0800b59c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	607b      	str	r3, [r7, #4]
 800b5a6:	e002      	b.n	800b5ae <enq_lock+0x12>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	607b      	str	r3, [r7, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d806      	bhi.n	800b5c2 <enq_lock+0x26>
 800b5b4:	4a09      	ldr	r2, [pc, #36]	@ (800b5dc <enq_lock+0x40>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1f2      	bne.n	800b5a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	bf14      	ite	ne
 800b5c8:	2301      	movne	r3, #1
 800b5ca:	2300      	moveq	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20001094 	.word	0x20001094

0800b5e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	e01f      	b.n	800b630 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b5f0:	4a41      	ldr	r2, [pc, #260]	@ (800b6f8 <inc_lock+0x118>)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	011b      	lsls	r3, r3, #4
 800b5f6:	4413      	add	r3, r2
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d113      	bne.n	800b62a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b602:	4a3d      	ldr	r2, [pc, #244]	@ (800b6f8 <inc_lock+0x118>)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	4413      	add	r3, r2
 800b60a:	3304      	adds	r3, #4
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b612:	429a      	cmp	r2, r3
 800b614:	d109      	bne.n	800b62a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b616:	4a38      	ldr	r2, [pc, #224]	@ (800b6f8 <inc_lock+0x118>)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	4413      	add	r3, r2
 800b61e:	3308      	adds	r3, #8
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b626:	429a      	cmp	r2, r3
 800b628:	d006      	beq.n	800b638 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3301      	adds	r3, #1
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d9dc      	bls.n	800b5f0 <inc_lock+0x10>
 800b636:	e000      	b.n	800b63a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b638:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d132      	bne.n	800b6a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	e002      	b.n	800b64c <inc_lock+0x6c>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3301      	adds	r3, #1
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d806      	bhi.n	800b660 <inc_lock+0x80>
 800b652:	4a29      	ldr	r2, [pc, #164]	@ (800b6f8 <inc_lock+0x118>)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	4413      	add	r3, r2
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f2      	bne.n	800b646 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d101      	bne.n	800b66a <inc_lock+0x8a>
 800b666:	2300      	movs	r3, #0
 800b668:	e040      	b.n	800b6ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	4922      	ldr	r1, [pc, #136]	@ (800b6f8 <inc_lock+0x118>)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	440b      	add	r3, r1
 800b676:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689a      	ldr	r2, [r3, #8]
 800b67c:	491e      	ldr	r1, [pc, #120]	@ (800b6f8 <inc_lock+0x118>)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	440b      	add	r3, r1
 800b684:	3304      	adds	r3, #4
 800b686:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	695a      	ldr	r2, [r3, #20]
 800b68c:	491a      	ldr	r1, [pc, #104]	@ (800b6f8 <inc_lock+0x118>)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	011b      	lsls	r3, r3, #4
 800b692:	440b      	add	r3, r1
 800b694:	3308      	adds	r3, #8
 800b696:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b698:	4a17      	ldr	r2, [pc, #92]	@ (800b6f8 <inc_lock+0x118>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	011b      	lsls	r3, r3, #4
 800b69e:	4413      	add	r3, r2
 800b6a0:	330c      	adds	r3, #12
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <inc_lock+0xe0>
 800b6ac:	4a12      	ldr	r2, [pc, #72]	@ (800b6f8 <inc_lock+0x118>)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	4413      	add	r3, r2
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <inc_lock+0xe0>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e015      	b.n	800b6ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d108      	bne.n	800b6d8 <inc_lock+0xf8>
 800b6c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b6f8 <inc_lock+0x118>)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	4413      	add	r3, r2
 800b6ce:	330c      	adds	r3, #12
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	e001      	b.n	800b6dc <inc_lock+0xfc>
 800b6d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b6dc:	4906      	ldr	r1, [pc, #24]	@ (800b6f8 <inc_lock+0x118>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	440b      	add	r3, r1
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3301      	adds	r3, #1
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	20001094 	.word	0x20001094

0800b6fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3b01      	subs	r3, #1
 800b708:	607b      	str	r3, [r7, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d825      	bhi.n	800b75c <dec_lock+0x60>
		n = Files[i].ctr;
 800b710:	4a17      	ldr	r2, [pc, #92]	@ (800b770 <dec_lock+0x74>)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	011b      	lsls	r3, r3, #4
 800b716:	4413      	add	r3, r2
 800b718:	330c      	adds	r3, #12
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b71e:	89fb      	ldrh	r3, [r7, #14]
 800b720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b724:	d101      	bne.n	800b72a <dec_lock+0x2e>
 800b726:	2300      	movs	r3, #0
 800b728:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b72a:	89fb      	ldrh	r3, [r7, #14]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <dec_lock+0x3a>
 800b730:	89fb      	ldrh	r3, [r7, #14]
 800b732:	3b01      	subs	r3, #1
 800b734:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b736:	4a0e      	ldr	r2, [pc, #56]	@ (800b770 <dec_lock+0x74>)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	011b      	lsls	r3, r3, #4
 800b73c:	4413      	add	r3, r2
 800b73e:	330c      	adds	r3, #12
 800b740:	89fa      	ldrh	r2, [r7, #14]
 800b742:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b744:	89fb      	ldrh	r3, [r7, #14]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d105      	bne.n	800b756 <dec_lock+0x5a>
 800b74a:	4a09      	ldr	r2, [pc, #36]	@ (800b770 <dec_lock+0x74>)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	4413      	add	r3, r2
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	737b      	strb	r3, [r7, #13]
 800b75a:	e001      	b.n	800b760 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b75c:	2302      	movs	r3, #2
 800b75e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b760:	7b7b      	ldrb	r3, [r7, #13]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20001094 	.word	0x20001094

0800b774 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b77c:	2300      	movs	r3, #0
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e010      	b.n	800b7a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b782:	4a0d      	ldr	r2, [pc, #52]	@ (800b7b8 <clear_lock+0x44>)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	011b      	lsls	r3, r3, #4
 800b788:	4413      	add	r3, r2
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d105      	bne.n	800b79e <clear_lock+0x2a>
 800b792:	4a09      	ldr	r2, [pc, #36]	@ (800b7b8 <clear_lock+0x44>)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	011b      	lsls	r3, r3, #4
 800b798:	4413      	add	r3, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d9eb      	bls.n	800b782 <clear_lock+0xe>
	}
}
 800b7aa:	bf00      	nop
 800b7ac:	bf00      	nop
 800b7ae:	3714      	adds	r7, #20
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	20001094 	.word	0x20001094

0800b7bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	78db      	ldrb	r3, [r3, #3]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d034      	beq.n	800b83a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	7858      	ldrb	r0, [r3, #1]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	f7ff fd40 	bl	800b268 <disk_write>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	73fb      	strb	r3, [r7, #15]
 800b7f2:	e022      	b.n	800b83a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	1ad2      	subs	r2, r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	429a      	cmp	r2, r3
 800b808:	d217      	bcs.n	800b83a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	789b      	ldrb	r3, [r3, #2]
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	e010      	b.n	800b834 <sync_window+0x78>
					wsect += fs->fsize;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	4413      	add	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	7858      	ldrb	r0, [r3, #1]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b826:	2301      	movs	r3, #1
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	f7ff fd1d 	bl	800b268 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	3b01      	subs	r3, #1
 800b832:	613b      	str	r3, [r7, #16]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d8eb      	bhi.n	800b812 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d01b      	beq.n	800b894 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ffad 	bl	800b7bc <sync_window>
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b866:	7bfb      	ldrb	r3, [r7, #15]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d113      	bne.n	800b894 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	7858      	ldrb	r0, [r3, #1]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b876:	2301      	movs	r3, #1
 800b878:	683a      	ldr	r2, [r7, #0]
 800b87a:	f7ff fcd5 	bl	800b228 <disk_read>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b884:	f04f 33ff 	mov.w	r3, #4294967295
 800b888:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b894:	7bfb      	ldrb	r3, [r7, #15]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff ff87 	bl	800b7bc <sync_window>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d158      	bne.n	800b96a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d148      	bne.n	800b952 <sync_fs+0xb2>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	791b      	ldrb	r3, [r3, #4]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d144      	bne.n	800b952 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3330      	adds	r3, #48	@ 0x30
 800b8cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fda9 	bl	800b42a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	3330      	adds	r3, #48	@ 0x30
 800b8dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b8e0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fd38 	bl	800b35a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3330      	adds	r3, #48	@ 0x30
 800b8ee:	4921      	ldr	r1, [pc, #132]	@ (800b974 <sync_fs+0xd4>)
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff fd4d 	bl	800b390 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	3330      	adds	r3, #48	@ 0x30
 800b8fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b8fe:	491e      	ldr	r1, [pc, #120]	@ (800b978 <sync_fs+0xd8>)
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff fd45 	bl	800b390 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3330      	adds	r3, #48	@ 0x30
 800b90a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	4619      	mov	r1, r3
 800b914:	4610      	mov	r0, r2
 800b916:	f7ff fd3b 	bl	800b390 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3330      	adds	r3, #48	@ 0x30
 800b91e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	4619      	mov	r1, r3
 800b928:	4610      	mov	r0, r2
 800b92a:	f7ff fd31 	bl	800b390 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	69db      	ldr	r3, [r3, #28]
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	7858      	ldrb	r0, [r3, #1]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b946:	2301      	movs	r3, #1
 800b948:	f7ff fc8e 	bl	800b268 <disk_write>
			fs->fsi_flag = 0;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	785b      	ldrb	r3, [r3, #1]
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff fca4 	bl	800b2a8 <disk_ioctl>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <sync_fs+0xca>
 800b966:	2301      	movs	r3, #1
 800b968:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	41615252 	.word	0x41615252
 800b978:	61417272 	.word	0x61417272

0800b97c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	3b02      	subs	r3, #2
 800b98a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	3b02      	subs	r3, #2
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d301      	bcc.n	800b99c <clust2sect+0x20>
 800b998:	2300      	movs	r3, #0
 800b99a:	e008      	b.n	800b9ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	895b      	ldrh	r3, [r3, #10]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	fb03 f202 	mul.w	r2, r3, r2
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ac:	4413      	add	r3, r2
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b086      	sub	sp, #24
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d904      	bls.n	800b9da <get_fat+0x20>
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d302      	bcc.n	800b9e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b9da:	2301      	movs	r3, #1
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	e08e      	b.n	800bafe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d061      	beq.n	800bab2 <get_fat+0xf8>
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	dc7b      	bgt.n	800baea <get_fat+0x130>
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d002      	beq.n	800b9fc <get_fat+0x42>
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d041      	beq.n	800ba7e <get_fat+0xc4>
 800b9fa:	e076      	b.n	800baea <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	085b      	lsrs	r3, r3, #1
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4413      	add	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6a1a      	ldr	r2, [r3, #32]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	0a5b      	lsrs	r3, r3, #9
 800ba12:	4413      	add	r3, r2
 800ba14:	4619      	mov	r1, r3
 800ba16:	6938      	ldr	r0, [r7, #16]
 800ba18:	f7ff ff14 	bl	800b844 <move_window>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d166      	bne.n	800baf0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	1c5a      	adds	r2, r3, #1
 800ba26:	60fa      	str	r2, [r7, #12]
 800ba28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	6a1a      	ldr	r2, [r3, #32]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	0a5b      	lsrs	r3, r3, #9
 800ba3e:	4413      	add	r3, r2
 800ba40:	4619      	mov	r1, r3
 800ba42:	6938      	ldr	r0, [r7, #16]
 800ba44:	f7ff fefe 	bl	800b844 <move_window>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d152      	bne.n	800baf4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	4413      	add	r3, r2
 800ba58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba5c:	021b      	lsls	r3, r3, #8
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <get_fat+0xba>
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	091b      	lsrs	r3, r3, #4
 800ba72:	e002      	b.n	800ba7a <get_fat+0xc0>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba7a:	617b      	str	r3, [r7, #20]
			break;
 800ba7c:	e03f      	b.n	800bafe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	6a1a      	ldr	r2, [r3, #32]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	0a1b      	lsrs	r3, r3, #8
 800ba86:	4413      	add	r3, r2
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6938      	ldr	r0, [r7, #16]
 800ba8c:	f7ff feda 	bl	800b844 <move_window>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d130      	bne.n	800baf8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800baa4:	4413      	add	r3, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff fc1c 	bl	800b2e4 <ld_word>
 800baac:	4603      	mov	r3, r0
 800baae:	617b      	str	r3, [r7, #20]
			break;
 800bab0:	e025      	b.n	800bafe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	6a1a      	ldr	r2, [r3, #32]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	09db      	lsrs	r3, r3, #7
 800baba:	4413      	add	r3, r2
 800babc:	4619      	mov	r1, r3
 800babe:	6938      	ldr	r0, [r7, #16]
 800bac0:	f7ff fec0 	bl	800b844 <move_window>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d118      	bne.n	800bafc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bad8:	4413      	add	r3, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff fc1a 	bl	800b314 <ld_dword>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bae6:	617b      	str	r3, [r7, #20]
			break;
 800bae8:	e009      	b.n	800bafe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800baea:	2301      	movs	r3, #1
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	e006      	b.n	800bafe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baf0:	bf00      	nop
 800baf2:	e004      	b.n	800bafe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baf4:	bf00      	nop
 800baf6:	e002      	b.n	800bafe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800baf8:	bf00      	nop
 800bafa:	e000      	b.n	800bafe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bafc:	bf00      	nop
		}
	}

	return val;
 800bafe:	697b      	ldr	r3, [r7, #20]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bb08:	b590      	push	{r4, r7, lr}
 800bb0a:	b089      	sub	sp, #36	@ 0x24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bb14:	2302      	movs	r3, #2
 800bb16:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	f240 80d9 	bls.w	800bcd2 <put_fat+0x1ca>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	f080 80d3 	bcs.w	800bcd2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	f000 8096 	beq.w	800bc62 <put_fat+0x15a>
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	f300 80cb 	bgt.w	800bcd2 <put_fat+0x1ca>
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d002      	beq.n	800bb46 <put_fat+0x3e>
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d06e      	beq.n	800bc22 <put_fat+0x11a>
 800bb44:	e0c5      	b.n	800bcd2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	61bb      	str	r3, [r7, #24]
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	085b      	lsrs	r3, r3, #1
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	4413      	add	r3, r2
 800bb52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a1a      	ldr	r2, [r3, #32]
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	0a5b      	lsrs	r3, r3, #9
 800bb5c:	4413      	add	r3, r2
 800bb5e:	4619      	mov	r1, r3
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f7ff fe6f 	bl	800b844 <move_window>
 800bb66:	4603      	mov	r3, r0
 800bb68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb6a:	7ffb      	ldrb	r3, [r7, #31]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f040 80a9 	bne.w	800bcc4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	1c59      	adds	r1, r3, #1
 800bb7c:	61b9      	str	r1, [r7, #24]
 800bb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb82:	4413      	add	r3, r2
 800bb84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	f003 0301 	and.w	r3, r3, #1
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00d      	beq.n	800bbac <put_fat+0xa4>
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	b25b      	sxtb	r3, r3
 800bb96:	f003 030f 	and.w	r3, r3, #15
 800bb9a:	b25a      	sxtb	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	011b      	lsls	r3, r3, #4
 800bba2:	b25b      	sxtb	r3, r3
 800bba4:	4313      	orrs	r3, r2
 800bba6:	b25b      	sxtb	r3, r3
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	e001      	b.n	800bbb0 <put_fat+0xa8>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6a1a      	ldr	r2, [r3, #32]
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	0a5b      	lsrs	r3, r3, #9
 800bbc2:	4413      	add	r3, r2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f7ff fe3c 	bl	800b844 <move_window>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bbd0:	7ffb      	ldrb	r3, [r7, #31]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d178      	bne.n	800bcc8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe2:	4413      	add	r3, r2
 800bbe4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <put_fat+0xf0>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	091b      	lsrs	r3, r3, #4
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	e00e      	b.n	800bc16 <put_fat+0x10e>
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	b25b      	sxtb	r3, r3
 800bbfe:	f023 030f 	bic.w	r3, r3, #15
 800bc02:	b25a      	sxtb	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	0a1b      	lsrs	r3, r3, #8
 800bc08:	b25b      	sxtb	r3, r3
 800bc0a:	f003 030f 	and.w	r3, r3, #15
 800bc0e:	b25b      	sxtb	r3, r3
 800bc10:	4313      	orrs	r3, r2
 800bc12:	b25b      	sxtb	r3, r3
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	70da      	strb	r2, [r3, #3]
			break;
 800bc20:	e057      	b.n	800bcd2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a1a      	ldr	r2, [r3, #32]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	0a1b      	lsrs	r3, r3, #8
 800bc2a:	4413      	add	r3, r2
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fe08 	bl	800b844 <move_window>
 800bc34:	4603      	mov	r3, r0
 800bc36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc38:	7ffb      	ldrb	r3, [r7, #31]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d146      	bne.n	800bccc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bc4c:	4413      	add	r3, r2
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	b292      	uxth	r2, r2
 800bc52:	4611      	mov	r1, r2
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7ff fb80 	bl	800b35a <st_word>
			fs->wflag = 1;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	70da      	strb	r2, [r3, #3]
			break;
 800bc60:	e037      	b.n	800bcd2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a1a      	ldr	r2, [r3, #32]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	09db      	lsrs	r3, r3, #7
 800bc6a:	4413      	add	r3, r2
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff fde8 	bl	800b844 <move_window>
 800bc74:	4603      	mov	r3, r0
 800bc76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc78:	7ffb      	ldrb	r3, [r7, #31]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d128      	bne.n	800bcd0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bc92:	4413      	add	r3, r2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7ff fb3d 	bl	800b314 <ld_dword>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bca0:	4323      	orrs	r3, r4
 800bca2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bcb2:	4413      	add	r3, r2
 800bcb4:	6879      	ldr	r1, [r7, #4]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff fb6a 	bl	800b390 <st_dword>
			fs->wflag = 1;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	70da      	strb	r2, [r3, #3]
			break;
 800bcc2:	e006      	b.n	800bcd2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcc4:	bf00      	nop
 800bcc6:	e004      	b.n	800bcd2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcc8:	bf00      	nop
 800bcca:	e002      	b.n	800bcd2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bccc:	bf00      	nop
 800bcce:	e000      	b.n	800bcd2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcd0:	bf00      	nop
		}
	}
	return res;
 800bcd2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3724      	adds	r7, #36	@ 0x24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd90      	pop	{r4, r7, pc}

0800bcdc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d904      	bls.n	800bd02 <remove_chain+0x26>
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d301      	bcc.n	800bd06 <remove_chain+0x2a>
 800bd02:	2302      	movs	r3, #2
 800bd04:	e04b      	b.n	800bd9e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00c      	beq.n	800bd26 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	69b8      	ldr	r0, [r7, #24]
 800bd14:	f7ff fef8 	bl	800bb08 <put_fat>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bd1c:	7ffb      	ldrb	r3, [r7, #31]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <remove_chain+0x4a>
 800bd22:	7ffb      	ldrb	r3, [r7, #31]
 800bd24:	e03b      	b.n	800bd9e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7ff fe46 	bl	800b9ba <get_fat>
 800bd2e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d031      	beq.n	800bd9a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d101      	bne.n	800bd40 <remove_chain+0x64>
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	e02e      	b.n	800bd9e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd46:	d101      	bne.n	800bd4c <remove_chain+0x70>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e028      	b.n	800bd9e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	68b9      	ldr	r1, [r7, #8]
 800bd50:	69b8      	ldr	r0, [r7, #24]
 800bd52:	f7ff fed9 	bl	800bb08 <put_fat>
 800bd56:	4603      	mov	r3, r0
 800bd58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bd5a:	7ffb      	ldrb	r3, [r7, #31]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <remove_chain+0x88>
 800bd60:	7ffb      	ldrb	r3, [r7, #31]
 800bd62:	e01c      	b.n	800bd9e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	691a      	ldr	r2, [r3, #16]
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	3b02      	subs	r3, #2
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d20b      	bcs.n	800bd8a <remove_chain+0xae>
			fs->free_clst++;
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	791b      	ldrb	r3, [r3, #4]
 800bd80:	f043 0301 	orr.w	r3, r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d3c6      	bcc.n	800bd26 <remove_chain+0x4a>
 800bd98:	e000      	b.n	800bd9c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bd9a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3720      	adds	r7, #32
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b088      	sub	sp, #32
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10d      	bne.n	800bdd8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d004      	beq.n	800bdd2 <create_chain+0x2c>
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d31b      	bcc.n	800be0a <create_chain+0x64>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	61bb      	str	r3, [r7, #24]
 800bdd6:	e018      	b.n	800be0a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff fded 	bl	800b9ba <get_fat>
 800bde0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d801      	bhi.n	800bdec <create_chain+0x46>
 800bde8:	2301      	movs	r3, #1
 800bdea:	e070      	b.n	800bece <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	d101      	bne.n	800bdf8 <create_chain+0x52>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	e06a      	b.n	800bece <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d201      	bcs.n	800be06 <create_chain+0x60>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	e063      	b.n	800bece <create_chain+0x128>
		scl = clst;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	3301      	adds	r3, #1
 800be12:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	69fa      	ldr	r2, [r7, #28]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d307      	bcc.n	800be2e <create_chain+0x88>
				ncl = 2;
 800be1e:	2302      	movs	r3, #2
 800be20:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800be22:	69fa      	ldr	r2, [r7, #28]
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	429a      	cmp	r2, r3
 800be28:	d901      	bls.n	800be2e <create_chain+0x88>
 800be2a:	2300      	movs	r3, #0
 800be2c:	e04f      	b.n	800bece <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800be2e:	69f9      	ldr	r1, [r7, #28]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff fdc2 	bl	800b9ba <get_fat>
 800be36:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00e      	beq.n	800be5c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d003      	beq.n	800be4c <create_chain+0xa6>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4a:	d101      	bne.n	800be50 <create_chain+0xaa>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	e03e      	b.n	800bece <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	429a      	cmp	r2, r3
 800be56:	d1da      	bne.n	800be0e <create_chain+0x68>
 800be58:	2300      	movs	r3, #0
 800be5a:	e038      	b.n	800bece <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800be5c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800be5e:	f04f 32ff 	mov.w	r2, #4294967295
 800be62:	69f9      	ldr	r1, [r7, #28]
 800be64:	6938      	ldr	r0, [r7, #16]
 800be66:	f7ff fe4f 	bl	800bb08 <put_fat>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d109      	bne.n	800be88 <create_chain+0xe2>
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d006      	beq.n	800be88 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800be7a:	69fa      	ldr	r2, [r7, #28]
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6938      	ldr	r0, [r7, #16]
 800be80:	f7ff fe42 	bl	800bb08 <put_fat>
 800be84:	4603      	mov	r3, r0
 800be86:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d116      	bne.n	800bebc <create_chain+0x116>
		fs->last_clst = ncl;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	69fa      	ldr	r2, [r7, #28]
 800be92:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	691a      	ldr	r2, [r3, #16]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	3b02      	subs	r3, #2
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d804      	bhi.n	800beac <create_chain+0x106>
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	1e5a      	subs	r2, r3, #1
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	791b      	ldrb	r3, [r3, #4]
 800beb0:	f043 0301 	orr.w	r3, r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	711a      	strb	r2, [r3, #4]
 800beba:	e007      	b.n	800becc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d102      	bne.n	800bec8 <create_chain+0x122>
 800bec2:	f04f 33ff 	mov.w	r3, #4294967295
 800bec6:	e000      	b.n	800beca <create_chain+0x124>
 800bec8:	2301      	movs	r3, #1
 800beca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800becc:	69fb      	ldr	r3, [r7, #28]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3720      	adds	r7, #32
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b087      	sub	sp, #28
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beea:	3304      	adds	r3, #4
 800beec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	0a5b      	lsrs	r3, r3, #9
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	8952      	ldrh	r2, [r2, #10]
 800bef6:	fbb3 f3f2 	udiv	r3, r3, r2
 800befa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	1d1a      	adds	r2, r3, #4
 800bf00:	613a      	str	r2, [r7, #16]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <clmt_clust+0x3a>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e010      	b.n	800bf32 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d307      	bcc.n	800bf28 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	617b      	str	r3, [r7, #20]
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	3304      	adds	r3, #4
 800bf24:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf26:	e7e9      	b.n	800befc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bf28:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	4413      	add	r3, r2
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b086      	sub	sp, #24
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf54:	d204      	bcs.n	800bf60 <dir_sdi+0x22>
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	f003 031f 	and.w	r3, r3, #31
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bf60:	2302      	movs	r3, #2
 800bf62:	e063      	b.n	800c02c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <dir_sdi+0x46>
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d902      	bls.n	800bf84 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf82:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10c      	bne.n	800bfa4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	095b      	lsrs	r3, r3, #5
 800bf8e:	693a      	ldr	r2, [r7, #16]
 800bf90:	8912      	ldrh	r2, [r2, #8]
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d301      	bcc.n	800bf9a <dir_sdi+0x5c>
 800bf96:	2302      	movs	r3, #2
 800bf98:	e048      	b.n	800c02c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	61da      	str	r2, [r3, #28]
 800bfa2:	e029      	b.n	800bff8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	895b      	ldrh	r3, [r3, #10]
 800bfa8:	025b      	lsls	r3, r3, #9
 800bfaa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfac:	e019      	b.n	800bfe2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6979      	ldr	r1, [r7, #20]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fd01 	bl	800b9ba <get_fat>
 800bfb8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d101      	bne.n	800bfc6 <dir_sdi+0x88>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e032      	b.n	800c02c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d904      	bls.n	800bfd6 <dir_sdi+0x98>
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d301      	bcc.n	800bfda <dir_sdi+0x9c>
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	e028      	b.n	800c02c <dir_sdi+0xee>
			ofs -= csz;
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d2e1      	bcs.n	800bfae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bfea:	6979      	ldr	r1, [r7, #20]
 800bfec:	6938      	ldr	r0, [r7, #16]
 800bfee:	f7ff fcc5 	bl	800b97c <clust2sect>
 800bff2:	4602      	mov	r2, r0
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	69db      	ldr	r3, [r3, #28]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <dir_sdi+0xcc>
 800c006:	2302      	movs	r3, #2
 800c008:	e010      	b.n	800c02c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	69da      	ldr	r2, [r3, #28]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	0a5b      	lsrs	r3, r3, #9
 800c012:	441a      	add	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c024:	441a      	add	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	695b      	ldr	r3, [r3, #20]
 800c048:	3320      	adds	r3, #32
 800c04a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	69db      	ldr	r3, [r3, #28]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <dir_next+0x28>
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c05a:	d301      	bcc.n	800c060 <dir_next+0x2c>
 800c05c:	2304      	movs	r3, #4
 800c05e:	e0aa      	b.n	800c1b6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c066:	2b00      	cmp	r3, #0
 800c068:	f040 8098 	bne.w	800c19c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	69db      	ldr	r3, [r3, #28]
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10b      	bne.n	800c096 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	095b      	lsrs	r3, r3, #5
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	8912      	ldrh	r2, [r2, #8]
 800c086:	4293      	cmp	r3, r2
 800c088:	f0c0 8088 	bcc.w	800c19c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	61da      	str	r2, [r3, #28]
 800c092:	2304      	movs	r3, #4
 800c094:	e08f      	b.n	800c1b6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	0a5b      	lsrs	r3, r3, #9
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	8952      	ldrh	r2, [r2, #10]
 800c09e:	3a01      	subs	r2, #1
 800c0a0:	4013      	ands	r3, r2
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d17a      	bne.n	800c19c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	f7ff fc83 	bl	800b9ba <get_fat>
 800c0b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d801      	bhi.n	800c0c0 <dir_next+0x8c>
 800c0bc:	2302      	movs	r3, #2
 800c0be:	e07a      	b.n	800c1b6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d101      	bne.n	800c0cc <dir_next+0x98>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e074      	b.n	800c1b6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d358      	bcc.n	800c188 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d104      	bne.n	800c0e6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	61da      	str	r2, [r3, #28]
 800c0e2:	2304      	movs	r3, #4
 800c0e4:	e067      	b.n	800c1b6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4610      	mov	r0, r2
 800c0f0:	f7ff fe59 	bl	800bda6 <create_chain>
 800c0f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <dir_next+0xcc>
 800c0fc:	2307      	movs	r3, #7
 800c0fe:	e05a      	b.n	800c1b6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d101      	bne.n	800c10a <dir_next+0xd6>
 800c106:	2302      	movs	r3, #2
 800c108:	e055      	b.n	800c1b6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c110:	d101      	bne.n	800c116 <dir_next+0xe2>
 800c112:	2301      	movs	r3, #1
 800c114:	e04f      	b.n	800c1b6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff fb50 	bl	800b7bc <sync_window>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <dir_next+0xf2>
 800c122:	2301      	movs	r3, #1
 800c124:	e047      	b.n	800c1b6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	3330      	adds	r3, #48	@ 0x30
 800c12a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c12e:	2100      	movs	r1, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f7ff f97a 	bl	800b42a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c136:	2300      	movs	r3, #0
 800c138:	613b      	str	r3, [r7, #16]
 800c13a:	6979      	ldr	r1, [r7, #20]
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f7ff fc1d 	bl	800b97c <clust2sect>
 800c142:	4602      	mov	r2, r0
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c148:	e012      	b.n	800c170 <dir_next+0x13c>
						fs->wflag = 1;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2201      	movs	r2, #1
 800c14e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f7ff fb33 	bl	800b7bc <sync_window>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <dir_next+0x12c>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e02a      	b.n	800c1b6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	3301      	adds	r3, #1
 800c164:	613b      	str	r3, [r7, #16]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	895b      	ldrh	r3, [r3, #10]
 800c174:	461a      	mov	r2, r3
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	4293      	cmp	r3, r2
 800c17a:	d3e6      	bcc.n	800c14a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	1ad2      	subs	r2, r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c18e:	6979      	ldr	r1, [r7, #20]
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f7ff fbf3 	bl	800b97c <clust2sect>
 800c196:	4602      	mov	r2, r0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ae:	441a      	add	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b086      	sub	sp, #24
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff feb4 	bl	800bf3e <dir_sdi>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d12b      	bne.n	800c238 <dir_alloc+0x7a>
		n = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	69db      	ldr	r3, [r3, #28]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f7ff fb2a 	bl	800b844 <move_window>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d11d      	bne.n	800c236 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2be5      	cmp	r3, #229	@ 0xe5
 800c202:	d004      	beq.n	800c20e <dir_alloc+0x50>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d107      	bne.n	800c21e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	3301      	adds	r3, #1
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d102      	bne.n	800c222 <dir_alloc+0x64>
 800c21c:	e00c      	b.n	800c238 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c21e:	2300      	movs	r3, #0
 800c220:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c222:	2101      	movs	r1, #1
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff ff05 	bl	800c034 <dir_next>
 800c22a:	4603      	mov	r3, r0
 800c22c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d0d7      	beq.n	800c1e4 <dir_alloc+0x26>
 800c234:	e000      	b.n	800c238 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c236:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d101      	bne.n	800c242 <dir_alloc+0x84>
 800c23e:	2307      	movs	r3, #7
 800c240:	75fb      	strb	r3, [r7, #23]
	return res;
 800c242:	7dfb      	ldrb	r3, [r7, #23]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	331a      	adds	r3, #26
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff f842 	bl	800b2e4 <ld_word>
 800c260:	4603      	mov	r3, r0
 800c262:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b03      	cmp	r3, #3
 800c26a:	d109      	bne.n	800c280 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	3314      	adds	r3, #20
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff f837 	bl	800b2e4 <ld_word>
 800c276:	4603      	mov	r3, r0
 800c278:	041b      	lsls	r3, r3, #16
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c280:	68fb      	ldr	r3, [r7, #12]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b084      	sub	sp, #16
 800c28e:	af00      	add	r7, sp, #0
 800c290:	60f8      	str	r0, [r7, #12]
 800c292:	60b9      	str	r1, [r7, #8]
 800c294:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	331a      	adds	r3, #26
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	b292      	uxth	r2, r2
 800c29e:	4611      	mov	r1, r2
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff f85a 	bl	800b35a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d109      	bne.n	800c2c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	f103 0214 	add.w	r2, r3, #20
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	0c1b      	lsrs	r3, r3, #16
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4610      	mov	r0, r2
 800c2be:	f7ff f84c 	bl	800b35a <st_word>
	}
}
 800c2c2:	bf00      	nop
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b086      	sub	sp, #24
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c2d8:	2100      	movs	r1, #0
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7ff fe2f 	bl	800bf3e <dir_sdi>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <dir_find+0x24>
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	e03e      	b.n	800c36c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6938      	ldr	r0, [r7, #16]
 800c2f6:	f7ff faa5 	bl	800b844 <move_window>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d12f      	bne.n	800c364 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a1b      	ldr	r3, [r3, #32]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c30c:	7bfb      	ldrb	r3, [r7, #15]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d102      	bne.n	800c318 <dir_find+0x4e>
 800c312:	2304      	movs	r3, #4
 800c314:	75fb      	strb	r3, [r7, #23]
 800c316:	e028      	b.n	800c36a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a1b      	ldr	r3, [r3, #32]
 800c31c:	330b      	adds	r3, #11
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c324:	b2da      	uxtb	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	330b      	adds	r3, #11
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	f003 0308 	and.w	r3, r3, #8
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10a      	bne.n	800c350 <dir_find+0x86>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a18      	ldr	r0, [r3, #32]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3324      	adds	r3, #36	@ 0x24
 800c342:	220b      	movs	r2, #11
 800c344:	4619      	mov	r1, r3
 800c346:	f7ff f88b 	bl	800b460 <mem_cmp>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00b      	beq.n	800c368 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c350:	2100      	movs	r1, #0
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7ff fe6e 	bl	800c034 <dir_next>
 800c358:	4603      	mov	r3, r0
 800c35a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d0c5      	beq.n	800c2ee <dir_find+0x24>
 800c362:	e002      	b.n	800c36a <dir_find+0xa0>
		if (res != FR_OK) break;
 800c364:	bf00      	nop
 800c366:	e000      	b.n	800c36a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c368:	bf00      	nop

	return res;
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c382:	2101      	movs	r1, #1
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7ff ff1a 	bl	800c1be <dir_alloc>
 800c38a:	4603      	mov	r3, r0
 800c38c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d11c      	bne.n	800c3ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	69db      	ldr	r3, [r3, #28]
 800c398:	4619      	mov	r1, r3
 800c39a:	68b8      	ldr	r0, [r7, #8]
 800c39c:	f7ff fa52 	bl	800b844 <move_window>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d111      	bne.n	800c3ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	2220      	movs	r2, #32
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff f839 	bl	800b42a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a18      	ldr	r0, [r3, #32]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3324      	adds	r3, #36	@ 0x24
 800c3c0:	220b      	movs	r2, #11
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	f7ff f810 	bl	800b3e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b088      	sub	sp, #32
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3324      	adds	r3, #36	@ 0x24
 800c3ec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c3ee:	220b      	movs	r2, #11
 800c3f0:	2120      	movs	r1, #32
 800c3f2:	68b8      	ldr	r0, [r7, #8]
 800c3f4:	f7ff f819 	bl	800b42a <mem_set>
	si = i = 0; ni = 8;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	613b      	str	r3, [r7, #16]
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	61fb      	str	r3, [r7, #28]
 800c400:	2308      	movs	r3, #8
 800c402:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	1c5a      	adds	r2, r3, #1
 800c408:	61fa      	str	r2, [r7, #28]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	4413      	add	r3, r2
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c412:	7efb      	ldrb	r3, [r7, #27]
 800c414:	2b20      	cmp	r3, #32
 800c416:	d94e      	bls.n	800c4b6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c418:	7efb      	ldrb	r3, [r7, #27]
 800c41a:	2b2f      	cmp	r3, #47	@ 0x2f
 800c41c:	d006      	beq.n	800c42c <create_name+0x54>
 800c41e:	7efb      	ldrb	r3, [r7, #27]
 800c420:	2b5c      	cmp	r3, #92	@ 0x5c
 800c422:	d110      	bne.n	800c446 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c424:	e002      	b.n	800c42c <create_name+0x54>
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	3301      	adds	r3, #1
 800c42a:	61fb      	str	r3, [r7, #28]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b2f      	cmp	r3, #47	@ 0x2f
 800c436:	d0f6      	beq.n	800c426 <create_name+0x4e>
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	4413      	add	r3, r2
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b5c      	cmp	r3, #92	@ 0x5c
 800c442:	d0f0      	beq.n	800c426 <create_name+0x4e>
			break;
 800c444:	e038      	b.n	800c4b8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c446:	7efb      	ldrb	r3, [r7, #27]
 800c448:	2b2e      	cmp	r3, #46	@ 0x2e
 800c44a:	d003      	beq.n	800c454 <create_name+0x7c>
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	429a      	cmp	r2, r3
 800c452:	d30c      	bcc.n	800c46e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2b0b      	cmp	r3, #11
 800c458:	d002      	beq.n	800c460 <create_name+0x88>
 800c45a:	7efb      	ldrb	r3, [r7, #27]
 800c45c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c45e:	d001      	beq.n	800c464 <create_name+0x8c>
 800c460:	2306      	movs	r3, #6
 800c462:	e044      	b.n	800c4ee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c464:	2308      	movs	r3, #8
 800c466:	613b      	str	r3, [r7, #16]
 800c468:	230b      	movs	r3, #11
 800c46a:	617b      	str	r3, [r7, #20]
			continue;
 800c46c:	e022      	b.n	800c4b4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c46e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c472:	2b00      	cmp	r3, #0
 800c474:	da04      	bge.n	800c480 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c476:	7efb      	ldrb	r3, [r7, #27]
 800c478:	3b80      	subs	r3, #128	@ 0x80
 800c47a:	4a1f      	ldr	r2, [pc, #124]	@ (800c4f8 <create_name+0x120>)
 800c47c:	5cd3      	ldrb	r3, [r2, r3]
 800c47e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c480:	7efb      	ldrb	r3, [r7, #27]
 800c482:	4619      	mov	r1, r3
 800c484:	481d      	ldr	r0, [pc, #116]	@ (800c4fc <create_name+0x124>)
 800c486:	f7ff f812 	bl	800b4ae <chk_chr>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <create_name+0xbc>
 800c490:	2306      	movs	r3, #6
 800c492:	e02c      	b.n	800c4ee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c494:	7efb      	ldrb	r3, [r7, #27]
 800c496:	2b60      	cmp	r3, #96	@ 0x60
 800c498:	d905      	bls.n	800c4a6 <create_name+0xce>
 800c49a:	7efb      	ldrb	r3, [r7, #27]
 800c49c:	2b7a      	cmp	r3, #122	@ 0x7a
 800c49e:	d802      	bhi.n	800c4a6 <create_name+0xce>
 800c4a0:	7efb      	ldrb	r3, [r7, #27]
 800c4a2:	3b20      	subs	r3, #32
 800c4a4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	613a      	str	r2, [r7, #16]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	7efa      	ldrb	r2, [r7, #27]
 800c4b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c4b4:	e7a6      	b.n	800c404 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c4b6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	441a      	add	r2, r3
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <create_name+0xf4>
 800c4c8:	2306      	movs	r3, #6
 800c4ca:	e010      	b.n	800c4ee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2be5      	cmp	r3, #229	@ 0xe5
 800c4d2:	d102      	bne.n	800c4da <create_name+0x102>
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2205      	movs	r2, #5
 800c4d8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c4da:	7efb      	ldrb	r3, [r7, #27]
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d801      	bhi.n	800c4e4 <create_name+0x10c>
 800c4e0:	2204      	movs	r2, #4
 800c4e2:	e000      	b.n	800c4e6 <create_name+0x10e>
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	330b      	adds	r3, #11
 800c4ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c4ec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3720      	adds	r7, #32
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	08011468 	.word	0x08011468
 800c4fc:	08010a90 	.word	0x08010a90

0800c500 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c514:	e002      	b.n	800c51c <follow_path+0x1c>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	3301      	adds	r3, #1
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b2f      	cmp	r3, #47	@ 0x2f
 800c522:	d0f8      	beq.n	800c516 <follow_path+0x16>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b5c      	cmp	r3, #92	@ 0x5c
 800c52a:	d0f4      	beq.n	800c516 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	2200      	movs	r2, #0
 800c530:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b1f      	cmp	r3, #31
 800c538:	d80a      	bhi.n	800c550 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2280      	movs	r2, #128	@ 0x80
 800c53e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c542:	2100      	movs	r1, #0
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff fcfa 	bl	800bf3e <dir_sdi>
 800c54a:	4603      	mov	r3, r0
 800c54c:	75fb      	strb	r3, [r7, #23]
 800c54e:	e043      	b.n	800c5d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c550:	463b      	mov	r3, r7
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff ff3f 	bl	800c3d8 <create_name>
 800c55a:	4603      	mov	r3, r0
 800c55c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d134      	bne.n	800c5ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff feb0 	bl	800c2ca <dir_find>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c574:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c576:	7dfb      	ldrb	r3, [r7, #23]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00a      	beq.n	800c592 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c57c:	7dfb      	ldrb	r3, [r7, #23]
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d127      	bne.n	800c5d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c582:	7afb      	ldrb	r3, [r7, #11]
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d122      	bne.n	800c5d2 <follow_path+0xd2>
 800c58c:	2305      	movs	r3, #5
 800c58e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c590:	e01f      	b.n	800c5d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d11c      	bne.n	800c5d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	799b      	ldrb	r3, [r3, #6]
 800c5a0:	f003 0310 	and.w	r3, r3, #16
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c5a8:	2305      	movs	r3, #5
 800c5aa:	75fb      	strb	r3, [r7, #23]
 800c5ac:	e014      	b.n	800c5d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5bc:	4413      	add	r3, r2
 800c5be:	4619      	mov	r1, r3
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f7ff fe43 	bl	800c24c <ld_clust>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5cc:	e7c0      	b.n	800c550 <follow_path+0x50>
			if (res != FR_OK) break;
 800c5ce:	bf00      	nop
 800c5d0:	e002      	b.n	800c5d8 <follow_path+0xd8>
				break;
 800c5d2:	bf00      	nop
 800c5d4:	e000      	b.n	800c5d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c5d6:	bf00      	nop
			}
		}
	}

	return res;
 800c5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3718      	adds	r7, #24
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b087      	sub	sp, #28
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d031      	beq.n	800c65c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	617b      	str	r3, [r7, #20]
 800c5fe:	e002      	b.n	800c606 <get_ldnumber+0x24>
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	3301      	adds	r3, #1
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2b20      	cmp	r3, #32
 800c60c:	d903      	bls.n	800c616 <get_ldnumber+0x34>
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	2b3a      	cmp	r3, #58	@ 0x3a
 800c614:	d1f4      	bne.n	800c600 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b3a      	cmp	r3, #58	@ 0x3a
 800c61c:	d11c      	bne.n	800c658 <get_ldnumber+0x76>
			tp = *path;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	60fa      	str	r2, [r7, #12]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	3b30      	subs	r3, #48	@ 0x30
 800c62e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2b09      	cmp	r3, #9
 800c634:	d80e      	bhi.n	800c654 <get_ldnumber+0x72>
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d10a      	bne.n	800c654 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d107      	bne.n	800c654 <get_ldnumber+0x72>
					vol = (int)i;
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	3301      	adds	r3, #1
 800c64c:	617b      	str	r3, [r7, #20]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	e002      	b.n	800c65e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c65c:	693b      	ldr	r3, [r7, #16]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	70da      	strb	r2, [r3, #3]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f04f 32ff 	mov.w	r2, #4294967295
 800c682:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff f8dc 	bl	800b844 <move_window>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <check_fs+0x2a>
 800c692:	2304      	movs	r3, #4
 800c694:	e038      	b.n	800c708 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3330      	adds	r3, #48	@ 0x30
 800c69a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7fe fe20 	bl	800b2e4 <ld_word>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d001      	beq.n	800c6b4 <check_fs+0x48>
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e029      	b.n	800c708 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6ba:	2be9      	cmp	r3, #233	@ 0xe9
 800c6bc:	d009      	beq.n	800c6d2 <check_fs+0x66>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6c4:	2beb      	cmp	r3, #235	@ 0xeb
 800c6c6:	d11e      	bne.n	800c706 <check_fs+0x9a>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c6ce:	2b90      	cmp	r3, #144	@ 0x90
 800c6d0:	d119      	bne.n	800c706 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3330      	adds	r3, #48	@ 0x30
 800c6d6:	3336      	adds	r3, #54	@ 0x36
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fe fe1b 	bl	800b314 <ld_dword>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c6e4:	4a0a      	ldr	r2, [pc, #40]	@ (800c710 <check_fs+0xa4>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d101      	bne.n	800c6ee <check_fs+0x82>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e00c      	b.n	800c708 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3330      	adds	r3, #48	@ 0x30
 800c6f2:	3352      	adds	r3, #82	@ 0x52
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe fe0d 	bl	800b314 <ld_dword>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	4a05      	ldr	r2, [pc, #20]	@ (800c714 <check_fs+0xa8>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d101      	bne.n	800c706 <check_fs+0x9a>
 800c702:	2300      	movs	r3, #0
 800c704:	e000      	b.n	800c708 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c706:	2302      	movs	r3, #2
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	00544146 	.word	0x00544146
 800c714:	33544146 	.word	0x33544146

0800c718 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b096      	sub	sp, #88	@ 0x58
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f7ff ff58 	bl	800c5e2 <get_ldnumber>
 800c732:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c736:	2b00      	cmp	r3, #0
 800c738:	da01      	bge.n	800c73e <find_volume+0x26>
 800c73a:	230b      	movs	r3, #11
 800c73c:	e22d      	b.n	800cb9a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c73e:	4aa1      	ldr	r2, [pc, #644]	@ (800c9c4 <find_volume+0x2ac>)
 800c740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c746:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d101      	bne.n	800c752 <find_volume+0x3a>
 800c74e:	230c      	movs	r3, #12
 800c750:	e223      	b.n	800cb9a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c756:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c758:	79fb      	ldrb	r3, [r7, #7]
 800c75a:	f023 0301 	bic.w	r3, r3, #1
 800c75e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d01a      	beq.n	800c79e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	785b      	ldrb	r3, [r3, #1]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fe fd19 	bl	800b1a4 <disk_status>
 800c772:	4603      	mov	r3, r0
 800c774:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c778:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10c      	bne.n	800c79e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d007      	beq.n	800c79a <find_volume+0x82>
 800c78a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c78e:	f003 0304 	and.w	r3, r3, #4
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c796:	230a      	movs	r3, #10
 800c798:	e1ff      	b.n	800cb9a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c79a:	2300      	movs	r3, #0
 800c79c:	e1fd      	b.n	800cb9a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ae:	785b      	ldrb	r3, [r3, #1]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe fd11 	bl	800b1d8 <disk_initialize>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c7bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e1e6      	b.n	800cb9a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c7cc:	79fb      	ldrb	r3, [r7, #7]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d007      	beq.n	800c7e2 <find_volume+0xca>
 800c7d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7d6:	f003 0304 	and.w	r3, r3, #4
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c7de:	230a      	movs	r3, #10
 800c7e0:	e1db      	b.n	800cb9a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c7e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7ea:	f7ff ff3f 	bl	800c66c <check_fs>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c7f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d149      	bne.n	800c890 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800c800:	e01e      	b.n	800c840 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c804:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c80a:	011b      	lsls	r3, r3, #4
 800c80c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c810:	4413      	add	r3, r2
 800c812:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c816:	3304      	adds	r3, #4
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d006      	beq.n	800c82c <find_volume+0x114>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c820:	3308      	adds	r3, #8
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fd76 	bl	800b314 <ld_dword>
 800c828:	4602      	mov	r2, r0
 800c82a:	e000      	b.n	800c82e <find_volume+0x116>
 800c82c:	2200      	movs	r2, #0
 800c82e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	3358      	adds	r3, #88	@ 0x58
 800c834:	443b      	add	r3, r7
 800c836:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c83a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c83c:	3301      	adds	r3, #1
 800c83e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c842:	2b03      	cmp	r3, #3
 800c844:	d9dd      	bls.n	800c802 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c846:	2300      	movs	r3, #0
 800c848:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c84a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <find_volume+0x13e>
 800c850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c852:	3b01      	subs	r3, #1
 800c854:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	3358      	adds	r3, #88	@ 0x58
 800c85c:	443b      	add	r3, r7
 800c85e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c862:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <find_volume+0x15e>
 800c86a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c86c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c86e:	f7ff fefd 	bl	800c66c <check_fs>
 800c872:	4603      	mov	r3, r0
 800c874:	e000      	b.n	800c878 <find_volume+0x160>
 800c876:	2303      	movs	r3, #3
 800c878:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c87c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c880:	2b01      	cmp	r3, #1
 800c882:	d905      	bls.n	800c890 <find_volume+0x178>
 800c884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c886:	3301      	adds	r3, #1
 800c888:	643b      	str	r3, [r7, #64]	@ 0x40
 800c88a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d9e2      	bls.n	800c856 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c890:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c894:	2b04      	cmp	r3, #4
 800c896:	d101      	bne.n	800c89c <find_volume+0x184>
 800c898:	2301      	movs	r3, #1
 800c89a:	e17e      	b.n	800cb9a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c89c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d901      	bls.n	800c8a8 <find_volume+0x190>
 800c8a4:	230d      	movs	r3, #13
 800c8a6:	e178      	b.n	800cb9a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8aa:	3330      	adds	r3, #48	@ 0x30
 800c8ac:	330b      	adds	r3, #11
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fe fd18 	bl	800b2e4 <ld_word>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8ba:	d001      	beq.n	800c8c0 <find_volume+0x1a8>
 800c8bc:	230d      	movs	r3, #13
 800c8be:	e16c      	b.n	800cb9a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c2:	3330      	adds	r3, #48	@ 0x30
 800c8c4:	3316      	adds	r3, #22
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fe fd0c 	bl	800b2e4 <ld_word>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c8d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <find_volume+0x1cc>
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d8:	3330      	adds	r3, #48	@ 0x30
 800c8da:	3324      	adds	r3, #36	@ 0x24
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fe fd19 	bl	800b314 <ld_dword>
 800c8e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ec:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	789b      	ldrb	r3, [r3, #2]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d005      	beq.n	800c908 <find_volume+0x1f0>
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fe:	789b      	ldrb	r3, [r3, #2]
 800c900:	2b02      	cmp	r3, #2
 800c902:	d001      	beq.n	800c908 <find_volume+0x1f0>
 800c904:	230d      	movs	r3, #13
 800c906:	e148      	b.n	800cb9a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90a:	789b      	ldrb	r3, [r3, #2]
 800c90c:	461a      	mov	r2, r3
 800c90e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c910:	fb02 f303 	mul.w	r3, r2, r3
 800c914:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c91c:	461a      	mov	r2, r3
 800c91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c920:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c924:	895b      	ldrh	r3, [r3, #10]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d008      	beq.n	800c93c <find_volume+0x224>
 800c92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92c:	895b      	ldrh	r3, [r3, #10]
 800c92e:	461a      	mov	r2, r3
 800c930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c932:	895b      	ldrh	r3, [r3, #10]
 800c934:	3b01      	subs	r3, #1
 800c936:	4013      	ands	r3, r2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <find_volume+0x228>
 800c93c:	230d      	movs	r3, #13
 800c93e:	e12c      	b.n	800cb9a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c942:	3330      	adds	r3, #48	@ 0x30
 800c944:	3311      	adds	r3, #17
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fccc 	bl	800b2e4 <ld_word>
 800c94c:	4603      	mov	r3, r0
 800c94e:	461a      	mov	r2, r3
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c956:	891b      	ldrh	r3, [r3, #8]
 800c958:	f003 030f 	and.w	r3, r3, #15
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <find_volume+0x24e>
 800c962:	230d      	movs	r3, #13
 800c964:	e119      	b.n	800cb9a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c968:	3330      	adds	r3, #48	@ 0x30
 800c96a:	3313      	adds	r3, #19
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fe fcb9 	bl	800b2e4 <ld_word>
 800c972:	4603      	mov	r3, r0
 800c974:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d106      	bne.n	800c98a <find_volume+0x272>
 800c97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97e:	3330      	adds	r3, #48	@ 0x30
 800c980:	3320      	adds	r3, #32
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fcc6 	bl	800b314 <ld_dword>
 800c988:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98c:	3330      	adds	r3, #48	@ 0x30
 800c98e:	330e      	adds	r3, #14
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fca7 	bl	800b2e4 <ld_word>
 800c996:	4603      	mov	r3, r0
 800c998:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c99a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <find_volume+0x28c>
 800c9a0:	230d      	movs	r3, #13
 800c9a2:	e0fa      	b.n	800cb9a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c9a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9a8:	4413      	add	r3, r2
 800c9aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ac:	8912      	ldrh	r2, [r2, #8]
 800c9ae:	0912      	lsrs	r2, r2, #4
 800c9b0:	b292      	uxth	r2, r2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c9b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d204      	bcs.n	800c9c8 <find_volume+0x2b0>
 800c9be:	230d      	movs	r3, #13
 800c9c0:	e0eb      	b.n	800cb9a <find_volume+0x482>
 800c9c2:	bf00      	nop
 800c9c4:	2000108c 	.word	0x2000108c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c9c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9d0:	8952      	ldrh	r2, [r2, #10]
 800c9d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <find_volume+0x2ca>
 800c9de:	230d      	movs	r3, #13
 800c9e0:	e0db      	b.n	800cb9a <find_volume+0x482>
		fmt = FS_FAT32;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d802      	bhi.n	800c9f8 <find_volume+0x2e0>
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d802      	bhi.n	800ca08 <find_volume+0x2f0>
 800ca02:	2301      	movs	r3, #1
 800ca04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ca08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0a:	1c9a      	adds	r2, r3, #2
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ca10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca14:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ca16:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ca18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca1a:	441a      	add	r2, r3
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ca20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca24:	441a      	add	r2, r3
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ca2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d11e      	bne.n	800ca70 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ca32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca34:	3330      	adds	r3, #48	@ 0x30
 800ca36:	332a      	adds	r3, #42	@ 0x2a
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fe fc53 	bl	800b2e4 <ld_word>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <find_volume+0x330>
 800ca44:	230d      	movs	r3, #13
 800ca46:	e0a8      	b.n	800cb9a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ca48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4a:	891b      	ldrh	r3, [r3, #8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <find_volume+0x33c>
 800ca50:	230d      	movs	r3, #13
 800ca52:	e0a2      	b.n	800cb9a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ca54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca56:	3330      	adds	r3, #48	@ 0x30
 800ca58:	332c      	adds	r3, #44	@ 0x2c
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fc5a 	bl	800b314 <ld_dword>
 800ca60:	4602      	mov	r2, r0
 800ca62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca64:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ca66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca6e:	e01f      	b.n	800cab0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ca70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca72:	891b      	ldrh	r3, [r3, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <find_volume+0x364>
 800ca78:	230d      	movs	r3, #13
 800ca7a:	e08e      	b.n	800cb9a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7e:	6a1a      	ldr	r2, [r3, #32]
 800ca80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca82:	441a      	add	r2, r3
 800ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca86:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d103      	bne.n	800ca98 <find_volume+0x380>
 800ca90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	e00a      	b.n	800caae <find_volume+0x396>
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9a:	695a      	ldr	r2, [r3, #20]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	4413      	add	r3, r2
 800caa2:	085a      	lsrs	r2, r3, #1
 800caa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	f003 0301 	and.w	r3, r3, #1
 800caac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800caae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab2:	699a      	ldr	r2, [r3, #24]
 800cab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cab6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800caba:	0a5b      	lsrs	r3, r3, #9
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d201      	bcs.n	800cac4 <find_volume+0x3ac>
 800cac0:	230d      	movs	r3, #13
 800cac2:	e06a      	b.n	800cb9a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac6:	f04f 32ff 	mov.w	r2, #4294967295
 800caca:	611a      	str	r2, [r3, #16]
 800cacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cace:	691a      	ldr	r2, [r3, #16]
 800cad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	2280      	movs	r2, #128	@ 0x80
 800cad8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cada:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cade:	2b03      	cmp	r3, #3
 800cae0:	d149      	bne.n	800cb76 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae4:	3330      	adds	r3, #48	@ 0x30
 800cae6:	3330      	adds	r3, #48	@ 0x30
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fbfb 	bl	800b2e4 <ld_word>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d140      	bne.n	800cb76 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800caf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caf6:	3301      	adds	r3, #1
 800caf8:	4619      	mov	r1, r3
 800cafa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cafc:	f7fe fea2 	bl	800b844 <move_window>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d137      	bne.n	800cb76 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb08:	2200      	movs	r2, #0
 800cb0a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0e:	3330      	adds	r3, #48	@ 0x30
 800cb10:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe fbe5 	bl	800b2e4 <ld_word>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d127      	bne.n	800cb76 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb28:	3330      	adds	r3, #48	@ 0x30
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe fbf2 	bl	800b314 <ld_dword>
 800cb30:	4603      	mov	r3, r0
 800cb32:	4a1c      	ldr	r2, [pc, #112]	@ (800cba4 <find_volume+0x48c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d11e      	bne.n	800cb76 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3a:	3330      	adds	r3, #48	@ 0x30
 800cb3c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fe fbe7 	bl	800b314 <ld_dword>
 800cb46:	4603      	mov	r3, r0
 800cb48:	4a17      	ldr	r2, [pc, #92]	@ (800cba8 <find_volume+0x490>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d113      	bne.n	800cb76 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb50:	3330      	adds	r3, #48	@ 0x30
 800cb52:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe fbdc 	bl	800b314 <ld_dword>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb60:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	3330      	adds	r3, #48	@ 0x30
 800cb66:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fe fbd2 	bl	800b314 <ld_dword>
 800cb70:	4602      	mov	r2, r0
 800cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb74:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb78:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cb7c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cb7e:	4b0b      	ldr	r3, [pc, #44]	@ (800cbac <find_volume+0x494>)
 800cb80:	881b      	ldrh	r3, [r3, #0]
 800cb82:	3301      	adds	r3, #1
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	4b09      	ldr	r3, [pc, #36]	@ (800cbac <find_volume+0x494>)
 800cb88:	801a      	strh	r2, [r3, #0]
 800cb8a:	4b08      	ldr	r3, [pc, #32]	@ (800cbac <find_volume+0x494>)
 800cb8c:	881a      	ldrh	r2, [r3, #0]
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb90:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb94:	f7fe fdee 	bl	800b774 <clear_lock>
#endif
	return FR_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3758      	adds	r7, #88	@ 0x58
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	41615252 	.word	0x41615252
 800cba8:	61417272 	.word	0x61417272
 800cbac:	20001090 	.word	0x20001090

0800cbb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cbba:	2309      	movs	r3, #9
 800cbbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01c      	beq.n	800cbfe <validate+0x4e>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d018      	beq.n	800cbfe <validate+0x4e>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d013      	beq.n	800cbfe <validate+0x4e>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	889a      	ldrh	r2, [r3, #4]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	88db      	ldrh	r3, [r3, #6]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d10c      	bne.n	800cbfe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fada 	bl	800b1a4 <disk_status>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	f003 0301 	and.w	r3, r3, #1
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <validate+0x4e>
			res = FR_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d102      	bne.n	800cc0a <validate+0x5a>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	e000      	b.n	800cc0c <validate+0x5c>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	6013      	str	r3, [r2, #0]
	return res;
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cc2e:	f107 0310 	add.w	r3, r7, #16
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff fcd5 	bl	800c5e2 <get_ldnumber>
 800cc38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da01      	bge.n	800cc44 <f_mount+0x28>
 800cc40:	230b      	movs	r3, #11
 800cc42:	e02b      	b.n	800cc9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cc44:	4a17      	ldr	r2, [pc, #92]	@ (800cca4 <f_mount+0x88>)
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d005      	beq.n	800cc60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cc54:	69b8      	ldr	r0, [r7, #24]
 800cc56:	f7fe fd8d 	bl	800b774 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d002      	beq.n	800cc6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	490d      	ldr	r1, [pc, #52]	@ (800cca4 <f_mount+0x88>)
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <f_mount+0x66>
 800cc7c:	79fb      	ldrb	r3, [r7, #7]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d001      	beq.n	800cc86 <f_mount+0x6a>
 800cc82:	2300      	movs	r3, #0
 800cc84:	e00a      	b.n	800cc9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cc86:	f107 010c 	add.w	r1, r7, #12
 800cc8a:	f107 0308 	add.w	r3, r7, #8
 800cc8e:	2200      	movs	r2, #0
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7ff fd41 	bl	800c718 <find_volume>
 800cc96:	4603      	mov	r3, r0
 800cc98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3720      	adds	r7, #32
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	2000108c 	.word	0x2000108c

0800cca8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b098      	sub	sp, #96	@ 0x60
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <f_open+0x18>
 800ccbc:	2309      	movs	r3, #9
 800ccbe:	e1a9      	b.n	800d014 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ccc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ccc8:	79fa      	ldrb	r2, [r7, #7]
 800ccca:	f107 0110 	add.w	r1, r7, #16
 800ccce:	f107 0308 	add.w	r3, r7, #8
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff fd20 	bl	800c718 <find_volume>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ccde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f040 818d 	bne.w	800d002 <f_open+0x35a>
		dj.obj.fs = fs;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	f107 0314 	add.w	r3, r7, #20
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff fc03 	bl	800c500 <follow_path>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cd00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d118      	bne.n	800cd3a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cd08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd0c:	b25b      	sxtb	r3, r3
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	da03      	bge.n	800cd1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800cd12:	2306      	movs	r3, #6
 800cd14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cd18:	e00f      	b.n	800cd3a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd1a:	79fb      	ldrb	r3, [r7, #7]
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	bf8c      	ite	hi
 800cd20:	2301      	movhi	r3, #1
 800cd22:	2300      	movls	r3, #0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	461a      	mov	r2, r3
 800cd28:	f107 0314 	add.w	r3, r7, #20
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fbd8 	bl	800b4e4 <chk_lock>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd3a:	79fb      	ldrb	r3, [r7, #7]
 800cd3c:	f003 031c 	and.w	r3, r3, #28
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d07f      	beq.n	800ce44 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cd44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d017      	beq.n	800cd7c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cd4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd50:	2b04      	cmp	r3, #4
 800cd52:	d10e      	bne.n	800cd72 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cd54:	f7fe fc22 	bl	800b59c <enq_lock>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d006      	beq.n	800cd6c <f_open+0xc4>
 800cd5e:	f107 0314 	add.w	r3, r7, #20
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7ff fb06 	bl	800c374 <dir_register>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	e000      	b.n	800cd6e <f_open+0xc6>
 800cd6c:	2312      	movs	r3, #18
 800cd6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	f043 0308 	orr.w	r3, r3, #8
 800cd78:	71fb      	strb	r3, [r7, #7]
 800cd7a:	e010      	b.n	800cd9e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd7c:	7ebb      	ldrb	r3, [r7, #26]
 800cd7e:	f003 0311 	and.w	r3, r3, #17
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d003      	beq.n	800cd8e <f_open+0xe6>
					res = FR_DENIED;
 800cd86:	2307      	movs	r3, #7
 800cd88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cd8c:	e007      	b.n	800cd9e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cd8e:	79fb      	ldrb	r3, [r7, #7]
 800cd90:	f003 0304 	and.w	r3, r3, #4
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <f_open+0xf6>
 800cd98:	2308      	movs	r3, #8
 800cd9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cd9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d168      	bne.n	800ce78 <f_open+0x1d0>
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	f003 0308 	and.w	r3, r3, #8
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d063      	beq.n	800ce78 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cdb0:	f7fe f88c 	bl	800aecc <get_fattime>
 800cdb4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cdb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdb8:	330e      	adds	r3, #14
 800cdba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fe fae7 	bl	800b390 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cdc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdc4:	3316      	adds	r3, #22
 800cdc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fe fae1 	bl	800b390 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cdce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd0:	330b      	adds	r3, #11
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff fa35 	bl	800c24c <ld_clust>
 800cde2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cde8:	2200      	movs	r2, #0
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff fa4d 	bl	800c28a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cdf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf2:	331c      	adds	r3, #28
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fe faca 	bl	800b390 <st_dword>
					fs->wflag = 1;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ce02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d037      	beq.n	800ce78 <f_open+0x1d0>
						dw = fs->winsect;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce0c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ce0e:	f107 0314 	add.w	r3, r7, #20
 800ce12:	2200      	movs	r2, #0
 800ce14:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe ff60 	bl	800bcdc <remove_chain>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ce22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d126      	bne.n	800ce78 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe fd08 	bl	800b844 <move_window>
 800ce34:	4603      	mov	r3, r0
 800ce36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce3e:	3a01      	subs	r2, #1
 800ce40:	60da      	str	r2, [r3, #12]
 800ce42:	e019      	b.n	800ce78 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ce44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d115      	bne.n	800ce78 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ce4c:	7ebb      	ldrb	r3, [r7, #26]
 800ce4e:	f003 0310 	and.w	r3, r3, #16
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <f_open+0x1b6>
					res = FR_NO_FILE;
 800ce56:	2304      	movs	r3, #4
 800ce58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce5c:	e00c      	b.n	800ce78 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	f003 0302 	and.w	r3, r3, #2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d007      	beq.n	800ce78 <f_open+0x1d0>
 800ce68:	7ebb      	ldrb	r3, [r7, #26]
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d002      	beq.n	800ce78 <f_open+0x1d0>
						res = FR_DENIED;
 800ce72:	2307      	movs	r3, #7
 800ce74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ce78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d126      	bne.n	800cece <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce80:	79fb      	ldrb	r3, [r7, #7]
 800ce82:	f003 0308 	and.w	r3, r3, #8
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d003      	beq.n	800ce92 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ce9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	bf8c      	ite	hi
 800cea6:	2301      	movhi	r3, #1
 800cea8:	2300      	movls	r3, #0
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	461a      	mov	r2, r3
 800ceae:	f107 0314 	add.w	r3, r7, #20
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fe fb93 	bl	800b5e0 <inc_lock>
 800ceba:	4602      	mov	r2, r0
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <f_open+0x226>
 800cec8:	2302      	movs	r3, #2
 800ceca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cece:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f040 8095 	bne.w	800d002 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff f9b4 	bl	800c24c <ld_clust>
 800cee4:	4602      	mov	r2, r0
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ceea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceec:	331c      	adds	r3, #28
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fe fa10 	bl	800b314 <ld_dword>
 800cef4:	4602      	mov	r2, r0
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf00:	693a      	ldr	r2, [r7, #16]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	88da      	ldrh	r2, [r3, #6]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	79fa      	ldrb	r2, [r7, #7]
 800cf12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	3330      	adds	r3, #48	@ 0x30
 800cf2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf2e:	2100      	movs	r1, #0
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fe fa7a 	bl	800b42a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cf36:	79fb      	ldrb	r3, [r7, #7]
 800cf38:	f003 0320 	and.w	r3, r3, #32
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d060      	beq.n	800d002 <f_open+0x35a>
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d05c      	beq.n	800d002 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	68da      	ldr	r2, [r3, #12]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	895b      	ldrh	r3, [r3, #10]
 800cf54:	025b      	lsls	r3, r3, #9
 800cf56:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf64:	e016      	b.n	800cf94 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe fd25 	bl	800b9ba <get_fat>
 800cf70:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cf72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d802      	bhi.n	800cf7e <f_open+0x2d6>
 800cf78:	2302      	movs	r3, #2
 800cf7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cf7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf84:	d102      	bne.n	800cf8c <f_open+0x2e4>
 800cf86:	2301      	movs	r3, #1
 800cf88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d103      	bne.n	800cfa4 <f_open+0x2fc>
 800cf9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d8e0      	bhi.n	800cf66 <f_open+0x2be>
				}
				fp->clust = clst;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfa8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cfaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d127      	bne.n	800d002 <f_open+0x35a>
 800cfb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d022      	beq.n	800d002 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fcdb 	bl	800b97c <clust2sect>
 800cfc6:	6478      	str	r0, [r7, #68]	@ 0x44
 800cfc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d103      	bne.n	800cfd6 <f_open+0x32e>
						res = FR_INT_ERR;
 800cfce:	2302      	movs	r3, #2
 800cfd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cfd4:	e015      	b.n	800d002 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cfd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfd8:	0a5a      	lsrs	r2, r3, #9
 800cfda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfdc:	441a      	add	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	7858      	ldrb	r0, [r3, #1]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6a1a      	ldr	r2, [r3, #32]
 800cff0:	2301      	movs	r3, #1
 800cff2:	f7fe f919 	bl	800b228 <disk_read>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <f_open+0x35a>
 800cffc:	2301      	movs	r3, #1
 800cffe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d002:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <f_open+0x368>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d010:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d014:	4618      	mov	r0, r3
 800d016:	3760      	adds	r7, #96	@ 0x60
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08e      	sub	sp, #56	@ 0x38
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f107 0214 	add.w	r2, r7, #20
 800d03a:	4611      	mov	r1, r2
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7ff fdb7 	bl	800cbb0 <validate>
 800d042:	4603      	mov	r3, r0
 800d044:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d048:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d107      	bne.n	800d060 <f_read+0x44>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	7d5b      	ldrb	r3, [r3, #21]
 800d054:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d058:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <f_read+0x4a>
 800d060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d064:	e115      	b.n	800d292 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	7d1b      	ldrb	r3, [r3, #20]
 800d06a:	f003 0301 	and.w	r3, r3, #1
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <f_read+0x5a>
 800d072:	2307      	movs	r3, #7
 800d074:	e10d      	b.n	800d292 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	429a      	cmp	r2, r3
 800d088:	f240 80fe 	bls.w	800d288 <f_read+0x26c>
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d090:	e0fa      	b.n	800d288 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f040 80c6 	bne.w	800d22c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	0a5b      	lsrs	r3, r3, #9
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	8952      	ldrh	r2, [r2, #10]
 800d0aa:	3a01      	subs	r2, #1
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d12f      	bne.n	800d116 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d103      	bne.n	800d0c6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0c4:	e013      	b.n	800d0ee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d007      	beq.n	800d0de <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	68f8      	ldr	r0, [r7, #12]
 800d0d6:	f7fe fefe 	bl	800bed6 <clmt_clust>
 800d0da:	6338      	str	r0, [r7, #48]	@ 0x30
 800d0dc:	e007      	b.n	800d0ee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	f7fe fc67 	bl	800b9ba <get_fat>
 800d0ec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d804      	bhi.n	800d0fe <f_read+0xe2>
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	755a      	strb	r2, [r3, #21]
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	e0c9      	b.n	800d292 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d104:	d104      	bne.n	800d110 <f_read+0xf4>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2201      	movs	r2, #1
 800d10a:	755a      	strb	r2, [r3, #21]
 800d10c:	2301      	movs	r3, #1
 800d10e:	e0c0      	b.n	800d292 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d114:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	69db      	ldr	r3, [r3, #28]
 800d11c:	4619      	mov	r1, r3
 800d11e:	4610      	mov	r0, r2
 800d120:	f7fe fc2c 	bl	800b97c <clust2sect>
 800d124:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d104      	bne.n	800d136 <f_read+0x11a>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2202      	movs	r2, #2
 800d130:	755a      	strb	r2, [r3, #21]
 800d132:	2302      	movs	r3, #2
 800d134:	e0ad      	b.n	800d292 <f_read+0x276>
			sect += csect;
 800d136:	69ba      	ldr	r2, [r7, #24]
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	4413      	add	r3, r2
 800d13c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	0a5b      	lsrs	r3, r3, #9
 800d142:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d146:	2b00      	cmp	r3, #0
 800d148:	d039      	beq.n	800d1be <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d14a:	69fa      	ldr	r2, [r7, #28]
 800d14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14e:	4413      	add	r3, r2
 800d150:	697a      	ldr	r2, [r7, #20]
 800d152:	8952      	ldrh	r2, [r2, #10]
 800d154:	4293      	cmp	r3, r2
 800d156:	d905      	bls.n	800d164 <f_read+0x148>
					cc = fs->csize - csect;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	895b      	ldrh	r3, [r3, #10]
 800d15c:	461a      	mov	r2, r3
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	7858      	ldrb	r0, [r3, #1]
 800d168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16a:	69ba      	ldr	r2, [r7, #24]
 800d16c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d16e:	f7fe f85b 	bl	800b228 <disk_read>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d004      	beq.n	800d182 <f_read+0x166>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2201      	movs	r2, #1
 800d17c:	755a      	strb	r2, [r3, #21]
 800d17e:	2301      	movs	r3, #1
 800d180:	e087      	b.n	800d292 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	7d1b      	ldrb	r3, [r3, #20]
 800d186:	b25b      	sxtb	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	da14      	bge.n	800d1b6 <f_read+0x19a>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6a1a      	ldr	r2, [r3, #32]
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d196:	429a      	cmp	r2, r3
 800d198:	d90d      	bls.n	800d1b6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6a1a      	ldr	r2, [r3, #32]
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	025b      	lsls	r3, r3, #9
 800d1a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1a6:	18d0      	adds	r0, r2, r3
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	3330      	adds	r3, #48	@ 0x30
 800d1ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	f7fe f919 	bl	800b3e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b8:	025b      	lsls	r3, r3, #9
 800d1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d1bc:	e050      	b.n	800d260 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	69ba      	ldr	r2, [r7, #24]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d02e      	beq.n	800d226 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	7d1b      	ldrb	r3, [r3, #20]
 800d1cc:	b25b      	sxtb	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	da18      	bge.n	800d204 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	7858      	ldrb	r0, [r3, #1]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6a1a      	ldr	r2, [r3, #32]
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f7fe f841 	bl	800b268 <disk_write>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d004      	beq.n	800d1f6 <f_read+0x1da>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	755a      	strb	r2, [r3, #21]
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e04d      	b.n	800d292 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	7d1b      	ldrb	r3, [r3, #20]
 800d1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	7858      	ldrb	r0, [r3, #1]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d20e:	2301      	movs	r3, #1
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	f7fe f809 	bl	800b228 <disk_read>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d004      	beq.n	800d226 <f_read+0x20a>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2201      	movs	r2, #1
 800d220:	755a      	strb	r2, [r3, #21]
 800d222:	2301      	movs	r3, #1
 800d224:	e035      	b.n	800d292 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	69ba      	ldr	r2, [r7, #24]
 800d22a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	699b      	ldr	r3, [r3, #24]
 800d230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d234:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d238:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d901      	bls.n	800d246 <f_read+0x22a>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d254:	4413      	add	r3, r2
 800d256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d258:	4619      	mov	r1, r3
 800d25a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d25c:	f7fe f8c4 	bl	800b3e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d264:	4413      	add	r3, r2
 800d266:	627b      	str	r3, [r7, #36]	@ 0x24
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	699a      	ldr	r2, [r3, #24]
 800d26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26e:	441a      	add	r2, r3
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	619a      	str	r2, [r3, #24]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27a:	441a      	add	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	601a      	str	r2, [r3, #0]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f47f af01 	bne.w	800d092 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3738      	adds	r7, #56	@ 0x38
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b08c      	sub	sp, #48	@ 0x30
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	607a      	str	r2, [r7, #4]
 800d2a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f107 0210 	add.w	r2, r7, #16
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff fc78 	bl	800cbb0 <validate>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d107      	bne.n	800d2de <f_write+0x44>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	7d5b      	ldrb	r3, [r3, #21]
 800d2d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d002      	beq.n	800d2e4 <f_write+0x4a>
 800d2de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2e2:	e14b      	b.n	800d57c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	7d1b      	ldrb	r3, [r3, #20]
 800d2e8:	f003 0302 	and.w	r3, r3, #2
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <f_write+0x5a>
 800d2f0:	2307      	movs	r3, #7
 800d2f2:	e143      	b.n	800d57c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	699a      	ldr	r2, [r3, #24]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	441a      	add	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	429a      	cmp	r2, r3
 800d302:	f080 812d 	bcs.w	800d560 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	43db      	mvns	r3, r3
 800d30c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d30e:	e127      	b.n	800d560 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f040 80e3 	bne.w	800d4e4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	0a5b      	lsrs	r3, r3, #9
 800d324:	693a      	ldr	r2, [r7, #16]
 800d326:	8952      	ldrh	r2, [r2, #10]
 800d328:	3a01      	subs	r2, #1
 800d32a:	4013      	ands	r3, r2
 800d32c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d143      	bne.n	800d3bc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10c      	bne.n	800d356 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d344:	2b00      	cmp	r3, #0
 800d346:	d11a      	bne.n	800d37e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2100      	movs	r1, #0
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe fd2a 	bl	800bda6 <create_chain>
 800d352:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d354:	e013      	b.n	800d37e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d007      	beq.n	800d36e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	4619      	mov	r1, r3
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f7fe fdb6 	bl	800bed6 <clmt_clust>
 800d36a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d36c:	e007      	b.n	800d37e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	69db      	ldr	r3, [r3, #28]
 800d374:	4619      	mov	r1, r3
 800d376:	4610      	mov	r0, r2
 800d378:	f7fe fd15 	bl	800bda6 <create_chain>
 800d37c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 80f2 	beq.w	800d56a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d104      	bne.n	800d396 <f_write+0xfc>
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2202      	movs	r2, #2
 800d390:	755a      	strb	r2, [r3, #21]
 800d392:	2302      	movs	r3, #2
 800d394:	e0f2      	b.n	800d57c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39c:	d104      	bne.n	800d3a8 <f_write+0x10e>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	755a      	strb	r2, [r3, #21]
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e0e9      	b.n	800d57c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3ac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d102      	bne.n	800d3bc <f_write+0x122>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3ba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	7d1b      	ldrb	r3, [r3, #20]
 800d3c0:	b25b      	sxtb	r3, r3
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	da18      	bge.n	800d3f8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	7858      	ldrb	r0, [r3, #1]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6a1a      	ldr	r2, [r3, #32]
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f7fd ff47 	bl	800b268 <disk_write>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d004      	beq.n	800d3ea <f_write+0x150>
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	755a      	strb	r2, [r3, #21]
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e0c8      	b.n	800d57c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	7d1b      	ldrb	r3, [r3, #20]
 800d3ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	69db      	ldr	r3, [r3, #28]
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f7fe fabb 	bl	800b97c <clust2sect>
 800d406:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d104      	bne.n	800d418 <f_write+0x17e>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2202      	movs	r2, #2
 800d412:	755a      	strb	r2, [r3, #21]
 800d414:	2302      	movs	r3, #2
 800d416:	e0b1      	b.n	800d57c <f_write+0x2e2>
			sect += csect;
 800d418:	697a      	ldr	r2, [r7, #20]
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	4413      	add	r3, r2
 800d41e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	0a5b      	lsrs	r3, r3, #9
 800d424:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d03c      	beq.n	800d4a6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d42c:	69ba      	ldr	r2, [r7, #24]
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	4413      	add	r3, r2
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	8952      	ldrh	r2, [r2, #10]
 800d436:	4293      	cmp	r3, r2
 800d438:	d905      	bls.n	800d446 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	895b      	ldrh	r3, [r3, #10]
 800d43e:	461a      	mov	r2, r3
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	7858      	ldrb	r0, [r3, #1]
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	69f9      	ldr	r1, [r7, #28]
 800d450:	f7fd ff0a 	bl	800b268 <disk_write>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d004      	beq.n	800d464 <f_write+0x1ca>
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2201      	movs	r2, #1
 800d45e:	755a      	strb	r2, [r3, #21]
 800d460:	2301      	movs	r3, #1
 800d462:	e08b      	b.n	800d57c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6a1a      	ldr	r2, [r3, #32]
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	1ad3      	subs	r3, r2, r3
 800d46c:	6a3a      	ldr	r2, [r7, #32]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d915      	bls.n	800d49e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6a1a      	ldr	r2, [r3, #32]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	025b      	lsls	r3, r3, #9
 800d482:	69fa      	ldr	r2, [r7, #28]
 800d484:	4413      	add	r3, r2
 800d486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d48a:	4619      	mov	r1, r3
 800d48c:	f7fd ffac 	bl	800b3e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	7d1b      	ldrb	r3, [r3, #20]
 800d494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d498:	b2da      	uxtb	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	025b      	lsls	r3, r3, #9
 800d4a2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d4a4:	e03f      	b.n	800d526 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d016      	beq.n	800d4de <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	699a      	ldr	r2, [r3, #24]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d210      	bcs.n	800d4de <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	7858      	ldrb	r0, [r3, #1]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	f7fd fead 	bl	800b228 <disk_read>
 800d4ce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d004      	beq.n	800d4de <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	755a      	strb	r2, [r3, #21]
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e04e      	b.n	800d57c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	697a      	ldr	r2, [r7, #20]
 800d4e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	699b      	ldr	r3, [r3, #24]
 800d4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d4f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d4f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d901      	bls.n	800d4fe <f_write+0x264>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50c:	4413      	add	r3, r2
 800d50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d510:	69f9      	ldr	r1, [r7, #28]
 800d512:	4618      	mov	r0, r3
 800d514:	f7fd ff68 	bl	800b3e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	7d1b      	ldrb	r3, [r3, #20]
 800d51c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d520:	b2da      	uxtb	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d526:	69fa      	ldr	r2, [r7, #28]
 800d528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52a:	4413      	add	r3, r2
 800d52c:	61fb      	str	r3, [r7, #28]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	699a      	ldr	r2, [r3, #24]
 800d532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d534:	441a      	add	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	619a      	str	r2, [r3, #24]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	68da      	ldr	r2, [r3, #12]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	429a      	cmp	r2, r3
 800d544:	bf38      	it	cc
 800d546:	461a      	movcc	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	60da      	str	r2, [r3, #12]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d552:	441a      	add	r2, r3
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	601a      	str	r2, [r3, #0]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f47f aed4 	bne.w	800d310 <f_write+0x76>
 800d568:	e000      	b.n	800d56c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d56a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	7d1b      	ldrb	r3, [r3, #20]
 800d570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d574:	b2da      	uxtb	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3730      	adds	r7, #48	@ 0x30
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f107 0208 	add.w	r2, r7, #8
 800d592:	4611      	mov	r1, r2
 800d594:	4618      	mov	r0, r3
 800d596:	f7ff fb0b 	bl	800cbb0 <validate>
 800d59a:	4603      	mov	r3, r0
 800d59c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d168      	bne.n	800d676 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d062      	beq.n	800d676 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	7d1b      	ldrb	r3, [r3, #20]
 800d5b4:	b25b      	sxtb	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	da15      	bge.n	800d5e6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	7858      	ldrb	r0, [r3, #1]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a1a      	ldr	r2, [r3, #32]
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	f7fd fe4d 	bl	800b268 <disk_write>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <f_sync+0x54>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e04f      	b.n	800d678 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7d1b      	ldrb	r3, [r3, #20]
 800d5dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d5e6:	f7fd fc71 	bl	800aecc <get_fattime>
 800d5ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	f7fe f925 	bl	800b844 <move_window>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d5fe:	7dfb      	ldrb	r3, [r7, #23]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d138      	bne.n	800d676 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d608:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	330b      	adds	r3, #11
 800d60e:	781a      	ldrb	r2, [r3, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	330b      	adds	r3, #11
 800d614:	f042 0220 	orr.w	r2, r2, #32
 800d618:	b2d2      	uxtb	r2, r2
 800d61a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6818      	ldr	r0, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	461a      	mov	r2, r3
 800d626:	68f9      	ldr	r1, [r7, #12]
 800d628:	f7fe fe2f 	bl	800c28a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f103 021c 	add.w	r2, r3, #28
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	4619      	mov	r1, r3
 800d638:	4610      	mov	r0, r2
 800d63a:	f7fd fea9 	bl	800b390 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3316      	adds	r3, #22
 800d642:	6939      	ldr	r1, [r7, #16]
 800d644:	4618      	mov	r0, r3
 800d646:	f7fd fea3 	bl	800b390 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3312      	adds	r3, #18
 800d64e:	2100      	movs	r1, #0
 800d650:	4618      	mov	r0, r3
 800d652:	f7fd fe82 	bl	800b35a <st_word>
					fs->wflag = 1;
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2201      	movs	r2, #1
 800d65a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe f91e 	bl	800b8a0 <sync_fs>
 800d664:	4603      	mov	r3, r0
 800d666:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
 800d66c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d670:	b2da      	uxtb	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d676:	7dfb      	ldrb	r3, [r7, #23]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7ff ff7b 	bl	800d584 <f_sync>
 800d68e:	4603      	mov	r3, r0
 800d690:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d692:	7bfb      	ldrb	r3, [r7, #15]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d118      	bne.n	800d6ca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f107 0208 	add.w	r2, r7, #8
 800d69e:	4611      	mov	r1, r2
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fa85 	bl	800cbb0 <validate>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d6aa:	7bfb      	ldrb	r3, [r7, #15]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10c      	bne.n	800d6ca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fe f821 	bl	800b6fc <dec_lock>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d6be:	7bfb      	ldrb	r3, [r7, #15]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d102      	bne.n	800d6ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b087      	sub	sp, #28
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6ea:	4b1f      	ldr	r3, [pc, #124]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d6ec:	7a5b      	ldrb	r3, [r3, #9]
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d131      	bne.n	800d758 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6f4:	4b1c      	ldr	r3, [pc, #112]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d6f6:	7a5b      	ldrb	r3, [r3, #9]
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d6fe:	2100      	movs	r1, #0
 800d700:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d702:	4b19      	ldr	r3, [pc, #100]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d704:	7a5b      	ldrb	r3, [r3, #9]
 800d706:	b2db      	uxtb	r3, r3
 800d708:	4a17      	ldr	r2, [pc, #92]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	4413      	add	r3, r2
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d712:	4b15      	ldr	r3, [pc, #84]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d714:	7a5b      	ldrb	r3, [r3, #9]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	461a      	mov	r2, r3
 800d71a:	4b13      	ldr	r3, [pc, #76]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d71c:	4413      	add	r3, r2
 800d71e:	79fa      	ldrb	r2, [r7, #7]
 800d720:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d722:	4b11      	ldr	r3, [pc, #68]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d724:	7a5b      	ldrb	r3, [r3, #9]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	b2d1      	uxtb	r1, r2
 800d72c:	4a0e      	ldr	r2, [pc, #56]	@ (800d768 <FATFS_LinkDriverEx+0x94>)
 800d72e:	7251      	strb	r1, [r2, #9]
 800d730:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d732:	7dbb      	ldrb	r3, [r7, #22]
 800d734:	3330      	adds	r3, #48	@ 0x30
 800d736:	b2da      	uxtb	r2, r3
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	3301      	adds	r3, #1
 800d740:	223a      	movs	r2, #58	@ 0x3a
 800d742:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	3302      	adds	r3, #2
 800d748:	222f      	movs	r2, #47	@ 0x2f
 800d74a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	3303      	adds	r3, #3
 800d750:	2200      	movs	r2, #0
 800d752:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d758:	7dfb      	ldrb	r3, [r7, #23]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	371c      	adds	r7, #28
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	200010b4 	.word	0x200010b4

0800d76c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d776:	2200      	movs	r2, #0
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7ff ffaa 	bl	800d6d4 <FATFS_LinkDriverEx>
 800d780:	4603      	mov	r3, r0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <atoi>:
 800d78a:	220a      	movs	r2, #10
 800d78c:	2100      	movs	r1, #0
 800d78e:	f000 b87d 	b.w	800d88c <strtol>
	...

0800d794 <_strtol_l.constprop.0>:
 800d794:	2b24      	cmp	r3, #36	@ 0x24
 800d796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d79a:	4686      	mov	lr, r0
 800d79c:	4690      	mov	r8, r2
 800d79e:	d801      	bhi.n	800d7a4 <_strtol_l.constprop.0+0x10>
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d106      	bne.n	800d7b2 <_strtol_l.constprop.0+0x1e>
 800d7a4:	f000 fae4 	bl	800dd70 <__errno>
 800d7a8:	2316      	movs	r3, #22
 800d7aa:	6003      	str	r3, [r0, #0]
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b2:	4834      	ldr	r0, [pc, #208]	@ (800d884 <_strtol_l.constprop.0+0xf0>)
 800d7b4:	460d      	mov	r5, r1
 800d7b6:	462a      	mov	r2, r5
 800d7b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7bc:	5d06      	ldrb	r6, [r0, r4]
 800d7be:	f016 0608 	ands.w	r6, r6, #8
 800d7c2:	d1f8      	bne.n	800d7b6 <_strtol_l.constprop.0+0x22>
 800d7c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d7c6:	d12d      	bne.n	800d824 <_strtol_l.constprop.0+0x90>
 800d7c8:	782c      	ldrb	r4, [r5, #0]
 800d7ca:	2601      	movs	r6, #1
 800d7cc:	1c95      	adds	r5, r2, #2
 800d7ce:	f033 0210 	bics.w	r2, r3, #16
 800d7d2:	d109      	bne.n	800d7e8 <_strtol_l.constprop.0+0x54>
 800d7d4:	2c30      	cmp	r4, #48	@ 0x30
 800d7d6:	d12a      	bne.n	800d82e <_strtol_l.constprop.0+0x9a>
 800d7d8:	782a      	ldrb	r2, [r5, #0]
 800d7da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d7de:	2a58      	cmp	r2, #88	@ 0x58
 800d7e0:	d125      	bne.n	800d82e <_strtol_l.constprop.0+0x9a>
 800d7e2:	786c      	ldrb	r4, [r5, #1]
 800d7e4:	2310      	movs	r3, #16
 800d7e6:	3502      	adds	r5, #2
 800d7e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d7ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	fbbc f9f3 	udiv	r9, ip, r3
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d7fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d800:	2f09      	cmp	r7, #9
 800d802:	d81b      	bhi.n	800d83c <_strtol_l.constprop.0+0xa8>
 800d804:	463c      	mov	r4, r7
 800d806:	42a3      	cmp	r3, r4
 800d808:	dd27      	ble.n	800d85a <_strtol_l.constprop.0+0xc6>
 800d80a:	1c57      	adds	r7, r2, #1
 800d80c:	d007      	beq.n	800d81e <_strtol_l.constprop.0+0x8a>
 800d80e:	4581      	cmp	r9, r0
 800d810:	d320      	bcc.n	800d854 <_strtol_l.constprop.0+0xc0>
 800d812:	d101      	bne.n	800d818 <_strtol_l.constprop.0+0x84>
 800d814:	45a2      	cmp	sl, r4
 800d816:	db1d      	blt.n	800d854 <_strtol_l.constprop.0+0xc0>
 800d818:	fb00 4003 	mla	r0, r0, r3, r4
 800d81c:	2201      	movs	r2, #1
 800d81e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d822:	e7eb      	b.n	800d7fc <_strtol_l.constprop.0+0x68>
 800d824:	2c2b      	cmp	r4, #43	@ 0x2b
 800d826:	bf04      	itt	eq
 800d828:	782c      	ldrbeq	r4, [r5, #0]
 800d82a:	1c95      	addeq	r5, r2, #2
 800d82c:	e7cf      	b.n	800d7ce <_strtol_l.constprop.0+0x3a>
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1da      	bne.n	800d7e8 <_strtol_l.constprop.0+0x54>
 800d832:	2c30      	cmp	r4, #48	@ 0x30
 800d834:	bf0c      	ite	eq
 800d836:	2308      	moveq	r3, #8
 800d838:	230a      	movne	r3, #10
 800d83a:	e7d5      	b.n	800d7e8 <_strtol_l.constprop.0+0x54>
 800d83c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d840:	2f19      	cmp	r7, #25
 800d842:	d801      	bhi.n	800d848 <_strtol_l.constprop.0+0xb4>
 800d844:	3c37      	subs	r4, #55	@ 0x37
 800d846:	e7de      	b.n	800d806 <_strtol_l.constprop.0+0x72>
 800d848:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d84c:	2f19      	cmp	r7, #25
 800d84e:	d804      	bhi.n	800d85a <_strtol_l.constprop.0+0xc6>
 800d850:	3c57      	subs	r4, #87	@ 0x57
 800d852:	e7d8      	b.n	800d806 <_strtol_l.constprop.0+0x72>
 800d854:	f04f 32ff 	mov.w	r2, #4294967295
 800d858:	e7e1      	b.n	800d81e <_strtol_l.constprop.0+0x8a>
 800d85a:	1c53      	adds	r3, r2, #1
 800d85c:	d108      	bne.n	800d870 <_strtol_l.constprop.0+0xdc>
 800d85e:	2322      	movs	r3, #34	@ 0x22
 800d860:	f8ce 3000 	str.w	r3, [lr]
 800d864:	4660      	mov	r0, ip
 800d866:	f1b8 0f00 	cmp.w	r8, #0
 800d86a:	d0a0      	beq.n	800d7ae <_strtol_l.constprop.0+0x1a>
 800d86c:	1e69      	subs	r1, r5, #1
 800d86e:	e006      	b.n	800d87e <_strtol_l.constprop.0+0xea>
 800d870:	b106      	cbz	r6, 800d874 <_strtol_l.constprop.0+0xe0>
 800d872:	4240      	negs	r0, r0
 800d874:	f1b8 0f00 	cmp.w	r8, #0
 800d878:	d099      	beq.n	800d7ae <_strtol_l.constprop.0+0x1a>
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	d1f6      	bne.n	800d86c <_strtol_l.constprop.0+0xd8>
 800d87e:	f8c8 1000 	str.w	r1, [r8]
 800d882:	e794      	b.n	800d7ae <_strtol_l.constprop.0+0x1a>
 800d884:	080114e9 	.word	0x080114e9

0800d888 <_strtol_r>:
 800d888:	f7ff bf84 	b.w	800d794 <_strtol_l.constprop.0>

0800d88c <strtol>:
 800d88c:	4613      	mov	r3, r2
 800d88e:	460a      	mov	r2, r1
 800d890:	4601      	mov	r1, r0
 800d892:	4802      	ldr	r0, [pc, #8]	@ (800d89c <strtol+0x10>)
 800d894:	6800      	ldr	r0, [r0, #0]
 800d896:	f7ff bf7d 	b.w	800d794 <_strtol_l.constprop.0>
 800d89a:	bf00      	nop
 800d89c:	2000041c 	.word	0x2000041c

0800d8a0 <std>:
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	b510      	push	{r4, lr}
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8ae:	6083      	str	r3, [r0, #8]
 800d8b0:	8181      	strh	r1, [r0, #12]
 800d8b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8b4:	81c2      	strh	r2, [r0, #14]
 800d8b6:	6183      	str	r3, [r0, #24]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	2208      	movs	r2, #8
 800d8bc:	305c      	adds	r0, #92	@ 0x5c
 800d8be:	f000 f964 	bl	800db8a <memset>
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d8f8 <std+0x58>)
 800d8c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d8fc <std+0x5c>)
 800d8c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d900 <std+0x60>)
 800d8cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d904 <std+0x64>)
 800d8d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d908 <std+0x68>)
 800d8d4:	6224      	str	r4, [r4, #32]
 800d8d6:	429c      	cmp	r4, r3
 800d8d8:	d006      	beq.n	800d8e8 <std+0x48>
 800d8da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d8de:	4294      	cmp	r4, r2
 800d8e0:	d002      	beq.n	800d8e8 <std+0x48>
 800d8e2:	33d0      	adds	r3, #208	@ 0xd0
 800d8e4:	429c      	cmp	r4, r3
 800d8e6:	d105      	bne.n	800d8f4 <std+0x54>
 800d8e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f0:	f000 ba68 	b.w	800ddc4 <__retarget_lock_init_recursive>
 800d8f4:	bd10      	pop	{r4, pc}
 800d8f6:	bf00      	nop
 800d8f8:	0800dae1 	.word	0x0800dae1
 800d8fc:	0800db07 	.word	0x0800db07
 800d900:	0800db3f 	.word	0x0800db3f
 800d904:	0800db63 	.word	0x0800db63
 800d908:	200010c0 	.word	0x200010c0

0800d90c <stdio_exit_handler>:
 800d90c:	4a02      	ldr	r2, [pc, #8]	@ (800d918 <stdio_exit_handler+0xc>)
 800d90e:	4903      	ldr	r1, [pc, #12]	@ (800d91c <stdio_exit_handler+0x10>)
 800d910:	4803      	ldr	r0, [pc, #12]	@ (800d920 <stdio_exit_handler+0x14>)
 800d912:	f000 b869 	b.w	800d9e8 <_fwalk_sglue>
 800d916:	bf00      	nop
 800d918:	20000410 	.word	0x20000410
 800d91c:	0800ed2d 	.word	0x0800ed2d
 800d920:	20000420 	.word	0x20000420

0800d924 <cleanup_stdio>:
 800d924:	6841      	ldr	r1, [r0, #4]
 800d926:	4b0c      	ldr	r3, [pc, #48]	@ (800d958 <cleanup_stdio+0x34>)
 800d928:	4299      	cmp	r1, r3
 800d92a:	b510      	push	{r4, lr}
 800d92c:	4604      	mov	r4, r0
 800d92e:	d001      	beq.n	800d934 <cleanup_stdio+0x10>
 800d930:	f001 f9fc 	bl	800ed2c <_fflush_r>
 800d934:	68a1      	ldr	r1, [r4, #8]
 800d936:	4b09      	ldr	r3, [pc, #36]	@ (800d95c <cleanup_stdio+0x38>)
 800d938:	4299      	cmp	r1, r3
 800d93a:	d002      	beq.n	800d942 <cleanup_stdio+0x1e>
 800d93c:	4620      	mov	r0, r4
 800d93e:	f001 f9f5 	bl	800ed2c <_fflush_r>
 800d942:	68e1      	ldr	r1, [r4, #12]
 800d944:	4b06      	ldr	r3, [pc, #24]	@ (800d960 <cleanup_stdio+0x3c>)
 800d946:	4299      	cmp	r1, r3
 800d948:	d004      	beq.n	800d954 <cleanup_stdio+0x30>
 800d94a:	4620      	mov	r0, r4
 800d94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d950:	f001 b9ec 	b.w	800ed2c <_fflush_r>
 800d954:	bd10      	pop	{r4, pc}
 800d956:	bf00      	nop
 800d958:	200010c0 	.word	0x200010c0
 800d95c:	20001128 	.word	0x20001128
 800d960:	20001190 	.word	0x20001190

0800d964 <global_stdio_init.part.0>:
 800d964:	b510      	push	{r4, lr}
 800d966:	4b0b      	ldr	r3, [pc, #44]	@ (800d994 <global_stdio_init.part.0+0x30>)
 800d968:	4c0b      	ldr	r4, [pc, #44]	@ (800d998 <global_stdio_init.part.0+0x34>)
 800d96a:	4a0c      	ldr	r2, [pc, #48]	@ (800d99c <global_stdio_init.part.0+0x38>)
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	4620      	mov	r0, r4
 800d970:	2200      	movs	r2, #0
 800d972:	2104      	movs	r1, #4
 800d974:	f7ff ff94 	bl	800d8a0 <std>
 800d978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d97c:	2201      	movs	r2, #1
 800d97e:	2109      	movs	r1, #9
 800d980:	f7ff ff8e 	bl	800d8a0 <std>
 800d984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d988:	2202      	movs	r2, #2
 800d98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d98e:	2112      	movs	r1, #18
 800d990:	f7ff bf86 	b.w	800d8a0 <std>
 800d994:	200011f8 	.word	0x200011f8
 800d998:	200010c0 	.word	0x200010c0
 800d99c:	0800d90d 	.word	0x0800d90d

0800d9a0 <__sfp_lock_acquire>:
 800d9a0:	4801      	ldr	r0, [pc, #4]	@ (800d9a8 <__sfp_lock_acquire+0x8>)
 800d9a2:	f000 ba10 	b.w	800ddc6 <__retarget_lock_acquire_recursive>
 800d9a6:	bf00      	nop
 800d9a8:	20001201 	.word	0x20001201

0800d9ac <__sfp_lock_release>:
 800d9ac:	4801      	ldr	r0, [pc, #4]	@ (800d9b4 <__sfp_lock_release+0x8>)
 800d9ae:	f000 ba0b 	b.w	800ddc8 <__retarget_lock_release_recursive>
 800d9b2:	bf00      	nop
 800d9b4:	20001201 	.word	0x20001201

0800d9b8 <__sinit>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	f7ff fff0 	bl	800d9a0 <__sfp_lock_acquire>
 800d9c0:	6a23      	ldr	r3, [r4, #32]
 800d9c2:	b11b      	cbz	r3, 800d9cc <__sinit+0x14>
 800d9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c8:	f7ff bff0 	b.w	800d9ac <__sfp_lock_release>
 800d9cc:	4b04      	ldr	r3, [pc, #16]	@ (800d9e0 <__sinit+0x28>)
 800d9ce:	6223      	str	r3, [r4, #32]
 800d9d0:	4b04      	ldr	r3, [pc, #16]	@ (800d9e4 <__sinit+0x2c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1f5      	bne.n	800d9c4 <__sinit+0xc>
 800d9d8:	f7ff ffc4 	bl	800d964 <global_stdio_init.part.0>
 800d9dc:	e7f2      	b.n	800d9c4 <__sinit+0xc>
 800d9de:	bf00      	nop
 800d9e0:	0800d925 	.word	0x0800d925
 800d9e4:	200011f8 	.word	0x200011f8

0800d9e8 <_fwalk_sglue>:
 800d9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	4688      	mov	r8, r1
 800d9f0:	4614      	mov	r4, r2
 800d9f2:	2600      	movs	r6, #0
 800d9f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9f8:	f1b9 0901 	subs.w	r9, r9, #1
 800d9fc:	d505      	bpl.n	800da0a <_fwalk_sglue+0x22>
 800d9fe:	6824      	ldr	r4, [r4, #0]
 800da00:	2c00      	cmp	r4, #0
 800da02:	d1f7      	bne.n	800d9f4 <_fwalk_sglue+0xc>
 800da04:	4630      	mov	r0, r6
 800da06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da0a:	89ab      	ldrh	r3, [r5, #12]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d907      	bls.n	800da20 <_fwalk_sglue+0x38>
 800da10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da14:	3301      	adds	r3, #1
 800da16:	d003      	beq.n	800da20 <_fwalk_sglue+0x38>
 800da18:	4629      	mov	r1, r5
 800da1a:	4638      	mov	r0, r7
 800da1c:	47c0      	blx	r8
 800da1e:	4306      	orrs	r6, r0
 800da20:	3568      	adds	r5, #104	@ 0x68
 800da22:	e7e9      	b.n	800d9f8 <_fwalk_sglue+0x10>

0800da24 <sniprintf>:
 800da24:	b40c      	push	{r2, r3}
 800da26:	b530      	push	{r4, r5, lr}
 800da28:	4b17      	ldr	r3, [pc, #92]	@ (800da88 <sniprintf+0x64>)
 800da2a:	1e0c      	subs	r4, r1, #0
 800da2c:	681d      	ldr	r5, [r3, #0]
 800da2e:	b09d      	sub	sp, #116	@ 0x74
 800da30:	da08      	bge.n	800da44 <sniprintf+0x20>
 800da32:	238b      	movs	r3, #139	@ 0x8b
 800da34:	602b      	str	r3, [r5, #0]
 800da36:	f04f 30ff 	mov.w	r0, #4294967295
 800da3a:	b01d      	add	sp, #116	@ 0x74
 800da3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da40:	b002      	add	sp, #8
 800da42:	4770      	bx	lr
 800da44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da4c:	bf14      	ite	ne
 800da4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da52:	4623      	moveq	r3, r4
 800da54:	9304      	str	r3, [sp, #16]
 800da56:	9307      	str	r3, [sp, #28]
 800da58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da5c:	9002      	str	r0, [sp, #8]
 800da5e:	9006      	str	r0, [sp, #24]
 800da60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800da66:	ab21      	add	r3, sp, #132	@ 0x84
 800da68:	a902      	add	r1, sp, #8
 800da6a:	4628      	mov	r0, r5
 800da6c:	9301      	str	r3, [sp, #4]
 800da6e:	f000 fb35 	bl	800e0dc <_svfiprintf_r>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	bfbc      	itt	lt
 800da76:	238b      	movlt	r3, #139	@ 0x8b
 800da78:	602b      	strlt	r3, [r5, #0]
 800da7a:	2c00      	cmp	r4, #0
 800da7c:	d0dd      	beq.n	800da3a <sniprintf+0x16>
 800da7e:	9b02      	ldr	r3, [sp, #8]
 800da80:	2200      	movs	r2, #0
 800da82:	701a      	strb	r2, [r3, #0]
 800da84:	e7d9      	b.n	800da3a <sniprintf+0x16>
 800da86:	bf00      	nop
 800da88:	2000041c 	.word	0x2000041c

0800da8c <siscanf>:
 800da8c:	b40e      	push	{r1, r2, r3}
 800da8e:	b530      	push	{r4, r5, lr}
 800da90:	b09c      	sub	sp, #112	@ 0x70
 800da92:	ac1f      	add	r4, sp, #124	@ 0x7c
 800da94:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800da98:	f854 5b04 	ldr.w	r5, [r4], #4
 800da9c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800daa0:	9002      	str	r0, [sp, #8]
 800daa2:	9006      	str	r0, [sp, #24]
 800daa4:	f7f2 fb9e 	bl	80001e4 <strlen>
 800daa8:	4b0b      	ldr	r3, [pc, #44]	@ (800dad8 <siscanf+0x4c>)
 800daaa:	9003      	str	r0, [sp, #12]
 800daac:	9007      	str	r0, [sp, #28]
 800daae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dab0:	480a      	ldr	r0, [pc, #40]	@ (800dadc <siscanf+0x50>)
 800dab2:	9401      	str	r4, [sp, #4]
 800dab4:	2300      	movs	r3, #0
 800dab6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dab8:	9314      	str	r3, [sp, #80]	@ 0x50
 800daba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dabe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dac2:	462a      	mov	r2, r5
 800dac4:	4623      	mov	r3, r4
 800dac6:	a902      	add	r1, sp, #8
 800dac8:	6800      	ldr	r0, [r0, #0]
 800daca:	f000 fc5b 	bl	800e384 <__ssvfiscanf_r>
 800dace:	b01c      	add	sp, #112	@ 0x70
 800dad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dad4:	b003      	add	sp, #12
 800dad6:	4770      	bx	lr
 800dad8:	0800db03 	.word	0x0800db03
 800dadc:	2000041c 	.word	0x2000041c

0800dae0 <__sread>:
 800dae0:	b510      	push	{r4, lr}
 800dae2:	460c      	mov	r4, r1
 800dae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae8:	f000 f91e 	bl	800dd28 <_read_r>
 800daec:	2800      	cmp	r0, #0
 800daee:	bfab      	itete	ge
 800daf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800daf2:	89a3      	ldrhlt	r3, [r4, #12]
 800daf4:	181b      	addge	r3, r3, r0
 800daf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dafa:	bfac      	ite	ge
 800dafc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dafe:	81a3      	strhlt	r3, [r4, #12]
 800db00:	bd10      	pop	{r4, pc}

0800db02 <__seofread>:
 800db02:	2000      	movs	r0, #0
 800db04:	4770      	bx	lr

0800db06 <__swrite>:
 800db06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0a:	461f      	mov	r7, r3
 800db0c:	898b      	ldrh	r3, [r1, #12]
 800db0e:	05db      	lsls	r3, r3, #23
 800db10:	4605      	mov	r5, r0
 800db12:	460c      	mov	r4, r1
 800db14:	4616      	mov	r6, r2
 800db16:	d505      	bpl.n	800db24 <__swrite+0x1e>
 800db18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db1c:	2302      	movs	r3, #2
 800db1e:	2200      	movs	r2, #0
 800db20:	f000 f8f0 	bl	800dd04 <_lseek_r>
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db2e:	81a3      	strh	r3, [r4, #12]
 800db30:	4632      	mov	r2, r6
 800db32:	463b      	mov	r3, r7
 800db34:	4628      	mov	r0, r5
 800db36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db3a:	f000 b907 	b.w	800dd4c <_write_r>

0800db3e <__sseek>:
 800db3e:	b510      	push	{r4, lr}
 800db40:	460c      	mov	r4, r1
 800db42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db46:	f000 f8dd 	bl	800dd04 <_lseek_r>
 800db4a:	1c43      	adds	r3, r0, #1
 800db4c:	89a3      	ldrh	r3, [r4, #12]
 800db4e:	bf15      	itete	ne
 800db50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db5a:	81a3      	strheq	r3, [r4, #12]
 800db5c:	bf18      	it	ne
 800db5e:	81a3      	strhne	r3, [r4, #12]
 800db60:	bd10      	pop	{r4, pc}

0800db62 <__sclose>:
 800db62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db66:	f000 b8bd 	b.w	800dce4 <_close_r>

0800db6a <memcmp>:
 800db6a:	b510      	push	{r4, lr}
 800db6c:	3901      	subs	r1, #1
 800db6e:	4402      	add	r2, r0
 800db70:	4290      	cmp	r0, r2
 800db72:	d101      	bne.n	800db78 <memcmp+0xe>
 800db74:	2000      	movs	r0, #0
 800db76:	e005      	b.n	800db84 <memcmp+0x1a>
 800db78:	7803      	ldrb	r3, [r0, #0]
 800db7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db7e:	42a3      	cmp	r3, r4
 800db80:	d001      	beq.n	800db86 <memcmp+0x1c>
 800db82:	1b18      	subs	r0, r3, r4
 800db84:	bd10      	pop	{r4, pc}
 800db86:	3001      	adds	r0, #1
 800db88:	e7f2      	b.n	800db70 <memcmp+0x6>

0800db8a <memset>:
 800db8a:	4402      	add	r2, r0
 800db8c:	4603      	mov	r3, r0
 800db8e:	4293      	cmp	r3, r2
 800db90:	d100      	bne.n	800db94 <memset+0xa>
 800db92:	4770      	bx	lr
 800db94:	f803 1b01 	strb.w	r1, [r3], #1
 800db98:	e7f9      	b.n	800db8e <memset+0x4>

0800db9a <strchr>:
 800db9a:	b2c9      	uxtb	r1, r1
 800db9c:	4603      	mov	r3, r0
 800db9e:	4618      	mov	r0, r3
 800dba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dba4:	b112      	cbz	r2, 800dbac <strchr+0x12>
 800dba6:	428a      	cmp	r2, r1
 800dba8:	d1f9      	bne.n	800db9e <strchr+0x4>
 800dbaa:	4770      	bx	lr
 800dbac:	2900      	cmp	r1, #0
 800dbae:	bf18      	it	ne
 800dbb0:	2000      	movne	r0, #0
 800dbb2:	4770      	bx	lr

0800dbb4 <strncmp>:
 800dbb4:	b510      	push	{r4, lr}
 800dbb6:	b16a      	cbz	r2, 800dbd4 <strncmp+0x20>
 800dbb8:	3901      	subs	r1, #1
 800dbba:	1884      	adds	r4, r0, r2
 800dbbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d103      	bne.n	800dbd0 <strncmp+0x1c>
 800dbc8:	42a0      	cmp	r0, r4
 800dbca:	d001      	beq.n	800dbd0 <strncmp+0x1c>
 800dbcc:	2a00      	cmp	r2, #0
 800dbce:	d1f5      	bne.n	800dbbc <strncmp+0x8>
 800dbd0:	1ad0      	subs	r0, r2, r3
 800dbd2:	bd10      	pop	{r4, pc}
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	e7fc      	b.n	800dbd2 <strncmp+0x1e>

0800dbd8 <strncpy>:
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	3901      	subs	r1, #1
 800dbdc:	4603      	mov	r3, r0
 800dbde:	b132      	cbz	r2, 800dbee <strncpy+0x16>
 800dbe0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dbe4:	f803 4b01 	strb.w	r4, [r3], #1
 800dbe8:	3a01      	subs	r2, #1
 800dbea:	2c00      	cmp	r4, #0
 800dbec:	d1f7      	bne.n	800dbde <strncpy+0x6>
 800dbee:	441a      	add	r2, r3
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d100      	bne.n	800dbf8 <strncpy+0x20>
 800dbf6:	bd10      	pop	{r4, pc}
 800dbf8:	f803 1b01 	strb.w	r1, [r3], #1
 800dbfc:	e7f9      	b.n	800dbf2 <strncpy+0x1a>
	...

0800dc00 <strtok>:
 800dc00:	4b16      	ldr	r3, [pc, #88]	@ (800dc5c <strtok+0x5c>)
 800dc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc06:	681f      	ldr	r7, [r3, #0]
 800dc08:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	460e      	mov	r6, r1
 800dc0e:	b9ec      	cbnz	r4, 800dc4c <strtok+0x4c>
 800dc10:	2050      	movs	r0, #80	@ 0x50
 800dc12:	f000 f951 	bl	800deb8 <malloc>
 800dc16:	4602      	mov	r2, r0
 800dc18:	6478      	str	r0, [r7, #68]	@ 0x44
 800dc1a:	b920      	cbnz	r0, 800dc26 <strtok+0x26>
 800dc1c:	4b10      	ldr	r3, [pc, #64]	@ (800dc60 <strtok+0x60>)
 800dc1e:	4811      	ldr	r0, [pc, #68]	@ (800dc64 <strtok+0x64>)
 800dc20:	215b      	movs	r1, #91	@ 0x5b
 800dc22:	f000 f8e1 	bl	800dde8 <__assert_func>
 800dc26:	e9c0 4400 	strd	r4, r4, [r0]
 800dc2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dc2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dc32:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dc36:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dc3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dc3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dc42:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dc46:	6184      	str	r4, [r0, #24]
 800dc48:	7704      	strb	r4, [r0, #28]
 800dc4a:	6244      	str	r4, [r0, #36]	@ 0x24
 800dc4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc4e:	4631      	mov	r1, r6
 800dc50:	4628      	mov	r0, r5
 800dc52:	2301      	movs	r3, #1
 800dc54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc58:	f000 b806 	b.w	800dc68 <__strtok_r>
 800dc5c:	2000041c 	.word	0x2000041c
 800dc60:	080115e9 	.word	0x080115e9
 800dc64:	08011600 	.word	0x08011600

0800dc68 <__strtok_r>:
 800dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	b908      	cbnz	r0, 800dc72 <__strtok_r+0xa>
 800dc6e:	6814      	ldr	r4, [r2, #0]
 800dc70:	b144      	cbz	r4, 800dc84 <__strtok_r+0x1c>
 800dc72:	4620      	mov	r0, r4
 800dc74:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dc78:	460f      	mov	r7, r1
 800dc7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dc7e:	b91e      	cbnz	r6, 800dc88 <__strtok_r+0x20>
 800dc80:	b965      	cbnz	r5, 800dc9c <__strtok_r+0x34>
 800dc82:	6015      	str	r5, [r2, #0]
 800dc84:	2000      	movs	r0, #0
 800dc86:	e005      	b.n	800dc94 <__strtok_r+0x2c>
 800dc88:	42b5      	cmp	r5, r6
 800dc8a:	d1f6      	bne.n	800dc7a <__strtok_r+0x12>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1f0      	bne.n	800dc72 <__strtok_r+0xa>
 800dc90:	6014      	str	r4, [r2, #0]
 800dc92:	7003      	strb	r3, [r0, #0]
 800dc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc96:	461c      	mov	r4, r3
 800dc98:	e00c      	b.n	800dcb4 <__strtok_r+0x4c>
 800dc9a:	b915      	cbnz	r5, 800dca2 <__strtok_r+0x3a>
 800dc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dca0:	460e      	mov	r6, r1
 800dca2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dca6:	42ab      	cmp	r3, r5
 800dca8:	d1f7      	bne.n	800dc9a <__strtok_r+0x32>
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d0f3      	beq.n	800dc96 <__strtok_r+0x2e>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dcb4:	6014      	str	r4, [r2, #0]
 800dcb6:	e7ed      	b.n	800dc94 <__strtok_r+0x2c>

0800dcb8 <strstr>:
 800dcb8:	780a      	ldrb	r2, [r1, #0]
 800dcba:	b570      	push	{r4, r5, r6, lr}
 800dcbc:	b96a      	cbnz	r2, 800dcda <strstr+0x22>
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d109      	bne.n	800dcd8 <strstr+0x20>
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	4605      	mov	r5, r0
 800dcc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0f6      	beq.n	800dcbe <strstr+0x6>
 800dcd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dcd4:	429e      	cmp	r6, r3
 800dcd6:	d0f7      	beq.n	800dcc8 <strstr+0x10>
 800dcd8:	3001      	adds	r0, #1
 800dcda:	7803      	ldrb	r3, [r0, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1ef      	bne.n	800dcc0 <strstr+0x8>
 800dce0:	4618      	mov	r0, r3
 800dce2:	e7ec      	b.n	800dcbe <strstr+0x6>

0800dce4 <_close_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4d06      	ldr	r5, [pc, #24]	@ (800dd00 <_close_r+0x1c>)
 800dce8:	2300      	movs	r3, #0
 800dcea:	4604      	mov	r4, r0
 800dcec:	4608      	mov	r0, r1
 800dcee:	602b      	str	r3, [r5, #0]
 800dcf0:	f7f7 fc62 	bl	80055b8 <_close>
 800dcf4:	1c43      	adds	r3, r0, #1
 800dcf6:	d102      	bne.n	800dcfe <_close_r+0x1a>
 800dcf8:	682b      	ldr	r3, [r5, #0]
 800dcfa:	b103      	cbz	r3, 800dcfe <_close_r+0x1a>
 800dcfc:	6023      	str	r3, [r4, #0]
 800dcfe:	bd38      	pop	{r3, r4, r5, pc}
 800dd00:	200011fc 	.word	0x200011fc

0800dd04 <_lseek_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4d07      	ldr	r5, [pc, #28]	@ (800dd24 <_lseek_r+0x20>)
 800dd08:	4604      	mov	r4, r0
 800dd0a:	4608      	mov	r0, r1
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	2200      	movs	r2, #0
 800dd10:	602a      	str	r2, [r5, #0]
 800dd12:	461a      	mov	r2, r3
 800dd14:	f7f7 fc77 	bl	8005606 <_lseek>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_lseek_r+0x1e>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_lseek_r+0x1e>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	200011fc 	.word	0x200011fc

0800dd28 <_read_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	4d07      	ldr	r5, [pc, #28]	@ (800dd48 <_read_r+0x20>)
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	4608      	mov	r0, r1
 800dd30:	4611      	mov	r1, r2
 800dd32:	2200      	movs	r2, #0
 800dd34:	602a      	str	r2, [r5, #0]
 800dd36:	461a      	mov	r2, r3
 800dd38:	f7f7 fc05 	bl	8005546 <_read>
 800dd3c:	1c43      	adds	r3, r0, #1
 800dd3e:	d102      	bne.n	800dd46 <_read_r+0x1e>
 800dd40:	682b      	ldr	r3, [r5, #0]
 800dd42:	b103      	cbz	r3, 800dd46 <_read_r+0x1e>
 800dd44:	6023      	str	r3, [r4, #0]
 800dd46:	bd38      	pop	{r3, r4, r5, pc}
 800dd48:	200011fc 	.word	0x200011fc

0800dd4c <_write_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d07      	ldr	r5, [pc, #28]	@ (800dd6c <_write_r+0x20>)
 800dd50:	4604      	mov	r4, r0
 800dd52:	4608      	mov	r0, r1
 800dd54:	4611      	mov	r1, r2
 800dd56:	2200      	movs	r2, #0
 800dd58:	602a      	str	r2, [r5, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	f7f7 fc10 	bl	8005580 <_write>
 800dd60:	1c43      	adds	r3, r0, #1
 800dd62:	d102      	bne.n	800dd6a <_write_r+0x1e>
 800dd64:	682b      	ldr	r3, [r5, #0]
 800dd66:	b103      	cbz	r3, 800dd6a <_write_r+0x1e>
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	bd38      	pop	{r3, r4, r5, pc}
 800dd6c:	200011fc 	.word	0x200011fc

0800dd70 <__errno>:
 800dd70:	4b01      	ldr	r3, [pc, #4]	@ (800dd78 <__errno+0x8>)
 800dd72:	6818      	ldr	r0, [r3, #0]
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	2000041c 	.word	0x2000041c

0800dd7c <__libc_init_array>:
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	4d0d      	ldr	r5, [pc, #52]	@ (800ddb4 <__libc_init_array+0x38>)
 800dd80:	4c0d      	ldr	r4, [pc, #52]	@ (800ddb8 <__libc_init_array+0x3c>)
 800dd82:	1b64      	subs	r4, r4, r5
 800dd84:	10a4      	asrs	r4, r4, #2
 800dd86:	2600      	movs	r6, #0
 800dd88:	42a6      	cmp	r6, r4
 800dd8a:	d109      	bne.n	800dda0 <__libc_init_array+0x24>
 800dd8c:	4d0b      	ldr	r5, [pc, #44]	@ (800ddbc <__libc_init_array+0x40>)
 800dd8e:	4c0c      	ldr	r4, [pc, #48]	@ (800ddc0 <__libc_init_array+0x44>)
 800dd90:	f001 fbf0 	bl	800f574 <_init>
 800dd94:	1b64      	subs	r4, r4, r5
 800dd96:	10a4      	asrs	r4, r4, #2
 800dd98:	2600      	movs	r6, #0
 800dd9a:	42a6      	cmp	r6, r4
 800dd9c:	d105      	bne.n	800ddaa <__libc_init_array+0x2e>
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}
 800dda0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda4:	4798      	blx	r3
 800dda6:	3601      	adds	r6, #1
 800dda8:	e7ee      	b.n	800dd88 <__libc_init_array+0xc>
 800ddaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddae:	4798      	blx	r3
 800ddb0:	3601      	adds	r6, #1
 800ddb2:	e7f2      	b.n	800dd9a <__libc_init_array+0x1e>
 800ddb4:	080116ec 	.word	0x080116ec
 800ddb8:	080116ec 	.word	0x080116ec
 800ddbc:	080116ec 	.word	0x080116ec
 800ddc0:	080116f0 	.word	0x080116f0

0800ddc4 <__retarget_lock_init_recursive>:
 800ddc4:	4770      	bx	lr

0800ddc6 <__retarget_lock_acquire_recursive>:
 800ddc6:	4770      	bx	lr

0800ddc8 <__retarget_lock_release_recursive>:
 800ddc8:	4770      	bx	lr

0800ddca <memcpy>:
 800ddca:	440a      	add	r2, r1
 800ddcc:	4291      	cmp	r1, r2
 800ddce:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddd2:	d100      	bne.n	800ddd6 <memcpy+0xc>
 800ddd4:	4770      	bx	lr
 800ddd6:	b510      	push	{r4, lr}
 800ddd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dde0:	4291      	cmp	r1, r2
 800dde2:	d1f9      	bne.n	800ddd8 <memcpy+0xe>
 800dde4:	bd10      	pop	{r4, pc}
	...

0800dde8 <__assert_func>:
 800dde8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddea:	4614      	mov	r4, r2
 800ddec:	461a      	mov	r2, r3
 800ddee:	4b09      	ldr	r3, [pc, #36]	@ (800de14 <__assert_func+0x2c>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	68d8      	ldr	r0, [r3, #12]
 800ddf6:	b954      	cbnz	r4, 800de0e <__assert_func+0x26>
 800ddf8:	4b07      	ldr	r3, [pc, #28]	@ (800de18 <__assert_func+0x30>)
 800ddfa:	461c      	mov	r4, r3
 800ddfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de00:	9100      	str	r1, [sp, #0]
 800de02:	462b      	mov	r3, r5
 800de04:	4905      	ldr	r1, [pc, #20]	@ (800de1c <__assert_func+0x34>)
 800de06:	f000 ffb9 	bl	800ed7c <fiprintf>
 800de0a:	f001 f867 	bl	800eedc <abort>
 800de0e:	4b04      	ldr	r3, [pc, #16]	@ (800de20 <__assert_func+0x38>)
 800de10:	e7f4      	b.n	800ddfc <__assert_func+0x14>
 800de12:	bf00      	nop
 800de14:	2000041c 	.word	0x2000041c
 800de18:	08011695 	.word	0x08011695
 800de1c:	08011667 	.word	0x08011667
 800de20:	0801165a 	.word	0x0801165a

0800de24 <_free_r>:
 800de24:	b538      	push	{r3, r4, r5, lr}
 800de26:	4605      	mov	r5, r0
 800de28:	2900      	cmp	r1, #0
 800de2a:	d041      	beq.n	800deb0 <_free_r+0x8c>
 800de2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de30:	1f0c      	subs	r4, r1, #4
 800de32:	2b00      	cmp	r3, #0
 800de34:	bfb8      	it	lt
 800de36:	18e4      	addlt	r4, r4, r3
 800de38:	f000 f8e8 	bl	800e00c <__malloc_lock>
 800de3c:	4a1d      	ldr	r2, [pc, #116]	@ (800deb4 <_free_r+0x90>)
 800de3e:	6813      	ldr	r3, [r2, #0]
 800de40:	b933      	cbnz	r3, 800de50 <_free_r+0x2c>
 800de42:	6063      	str	r3, [r4, #4]
 800de44:	6014      	str	r4, [r2, #0]
 800de46:	4628      	mov	r0, r5
 800de48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de4c:	f000 b8e4 	b.w	800e018 <__malloc_unlock>
 800de50:	42a3      	cmp	r3, r4
 800de52:	d908      	bls.n	800de66 <_free_r+0x42>
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	1821      	adds	r1, r4, r0
 800de58:	428b      	cmp	r3, r1
 800de5a:	bf01      	itttt	eq
 800de5c:	6819      	ldreq	r1, [r3, #0]
 800de5e:	685b      	ldreq	r3, [r3, #4]
 800de60:	1809      	addeq	r1, r1, r0
 800de62:	6021      	streq	r1, [r4, #0]
 800de64:	e7ed      	b.n	800de42 <_free_r+0x1e>
 800de66:	461a      	mov	r2, r3
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	b10b      	cbz	r3, 800de70 <_free_r+0x4c>
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	d9fa      	bls.n	800de66 <_free_r+0x42>
 800de70:	6811      	ldr	r1, [r2, #0]
 800de72:	1850      	adds	r0, r2, r1
 800de74:	42a0      	cmp	r0, r4
 800de76:	d10b      	bne.n	800de90 <_free_r+0x6c>
 800de78:	6820      	ldr	r0, [r4, #0]
 800de7a:	4401      	add	r1, r0
 800de7c:	1850      	adds	r0, r2, r1
 800de7e:	4283      	cmp	r3, r0
 800de80:	6011      	str	r1, [r2, #0]
 800de82:	d1e0      	bne.n	800de46 <_free_r+0x22>
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	6053      	str	r3, [r2, #4]
 800de8a:	4408      	add	r0, r1
 800de8c:	6010      	str	r0, [r2, #0]
 800de8e:	e7da      	b.n	800de46 <_free_r+0x22>
 800de90:	d902      	bls.n	800de98 <_free_r+0x74>
 800de92:	230c      	movs	r3, #12
 800de94:	602b      	str	r3, [r5, #0]
 800de96:	e7d6      	b.n	800de46 <_free_r+0x22>
 800de98:	6820      	ldr	r0, [r4, #0]
 800de9a:	1821      	adds	r1, r4, r0
 800de9c:	428b      	cmp	r3, r1
 800de9e:	bf04      	itt	eq
 800dea0:	6819      	ldreq	r1, [r3, #0]
 800dea2:	685b      	ldreq	r3, [r3, #4]
 800dea4:	6063      	str	r3, [r4, #4]
 800dea6:	bf04      	itt	eq
 800dea8:	1809      	addeq	r1, r1, r0
 800deaa:	6021      	streq	r1, [r4, #0]
 800deac:	6054      	str	r4, [r2, #4]
 800deae:	e7ca      	b.n	800de46 <_free_r+0x22>
 800deb0:	bd38      	pop	{r3, r4, r5, pc}
 800deb2:	bf00      	nop
 800deb4:	20001208 	.word	0x20001208

0800deb8 <malloc>:
 800deb8:	4b02      	ldr	r3, [pc, #8]	@ (800dec4 <malloc+0xc>)
 800deba:	4601      	mov	r1, r0
 800debc:	6818      	ldr	r0, [r3, #0]
 800debe:	f000 b825 	b.w	800df0c <_malloc_r>
 800dec2:	bf00      	nop
 800dec4:	2000041c 	.word	0x2000041c

0800dec8 <sbrk_aligned>:
 800dec8:	b570      	push	{r4, r5, r6, lr}
 800deca:	4e0f      	ldr	r6, [pc, #60]	@ (800df08 <sbrk_aligned+0x40>)
 800decc:	460c      	mov	r4, r1
 800dece:	6831      	ldr	r1, [r6, #0]
 800ded0:	4605      	mov	r5, r0
 800ded2:	b911      	cbnz	r1, 800deda <sbrk_aligned+0x12>
 800ded4:	f000 fff2 	bl	800eebc <_sbrk_r>
 800ded8:	6030      	str	r0, [r6, #0]
 800deda:	4621      	mov	r1, r4
 800dedc:	4628      	mov	r0, r5
 800dede:	f000 ffed 	bl	800eebc <_sbrk_r>
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	d103      	bne.n	800deee <sbrk_aligned+0x26>
 800dee6:	f04f 34ff 	mov.w	r4, #4294967295
 800deea:	4620      	mov	r0, r4
 800deec:	bd70      	pop	{r4, r5, r6, pc}
 800deee:	1cc4      	adds	r4, r0, #3
 800def0:	f024 0403 	bic.w	r4, r4, #3
 800def4:	42a0      	cmp	r0, r4
 800def6:	d0f8      	beq.n	800deea <sbrk_aligned+0x22>
 800def8:	1a21      	subs	r1, r4, r0
 800defa:	4628      	mov	r0, r5
 800defc:	f000 ffde 	bl	800eebc <_sbrk_r>
 800df00:	3001      	adds	r0, #1
 800df02:	d1f2      	bne.n	800deea <sbrk_aligned+0x22>
 800df04:	e7ef      	b.n	800dee6 <sbrk_aligned+0x1e>
 800df06:	bf00      	nop
 800df08:	20001204 	.word	0x20001204

0800df0c <_malloc_r>:
 800df0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df10:	1ccd      	adds	r5, r1, #3
 800df12:	f025 0503 	bic.w	r5, r5, #3
 800df16:	3508      	adds	r5, #8
 800df18:	2d0c      	cmp	r5, #12
 800df1a:	bf38      	it	cc
 800df1c:	250c      	movcc	r5, #12
 800df1e:	2d00      	cmp	r5, #0
 800df20:	4606      	mov	r6, r0
 800df22:	db01      	blt.n	800df28 <_malloc_r+0x1c>
 800df24:	42a9      	cmp	r1, r5
 800df26:	d904      	bls.n	800df32 <_malloc_r+0x26>
 800df28:	230c      	movs	r3, #12
 800df2a:	6033      	str	r3, [r6, #0]
 800df2c:	2000      	movs	r0, #0
 800df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e008 <_malloc_r+0xfc>
 800df36:	f000 f869 	bl	800e00c <__malloc_lock>
 800df3a:	f8d8 3000 	ldr.w	r3, [r8]
 800df3e:	461c      	mov	r4, r3
 800df40:	bb44      	cbnz	r4, 800df94 <_malloc_r+0x88>
 800df42:	4629      	mov	r1, r5
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff ffbf 	bl	800dec8 <sbrk_aligned>
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	4604      	mov	r4, r0
 800df4e:	d158      	bne.n	800e002 <_malloc_r+0xf6>
 800df50:	f8d8 4000 	ldr.w	r4, [r8]
 800df54:	4627      	mov	r7, r4
 800df56:	2f00      	cmp	r7, #0
 800df58:	d143      	bne.n	800dfe2 <_malloc_r+0xd6>
 800df5a:	2c00      	cmp	r4, #0
 800df5c:	d04b      	beq.n	800dff6 <_malloc_r+0xea>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	4639      	mov	r1, r7
 800df62:	4630      	mov	r0, r6
 800df64:	eb04 0903 	add.w	r9, r4, r3
 800df68:	f000 ffa8 	bl	800eebc <_sbrk_r>
 800df6c:	4581      	cmp	r9, r0
 800df6e:	d142      	bne.n	800dff6 <_malloc_r+0xea>
 800df70:	6821      	ldr	r1, [r4, #0]
 800df72:	1a6d      	subs	r5, r5, r1
 800df74:	4629      	mov	r1, r5
 800df76:	4630      	mov	r0, r6
 800df78:	f7ff ffa6 	bl	800dec8 <sbrk_aligned>
 800df7c:	3001      	adds	r0, #1
 800df7e:	d03a      	beq.n	800dff6 <_malloc_r+0xea>
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	442b      	add	r3, r5
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	f8d8 3000 	ldr.w	r3, [r8]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	bb62      	cbnz	r2, 800dfe8 <_malloc_r+0xdc>
 800df8e:	f8c8 7000 	str.w	r7, [r8]
 800df92:	e00f      	b.n	800dfb4 <_malloc_r+0xa8>
 800df94:	6822      	ldr	r2, [r4, #0]
 800df96:	1b52      	subs	r2, r2, r5
 800df98:	d420      	bmi.n	800dfdc <_malloc_r+0xd0>
 800df9a:	2a0b      	cmp	r2, #11
 800df9c:	d917      	bls.n	800dfce <_malloc_r+0xc2>
 800df9e:	1961      	adds	r1, r4, r5
 800dfa0:	42a3      	cmp	r3, r4
 800dfa2:	6025      	str	r5, [r4, #0]
 800dfa4:	bf18      	it	ne
 800dfa6:	6059      	strne	r1, [r3, #4]
 800dfa8:	6863      	ldr	r3, [r4, #4]
 800dfaa:	bf08      	it	eq
 800dfac:	f8c8 1000 	streq.w	r1, [r8]
 800dfb0:	5162      	str	r2, [r4, r5]
 800dfb2:	604b      	str	r3, [r1, #4]
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f000 f82f 	bl	800e018 <__malloc_unlock>
 800dfba:	f104 000b 	add.w	r0, r4, #11
 800dfbe:	1d23      	adds	r3, r4, #4
 800dfc0:	f020 0007 	bic.w	r0, r0, #7
 800dfc4:	1ac2      	subs	r2, r0, r3
 800dfc6:	bf1c      	itt	ne
 800dfc8:	1a1b      	subne	r3, r3, r0
 800dfca:	50a3      	strne	r3, [r4, r2]
 800dfcc:	e7af      	b.n	800df2e <_malloc_r+0x22>
 800dfce:	6862      	ldr	r2, [r4, #4]
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	bf0c      	ite	eq
 800dfd4:	f8c8 2000 	streq.w	r2, [r8]
 800dfd8:	605a      	strne	r2, [r3, #4]
 800dfda:	e7eb      	b.n	800dfb4 <_malloc_r+0xa8>
 800dfdc:	4623      	mov	r3, r4
 800dfde:	6864      	ldr	r4, [r4, #4]
 800dfe0:	e7ae      	b.n	800df40 <_malloc_r+0x34>
 800dfe2:	463c      	mov	r4, r7
 800dfe4:	687f      	ldr	r7, [r7, #4]
 800dfe6:	e7b6      	b.n	800df56 <_malloc_r+0x4a>
 800dfe8:	461a      	mov	r2, r3
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	42a3      	cmp	r3, r4
 800dfee:	d1fb      	bne.n	800dfe8 <_malloc_r+0xdc>
 800dff0:	2300      	movs	r3, #0
 800dff2:	6053      	str	r3, [r2, #4]
 800dff4:	e7de      	b.n	800dfb4 <_malloc_r+0xa8>
 800dff6:	230c      	movs	r3, #12
 800dff8:	6033      	str	r3, [r6, #0]
 800dffa:	4630      	mov	r0, r6
 800dffc:	f000 f80c 	bl	800e018 <__malloc_unlock>
 800e000:	e794      	b.n	800df2c <_malloc_r+0x20>
 800e002:	6005      	str	r5, [r0, #0]
 800e004:	e7d6      	b.n	800dfb4 <_malloc_r+0xa8>
 800e006:	bf00      	nop
 800e008:	20001208 	.word	0x20001208

0800e00c <__malloc_lock>:
 800e00c:	4801      	ldr	r0, [pc, #4]	@ (800e014 <__malloc_lock+0x8>)
 800e00e:	f7ff beda 	b.w	800ddc6 <__retarget_lock_acquire_recursive>
 800e012:	bf00      	nop
 800e014:	20001200 	.word	0x20001200

0800e018 <__malloc_unlock>:
 800e018:	4801      	ldr	r0, [pc, #4]	@ (800e020 <__malloc_unlock+0x8>)
 800e01a:	f7ff bed5 	b.w	800ddc8 <__retarget_lock_release_recursive>
 800e01e:	bf00      	nop
 800e020:	20001200 	.word	0x20001200

0800e024 <__ssputs_r>:
 800e024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e028:	688e      	ldr	r6, [r1, #8]
 800e02a:	461f      	mov	r7, r3
 800e02c:	42be      	cmp	r6, r7
 800e02e:	680b      	ldr	r3, [r1, #0]
 800e030:	4682      	mov	sl, r0
 800e032:	460c      	mov	r4, r1
 800e034:	4690      	mov	r8, r2
 800e036:	d82d      	bhi.n	800e094 <__ssputs_r+0x70>
 800e038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e03c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e040:	d026      	beq.n	800e090 <__ssputs_r+0x6c>
 800e042:	6965      	ldr	r5, [r4, #20]
 800e044:	6909      	ldr	r1, [r1, #16]
 800e046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e04a:	eba3 0901 	sub.w	r9, r3, r1
 800e04e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e052:	1c7b      	adds	r3, r7, #1
 800e054:	444b      	add	r3, r9
 800e056:	106d      	asrs	r5, r5, #1
 800e058:	429d      	cmp	r5, r3
 800e05a:	bf38      	it	cc
 800e05c:	461d      	movcc	r5, r3
 800e05e:	0553      	lsls	r3, r2, #21
 800e060:	d527      	bpl.n	800e0b2 <__ssputs_r+0x8e>
 800e062:	4629      	mov	r1, r5
 800e064:	f7ff ff52 	bl	800df0c <_malloc_r>
 800e068:	4606      	mov	r6, r0
 800e06a:	b360      	cbz	r0, 800e0c6 <__ssputs_r+0xa2>
 800e06c:	6921      	ldr	r1, [r4, #16]
 800e06e:	464a      	mov	r2, r9
 800e070:	f7ff feab 	bl	800ddca <memcpy>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	6126      	str	r6, [r4, #16]
 800e082:	6165      	str	r5, [r4, #20]
 800e084:	444e      	add	r6, r9
 800e086:	eba5 0509 	sub.w	r5, r5, r9
 800e08a:	6026      	str	r6, [r4, #0]
 800e08c:	60a5      	str	r5, [r4, #8]
 800e08e:	463e      	mov	r6, r7
 800e090:	42be      	cmp	r6, r7
 800e092:	d900      	bls.n	800e096 <__ssputs_r+0x72>
 800e094:	463e      	mov	r6, r7
 800e096:	6820      	ldr	r0, [r4, #0]
 800e098:	4632      	mov	r2, r6
 800e09a:	4641      	mov	r1, r8
 800e09c:	f000 fef3 	bl	800ee86 <memmove>
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	1b9b      	subs	r3, r3, r6
 800e0a4:	60a3      	str	r3, [r4, #8]
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	4433      	add	r3, r6
 800e0aa:	6023      	str	r3, [r4, #0]
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0b2:	462a      	mov	r2, r5
 800e0b4:	f000 ff19 	bl	800eeea <_realloc_r>
 800e0b8:	4606      	mov	r6, r0
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d1e0      	bne.n	800e080 <__ssputs_r+0x5c>
 800e0be:	6921      	ldr	r1, [r4, #16]
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	f7ff feaf 	bl	800de24 <_free_r>
 800e0c6:	230c      	movs	r3, #12
 800e0c8:	f8ca 3000 	str.w	r3, [sl]
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d8:	e7e9      	b.n	800e0ae <__ssputs_r+0x8a>
	...

0800e0dc <_svfiprintf_r>:
 800e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e0:	4698      	mov	r8, r3
 800e0e2:	898b      	ldrh	r3, [r1, #12]
 800e0e4:	061b      	lsls	r3, r3, #24
 800e0e6:	b09d      	sub	sp, #116	@ 0x74
 800e0e8:	4607      	mov	r7, r0
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	4614      	mov	r4, r2
 800e0ee:	d510      	bpl.n	800e112 <_svfiprintf_r+0x36>
 800e0f0:	690b      	ldr	r3, [r1, #16]
 800e0f2:	b973      	cbnz	r3, 800e112 <_svfiprintf_r+0x36>
 800e0f4:	2140      	movs	r1, #64	@ 0x40
 800e0f6:	f7ff ff09 	bl	800df0c <_malloc_r>
 800e0fa:	6028      	str	r0, [r5, #0]
 800e0fc:	6128      	str	r0, [r5, #16]
 800e0fe:	b930      	cbnz	r0, 800e10e <_svfiprintf_r+0x32>
 800e100:	230c      	movs	r3, #12
 800e102:	603b      	str	r3, [r7, #0]
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	b01d      	add	sp, #116	@ 0x74
 800e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10e:	2340      	movs	r3, #64	@ 0x40
 800e110:	616b      	str	r3, [r5, #20]
 800e112:	2300      	movs	r3, #0
 800e114:	9309      	str	r3, [sp, #36]	@ 0x24
 800e116:	2320      	movs	r3, #32
 800e118:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e120:	2330      	movs	r3, #48	@ 0x30
 800e122:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e2c0 <_svfiprintf_r+0x1e4>
 800e126:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e12a:	f04f 0901 	mov.w	r9, #1
 800e12e:	4623      	mov	r3, r4
 800e130:	469a      	mov	sl, r3
 800e132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e136:	b10a      	cbz	r2, 800e13c <_svfiprintf_r+0x60>
 800e138:	2a25      	cmp	r2, #37	@ 0x25
 800e13a:	d1f9      	bne.n	800e130 <_svfiprintf_r+0x54>
 800e13c:	ebba 0b04 	subs.w	fp, sl, r4
 800e140:	d00b      	beq.n	800e15a <_svfiprintf_r+0x7e>
 800e142:	465b      	mov	r3, fp
 800e144:	4622      	mov	r2, r4
 800e146:	4629      	mov	r1, r5
 800e148:	4638      	mov	r0, r7
 800e14a:	f7ff ff6b 	bl	800e024 <__ssputs_r>
 800e14e:	3001      	adds	r0, #1
 800e150:	f000 80a7 	beq.w	800e2a2 <_svfiprintf_r+0x1c6>
 800e154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e156:	445a      	add	r2, fp
 800e158:	9209      	str	r2, [sp, #36]	@ 0x24
 800e15a:	f89a 3000 	ldrb.w	r3, [sl]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 809f 	beq.w	800e2a2 <_svfiprintf_r+0x1c6>
 800e164:	2300      	movs	r3, #0
 800e166:	f04f 32ff 	mov.w	r2, #4294967295
 800e16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16e:	f10a 0a01 	add.w	sl, sl, #1
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	9307      	str	r3, [sp, #28]
 800e176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e17a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e17c:	4654      	mov	r4, sl
 800e17e:	2205      	movs	r2, #5
 800e180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e184:	484e      	ldr	r0, [pc, #312]	@ (800e2c0 <_svfiprintf_r+0x1e4>)
 800e186:	f7f2 f83b 	bl	8000200 <memchr>
 800e18a:	9a04      	ldr	r2, [sp, #16]
 800e18c:	b9d8      	cbnz	r0, 800e1c6 <_svfiprintf_r+0xea>
 800e18e:	06d0      	lsls	r0, r2, #27
 800e190:	bf44      	itt	mi
 800e192:	2320      	movmi	r3, #32
 800e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e198:	0711      	lsls	r1, r2, #28
 800e19a:	bf44      	itt	mi
 800e19c:	232b      	movmi	r3, #43	@ 0x2b
 800e19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1a8:	d015      	beq.n	800e1d6 <_svfiprintf_r+0xfa>
 800e1aa:	9a07      	ldr	r2, [sp, #28]
 800e1ac:	4654      	mov	r4, sl
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f04f 0c0a 	mov.w	ip, #10
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1ba:	3b30      	subs	r3, #48	@ 0x30
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d94b      	bls.n	800e258 <_svfiprintf_r+0x17c>
 800e1c0:	b1b0      	cbz	r0, 800e1f0 <_svfiprintf_r+0x114>
 800e1c2:	9207      	str	r2, [sp, #28]
 800e1c4:	e014      	b.n	800e1f0 <_svfiprintf_r+0x114>
 800e1c6:	eba0 0308 	sub.w	r3, r0, r8
 800e1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	46a2      	mov	sl, r4
 800e1d4:	e7d2      	b.n	800e17c <_svfiprintf_r+0xa0>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	1d19      	adds	r1, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9103      	str	r1, [sp, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	bfbb      	ittet	lt
 800e1e2:	425b      	neglt	r3, r3
 800e1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e8:	9307      	strge	r3, [sp, #28]
 800e1ea:	9307      	strlt	r3, [sp, #28]
 800e1ec:	bfb8      	it	lt
 800e1ee:	9204      	strlt	r2, [sp, #16]
 800e1f0:	7823      	ldrb	r3, [r4, #0]
 800e1f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1f4:	d10a      	bne.n	800e20c <_svfiprintf_r+0x130>
 800e1f6:	7863      	ldrb	r3, [r4, #1]
 800e1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1fa:	d132      	bne.n	800e262 <_svfiprintf_r+0x186>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1d1a      	adds	r2, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9203      	str	r2, [sp, #12]
 800e204:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e208:	3402      	adds	r4, #2
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2d0 <_svfiprintf_r+0x1f4>
 800e210:	7821      	ldrb	r1, [r4, #0]
 800e212:	2203      	movs	r2, #3
 800e214:	4650      	mov	r0, sl
 800e216:	f7f1 fff3 	bl	8000200 <memchr>
 800e21a:	b138      	cbz	r0, 800e22c <_svfiprintf_r+0x150>
 800e21c:	9b04      	ldr	r3, [sp, #16]
 800e21e:	eba0 000a 	sub.w	r0, r0, sl
 800e222:	2240      	movs	r2, #64	@ 0x40
 800e224:	4082      	lsls	r2, r0
 800e226:	4313      	orrs	r3, r2
 800e228:	3401      	adds	r4, #1
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e230:	4824      	ldr	r0, [pc, #144]	@ (800e2c4 <_svfiprintf_r+0x1e8>)
 800e232:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e236:	2206      	movs	r2, #6
 800e238:	f7f1 ffe2 	bl	8000200 <memchr>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d036      	beq.n	800e2ae <_svfiprintf_r+0x1d2>
 800e240:	4b21      	ldr	r3, [pc, #132]	@ (800e2c8 <_svfiprintf_r+0x1ec>)
 800e242:	bb1b      	cbnz	r3, 800e28c <_svfiprintf_r+0x1b0>
 800e244:	9b03      	ldr	r3, [sp, #12]
 800e246:	3307      	adds	r3, #7
 800e248:	f023 0307 	bic.w	r3, r3, #7
 800e24c:	3308      	adds	r3, #8
 800e24e:	9303      	str	r3, [sp, #12]
 800e250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e252:	4433      	add	r3, r6
 800e254:	9309      	str	r3, [sp, #36]	@ 0x24
 800e256:	e76a      	b.n	800e12e <_svfiprintf_r+0x52>
 800e258:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25c:	460c      	mov	r4, r1
 800e25e:	2001      	movs	r0, #1
 800e260:	e7a8      	b.n	800e1b4 <_svfiprintf_r+0xd8>
 800e262:	2300      	movs	r3, #0
 800e264:	3401      	adds	r4, #1
 800e266:	9305      	str	r3, [sp, #20]
 800e268:	4619      	mov	r1, r3
 800e26a:	f04f 0c0a 	mov.w	ip, #10
 800e26e:	4620      	mov	r0, r4
 800e270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e274:	3a30      	subs	r2, #48	@ 0x30
 800e276:	2a09      	cmp	r2, #9
 800e278:	d903      	bls.n	800e282 <_svfiprintf_r+0x1a6>
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d0c6      	beq.n	800e20c <_svfiprintf_r+0x130>
 800e27e:	9105      	str	r1, [sp, #20]
 800e280:	e7c4      	b.n	800e20c <_svfiprintf_r+0x130>
 800e282:	fb0c 2101 	mla	r1, ip, r1, r2
 800e286:	4604      	mov	r4, r0
 800e288:	2301      	movs	r3, #1
 800e28a:	e7f0      	b.n	800e26e <_svfiprintf_r+0x192>
 800e28c:	ab03      	add	r3, sp, #12
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	462a      	mov	r2, r5
 800e292:	4b0e      	ldr	r3, [pc, #56]	@ (800e2cc <_svfiprintf_r+0x1f0>)
 800e294:	a904      	add	r1, sp, #16
 800e296:	4638      	mov	r0, r7
 800e298:	f3af 8000 	nop.w
 800e29c:	1c42      	adds	r2, r0, #1
 800e29e:	4606      	mov	r6, r0
 800e2a0:	d1d6      	bne.n	800e250 <_svfiprintf_r+0x174>
 800e2a2:	89ab      	ldrh	r3, [r5, #12]
 800e2a4:	065b      	lsls	r3, r3, #25
 800e2a6:	f53f af2d 	bmi.w	800e104 <_svfiprintf_r+0x28>
 800e2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2ac:	e72c      	b.n	800e108 <_svfiprintf_r+0x2c>
 800e2ae:	ab03      	add	r3, sp, #12
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	462a      	mov	r2, r5
 800e2b4:	4b05      	ldr	r3, [pc, #20]	@ (800e2cc <_svfiprintf_r+0x1f0>)
 800e2b6:	a904      	add	r1, sp, #16
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	f000 fa45 	bl	800e748 <_printf_i>
 800e2be:	e7ed      	b.n	800e29c <_svfiprintf_r+0x1c0>
 800e2c0:	08011696 	.word	0x08011696
 800e2c4:	080116a0 	.word	0x080116a0
 800e2c8:	00000000 	.word	0x00000000
 800e2cc:	0800e025 	.word	0x0800e025
 800e2d0:	0801169c 	.word	0x0801169c

0800e2d4 <_sungetc_r>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	1c4b      	adds	r3, r1, #1
 800e2d8:	4614      	mov	r4, r2
 800e2da:	d103      	bne.n	800e2e4 <_sungetc_r+0x10>
 800e2dc:	f04f 35ff 	mov.w	r5, #4294967295
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	8993      	ldrh	r3, [r2, #12]
 800e2e6:	f023 0320 	bic.w	r3, r3, #32
 800e2ea:	8193      	strh	r3, [r2, #12]
 800e2ec:	6853      	ldr	r3, [r2, #4]
 800e2ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e2f0:	b2cd      	uxtb	r5, r1
 800e2f2:	b18a      	cbz	r2, 800e318 <_sungetc_r+0x44>
 800e2f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	dd08      	ble.n	800e30c <_sungetc_r+0x38>
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	1e5a      	subs	r2, r3, #1
 800e2fe:	6022      	str	r2, [r4, #0]
 800e300:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e304:	6863      	ldr	r3, [r4, #4]
 800e306:	3301      	adds	r3, #1
 800e308:	6063      	str	r3, [r4, #4]
 800e30a:	e7e9      	b.n	800e2e0 <_sungetc_r+0xc>
 800e30c:	4621      	mov	r1, r4
 800e30e:	f000 fd80 	bl	800ee12 <__submore>
 800e312:	2800      	cmp	r0, #0
 800e314:	d0f1      	beq.n	800e2fa <_sungetc_r+0x26>
 800e316:	e7e1      	b.n	800e2dc <_sungetc_r+0x8>
 800e318:	6921      	ldr	r1, [r4, #16]
 800e31a:	6822      	ldr	r2, [r4, #0]
 800e31c:	b141      	cbz	r1, 800e330 <_sungetc_r+0x5c>
 800e31e:	4291      	cmp	r1, r2
 800e320:	d206      	bcs.n	800e330 <_sungetc_r+0x5c>
 800e322:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e326:	42a9      	cmp	r1, r5
 800e328:	d102      	bne.n	800e330 <_sungetc_r+0x5c>
 800e32a:	3a01      	subs	r2, #1
 800e32c:	6022      	str	r2, [r4, #0]
 800e32e:	e7ea      	b.n	800e306 <_sungetc_r+0x32>
 800e330:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e338:	6363      	str	r3, [r4, #52]	@ 0x34
 800e33a:	2303      	movs	r3, #3
 800e33c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e33e:	4623      	mov	r3, r4
 800e340:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	2301      	movs	r3, #1
 800e348:	e7de      	b.n	800e308 <_sungetc_r+0x34>

0800e34a <__ssrefill_r>:
 800e34a:	b510      	push	{r4, lr}
 800e34c:	460c      	mov	r4, r1
 800e34e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e350:	b169      	cbz	r1, 800e36e <__ssrefill_r+0x24>
 800e352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e356:	4299      	cmp	r1, r3
 800e358:	d001      	beq.n	800e35e <__ssrefill_r+0x14>
 800e35a:	f7ff fd63 	bl	800de24 <_free_r>
 800e35e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e360:	6063      	str	r3, [r4, #4]
 800e362:	2000      	movs	r0, #0
 800e364:	6360      	str	r0, [r4, #52]	@ 0x34
 800e366:	b113      	cbz	r3, 800e36e <__ssrefill_r+0x24>
 800e368:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e36a:	6023      	str	r3, [r4, #0]
 800e36c:	bd10      	pop	{r4, pc}
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	2300      	movs	r3, #0
 800e374:	6063      	str	r3, [r4, #4]
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	f043 0320 	orr.w	r3, r3, #32
 800e37c:	81a3      	strh	r3, [r4, #12]
 800e37e:	f04f 30ff 	mov.w	r0, #4294967295
 800e382:	e7f3      	b.n	800e36c <__ssrefill_r+0x22>

0800e384 <__ssvfiscanf_r>:
 800e384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e388:	460c      	mov	r4, r1
 800e38a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e38e:	2100      	movs	r1, #0
 800e390:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e394:	49a5      	ldr	r1, [pc, #660]	@ (800e62c <__ssvfiscanf_r+0x2a8>)
 800e396:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e398:	f10d 0804 	add.w	r8, sp, #4
 800e39c:	49a4      	ldr	r1, [pc, #656]	@ (800e630 <__ssvfiscanf_r+0x2ac>)
 800e39e:	4fa5      	ldr	r7, [pc, #660]	@ (800e634 <__ssvfiscanf_r+0x2b0>)
 800e3a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	7813      	ldrb	r3, [r2, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f000 8158 	beq.w	800e662 <__ssvfiscanf_r+0x2de>
 800e3b2:	5cf9      	ldrb	r1, [r7, r3]
 800e3b4:	f011 0108 	ands.w	r1, r1, #8
 800e3b8:	f102 0501 	add.w	r5, r2, #1
 800e3bc:	d019      	beq.n	800e3f2 <__ssvfiscanf_r+0x6e>
 800e3be:	6863      	ldr	r3, [r4, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	dd0f      	ble.n	800e3e4 <__ssvfiscanf_r+0x60>
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	781a      	ldrb	r2, [r3, #0]
 800e3c8:	5cba      	ldrb	r2, [r7, r2]
 800e3ca:	0712      	lsls	r2, r2, #28
 800e3cc:	d401      	bmi.n	800e3d2 <__ssvfiscanf_r+0x4e>
 800e3ce:	462a      	mov	r2, r5
 800e3d0:	e7eb      	b.n	800e3aa <__ssvfiscanf_r+0x26>
 800e3d2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e3d4:	3201      	adds	r2, #1
 800e3d6:	9245      	str	r2, [sp, #276]	@ 0x114
 800e3d8:	6862      	ldr	r2, [r4, #4]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	3a01      	subs	r2, #1
 800e3de:	6062      	str	r2, [r4, #4]
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	e7ec      	b.n	800e3be <__ssvfiscanf_r+0x3a>
 800e3e4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	4798      	blx	r3
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d0e9      	beq.n	800e3c4 <__ssvfiscanf_r+0x40>
 800e3f0:	e7ed      	b.n	800e3ce <__ssvfiscanf_r+0x4a>
 800e3f2:	2b25      	cmp	r3, #37	@ 0x25
 800e3f4:	d012      	beq.n	800e41c <__ssvfiscanf_r+0x98>
 800e3f6:	4699      	mov	r9, r3
 800e3f8:	6863      	ldr	r3, [r4, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f340 8093 	ble.w	800e526 <__ssvfiscanf_r+0x1a2>
 800e400:	6822      	ldr	r2, [r4, #0]
 800e402:	7813      	ldrb	r3, [r2, #0]
 800e404:	454b      	cmp	r3, r9
 800e406:	f040 812c 	bne.w	800e662 <__ssvfiscanf_r+0x2de>
 800e40a:	6863      	ldr	r3, [r4, #4]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	6063      	str	r3, [r4, #4]
 800e410:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e412:	3201      	adds	r2, #1
 800e414:	3301      	adds	r3, #1
 800e416:	6022      	str	r2, [r4, #0]
 800e418:	9345      	str	r3, [sp, #276]	@ 0x114
 800e41a:	e7d8      	b.n	800e3ce <__ssvfiscanf_r+0x4a>
 800e41c:	9141      	str	r1, [sp, #260]	@ 0x104
 800e41e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e420:	7853      	ldrb	r3, [r2, #1]
 800e422:	2b2a      	cmp	r3, #42	@ 0x2a
 800e424:	bf02      	ittt	eq
 800e426:	2310      	moveq	r3, #16
 800e428:	1c95      	addeq	r5, r2, #2
 800e42a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e42c:	220a      	movs	r2, #10
 800e42e:	46a9      	mov	r9, r5
 800e430:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e434:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e438:	2b09      	cmp	r3, #9
 800e43a:	d91e      	bls.n	800e47a <__ssvfiscanf_r+0xf6>
 800e43c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e638 <__ssvfiscanf_r+0x2b4>
 800e440:	2203      	movs	r2, #3
 800e442:	4650      	mov	r0, sl
 800e444:	f7f1 fedc 	bl	8000200 <memchr>
 800e448:	b138      	cbz	r0, 800e45a <__ssvfiscanf_r+0xd6>
 800e44a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e44c:	eba0 000a 	sub.w	r0, r0, sl
 800e450:	2301      	movs	r3, #1
 800e452:	4083      	lsls	r3, r0
 800e454:	4313      	orrs	r3, r2
 800e456:	9341      	str	r3, [sp, #260]	@ 0x104
 800e458:	464d      	mov	r5, r9
 800e45a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e45e:	2b78      	cmp	r3, #120	@ 0x78
 800e460:	d806      	bhi.n	800e470 <__ssvfiscanf_r+0xec>
 800e462:	2b57      	cmp	r3, #87	@ 0x57
 800e464:	d810      	bhi.n	800e488 <__ssvfiscanf_r+0x104>
 800e466:	2b25      	cmp	r3, #37	@ 0x25
 800e468:	d0c5      	beq.n	800e3f6 <__ssvfiscanf_r+0x72>
 800e46a:	d857      	bhi.n	800e51c <__ssvfiscanf_r+0x198>
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d065      	beq.n	800e53c <__ssvfiscanf_r+0x1b8>
 800e470:	2303      	movs	r3, #3
 800e472:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e474:	230a      	movs	r3, #10
 800e476:	9342      	str	r3, [sp, #264]	@ 0x108
 800e478:	e078      	b.n	800e56c <__ssvfiscanf_r+0x1e8>
 800e47a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e47c:	fb02 1103 	mla	r1, r2, r3, r1
 800e480:	3930      	subs	r1, #48	@ 0x30
 800e482:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e484:	464d      	mov	r5, r9
 800e486:	e7d2      	b.n	800e42e <__ssvfiscanf_r+0xaa>
 800e488:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e48c:	2a20      	cmp	r2, #32
 800e48e:	d8ef      	bhi.n	800e470 <__ssvfiscanf_r+0xec>
 800e490:	a101      	add	r1, pc, #4	@ (adr r1, 800e498 <__ssvfiscanf_r+0x114>)
 800e492:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e496:	bf00      	nop
 800e498:	0800e54b 	.word	0x0800e54b
 800e49c:	0800e471 	.word	0x0800e471
 800e4a0:	0800e471 	.word	0x0800e471
 800e4a4:	0800e5a5 	.word	0x0800e5a5
 800e4a8:	0800e471 	.word	0x0800e471
 800e4ac:	0800e471 	.word	0x0800e471
 800e4b0:	0800e471 	.word	0x0800e471
 800e4b4:	0800e471 	.word	0x0800e471
 800e4b8:	0800e471 	.word	0x0800e471
 800e4bc:	0800e471 	.word	0x0800e471
 800e4c0:	0800e471 	.word	0x0800e471
 800e4c4:	0800e5bb 	.word	0x0800e5bb
 800e4c8:	0800e5a1 	.word	0x0800e5a1
 800e4cc:	0800e523 	.word	0x0800e523
 800e4d0:	0800e523 	.word	0x0800e523
 800e4d4:	0800e523 	.word	0x0800e523
 800e4d8:	0800e471 	.word	0x0800e471
 800e4dc:	0800e55d 	.word	0x0800e55d
 800e4e0:	0800e471 	.word	0x0800e471
 800e4e4:	0800e471 	.word	0x0800e471
 800e4e8:	0800e471 	.word	0x0800e471
 800e4ec:	0800e471 	.word	0x0800e471
 800e4f0:	0800e5cb 	.word	0x0800e5cb
 800e4f4:	0800e565 	.word	0x0800e565
 800e4f8:	0800e543 	.word	0x0800e543
 800e4fc:	0800e471 	.word	0x0800e471
 800e500:	0800e471 	.word	0x0800e471
 800e504:	0800e5c7 	.word	0x0800e5c7
 800e508:	0800e471 	.word	0x0800e471
 800e50c:	0800e5a1 	.word	0x0800e5a1
 800e510:	0800e471 	.word	0x0800e471
 800e514:	0800e471 	.word	0x0800e471
 800e518:	0800e54b 	.word	0x0800e54b
 800e51c:	3b45      	subs	r3, #69	@ 0x45
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d8a6      	bhi.n	800e470 <__ssvfiscanf_r+0xec>
 800e522:	2305      	movs	r3, #5
 800e524:	e021      	b.n	800e56a <__ssvfiscanf_r+0x1e6>
 800e526:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e528:	4621      	mov	r1, r4
 800e52a:	4630      	mov	r0, r6
 800e52c:	4798      	blx	r3
 800e52e:	2800      	cmp	r0, #0
 800e530:	f43f af66 	beq.w	800e400 <__ssvfiscanf_r+0x7c>
 800e534:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e536:	2800      	cmp	r0, #0
 800e538:	f040 808b 	bne.w	800e652 <__ssvfiscanf_r+0x2ce>
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	e08b      	b.n	800e65a <__ssvfiscanf_r+0x2d6>
 800e542:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e544:	f042 0220 	orr.w	r2, r2, #32
 800e548:	9241      	str	r2, [sp, #260]	@ 0x104
 800e54a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e54c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e550:	9241      	str	r2, [sp, #260]	@ 0x104
 800e552:	2210      	movs	r2, #16
 800e554:	2b6e      	cmp	r3, #110	@ 0x6e
 800e556:	9242      	str	r2, [sp, #264]	@ 0x108
 800e558:	d902      	bls.n	800e560 <__ssvfiscanf_r+0x1dc>
 800e55a:	e005      	b.n	800e568 <__ssvfiscanf_r+0x1e4>
 800e55c:	2300      	movs	r3, #0
 800e55e:	9342      	str	r3, [sp, #264]	@ 0x108
 800e560:	2303      	movs	r3, #3
 800e562:	e002      	b.n	800e56a <__ssvfiscanf_r+0x1e6>
 800e564:	2308      	movs	r3, #8
 800e566:	9342      	str	r3, [sp, #264]	@ 0x108
 800e568:	2304      	movs	r3, #4
 800e56a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e56c:	6863      	ldr	r3, [r4, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	dd39      	ble.n	800e5e6 <__ssvfiscanf_r+0x262>
 800e572:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e574:	0659      	lsls	r1, r3, #25
 800e576:	d404      	bmi.n	800e582 <__ssvfiscanf_r+0x1fe>
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	781a      	ldrb	r2, [r3, #0]
 800e57c:	5cba      	ldrb	r2, [r7, r2]
 800e57e:	0712      	lsls	r2, r2, #28
 800e580:	d438      	bmi.n	800e5f4 <__ssvfiscanf_r+0x270>
 800e582:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e584:	2b02      	cmp	r3, #2
 800e586:	dc47      	bgt.n	800e618 <__ssvfiscanf_r+0x294>
 800e588:	466b      	mov	r3, sp
 800e58a:	4622      	mov	r2, r4
 800e58c:	a941      	add	r1, sp, #260	@ 0x104
 800e58e:	4630      	mov	r0, r6
 800e590:	f000 f9fa 	bl	800e988 <_scanf_chars>
 800e594:	2801      	cmp	r0, #1
 800e596:	d064      	beq.n	800e662 <__ssvfiscanf_r+0x2de>
 800e598:	2802      	cmp	r0, #2
 800e59a:	f47f af18 	bne.w	800e3ce <__ssvfiscanf_r+0x4a>
 800e59e:	e7c9      	b.n	800e534 <__ssvfiscanf_r+0x1b0>
 800e5a0:	220a      	movs	r2, #10
 800e5a2:	e7d7      	b.n	800e554 <__ssvfiscanf_r+0x1d0>
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	4640      	mov	r0, r8
 800e5a8:	f000 fbfa 	bl	800eda0 <__sccl>
 800e5ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5b2:	9341      	str	r3, [sp, #260]	@ 0x104
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e7d7      	b.n	800e56a <__ssvfiscanf_r+0x1e6>
 800e5ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e5bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5c0:	9341      	str	r3, [sp, #260]	@ 0x104
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e7d1      	b.n	800e56a <__ssvfiscanf_r+0x1e6>
 800e5c6:	2302      	movs	r3, #2
 800e5c8:	e7cf      	b.n	800e56a <__ssvfiscanf_r+0x1e6>
 800e5ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e5cc:	06c3      	lsls	r3, r0, #27
 800e5ce:	f53f aefe 	bmi.w	800e3ce <__ssvfiscanf_r+0x4a>
 800e5d2:	9b00      	ldr	r3, [sp, #0]
 800e5d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e5d6:	1d19      	adds	r1, r3, #4
 800e5d8:	9100      	str	r1, [sp, #0]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	07c0      	lsls	r0, r0, #31
 800e5de:	bf4c      	ite	mi
 800e5e0:	801a      	strhmi	r2, [r3, #0]
 800e5e2:	601a      	strpl	r2, [r3, #0]
 800e5e4:	e6f3      	b.n	800e3ce <__ssvfiscanf_r+0x4a>
 800e5e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	4798      	blx	r3
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d0bf      	beq.n	800e572 <__ssvfiscanf_r+0x1ee>
 800e5f2:	e79f      	b.n	800e534 <__ssvfiscanf_r+0x1b0>
 800e5f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e5f6:	3201      	adds	r2, #1
 800e5f8:	9245      	str	r2, [sp, #276]	@ 0x114
 800e5fa:	6862      	ldr	r2, [r4, #4]
 800e5fc:	3a01      	subs	r2, #1
 800e5fe:	2a00      	cmp	r2, #0
 800e600:	6062      	str	r2, [r4, #4]
 800e602:	dd02      	ble.n	800e60a <__ssvfiscanf_r+0x286>
 800e604:	3301      	adds	r3, #1
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	e7b6      	b.n	800e578 <__ssvfiscanf_r+0x1f4>
 800e60a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e60c:	4621      	mov	r1, r4
 800e60e:	4630      	mov	r0, r6
 800e610:	4798      	blx	r3
 800e612:	2800      	cmp	r0, #0
 800e614:	d0b0      	beq.n	800e578 <__ssvfiscanf_r+0x1f4>
 800e616:	e78d      	b.n	800e534 <__ssvfiscanf_r+0x1b0>
 800e618:	2b04      	cmp	r3, #4
 800e61a:	dc0f      	bgt.n	800e63c <__ssvfiscanf_r+0x2b8>
 800e61c:	466b      	mov	r3, sp
 800e61e:	4622      	mov	r2, r4
 800e620:	a941      	add	r1, sp, #260	@ 0x104
 800e622:	4630      	mov	r0, r6
 800e624:	f000 fa0a 	bl	800ea3c <_scanf_i>
 800e628:	e7b4      	b.n	800e594 <__ssvfiscanf_r+0x210>
 800e62a:	bf00      	nop
 800e62c:	0800e2d5 	.word	0x0800e2d5
 800e630:	0800e34b 	.word	0x0800e34b
 800e634:	080114e9 	.word	0x080114e9
 800e638:	0801169c 	.word	0x0801169c
 800e63c:	4b0a      	ldr	r3, [pc, #40]	@ (800e668 <__ssvfiscanf_r+0x2e4>)
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f43f aec5 	beq.w	800e3ce <__ssvfiscanf_r+0x4a>
 800e644:	466b      	mov	r3, sp
 800e646:	4622      	mov	r2, r4
 800e648:	a941      	add	r1, sp, #260	@ 0x104
 800e64a:	4630      	mov	r0, r6
 800e64c:	f3af 8000 	nop.w
 800e650:	e7a0      	b.n	800e594 <__ssvfiscanf_r+0x210>
 800e652:	89a3      	ldrh	r3, [r4, #12]
 800e654:	065b      	lsls	r3, r3, #25
 800e656:	f53f af71 	bmi.w	800e53c <__ssvfiscanf_r+0x1b8>
 800e65a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e662:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e664:	e7f9      	b.n	800e65a <__ssvfiscanf_r+0x2d6>
 800e666:	bf00      	nop
 800e668:	00000000 	.word	0x00000000

0800e66c <_printf_common>:
 800e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e670:	4616      	mov	r6, r2
 800e672:	4698      	mov	r8, r3
 800e674:	688a      	ldr	r2, [r1, #8]
 800e676:	690b      	ldr	r3, [r1, #16]
 800e678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e67c:	4293      	cmp	r3, r2
 800e67e:	bfb8      	it	lt
 800e680:	4613      	movlt	r3, r2
 800e682:	6033      	str	r3, [r6, #0]
 800e684:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e688:	4607      	mov	r7, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	b10a      	cbz	r2, 800e692 <_printf_common+0x26>
 800e68e:	3301      	adds	r3, #1
 800e690:	6033      	str	r3, [r6, #0]
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	0699      	lsls	r1, r3, #26
 800e696:	bf42      	ittt	mi
 800e698:	6833      	ldrmi	r3, [r6, #0]
 800e69a:	3302      	addmi	r3, #2
 800e69c:	6033      	strmi	r3, [r6, #0]
 800e69e:	6825      	ldr	r5, [r4, #0]
 800e6a0:	f015 0506 	ands.w	r5, r5, #6
 800e6a4:	d106      	bne.n	800e6b4 <_printf_common+0x48>
 800e6a6:	f104 0a19 	add.w	sl, r4, #25
 800e6aa:	68e3      	ldr	r3, [r4, #12]
 800e6ac:	6832      	ldr	r2, [r6, #0]
 800e6ae:	1a9b      	subs	r3, r3, r2
 800e6b0:	42ab      	cmp	r3, r5
 800e6b2:	dc26      	bgt.n	800e702 <_printf_common+0x96>
 800e6b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6b8:	6822      	ldr	r2, [r4, #0]
 800e6ba:	3b00      	subs	r3, #0
 800e6bc:	bf18      	it	ne
 800e6be:	2301      	movne	r3, #1
 800e6c0:	0692      	lsls	r2, r2, #26
 800e6c2:	d42b      	bmi.n	800e71c <_printf_common+0xb0>
 800e6c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6c8:	4641      	mov	r1, r8
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	47c8      	blx	r9
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	d01e      	beq.n	800e710 <_printf_common+0xa4>
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	6922      	ldr	r2, [r4, #16]
 800e6d6:	f003 0306 	and.w	r3, r3, #6
 800e6da:	2b04      	cmp	r3, #4
 800e6dc:	bf02      	ittt	eq
 800e6de:	68e5      	ldreq	r5, [r4, #12]
 800e6e0:	6833      	ldreq	r3, [r6, #0]
 800e6e2:	1aed      	subeq	r5, r5, r3
 800e6e4:	68a3      	ldr	r3, [r4, #8]
 800e6e6:	bf0c      	ite	eq
 800e6e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6ec:	2500      	movne	r5, #0
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	bfc4      	itt	gt
 800e6f2:	1a9b      	subgt	r3, r3, r2
 800e6f4:	18ed      	addgt	r5, r5, r3
 800e6f6:	2600      	movs	r6, #0
 800e6f8:	341a      	adds	r4, #26
 800e6fa:	42b5      	cmp	r5, r6
 800e6fc:	d11a      	bne.n	800e734 <_printf_common+0xc8>
 800e6fe:	2000      	movs	r0, #0
 800e700:	e008      	b.n	800e714 <_printf_common+0xa8>
 800e702:	2301      	movs	r3, #1
 800e704:	4652      	mov	r2, sl
 800e706:	4641      	mov	r1, r8
 800e708:	4638      	mov	r0, r7
 800e70a:	47c8      	blx	r9
 800e70c:	3001      	adds	r0, #1
 800e70e:	d103      	bne.n	800e718 <_printf_common+0xac>
 800e710:	f04f 30ff 	mov.w	r0, #4294967295
 800e714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e718:	3501      	adds	r5, #1
 800e71a:	e7c6      	b.n	800e6aa <_printf_common+0x3e>
 800e71c:	18e1      	adds	r1, r4, r3
 800e71e:	1c5a      	adds	r2, r3, #1
 800e720:	2030      	movs	r0, #48	@ 0x30
 800e722:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e726:	4422      	add	r2, r4
 800e728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e72c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e730:	3302      	adds	r3, #2
 800e732:	e7c7      	b.n	800e6c4 <_printf_common+0x58>
 800e734:	2301      	movs	r3, #1
 800e736:	4622      	mov	r2, r4
 800e738:	4641      	mov	r1, r8
 800e73a:	4638      	mov	r0, r7
 800e73c:	47c8      	blx	r9
 800e73e:	3001      	adds	r0, #1
 800e740:	d0e6      	beq.n	800e710 <_printf_common+0xa4>
 800e742:	3601      	adds	r6, #1
 800e744:	e7d9      	b.n	800e6fa <_printf_common+0x8e>
	...

0800e748 <_printf_i>:
 800e748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e74c:	7e0f      	ldrb	r7, [r1, #24]
 800e74e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e750:	2f78      	cmp	r7, #120	@ 0x78
 800e752:	4691      	mov	r9, r2
 800e754:	4680      	mov	r8, r0
 800e756:	460c      	mov	r4, r1
 800e758:	469a      	mov	sl, r3
 800e75a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e75e:	d807      	bhi.n	800e770 <_printf_i+0x28>
 800e760:	2f62      	cmp	r7, #98	@ 0x62
 800e762:	d80a      	bhi.n	800e77a <_printf_i+0x32>
 800e764:	2f00      	cmp	r7, #0
 800e766:	f000 80d2 	beq.w	800e90e <_printf_i+0x1c6>
 800e76a:	2f58      	cmp	r7, #88	@ 0x58
 800e76c:	f000 80b9 	beq.w	800e8e2 <_printf_i+0x19a>
 800e770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e774:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e778:	e03a      	b.n	800e7f0 <_printf_i+0xa8>
 800e77a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e77e:	2b15      	cmp	r3, #21
 800e780:	d8f6      	bhi.n	800e770 <_printf_i+0x28>
 800e782:	a101      	add	r1, pc, #4	@ (adr r1, 800e788 <_printf_i+0x40>)
 800e784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e788:	0800e7e1 	.word	0x0800e7e1
 800e78c:	0800e7f5 	.word	0x0800e7f5
 800e790:	0800e771 	.word	0x0800e771
 800e794:	0800e771 	.word	0x0800e771
 800e798:	0800e771 	.word	0x0800e771
 800e79c:	0800e771 	.word	0x0800e771
 800e7a0:	0800e7f5 	.word	0x0800e7f5
 800e7a4:	0800e771 	.word	0x0800e771
 800e7a8:	0800e771 	.word	0x0800e771
 800e7ac:	0800e771 	.word	0x0800e771
 800e7b0:	0800e771 	.word	0x0800e771
 800e7b4:	0800e8f5 	.word	0x0800e8f5
 800e7b8:	0800e81f 	.word	0x0800e81f
 800e7bc:	0800e8af 	.word	0x0800e8af
 800e7c0:	0800e771 	.word	0x0800e771
 800e7c4:	0800e771 	.word	0x0800e771
 800e7c8:	0800e917 	.word	0x0800e917
 800e7cc:	0800e771 	.word	0x0800e771
 800e7d0:	0800e81f 	.word	0x0800e81f
 800e7d4:	0800e771 	.word	0x0800e771
 800e7d8:	0800e771 	.word	0x0800e771
 800e7dc:	0800e8b7 	.word	0x0800e8b7
 800e7e0:	6833      	ldr	r3, [r6, #0]
 800e7e2:	1d1a      	adds	r2, r3, #4
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6032      	str	r2, [r6, #0]
 800e7e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e09d      	b.n	800e930 <_printf_i+0x1e8>
 800e7f4:	6833      	ldr	r3, [r6, #0]
 800e7f6:	6820      	ldr	r0, [r4, #0]
 800e7f8:	1d19      	adds	r1, r3, #4
 800e7fa:	6031      	str	r1, [r6, #0]
 800e7fc:	0606      	lsls	r6, r0, #24
 800e7fe:	d501      	bpl.n	800e804 <_printf_i+0xbc>
 800e800:	681d      	ldr	r5, [r3, #0]
 800e802:	e003      	b.n	800e80c <_printf_i+0xc4>
 800e804:	0645      	lsls	r5, r0, #25
 800e806:	d5fb      	bpl.n	800e800 <_printf_i+0xb8>
 800e808:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e80c:	2d00      	cmp	r5, #0
 800e80e:	da03      	bge.n	800e818 <_printf_i+0xd0>
 800e810:	232d      	movs	r3, #45	@ 0x2d
 800e812:	426d      	negs	r5, r5
 800e814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e818:	4859      	ldr	r0, [pc, #356]	@ (800e980 <_printf_i+0x238>)
 800e81a:	230a      	movs	r3, #10
 800e81c:	e011      	b.n	800e842 <_printf_i+0xfa>
 800e81e:	6821      	ldr	r1, [r4, #0]
 800e820:	6833      	ldr	r3, [r6, #0]
 800e822:	0608      	lsls	r0, r1, #24
 800e824:	f853 5b04 	ldr.w	r5, [r3], #4
 800e828:	d402      	bmi.n	800e830 <_printf_i+0xe8>
 800e82a:	0649      	lsls	r1, r1, #25
 800e82c:	bf48      	it	mi
 800e82e:	b2ad      	uxthmi	r5, r5
 800e830:	2f6f      	cmp	r7, #111	@ 0x6f
 800e832:	4853      	ldr	r0, [pc, #332]	@ (800e980 <_printf_i+0x238>)
 800e834:	6033      	str	r3, [r6, #0]
 800e836:	bf14      	ite	ne
 800e838:	230a      	movne	r3, #10
 800e83a:	2308      	moveq	r3, #8
 800e83c:	2100      	movs	r1, #0
 800e83e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e842:	6866      	ldr	r6, [r4, #4]
 800e844:	60a6      	str	r6, [r4, #8]
 800e846:	2e00      	cmp	r6, #0
 800e848:	bfa2      	ittt	ge
 800e84a:	6821      	ldrge	r1, [r4, #0]
 800e84c:	f021 0104 	bicge.w	r1, r1, #4
 800e850:	6021      	strge	r1, [r4, #0]
 800e852:	b90d      	cbnz	r5, 800e858 <_printf_i+0x110>
 800e854:	2e00      	cmp	r6, #0
 800e856:	d04b      	beq.n	800e8f0 <_printf_i+0x1a8>
 800e858:	4616      	mov	r6, r2
 800e85a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e85e:	fb03 5711 	mls	r7, r3, r1, r5
 800e862:	5dc7      	ldrb	r7, [r0, r7]
 800e864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e868:	462f      	mov	r7, r5
 800e86a:	42bb      	cmp	r3, r7
 800e86c:	460d      	mov	r5, r1
 800e86e:	d9f4      	bls.n	800e85a <_printf_i+0x112>
 800e870:	2b08      	cmp	r3, #8
 800e872:	d10b      	bne.n	800e88c <_printf_i+0x144>
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	07df      	lsls	r7, r3, #31
 800e878:	d508      	bpl.n	800e88c <_printf_i+0x144>
 800e87a:	6923      	ldr	r3, [r4, #16]
 800e87c:	6861      	ldr	r1, [r4, #4]
 800e87e:	4299      	cmp	r1, r3
 800e880:	bfde      	ittt	le
 800e882:	2330      	movle	r3, #48	@ 0x30
 800e884:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e888:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e88c:	1b92      	subs	r2, r2, r6
 800e88e:	6122      	str	r2, [r4, #16]
 800e890:	f8cd a000 	str.w	sl, [sp]
 800e894:	464b      	mov	r3, r9
 800e896:	aa03      	add	r2, sp, #12
 800e898:	4621      	mov	r1, r4
 800e89a:	4640      	mov	r0, r8
 800e89c:	f7ff fee6 	bl	800e66c <_printf_common>
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	d14a      	bne.n	800e93a <_printf_i+0x1f2>
 800e8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a8:	b004      	add	sp, #16
 800e8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	f043 0320 	orr.w	r3, r3, #32
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	4833      	ldr	r0, [pc, #204]	@ (800e984 <_printf_i+0x23c>)
 800e8b8:	2778      	movs	r7, #120	@ 0x78
 800e8ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	6831      	ldr	r1, [r6, #0]
 800e8c2:	061f      	lsls	r7, r3, #24
 800e8c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8c8:	d402      	bmi.n	800e8d0 <_printf_i+0x188>
 800e8ca:	065f      	lsls	r7, r3, #25
 800e8cc:	bf48      	it	mi
 800e8ce:	b2ad      	uxthmi	r5, r5
 800e8d0:	6031      	str	r1, [r6, #0]
 800e8d2:	07d9      	lsls	r1, r3, #31
 800e8d4:	bf44      	itt	mi
 800e8d6:	f043 0320 	orrmi.w	r3, r3, #32
 800e8da:	6023      	strmi	r3, [r4, #0]
 800e8dc:	b11d      	cbz	r5, 800e8e6 <_printf_i+0x19e>
 800e8de:	2310      	movs	r3, #16
 800e8e0:	e7ac      	b.n	800e83c <_printf_i+0xf4>
 800e8e2:	4827      	ldr	r0, [pc, #156]	@ (800e980 <_printf_i+0x238>)
 800e8e4:	e7e9      	b.n	800e8ba <_printf_i+0x172>
 800e8e6:	6823      	ldr	r3, [r4, #0]
 800e8e8:	f023 0320 	bic.w	r3, r3, #32
 800e8ec:	6023      	str	r3, [r4, #0]
 800e8ee:	e7f6      	b.n	800e8de <_printf_i+0x196>
 800e8f0:	4616      	mov	r6, r2
 800e8f2:	e7bd      	b.n	800e870 <_printf_i+0x128>
 800e8f4:	6833      	ldr	r3, [r6, #0]
 800e8f6:	6825      	ldr	r5, [r4, #0]
 800e8f8:	6961      	ldr	r1, [r4, #20]
 800e8fa:	1d18      	adds	r0, r3, #4
 800e8fc:	6030      	str	r0, [r6, #0]
 800e8fe:	062e      	lsls	r6, r5, #24
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	d501      	bpl.n	800e908 <_printf_i+0x1c0>
 800e904:	6019      	str	r1, [r3, #0]
 800e906:	e002      	b.n	800e90e <_printf_i+0x1c6>
 800e908:	0668      	lsls	r0, r5, #25
 800e90a:	d5fb      	bpl.n	800e904 <_printf_i+0x1bc>
 800e90c:	8019      	strh	r1, [r3, #0]
 800e90e:	2300      	movs	r3, #0
 800e910:	6123      	str	r3, [r4, #16]
 800e912:	4616      	mov	r6, r2
 800e914:	e7bc      	b.n	800e890 <_printf_i+0x148>
 800e916:	6833      	ldr	r3, [r6, #0]
 800e918:	1d1a      	adds	r2, r3, #4
 800e91a:	6032      	str	r2, [r6, #0]
 800e91c:	681e      	ldr	r6, [r3, #0]
 800e91e:	6862      	ldr	r2, [r4, #4]
 800e920:	2100      	movs	r1, #0
 800e922:	4630      	mov	r0, r6
 800e924:	f7f1 fc6c 	bl	8000200 <memchr>
 800e928:	b108      	cbz	r0, 800e92e <_printf_i+0x1e6>
 800e92a:	1b80      	subs	r0, r0, r6
 800e92c:	6060      	str	r0, [r4, #4]
 800e92e:	6863      	ldr	r3, [r4, #4]
 800e930:	6123      	str	r3, [r4, #16]
 800e932:	2300      	movs	r3, #0
 800e934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e938:	e7aa      	b.n	800e890 <_printf_i+0x148>
 800e93a:	6923      	ldr	r3, [r4, #16]
 800e93c:	4632      	mov	r2, r6
 800e93e:	4649      	mov	r1, r9
 800e940:	4640      	mov	r0, r8
 800e942:	47d0      	blx	sl
 800e944:	3001      	adds	r0, #1
 800e946:	d0ad      	beq.n	800e8a4 <_printf_i+0x15c>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	079b      	lsls	r3, r3, #30
 800e94c:	d413      	bmi.n	800e976 <_printf_i+0x22e>
 800e94e:	68e0      	ldr	r0, [r4, #12]
 800e950:	9b03      	ldr	r3, [sp, #12]
 800e952:	4298      	cmp	r0, r3
 800e954:	bfb8      	it	lt
 800e956:	4618      	movlt	r0, r3
 800e958:	e7a6      	b.n	800e8a8 <_printf_i+0x160>
 800e95a:	2301      	movs	r3, #1
 800e95c:	4632      	mov	r2, r6
 800e95e:	4649      	mov	r1, r9
 800e960:	4640      	mov	r0, r8
 800e962:	47d0      	blx	sl
 800e964:	3001      	adds	r0, #1
 800e966:	d09d      	beq.n	800e8a4 <_printf_i+0x15c>
 800e968:	3501      	adds	r5, #1
 800e96a:	68e3      	ldr	r3, [r4, #12]
 800e96c:	9903      	ldr	r1, [sp, #12]
 800e96e:	1a5b      	subs	r3, r3, r1
 800e970:	42ab      	cmp	r3, r5
 800e972:	dcf2      	bgt.n	800e95a <_printf_i+0x212>
 800e974:	e7eb      	b.n	800e94e <_printf_i+0x206>
 800e976:	2500      	movs	r5, #0
 800e978:	f104 0619 	add.w	r6, r4, #25
 800e97c:	e7f5      	b.n	800e96a <_printf_i+0x222>
 800e97e:	bf00      	nop
 800e980:	080116a7 	.word	0x080116a7
 800e984:	080116b8 	.word	0x080116b8

0800e988 <_scanf_chars>:
 800e988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e98c:	4615      	mov	r5, r2
 800e98e:	688a      	ldr	r2, [r1, #8]
 800e990:	4680      	mov	r8, r0
 800e992:	460c      	mov	r4, r1
 800e994:	b932      	cbnz	r2, 800e9a4 <_scanf_chars+0x1c>
 800e996:	698a      	ldr	r2, [r1, #24]
 800e998:	2a00      	cmp	r2, #0
 800e99a:	bf14      	ite	ne
 800e99c:	f04f 32ff 	movne.w	r2, #4294967295
 800e9a0:	2201      	moveq	r2, #1
 800e9a2:	608a      	str	r2, [r1, #8]
 800e9a4:	6822      	ldr	r2, [r4, #0]
 800e9a6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ea38 <_scanf_chars+0xb0>
 800e9aa:	06d1      	lsls	r1, r2, #27
 800e9ac:	bf5f      	itttt	pl
 800e9ae:	681a      	ldrpl	r2, [r3, #0]
 800e9b0:	1d11      	addpl	r1, r2, #4
 800e9b2:	6019      	strpl	r1, [r3, #0]
 800e9b4:	6816      	ldrpl	r6, [r2, #0]
 800e9b6:	2700      	movs	r7, #0
 800e9b8:	69a0      	ldr	r0, [r4, #24]
 800e9ba:	b188      	cbz	r0, 800e9e0 <_scanf_chars+0x58>
 800e9bc:	2801      	cmp	r0, #1
 800e9be:	d107      	bne.n	800e9d0 <_scanf_chars+0x48>
 800e9c0:	682b      	ldr	r3, [r5, #0]
 800e9c2:	781a      	ldrb	r2, [r3, #0]
 800e9c4:	6963      	ldr	r3, [r4, #20]
 800e9c6:	5c9b      	ldrb	r3, [r3, r2]
 800e9c8:	b953      	cbnz	r3, 800e9e0 <_scanf_chars+0x58>
 800e9ca:	2f00      	cmp	r7, #0
 800e9cc:	d031      	beq.n	800ea32 <_scanf_chars+0xaa>
 800e9ce:	e022      	b.n	800ea16 <_scanf_chars+0x8e>
 800e9d0:	2802      	cmp	r0, #2
 800e9d2:	d120      	bne.n	800ea16 <_scanf_chars+0x8e>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e9dc:	071b      	lsls	r3, r3, #28
 800e9de:	d41a      	bmi.n	800ea16 <_scanf_chars+0x8e>
 800e9e0:	6823      	ldr	r3, [r4, #0]
 800e9e2:	06da      	lsls	r2, r3, #27
 800e9e4:	bf5e      	ittt	pl
 800e9e6:	682b      	ldrpl	r3, [r5, #0]
 800e9e8:	781b      	ldrbpl	r3, [r3, #0]
 800e9ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e9ee:	682a      	ldr	r2, [r5, #0]
 800e9f0:	686b      	ldr	r3, [r5, #4]
 800e9f2:	3201      	adds	r2, #1
 800e9f4:	602a      	str	r2, [r5, #0]
 800e9f6:	68a2      	ldr	r2, [r4, #8]
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	3a01      	subs	r2, #1
 800e9fc:	606b      	str	r3, [r5, #4]
 800e9fe:	3701      	adds	r7, #1
 800ea00:	60a2      	str	r2, [r4, #8]
 800ea02:	b142      	cbz	r2, 800ea16 <_scanf_chars+0x8e>
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	dcd7      	bgt.n	800e9b8 <_scanf_chars+0x30>
 800ea08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4640      	mov	r0, r8
 800ea10:	4798      	blx	r3
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d0d0      	beq.n	800e9b8 <_scanf_chars+0x30>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	f013 0310 	ands.w	r3, r3, #16
 800ea1c:	d105      	bne.n	800ea2a <_scanf_chars+0xa2>
 800ea1e:	68e2      	ldr	r2, [r4, #12]
 800ea20:	3201      	adds	r2, #1
 800ea22:	60e2      	str	r2, [r4, #12]
 800ea24:	69a2      	ldr	r2, [r4, #24]
 800ea26:	b102      	cbz	r2, 800ea2a <_scanf_chars+0xa2>
 800ea28:	7033      	strb	r3, [r6, #0]
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	443b      	add	r3, r7
 800ea2e:	6123      	str	r3, [r4, #16]
 800ea30:	2000      	movs	r0, #0
 800ea32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea36:	bf00      	nop
 800ea38:	080114e9 	.word	0x080114e9

0800ea3c <_scanf_i>:
 800ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea40:	4698      	mov	r8, r3
 800ea42:	4b74      	ldr	r3, [pc, #464]	@ (800ec14 <_scanf_i+0x1d8>)
 800ea44:	460c      	mov	r4, r1
 800ea46:	4682      	mov	sl, r0
 800ea48:	4616      	mov	r6, r2
 800ea4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea4e:	b087      	sub	sp, #28
 800ea50:	ab03      	add	r3, sp, #12
 800ea52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea56:	4b70      	ldr	r3, [pc, #448]	@ (800ec18 <_scanf_i+0x1dc>)
 800ea58:	69a1      	ldr	r1, [r4, #24]
 800ea5a:	4a70      	ldr	r2, [pc, #448]	@ (800ec1c <_scanf_i+0x1e0>)
 800ea5c:	2903      	cmp	r1, #3
 800ea5e:	bf08      	it	eq
 800ea60:	461a      	moveq	r2, r3
 800ea62:	68a3      	ldr	r3, [r4, #8]
 800ea64:	9201      	str	r2, [sp, #4]
 800ea66:	1e5a      	subs	r2, r3, #1
 800ea68:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ea6c:	bf88      	it	hi
 800ea6e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ea72:	4627      	mov	r7, r4
 800ea74:	bf82      	ittt	hi
 800ea76:	eb03 0905 	addhi.w	r9, r3, r5
 800ea7a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ea7e:	60a3      	strhi	r3, [r4, #8]
 800ea80:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea84:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ea88:	bf98      	it	ls
 800ea8a:	f04f 0900 	movls.w	r9, #0
 800ea8e:	6023      	str	r3, [r4, #0]
 800ea90:	463d      	mov	r5, r7
 800ea92:	f04f 0b00 	mov.w	fp, #0
 800ea96:	6831      	ldr	r1, [r6, #0]
 800ea98:	ab03      	add	r3, sp, #12
 800ea9a:	7809      	ldrb	r1, [r1, #0]
 800ea9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	f7f1 fbad 	bl	8000200 <memchr>
 800eaa6:	b328      	cbz	r0, 800eaf4 <_scanf_i+0xb8>
 800eaa8:	f1bb 0f01 	cmp.w	fp, #1
 800eaac:	d159      	bne.n	800eb62 <_scanf_i+0x126>
 800eaae:	6862      	ldr	r2, [r4, #4]
 800eab0:	b92a      	cbnz	r2, 800eabe <_scanf_i+0x82>
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	2108      	movs	r1, #8
 800eab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eaba:	6061      	str	r1, [r4, #4]
 800eabc:	6022      	str	r2, [r4, #0]
 800eabe:	6822      	ldr	r2, [r4, #0]
 800eac0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800eac4:	6022      	str	r2, [r4, #0]
 800eac6:	68a2      	ldr	r2, [r4, #8]
 800eac8:	1e51      	subs	r1, r2, #1
 800eaca:	60a1      	str	r1, [r4, #8]
 800eacc:	b192      	cbz	r2, 800eaf4 <_scanf_i+0xb8>
 800eace:	6832      	ldr	r2, [r6, #0]
 800ead0:	1c51      	adds	r1, r2, #1
 800ead2:	6031      	str	r1, [r6, #0]
 800ead4:	7812      	ldrb	r2, [r2, #0]
 800ead6:	f805 2b01 	strb.w	r2, [r5], #1
 800eada:	6872      	ldr	r2, [r6, #4]
 800eadc:	3a01      	subs	r2, #1
 800eade:	2a00      	cmp	r2, #0
 800eae0:	6072      	str	r2, [r6, #4]
 800eae2:	dc07      	bgt.n	800eaf4 <_scanf_i+0xb8>
 800eae4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800eae8:	4631      	mov	r1, r6
 800eaea:	4650      	mov	r0, sl
 800eaec:	4790      	blx	r2
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	f040 8085 	bne.w	800ebfe <_scanf_i+0x1c2>
 800eaf4:	f10b 0b01 	add.w	fp, fp, #1
 800eaf8:	f1bb 0f03 	cmp.w	fp, #3
 800eafc:	d1cb      	bne.n	800ea96 <_scanf_i+0x5a>
 800eafe:	6863      	ldr	r3, [r4, #4]
 800eb00:	b90b      	cbnz	r3, 800eb06 <_scanf_i+0xca>
 800eb02:	230a      	movs	r3, #10
 800eb04:	6063      	str	r3, [r4, #4]
 800eb06:	6863      	ldr	r3, [r4, #4]
 800eb08:	4945      	ldr	r1, [pc, #276]	@ (800ec20 <_scanf_i+0x1e4>)
 800eb0a:	6960      	ldr	r0, [r4, #20]
 800eb0c:	1ac9      	subs	r1, r1, r3
 800eb0e:	f000 f947 	bl	800eda0 <__sccl>
 800eb12:	f04f 0b00 	mov.w	fp, #0
 800eb16:	68a3      	ldr	r3, [r4, #8]
 800eb18:	6822      	ldr	r2, [r4, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d03d      	beq.n	800eb9a <_scanf_i+0x15e>
 800eb1e:	6831      	ldr	r1, [r6, #0]
 800eb20:	6960      	ldr	r0, [r4, #20]
 800eb22:	f891 c000 	ldrb.w	ip, [r1]
 800eb26:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d035      	beq.n	800eb9a <_scanf_i+0x15e>
 800eb2e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800eb32:	d124      	bne.n	800eb7e <_scanf_i+0x142>
 800eb34:	0510      	lsls	r0, r2, #20
 800eb36:	d522      	bpl.n	800eb7e <_scanf_i+0x142>
 800eb38:	f10b 0b01 	add.w	fp, fp, #1
 800eb3c:	f1b9 0f00 	cmp.w	r9, #0
 800eb40:	d003      	beq.n	800eb4a <_scanf_i+0x10e>
 800eb42:	3301      	adds	r3, #1
 800eb44:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb48:	60a3      	str	r3, [r4, #8]
 800eb4a:	6873      	ldr	r3, [r6, #4]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	6073      	str	r3, [r6, #4]
 800eb52:	dd1b      	ble.n	800eb8c <_scanf_i+0x150>
 800eb54:	6833      	ldr	r3, [r6, #0]
 800eb56:	3301      	adds	r3, #1
 800eb58:	6033      	str	r3, [r6, #0]
 800eb5a:	68a3      	ldr	r3, [r4, #8]
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	60a3      	str	r3, [r4, #8]
 800eb60:	e7d9      	b.n	800eb16 <_scanf_i+0xda>
 800eb62:	f1bb 0f02 	cmp.w	fp, #2
 800eb66:	d1ae      	bne.n	800eac6 <_scanf_i+0x8a>
 800eb68:	6822      	ldr	r2, [r4, #0]
 800eb6a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800eb6e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800eb72:	d1bf      	bne.n	800eaf4 <_scanf_i+0xb8>
 800eb74:	2110      	movs	r1, #16
 800eb76:	6061      	str	r1, [r4, #4]
 800eb78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800eb7c:	e7a2      	b.n	800eac4 <_scanf_i+0x88>
 800eb7e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800eb82:	6022      	str	r2, [r4, #0]
 800eb84:	780b      	ldrb	r3, [r1, #0]
 800eb86:	f805 3b01 	strb.w	r3, [r5], #1
 800eb8a:	e7de      	b.n	800eb4a <_scanf_i+0x10e>
 800eb8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb90:	4631      	mov	r1, r6
 800eb92:	4650      	mov	r0, sl
 800eb94:	4798      	blx	r3
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d0df      	beq.n	800eb5a <_scanf_i+0x11e>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	05d9      	lsls	r1, r3, #23
 800eb9e:	d50d      	bpl.n	800ebbc <_scanf_i+0x180>
 800eba0:	42bd      	cmp	r5, r7
 800eba2:	d909      	bls.n	800ebb8 <_scanf_i+0x17c>
 800eba4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebac:	4632      	mov	r2, r6
 800ebae:	4650      	mov	r0, sl
 800ebb0:	4798      	blx	r3
 800ebb2:	f105 39ff 	add.w	r9, r5, #4294967295
 800ebb6:	464d      	mov	r5, r9
 800ebb8:	42bd      	cmp	r5, r7
 800ebba:	d028      	beq.n	800ec0e <_scanf_i+0x1d2>
 800ebbc:	6822      	ldr	r2, [r4, #0]
 800ebbe:	f012 0210 	ands.w	r2, r2, #16
 800ebc2:	d113      	bne.n	800ebec <_scanf_i+0x1b0>
 800ebc4:	702a      	strb	r2, [r5, #0]
 800ebc6:	6863      	ldr	r3, [r4, #4]
 800ebc8:	9e01      	ldr	r6, [sp, #4]
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4650      	mov	r0, sl
 800ebce:	47b0      	blx	r6
 800ebd0:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd4:	6821      	ldr	r1, [r4, #0]
 800ebd6:	1d1a      	adds	r2, r3, #4
 800ebd8:	f8c8 2000 	str.w	r2, [r8]
 800ebdc:	f011 0f20 	tst.w	r1, #32
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	d00f      	beq.n	800ec04 <_scanf_i+0x1c8>
 800ebe4:	6018      	str	r0, [r3, #0]
 800ebe6:	68e3      	ldr	r3, [r4, #12]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	60e3      	str	r3, [r4, #12]
 800ebec:	6923      	ldr	r3, [r4, #16]
 800ebee:	1bed      	subs	r5, r5, r7
 800ebf0:	445d      	add	r5, fp
 800ebf2:	442b      	add	r3, r5
 800ebf4:	6123      	str	r3, [r4, #16]
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	b007      	add	sp, #28
 800ebfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebfe:	f04f 0b00 	mov.w	fp, #0
 800ec02:	e7ca      	b.n	800eb9a <_scanf_i+0x15e>
 800ec04:	07ca      	lsls	r2, r1, #31
 800ec06:	bf4c      	ite	mi
 800ec08:	8018      	strhmi	r0, [r3, #0]
 800ec0a:	6018      	strpl	r0, [r3, #0]
 800ec0c:	e7eb      	b.n	800ebe6 <_scanf_i+0x1aa>
 800ec0e:	2001      	movs	r0, #1
 800ec10:	e7f2      	b.n	800ebf8 <_scanf_i+0x1bc>
 800ec12:	bf00      	nop
 800ec14:	08010ad4 	.word	0x08010ad4
 800ec18:	0800d889 	.word	0x0800d889
 800ec1c:	0800f025 	.word	0x0800f025
 800ec20:	080116d9 	.word	0x080116d9

0800ec24 <__sflush_r>:
 800ec24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2c:	0716      	lsls	r6, r2, #28
 800ec2e:	4605      	mov	r5, r0
 800ec30:	460c      	mov	r4, r1
 800ec32:	d454      	bmi.n	800ecde <__sflush_r+0xba>
 800ec34:	684b      	ldr	r3, [r1, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	dc02      	bgt.n	800ec40 <__sflush_r+0x1c>
 800ec3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	dd48      	ble.n	800ecd2 <__sflush_r+0xae>
 800ec40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	d045      	beq.n	800ecd2 <__sflush_r+0xae>
 800ec46:	2300      	movs	r3, #0
 800ec48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec4c:	682f      	ldr	r7, [r5, #0]
 800ec4e:	6a21      	ldr	r1, [r4, #32]
 800ec50:	602b      	str	r3, [r5, #0]
 800ec52:	d030      	beq.n	800ecb6 <__sflush_r+0x92>
 800ec54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	0759      	lsls	r1, r3, #29
 800ec5a:	d505      	bpl.n	800ec68 <__sflush_r+0x44>
 800ec5c:	6863      	ldr	r3, [r4, #4]
 800ec5e:	1ad2      	subs	r2, r2, r3
 800ec60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec62:	b10b      	cbz	r3, 800ec68 <__sflush_r+0x44>
 800ec64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec66:	1ad2      	subs	r2, r2, r3
 800ec68:	2300      	movs	r3, #0
 800ec6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec6c:	6a21      	ldr	r1, [r4, #32]
 800ec6e:	4628      	mov	r0, r5
 800ec70:	47b0      	blx	r6
 800ec72:	1c43      	adds	r3, r0, #1
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	d106      	bne.n	800ec86 <__sflush_r+0x62>
 800ec78:	6829      	ldr	r1, [r5, #0]
 800ec7a:	291d      	cmp	r1, #29
 800ec7c:	d82b      	bhi.n	800ecd6 <__sflush_r+0xb2>
 800ec7e:	4a2a      	ldr	r2, [pc, #168]	@ (800ed28 <__sflush_r+0x104>)
 800ec80:	410a      	asrs	r2, r1
 800ec82:	07d6      	lsls	r6, r2, #31
 800ec84:	d427      	bmi.n	800ecd6 <__sflush_r+0xb2>
 800ec86:	2200      	movs	r2, #0
 800ec88:	6062      	str	r2, [r4, #4]
 800ec8a:	04d9      	lsls	r1, r3, #19
 800ec8c:	6922      	ldr	r2, [r4, #16]
 800ec8e:	6022      	str	r2, [r4, #0]
 800ec90:	d504      	bpl.n	800ec9c <__sflush_r+0x78>
 800ec92:	1c42      	adds	r2, r0, #1
 800ec94:	d101      	bne.n	800ec9a <__sflush_r+0x76>
 800ec96:	682b      	ldr	r3, [r5, #0]
 800ec98:	b903      	cbnz	r3, 800ec9c <__sflush_r+0x78>
 800ec9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec9e:	602f      	str	r7, [r5, #0]
 800eca0:	b1b9      	cbz	r1, 800ecd2 <__sflush_r+0xae>
 800eca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eca6:	4299      	cmp	r1, r3
 800eca8:	d002      	beq.n	800ecb0 <__sflush_r+0x8c>
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f7ff f8ba 	bl	800de24 <_free_r>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecb4:	e00d      	b.n	800ecd2 <__sflush_r+0xae>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4628      	mov	r0, r5
 800ecba:	47b0      	blx	r6
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	1c50      	adds	r0, r2, #1
 800ecc0:	d1c9      	bne.n	800ec56 <__sflush_r+0x32>
 800ecc2:	682b      	ldr	r3, [r5, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d0c6      	beq.n	800ec56 <__sflush_r+0x32>
 800ecc8:	2b1d      	cmp	r3, #29
 800ecca:	d001      	beq.n	800ecd0 <__sflush_r+0xac>
 800eccc:	2b16      	cmp	r3, #22
 800ecce:	d11e      	bne.n	800ed0e <__sflush_r+0xea>
 800ecd0:	602f      	str	r7, [r5, #0]
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	e022      	b.n	800ed1c <__sflush_r+0xf8>
 800ecd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecda:	b21b      	sxth	r3, r3
 800ecdc:	e01b      	b.n	800ed16 <__sflush_r+0xf2>
 800ecde:	690f      	ldr	r7, [r1, #16]
 800ece0:	2f00      	cmp	r7, #0
 800ece2:	d0f6      	beq.n	800ecd2 <__sflush_r+0xae>
 800ece4:	0793      	lsls	r3, r2, #30
 800ece6:	680e      	ldr	r6, [r1, #0]
 800ece8:	bf08      	it	eq
 800ecea:	694b      	ldreq	r3, [r1, #20]
 800ecec:	600f      	str	r7, [r1, #0]
 800ecee:	bf18      	it	ne
 800ecf0:	2300      	movne	r3, #0
 800ecf2:	eba6 0807 	sub.w	r8, r6, r7
 800ecf6:	608b      	str	r3, [r1, #8]
 800ecf8:	f1b8 0f00 	cmp.w	r8, #0
 800ecfc:	dde9      	ble.n	800ecd2 <__sflush_r+0xae>
 800ecfe:	6a21      	ldr	r1, [r4, #32]
 800ed00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ed02:	4643      	mov	r3, r8
 800ed04:	463a      	mov	r2, r7
 800ed06:	4628      	mov	r0, r5
 800ed08:	47b0      	blx	r6
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	dc08      	bgt.n	800ed20 <__sflush_r+0xfc>
 800ed0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed16:	81a3      	strh	r3, [r4, #12]
 800ed18:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed20:	4407      	add	r7, r0
 800ed22:	eba8 0800 	sub.w	r8, r8, r0
 800ed26:	e7e7      	b.n	800ecf8 <__sflush_r+0xd4>
 800ed28:	dfbffffe 	.word	0xdfbffffe

0800ed2c <_fflush_r>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	690b      	ldr	r3, [r1, #16]
 800ed30:	4605      	mov	r5, r0
 800ed32:	460c      	mov	r4, r1
 800ed34:	b913      	cbnz	r3, 800ed3c <_fflush_r+0x10>
 800ed36:	2500      	movs	r5, #0
 800ed38:	4628      	mov	r0, r5
 800ed3a:	bd38      	pop	{r3, r4, r5, pc}
 800ed3c:	b118      	cbz	r0, 800ed46 <_fflush_r+0x1a>
 800ed3e:	6a03      	ldr	r3, [r0, #32]
 800ed40:	b90b      	cbnz	r3, 800ed46 <_fflush_r+0x1a>
 800ed42:	f7fe fe39 	bl	800d9b8 <__sinit>
 800ed46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d0f3      	beq.n	800ed36 <_fflush_r+0xa>
 800ed4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed50:	07d0      	lsls	r0, r2, #31
 800ed52:	d404      	bmi.n	800ed5e <_fflush_r+0x32>
 800ed54:	0599      	lsls	r1, r3, #22
 800ed56:	d402      	bmi.n	800ed5e <_fflush_r+0x32>
 800ed58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed5a:	f7ff f834 	bl	800ddc6 <__retarget_lock_acquire_recursive>
 800ed5e:	4628      	mov	r0, r5
 800ed60:	4621      	mov	r1, r4
 800ed62:	f7ff ff5f 	bl	800ec24 <__sflush_r>
 800ed66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed68:	07da      	lsls	r2, r3, #31
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	d4e4      	bmi.n	800ed38 <_fflush_r+0xc>
 800ed6e:	89a3      	ldrh	r3, [r4, #12]
 800ed70:	059b      	lsls	r3, r3, #22
 800ed72:	d4e1      	bmi.n	800ed38 <_fflush_r+0xc>
 800ed74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed76:	f7ff f827 	bl	800ddc8 <__retarget_lock_release_recursive>
 800ed7a:	e7dd      	b.n	800ed38 <_fflush_r+0xc>

0800ed7c <fiprintf>:
 800ed7c:	b40e      	push	{r1, r2, r3}
 800ed7e:	b503      	push	{r0, r1, lr}
 800ed80:	4601      	mov	r1, r0
 800ed82:	ab03      	add	r3, sp, #12
 800ed84:	4805      	ldr	r0, [pc, #20]	@ (800ed9c <fiprintf+0x20>)
 800ed86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed8a:	6800      	ldr	r0, [r0, #0]
 800ed8c:	9301      	str	r3, [sp, #4]
 800ed8e:	f000 f975 	bl	800f07c <_vfiprintf_r>
 800ed92:	b002      	add	sp, #8
 800ed94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed98:	b003      	add	sp, #12
 800ed9a:	4770      	bx	lr
 800ed9c:	2000041c 	.word	0x2000041c

0800eda0 <__sccl>:
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	780b      	ldrb	r3, [r1, #0]
 800eda4:	4604      	mov	r4, r0
 800eda6:	2b5e      	cmp	r3, #94	@ 0x5e
 800eda8:	bf0b      	itete	eq
 800edaa:	784b      	ldrbeq	r3, [r1, #1]
 800edac:	1c4a      	addne	r2, r1, #1
 800edae:	1c8a      	addeq	r2, r1, #2
 800edb0:	2100      	movne	r1, #0
 800edb2:	bf08      	it	eq
 800edb4:	2101      	moveq	r1, #1
 800edb6:	3801      	subs	r0, #1
 800edb8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800edbc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800edc0:	42a8      	cmp	r0, r5
 800edc2:	d1fb      	bne.n	800edbc <__sccl+0x1c>
 800edc4:	b90b      	cbnz	r3, 800edca <__sccl+0x2a>
 800edc6:	1e50      	subs	r0, r2, #1
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
 800edca:	f081 0101 	eor.w	r1, r1, #1
 800edce:	54e1      	strb	r1, [r4, r3]
 800edd0:	4610      	mov	r0, r2
 800edd2:	4602      	mov	r2, r0
 800edd4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800edd8:	2d2d      	cmp	r5, #45	@ 0x2d
 800edda:	d005      	beq.n	800ede8 <__sccl+0x48>
 800eddc:	2d5d      	cmp	r5, #93	@ 0x5d
 800edde:	d016      	beq.n	800ee0e <__sccl+0x6e>
 800ede0:	2d00      	cmp	r5, #0
 800ede2:	d0f1      	beq.n	800edc8 <__sccl+0x28>
 800ede4:	462b      	mov	r3, r5
 800ede6:	e7f2      	b.n	800edce <__sccl+0x2e>
 800ede8:	7846      	ldrb	r6, [r0, #1]
 800edea:	2e5d      	cmp	r6, #93	@ 0x5d
 800edec:	d0fa      	beq.n	800ede4 <__sccl+0x44>
 800edee:	42b3      	cmp	r3, r6
 800edf0:	dcf8      	bgt.n	800ede4 <__sccl+0x44>
 800edf2:	3002      	adds	r0, #2
 800edf4:	461a      	mov	r2, r3
 800edf6:	3201      	adds	r2, #1
 800edf8:	4296      	cmp	r6, r2
 800edfa:	54a1      	strb	r1, [r4, r2]
 800edfc:	dcfb      	bgt.n	800edf6 <__sccl+0x56>
 800edfe:	1af2      	subs	r2, r6, r3
 800ee00:	3a01      	subs	r2, #1
 800ee02:	1c5d      	adds	r5, r3, #1
 800ee04:	42b3      	cmp	r3, r6
 800ee06:	bfa8      	it	ge
 800ee08:	2200      	movge	r2, #0
 800ee0a:	18ab      	adds	r3, r5, r2
 800ee0c:	e7e1      	b.n	800edd2 <__sccl+0x32>
 800ee0e:	4610      	mov	r0, r2
 800ee10:	e7da      	b.n	800edc8 <__sccl+0x28>

0800ee12 <__submore>:
 800ee12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee16:	460c      	mov	r4, r1
 800ee18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ee1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee1e:	4299      	cmp	r1, r3
 800ee20:	d11d      	bne.n	800ee5e <__submore+0x4c>
 800ee22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ee26:	f7ff f871 	bl	800df0c <_malloc_r>
 800ee2a:	b918      	cbnz	r0, 800ee34 <__submore+0x22>
 800ee2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee38:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ee3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ee3e:	6360      	str	r0, [r4, #52]	@ 0x34
 800ee40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ee44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ee48:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ee4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ee50:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ee54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ee58:	6020      	str	r0, [r4, #0]
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	e7e8      	b.n	800ee30 <__submore+0x1e>
 800ee5e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ee60:	0077      	lsls	r7, r6, #1
 800ee62:	463a      	mov	r2, r7
 800ee64:	f000 f841 	bl	800eeea <_realloc_r>
 800ee68:	4605      	mov	r5, r0
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d0de      	beq.n	800ee2c <__submore+0x1a>
 800ee6e:	eb00 0806 	add.w	r8, r0, r6
 800ee72:	4601      	mov	r1, r0
 800ee74:	4632      	mov	r2, r6
 800ee76:	4640      	mov	r0, r8
 800ee78:	f7fe ffa7 	bl	800ddca <memcpy>
 800ee7c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ee80:	f8c4 8000 	str.w	r8, [r4]
 800ee84:	e7e9      	b.n	800ee5a <__submore+0x48>

0800ee86 <memmove>:
 800ee86:	4288      	cmp	r0, r1
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	eb01 0402 	add.w	r4, r1, r2
 800ee8e:	d902      	bls.n	800ee96 <memmove+0x10>
 800ee90:	4284      	cmp	r4, r0
 800ee92:	4623      	mov	r3, r4
 800ee94:	d807      	bhi.n	800eea6 <memmove+0x20>
 800ee96:	1e43      	subs	r3, r0, #1
 800ee98:	42a1      	cmp	r1, r4
 800ee9a:	d008      	beq.n	800eeae <memmove+0x28>
 800ee9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eea0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eea4:	e7f8      	b.n	800ee98 <memmove+0x12>
 800eea6:	4402      	add	r2, r0
 800eea8:	4601      	mov	r1, r0
 800eeaa:	428a      	cmp	r2, r1
 800eeac:	d100      	bne.n	800eeb0 <memmove+0x2a>
 800eeae:	bd10      	pop	{r4, pc}
 800eeb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eeb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eeb8:	e7f7      	b.n	800eeaa <memmove+0x24>
	...

0800eebc <_sbrk_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4d06      	ldr	r5, [pc, #24]	@ (800eed8 <_sbrk_r+0x1c>)
 800eec0:	2300      	movs	r3, #0
 800eec2:	4604      	mov	r4, r0
 800eec4:	4608      	mov	r0, r1
 800eec6:	602b      	str	r3, [r5, #0]
 800eec8:	f7f6 fbaa 	bl	8005620 <_sbrk>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d102      	bne.n	800eed6 <_sbrk_r+0x1a>
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	b103      	cbz	r3, 800eed6 <_sbrk_r+0x1a>
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	200011fc 	.word	0x200011fc

0800eedc <abort>:
 800eedc:	b508      	push	{r3, lr}
 800eede:	2006      	movs	r0, #6
 800eee0:	f000 faa0 	bl	800f424 <raise>
 800eee4:	2001      	movs	r0, #1
 800eee6:	f7f6 fb23 	bl	8005530 <_exit>

0800eeea <_realloc_r>:
 800eeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeee:	4680      	mov	r8, r0
 800eef0:	4615      	mov	r5, r2
 800eef2:	460c      	mov	r4, r1
 800eef4:	b921      	cbnz	r1, 800ef00 <_realloc_r+0x16>
 800eef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eefa:	4611      	mov	r1, r2
 800eefc:	f7ff b806 	b.w	800df0c <_malloc_r>
 800ef00:	b92a      	cbnz	r2, 800ef0e <_realloc_r+0x24>
 800ef02:	f7fe ff8f 	bl	800de24 <_free_r>
 800ef06:	2400      	movs	r4, #0
 800ef08:	4620      	mov	r0, r4
 800ef0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef0e:	f000 faa5 	bl	800f45c <_malloc_usable_size_r>
 800ef12:	4285      	cmp	r5, r0
 800ef14:	4606      	mov	r6, r0
 800ef16:	d802      	bhi.n	800ef1e <_realloc_r+0x34>
 800ef18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ef1c:	d8f4      	bhi.n	800ef08 <_realloc_r+0x1e>
 800ef1e:	4629      	mov	r1, r5
 800ef20:	4640      	mov	r0, r8
 800ef22:	f7fe fff3 	bl	800df0c <_malloc_r>
 800ef26:	4607      	mov	r7, r0
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d0ec      	beq.n	800ef06 <_realloc_r+0x1c>
 800ef2c:	42b5      	cmp	r5, r6
 800ef2e:	462a      	mov	r2, r5
 800ef30:	4621      	mov	r1, r4
 800ef32:	bf28      	it	cs
 800ef34:	4632      	movcs	r2, r6
 800ef36:	f7fe ff48 	bl	800ddca <memcpy>
 800ef3a:	4621      	mov	r1, r4
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	f7fe ff71 	bl	800de24 <_free_r>
 800ef42:	463c      	mov	r4, r7
 800ef44:	e7e0      	b.n	800ef08 <_realloc_r+0x1e>
	...

0800ef48 <_strtoul_l.constprop.0>:
 800ef48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef4c:	4e34      	ldr	r6, [pc, #208]	@ (800f020 <_strtoul_l.constprop.0+0xd8>)
 800ef4e:	4686      	mov	lr, r0
 800ef50:	460d      	mov	r5, r1
 800ef52:	4628      	mov	r0, r5
 800ef54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef58:	5d37      	ldrb	r7, [r6, r4]
 800ef5a:	f017 0708 	ands.w	r7, r7, #8
 800ef5e:	d1f8      	bne.n	800ef52 <_strtoul_l.constprop.0+0xa>
 800ef60:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef62:	d12f      	bne.n	800efc4 <_strtoul_l.constprop.0+0x7c>
 800ef64:	782c      	ldrb	r4, [r5, #0]
 800ef66:	2701      	movs	r7, #1
 800ef68:	1c85      	adds	r5, r0, #2
 800ef6a:	f033 0010 	bics.w	r0, r3, #16
 800ef6e:	d109      	bne.n	800ef84 <_strtoul_l.constprop.0+0x3c>
 800ef70:	2c30      	cmp	r4, #48	@ 0x30
 800ef72:	d12c      	bne.n	800efce <_strtoul_l.constprop.0+0x86>
 800ef74:	7828      	ldrb	r0, [r5, #0]
 800ef76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ef7a:	2858      	cmp	r0, #88	@ 0x58
 800ef7c:	d127      	bne.n	800efce <_strtoul_l.constprop.0+0x86>
 800ef7e:	786c      	ldrb	r4, [r5, #1]
 800ef80:	2310      	movs	r3, #16
 800ef82:	3502      	adds	r5, #2
 800ef84:	f04f 38ff 	mov.w	r8, #4294967295
 800ef88:	2600      	movs	r6, #0
 800ef8a:	fbb8 f8f3 	udiv	r8, r8, r3
 800ef8e:	fb03 f908 	mul.w	r9, r3, r8
 800ef92:	ea6f 0909 	mvn.w	r9, r9
 800ef96:	4630      	mov	r0, r6
 800ef98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ef9c:	f1bc 0f09 	cmp.w	ip, #9
 800efa0:	d81c      	bhi.n	800efdc <_strtoul_l.constprop.0+0x94>
 800efa2:	4664      	mov	r4, ip
 800efa4:	42a3      	cmp	r3, r4
 800efa6:	dd2a      	ble.n	800effe <_strtoul_l.constprop.0+0xb6>
 800efa8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800efac:	d007      	beq.n	800efbe <_strtoul_l.constprop.0+0x76>
 800efae:	4580      	cmp	r8, r0
 800efb0:	d322      	bcc.n	800eff8 <_strtoul_l.constprop.0+0xb0>
 800efb2:	d101      	bne.n	800efb8 <_strtoul_l.constprop.0+0x70>
 800efb4:	45a1      	cmp	r9, r4
 800efb6:	db1f      	blt.n	800eff8 <_strtoul_l.constprop.0+0xb0>
 800efb8:	fb00 4003 	mla	r0, r0, r3, r4
 800efbc:	2601      	movs	r6, #1
 800efbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efc2:	e7e9      	b.n	800ef98 <_strtoul_l.constprop.0+0x50>
 800efc4:	2c2b      	cmp	r4, #43	@ 0x2b
 800efc6:	bf04      	itt	eq
 800efc8:	782c      	ldrbeq	r4, [r5, #0]
 800efca:	1c85      	addeq	r5, r0, #2
 800efcc:	e7cd      	b.n	800ef6a <_strtoul_l.constprop.0+0x22>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1d8      	bne.n	800ef84 <_strtoul_l.constprop.0+0x3c>
 800efd2:	2c30      	cmp	r4, #48	@ 0x30
 800efd4:	bf0c      	ite	eq
 800efd6:	2308      	moveq	r3, #8
 800efd8:	230a      	movne	r3, #10
 800efda:	e7d3      	b.n	800ef84 <_strtoul_l.constprop.0+0x3c>
 800efdc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800efe0:	f1bc 0f19 	cmp.w	ip, #25
 800efe4:	d801      	bhi.n	800efea <_strtoul_l.constprop.0+0xa2>
 800efe6:	3c37      	subs	r4, #55	@ 0x37
 800efe8:	e7dc      	b.n	800efa4 <_strtoul_l.constprop.0+0x5c>
 800efea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800efee:	f1bc 0f19 	cmp.w	ip, #25
 800eff2:	d804      	bhi.n	800effe <_strtoul_l.constprop.0+0xb6>
 800eff4:	3c57      	subs	r4, #87	@ 0x57
 800eff6:	e7d5      	b.n	800efa4 <_strtoul_l.constprop.0+0x5c>
 800eff8:	f04f 36ff 	mov.w	r6, #4294967295
 800effc:	e7df      	b.n	800efbe <_strtoul_l.constprop.0+0x76>
 800effe:	1c73      	adds	r3, r6, #1
 800f000:	d106      	bne.n	800f010 <_strtoul_l.constprop.0+0xc8>
 800f002:	2322      	movs	r3, #34	@ 0x22
 800f004:	f8ce 3000 	str.w	r3, [lr]
 800f008:	4630      	mov	r0, r6
 800f00a:	b932      	cbnz	r2, 800f01a <_strtoul_l.constprop.0+0xd2>
 800f00c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f010:	b107      	cbz	r7, 800f014 <_strtoul_l.constprop.0+0xcc>
 800f012:	4240      	negs	r0, r0
 800f014:	2a00      	cmp	r2, #0
 800f016:	d0f9      	beq.n	800f00c <_strtoul_l.constprop.0+0xc4>
 800f018:	b106      	cbz	r6, 800f01c <_strtoul_l.constprop.0+0xd4>
 800f01a:	1e69      	subs	r1, r5, #1
 800f01c:	6011      	str	r1, [r2, #0]
 800f01e:	e7f5      	b.n	800f00c <_strtoul_l.constprop.0+0xc4>
 800f020:	080114e9 	.word	0x080114e9

0800f024 <_strtoul_r>:
 800f024:	f7ff bf90 	b.w	800ef48 <_strtoul_l.constprop.0>

0800f028 <__sfputc_r>:
 800f028:	6893      	ldr	r3, [r2, #8]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	b410      	push	{r4}
 800f030:	6093      	str	r3, [r2, #8]
 800f032:	da08      	bge.n	800f046 <__sfputc_r+0x1e>
 800f034:	6994      	ldr	r4, [r2, #24]
 800f036:	42a3      	cmp	r3, r4
 800f038:	db01      	blt.n	800f03e <__sfputc_r+0x16>
 800f03a:	290a      	cmp	r1, #10
 800f03c:	d103      	bne.n	800f046 <__sfputc_r+0x1e>
 800f03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f042:	f000 b933 	b.w	800f2ac <__swbuf_r>
 800f046:	6813      	ldr	r3, [r2, #0]
 800f048:	1c58      	adds	r0, r3, #1
 800f04a:	6010      	str	r0, [r2, #0]
 800f04c:	7019      	strb	r1, [r3, #0]
 800f04e:	4608      	mov	r0, r1
 800f050:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <__sfputs_r>:
 800f056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f058:	4606      	mov	r6, r0
 800f05a:	460f      	mov	r7, r1
 800f05c:	4614      	mov	r4, r2
 800f05e:	18d5      	adds	r5, r2, r3
 800f060:	42ac      	cmp	r4, r5
 800f062:	d101      	bne.n	800f068 <__sfputs_r+0x12>
 800f064:	2000      	movs	r0, #0
 800f066:	e007      	b.n	800f078 <__sfputs_r+0x22>
 800f068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f06c:	463a      	mov	r2, r7
 800f06e:	4630      	mov	r0, r6
 800f070:	f7ff ffda 	bl	800f028 <__sfputc_r>
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	d1f3      	bne.n	800f060 <__sfputs_r+0xa>
 800f078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f07c <_vfiprintf_r>:
 800f07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f080:	460d      	mov	r5, r1
 800f082:	b09d      	sub	sp, #116	@ 0x74
 800f084:	4614      	mov	r4, r2
 800f086:	4698      	mov	r8, r3
 800f088:	4606      	mov	r6, r0
 800f08a:	b118      	cbz	r0, 800f094 <_vfiprintf_r+0x18>
 800f08c:	6a03      	ldr	r3, [r0, #32]
 800f08e:	b90b      	cbnz	r3, 800f094 <_vfiprintf_r+0x18>
 800f090:	f7fe fc92 	bl	800d9b8 <__sinit>
 800f094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f096:	07d9      	lsls	r1, r3, #31
 800f098:	d405      	bmi.n	800f0a6 <_vfiprintf_r+0x2a>
 800f09a:	89ab      	ldrh	r3, [r5, #12]
 800f09c:	059a      	lsls	r2, r3, #22
 800f09e:	d402      	bmi.n	800f0a6 <_vfiprintf_r+0x2a>
 800f0a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0a2:	f7fe fe90 	bl	800ddc6 <__retarget_lock_acquire_recursive>
 800f0a6:	89ab      	ldrh	r3, [r5, #12]
 800f0a8:	071b      	lsls	r3, r3, #28
 800f0aa:	d501      	bpl.n	800f0b0 <_vfiprintf_r+0x34>
 800f0ac:	692b      	ldr	r3, [r5, #16]
 800f0ae:	b99b      	cbnz	r3, 800f0d8 <_vfiprintf_r+0x5c>
 800f0b0:	4629      	mov	r1, r5
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f000 f938 	bl	800f328 <__swsetup_r>
 800f0b8:	b170      	cbz	r0, 800f0d8 <_vfiprintf_r+0x5c>
 800f0ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0bc:	07dc      	lsls	r4, r3, #31
 800f0be:	d504      	bpl.n	800f0ca <_vfiprintf_r+0x4e>
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	b01d      	add	sp, #116	@ 0x74
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	0598      	lsls	r0, r3, #22
 800f0ce:	d4f7      	bmi.n	800f0c0 <_vfiprintf_r+0x44>
 800f0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0d2:	f7fe fe79 	bl	800ddc8 <__retarget_lock_release_recursive>
 800f0d6:	e7f3      	b.n	800f0c0 <_vfiprintf_r+0x44>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0dc:	2320      	movs	r3, #32
 800f0de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0e6:	2330      	movs	r3, #48	@ 0x30
 800f0e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f298 <_vfiprintf_r+0x21c>
 800f0ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0f0:	f04f 0901 	mov.w	r9, #1
 800f0f4:	4623      	mov	r3, r4
 800f0f6:	469a      	mov	sl, r3
 800f0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0fc:	b10a      	cbz	r2, 800f102 <_vfiprintf_r+0x86>
 800f0fe:	2a25      	cmp	r2, #37	@ 0x25
 800f100:	d1f9      	bne.n	800f0f6 <_vfiprintf_r+0x7a>
 800f102:	ebba 0b04 	subs.w	fp, sl, r4
 800f106:	d00b      	beq.n	800f120 <_vfiprintf_r+0xa4>
 800f108:	465b      	mov	r3, fp
 800f10a:	4622      	mov	r2, r4
 800f10c:	4629      	mov	r1, r5
 800f10e:	4630      	mov	r0, r6
 800f110:	f7ff ffa1 	bl	800f056 <__sfputs_r>
 800f114:	3001      	adds	r0, #1
 800f116:	f000 80a7 	beq.w	800f268 <_vfiprintf_r+0x1ec>
 800f11a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f11c:	445a      	add	r2, fp
 800f11e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f120:	f89a 3000 	ldrb.w	r3, [sl]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 809f 	beq.w	800f268 <_vfiprintf_r+0x1ec>
 800f12a:	2300      	movs	r3, #0
 800f12c:	f04f 32ff 	mov.w	r2, #4294967295
 800f130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f134:	f10a 0a01 	add.w	sl, sl, #1
 800f138:	9304      	str	r3, [sp, #16]
 800f13a:	9307      	str	r3, [sp, #28]
 800f13c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f140:	931a      	str	r3, [sp, #104]	@ 0x68
 800f142:	4654      	mov	r4, sl
 800f144:	2205      	movs	r2, #5
 800f146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14a:	4853      	ldr	r0, [pc, #332]	@ (800f298 <_vfiprintf_r+0x21c>)
 800f14c:	f7f1 f858 	bl	8000200 <memchr>
 800f150:	9a04      	ldr	r2, [sp, #16]
 800f152:	b9d8      	cbnz	r0, 800f18c <_vfiprintf_r+0x110>
 800f154:	06d1      	lsls	r1, r2, #27
 800f156:	bf44      	itt	mi
 800f158:	2320      	movmi	r3, #32
 800f15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f15e:	0713      	lsls	r3, r2, #28
 800f160:	bf44      	itt	mi
 800f162:	232b      	movmi	r3, #43	@ 0x2b
 800f164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f168:	f89a 3000 	ldrb.w	r3, [sl]
 800f16c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f16e:	d015      	beq.n	800f19c <_vfiprintf_r+0x120>
 800f170:	9a07      	ldr	r2, [sp, #28]
 800f172:	4654      	mov	r4, sl
 800f174:	2000      	movs	r0, #0
 800f176:	f04f 0c0a 	mov.w	ip, #10
 800f17a:	4621      	mov	r1, r4
 800f17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f180:	3b30      	subs	r3, #48	@ 0x30
 800f182:	2b09      	cmp	r3, #9
 800f184:	d94b      	bls.n	800f21e <_vfiprintf_r+0x1a2>
 800f186:	b1b0      	cbz	r0, 800f1b6 <_vfiprintf_r+0x13a>
 800f188:	9207      	str	r2, [sp, #28]
 800f18a:	e014      	b.n	800f1b6 <_vfiprintf_r+0x13a>
 800f18c:	eba0 0308 	sub.w	r3, r0, r8
 800f190:	fa09 f303 	lsl.w	r3, r9, r3
 800f194:	4313      	orrs	r3, r2
 800f196:	9304      	str	r3, [sp, #16]
 800f198:	46a2      	mov	sl, r4
 800f19a:	e7d2      	b.n	800f142 <_vfiprintf_r+0xc6>
 800f19c:	9b03      	ldr	r3, [sp, #12]
 800f19e:	1d19      	adds	r1, r3, #4
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	9103      	str	r1, [sp, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	bfbb      	ittet	lt
 800f1a8:	425b      	neglt	r3, r3
 800f1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f1ae:	9307      	strge	r3, [sp, #28]
 800f1b0:	9307      	strlt	r3, [sp, #28]
 800f1b2:	bfb8      	it	lt
 800f1b4:	9204      	strlt	r2, [sp, #16]
 800f1b6:	7823      	ldrb	r3, [r4, #0]
 800f1b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1ba:	d10a      	bne.n	800f1d2 <_vfiprintf_r+0x156>
 800f1bc:	7863      	ldrb	r3, [r4, #1]
 800f1be:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1c0:	d132      	bne.n	800f228 <_vfiprintf_r+0x1ac>
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	1d1a      	adds	r2, r3, #4
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	9203      	str	r2, [sp, #12]
 800f1ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1ce:	3402      	adds	r4, #2
 800f1d0:	9305      	str	r3, [sp, #20]
 800f1d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f2a8 <_vfiprintf_r+0x22c>
 800f1d6:	7821      	ldrb	r1, [r4, #0]
 800f1d8:	2203      	movs	r2, #3
 800f1da:	4650      	mov	r0, sl
 800f1dc:	f7f1 f810 	bl	8000200 <memchr>
 800f1e0:	b138      	cbz	r0, 800f1f2 <_vfiprintf_r+0x176>
 800f1e2:	9b04      	ldr	r3, [sp, #16]
 800f1e4:	eba0 000a 	sub.w	r0, r0, sl
 800f1e8:	2240      	movs	r2, #64	@ 0x40
 800f1ea:	4082      	lsls	r2, r0
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	3401      	adds	r4, #1
 800f1f0:	9304      	str	r3, [sp, #16]
 800f1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f6:	4829      	ldr	r0, [pc, #164]	@ (800f29c <_vfiprintf_r+0x220>)
 800f1f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1fc:	2206      	movs	r2, #6
 800f1fe:	f7f0 ffff 	bl	8000200 <memchr>
 800f202:	2800      	cmp	r0, #0
 800f204:	d03f      	beq.n	800f286 <_vfiprintf_r+0x20a>
 800f206:	4b26      	ldr	r3, [pc, #152]	@ (800f2a0 <_vfiprintf_r+0x224>)
 800f208:	bb1b      	cbnz	r3, 800f252 <_vfiprintf_r+0x1d6>
 800f20a:	9b03      	ldr	r3, [sp, #12]
 800f20c:	3307      	adds	r3, #7
 800f20e:	f023 0307 	bic.w	r3, r3, #7
 800f212:	3308      	adds	r3, #8
 800f214:	9303      	str	r3, [sp, #12]
 800f216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f218:	443b      	add	r3, r7
 800f21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f21c:	e76a      	b.n	800f0f4 <_vfiprintf_r+0x78>
 800f21e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f222:	460c      	mov	r4, r1
 800f224:	2001      	movs	r0, #1
 800f226:	e7a8      	b.n	800f17a <_vfiprintf_r+0xfe>
 800f228:	2300      	movs	r3, #0
 800f22a:	3401      	adds	r4, #1
 800f22c:	9305      	str	r3, [sp, #20]
 800f22e:	4619      	mov	r1, r3
 800f230:	f04f 0c0a 	mov.w	ip, #10
 800f234:	4620      	mov	r0, r4
 800f236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f23a:	3a30      	subs	r2, #48	@ 0x30
 800f23c:	2a09      	cmp	r2, #9
 800f23e:	d903      	bls.n	800f248 <_vfiprintf_r+0x1cc>
 800f240:	2b00      	cmp	r3, #0
 800f242:	d0c6      	beq.n	800f1d2 <_vfiprintf_r+0x156>
 800f244:	9105      	str	r1, [sp, #20]
 800f246:	e7c4      	b.n	800f1d2 <_vfiprintf_r+0x156>
 800f248:	fb0c 2101 	mla	r1, ip, r1, r2
 800f24c:	4604      	mov	r4, r0
 800f24e:	2301      	movs	r3, #1
 800f250:	e7f0      	b.n	800f234 <_vfiprintf_r+0x1b8>
 800f252:	ab03      	add	r3, sp, #12
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	462a      	mov	r2, r5
 800f258:	4b12      	ldr	r3, [pc, #72]	@ (800f2a4 <_vfiprintf_r+0x228>)
 800f25a:	a904      	add	r1, sp, #16
 800f25c:	4630      	mov	r0, r6
 800f25e:	f3af 8000 	nop.w
 800f262:	4607      	mov	r7, r0
 800f264:	1c78      	adds	r0, r7, #1
 800f266:	d1d6      	bne.n	800f216 <_vfiprintf_r+0x19a>
 800f268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f26a:	07d9      	lsls	r1, r3, #31
 800f26c:	d405      	bmi.n	800f27a <_vfiprintf_r+0x1fe>
 800f26e:	89ab      	ldrh	r3, [r5, #12]
 800f270:	059a      	lsls	r2, r3, #22
 800f272:	d402      	bmi.n	800f27a <_vfiprintf_r+0x1fe>
 800f274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f276:	f7fe fda7 	bl	800ddc8 <__retarget_lock_release_recursive>
 800f27a:	89ab      	ldrh	r3, [r5, #12]
 800f27c:	065b      	lsls	r3, r3, #25
 800f27e:	f53f af1f 	bmi.w	800f0c0 <_vfiprintf_r+0x44>
 800f282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f284:	e71e      	b.n	800f0c4 <_vfiprintf_r+0x48>
 800f286:	ab03      	add	r3, sp, #12
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	462a      	mov	r2, r5
 800f28c:	4b05      	ldr	r3, [pc, #20]	@ (800f2a4 <_vfiprintf_r+0x228>)
 800f28e:	a904      	add	r1, sp, #16
 800f290:	4630      	mov	r0, r6
 800f292:	f7ff fa59 	bl	800e748 <_printf_i>
 800f296:	e7e4      	b.n	800f262 <_vfiprintf_r+0x1e6>
 800f298:	08011696 	.word	0x08011696
 800f29c:	080116a0 	.word	0x080116a0
 800f2a0:	00000000 	.word	0x00000000
 800f2a4:	0800f057 	.word	0x0800f057
 800f2a8:	0801169c 	.word	0x0801169c

0800f2ac <__swbuf_r>:
 800f2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ae:	460e      	mov	r6, r1
 800f2b0:	4614      	mov	r4, r2
 800f2b2:	4605      	mov	r5, r0
 800f2b4:	b118      	cbz	r0, 800f2be <__swbuf_r+0x12>
 800f2b6:	6a03      	ldr	r3, [r0, #32]
 800f2b8:	b90b      	cbnz	r3, 800f2be <__swbuf_r+0x12>
 800f2ba:	f7fe fb7d 	bl	800d9b8 <__sinit>
 800f2be:	69a3      	ldr	r3, [r4, #24]
 800f2c0:	60a3      	str	r3, [r4, #8]
 800f2c2:	89a3      	ldrh	r3, [r4, #12]
 800f2c4:	071a      	lsls	r2, r3, #28
 800f2c6:	d501      	bpl.n	800f2cc <__swbuf_r+0x20>
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	b943      	cbnz	r3, 800f2de <__swbuf_r+0x32>
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f000 f82a 	bl	800f328 <__swsetup_r>
 800f2d4:	b118      	cbz	r0, 800f2de <__swbuf_r+0x32>
 800f2d6:	f04f 37ff 	mov.w	r7, #4294967295
 800f2da:	4638      	mov	r0, r7
 800f2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2de:	6823      	ldr	r3, [r4, #0]
 800f2e0:	6922      	ldr	r2, [r4, #16]
 800f2e2:	1a98      	subs	r0, r3, r2
 800f2e4:	6963      	ldr	r3, [r4, #20]
 800f2e6:	b2f6      	uxtb	r6, r6
 800f2e8:	4283      	cmp	r3, r0
 800f2ea:	4637      	mov	r7, r6
 800f2ec:	dc05      	bgt.n	800f2fa <__swbuf_r+0x4e>
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f7ff fd1b 	bl	800ed2c <_fflush_r>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d1ed      	bne.n	800f2d6 <__swbuf_r+0x2a>
 800f2fa:	68a3      	ldr	r3, [r4, #8]
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	60a3      	str	r3, [r4, #8]
 800f300:	6823      	ldr	r3, [r4, #0]
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	6022      	str	r2, [r4, #0]
 800f306:	701e      	strb	r6, [r3, #0]
 800f308:	6962      	ldr	r2, [r4, #20]
 800f30a:	1c43      	adds	r3, r0, #1
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d004      	beq.n	800f31a <__swbuf_r+0x6e>
 800f310:	89a3      	ldrh	r3, [r4, #12]
 800f312:	07db      	lsls	r3, r3, #31
 800f314:	d5e1      	bpl.n	800f2da <__swbuf_r+0x2e>
 800f316:	2e0a      	cmp	r6, #10
 800f318:	d1df      	bne.n	800f2da <__swbuf_r+0x2e>
 800f31a:	4621      	mov	r1, r4
 800f31c:	4628      	mov	r0, r5
 800f31e:	f7ff fd05 	bl	800ed2c <_fflush_r>
 800f322:	2800      	cmp	r0, #0
 800f324:	d0d9      	beq.n	800f2da <__swbuf_r+0x2e>
 800f326:	e7d6      	b.n	800f2d6 <__swbuf_r+0x2a>

0800f328 <__swsetup_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	4b29      	ldr	r3, [pc, #164]	@ (800f3d0 <__swsetup_r+0xa8>)
 800f32c:	4605      	mov	r5, r0
 800f32e:	6818      	ldr	r0, [r3, #0]
 800f330:	460c      	mov	r4, r1
 800f332:	b118      	cbz	r0, 800f33c <__swsetup_r+0x14>
 800f334:	6a03      	ldr	r3, [r0, #32]
 800f336:	b90b      	cbnz	r3, 800f33c <__swsetup_r+0x14>
 800f338:	f7fe fb3e 	bl	800d9b8 <__sinit>
 800f33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f340:	0719      	lsls	r1, r3, #28
 800f342:	d422      	bmi.n	800f38a <__swsetup_r+0x62>
 800f344:	06da      	lsls	r2, r3, #27
 800f346:	d407      	bmi.n	800f358 <__swsetup_r+0x30>
 800f348:	2209      	movs	r2, #9
 800f34a:	602a      	str	r2, [r5, #0]
 800f34c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f350:	81a3      	strh	r3, [r4, #12]
 800f352:	f04f 30ff 	mov.w	r0, #4294967295
 800f356:	e033      	b.n	800f3c0 <__swsetup_r+0x98>
 800f358:	0758      	lsls	r0, r3, #29
 800f35a:	d512      	bpl.n	800f382 <__swsetup_r+0x5a>
 800f35c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f35e:	b141      	cbz	r1, 800f372 <__swsetup_r+0x4a>
 800f360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f364:	4299      	cmp	r1, r3
 800f366:	d002      	beq.n	800f36e <__swsetup_r+0x46>
 800f368:	4628      	mov	r0, r5
 800f36a:	f7fe fd5b 	bl	800de24 <_free_r>
 800f36e:	2300      	movs	r3, #0
 800f370:	6363      	str	r3, [r4, #52]	@ 0x34
 800f372:	89a3      	ldrh	r3, [r4, #12]
 800f374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f378:	81a3      	strh	r3, [r4, #12]
 800f37a:	2300      	movs	r3, #0
 800f37c:	6063      	str	r3, [r4, #4]
 800f37e:	6923      	ldr	r3, [r4, #16]
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	89a3      	ldrh	r3, [r4, #12]
 800f384:	f043 0308 	orr.w	r3, r3, #8
 800f388:	81a3      	strh	r3, [r4, #12]
 800f38a:	6923      	ldr	r3, [r4, #16]
 800f38c:	b94b      	cbnz	r3, 800f3a2 <__swsetup_r+0x7a>
 800f38e:	89a3      	ldrh	r3, [r4, #12]
 800f390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f398:	d003      	beq.n	800f3a2 <__swsetup_r+0x7a>
 800f39a:	4621      	mov	r1, r4
 800f39c:	4628      	mov	r0, r5
 800f39e:	f000 f88b 	bl	800f4b8 <__smakebuf_r>
 800f3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3a6:	f013 0201 	ands.w	r2, r3, #1
 800f3aa:	d00a      	beq.n	800f3c2 <__swsetup_r+0x9a>
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	60a2      	str	r2, [r4, #8]
 800f3b0:	6962      	ldr	r2, [r4, #20]
 800f3b2:	4252      	negs	r2, r2
 800f3b4:	61a2      	str	r2, [r4, #24]
 800f3b6:	6922      	ldr	r2, [r4, #16]
 800f3b8:	b942      	cbnz	r2, 800f3cc <__swsetup_r+0xa4>
 800f3ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f3be:	d1c5      	bne.n	800f34c <__swsetup_r+0x24>
 800f3c0:	bd38      	pop	{r3, r4, r5, pc}
 800f3c2:	0799      	lsls	r1, r3, #30
 800f3c4:	bf58      	it	pl
 800f3c6:	6962      	ldrpl	r2, [r4, #20]
 800f3c8:	60a2      	str	r2, [r4, #8]
 800f3ca:	e7f4      	b.n	800f3b6 <__swsetup_r+0x8e>
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	e7f7      	b.n	800f3c0 <__swsetup_r+0x98>
 800f3d0:	2000041c 	.word	0x2000041c

0800f3d4 <_raise_r>:
 800f3d4:	291f      	cmp	r1, #31
 800f3d6:	b538      	push	{r3, r4, r5, lr}
 800f3d8:	4605      	mov	r5, r0
 800f3da:	460c      	mov	r4, r1
 800f3dc:	d904      	bls.n	800f3e8 <_raise_r+0x14>
 800f3de:	2316      	movs	r3, #22
 800f3e0:	6003      	str	r3, [r0, #0]
 800f3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e6:	bd38      	pop	{r3, r4, r5, pc}
 800f3e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f3ea:	b112      	cbz	r2, 800f3f2 <_raise_r+0x1e>
 800f3ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3f0:	b94b      	cbnz	r3, 800f406 <_raise_r+0x32>
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f000 f830 	bl	800f458 <_getpid_r>
 800f3f8:	4622      	mov	r2, r4
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f402:	f000 b817 	b.w	800f434 <_kill_r>
 800f406:	2b01      	cmp	r3, #1
 800f408:	d00a      	beq.n	800f420 <_raise_r+0x4c>
 800f40a:	1c59      	adds	r1, r3, #1
 800f40c:	d103      	bne.n	800f416 <_raise_r+0x42>
 800f40e:	2316      	movs	r3, #22
 800f410:	6003      	str	r3, [r0, #0]
 800f412:	2001      	movs	r0, #1
 800f414:	e7e7      	b.n	800f3e6 <_raise_r+0x12>
 800f416:	2100      	movs	r1, #0
 800f418:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f41c:	4620      	mov	r0, r4
 800f41e:	4798      	blx	r3
 800f420:	2000      	movs	r0, #0
 800f422:	e7e0      	b.n	800f3e6 <_raise_r+0x12>

0800f424 <raise>:
 800f424:	4b02      	ldr	r3, [pc, #8]	@ (800f430 <raise+0xc>)
 800f426:	4601      	mov	r1, r0
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	f7ff bfd3 	b.w	800f3d4 <_raise_r>
 800f42e:	bf00      	nop
 800f430:	2000041c 	.word	0x2000041c

0800f434 <_kill_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4d07      	ldr	r5, [pc, #28]	@ (800f454 <_kill_r+0x20>)
 800f438:	2300      	movs	r3, #0
 800f43a:	4604      	mov	r4, r0
 800f43c:	4608      	mov	r0, r1
 800f43e:	4611      	mov	r1, r2
 800f440:	602b      	str	r3, [r5, #0]
 800f442:	f7f6 f865 	bl	8005510 <_kill>
 800f446:	1c43      	adds	r3, r0, #1
 800f448:	d102      	bne.n	800f450 <_kill_r+0x1c>
 800f44a:	682b      	ldr	r3, [r5, #0]
 800f44c:	b103      	cbz	r3, 800f450 <_kill_r+0x1c>
 800f44e:	6023      	str	r3, [r4, #0]
 800f450:	bd38      	pop	{r3, r4, r5, pc}
 800f452:	bf00      	nop
 800f454:	200011fc 	.word	0x200011fc

0800f458 <_getpid_r>:
 800f458:	f7f6 b852 	b.w	8005500 <_getpid>

0800f45c <_malloc_usable_size_r>:
 800f45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f460:	1f18      	subs	r0, r3, #4
 800f462:	2b00      	cmp	r3, #0
 800f464:	bfbc      	itt	lt
 800f466:	580b      	ldrlt	r3, [r1, r0]
 800f468:	18c0      	addlt	r0, r0, r3
 800f46a:	4770      	bx	lr

0800f46c <__swhatbuf_r>:
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	460c      	mov	r4, r1
 800f470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f474:	2900      	cmp	r1, #0
 800f476:	b096      	sub	sp, #88	@ 0x58
 800f478:	4615      	mov	r5, r2
 800f47a:	461e      	mov	r6, r3
 800f47c:	da0d      	bge.n	800f49a <__swhatbuf_r+0x2e>
 800f47e:	89a3      	ldrh	r3, [r4, #12]
 800f480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f484:	f04f 0100 	mov.w	r1, #0
 800f488:	bf14      	ite	ne
 800f48a:	2340      	movne	r3, #64	@ 0x40
 800f48c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f490:	2000      	movs	r0, #0
 800f492:	6031      	str	r1, [r6, #0]
 800f494:	602b      	str	r3, [r5, #0]
 800f496:	b016      	add	sp, #88	@ 0x58
 800f498:	bd70      	pop	{r4, r5, r6, pc}
 800f49a:	466a      	mov	r2, sp
 800f49c:	f000 f848 	bl	800f530 <_fstat_r>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	dbec      	blt.n	800f47e <__swhatbuf_r+0x12>
 800f4a4:	9901      	ldr	r1, [sp, #4]
 800f4a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f4aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f4ae:	4259      	negs	r1, r3
 800f4b0:	4159      	adcs	r1, r3
 800f4b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4b6:	e7eb      	b.n	800f490 <__swhatbuf_r+0x24>

0800f4b8 <__smakebuf_r>:
 800f4b8:	898b      	ldrh	r3, [r1, #12]
 800f4ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4bc:	079d      	lsls	r5, r3, #30
 800f4be:	4606      	mov	r6, r0
 800f4c0:	460c      	mov	r4, r1
 800f4c2:	d507      	bpl.n	800f4d4 <__smakebuf_r+0x1c>
 800f4c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	6123      	str	r3, [r4, #16]
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	6163      	str	r3, [r4, #20]
 800f4d0:	b003      	add	sp, #12
 800f4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4d4:	ab01      	add	r3, sp, #4
 800f4d6:	466a      	mov	r2, sp
 800f4d8:	f7ff ffc8 	bl	800f46c <__swhatbuf_r>
 800f4dc:	9f00      	ldr	r7, [sp, #0]
 800f4de:	4605      	mov	r5, r0
 800f4e0:	4639      	mov	r1, r7
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7fe fd12 	bl	800df0c <_malloc_r>
 800f4e8:	b948      	cbnz	r0, 800f4fe <__smakebuf_r+0x46>
 800f4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ee:	059a      	lsls	r2, r3, #22
 800f4f0:	d4ee      	bmi.n	800f4d0 <__smakebuf_r+0x18>
 800f4f2:	f023 0303 	bic.w	r3, r3, #3
 800f4f6:	f043 0302 	orr.w	r3, r3, #2
 800f4fa:	81a3      	strh	r3, [r4, #12]
 800f4fc:	e7e2      	b.n	800f4c4 <__smakebuf_r+0xc>
 800f4fe:	89a3      	ldrh	r3, [r4, #12]
 800f500:	6020      	str	r0, [r4, #0]
 800f502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f506:	81a3      	strh	r3, [r4, #12]
 800f508:	9b01      	ldr	r3, [sp, #4]
 800f50a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f50e:	b15b      	cbz	r3, 800f528 <__smakebuf_r+0x70>
 800f510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f514:	4630      	mov	r0, r6
 800f516:	f000 f81d 	bl	800f554 <_isatty_r>
 800f51a:	b128      	cbz	r0, 800f528 <__smakebuf_r+0x70>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f023 0303 	bic.w	r3, r3, #3
 800f522:	f043 0301 	orr.w	r3, r3, #1
 800f526:	81a3      	strh	r3, [r4, #12]
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	431d      	orrs	r5, r3
 800f52c:	81a5      	strh	r5, [r4, #12]
 800f52e:	e7cf      	b.n	800f4d0 <__smakebuf_r+0x18>

0800f530 <_fstat_r>:
 800f530:	b538      	push	{r3, r4, r5, lr}
 800f532:	4d07      	ldr	r5, [pc, #28]	@ (800f550 <_fstat_r+0x20>)
 800f534:	2300      	movs	r3, #0
 800f536:	4604      	mov	r4, r0
 800f538:	4608      	mov	r0, r1
 800f53a:	4611      	mov	r1, r2
 800f53c:	602b      	str	r3, [r5, #0]
 800f53e:	f7f6 f847 	bl	80055d0 <_fstat>
 800f542:	1c43      	adds	r3, r0, #1
 800f544:	d102      	bne.n	800f54c <_fstat_r+0x1c>
 800f546:	682b      	ldr	r3, [r5, #0]
 800f548:	b103      	cbz	r3, 800f54c <_fstat_r+0x1c>
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	bd38      	pop	{r3, r4, r5, pc}
 800f54e:	bf00      	nop
 800f550:	200011fc 	.word	0x200011fc

0800f554 <_isatty_r>:
 800f554:	b538      	push	{r3, r4, r5, lr}
 800f556:	4d06      	ldr	r5, [pc, #24]	@ (800f570 <_isatty_r+0x1c>)
 800f558:	2300      	movs	r3, #0
 800f55a:	4604      	mov	r4, r0
 800f55c:	4608      	mov	r0, r1
 800f55e:	602b      	str	r3, [r5, #0]
 800f560:	f7f6 f846 	bl	80055f0 <_isatty>
 800f564:	1c43      	adds	r3, r0, #1
 800f566:	d102      	bne.n	800f56e <_isatty_r+0x1a>
 800f568:	682b      	ldr	r3, [r5, #0]
 800f56a:	b103      	cbz	r3, 800f56e <_isatty_r+0x1a>
 800f56c:	6023      	str	r3, [r4, #0]
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
 800f570:	200011fc 	.word	0x200011fc

0800f574 <_init>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	bf00      	nop
 800f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57a:	bc08      	pop	{r3}
 800f57c:	469e      	mov	lr, r3
 800f57e:	4770      	bx	lr

0800f580 <_fini>:
 800f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f582:	bf00      	nop
 800f584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f586:	bc08      	pop	{r3}
 800f588:	469e      	mov	lr, r3
 800f58a:	4770      	bx	lr
