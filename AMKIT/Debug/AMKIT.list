
AMKIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e0  0800dd50  0800dd50  0000ed50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f630  0800f630  0001213c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f630  0800f630  00010630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f638  0800f638  0001213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f638  0800f638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f63c  0800f63c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800f640  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       0000013c  10000000  0800f6a0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000998  20000060  20000060  00013060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f8  200009f8  00013060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001213c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc07  00000000  00000000  0001216c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c3f  00000000  00000000  00031d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c38  00000000  00000000  000369b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015dd  00000000  00000000  000385f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002850f  00000000  00000000  00039bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002734e  00000000  00000000  000620dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcabc  00000000  00000000  0008942a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00165ee6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d88  00000000  00000000  00165f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0016dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd38 	.word	0x0800dd38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800dd38 	.word	0x0800dd38

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <FM25V10_Select_Command>:


// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 파라미터로 위 매크로 명령어 받아서 전달하는 함수
void FM25V10_Select_Command(uint8_t command)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    // SPI CS 핀을 LOW로 설정하여
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY); // 명령어 전송
 800059a:	1df9      	adds	r1, r7, #7
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	2201      	movs	r2, #1
 80005a2:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <FM25V10_Select_Command+0x20>)
 80005a4:	f006 feef 	bl	8007386 <HAL_SPI_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000061c 	.word	0x2000061c

080005b4 <FM25V10_Set_Write_Enable>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 내부 헬퍼: 쓰기 가능 상태 설정
static void FM25V10_Set_Write_Enable(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    uint8_t CMD = CMD_WREN; // WREN 명령어 정의
 80005ba:	2306      	movs	r3, #6
 80005bc:	71fb      	strb	r3, [r7, #7]

    SPI_CS_LOW(); // CS 핀을 LOW로 설정하여 SPI 통신 시작
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <FM25V10_Set_Write_Enable+0x30>)
 80005c4:	f004 fd9c 	bl	8005100 <HAL_GPIO_WritePin>
    FM25V10_Select_Command(CMD); // WREN 명령 전송
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffe0 	bl	8000590 <FM25V10_Select_Command>
    SPI_CS_HIGH(); // CS 핀을 HIGH로 설정하여 SPI 통신 종료
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <FM25V10_Set_Write_Enable+0x30>)
 80005d6:	f004 fd93 	bl	8005100 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000

080005e8 <FM25V10_Set_Write_Disable>:

static void FM25V10_Set_Write_Disable(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
    uint8_t CMD = CMD_WRDI; // WRDI 명령어 정의
 80005ee:	2304      	movs	r3, #4
 80005f0:	71fb      	strb	r3, [r7, #7]

    SPI_CS_LOW(); // CS 핀을 LOW로 설정하여 SPI 통신 시작
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <FM25V10_Set_Write_Disable+0x30>)
 80005f8:	f004 fd82 	bl	8005100 <HAL_GPIO_WritePin>
    FM25V10_Select_Command(CMD); // WRDI 명령 전송
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffc6 	bl	8000590 <FM25V10_Select_Command>
    SPI_CS_HIGH(); // CS 핀을 HIGH로 설정하여 SPI 통신 종료
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <FM25V10_Set_Write_Disable+0x30>)
 800060a:	f004 fd79 	bl	8005100 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020000 	.word	0x40020000

0800061c <Memory_Write_Enable>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

void Memory_Write_Enable(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // FM25V10 메모리 쓰기 가능 상태로 설정
    FM25V10_Set_Write_Enable();
 8000620:	f7ff ffc8 	bl	80005b4 <FM25V10_Set_Write_Enable>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <Memory_Write_Disable>:


void Memory_Write_Disable(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    // FM25V10 메모리 쓰기 불가능 상태로 설정
    FM25V10_Set_Write_Disable();
 800062c:	f7ff ffdc 	bl	80005e8 <FM25V10_Set_Write_Disable>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <FM25V10_Write>:
// addr : 메모리 주소 (0x0000 ~ 0x1FFF)
// pData: 쓸 데이터 버퍼  
// len  : 바이트 수  
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef FM25V10_Write(uint16_t addr, const uint8_t *pData, uint16_t len)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	80fb      	strh	r3, [r7, #6]
 8000640:	4613      	mov	r3, r2
 8000642:	80bb      	strh	r3, [r7, #4]
    // 길이가 0이면 예외
    if (len == 0 || pData == NULL)
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <FM25V10_Write+0x1c>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <FM25V10_Write+0x20>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000650:	2301      	movs	r3, #1
 8000652:	e039      	b.n	80006c8 <FM25V10_Write+0x94>
    }

    // 1) 쓰기 허가
    Memory_Write_Enable();
 8000654:	f7ff ffe2 	bl	800061c <Memory_Write_Enable>

    // 2) CS LOW , FRAM 활성화
    SPI_CS_LOW();
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	481c      	ldr	r0, [pc, #112]	@ (80006d0 <FM25V10_Write+0x9c>)
 800065e:	f004 fd4f 	bl	8005100 <HAL_GPIO_WritePin>
        (addr >> 8) & 0xFF,
        (addr      ) & 0xFF
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, 3, HAL_MAX_DELAY);
#endif
    uint8_t header[4] = {
 8000662:	2302      	movs	r3, #2
 8000664:	723b      	strb	r3, [r7, #8]
        CMD_WRITE,
        (uint8_t)(addr >> 16),   // 상위 주소 바이트 (addr이 16비트라면 항상 0)
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	141b      	asrs	r3, r3, #16
 800066a:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800066c:	727b      	strb	r3, [r7, #9]
        (uint8_t)(addr >> 8),    // 중간 주소 바이트
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	b29b      	uxth	r3, r3
 8000674:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000676:	72bb      	strb	r3, [r7, #10]
        (uint8_t)(addr)          // 하위 주소 바이트
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800067c:	72fb      	strb	r3, [r7, #11]
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, sizeof(header), HAL_MAX_DELAY);
 800067e:	f107 0108 	add.w	r1, r7, #8
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2204      	movs	r2, #4
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <FM25V10_Write+0xa0>)
 800068a:	f006 fe7c 	bl	8007386 <HAL_SPI_Transmit>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <FM25V10_Write+0x72>
    {
        SPI_CS_HIGH();
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <FM25V10_Write+0x9c>)
 800069e:	f004 fd2f 	bl	8005100 <HAL_GPIO_WritePin>
        return st;
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	e010      	b.n	80006c8 <FM25V10_Write+0x94>
    }

    // 4) 데이터 전송
    st = HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, len, HAL_MAX_DELAY);
 80006a6:	88ba      	ldrh	r2, [r7, #4]
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	6839      	ldr	r1, [r7, #0]
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <FM25V10_Write+0xa0>)
 80006b0:	f006 fe69 	bl	8007386 <HAL_SPI_Transmit>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]

    // 5) CS HIGH
    SPI_CS_HIGH();
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <FM25V10_Write+0x9c>)
 80006be:	f004 fd1f 	bl	8005100 <HAL_GPIO_WritePin>

    // 6) 쓰기 종료
    Memory_Write_Disable();
 80006c2:	f7ff ffb1 	bl	8000628 <Memory_Write_Disable>

    return st;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40020000 	.word	0x40020000
 80006d4:	2000061c 	.word	0x2000061c

080006d8 <Memory_Write>:

HAL_StatusTypeDef Memory_Write(uint16_t addr, const uint8_t *pData, uint16_t len)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
    // 내부 드라이버 함수 호출
    return FM25V10_Write(addr, pData, len);
 80006e8:	88ba      	ldrh	r2, [r7, #4]
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	6839      	ldr	r1, [r7, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffa0 	bl	8000634 <FM25V10_Write>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <FM25V10_Read>:
// addr : 메모리 주소 (0x0000 ~ 0x1FFF)
// pData: 읽은 데이터 버퍼
// len  : 바이트 수
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef FM25V10_Read(uint16_t addr, uint8_t *pData, uint16_t len)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	80fb      	strh	r3, [r7, #6]
 800070c:	4613      	mov	r3, r2
 800070e:	80bb      	strh	r3, [r7, #4]
    // 길이가 0이면 예외
    if (len == 0 || pData == NULL)
 8000710:	88bb      	ldrh	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <FM25V10_Read+0x1c>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <FM25V10_Read+0x20>
    {
        return HAL_ERROR; // 잘못된 파라미터
 800071c:	2301      	movs	r3, #1
 800071e:	e035      	b.n	800078c <FM25V10_Read+0x8c>
    }

    // 1) CS LOW , FRAM 활성화
    SPI_CS_LOW();
 8000720:	2200      	movs	r2, #0
 8000722:	2110      	movs	r1, #16
 8000724:	481b      	ldr	r0, [pc, #108]	@ (8000794 <FM25V10_Read+0x94>)
 8000726:	f004 fceb 	bl	8005100 <HAL_GPIO_WritePin>
        (addr >> 8) & 0xFF,
        (addr     ) & 0xFF
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, 3, HAL_MAX_DELAY);
#endif
    uint8_t header[4] = {
 800072a:	2303      	movs	r3, #3
 800072c:	723b      	strb	r3, [r7, #8]
        CMD_READ,
        (uint8_t)(addr >> 16),
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	141b      	asrs	r3, r3, #16
 8000732:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000734:	727b      	strb	r3, [r7, #9]
        (uint8_t)(addr >> 8),
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 800073e:	72bb      	strb	r3, [r7, #10]
        (uint8_t)(addr)
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
    uint8_t header[4] = {
 8000744:	72fb      	strb	r3, [r7, #11]
    };
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, header, sizeof(header), HAL_MAX_DELAY);
 8000746:	f107 0108 	add.w	r1, r7, #8
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2204      	movs	r2, #4
 8000750:	4811      	ldr	r0, [pc, #68]	@ (8000798 <FM25V10_Read+0x98>)
 8000752:	f006 fe18 	bl	8007386 <HAL_SPI_Transmit>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d006      	beq.n	800076e <FM25V10_Read+0x6e>
    {
        SPI_CS_HIGH();
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <FM25V10_Read+0x94>)
 8000766:	f004 fccb 	bl	8005100 <HAL_GPIO_WritePin>
        return st;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	e00e      	b.n	800078c <FM25V10_Read+0x8c>
    }

    // 데이터 수신
    st = HAL_SPI_Receive(&hspi1, pData, len, HAL_MAX_DELAY);
 800076e:	88ba      	ldrh	r2, [r7, #4]
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <FM25V10_Read+0x98>)
 8000778:	f006 ff49 	bl	800760e <HAL_SPI_Receive>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
    SPI_CS_HIGH();
 8000780:	2201      	movs	r2, #1
 8000782:	2110      	movs	r1, #16
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <FM25V10_Read+0x94>)
 8000786:	f004 fcbb 	bl	8005100 <HAL_GPIO_WritePin>

    return st;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40020000 	.word	0x40020000
 8000798:	2000061c 	.word	0x2000061c

0800079c <Memory_Read>:

HAL_StatusTypeDef Memory_Read(uint16_t addr, uint8_t *pData, uint16_t len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	80fb      	strh	r3, [r7, #6]
 80007a8:	4613      	mov	r3, r2
 80007aa:	80bb      	strh	r3, [r7, #4]
    // 내부 드라이버 함수 호출
    return FM25V10_Read(addr, pData, len);
 80007ac:	88ba      	ldrh	r2, [r7, #4]
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	6839      	ldr	r1, [r7, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffa4 	bl	8000700 <FM25V10_Read>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <Load_TimeStatus_FRAM>:
//                                                                                   
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 부팅 시 호출: 플래그 복원
HAL_StatusTypeDef Load_TimeStatus_FRAM(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(TIME_FLAG_ADDR, &flag, 1);
 80007ca:	1dbb      	adds	r3, r7, #6
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ffe3 	bl	800079c <Memory_Read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]

    g_nTime_Status = (flag==DEVICE_TIME_SYNCED)
                    ? DEVICE_TIME_SYNCED
                    : DEVICE_TIME_NOT_SYNCED;
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
    g_nTime_Status = (flag==DEVICE_TIME_SYNCED)
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <Load_TimeStatus_FRAM+0x34>)
 80007ea:	701a      	strb	r2, [r3, #0]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "LOAD Time Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif
                    
    return st;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000802 	.word	0x20000802

080007fc <Save_TimeStatus_FRAM>:

// 동기화 완료 시 호출: 플래그 저장
HAL_StatusTypeDef Save_TimeStatus_FRAM(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nTime_Status;
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <Save_TimeStatus_FRAM+0x24>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "SAVE Time Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(TIME_FLAG_ADDR, &flag, 1);
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff ff62 	bl	80006d8 <Memory_Write>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000802 	.word	0x20000802

08000824 <Load_Wifi_Status_FRAM>:
//      \  /\  /   _| |_| |     _| |_            ____) |  | |/ ____ \| |  | |__| |____) |
//       \/  \/   |_____|_|    |_____|          |_____/   |_/_/    \_\_|   \____/|_____/ 
//                                                                                       
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
HAL_StatusTypeDef Load_Wifi_Status_FRAM(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(WIFI_FLAG_ADDR, &flag, 1);
 800082a:	1dbb      	adds	r3, r7, #6
 800082c:	2201      	movs	r2, #1
 800082e:	4619      	mov	r1, r3
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff ffb3 	bl	800079c <Memory_Read>
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]

    g_nWifi_Status = (flag==DEVICE_WIFI_CONNECTED)
                    ? DEVICE_WIFI_CONNECTED
                    : DEVICE_WIFI_DISCONNECTED;
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	bf0c      	ite	eq
 8000840:	2301      	moveq	r3, #1
 8000842:	2300      	movne	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461a      	mov	r2, r3
    g_nWifi_Status = (flag==DEVICE_WIFI_CONNECTED)
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <Load_Wifi_Status_FRAM+0x34>)
 800084a:	701a      	strb	r2, [r3, #0]
#if DEBUG_MODE
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "LOAD Wifi Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif
    return st;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000801 	.word	0x20000801

0800085c <Save_Wifi_Status_FRAM>:

// 동기화 완료 시 호출: 플래그 저장
HAL_StatusTypeDef Save_Wifi_Status_FRAM(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nWifi_Status;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <Save_Wifi_Status_FRAM+0x24>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
    char timeStatusMsg[50];
    snprintf(timeStatusMsg, sizeof(timeStatusMsg), "SAVE Wifi Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeStatusMsg, strlen(timeStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(WIFI_FLAG_ADDR, &flag, 1);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff ff32 	bl	80006d8 <Memory_Write>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000801 	.word	0x20000801

08000884 <Load_Token_Status_FRAM>:
//      |_|  \____/|_|\_\______|_| \_|     |_____/   |_/_/    \_\____/|_____/ 
//                                                                            
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 토큰 상태를 로드하는 함수
HAL_StatusTypeDef Load_Token_Status_FRAM(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(TOKEN_FLAG_ADDR, &flag, 1);
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	2201      	movs	r2, #1
 800088e:	4619      	mov	r1, r3
 8000890:	2010      	movs	r0, #16
 8000892:	f7ff ff83 	bl	800079c <Memory_Read>
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]

    g_nToken_Status = (flag==DEVICE_TOKEN_SET)
                    ? DEVICE_TOKEN_SET
                    : DEVICE_TOKEN_NOT_SET;
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	2b01      	cmp	r3, #1
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
    g_nToken_Status = (flag==DEVICE_TOKEN_SET)
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <Load_Token_Status_FRAM+0x34>)
 80008aa:	701a      	strb	r2, [r3, #0]

    return st;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000803 	.word	0x20000803

080008bc <Save_Token_Status_FRAM>:

// 토큰 상태를 저장하는 함수
HAL_StatusTypeDef Save_Token_Status_FRAM(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nToken_Status;
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <Save_Token_Status_FRAM+0x24>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]

    return Memory_Write(TOKEN_FLAG_ADDR, &flag, 1);
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	2201      	movs	r2, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	2010      	movs	r0, #16
 80008d0:	f7ff ff02 	bl	80006d8 <Memory_Write>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000803 	.word	0x20000803

080008e4 <Save_Token_FRAM>:

// 토큰을 저장하는 함수
HAL_StatusTypeDef Save_Token_FRAM(const char *token)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 80008ec:	f003 fb6c 	bl	8003fc8 <SERVER_API_Get_Data>
 80008f0:	6178      	str	r0, [r7, #20]
    if (pApiData == NULL)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <Save_Token_FRAM+0x18>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 80008f8:	2301      	movs	r3, #1
 80008fa:	e02f      	b.n	800095c <Save_Token_FRAM+0x78>
    }

    if (token == NULL || strlen(token)+1 > sizeof(pApiData->sToken) || *token == '\0')
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00a      	beq.n	8000918 <Save_Token_FRAM+0x34>
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fc6e 	bl	80001e4 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	3301      	adds	r3, #1
 800090c:	2b80      	cmp	r3, #128	@ 0x80
 800090e:	d803      	bhi.n	8000918 <Save_Token_FRAM+0x34>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <Save_Token_FRAM+0x38>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000918:	2301      	movs	r3, #1
 800091a:	e01f      	b.n	800095c <Save_Token_FRAM+0x78>
    }

    uint8_t flag = DEVICE_TOKEN_SET; // 토큰이 설정됨을 나타내는 플래그
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]

    // 토큰 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(TOKEN_FLAG_ADDR, &flag, 1);
 8000920:	f107 030f 	add.w	r3, r7, #15
 8000924:	2201      	movs	r2, #1
 8000926:	4619      	mov	r1, r3
 8000928:	2010      	movs	r0, #16
 800092a:	f7ff fed5 	bl	80006d8 <Memory_Write>
 800092e:	4603      	mov	r3, r0
 8000930:	74fb      	strb	r3, [r7, #19]
    if (st != HAL_OK)
 8000932:	7cfb      	ldrb	r3, [r7, #19]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <Save_Token_FRAM+0x58>
    {
        return st; // 플래그 저장 실패
 8000938:	7cfb      	ldrb	r3, [r7, #19]
 800093a:	e00f      	b.n	800095c <Save_Token_FRAM+0x78>
    }

    uint16_t len = (uint16_t)(strlen(token)+1); // 문자열 길이 + NULL 문자
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fc51 	bl	80001e4 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29b      	uxth	r3, r3
 8000946:	3301      	adds	r3, #1
 8000948:	823b      	strh	r3, [r7, #16]

    // 토큰 데이터 저장
    st = Memory_Write(TOKEN_ADDR, (const uint8_t*)token, len);
 800094a:	8a3b      	ldrh	r3, [r7, #16]
 800094c:	461a      	mov	r2, r3
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2011      	movs	r0, #17
 8000952:	f7ff fec1 	bl	80006d8 <Memory_Write>
 8000956:	4603      	mov	r3, r0
 8000958:	74fb      	strb	r3, [r7, #19]
    
    return st;
 800095a:	7cfb      	ldrb	r3, [r7, #19]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <Load_Token_FRAM>:

// 토큰을 읽는 함수
HAL_StatusTypeDef Load_Token_FRAM(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
    // 토큰을 저장하는 구조체를 가져옴
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 800096a:	f003 fb2d 	bl	8003fc8 <SERVER_API_Get_Data>
 800096e:	60b8      	str	r0, [r7, #8]
    if (pApiData == NULL)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <Load_Token_FRAM+0x16>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 8000976:	2301      	movs	r3, #1
 8000978:	e02c      	b.n	80009d4 <Load_Token_FRAM+0x70>
    }
    uint8_t flag;
    HAL_StatusTypeDef st = Memory_Read(TOKEN_FLAG_ADDR, &flag, 1);
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	2201      	movs	r2, #1
 800097e:	4619      	mov	r1, r3
 8000980:	2010      	movs	r0, #16
 8000982:	f7ff ff0b 	bl	800079c <Memory_Read>
 8000986:	4603      	mov	r3, r0
 8000988:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <Load_Token_FRAM+0x30>
    {
        return st; // 플래그 읽기 실패
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	e01f      	b.n	80009d4 <Load_Token_FRAM+0x70>
    }
    if (flag == DEVICE_TOKEN_SET)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10f      	bne.n	80009ba <Load_Token_FRAM+0x56>
    {
        // 토큰이 설정되어 있으면 토큰 데이터를 읽음
        st = Memory_Read(TOKEN_ADDR, (uint8_t*)pApiData->sToken, sizeof(pApiData->sToken) - 1);
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	227f      	movs	r2, #127	@ 0x7f
 800099e:	4619      	mov	r1, r3
 80009a0:	2011      	movs	r0, #17
 80009a2:	f7ff fefb 	bl	800079c <Memory_Read>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]
        if (st == HAL_OK)
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d107      	bne.n	80009c0 <Load_Token_FRAM+0x5c>
        {
            pApiData->sToken[sizeof(pApiData->sToken) - 1] = '\0'; // 문자열 종료
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80009b8:	e002      	b.n	80009c0 <Load_Token_FRAM+0x5c>
        }
    }
    else
    {
        // 토큰이 설정되어 있지 않으면 빈 문자열로 초기화
        pApiData->sToken[0] = '\0';
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
    }
    // 토큰 상태를 업데이트
    g_nToken_Status = (flag == DEVICE_TOKEN_SET) ? DEVICE_TOKEN_SET : DEVICE_TOKEN_NOT_SET;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <Load_Token_FRAM+0x78>)
 80009d0:	701a      	strb	r2, [r3, #0]
        // 토큰이 설정되어 있으면 토큰 값도 출력
        HAL_UART_Transmit(&huart1, (uint8_t*)pApiData->sToken, strlen(pApiData->sToken), HAL_MAX_DELAY);
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY); // 줄바꿈 추가
    }
#endif
    return st;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]

}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000803 	.word	0x20000803

080009e0 <Load_MAC_Status_FRAM>:
//   |_|  |_/_/    \_\_____|   |_____/   |_/_/    \_\____/|_____/ 
//                                                                
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// MAC 주소가 설정되어 있는지 확인하는 함수
HAL_StatusTypeDef Load_MAC_Status_FRAM(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
    uint8_t flag;

    HAL_StatusTypeDef st = Memory_Read(MAC_FLAG_ADDR, &flag, 1);
 80009e6:	1dbb      	adds	r3, r7, #6
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	2091      	movs	r0, #145	@ 0x91
 80009ee:	f7ff fed5 	bl	800079c <Memory_Read>
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]

    g_nMac_Status = (flag==DEVICE_MAC_SET)
                    ? DEVICE_MAC_SET
                    : DEVICE_MAC_NOT_SET;
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	bf0c      	ite	eq
 80009fc:	2301      	moveq	r3, #1
 80009fe:	2300      	movne	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
    g_nMac_Status = (flag==DEVICE_MAC_SET)
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <Load_MAC_Status_FRAM+0x34>)
 8000a06:	701a      	strb	r2, [r3, #0]
    char macStatusMsg[50];
    snprintf(macStatusMsg, sizeof(macStatusMsg), "LOAD MAC Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)macStatusMsg, strlen(macStatusMsg), HAL_MAX_DELAY);
#endif

    return st;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000804 	.word	0x20000804

08000a18 <Save_MAC_Status_FRAM>:

// Mac 주소 상태를 저장하는 함수
HAL_StatusTypeDef Save_MAC_Status_FRAM(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
    uint8_t flag = (uint8_t)g_nMac_Status;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <Save_MAC_Status_FRAM+0x24>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
    char macStatusMsg[50];
    snprintf(macStatusMsg, sizeof(macStatusMsg), "SAVE MAC Status: %d\n", flag);
    HAL_UART_Transmit(&huart1, (uint8_t*)macStatusMsg, strlen(macStatusMsg), HAL_MAX_DELAY);
#endif

    return Memory_Write(MAC_FLAG_ADDR, &flag, 1);
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2091      	movs	r0, #145	@ 0x91
 8000a2c:	f7ff fe54 	bl	80006d8 <Memory_Write>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000804 	.word	0x20000804

08000a40 <Save_MAC_FRAM>:

// MAC 주소를 저장하는 함수
HAL_StatusTypeDef Save_MAC_FRAM(const char *mac)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    if (mac == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <Save_MAC_FRAM+0x12>
    {
        return HAL_ERROR; // 잘못된 파라미터
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e01e      	b.n	8000a90 <Save_MAC_FRAM+0x50>
    }

    uint8_t flag = DEVICE_MAC_SET; // MAC 주소가 설정됨을 나타내는 플래그
 8000a52:	2301      	movs	r3, #1
 8000a54:	73bb      	strb	r3, [r7, #14]

    // MAC 주소 플래그 저장
    HAL_StatusTypeDef st = Memory_Write(MAC_FLAG_ADDR, &flag, 1);
 8000a56:	f107 030e 	add.w	r3, r7, #14
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2091      	movs	r0, #145	@ 0x91
 8000a60:	f7ff fe3a 	bl	80006d8 <Memory_Write>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <Save_MAC_FRAM+0x32>
    {
        return st; // 플래그 저장 실패
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	e00e      	b.n	8000a90 <Save_MAC_FRAM+0x50>
    }

    // MAC 주소 데이터 저장
    st = Memory_Write(MAC_ADDR, (const uint8_t*)mac, strlen(mac)+1); // MAC 주소는 6바이트
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fbb6 	bl	80001e4 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2092      	movs	r0, #146	@ 0x92
 8000a86:	f7ff fe27 	bl	80006d8 <Memory_Write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]

    return st;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <Load_MAC_FRAM>:

// MAC 주소를 읽는 함수
HAL_StatusTypeDef Load_MAC_FRAM(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    // MAC 주소를 저장하는 구조체를 가져옴
    PServer_API_Data pApiData = SERVER_API_Get_Data();
 8000a9e:	f003 fa93 	bl	8003fc8 <SERVER_API_Get_Data>
 8000aa2:	60b8      	str	r0, [r7, #8]
    if (pApiData == NULL)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <Load_MAC_FRAM+0x16>
    {
        return HAL_ERROR; // API 데이터 구조체가 NULL인 경우
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e031      	b.n	8000b12 <Load_MAC_FRAM+0x7a>
    }
    
    uint8_t flag;
    HAL_StatusTypeDef st = Memory_Read(MAC_FLAG_ADDR, &flag, 1);
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	2091      	movs	r0, #145	@ 0x91
 8000ab6:	f7ff fe71 	bl	800079c <Memory_Read>
 8000aba:	4603      	mov	r3, r0
 8000abc:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK)
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <Load_MAC_FRAM+0x30>
    {
        return st; // 플래그 읽기 실패
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	e024      	b.n	8000b12 <Load_MAC_FRAM+0x7a>
    }
    
    if (flag == DEVICE_MAC_SET)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d110      	bne.n	8000af0 <Load_MAC_FRAM+0x58>
    {
        // MAC 주소가 설정되어 있으면 MAC 주소 데이터를 읽음
        st = Memory_Read(MAC_ADDR, (uint8_t*)pApiData->sMac, sizeof(pApiData->sMac) - 1);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3380      	adds	r3, #128	@ 0x80
 8000ad2:	2211      	movs	r2, #17
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2092      	movs	r0, #146	@ 0x92
 8000ad8:	f7ff fe60 	bl	800079c <Memory_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]
        if (st == HAL_OK)
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10b      	bne.n	8000afe <Load_MAC_FRAM+0x66>
        {
            // MAC 주소는 6바이트이므로 문자열 종료 필요 없음
            pApiData->sMac[sizeof(pApiData->sMac)-1] = '\0'; // 문자열 종료
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
 8000aee:	e006      	b.n	8000afe <Load_MAC_FRAM+0x66>
        }
    }
    else
    {
        // MAC 주소가 설정되어 있지 않으면 빈 문자열로 초기화
        memset(pApiData->sMac, 0, sizeof(pApiData->sMac));
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3380      	adds	r3, #128	@ 0x80
 8000af4:	2212      	movs	r2, #18
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f00c f869 	bl	800cbd0 <memset>
    }
    
    // MAC 주소 상태를 업데이트
    g_nMac_Status = (flag == DEVICE_MAC_SET) ? DEVICE_MAC_SET : DEVICE_MAC_NOT_SET;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <Load_MAC_FRAM+0x84>)
 8000b0e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)pApiData->sMac, strlen(pApiData->sMac), HAL_MAX_DELAY);
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY); // 줄바꿈 추가
    }
#endif

    return st;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000804 	.word	0x20000804

08000b20 <FRAM_Init>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 초기화 함수
void FRAM_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    SPI_CS_HIGH();
 8000b24:	2201      	movs	r2, #1
 8000b26:	2110      	movs	r1, #16
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <FRAM_Init+0x14>)
 8000b2a:	f004 fae9 	bl	8005100 <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40020000 	.word	0x40020000

08000b38 <DEVICE_Get_Control>:

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// CCMRAM 초기화
__CCMRAM__ Device_Control g_deviceControl; // 기기 조작 구조체 인스턴스
PDevice_Control DEVICE_Get_Control(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
    // g_deviceControl의 주소를 반환
    return &g_deviceControl;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	@ (8000b48 <DEVICE_Get_Control+0x10>)
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	10000000 	.word	0x10000000

08000b4c <DEVICE_Init>:

void DEVICE_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    // g_deviceControl 구조체를 0으로 초기화
    memset(&g_deviceControl, 0, sizeof(g_deviceControl));
 8000b50:	220c      	movs	r2, #12
 8000b52:	2100      	movs	r1, #0
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <DEVICE_Init+0x14>)
 8000b56:	f00c f83b 	bl	800cbd0 <memset>

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	10000000 	.word	0x10000000

08000b64 <Device_Mode_Set>:
// ──────────────────────────────────────────────────────────────────────────────

int Device_Mode_Set(int mode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    PDevice_Control pDeviceControl = DEVICE_Get_Control();
 8000b6c:	f7ff ffe4 	bl	8000b38 <DEVICE_Get_Control>
 8000b70:	60f8      	str	r0, [r7, #12]

    // 모드 설정
    switch (mode)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d827      	bhi.n	8000bc8 <Device_Mode_Set+0x64>
 8000b78:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <Device_Mode_Set+0x1c>)
 8000b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7e:	bf00      	nop
 8000b80:	08000ba1 	.word	0x08000ba1
 8000b84:	08000ba9 	.word	0x08000ba9
 8000b88:	08000bb1 	.word	0x08000bb1
 8000b8c:	08000bc9 	.word	0x08000bc9
 8000b90:	08000bc9 	.word	0x08000bc9
 8000b94:	08000bc9 	.word	0x08000bc9
 8000b98:	08000bb9 	.word	0x08000bb9
 8000b9c:	08000bc1 	.word	0x08000bc1
    {
    case MODE_MASTER:
        pDeviceControl->g_nMode = MODE_MASTER; // 마스터 모드로 설정
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
        break;
 8000ba6:	e012      	b.n	8000bce <Device_Mode_Set+0x6a>
    case MODE_SLAVE:
        pDeviceControl->g_nMode = MODE_SLAVE; // 슬레이브 모드로 설정
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2201      	movs	r2, #1
 8000bac:	609a      	str	r2, [r3, #8]
        break;
 8000bae:	e00e      	b.n	8000bce <Device_Mode_Set+0x6a>
    case MODE_AP:
        pDeviceControl->g_nMode = MODE_AP; // AP 모드로 설정
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	609a      	str	r2, [r3, #8]
        break;
 8000bb6:	e00a      	b.n	8000bce <Device_Mode_Set+0x6a>
    case MODE_DEBUG:
        pDeviceControl->g_nMode = MODE_DEBUG; // 디버그 모드로 설정
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2206      	movs	r2, #6
 8000bbc:	609a      	str	r2, [r3, #8]
        break;
 8000bbe:	e006      	b.n	8000bce <Device_Mode_Set+0x6a>
    case MODE_TEST:
        pDeviceControl->g_nMode = MODE_TEST; // 테스트 모드로 설정
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	609a      	str	r2, [r3, #8]
        break;
 8000bc6:	e002      	b.n	8000bce <Device_Mode_Set+0x6a>
    default:
        return -1; // 잘못된 모드 값 처리
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	e001      	b.n	8000bd2 <Device_Mode_Set+0x6e>
    }

    return pDeviceControl->g_nMode; // 현재 모드 반환
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	689b      	ldr	r3, [r3, #8]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop

08000bdc <Device_Mode_Check>:



int Device_Mode_Check(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
    PDevice_Control pDeviceControl = DEVICE_Get_Control();
 8000be2:	f7ff ffa9 	bl	8000b38 <DEVICE_Get_Control>
 8000be6:	6078      	str	r0, [r7, #4]

    int mode = pDeviceControl->g_nMode; // 현재 모드 가져오기
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	603b      	str	r3, [r7, #0]

    // 0,0,0,0
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000bee:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d117      	bne.n	8000c2a <Device_Mode_Check+0x4e>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d111      	bne.n	8000c2a <Device_Mode_Check+0x4e>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) == DIP_3_Pin &&
 8000c06:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d10b      	bne.n	8000c2a <Device_Mode_Check+0x4e>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) == DIP_4_Pin)
 8000c12:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) == DIP_3_Pin &&
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d105      	bne.n	8000c2a <Device_Mode_Check+0x4e>
    {
        mode = Device_Mode_Set(MODE_MASTER); // 마스터 모드로 설정 및 업데이트
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff ffa0 	bl	8000b64 <Device_Mode_Set>
 8000c24:	6038      	str	r0, [r7, #0]

        return mode;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	e05d      	b.n	8000ce6 <Device_Mode_Check+0x10a>
    }

    // 딥스위치 상태 확인 esp32를 AP모드 사용할지 결정
    // 3,4번 DIP 스위치가 모두 HIGH 상태일 때 AP 모드로 설정
    // 0,0,1,1
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000c2a:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d117      	bne.n	8000c66 <Device_Mode_Check+0x8a>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c36:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == DIP_1_Pin && 
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d111      	bne.n	8000c66 <Device_Mode_Check+0x8a>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin && 
 8000c42:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d00b      	beq.n	8000c66 <Device_Mode_Check+0x8a>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) != DIP_4_Pin)
 8000c4e:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin && 
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d005      	beq.n	8000c66 <Device_Mode_Check+0x8a>
    {
        mode = Device_Mode_Set(MODE_AP); // AP 모드로 설정 및 업데이트
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff ff82 	bl	8000b64 <Device_Mode_Set>
 8000c60:	6038      	str	r0, [r7, #0]
        // pDeviceControl->g_nMode = MODE_AP; // AP 모드로 설정
        // mode = pDeviceControl->g_nMode; // 현재 모드 업데이트

        // g_nMode = MODE_AP; // AP 모드로 설정

        return mode;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	e03f      	b.n	8000ce6 <Device_Mode_Check+0x10a>
    }
    else
    {
        g_nMode = MODE_MASTER; // 기본적으로 마스터 모드로 설정
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <Device_Mode_Check+0x118>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    }

    // 딥스위치 1,3,4 번 HIGH 상태일때 디버그 모드
    // 1,0,1,1
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000c6c:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d017      	beq.n	8000ca8 <Device_Mode_Check+0xcc>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d111      	bne.n	8000ca8 <Device_Mode_Check+0xcc>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d00b      	beq.n	8000ca8 <Device_Mode_Check+0xcc>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) != DIP_4_Pin)
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d005      	beq.n	8000ca8 <Device_Mode_Check+0xcc>
    {
        mode = Device_Mode_Set(MODE_DEBUG); // 디버그 모드로 설정 및 업데이트
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f7ff ff61 	bl	8000b64 <Device_Mode_Set>
 8000ca2:	6038      	str	r0, [r7, #0]
        // pDeviceControl->g_nMode = MODE_DEBUG; // 디버그 모드로 설정
        // mode = pDeviceControl->g_nMode; // 현재 모드 업데이트

        // g_nMode = MODE_DEBUG; // 디버그 모드로 설정

        return mode;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	e01e      	b.n	8000ce6 <Device_Mode_Check+0x10a>
    }

    // 딥스위치 1,3 번 HIGH 상태일때 테스트 모드
    // 1,0,1,0
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d017      	beq.n	8000ce4 <Device_Mode_Check+0x108>
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
    if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) != DIP_1_Pin && 
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d111      	bne.n	8000ce4 <Device_Mode_Check+0x108>
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
        (DIP_2_GPIO_Port->IDR & DIP_2_Pin) == DIP_2_Pin && 
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00b      	beq.n	8000ce4 <Device_Mode_Check+0x108>
        (DIP_4_GPIO_Port->IDR & DIP_4_Pin) == DIP_4_Pin)
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <Device_Mode_Check+0x114>)
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
        (DIP_3_GPIO_Port->IDR & DIP_3_Pin) != DIP_3_Pin &&
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d105      	bne.n	8000ce4 <Device_Mode_Check+0x108>
    {
        mode = Device_Mode_Set(MODE_TEST); // 테스트 모드로 설정 및 업데이트
 8000cd8:	2007      	movs	r0, #7
 8000cda:	f7ff ff43 	bl	8000b64 <Device_Mode_Set>
 8000cde:	6038      	str	r0, [r7, #0]


        return mode;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	e000      	b.n	8000ce6 <Device_Mode_Check+0x10a>
    }

    return mode;
 8000ce4:	683b      	ldr	r3, [r7, #0]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	20000800 	.word	0x20000800

08000cf8 <AT_Get_UTC_Time>:
// =========================================================

__CCMRAM__ AT_UTC_Time g_atUtcTime;

PAT_UTC_Time AT_Get_UTC_Time(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
    // 현재 UTC 시간을 반환
    return &g_atUtcTime;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	@ (8000d08 <AT_Get_UTC_Time+0x10>)
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	1000000c 	.word	0x1000000c

08000d0c <UTC_Time_Init>:

// CCMRAM 초기화
void UTC_Time_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    memset(&g_atUtcTime, 0, sizeof(g_atUtcTime));
 8000d10:	221c      	movs	r2, #28
 8000d12:	2100      	movs	r1, #0
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <UTC_Time_Init+0x14>)
 8000d16:	f00b ff5b 	bl	800cbd0 <memset>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	1000000c 	.word	0x1000000c

08000d24 <ESP_AT_Boot>:
}

#endif // 0

int ESP_AT_Boot(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
    int result;
    // AT 커맨드로 AT 전송
    const char *cmd = "AT\r\n";
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <ESP_AT_Boot+0x70>)
 8000d2c:	613b      	str	r3, [r7, #16]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8000d2e:	6938      	ldr	r0, [r7, #16]
 8000d30:	f000 fa94 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 8000d34:	60f8      	str	r0, [r7, #12]
    const char *success = "AT command successful!\r\n";
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <ESP_AT_Boot+0x74>)
 8000d38:	60bb      	str	r3, [r7, #8]
    const char *fail = "AT command failed!\r\n";
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <ESP_AT_Boot+0x78>)
 8000d3c:	607b      	str	r3, [r7, #4]

    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d014      	beq.n	8000d6e <ESP_AT_Boot+0x4a>
 8000d44:	4916      	ldr	r1, [pc, #88]	@ (8000da0 <ESP_AT_Boot+0x7c>)
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f00b ff6a 	bl	800cc20 <strstr>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00d      	beq.n	8000d6e <ESP_AT_Boot+0x4a>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f7ff fa46 	bl	80001e4 <strlen>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	4810      	ldr	r0, [pc, #64]	@ (8000da4 <ESP_AT_Boot+0x80>)
 8000d64:	f007 fbb6 	bl	80084d4 <HAL_UART_Transmit>

        result = AT_OK; // 성공 코드
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e00c      	b.n	8000d88 <ESP_AT_Boot+0x64>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fa38 	bl	80001e4 <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <ESP_AT_Boot+0x80>)
 8000d80:	f007 fba8 	bl	80084d4 <HAL_UART_Transmit>

        result = AT_ERROR; // 실패 코드
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
    }

    // 결과 반환
    return result;
 8000d88:	697b      	ldr	r3, [r7, #20]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	0800dd50 	.word	0x0800dd50
 8000d98:	0800dd58 	.word	0x0800dd58
 8000d9c:	0800dd74 	.word	0x0800dd74
 8000da0:	0800dd8c 	.word	0x0800dd8c
 8000da4:	20000704 	.word	0x20000704

08000da8 <ESP_AT_Send_WiFi_Config>:



// SD카드에 WIFI 설정을 가져롸 AT 명령어로 ESP32에 전송하는 함수
int ESP_AT_Send_WiFi_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0aa      	sub	sp, #168	@ 0xa8
 8000dac:	af02      	add	r7, sp, #8
    int result = 0; // 결과 변수 초기화
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    // SD_Card_Get_WiFi_SSID(void) 함수로 SSID를 가져옴
    const char* ssid = SD_Card_Get_WiFi_SSID();
 8000db4:	f002 ff62 	bl	8003c7c <SD_Card_Get_WiFi_SSID>
 8000db8:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    const char* password = SD_Card_Get_WiFi_Password();
 8000dbc:	f002 ffda 	bl	8003d74 <SD_Card_Get_WiFi_Password>
 8000dc0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    
    const char * response = NULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    const char *success = "WiFi configuration sent successfully!\r\n";
 8000dca:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <ESP_AT_Send_WiFi_Config+0xe0>)
 8000dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const char *fail = "Failed to send WiFi configuration!\r\n";
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <ESP_AT_Send_WiFi_Config+0xe4>)
 8000dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    char cmd[128]={0}; // AT 명령어를 저장할 버퍼
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	227c      	movs	r2, #124	@ 0x7c
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00b fef4 	bl	800cbd0 <memset>

    int len = snprintf(cmd, sizeof(cmd), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000de8:	1d38      	adds	r0, r7, #4
 8000dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000df4:	4a26      	ldr	r2, [pc, #152]	@ (8000e90 <ESP_AT_Send_WiFi_Config+0xe8>)
 8000df6:	2180      	movs	r1, #128	@ 0x80
 8000df8:	f00b fe7a 	bl	800caf0 <sniprintf>
 8000dfc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    if (len < 0 || len >= (int)sizeof(cmd))
 8000e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db03      	blt.n	8000e10 <ESP_AT_Send_WiFi_Config+0x68>
 8000e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0e:	dd01      	ble.n	8000e14 <ESP_AT_Send_WiFi_Config+0x6c>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8000e10:	f001 fdb4 	bl	800297c <Error_Handler>
    }

    // ESP_AT_Send_Command_Sync(cmd);
    response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fa20 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 8000e1c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    
    if (response != NULL && strstr(response, "OK") != NULL)
 8000e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d018      	beq.n	8000e5a <ESP_AT_Send_WiFi_Config+0xb2>
 8000e28:	491a      	ldr	r1, [pc, #104]	@ (8000e94 <ESP_AT_Send_WiFi_Config+0xec>)
 8000e2a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000e2e:	f00b fef7 	bl	800cc20 <strstr>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d010      	beq.n	8000e5a <ESP_AT_Send_WiFi_Config+0xb2>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 8000e38:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000e3c:	f7ff f9d2 	bl	80001e4 <strlen>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000e4c:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <ESP_AT_Send_WiFi_Config+0xf0>)
 8000e4e:	f007 fb41 	bl	80084d4 <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000e58:	e00f      	b.n	8000e7a <ESP_AT_Send_WiFi_Config+0xd2>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8000e5a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000e5e:	f7ff f9c1 	bl	80001e4 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000e6e:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <ESP_AT_Send_WiFi_Config+0xf0>)
 8000e70:	f007 fb30 	bl	80084d4 <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 8000e74:	2301      	movs	r3, #1
 8000e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }
    
    // return DEVICE_WIFI_CONNECTED; // 성공
    return result;
 8000e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	37a0      	adds	r7, #160	@ 0xa0
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	0800dd90 	.word	0x0800dd90
 8000e8c:	0800ddb8 	.word	0x0800ddb8
 8000e90:	0800dde0 	.word	0x0800dde0
 8000e94:	0800dd8c 	.word	0x0800dd8c
 8000e98:	20000704 	.word	0x20000704

08000e9c <ESP_AT_Send_Command_Sync>:

// 동기방식 ESP32 AT 명령 전송 함수
// 이 함수는 명령어를 전송하고, 응답을 기다려서 결과를 PC(UART1)로 전송합니다.

void ESP_AT_Send_Command_Sync(const char* cmd)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000ea8:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000eac:	6018      	str	r0, [r3, #0]
    char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
 8000eae:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000eb2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b fe84 	bl	800cbd0 <memset>
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 8000ece:	f003 fda7 	bl	8004a20 <HAL_GetTick>
 8000ed2:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 8000ed6:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000eda:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f7ff f980 	bl	80001e4 <strlen>
 8000ee4:	f8c7 0410 	str.w	r0, [r7, #1040]	@ 0x410
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 8000ee8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000ef2:	f2a3 411c 	subw	r1, r3, #1052	@ 0x41c
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	6809      	ldr	r1, [r1, #0]
 8000efc:	4858      	ldr	r0, [pc, #352]	@ (8001060 <ESP_AT_Send_Command_Sync+0x1c4>)
 8000efe:	f007 fae9 	bl	80084d4 <HAL_UART_Transmit>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d053      	beq.n	8000fb0 <ESP_AT_Send_Command_Sync+0x114>
    {
        Error_Handler();
 8000f08:	f001 fd38 	bl	800297c <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 8000f0c:	e050      	b.n	8000fb0 <ESP_AT_Send_Command_Sync+0x114>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8000f0e:	f107 010f 	add.w	r1, r7, #15
 8000f12:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000f16:	2201      	movs	r2, #1
 8000f18:	4851      	ldr	r0, [pc, #324]	@ (8001060 <ESP_AT_Send_Command_Sync+0x1c4>)
 8000f1a:	f007 fb66 	bl	80085ea <HAL_UART_Receive>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d13b      	bne.n	8000f9c <ESP_AT_Send_Command_Sync+0x100>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 8000f24:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 8000f2e:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000f32:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 8000f36:	7811      	ldrb	r1, [r2, #0]
 8000f38:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000f3c:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8000f40:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 8000f42:	2206      	movs	r2, #6
 8000f44:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d30e      	bcc.n	8000f6a <ESP_AT_Send_Command_Sync+0xce>
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	f107 0210 	add.w	r2, r7, #16
 8000f58:	4413      	add	r3, r2
 8000f5a:	2206      	movs	r2, #6
 8000f5c:	4941      	ldr	r1, [pc, #260]	@ (8001064 <ESP_AT_Send_Command_Sync+0x1c8>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00b fe26 	bl	800cbb0 <memcmp>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d02c      	beq.n	8000fc4 <ESP_AT_Send_Command_Sync+0x128>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 8000f6a:	2209      	movs	r2, #9
 8000f6c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d30e      	bcc.n	8000f92 <ESP_AT_Send_Command_Sync+0xf6>
 8000f74:	2209      	movs	r2, #9
 8000f76:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	4413      	add	r3, r2
 8000f82:	2209      	movs	r2, #9
 8000f84:	4938      	ldr	r1, [pc, #224]	@ (8001068 <ESP_AT_Send_Command_Sync+0x1cc>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00b fe12 	bl	800cbb0 <memcmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d015      	beq.n	8000fbe <ESP_AT_Send_Command_Sync+0x122>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 8000f92:	f003 fd45 	bl	8004a20 <HAL_GetTick>
 8000f96:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418
 8000f9a:	e009      	b.n	8000fb0 <ESP_AT_Send_Command_Sync+0x114>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 8000f9c:	f003 fd40 	bl	8004a20 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d808      	bhi.n	8000fc2 <ESP_AT_Send_Command_Sync+0x126>
    while (pos < RESP_BUF_SIZE - 1)
 8000fb0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000fb4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d9a8      	bls.n	8000f0e <ESP_AT_Send_Command_Sync+0x72>
 8000fbc:	e002      	b.n	8000fc4 <ESP_AT_Send_Command_Sync+0x128>
                break;
 8000fbe:	bf00      	nop
 8000fc0:	e000      	b.n	8000fc4 <ESP_AT_Send_Command_Sync+0x128>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 8000fc2:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 8000fc4:	f003 fd2c 	bl	8004a20 <HAL_GetTick>
 8000fc8:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8000fcc:	e01d      	b.n	800100a <ESP_AT_Send_Command_Sync+0x16e>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8000fce:	f107 010f 	add.w	r1, r7, #15
 8000fd2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4821      	ldr	r0, [pc, #132]	@ (8001060 <ESP_AT_Send_Command_Sync+0x1c4>)
 8000fda:	f007 fb06 	bl	80085ea <HAL_UART_Receive>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d112      	bne.n	800100a <ESP_AT_Send_Command_Sync+0x16e>
        {
            respBuf[pos++] = ch;
 8000fe4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 8000fee:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000ff2:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 8000ff6:	7811      	ldrb	r1, [r2, #0]
 8000ff8:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000ffc:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8001000:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 8001002:	f003 fd0d 	bl	8004a20 <HAL_GetTick>
 8001006:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 800100a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800100e:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001012:	4293      	cmp	r3, r2
 8001014:	d808      	bhi.n	8001028 <ESP_AT_Send_Command_Sync+0x18c>
 8001016:	f003 fd03 	bl	8004a20 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001026:	d3d2      	bcc.n	8000fce <ESP_AT_Send_Command_Sync+0x132>
        }
    }
    respBuf[pos] = '\0';
 8001028:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800102c:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 8001030:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001034:	4413      	add	r3, r2
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 800103a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800103e:	2b00      	cmp	r3, #0
 8001040:	d009      	beq.n	8001056 <ESP_AT_Send_Command_Sync+0x1ba>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 8001042:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001046:	b29a      	uxth	r2, r3
 8001048:	f107 0110 	add.w	r1, r7, #16
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	4806      	ldr	r0, [pc, #24]	@ (800106c <ESP_AT_Send_Command_Sync+0x1d0>)
 8001052:	f007 fa3f 	bl	80084d4 <HAL_UART_Transmit>
    }
}
 8001056:	bf00      	nop
 8001058:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000074c 	.word	0x2000074c
 8001064:	0800f004 	.word	0x0800f004
 8001068:	0800f00c 	.word	0x0800f00c
 800106c:	20000704 	.word	0x20000704

08001070 <ESP_AT_Send_Command_Sync_Get_int>:

// 명령 성공 실패를 AT_OK,AT_ERROR 으로 반환하는 함수
int ESP_AT_Send_Command_Sync_Get_int(const char* cmd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8001076:	af00      	add	r7, sp, #0
 8001078:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800107c:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001080:	6018      	str	r0, [r3, #0]
    char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
 8001082:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001086:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	3304      	adds	r3, #4
 8001090:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00b fd9a 	bl	800cbd0 <memset>
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 80010a2:	f003 fcbd 	bl	8004a20 <HAL_GetTick>
 80010a6:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 80010aa:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010ae:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	f7ff f896 	bl	80001e4 <strlen>
 80010b8:	f8c7 0410 	str.w	r0, [r7, #1040]	@ 0x410
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 80010bc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010c6:	f2a3 411c 	subw	r1, r3, #1052	@ 0x41c
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	6809      	ldr	r1, [r1, #0]
 80010d0:	485e      	ldr	r0, [pc, #376]	@ (800124c <ESP_AT_Send_Command_Sync_Get_int+0x1dc>)
 80010d2:	f007 f9ff 	bl	80084d4 <HAL_UART_Transmit>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d053      	beq.n	8001184 <ESP_AT_Send_Command_Sync_Get_int+0x114>
    {
        Error_Handler();
 80010dc:	f001 fc4e 	bl	800297c <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 80010e0:	e050      	b.n	8001184 <ESP_AT_Send_Command_Sync_Get_int+0x114>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 80010e2:	f107 010f 	add.w	r1, r7, #15
 80010e6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80010ea:	2201      	movs	r2, #1
 80010ec:	4857      	ldr	r0, [pc, #348]	@ (800124c <ESP_AT_Send_Command_Sync_Get_int+0x1dc>)
 80010ee:	f007 fa7c 	bl	80085ea <HAL_UART_Receive>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d13b      	bne.n	8001170 <ESP_AT_Send_Command_Sync_Get_int+0x100>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 80010f8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 8001102:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8001106:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 800110a:	7811      	ldrb	r1, [r2, #0]
 800110c:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8001110:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8001114:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 8001116:	2206      	movs	r2, #6
 8001118:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800111c:	4293      	cmp	r3, r2
 800111e:	d30e      	bcc.n	800113e <ESP_AT_Send_Command_Sync_Get_int+0xce>
 8001120:	2206      	movs	r2, #6
 8001122:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	f107 0210 	add.w	r2, r7, #16
 800112c:	4413      	add	r3, r2
 800112e:	2206      	movs	r2, #6
 8001130:	4947      	ldr	r1, [pc, #284]	@ (8001250 <ESP_AT_Send_Command_Sync_Get_int+0x1e0>)
 8001132:	4618      	mov	r0, r3
 8001134:	f00b fd3c 	bl	800cbb0 <memcmp>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d02c      	beq.n	8001198 <ESP_AT_Send_Command_Sync_Get_int+0x128>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 800113e:	2209      	movs	r2, #9
 8001140:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001144:	4293      	cmp	r3, r2
 8001146:	d30e      	bcc.n	8001166 <ESP_AT_Send_Command_Sync_Get_int+0xf6>
 8001148:	2209      	movs	r2, #9
 800114a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	f107 0210 	add.w	r2, r7, #16
 8001154:	4413      	add	r3, r2
 8001156:	2209      	movs	r2, #9
 8001158:	493e      	ldr	r1, [pc, #248]	@ (8001254 <ESP_AT_Send_Command_Sync_Get_int+0x1e4>)
 800115a:	4618      	mov	r0, r3
 800115c:	f00b fd28 	bl	800cbb0 <memcmp>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d015      	beq.n	8001192 <ESP_AT_Send_Command_Sync_Get_int+0x122>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 8001166:	f003 fc5b 	bl	8004a20 <HAL_GetTick>
 800116a:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418
 800116e:	e009      	b.n	8001184 <ESP_AT_Send_Command_Sync_Get_int+0x114>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 8001170:	f003 fc56 	bl	8004a20 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001180:	4293      	cmp	r3, r2
 8001182:	d808      	bhi.n	8001196 <ESP_AT_Send_Command_Sync_Get_int+0x126>
    while (pos < RESP_BUF_SIZE - 1)
 8001184:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001188:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800118c:	4293      	cmp	r3, r2
 800118e:	d9a8      	bls.n	80010e2 <ESP_AT_Send_Command_Sync_Get_int+0x72>
 8001190:	e002      	b.n	8001198 <ESP_AT_Send_Command_Sync_Get_int+0x128>
                break;
 8001192:	bf00      	nop
 8001194:	e000      	b.n	8001198 <ESP_AT_Send_Command_Sync_Get_int+0x128>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 8001196:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 8001198:	f003 fc42 	bl	8004a20 <HAL_GetTick>
 800119c:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 80011a0:	e01d      	b.n	80011de <ESP_AT_Send_Command_Sync_Get_int+0x16e>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 80011a2:	f107 010f 	add.w	r1, r7, #15
 80011a6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80011aa:	2201      	movs	r2, #1
 80011ac:	4827      	ldr	r0, [pc, #156]	@ (800124c <ESP_AT_Send_Command_Sync_Get_int+0x1dc>)
 80011ae:	f007 fa1c 	bl	80085ea <HAL_UART_Receive>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d112      	bne.n	80011de <ESP_AT_Send_Command_Sync_Get_int+0x16e>
        {
            respBuf[pos++] = ch;
 80011b8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 80011c2:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80011c6:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 80011ca:	7811      	ldrb	r1, [r2, #0]
 80011cc:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80011d0:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 80011d4:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 80011d6:	f003 fc23 	bl	8004a20 <HAL_GetTick>
 80011da:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 80011de:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80011e2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d808      	bhi.n	80011fc <ESP_AT_Send_Command_Sync_Get_int+0x18c>
 80011ea:	f003 fc19 	bl	8004a20 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011fa:	d3d2      	bcc.n	80011a2 <ESP_AT_Send_Command_Sync_Get_int+0x132>
        }
    }
    respBuf[pos] = '\0';
 80011fc:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001200:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 8001204:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001208:	4413      	add	r3, r2
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 800120e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <ESP_AT_Send_Command_Sync_Get_int+0x1ba>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 8001216:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800121a:	b29a      	uxth	r2, r3
 800121c:	f107 0110 	add.w	r1, r7, #16
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <ESP_AT_Send_Command_Sync_Get_int+0x1e8>)
 8001226:	f007 f955 	bl	80084d4 <HAL_UART_Transmit>
    }

    // 응답 성공 반환
    if (strstr(respBuf, END_MARKER))
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <ESP_AT_Send_Command_Sync_Get_int+0x1e0>)
 8001230:	4618      	mov	r0, r3
 8001232:	f00b fcf5 	bl	800cc20 <strstr>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <ESP_AT_Send_Command_Sync_Get_int+0x1d0>
    {
        return AT_OK; // 성공
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <ESP_AT_Send_Command_Sync_Get_int+0x1d2>
    }

    return AT_ERROR; // 실패
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000074c 	.word	0x2000074c
 8001250:	0800f004 	.word	0x0800f004
 8001254:	0800f00c 	.word	0x0800f00c
 8001258:	20000704 	.word	0x20000704

0800125c <ESP_AT_Send_Command_Sync_Get_Result>:

// 동기방식 ESP32 AT 명령 전송 함수
// 반환값으로 응답 문자열을 반환
const char* ESP_AT_Send_Command_Sync_Get_Result(const char* cmd)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    static char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 8001268:	f003 fbda 	bl	8004a20 <HAL_GetTick>
 800126c:	61b8      	str	r0, [r7, #24]

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7fe ffb8 	bl	80001e4 <strlen>
 8001274:	6138      	str	r0, [r7, #16]
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4845      	ldr	r0, [pc, #276]	@ (8001398 <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 8001282:	f007 f927 	bl	80084d4 <HAL_UART_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d042      	beq.n	8001312 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        Error_Handler();
 800128c:	f001 fb76 	bl	800297c <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 8001290:	e03f      	b.n	8001312 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8001292:	f107 010f 	add.w	r1, r7, #15
 8001296:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800129a:	2201      	movs	r2, #1
 800129c:	483e      	ldr	r0, [pc, #248]	@ (8001398 <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 800129e:	f007 f9a4 	bl	80085ea <HAL_UART_Receive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d12b      	bne.n	8001300 <ESP_AT_Send_Command_Sync_Get_Result+0xa4>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	61fa      	str	r2, [r7, #28]
 80012ae:	7bf9      	ldrb	r1, [r7, #15]
 80012b0:	4a3a      	ldr	r2, [pc, #232]	@ (800139c <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80012b2:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 80012b4:	2206      	movs	r2, #6
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d30c      	bcc.n	80012d6 <ESP_AT_Send_Command_Sync_Get_Result+0x7a>
 80012bc:	2206      	movs	r2, #6
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	4a36      	ldr	r2, [pc, #216]	@ (800139c <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80012c4:	4413      	add	r3, r2
 80012c6:	2206      	movs	r2, #6
 80012c8:	4935      	ldr	r1, [pc, #212]	@ (80013a0 <ESP_AT_Send_Command_Sync_Get_Result+0x144>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00b fc70 	bl	800cbb0 <memcmp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d026      	beq.n	8001324 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 80012d6:	2209      	movs	r2, #9
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	4293      	cmp	r3, r2
 80012dc:	d30c      	bcc.n	80012f8 <ESP_AT_Send_Command_Sync_Get_Result+0x9c>
 80012de:	2209      	movs	r2, #9
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	4a2d      	ldr	r2, [pc, #180]	@ (800139c <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80012e6:	4413      	add	r3, r2
 80012e8:	2209      	movs	r2, #9
 80012ea:	492e      	ldr	r1, [pc, #184]	@ (80013a4 <ESP_AT_Send_Command_Sync_Get_Result+0x148>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00b fc5f 	bl	800cbb0 <memcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d012      	beq.n	800131e <ESP_AT_Send_Command_Sync_Get_Result+0xc2>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 80012f8:	f003 fb92 	bl	8004a20 <HAL_GetTick>
 80012fc:	61b8      	str	r0, [r7, #24]
 80012fe:	e008      	b.n	8001312 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 8001300:	f003 fb8e 	bl	8004a20 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800130e:	4293      	cmp	r3, r2
 8001310:	d807      	bhi.n	8001322 <ESP_AT_Send_Command_Sync_Get_Result+0xc6>
    while (pos < RESP_BUF_SIZE - 1)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001318:	4293      	cmp	r3, r2
 800131a:	d9ba      	bls.n	8001292 <ESP_AT_Send_Command_Sync_Get_Result+0x36>
 800131c:	e002      	b.n	8001324 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
                break;
 800131e:	bf00      	nop
 8001320:	e000      	b.n	8001324 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 8001322:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 8001324:	f003 fb7c 	bl	8004a20 <HAL_GetTick>
 8001328:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 800132a:	e013      	b.n	8001354 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 800132c:	f107 010f 	add.w	r1, r7, #15
 8001330:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001334:	2201      	movs	r2, #1
 8001336:	4818      	ldr	r0, [pc, #96]	@ (8001398 <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 8001338:	f007 f957 	bl	80085ea <HAL_UART_Receive>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d108      	bne.n	8001354 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
        {
            respBuf[pos++] = ch;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	61fa      	str	r2, [r7, #28]
 8001348:	7bf9      	ldrb	r1, [r7, #15]
 800134a:	4a14      	ldr	r2, [pc, #80]	@ (800139c <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 800134c:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 800134e:	f003 fb67 	bl	8004a20 <HAL_GetTick>
 8001352:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800135a:	4293      	cmp	r3, r2
 800135c:	d807      	bhi.n	800136e <ESP_AT_Send_Command_Sync_Get_Result+0x112>
 800135e:	f003 fb5f 	bl	8004a20 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800136c:	d3de      	bcc.n	800132c <ESP_AT_Send_Command_Sync_Get_Result+0xd0>
        }
    }
    respBuf[pos] = '\0';
 800136e:	4a0b      	ldr	r2, [pc, #44]	@ (800139c <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	4413      	add	r3, r2
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <ESP_AT_Send_Command_Sync_Get_Result+0x132>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	b29a      	uxth	r2, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	4905      	ldr	r1, [pc, #20]	@ (800139c <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8001388:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <ESP_AT_Send_Command_Sync_Get_Result+0x14c>)
 800138a:	f007 f8a3 	bl	80084d4 <HAL_UART_Transmit>
    }

    return respBuf; // 응답 버퍼를 반환
 800138e:	4b03      	ldr	r3, [pc, #12]	@ (800139c <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000074c 	.word	0x2000074c
 800139c:	200000c4 	.word	0x200000c4
 80013a0:	0800f004 	.word	0x0800f004
 80013a4:	0800f00c 	.word	0x0800f00c
 80013a8:	20000704 	.word	0x20000704

080013ac <ESP_AT_Get_Firmware_Version>:



// ESP32 AT 명령어로 펌웨어 조회
int ESP_AT_Get_Firmware_Version(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
    int result = 0; // 결과 변수 초기화
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

    // AT 명령어 전송
    const char *cmd = "AT+GMR\r\n";
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <ESP_AT_Get_Firmware_Version+0x74>)
 80013b8:	613b      	str	r3, [r7, #16]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 80013ba:	6938      	ldr	r0, [r7, #16]
 80013bc:	f7ff ff4e 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 80013c0:	60f8      	str	r0, [r7, #12]
    const char *success = "AT firmware command successful!\r\n";
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <ESP_AT_Get_Firmware_Version+0x78>)
 80013c4:	60bb      	str	r3, [r7, #8]
    const char *fail = "AT firmware command failed!\r\n";
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <ESP_AT_Get_Firmware_Version+0x7c>)
 80013c8:	607b      	str	r3, [r7, #4]

    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d014      	beq.n	80013fa <ESP_AT_Get_Firmware_Version+0x4e>
 80013d0:	4916      	ldr	r1, [pc, #88]	@ (800142c <ESP_AT_Get_Firmware_Version+0x80>)
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f00b fc24 	bl	800cc20 <strstr>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00d      	beq.n	80013fa <ESP_AT_Get_Firmware_Version+0x4e>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 80013de:	68b8      	ldr	r0, [r7, #8]
 80013e0:	f7fe ff00 	bl	80001e4 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	4810      	ldr	r0, [pc, #64]	@ (8001430 <ESP_AT_Get_Firmware_Version+0x84>)
 80013f0:	f007 f870 	bl	80084d4 <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00c      	b.n	8001414 <ESP_AT_Get_Firmware_Version+0x68>
    }
    else
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7fe fef2 	bl	80001e4 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4809      	ldr	r0, [pc, #36]	@ (8001430 <ESP_AT_Get_Firmware_Version+0x84>)
 800140c:	f007 f862 	bl	80084d4 <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
    }

    // 결과 반환
    return result;
 8001414:	697b      	ldr	r3, [r7, #20]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	0800ddf8 	.word	0x0800ddf8
 8001424:	0800de04 	.word	0x0800de04
 8001428:	0800de28 	.word	0x0800de28
 800142c:	0800dd8c 	.word	0x0800dd8c
 8001430:	20000704 	.word	0x20000704

08001434 <ESP_AT_Get_Token>:




const char* ESP_AT_Get_Token(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0c6      	sub	sp, #280	@ 0x118
 8001438:	af00      	add	r7, sp, #0
    const char *response = NULL; // 응답 문자열을 저장할 변수
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    // 1) 보낼 JSON 문자열 정의 (큰 따옴표는 백슬래시로 이스케이프)
    const char *jsonBody = "{\\\"uid\\\":\\\"kimss@andamiro.com\\\"\\,\\\"pwd\\\":\\\"temp1234!\\\"}";
 8001440:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <ESP_AT_Get_Token+0xf4>)
 8001442:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // 2) AT+HTTPCLIENT 명령어 문자열 생성
    char atCmd[256];
    int len = snprintf(atCmd, sizeof(atCmd),
 8001446:	4638      	mov	r0, r7
 8001448:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800144c:	4a37      	ldr	r2, [pc, #220]	@ (800152c <ESP_AT_Get_Token+0xf8>)
 800144e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001452:	f00b fb4d 	bl	800caf0 <sniprintf>
 8001456:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        "AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/user\",\"dev-api.andamiro.net\",\"/test/user\",2,\"%s\"\r\n",
        jsonBody);
    
    if (len < 0 || len >= (int)sizeof(atCmd)) 
 800145a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800145e:	2b00      	cmp	r3, #0
 8001460:	db03      	blt.n	800146a <ESP_AT_Get_Token+0x36>
 8001462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001466:	2bff      	cmp	r3, #255	@ 0xff
 8001468:	dd01      	ble.n	800146e <ESP_AT_Get_Token+0x3a>
    {
        // snprintf 실패 또는 버퍼 부족
        Error_Handler();
 800146a:	f001 fa87 	bl	800297c <Error_Handler>
    }

    // 3) 위 함수로 AT 명령 전송 및 응답 처리
    response = ESP_AT_Send_Command_Sync_Get_Result(atCmd);
 800146e:	463b      	mov	r3, r7
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fef3 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 8001476:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    // response에는 
    //Ast/user","dev-api.andamiro.net","/test/user",2,"{\"uid\":\"kimss@andamiro.com\"\,\"pwd\":\"temp1234!\"}"+HTTPCLIENT:72,{"token":"eEx4NVhXZ2p5MlBBRjJ3eU9CbGJJeUtSbzlvUDU4TzJ0ZCtRSE9FdHZDTT0="}OK
    // 형태의 응답이 저장됨
    // token 값 추출
    const char *tokenStart = strstr(response, "\"token\":\"");
 800147a:	492d      	ldr	r1, [pc, #180]	@ (8001530 <ESP_AT_Get_Token+0xfc>)
 800147c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001480:	f00b fbce 	bl	800cc20 <strstr>
 8001484:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

    static char token[128]; // 충분히 큰 버퍼

    // "token":" 문자열을 찾아서 토큰 시작 위치를 찾음
    if (tokenStart != NULL) 
 8001488:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800148c:	2b00      	cmp	r3, #0
 800148e:	d027      	beq.n	80014e0 <ESP_AT_Get_Token+0xac>
    {
        tokenStart += strlen("\"token\":\""); // 토큰 시작 위치로 이동
 8001490:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001494:	3309      	adds	r3, #9
 8001496:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

        const char *tokenEnd = strchr(tokenStart, '\"'); // 다음 큰 따옴표 찾기
 800149a:	2122      	movs	r1, #34	@ 0x22
 800149c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80014a0:	f00b fb9e 	bl	800cbe0 <strchr>
 80014a4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
        
        if (tokenEnd != NULL) 
 80014a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d017      	beq.n	80014e0 <ESP_AT_Get_Token+0xac>
        {
            size_t tokenLength = tokenEnd - tokenStart; // 토큰 길이 계산
 80014b0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80014b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

            // 순수 토큰만 추출
            if (tokenLength < sizeof(token)) 
 80014be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80014c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80014c4:	d80c      	bhi.n	80014e0 <ESP_AT_Get_Token+0xac>
            {
                //tokenLength -= 2; // 버퍼 크기 제한
                strncpy(token, tokenStart, tokenLength);
 80014c6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80014ca:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80014ce:	4819      	ldr	r0, [pc, #100]	@ (8001534 <ESP_AT_Get_Token+0x100>)
 80014d0:	f00b fb93 	bl	800cbfa <strncpy>
                token[tokenLength] = '\0'; // 문자열 종료
 80014d4:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <ESP_AT_Get_Token+0x100>)
 80014d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80014da:	4413      	add	r3, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
                // 이제 token 변수에 토큰 값이 저장됨
            }
        }
    }
    // 4) 추출된 토큰을 PC(UART1)로 전송
    if (token[0] != '\0') 
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <ESP_AT_Get_Token+0x100>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d012      	beq.n	800150e <ESP_AT_Get_Token+0xda>
    {
        // tokjen을 PC로 전송
        HAL_UART_Transmit(&huart1, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
 80014e8:	4812      	ldr	r0, [pc, #72]	@ (8001534 <ESP_AT_Get_Token+0x100>)
 80014ea:	f7fe fe7b 	bl	80001e4 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	490f      	ldr	r1, [pc, #60]	@ (8001534 <ESP_AT_Get_Token+0x100>)
 80014f8:	480f      	ldr	r0, [pc, #60]	@ (8001538 <ESP_AT_Get_Token+0x104>)
 80014fa:	f006 ffeb 	bl	80084d4 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	2202      	movs	r2, #2
 8001504:	490d      	ldr	r1, [pc, #52]	@ (800153c <ESP_AT_Get_Token+0x108>)
 8001506:	480c      	ldr	r0, [pc, #48]	@ (8001538 <ESP_AT_Get_Token+0x104>)
 8001508:	f006 ffe4 	bl	80084d4 <HAL_UART_Transmit>
 800150c:	e006      	b.n	800151c <ESP_AT_Get_Token+0xe8>
    } 
    else 
    {
        // 토큰 추출 실패 시 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)"Token extraction failed\r\n", 25, HAL_MAX_DELAY);
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	2219      	movs	r2, #25
 8001514:	490a      	ldr	r1, [pc, #40]	@ (8001540 <ESP_AT_Get_Token+0x10c>)
 8001516:	4808      	ldr	r0, [pc, #32]	@ (8001538 <ESP_AT_Get_Token+0x104>)
 8001518:	f006 ffdc 	bl	80084d4 <HAL_UART_Transmit>
    }

    // 토큰 저장
    // SERVER_API_Set_Token(token); // 서버 API 토큰 저장 함수 호출

    return token; // 토큰 반환
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <ESP_AT_Get_Token+0x100>)
}
 800151e:	4618      	mov	r0, r3
 8001520:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	0800de48 	.word	0x0800de48
 800152c:	0800de80 	.word	0x0800de80
 8001530:	0800dee8 	.word	0x0800dee8
 8001534:	200004c4 	.word	0x200004c4
 8001538:	20000704 	.word	0x20000704
 800153c:	0800def4 	.word	0x0800def4
 8001540:	0800def8 	.word	0x0800def8

08001544 <ESP_AT_Get_MAC_Address>:



// ESP32 기기 고유값 반환
const char* ESP_AT_Get_MAC_Address(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
    // AT+CIPSTAMAC? 명령어 전송
    const char *cmd = "AT+CIPSTAMAC?\r\n";
 800154a:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <ESP_AT_Get_MAC_Address+0xf0>)
 800154c:	617b      	str	r3, [r7, #20]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff fe84 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 8001554:	6138      	str	r0, [r7, #16]

    // 응답에서 MAC 주소 추출
    // "40:4c:ca:50:2c:04" 형식에서 :을 제외한 영문대문자숫자 12개로 구성된 MAC 주소를 추출
    // 예: +CIPSTAMAC:"40:4c:ca:50:2c:04" -> 404CCA502C04
    const char *macStart = strstr(response, "CIPSTAMAC:\""); // CIPSTAMAC:" 문자열 찾기
 8001556:	4938      	ldr	r1, [pc, #224]	@ (8001638 <ESP_AT_Get_MAC_Address+0xf4>)
 8001558:	6938      	ldr	r0, [r7, #16]
 800155a:	f00b fb61 	bl	800cc20 <strstr>
 800155e:	60f8      	str	r0, [r7, #12]
    static char macAddress[18] = {0}; // MAC 주소를 저장할 버퍼 (17자 + NULL)

    // 응답에서 MAC 주소 추출, 콜론을 제외한 문자만 추출
    if (macStart != NULL) 
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d041      	beq.n	80015ea <ESP_AT_Get_MAC_Address+0xa6>
    {
        macStart += strlen("CIPSTAMAC:\""); // 처음 따옴표 다음 위치로 이동
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	330b      	adds	r3, #11
 800156a:	60fb      	str	r3, [r7, #12]
        const char *macEnd = strchr(macStart, '\"'); // 두번째 따옴표 찾기
 800156c:	2122      	movs	r1, #34	@ 0x22
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f00b fb36 	bl	800cbe0 <strchr>
 8001574:	60b8      	str	r0, [r7, #8]
        if (macEnd != NULL) 
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d036      	beq.n	80015ea <ESP_AT_Get_MAC_Address+0xa6>
        {
            size_t macLength = macEnd - macStart; // MAC 주소 길이 계산
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	607b      	str	r3, [r7, #4]
            
            if (macLength < 18) // MAC 주소는 17자 + NULL, 콜른을 제외한 길이 12자 + NULL
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b11      	cmp	r3, #17
 8001588:	d82f      	bhi.n	80015ea <ESP_AT_Get_MAC_Address+0xa6>
            {
                // 콜론을 제외한 문자만 추출
                size_t j = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
                for (size_t i = 0; i < macLength; i++) 
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e021      	b.n	80015d8 <ESP_AT_Get_MAC_Address+0x94>
                {
                    if (macStart[i] != ':') 
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b3a      	cmp	r3, #58	@ 0x3a
 800159e:	d018      	beq.n	80015d2 <ESP_AT_Get_MAC_Address+0x8e>
                    {
                        macAddress[j++] = toupper(macStart[i]); // 대문자로 변환하여 저장
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	70fb      	strb	r3, [r7, #3]
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a23      	ldr	r2, [pc, #140]	@ (800163c <ESP_AT_Get_MAC_Address+0xf8>)
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d103      	bne.n	80015c4 <ESP_AT_Get_MAC_Address+0x80>
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	f1a3 0220 	sub.w	r2, r3, #32
 80015c2:	e000      	b.n	80015c6 <ESP_AT_Get_MAC_Address+0x82>
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	1c59      	adds	r1, r3, #1
 80015ca:	61f9      	str	r1, [r7, #28]
 80015cc:	b2d1      	uxtb	r1, r2
 80015ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001640 <ESP_AT_Get_MAC_Address+0xfc>)
 80015d0:	54d1      	strb	r1, [r2, r3]
                for (size_t i = 0; i < macLength; i++) 
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3d9      	bcc.n	8001594 <ESP_AT_Get_MAC_Address+0x50>
                    }
                }
                macAddress[j] = '\0'; // 문자열 종료
 80015e0:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <ESP_AT_Get_MAC_Address+0xfc>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4413      	add	r3, r2
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#endif
    // PC(UART1)로 MAC 주소 전송
    HAL_UART_Transmit(&huart1, (uint8_t*)macAddress, strlen(macAddress), HAL_MAX_DELAY);
 80015ea:	4815      	ldr	r0, [pc, #84]	@ (8001640 <ESP_AT_Get_MAC_Address+0xfc>)
 80015ec:	f7fe fdfa 	bl	80001e4 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	4911      	ldr	r1, [pc, #68]	@ (8001640 <ESP_AT_Get_MAC_Address+0xfc>)
 80015fa:	4812      	ldr	r0, [pc, #72]	@ (8001644 <ESP_AT_Get_MAC_Address+0x100>)
 80015fc:	f006 ff6a 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	2202      	movs	r2, #2
 8001606:	4910      	ldr	r1, [pc, #64]	@ (8001648 <ESP_AT_Get_MAC_Address+0x104>)
 8001608:	480e      	ldr	r0, [pc, #56]	@ (8001644 <ESP_AT_Get_MAC_Address+0x100>)
 800160a:	f006 ff63 	bl	80084d4 <HAL_UART_Transmit>

    // 반환할 주소가 없다면
    if (macAddress[0] == '\0') 
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <ESP_AT_Get_MAC_Address+0xfc>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d108      	bne.n	8001628 <ESP_AT_Get_MAC_Address+0xe4>
    {
        // MAC 주소 추출 실패 시 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)"MAC address extraction failed\r\n", 31, HAL_MAX_DELAY);
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	221f      	movs	r2, #31
 800161c:	490b      	ldr	r1, [pc, #44]	@ (800164c <ESP_AT_Get_MAC_Address+0x108>)
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <ESP_AT_Get_MAC_Address+0x100>)
 8001620:	f006 ff58 	bl	80084d4 <HAL_UART_Transmit>
        return NULL; // 실패 시 NULL 반환
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <ESP_AT_Get_MAC_Address+0xe6>
    }

    return macAddress; // MAC 주소 반환
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <ESP_AT_Get_MAC_Address+0xfc>)
}
 800162a:	4618      	mov	r0, r3
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	0800df14 	.word	0x0800df14
 8001638:	0800df24 	.word	0x0800df24
 800163c:	0800f4e0 	.word	0x0800f4e0
 8001640:	20000544 	.word	0x20000544
 8001644:	20000704 	.word	0x20000704
 8001648:	0800def4 	.word	0x0800def4
 800164c:	0800df30 	.word	0x0800df30

08001650 <ESP_AT_Set_SNTP_Time>:


// 파라미터로 UTC 매크로를 받아서 시간은 설정하는 함수
int ESP_AT_Set_SNTP_Time(int utcOffset)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0a8      	sub	sp, #160	@ 0xa0
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    int result = 0; // 결과 변수 초기화
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    PAT_UTC_Time pAtUtcTime = AT_Get_UTC_Time(); // UTC 시간 구조체 포인터
 800165e:	f7ff fb4b 	bl	8000cf8 <AT_Get_UTC_Time>
 8001662:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    char cmd[128];
    
    // SNTP 서버 연결
    // 한국 NTP 서버 설정
    // ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG=1,900,\"pool.ntp.org\",\"time.google.com\"\r\n"); // NTP 서버 설정
    int len = snprintf(cmd, sizeof(cmd), "AT+CIPSNTPCFG=1,%d,\"pool.ntp.org\",\"time.google.com\"\r\n", utcOffset);
 8001666:	f107 000c 	add.w	r0, r7, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4ab3      	ldr	r2, [pc, #716]	@ (800193c <ESP_AT_Set_SNTP_Time+0x2ec>)
 800166e:	2180      	movs	r1, #128	@ 0x80
 8001670:	f00b fa3e 	bl	800caf0 <sniprintf>
 8001674:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    if (len < 0 || len >= (int)sizeof(cmd)) 
 8001678:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800167c:	2b00      	cmp	r3, #0
 800167e:	db03      	blt.n	8001688 <ESP_AT_Set_SNTP_Time+0x38>
 8001680:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001684:	2b7f      	cmp	r3, #127	@ 0x7f
 8001686:	dd04      	ble.n	8001692 <ESP_AT_Set_SNTP_Time+0x42>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8001688:	f001 f978 	bl	800297c <Error_Handler>
        result = AT_ERROR; // 실패 코드
 800168c:	2301      	movs	r3, #1
 800168e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }

    ESP_AT_Send_Command_Sync(cmd);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fc00 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    // 설정 확인
    ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG?\r\n");
 800169c:	48a8      	ldr	r0, [pc, #672]	@ (8001940 <ESP_AT_Set_SNTP_Time+0x2f0>)
 800169e:	f7ff fbfd 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    // 시간 확인
    const char *response = ESP_AT_Send_Command_Sync_Get_Result("AT+CIPSNTPTIME?\r\n");
 80016a2:	48a8      	ldr	r0, [pc, #672]	@ (8001944 <ESP_AT_Set_SNTP_Time+0x2f4>)
 80016a4:	f7ff fdda 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 80016a8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // 예: +CIPSNTPTIME:Tue Jun 24 14:59:31 2025 형식으로 응답

    // ──────────────────────────────────────────────────────────────────────────────

    pAtUtcTime = AT_Get_UTC_Time();
 80016ac:	f7ff fb24 	bl	8000cf8 <AT_Get_UTC_Time>
 80016b0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    // ──────────────────────────────────────────────────────────────────────────────
    
    // 응답에서 요일 추출
    const char *timeStart = strstr(response, "CIPSNTPTIME:"); // CIPSTAMAC:" 문자열 찾기
 80016b4:	49a4      	ldr	r1, [pc, #656]	@ (8001948 <ESP_AT_Set_SNTP_Time+0x2f8>)
 80016b6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80016ba:	f00b fab1 	bl	800cc20 <strstr>
 80016be:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    
    static char dayOfWeek[4] = {0}; // 요일을 저장할 버퍼 (3자 + NULL)

    // 응답에서 요일 추출
    if (timeStart != NULL) 
 80016c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00d      	beq.n	80016e6 <ESP_AT_Set_SNTP_Time+0x96>
    {
        timeStart += strlen("CIPSNTPTIME:");
 80016ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016ce:	330c      	adds	r3, #12
 80016d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        strncpy(dayOfWeek, timeStart, 3);
 80016d4:	2203      	movs	r2, #3
 80016d6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80016da:	489c      	ldr	r0, [pc, #624]	@ (800194c <ESP_AT_Set_SNTP_Time+0x2fc>)
 80016dc:	f00b fa8d 	bl	800cbfa <strncpy>
        dayOfWeek[3] = '\0'; // 문자열 종료
 80016e0:	4b9a      	ldr	r3, [pc, #616]	@ (800194c <ESP_AT_Set_SNTP_Time+0x2fc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	70da      	strb	r2, [r3, #3]
    }

    // 요일 RTC숫자로 변환하여 구조체에 저장
    pAtUtcTime->sDayOfWeek = Month_String_To_Number(dayOfWeek); // 구조체에 요일 RTC숫자 저장
 80016e6:	4899      	ldr	r0, [pc, #612]	@ (800194c <ESP_AT_Set_SNTP_Time+0x2fc>)
 80016e8:	f002 f878 	bl	80037dc <Month_String_To_Number>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016f2:	60da      	str	r2, [r3, #12]

    HAL_UART_Transmit(&huart1, (uint8_t*)dayOfWeek, strlen(dayOfWeek), HAL_MAX_DELAY);
 80016f4:	4895      	ldr	r0, [pc, #596]	@ (800194c <ESP_AT_Set_SNTP_Time+0x2fc>)
 80016f6:	f7fe fd75 	bl	80001e4 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	4992      	ldr	r1, [pc, #584]	@ (800194c <ESP_AT_Set_SNTP_Time+0x2fc>)
 8001704:	4892      	ldr	r0, [pc, #584]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 8001706:	f006 fee5 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	2202      	movs	r2, #2
 8001710:	4990      	ldr	r1, [pc, #576]	@ (8001954 <ESP_AT_Set_SNTP_Time+0x304>)
 8001712:	488f      	ldr	r0, [pc, #572]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 8001714:	f006 fede 	bl	80084d4 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char month[4] = {0}; // 월을 저장할 버퍼 (3자 + NULL)

    // 응답에서 월 추출
    if (timeStart != NULL) 
 8001718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <ESP_AT_Set_SNTP_Time+0xec>
    {
        timeStart += 4; // 요일 다음 공백 문자로 이동
 8001720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001724:	3304      	adds	r3, #4
 8001726:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 월 이름을 3글자 추출
        strncpy(month, timeStart, 3);
 800172a:	2203      	movs	r2, #3
 800172c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001730:	4889      	ldr	r0, [pc, #548]	@ (8001958 <ESP_AT_Set_SNTP_Time+0x308>)
 8001732:	f00b fa62 	bl	800cbfa <strncpy>
        month[3] = '\0'; // 문자열 종료
 8001736:	4b88      	ldr	r3, [pc, #544]	@ (8001958 <ESP_AT_Set_SNTP_Time+0x308>)
 8001738:	2200      	movs	r2, #0
 800173a:	70da      	strb	r2, [r3, #3]
    }

    // 월 이름을 RTC숫자로 변환하여 구조체에 저장
    pAtUtcTime->sMonth = Month_String_To_Number(month); // 구조체에 월 RTC숫자 저장
 800173c:	4886      	ldr	r0, [pc, #536]	@ (8001958 <ESP_AT_Set_SNTP_Time+0x308>)
 800173e:	f002 f84d 	bl	80037dc <Month_String_To_Number>
 8001742:	4602      	mov	r2, r0
 8001744:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001748:	605a      	str	r2, [r3, #4]
    
    HAL_UART_Transmit(&huart1, (uint8_t*)month, strlen(month), HAL_MAX_DELAY);
 800174a:	4883      	ldr	r0, [pc, #524]	@ (8001958 <ESP_AT_Set_SNTP_Time+0x308>)
 800174c:	f7fe fd4a 	bl	80001e4 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	497f      	ldr	r1, [pc, #508]	@ (8001958 <ESP_AT_Set_SNTP_Time+0x308>)
 800175a:	487d      	ldr	r0, [pc, #500]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 800175c:	f006 feba 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	2202      	movs	r2, #2
 8001766:	497b      	ldr	r1, [pc, #492]	@ (8001954 <ESP_AT_Set_SNTP_Time+0x304>)
 8001768:	4879      	ldr	r0, [pc, #484]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 800176a:	f006 feb3 	bl	80084d4 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────
    
    static char day[3] = {0}; // 일을 저장할 버퍼 (2자 + NULL)

    // 응답에서 일 추출
    if (timeStart != NULL) 
 800176e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <ESP_AT_Set_SNTP_Time+0x142>
    {
        timeStart += 4; // 월 다음 공백 문자로 이동
 8001776:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800177a:	3304      	adds	r3, #4
 800177c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 일 숫자를 2글자 추출
        strncpy(day, timeStart, 2);
 8001780:	2202      	movs	r2, #2
 8001782:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001786:	4875      	ldr	r0, [pc, #468]	@ (800195c <ESP_AT_Set_SNTP_Time+0x30c>)
 8001788:	f00b fa37 	bl	800cbfa <strncpy>
        day[2] = '\0'; // 문자열 종료
 800178c:	4b73      	ldr	r3, [pc, #460]	@ (800195c <ESP_AT_Set_SNTP_Time+0x30c>)
 800178e:	2200      	movs	r2, #0
 8001790:	709a      	strb	r2, [r3, #2]
    }
    
    pAtUtcTime->sDay = atoi(day); // 문자열을 정수로 변환하여 구조체에 저장
 8001792:	4872      	ldr	r0, [pc, #456]	@ (800195c <ESP_AT_Set_SNTP_Time+0x30c>)
 8001794:	f00b f921 	bl	800c9da <atoi>
 8001798:	4602      	mov	r2, r0
 800179a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800179e:	609a      	str	r2, [r3, #8]

    HAL_UART_Transmit(&huart1, (uint8_t*)day, strlen(day), HAL_MAX_DELAY);
 80017a0:	486e      	ldr	r0, [pc, #440]	@ (800195c <ESP_AT_Set_SNTP_Time+0x30c>)
 80017a2:	f7fe fd1f 	bl	80001e4 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	496b      	ldr	r1, [pc, #428]	@ (800195c <ESP_AT_Set_SNTP_Time+0x30c>)
 80017b0:	4867      	ldr	r0, [pc, #412]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 80017b2:	f006 fe8f 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	2202      	movs	r2, #2
 80017bc:	4965      	ldr	r1, [pc, #404]	@ (8001954 <ESP_AT_Set_SNTP_Time+0x304>)
 80017be:	4864      	ldr	r0, [pc, #400]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 80017c0:	f006 fe88 	bl	80084d4 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char time[3] = {0}; // 시를 저장할 버퍼 (2자 + NULL)

    // 응답에서 시 추출
    if (timeStart != NULL) 
 80017c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <ESP_AT_Set_SNTP_Time+0x198>
    {
        timeStart += 3; // 일 다음 콜론 문자로 이동
 80017cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017d0:	3303      	adds	r3, #3
 80017d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 시 숫자를 2글자 추출
        strncpy(time, timeStart, 2);
 80017d6:	2202      	movs	r2, #2
 80017d8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80017dc:	4860      	ldr	r0, [pc, #384]	@ (8001960 <ESP_AT_Set_SNTP_Time+0x310>)
 80017de:	f00b fa0c 	bl	800cbfa <strncpy>
        time[2] = '\0'; // 문자열 종료
 80017e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <ESP_AT_Set_SNTP_Time+0x310>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sHour = atoi(time); // 문자열을 정수로 변환하여 구조체에 저장
 80017e8:	485d      	ldr	r0, [pc, #372]	@ (8001960 <ESP_AT_Set_SNTP_Time+0x310>)
 80017ea:	f00b f8f6 	bl	800c9da <atoi>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017f4:	611a      	str	r2, [r3, #16]

    HAL_UART_Transmit(&huart1, (uint8_t*)time, strlen(time), HAL_MAX_DELAY);
 80017f6:	485a      	ldr	r0, [pc, #360]	@ (8001960 <ESP_AT_Set_SNTP_Time+0x310>)
 80017f8:	f7fe fcf4 	bl	80001e4 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	4956      	ldr	r1, [pc, #344]	@ (8001960 <ESP_AT_Set_SNTP_Time+0x310>)
 8001806:	4852      	ldr	r0, [pc, #328]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 8001808:	f006 fe64 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	2202      	movs	r2, #2
 8001812:	4950      	ldr	r1, [pc, #320]	@ (8001954 <ESP_AT_Set_SNTP_Time+0x304>)
 8001814:	484e      	ldr	r0, [pc, #312]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 8001816:	f006 fe5d 	bl	80084d4 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char minute[3] = {0}; // 분을 저장할 버퍼 (2자 + NULL)

    // 응답에서 분 추출
    if (timeStart != NULL) 
 800181a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <ESP_AT_Set_SNTP_Time+0x1ee>
    {
        timeStart += 3; // 시 다음 콜론 문자로 이동
 8001822:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001826:	3303      	adds	r3, #3
 8001828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 분 숫자를 2글자 추출
        strncpy(minute, timeStart, 2);
 800182c:	2202      	movs	r2, #2
 800182e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001832:	484c      	ldr	r0, [pc, #304]	@ (8001964 <ESP_AT_Set_SNTP_Time+0x314>)
 8001834:	f00b f9e1 	bl	800cbfa <strncpy>
        minute[2] = '\0'; // 문자열 종료
 8001838:	4b4a      	ldr	r3, [pc, #296]	@ (8001964 <ESP_AT_Set_SNTP_Time+0x314>)
 800183a:	2200      	movs	r2, #0
 800183c:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sMinute = atoi(minute); // 문자열을 정수로 변환하여 구조체에 저장
 800183e:	4849      	ldr	r0, [pc, #292]	@ (8001964 <ESP_AT_Set_SNTP_Time+0x314>)
 8001840:	f00b f8cb 	bl	800c9da <atoi>
 8001844:	4602      	mov	r2, r0
 8001846:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800184a:	615a      	str	r2, [r3, #20]

    HAL_UART_Transmit(&huart1, (uint8_t*)minute, strlen(minute), HAL_MAX_DELAY);
 800184c:	4845      	ldr	r0, [pc, #276]	@ (8001964 <ESP_AT_Set_SNTP_Time+0x314>)
 800184e:	f7fe fcc9 	bl	80001e4 <strlen>
 8001852:	4603      	mov	r3, r0
 8001854:	b29a      	uxth	r2, r3
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	4942      	ldr	r1, [pc, #264]	@ (8001964 <ESP_AT_Set_SNTP_Time+0x314>)
 800185c:	483c      	ldr	r0, [pc, #240]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 800185e:	f006 fe39 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	2202      	movs	r2, #2
 8001868:	493a      	ldr	r1, [pc, #232]	@ (8001954 <ESP_AT_Set_SNTP_Time+0x304>)
 800186a:	4839      	ldr	r0, [pc, #228]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 800186c:	f006 fe32 	bl	80084d4 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char second[3] = {0}; // 초를 저장할 버퍼 (2자 + NULL)

    // 응답에서 초 추출
    if (timeStart != NULL) 
 8001870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00d      	beq.n	8001894 <ESP_AT_Set_SNTP_Time+0x244>
    {
        timeStart += 3; // 분 다음 콜론 문자로 이동
 8001878:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800187c:	3303      	adds	r3, #3
 800187e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 초 숫자를 2글자 추출
        strncpy(second, timeStart, 2);
 8001882:	2202      	movs	r2, #2
 8001884:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001888:	4837      	ldr	r0, [pc, #220]	@ (8001968 <ESP_AT_Set_SNTP_Time+0x318>)
 800188a:	f00b f9b6 	bl	800cbfa <strncpy>
        second[2] = '\0'; // 문자열 종료
 800188e:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <ESP_AT_Set_SNTP_Time+0x318>)
 8001890:	2200      	movs	r2, #0
 8001892:	709a      	strb	r2, [r3, #2]
    }

    pAtUtcTime->sSecond = atoi(second); // 문자열을 정수로 변환하여 구조체에 저장
 8001894:	4834      	ldr	r0, [pc, #208]	@ (8001968 <ESP_AT_Set_SNTP_Time+0x318>)
 8001896:	f00b f8a0 	bl	800c9da <atoi>
 800189a:	4602      	mov	r2, r0
 800189c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018a0:	619a      	str	r2, [r3, #24]

    HAL_UART_Transmit(&huart1, (uint8_t*)second, strlen(second), HAL_MAX_DELAY);
 80018a2:	4831      	ldr	r0, [pc, #196]	@ (8001968 <ESP_AT_Set_SNTP_Time+0x318>)
 80018a4:	f7fe fc9e 	bl	80001e4 <strlen>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	492d      	ldr	r1, [pc, #180]	@ (8001968 <ESP_AT_Set_SNTP_Time+0x318>)
 80018b2:	4827      	ldr	r0, [pc, #156]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 80018b4:	f006 fe0e 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	2202      	movs	r2, #2
 80018be:	4925      	ldr	r1, [pc, #148]	@ (8001954 <ESP_AT_Set_SNTP_Time+0x304>)
 80018c0:	4823      	ldr	r0, [pc, #140]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 80018c2:	f006 fe07 	bl	80084d4 <HAL_UART_Transmit>
    // ──────────────────────────────────────────────────────────────────────────────

    static char year[5] = {0}; // 년도를 저장할 버퍼 (4자 + NULL)

    // 응답에서 년도 추출
    if (timeStart != NULL) 
 80018c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00d      	beq.n	80018ea <ESP_AT_Set_SNTP_Time+0x29a>
    {
        timeStart += 3; // 초 다음 공백 문자로 이동
 80018ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018d2:	3303      	adds	r3, #3
 80018d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // 년도 숫자를 4글자 추출
        strncpy(year, timeStart, 4);
 80018d8:	2204      	movs	r2, #4
 80018da:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80018de:	4823      	ldr	r0, [pc, #140]	@ (800196c <ESP_AT_Set_SNTP_Time+0x31c>)
 80018e0:	f00b f98b 	bl	800cbfa <strncpy>
        year[4] = '\0'; // 문자열 종료
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <ESP_AT_Set_SNTP_Time+0x31c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	711a      	strb	r2, [r3, #4]
    }

    pAtUtcTime->sYear = atoi(year); // 문자열을 정수로 변환하여 구조체에 저장
 80018ea:	4820      	ldr	r0, [pc, #128]	@ (800196c <ESP_AT_Set_SNTP_Time+0x31c>)
 80018ec:	f00b f875 	bl	800c9da <atoi>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018f6:	601a      	str	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, (uint8_t*)year, strlen(year), HAL_MAX_DELAY);
 80018f8:	481c      	ldr	r0, [pc, #112]	@ (800196c <ESP_AT_Set_SNTP_Time+0x31c>)
 80018fa:	f7fe fc73 	bl	80001e4 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	4919      	ldr	r1, [pc, #100]	@ (800196c <ESP_AT_Set_SNTP_Time+0x31c>)
 8001908:	4811      	ldr	r0, [pc, #68]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 800190a:	f006 fde3 	bl	80084d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	2202      	movs	r2, #2
 8001914:	490f      	ldr	r1, [pc, #60]	@ (8001954 <ESP_AT_Set_SNTP_Time+0x304>)
 8001916:	480e      	ldr	r0, [pc, #56]	@ (8001950 <ESP_AT_Set_SNTP_Time+0x300>)
 8001918:	f006 fddc 	bl	80084d4 <HAL_UART_Transmit>

    // ──────────────────────────────────────────────────────────────────────────────

    if (result == AT_ERROR) // 에러 발생 시
 800191c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <ESP_AT_Set_SNTP_Time+0x2d8>
    {
        return AT_ERROR; // 실패 코드 반환
 8001924:	2301      	movs	r3, #1
 8001926:	e004      	b.n	8001932 <ESP_AT_Set_SNTP_Time+0x2e2>
    }
    
    result = AT_OK; // 성공 코드
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    return result; // 결과 반환
 800192e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 8001932:	4618      	mov	r0, r3
 8001934:	37a0      	adds	r7, #160	@ 0xa0
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	0800df50 	.word	0x0800df50
 8001940:	0800df88 	.word	0x0800df88
 8001944:	0800df9c 	.word	0x0800df9c
 8001948:	0800dfb0 	.word	0x0800dfb0
 800194c:	20000558 	.word	0x20000558
 8001950:	20000704 	.word	0x20000704
 8001954:	0800def4 	.word	0x0800def4
 8001958:	2000055c 	.word	0x2000055c
 800195c:	20000560 	.word	0x20000560
 8001960:	20000564 	.word	0x20000564
 8001964:	20000568 	.word	0x20000568
 8001968:	2000056c 	.word	0x2000056c
 800196c:	20000570 	.word	0x20000570

08001970 <Handle_IPD_and_Respond>:

// ──────────────────────────────────────────────────────────────────────────────
// ──────────────────────────────────────────────────────────────────────────────

void Handle_IPD_and_Respond(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	f5ad 7d74 	sub.w	sp, sp, #976	@ 0x3d0
 8001976:	af02      	add	r7, sp, #8
    uint32_t start;
    uint16_t linkID, dataLen;

    while (1)
    {
        int  hdrPos = 0, payPos = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

        // — 1) '+IPD' 헤더 수집 (‘:’ 포함)
        do {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001984:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001988:	23c8      	movs	r3, #200	@ 0xc8
 800198a:	2201      	movs	r2, #1
 800198c:	48c0      	ldr	r0, [pc, #768]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 800198e:	f006 fe2c 	bl	80085ea <HAL_UART_Receive>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
            {
                continue;
            }
        } while (ch != '+');
 8001996:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 800199a:	2b2b      	cmp	r3, #43	@ 0x2b
 800199c:	d1f2      	bne.n	8001984 <Handle_IPD_and_Respond+0x14>
        ipdHdr[hdrPos++] = '+';
 800199e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 80019a8:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 80019ac:	443b      	add	r3, r7
 80019ae:	222b      	movs	r2, #43	@ 0x2b
 80019b0:	f803 2c70 	strb.w	r2, [r3, #-112]

        while (hdrPos < IPD_HDR_MAX-1)
 80019b4:	e01b      	b.n	80019ee <Handle_IPD_and_Respond+0x7e>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 80019b6:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 80019ba:	23c8      	movs	r3, #200	@ 0xc8
 80019bc:	2201      	movs	r2, #1
 80019be:	48b4      	ldr	r0, [pc, #720]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 80019c0:	f006 fe13 	bl	80085ea <HAL_UART_Receive>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <Handle_IPD_and_Respond+0x5e>
            {
                Error_Handler();
 80019ca:	f000 ffd7 	bl	800297c <Error_Handler>
            }
            ipdHdr[hdrPos++] = ch;
 80019ce:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 80019d8:	f897 239b 	ldrb.w	r2, [r7, #923]	@ 0x39b
 80019dc:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 80019e0:	443b      	add	r3, r7
 80019e2:	f803 2c70 	strb.w	r2, [r3, #-112]
            if (ch == ':')
 80019e6:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 80019ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80019ec:	d004      	beq.n	80019f8 <Handle_IPD_and_Respond+0x88>
        while (hdrPos < IPD_HDR_MAX-1)
 80019ee:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80019f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80019f4:	dddf      	ble.n	80019b6 <Handle_IPD_and_Respond+0x46>
 80019f6:	e000      	b.n	80019fa <Handle_IPD_and_Respond+0x8a>
            {
                break;
 80019f8:	bf00      	nop
            }
        }
        ipdHdr[hdrPos] = '\0';
 80019fa:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80019fe:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001a02:	4413      	add	r3, r2
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]

        // — 2) linkID, dataLen 파싱
        if (sscanf(ipdHdr, "+IPD,%hu,%hu:", &linkID, &dataLen) != 2)
 8001a08:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001a0c:	f507 72ab 	add.w	r2, r7, #342	@ 0x156
 8001a10:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 8001a14:	499f      	ldr	r1, [pc, #636]	@ (8001c94 <Handle_IPD_and_Respond+0x324>)
 8001a16:	f00b f89f 	bl	800cb58 <siscanf>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	f040 8135 	bne.w	8001c8c <Handle_IPD_and_Respond+0x31c>
        {
            continue;
        }

        // — 3) dataLen 바이트만큼 payload 수집 (CR/LF 포함)
        for (uint16_t i = 0; i < dataLen && payPos < PAYLOAD_MAX-1; ++i)
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8a7 33be 	strh.w	r3, [r7, #958]	@ 0x3be
 8001a28:	e01c      	b.n	8001a64 <Handle_IPD_and_Respond+0xf4>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001a2a:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001a2e:	23c8      	movs	r3, #200	@ 0xc8
 8001a30:	2201      	movs	r2, #1
 8001a32:	4897      	ldr	r0, [pc, #604]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 8001a34:	f006 fdd9 	bl	80085ea <HAL_UART_Receive>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <Handle_IPD_and_Respond+0xd2>
            {
                Error_Handler();
 8001a3e:	f000 ff9d 	bl	800297c <Error_Handler>
            }
            payload[payPos++] = ch;
 8001a42:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001a4c:	f897 139b 	ldrb.w	r1, [r7, #923]	@ 0x39b
 8001a50:	f507 7272 	add.w	r2, r7, #968	@ 0x3c8
 8001a54:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
 8001a58:	54d1      	strb	r1, [r2, r3]
        for (uint16_t i = 0; i < dataLen && payPos < PAYLOAD_MAX-1; ++i)
 8001a5a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	@ 0x3be
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f8a7 33be 	strh.w	r3, [r7, #958]	@ 0x3be
 8001a64:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001a68:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	f8b7 23be 	ldrh.w	r2, [r7, #958]	@ 0x3be
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d204      	bcs.n	8001a80 <Handle_IPD_and_Respond+0x110>
 8001a76:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001a7a:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001a7e:	ddd4      	ble.n	8001a2a <Handle_IPD_and_Respond+0xba>
        }
        payload[payPos] = '\0';
 8001a80:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001a84:	f5a3 721c 	sub.w	r2, r3, #624	@ 0x270
 8001a88:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]

        // — 4) GET 라인 파싱
        //    예: "GET /path HTTP/1.1"
        char method[8], url[128];
        int isIcon = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
        if (sscanf(payload, "%7s %127s", method, url) == 2)
 8001a98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a9c:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 8001aa0:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8001aa4:	497c      	ldr	r1, [pc, #496]	@ (8001c98 <Handle_IPD_and_Respond+0x328>)
 8001aa6:	f00b f857 	bl	800cb58 <siscanf>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d10b      	bne.n	8001ac8 <Handle_IPD_and_Respond+0x158>
        {
            if (strcmp(url, "/apple-touch-icon-precomposed.png") == 0)
 8001ab0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ab4:	4979      	ldr	r1, [pc, #484]	@ (8001c9c <Handle_IPD_and_Respond+0x32c>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fb8a 	bl	80001d0 <strcmp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <Handle_IPD_and_Respond+0x158>
            {
                isIcon = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
        }

        // — 5) 응답 헤더/바디 준비
        char  respHdr[128];
        int   hdrLen, bodyLen;
        if (isIcon)
 8001ac8:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d016      	beq.n	8001afe <Handle_IPD_and_Respond+0x18e>
        {
            // 204 No Content
            const char *hdr204 =
 8001ad0:	4b73      	ldr	r3, [pc, #460]	@ (8001ca0 <Handle_IPD_and_Respond+0x330>)
 8001ad2:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
              "HTTP/1.1 204 No Content\r\n"
              "Connection: close\r\n"
              "\r\n";
            hdrLen  = strlen(hdr204);
 8001ad6:	f8d7 03a8 	ldr.w	r0, [r7, #936]	@ 0x3a8
 8001ada:	f7fe fb83 	bl	80001e4 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
            strncpy(respHdr, hdr204, hdrLen);
 8001ae4:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8001ae8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001aec:	f8d7 13a8 	ldr.w	r1, [r7, #936]	@ 0x3a8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00b f882 	bl	800cbfa <strncpy>
            bodyLen = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8001afc:	e017      	b.n	8001b2e <Handle_IPD_and_Respond+0x1be>
        }
        else
        {
            // 200 OK + HTML
            // bodyLen = sizeof(htmlBody) - 1;
            bodyLen = htmlBodyLen;
 8001afe:	4b69      	ldr	r3, [pc, #420]	@ (8001ca4 <Handle_IPD_and_Respond+0x334>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
            hdrLen  = snprintf(respHdr, sizeof(respHdr),
 8001b06:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001b0a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001b0e:	4a66      	ldr	r2, [pc, #408]	@ (8001ca8 <Handle_IPD_and_Respond+0x338>)
 8001b10:	2180      	movs	r1, #128	@ 0x80
 8001b12:	f00a ffed 	bl	800caf0 <sniprintf>
 8001b16:	f8c7 03b4 	str.w	r0, [r7, #948]	@ 0x3b4
              "Content-Type: text/html\r\n"
              "Content-Length: %d\r\n"
              "Connection: close\r\n"
              "\r\n",
              bodyLen);
            if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
 8001b1a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db03      	blt.n	8001b2a <Handle_IPD_and_Respond+0x1ba>
 8001b22:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b28:	dd01      	ble.n	8001b2e <Handle_IPD_and_Respond+0x1be>
            {
                Error_Handler();
 8001b2a:	f000 ff27 	bl	800297c <Error_Handler>
            }
        }

        // — 6) AT+CIPSEND=<linkID>,<hdrLen+bodyLen>
        int totalLen = hdrLen + bodyLen;
 8001b2e:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8001b32:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001b36:	4413      	add	r3, r2
 8001b38:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
        char cmd[64];
        int  cmdLen = snprintf(cmd, sizeof(cmd),
 8001b3c:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001b40:	f2a3 2372 	subw	r3, r3, #626	@ 0x272
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	1d38      	adds	r0, r7, #4
 8001b4a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <Handle_IPD_and_Respond+0x33c>)
 8001b54:	2140      	movs	r1, #64	@ 0x40
 8001b56:	f00a ffcb 	bl	800caf0 <sniprintf>
 8001b5a:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
                        "AT+CIPSEND=%d,%d\r\n",
                        linkID, totalLen);
        if (cmdLen < 0 || cmdLen >= (int)sizeof(cmd))
 8001b5e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db03      	blt.n	8001b6e <Handle_IPD_and_Respond+0x1fe>
 8001b66:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001b6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b6c:	dd01      	ble.n	8001b72 <Handle_IPD_and_Respond+0x202>
        {
            Error_Handler();
 8001b6e:	f000 ff05 	bl	800297c <Error_Handler>
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY);
 8001b72:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	1d39      	adds	r1, r7, #4
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	4844      	ldr	r0, [pc, #272]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 8001b80:	f006 fca8 	bl	80084d4 <HAL_UART_Transmit>

        // — 7) '>' 프롬프트 대기
        start = HAL_GetTick();
 8001b84:	f002 ff4c 	bl	8004a20 <HAL_GetTick>
 8001b88:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c
        do
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT)== HAL_OK
 8001b8c:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001b90:	23c8      	movs	r3, #200	@ 0xc8
 8001b92:	2201      	movs	r2, #1
 8001b94:	483e      	ldr	r0, [pc, #248]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 8001b96:	f006 fd28 	bl	80085ea <HAL_UART_Receive>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d103      	bne.n	8001ba8 <Handle_IPD_and_Respond+0x238>
                && ch == '>')
 8001ba0:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001ba4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ba6:	d008      	beq.n	8001bba <Handle_IPD_and_Respond+0x24a>
            {
                break;
            }
        } while (HAL_GetTick() - start < RX_TIMEOUT);
 8001ba8:	f002 ff3a 	bl	8004a20 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8001bb6:	d9e9      	bls.n	8001b8c <Handle_IPD_and_Respond+0x21c>
 8001bb8:	e000      	b.n	8001bbc <Handle_IPD_and_Respond+0x24c>
                break;
 8001bba:	bf00      	nop

        // — 8) 헤더 + (icon이면 바디 없음 / 아니면 htmlBody) 전송
        HAL_UART_Transmit(&huart2, (uint8_t*)respHdr, hdrLen, HAL_MAX_DELAY);
 8001bbc:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	4831      	ldr	r0, [pc, #196]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 8001bcc:	f006 fc82 	bl	80084d4 <HAL_UART_Transmit>
        if (!isIcon)
 8001bd0:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d108      	bne.n	8001bea <Handle_IPD_and_Respond+0x27a>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)htmlBody, bodyLen, HAL_MAX_DELAY);
 8001bd8:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	4933      	ldr	r1, [pc, #204]	@ (8001cb0 <Handle_IPD_and_Respond+0x340>)
 8001be4:	482a      	ldr	r0, [pc, #168]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 8001be6:	f006 fc75 	bl	80084d4 <HAL_UART_Transmit>
        }

        // — 9) “SEND OK” URC 대기 (최대 SEND_TIMEOUT)
        start = HAL_GetTick();
 8001bea:	f002 ff19 	bl	8004a20 <HAL_GetTick>
 8001bee:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c
        const char sendOk[] = "SEND OK";
 8001bf2:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001bf6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8001cb4 <Handle_IPD_and_Respond+0x344>)
 8001bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c00:	e883 0003 	stmia.w	r3, {r0, r1}
        int  match = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8001c0a:	e022      	b.n	8001c52 <Handle_IPD_and_Respond+0x2e2>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT)== HAL_OK)
 8001c0c:	f207 319b 	addw	r1, r7, #923	@ 0x39b
 8001c10:	23c8      	movs	r3, #200	@ 0xc8
 8001c12:	2201      	movs	r2, #1
 8001c14:	481e      	ldr	r0, [pc, #120]	@ (8001c90 <Handle_IPD_and_Respond+0x320>)
 8001c16:	f006 fce8 	bl	80085ea <HAL_UART_Receive>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d118      	bne.n	8001c52 <Handle_IPD_and_Respond+0x2e2>
            {
                if (ch == sendOk[match])
 8001c20:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001c24:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001c28:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	f897 339b 	ldrb.w	r3, [r7, #923]	@ 0x39b
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d109      	bne.n	8001c4c <Handle_IPD_and_Respond+0x2dc>
                {
                    if (++match == (int)strlen(sendOk))
 8001c38:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001c42:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d103      	bne.n	8001c52 <Handle_IPD_and_Respond+0x2e2>
                    {
                        break;
 8001c4a:	e00b      	b.n	8001c64 <Handle_IPD_and_Respond+0x2f4>
                    }
                }
                else
                {
                    match = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8001c52:	f002 fee5 	bl	8004a20 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c62:	d3d3      	bcc.n	8001c0c <Handle_IPD_and_Respond+0x29c>
                }
            }
        }

        // — 10) 안전 딜레이 후 연결 종료
        HAL_Delay(50);
 8001c64:	2032      	movs	r0, #50	@ 0x32
 8001c66:	f002 fee7 	bl	8004a38 <HAL_Delay>
        cmdLen = snprintf(cmd, sizeof(cmd),
 8001c6a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001c6e:	f2a3 2372 	subw	r3, r3, #626	@ 0x272
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	1d38      	adds	r0, r7, #4
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <Handle_IPD_and_Respond+0x348>)
 8001c78:	2140      	movs	r1, #64	@ 0x40
 8001c7a:	f00a ff39 	bl	800caf0 <sniprintf>
 8001c7e:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
                         "AT+CIPCLOSE=%d\r\n",
                         linkID);
        ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fae9 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 8001c8a:	e675      	b.n	8001978 <Handle_IPD_and_Respond+0x8>
            continue;
 8001c8c:	bf00      	nop
    {
 8001c8e:	e673      	b.n	8001978 <Handle_IPD_and_Respond+0x8>
 8001c90:	2000074c 	.word	0x2000074c
 8001c94:	0800e0fc 	.word	0x0800e0fc
 8001c98:	0800e10c 	.word	0x0800e10c
 8001c9c:	0800e118 	.word	0x0800e118
 8001ca0:	0800e13c 	.word	0x0800e13c
 8001ca4:	0800f08c 	.word	0x0800f08c
 8001ca8:	0800e16c 	.word	0x0800e16c
 8001cac:	0800e034 	.word	0x0800e034
 8001cb0:	0800f030 	.word	0x0800f030
 8001cb4:	0800e1c0 	.word	0x0800e1c0
 8001cb8:	0800e048 	.word	0x0800e048

08001cbc <Handle_IPD_and_Respond_4>:
}



void Handle_IPD_and_Respond_4(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 8001cc2:	af02      	add	r7, sp, #8
    uint32_t start;
    char     respHdr[128];
    int      hdrLen, bodyLen;
    char     cmd[64];
    int      cmdLen, match;
    int      isLed=0, isIcon=0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001cd0:	e008      	b.n	8001ce4 <Handle_IPD_and_Respond_4+0x28>
        // '+' 문자 대기
        do {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
            {
                // return;
                goto IPD_START; // 재시도
 8001cd2:	bf00      	nop
 8001cd4:	e006      	b.n	8001ce4 <Handle_IPD_and_Respond_4+0x28>
        while (hdrPos < IPD_HDR_MAX - 1)
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
            {
                // return;
                goto IPD_START; // 재시도
 8001cd6:	bf00      	nop
 8001cd8:	e004      	b.n	8001ce4 <Handle_IPD_and_Respond_4+0x28>

        // — 2) linkID, dataLen 파싱
        if (sscanf(ipdHdr, "+IPD,%hu,%hu:", &linkID, &dataLen) != 2)
        {
            // return;
            goto IPD_START; // 재시도
 8001cda:	bf00      	nop
 8001cdc:	e002      	b.n	8001ce4 <Handle_IPD_and_Respond_4+0x28>
        for (uint16_t i = 0; i < dataLen; ++i)
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
            {
                // return;
                goto IPD_START; // 재시도
 8001cde:	bf00      	nop
 8001ce0:	e000      	b.n	8001ce4 <Handle_IPD_and_Respond_4+0x28>
                bodyLen);
        }
        if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
        {
            // return;
            goto IPD_START; // 재시도
 8001ce2:	bf00      	nop
        hdrPos = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001cea:	f207 31a7 	addw	r1, r7, #935	@ 0x3a7
 8001cee:	23c8      	movs	r3, #200	@ 0xc8
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	48c5      	ldr	r0, [pc, #788]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001cf4:	f006 fc79 	bl	80085ea <HAL_UART_Receive>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e9      	bne.n	8001cd2 <Handle_IPD_and_Respond_4+0x16>
        } while (ch != '+');
 8001cfe:	f897 33a7 	ldrb.w	r3, [r7, #935]	@ 0x3a7
 8001d02:	2b2b      	cmp	r3, #43	@ 0x2b
 8001d04:	d1f1      	bne.n	8001cea <Handle_IPD_and_Respond_4+0x2e>
        ipdHdr[hdrPos++] = '+';
 8001d06:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001d10:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8001d14:	443b      	add	r3, r7
 8001d16:	222b      	movs	r2, #43	@ 0x2b
 8001d18:	f803 2c6c 	strb.w	r2, [r3, #-108]
        while (hdrPos < IPD_HDR_MAX - 1)
 8001d1c:	e019      	b.n	8001d52 <Handle_IPD_and_Respond_4+0x96>
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001d1e:	f207 31a7 	addw	r1, r7, #935	@ 0x3a7
 8001d22:	23c8      	movs	r3, #200	@ 0xc8
 8001d24:	2201      	movs	r2, #1
 8001d26:	48b8      	ldr	r0, [pc, #736]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001d28:	f006 fc5f 	bl	80085ea <HAL_UART_Receive>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1d1      	bne.n	8001cd6 <Handle_IPD_and_Respond_4+0x1a>
            ipdHdr[hdrPos++] = ch;
 8001d32:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001d3c:	f897 23a7 	ldrb.w	r2, [r7, #935]	@ 0x3a7
 8001d40:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8001d44:	443b      	add	r3, r7
 8001d46:	f803 2c6c 	strb.w	r2, [r3, #-108]
            if (ch == ':')
 8001d4a:	f897 33a7 	ldrb.w	r3, [r7, #935]	@ 0x3a7
 8001d4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d50:	d004      	beq.n	8001d5c <Handle_IPD_and_Respond_4+0xa0>
        while (hdrPos < IPD_HDR_MAX - 1)
 8001d52:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001d56:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d58:	dde1      	ble.n	8001d1e <Handle_IPD_and_Respond_4+0x62>
 8001d5a:	e000      	b.n	8001d5e <Handle_IPD_and_Respond_4+0xa2>
                break;
 8001d5c:	bf00      	nop
        ipdHdr[hdrPos] = '\0';
 8001d5e:	f507 7259 	add.w	r2, r7, #868	@ 0x364
 8001d62:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001d66:	4413      	add	r3, r2
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
        if (sscanf(ipdHdr, "+IPD,%hu,%hu:", &linkID, &dataLen) != 2)
 8001d6c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001d70:	f507 72b1 	add.w	r2, r7, #354	@ 0x162
 8001d74:	f507 7059 	add.w	r0, r7, #868	@ 0x364
 8001d78:	49a4      	ldr	r1, [pc, #656]	@ (800200c <Handle_IPD_and_Respond_4+0x350>)
 8001d7a:	f00a feed 	bl	800cb58 <siscanf>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d1aa      	bne.n	8001cda <Handle_IPD_and_Respond_4+0x1e>
        payPos = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
        for (uint16_t i = 0; i < dataLen; ++i)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8a7 33b2 	strh.w	r3, [r7, #946]	@ 0x3b2
 8001d90:	e01f      	b.n	8001dd2 <Handle_IPD_and_Respond_4+0x116>
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) != HAL_OK)
 8001d92:	f207 31a7 	addw	r1, r7, #935	@ 0x3a7
 8001d96:	23c8      	movs	r3, #200	@ 0xc8
 8001d98:	2201      	movs	r2, #1
 8001d9a:	489b      	ldr	r0, [pc, #620]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001d9c:	f006 fc25 	bl	80085ea <HAL_UART_Receive>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d19b      	bne.n	8001cde <Handle_IPD_and_Respond_4+0x22>
            if (payPos < PAYLOAD_MAX - 1)
 8001da6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001daa:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001dae:	dc0b      	bgt.n	8001dc8 <Handle_IPD_and_Respond_4+0x10c>
                payload[payPos++] = ch;
 8001db0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 8001dba:	f897 13a7 	ldrb.w	r1, [r7, #935]	@ 0x3a7
 8001dbe:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001dc2:	f5a2 721b 	sub.w	r2, r2, #620	@ 0x26c
 8001dc6:	54d1      	strb	r1, [r2, r3]
        for (uint16_t i = 0; i < dataLen; ++i)
 8001dc8:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	@ 0x3b2
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f8a7 33b2 	strh.w	r3, [r7, #946]	@ 0x3b2
 8001dd2:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001dd6:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	f8b7 23b2 	ldrh.w	r2, [r7, #946]	@ 0x3b2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3d6      	bcc.n	8001d92 <Handle_IPD_and_Respond_4+0xd6>
        payload[payPos] = '\0';
 8001de4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001de8:	f5a3 721b 	sub.w	r2, r3, #620	@ 0x26c
 8001dec:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001df0:	4413      	add	r3, r2
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
        char method[8] = {0}, url[128] = {0};
 8001df6:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001dfa:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001e0a:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	3304      	adds	r3, #4
 8001e14:	227c      	movs	r2, #124	@ 0x7c
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00a fed9 	bl	800cbd0 <memset>
        if (sscanf(payload, "%7s %127s", method, url) == 2)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8001e24:	f507 70b2 	add.w	r0, r7, #356	@ 0x164
 8001e28:	4979      	ldr	r1, [pc, #484]	@ (8002010 <Handle_IPD_and_Respond_4+0x354>)
 8001e2a:	f00a fe95 	bl	800cb58 <siscanf>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d11e      	bne.n	8001e72 <Handle_IPD_and_Respond_4+0x1b6>
            if (strcmp(url, "/led") == 0)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4977      	ldr	r1, [pc, #476]	@ (8002014 <Handle_IPD_and_Respond_4+0x358>)
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe f9c9 	bl	80001d0 <strcmp>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <Handle_IPD_and_Respond_4+0x190>
                isLed = 1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 8001e4a:	e012      	b.n	8001e72 <Handle_IPD_and_Respond_4+0x1b6>
            else if (strcmp(url, "/favicon.ico") == 0 || strstr(url, "apple-touch-icon") != NULL)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4972      	ldr	r1, [pc, #456]	@ (8002018 <Handle_IPD_and_Respond_4+0x35c>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe f9bd 	bl	80001d0 <strcmp>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <Handle_IPD_and_Respond_4+0x1b0>
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	496f      	ldr	r1, [pc, #444]	@ (800201c <Handle_IPD_and_Respond_4+0x360>)
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00a fedd 	bl	800cc20 <strstr>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <Handle_IPD_and_Respond_4+0x1b6>
                isIcon = 1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
        if (isIcon)
 8001e72:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <Handle_IPD_and_Respond_4+0x1d8>
            bodyLen = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
            hdrLen = snprintf(respHdr, sizeof(respHdr),
 8001e80:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001e84:	4a66      	ldr	r2, [pc, #408]	@ (8002020 <Handle_IPD_and_Respond_4+0x364>)
 8001e86:	2180      	movs	r1, #128	@ 0x80
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00a fe31 	bl	800caf0 <sniprintf>
 8001e8e:	f8c7 03c4 	str.w	r0, [r7, #964]	@ 0x3c4
 8001e92:	e00d      	b.n	8001eb0 <Handle_IPD_and_Respond_4+0x1f4>
            bodyLen = htmlBody_inline_2Len;
 8001e94:	4b63      	ldr	r3, [pc, #396]	@ (8002024 <Handle_IPD_and_Respond_4+0x368>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
            hdrLen = snprintf(respHdr, sizeof(respHdr),
 8001e9c:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001ea0:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001ea4:	4a60      	ldr	r2, [pc, #384]	@ (8002028 <Handle_IPD_and_Respond_4+0x36c>)
 8001ea6:	2180      	movs	r1, #128	@ 0x80
 8001ea8:	f00a fe22 	bl	800caf0 <sniprintf>
 8001eac:	f8c7 03c4 	str.w	r0, [r7, #964]	@ 0x3c4
        if (hdrLen < 0 || hdrLen >= (int)sizeof(respHdr))
 8001eb0:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f6ff af14 	blt.w	8001ce2 <Handle_IPD_and_Respond_4+0x26>
 8001eba:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ec0:	f73f af0f 	bgt.w	8001ce2 <Handle_IPD_and_Respond_4+0x26>
        }

        // 만약 /quit 요청이면 STM32 쪽으로 UART1 신호 전송
        if (isLed)
 8001ec4:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d010      	beq.n	8001eee <Handle_IPD_and_Respond_4+0x232>
        {
            const char stmMsg[] = "JS+LED\r\n";
 8001ecc:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001ed0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001ed4:	4a55      	ldr	r2, [pc, #340]	@ (800202c <Handle_IPD_and_Respond_4+0x370>)
 8001ed6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed8:	c303      	stmia	r3!, {r0, r1}
 8001eda:	701a      	strb	r2, [r3, #0]
            // HAL_UART_Transmit(&huart1, (uint8_t*)stmMsg, strlen(stmMsg), HAL_MAX_DELAY);
            // 인터럽트로 전송
            HAL_UART_Transmit_IT(&huart1, (uint8_t*)stmMsg, strlen(stmMsg));
 8001edc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4852      	ldr	r0, [pc, #328]	@ (8002030 <Handle_IPD_and_Respond_4+0x374>)
 8001ee6:	f006 fc17 	bl	8008718 <HAL_UART_Transmit_IT>
            RX_LED_Toggle();
 8001eea:	f000 f96b 	bl	80021c4 <RX_LED_Toggle>
        }

        // -------------------------------------

        // — 6) AT+CIPSEND=<linkID>,<hdrLen+bodyLen>
        cmdLen = snprintf(cmd, sizeof(cmd), "AT+CIPSEND=%hu,%d\r\n",
 8001eee:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001ef2:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001efe:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001f02:	4413      	add	r3, r2
 8001f04:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4a49      	ldr	r2, [pc, #292]	@ (8002034 <Handle_IPD_and_Respond_4+0x378>)
 8001f0e:	2140      	movs	r1, #64	@ 0x40
 8001f10:	f00a fdee 	bl	800caf0 <sniprintf>
 8001f14:	f8c7 03ac 	str.w	r0, [r7, #940]	@ 0x3ac
                        linkID, hdrLen + bodyLen);
        if (cmdLen < 0 || cmdLen >= (int)sizeof(cmd))
 8001f18:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f2c0 80ad 	blt.w	800207c <Handle_IPD_and_Respond_4+0x3c0>
 8001f22:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f28:	f300 80a8 	bgt.w	800207c <Handle_IPD_and_Respond_4+0x3c0>
        {
            return;
        }

        HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY);
 8001f2c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	4833      	ldr	r0, [pc, #204]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001f3c:	f006 faca 	bl	80084d4 <HAL_UART_Transmit>

        // -------------------------------------

        // — 7) '>' 프롬프트 대기
        start = HAL_GetTick();
 8001f40:	f002 fd6e 	bl	8004a20 <HAL_GetTick>
 8001f44:	f8c7 03a8 	str.w	r0, [r7, #936]	@ 0x3a8
        do {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 8001f48:	f207 31a7 	addw	r1, r7, #935	@ 0x3a7
 8001f4c:	23c8      	movs	r3, #200	@ 0xc8
 8001f4e:	2201      	movs	r2, #1
 8001f50:	482d      	ldr	r0, [pc, #180]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001f52:	f006 fb4a 	bl	80085ea <HAL_UART_Receive>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <Handle_IPD_and_Respond_4+0x2a8>
                ch == '>')
 8001f5c:	f897 33a7 	ldrb.w	r3, [r7, #935]	@ 0x3a7
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK &&
 8001f60:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f62:	d008      	beq.n	8001f76 <Handle_IPD_and_Respond_4+0x2ba>
            {
                break;
            }
        } while (HAL_GetTick() - start < RX_TIMEOUT);
 8001f64:	f002 fd5c 	bl	8004a20 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f72:	d9e9      	bls.n	8001f48 <Handle_IPD_and_Respond_4+0x28c>
 8001f74:	e000      	b.n	8001f78 <Handle_IPD_and_Respond_4+0x2bc>
                break;
 8001f76:	bf00      	nop

        // -------------------------------------

        // — 8) 헤더/바디 전송
        HAL_UART_Transmit(&huart2, (uint8_t*)respHdr, hdrLen, HAL_MAX_DELAY);
 8001f78:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	4820      	ldr	r0, [pc, #128]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001f88:	f006 faa4 	bl	80084d4 <HAL_UART_Transmit>
        // HAL_UART_Transmit(&huart1, (uint8_t*)respHdr, hdrLen, HAL_MAX_DELAY);
        if (!isIcon)
 8001f8c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d108      	bne.n	8001fa6 <Handle_IPD_and_Respond_4+0x2ea>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)htmlBody_inline_2, htmlBody_inline_2Len, HAL_MAX_DELAY);
 8001f94:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <Handle_IPD_and_Respond_4+0x368>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	4926      	ldr	r1, [pc, #152]	@ (8002038 <Handle_IPD_and_Respond_4+0x37c>)
 8001fa0:	4819      	ldr	r0, [pc, #100]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001fa2:	f006 fa97 	bl	80084d4 <HAL_UART_Transmit>
        }

        // -------------------------------------

        // — 9) "SEND OK" URC 대기
        const char sendOk[] = "SEND OK";
 8001fa6:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001faa:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001fae:	4a23      	ldr	r2, [pc, #140]	@ (800203c <Handle_IPD_and_Respond_4+0x380>)
 8001fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb4:	e883 0003 	stmia.w	r3, {r0, r1}
        match = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
        start = HAL_GetTick();
 8001fbe:	f002 fd2f 	bl	8004a20 <HAL_GetTick>
 8001fc2:	f8c7 03a8 	str.w	r0, [r7, #936]	@ 0x3a8
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8001fc6:	e03e      	b.n	8002046 <Handle_IPD_and_Respond_4+0x38a>
        {
            if (HAL_UART_Receive(&huart2, &ch, 1, RX_TIMEOUT) == HAL_OK)
 8001fc8:	f207 31a7 	addw	r1, r7, #935	@ 0x3a7
 8001fcc:	23c8      	movs	r3, #200	@ 0xc8
 8001fce:	2201      	movs	r2, #1
 8001fd0:	480d      	ldr	r0, [pc, #52]	@ (8002008 <Handle_IPD_and_Respond_4+0x34c>)
 8001fd2:	f006 fb0a 	bl	80085ea <HAL_UART_Receive>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d134      	bne.n	8002046 <Handle_IPD_and_Respond_4+0x38a>
            {
                if (ch == sendOk[match])
 8001fdc:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001fe0:	f5a3 7250 	sub.w	r2, r3, #832	@ 0x340
 8001fe4:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001fe8:	4413      	add	r3, r2
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	f897 33a7 	ldrb.w	r3, [r7, #935]	@ 0x3a7
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d125      	bne.n	8002040 <Handle_IPD_and_Respond_4+0x384>
                {
                    if (++match == (int)strlen(sendOk))
 8001ff4:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001ffe:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8002002:	2b07      	cmp	r3, #7
 8002004:	d11f      	bne.n	8002046 <Handle_IPD_and_Respond_4+0x38a>
                    {
                        break;
 8002006:	e027      	b.n	8002058 <Handle_IPD_and_Respond_4+0x39c>
 8002008:	2000074c 	.word	0x2000074c
 800200c:	0800e0fc 	.word	0x0800e0fc
 8002010:	0800e10c 	.word	0x0800e10c
 8002014:	0800e3c0 	.word	0x0800e3c0
 8002018:	0800e1d4 	.word	0x0800e1d4
 800201c:	0800e3ac 	.word	0x0800e3ac
 8002020:	0800e13c 	.word	0x0800e13c
 8002024:	0800f448 	.word	0x0800f448
 8002028:	0800e348 	.word	0x0800e348
 800202c:	0800e3c8 	.word	0x0800e3c8
 8002030:	20000704 	.word	0x20000704
 8002034:	0800e2cc 	.word	0x0800e2cc
 8002038:	0800f090 	.word	0x0800f090
 800203c:	0800e1c0 	.word	0x0800e1c0
                    }
                }
                else
                {
                    match = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
        while (HAL_GetTick() - start < SEND_TIMEOUT)
 8002046:	f002 fceb 	bl	8004a20 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002056:	d3b7      	bcc.n	8001fc8 <Handle_IPD_and_Respond_4+0x30c>

        // -------------------------------------

        // — 10) 연결 종료
        // HAL_Delay(50);
        cmdLen = snprintf(cmd, sizeof(cmd), "AT+CIPCLOSE=%hu\r\n", linkID);
 8002058:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800205c:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8002066:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <Handle_IPD_and_Respond_4+0x3c8>)
 8002068:	2140      	movs	r1, #64	@ 0x40
 800206a:	f00a fd41 	bl	800caf0 <sniprintf>
 800206e:	f8c7 03ac 	str.w	r0, [r7, #940]	@ 0x3ac
        ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8002072:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f8f0 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
        break; // HTML 응답 후 루프 종료
    }
 800207c:	f507 7774 	add.w	r7, r7, #976	@ 0x3d0
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	0800e2e0 	.word	0x0800e2e0

08002088 <LED_Init>:
*
*/

// LED 초기화 함수
void LED_Init(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
    // RCC AHB1 버스에서 GPIOE 클럭 enable (bit4)
    RCC->AHB1ENR |= (1 << 4);
 800208e:	4b3d      	ldr	r3, [pc, #244]	@ (8002184 <LED_Init+0xfc>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	4a3c      	ldr	r2, [pc, #240]	@ (8002184 <LED_Init+0xfc>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	6313      	str	r3, [r2, #48]	@ 0x30
    // 잠깐 대기하여 클럭이 안정화되도록
    volatile uint32_t tmp = RCC->AHB1ENR;
 800209a:	4b3a      	ldr	r3, [pc, #232]	@ (8002184 <LED_Init+0xfc>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	607b      	str	r3, [r7, #4]

    // ==============================================================

    // PE8 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    RX_LED_GPIO_Port->MODER &= ~(0x3U << (8 * 2));  // 먼저 클리어
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <LED_Init+0x100>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <LED_Init+0x100>)
 80020a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80020aa:	6013      	str	r3, [r2, #0]
    RX_LED_GPIO_Port->MODER |=  (0x1U << (8 * 2));  // 0b01: Output
 80020ac:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <LED_Init+0x100>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a35      	ldr	r2, [pc, #212]	@ (8002188 <LED_Init+0x100>)
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    RX_LED_GPIO_Port->OTYPER &= ~(1U << 8);
 80020b8:	4b33      	ldr	r3, [pc, #204]	@ (8002188 <LED_Init+0x100>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a32      	ldr	r2, [pc, #200]	@ (8002188 <LED_Init+0x100>)
 80020be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020c2:	6053      	str	r3, [r2, #4]
    // RX_LED_GPIO_Port->OTYPER |=  (1U << 8); // open drain은 사용하지 않음
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    RX_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (8 * 2));
 80020c4:	4b30      	ldr	r3, [pc, #192]	@ (8002188 <LED_Init+0x100>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002188 <LED_Init+0x100>)
 80020ca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80020ce:	6093      	str	r3, [r2, #8]
    RX_LED_GPIO_Port->OSPEEDR |=  (0x2U << (8 * 2));
 80020d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <LED_Init+0x100>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002188 <LED_Init+0x100>)
 80020d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020da:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    RX_LED_GPIO_Port->PUPDR &= ~(0x3U << (8 * 2));
 80020dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <LED_Init+0x100>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a29      	ldr	r2, [pc, #164]	@ (8002188 <LED_Init+0x100>)
 80020e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80020e6:	60d3      	str	r3, [r2, #12]

    // PE9 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    TX_LED_GPIO_Port->MODER &= ~(0x3U << (9 * 2));  // 먼저 클리어
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <LED_Init+0x100>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a26      	ldr	r2, [pc, #152]	@ (8002188 <LED_Init+0x100>)
 80020ee:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80020f2:	6013      	str	r3, [r2, #0]
    TX_LED_GPIO_Port->MODER |=  (0x1U << (9 * 2));  // 0b01: Output
 80020f4:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <LED_Init+0x100>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a23      	ldr	r2, [pc, #140]	@ (8002188 <LED_Init+0x100>)
 80020fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020fe:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    TX_LED_GPIO_Port->OTYPER &= ~(1U << 9);
 8002100:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <LED_Init+0x100>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a20      	ldr	r2, [pc, #128]	@ (8002188 <LED_Init+0x100>)
 8002106:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800210a:	6053      	str	r3, [r2, #4]
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    TX_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (9 * 2));
 800210c:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <LED_Init+0x100>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a1d      	ldr	r2, [pc, #116]	@ (8002188 <LED_Init+0x100>)
 8002112:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002116:	6093      	str	r3, [r2, #8]
    TX_LED_GPIO_Port->OSPEEDR |=  (0x2U << (9 * 2));
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <LED_Init+0x100>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <LED_Init+0x100>)
 800211e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002122:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    TX_LED_GPIO_Port->PUPDR &= ~(0x3U << (9 * 2));
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <LED_Init+0x100>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <LED_Init+0x100>)
 800212a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800212e:	60d3      	str	r3, [r2, #12]


    // PE10 모드를 ‘01’(General purpose output)로 설정
    // MODER 레지스터: 2bit/핀
    STATUS_LED_GPIO_Port->MODER &= ~(0x3U << (10 * 2));  // 먼저 클리어
 8002130:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <LED_Init+0x100>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <LED_Init+0x100>)
 8002136:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800213a:	6013      	str	r3, [r2, #0]
    STATUS_LED_GPIO_Port->MODER |=  (0x1U << (10 * 2));  // 0b01: Output
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <LED_Init+0x100>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <LED_Init+0x100>)
 8002142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002146:	6013      	str	r3, [r2, #0]
    // 출력타입: Push-Pull (OTYPER bit=0)
    STATUS_LED_GPIO_Port->OTYPER &= ~(1U << 10);
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <LED_Init+0x100>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a0e      	ldr	r2, [pc, #56]	@ (8002188 <LED_Init+0x100>)
 800214e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002152:	6053      	str	r3, [r2, #4]
    // 출력속도: High speed (OSPEEDR 0b10 이상 권장)
    STATUS_LED_GPIO_Port->OSPEEDR &= ~(0x3U << (10 * 2));
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <LED_Init+0x100>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <LED_Init+0x100>)
 800215a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800215e:	6093      	str	r3, [r2, #8]
    STATUS_LED_GPIO_Port->OSPEEDR |=  (0x2U << (10 * 2));
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <LED_Init+0x100>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <LED_Init+0x100>)
 8002166:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800216a:	6093      	str	r3, [r2, #8]
    // 풀업/풀다운 없음 (PUPDR = 0b00)
    STATUS_LED_GPIO_Port->PUPDR &= ~(0x3U << (10 * 2));
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <LED_Init+0x100>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <LED_Init+0x100>)
 8002172:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002176:	60d3      	str	r3, [r2, #12]
    
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40023800 	.word	0x40023800
 8002188:	40021000 	.word	0x40021000

0800218c <RX_LED_On>:


// LED On: PE8을 1로 설정 (BSRR 사용)
void RX_LED_On(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
    RX_LED_GPIO_Port->BSRR = (1U << 8);       // set PE8
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <RX_LED_On+0x18>)
 8002192:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002196:	619a      	str	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000

080021a8 <RX_LED_Off>:

// LED Off: PE8을 0으로 설정 (BSRR 상위 16비트에 1을 쓰면 reset)
void RX_LED_Off(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
    RX_LED_GPIO_Port->BSRR = (1U << (8 + 16)); // reset PE8
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <RX_LED_Off+0x18>)
 80021ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021b2:	619a      	str	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000

080021c4 <RX_LED_Toggle>:

// RX LED Toggle: PE8을 토글
void RX_LED_Toggle(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
    RX_LED_GPIO_Port->ODR ^= (1U << 8); // toggle PE8
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <RX_LED_Toggle+0x1c>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <RX_LED_Toggle+0x1c>)
 80021ce:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 80021d2:	6153      	str	r3, [r2, #20]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000

080021e4 <TX_LED_On>:

// LED On: PE9을 1로 설정 (BSRR 사용)
void TX_LED_On(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
    TX_LED_GPIO_Port->BSRR = (1U << 9);       // set PE9
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <TX_LED_On+0x18>)
 80021ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ee:	619a      	str	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000

08002200 <STATUS_LED_On>:
}


// LED On: PE10을 1로 설정 (BSRR 사용)
void STATUS_LED_On(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    // BSRR 레지스터 하위 16비트에 1을 쓰면 set
    STATUS_LED_GPIO_Port->BSRR = (1U << 10);
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <STATUS_LED_On+0x18>)
 8002206:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800220a:	619a      	str	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <STATUS_LED_Off>:

// LED Off: PE10을 0으로 설정 (BSRR 상위 16비트에 1을 쓰면 reset)
void STATUS_LED_Off(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
    // BSRR 레지스터 상위 16비트(bit16+핀번호)에 1을 쓰면 reset
    STATUS_LED_GPIO_Port->BSRR = (1U << (10 + 16));
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <STATUS_LED_Off+0x18>)
 8002222:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002226:	619a      	str	r2, [r3, #24]
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000

08002238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800223c:	f002 fb8a 	bl	8004954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002240:	f000 f854 	bl	80022ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002244:	f000 fa64 	bl	8002710 <MX_GPIO_Init>
  MX_RTC_Init();
 8002248:	f000 f8bc 	bl	80023c4 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800224c:	f000 f92c 	bl	80024a8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8002250:	f000 f94a 	bl	80024e8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8002254:	f000 f97e 	bl	8002554 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002258:	f000 f9dc 	bl	8002614 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800225c:	f000 fa04 	bl	8002668 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002260:	f000 fa2c 	bl	80026bc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002264:	f007 ff48 	bl	800a0f8 <MX_FATFS_Init>
  MX_UART4_Init();
 8002268:	f000 f9aa 	bl	80025c0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  // CCM 영역 초기화

  Oper_CCM_Init();
 800226c:	f001 f880 	bl	8003370 <Oper_CCM_Init>
  
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // 타이머 인터럽트 모드로 시작 (TIM7은 이미 PSC/ARR로 1 kHz, 1 ms 인터럽트로 설정되어 있다고 가정)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8002270:	4817      	ldr	r0, [pc, #92]	@ (80022d0 <main+0x98>)
 8002272:	f005 fe21 	bl	8007eb8 <HAL_TIM_Base_Start_IT>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <main+0x48>
  {
    Error_Handler();
 800227c:	f000 fb7e 	bl	800297c <Error_Handler>
  }

  // 1) 콜백 기반 수신을 시작 (1바이트)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 8002280:	2201      	movs	r2, #1
 8002282:	4914      	ldr	r1, [pc, #80]	@ (80022d4 <main+0x9c>)
 8002284:	4814      	ldr	r0, [pc, #80]	@ (80022d8 <main+0xa0>)
 8002286:	f006 fa7d 	bl	8008784 <HAL_UART_Receive_IT>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <main+0x5c>
  {
    // 수신 시작 실패 처리
    Error_Handler();
 8002290:	f000 fb74 	bl	800297c <Error_Handler>
  }

  // SIM uart 콜백 기반 수신 시작
  if (HAL_UART_Receive_IT(&huart3, &rxSIMByte, 1) != HAL_OK)
 8002294:	2201      	movs	r2, #1
 8002296:	4911      	ldr	r1, [pc, #68]	@ (80022dc <main+0xa4>)
 8002298:	4811      	ldr	r0, [pc, #68]	@ (80022e0 <main+0xa8>)
 800229a:	f006 fa73 	bl	8008784 <HAL_UART_Receive_IT>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <main+0x70>
  {
    // SIM 수신 시작 실패 처리
    Error_Handler();
 80022a4:	f000 fb6a 	bl	800297c <Error_Handler>
  // }

  // ──────────────────────────────────────────────────────────────────────────────

  // CCM은 아니지만 기본 초기화
  Oper_Init();
 80022a8:	f001 f86c 	bl	8003384 <Oper_Init>

  // ──────────────────────────────────────────────────────────────────────────────
  
  // 딥스위치 체크
  Mode_Check(); // AP 모드 체크 및 설정
 80022ac:	f000 fb96 	bl	80029dc <Mode_Check>
  
  // ──────────────────────────────────────────────────────────────────────────────

  Main_System();
 80022b0:	f001 f832 	bl	8003318 <Main_System>

  // ──────────────────────────────────────────────────────────────────────────────

  // ──────────────────────────────────────────────────────────────────────────────

  Oper_Boot();
 80022b4:	f001 f876 	bl	80033a4 <Oper_Boot>

  // AP 모드 인지 확인
  if (g_nMode != MODE_AP)
 80022b8:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <main+0xac>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d001      	beq.n	80022c4 <main+0x8c>
  {
    // 토큰 값, 모기체 고유 값, 자기체 고유 값 서버로 전송
    Server_Send_Boot();
 80022c0:	f001 fed2 	bl	8004068 <Server_Send_Boot>
    // Test_Server_Send_Boot(); // 박과장님 서버로 날림
  }


  g_nBoot_Status = BOOT_SUCCESS; // 부팅 성공 상태로 설정
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <main+0xb0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]



  while (1)
  {
    Master_Proc(); // 메인 프로세스 실행
 80022ca:	f000 fc67 	bl	8002b9c <Master_Proc>
 80022ce:	e7fc      	b.n	80022ca <main+0x92>
 80022d0:	20000674 	.word	0x20000674
 80022d4:	200007fe 	.word	0x200007fe
 80022d8:	20000704 	.word	0x20000704
 80022dc:	200007ff 	.word	0x200007ff
 80022e0:	20000794 	.word	0x20000794
 80022e4:	20000800 	.word	0x20000800
 80022e8:	20000000 	.word	0x20000000

080022ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b094      	sub	sp, #80	@ 0x50
 80022f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	2230      	movs	r2, #48	@ 0x30
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f00a fc68 	bl	800cbd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	4b29      	ldr	r3, [pc, #164]	@ (80023bc <SystemClock_Config+0xd0>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	4a28      	ldr	r2, [pc, #160]	@ (80023bc <SystemClock_Config+0xd0>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002320:	4b26      	ldr	r3, [pc, #152]	@ (80023bc <SystemClock_Config+0xd0>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	4b23      	ldr	r3, [pc, #140]	@ (80023c0 <SystemClock_Config+0xd4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a22      	ldr	r2, [pc, #136]	@ (80023c0 <SystemClock_Config+0xd4>)
 8002336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <SystemClock_Config+0xd4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002348:	2305      	movs	r3, #5
 800234a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800234c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002352:	2301      	movs	r3, #1
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002356:	2302      	movs	r3, #2
 8002358:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800235a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800235e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002360:	2304      	movs	r3, #4
 8002362:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002364:	23a8      	movs	r3, #168	@ 0xa8
 8002366:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002368:	2302      	movs	r3, #2
 800236a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800236c:	2307      	movs	r3, #7
 800236e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	4618      	mov	r0, r3
 8002376:	f002 fedd 	bl	8005134 <HAL_RCC_OscConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002380:	f000 fafc 	bl	800297c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002384:	230f      	movs	r3, #15
 8002386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002388:	2302      	movs	r3, #2
 800238a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002390:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2105      	movs	r1, #5
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f93e 	bl	8005624 <HAL_RCC_ClockConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80023ae:	f000 fae5 	bl	800297c <Error_Handler>
  }
}
 80023b2:	bf00      	nop
 80023b4:	3750      	adds	r7, #80	@ 0x50
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000

080023c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  // 위 3개 구조체 변수는 사용안함, 주석처리
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023c8:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023ca:	4a34      	ldr	r2, [pc, #208]	@ (800249c <MX_RTC_Init+0xd8>)
 80023cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023ce:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023d4:	4b30      	ldr	r3, [pc, #192]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023d6:	227f      	movs	r2, #127	@ 0x7f
 80023d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023da:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023dc:	22ff      	movs	r2, #255	@ 0xff
 80023de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023f2:	4829      	ldr	r0, [pc, #164]	@ (8002498 <MX_RTC_Init+0xd4>)
 80023f4:	f003 fc18 	bl	8005c28 <HAL_RTC_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80023fe:	f000 fabd 	bl	800297c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  // RTC 백업 레지스터를 읽어 초기화 여부 확인
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_REG) != RTC_MAGIC_VALUE)
 8002402:	2101      	movs	r1, #1
 8002404:	4824      	ldr	r0, [pc, #144]	@ (8002498 <MX_RTC_Init+0xd4>)
 8002406:	f003 ff83 	bl	8006310 <HAL_RTCEx_BKUPRead>
 800240a:	4603      	mov	r3, r0
 800240c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002410:	4293      	cmp	r3, r2
 8002412:	d035      	beq.n	8002480 <MX_RTC_Init+0xbc>
  {
    // RTC 백업 레지스터가 초기화되지 않았거나 값이 일치하지 않으면 RTC를 초기화
    // RTC 백업 레지스터에 초기화 마크를 기록
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_REG, RTC_MAGIC_VALUE);
 8002414:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002418:	2101      	movs	r1, #1
 800241a:	481f      	ldr	r0, [pc, #124]	@ (8002498 <MX_RTC_Init+0xd4>)
 800241c:	f003 ff5e 	bl	80062dc <HAL_RTCEx_BKUPWrite>

    // RTC 시간과 날짜를 초기화
    g_Time.Hours = 0x0;  // 00:00:00
 8002420:	4b1f      	ldr	r3, [pc, #124]	@ (80024a0 <MX_RTC_Init+0xdc>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = 0x0;
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <MX_RTC_Init+0xdc>)
 8002428:	2200      	movs	r2, #0
 800242a:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = 0x0;
 800242c:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <MX_RTC_Init+0xdc>)
 800242e:	2200      	movs	r2, #0
 8002430:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <MX_RTC_Init+0xdc>)
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <MX_RTC_Init+0xdc>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BCD) != HAL_OK)
 800243e:	2201      	movs	r2, #1
 8002440:	4917      	ldr	r1, [pc, #92]	@ (80024a0 <MX_RTC_Init+0xdc>)
 8002442:	4815      	ldr	r0, [pc, #84]	@ (8002498 <MX_RTC_Init+0xd4>)
 8002444:	f003 fc71 	bl	8005d2a <HAL_RTC_SetTime>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_RTC_Init+0x8e>
    {
      // 초기화 실패 처리
      Error_Handler();
 800244e:	f000 fa95 	bl	800297c <Error_Handler>
    }
    g_Date.WeekDay = RTC_WEEKDAY_MONDAY;    // 월요일
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <MX_RTC_Init+0xe0>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
    g_Date.Month = RTC_MONTH_JANUARY;       // 1월
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <MX_RTC_Init+0xe0>)
 800245a:	2201      	movs	r2, #1
 800245c:	705a      	strb	r2, [r3, #1]
    g_Date.Date = 0x1;                      // 1일
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <MX_RTC_Init+0xe0>)
 8002460:	2201      	movs	r2, #1
 8002462:	709a      	strb	r2, [r3, #2]
    g_Date.Year = 0x25;                     // 2025년 (BCD 형식으로 25)
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <MX_RTC_Init+0xe0>)
 8002466:	2225      	movs	r2, #37	@ 0x25
 8002468:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BCD) != HAL_OK)
 800246a:	2201      	movs	r2, #1
 800246c:	490d      	ldr	r1, [pc, #52]	@ (80024a4 <MX_RTC_Init+0xe0>)
 800246e:	480a      	ldr	r0, [pc, #40]	@ (8002498 <MX_RTC_Init+0xd4>)
 8002470:	f003 fd53 	bl	8005f1a <HAL_RTC_SetDate>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <MX_RTC_Init+0xd0>
    {
      // 초기화 실패 처리
      Error_Handler();
 800247a:	f000 fa7f 	bl	800297c <Error_Handler>
  // }
  /* USER CODE BEGIN RTC_Init 2 */
// 위 코드 사용안함===============================================================================
  /* USER CODE END RTC_Init 2 */

}
 800247e:	e009      	b.n	8002494 <MX_RTC_Init+0xd0>
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 8002480:	2201      	movs	r2, #1
 8002482:	4907      	ldr	r1, [pc, #28]	@ (80024a0 <MX_RTC_Init+0xdc>)
 8002484:	4804      	ldr	r0, [pc, #16]	@ (8002498 <MX_RTC_Init+0xd4>)
 8002486:	f003 fcea 	bl	8005e5e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 800248a:	2201      	movs	r2, #1
 800248c:	4905      	ldr	r1, [pc, #20]	@ (80024a4 <MX_RTC_Init+0xe0>)
 800248e:	4802      	ldr	r0, [pc, #8]	@ (8002498 <MX_RTC_Init+0xd4>)
 8002490:	f003 fdc7 	bl	8006022 <HAL_RTC_GetDate>
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000578 	.word	0x20000578
 800249c:	40002800 	.word	0x40002800
 80024a0:	200007dc 	.word	0x200007dc
 80024a4:	200007f0 	.word	0x200007f0

080024a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <MX_SDIO_SD_Init+0x38>)
 80024ae:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <MX_SDIO_SD_Init+0x3c>)
 80024b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <MX_SDIO_SD_Init+0x38>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <MX_SDIO_SD_Init+0x38>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <MX_SDIO_SD_Init+0x38>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <MX_SDIO_SD_Init+0x38>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <MX_SDIO_SD_Init+0x38>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <MX_SDIO_SD_Init+0x38>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000598 	.word	0x20000598
 80024e4:	40012c00 	.word	0x40012c00

080024e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <MX_SPI1_Init+0x64>)
 80024ee:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <MX_SPI1_Init+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <MX_SPI1_Init+0x64>)
 80024f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <MX_SPI1_Init+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <MX_SPI1_Init+0x64>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <MX_SPI1_Init+0x64>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <MX_SPI1_Init+0x64>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002512:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <MX_SPI1_Init+0x64>)
 8002514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002518:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800251a:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <MX_SPI1_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002520:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <MX_SPI1_Init+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <MX_SPI1_Init+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	@ (800254c <MX_SPI1_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <MX_SPI1_Init+0x64>)
 8002534:	220a      	movs	r2, #10
 8002536:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	@ (800254c <MX_SPI1_Init+0x64>)
 800253a:	f004 fe9b 	bl	8007274 <HAL_SPI_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002544:	f000 fa1a 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	2000061c 	.word	0x2000061c
 8002550:	40013000 	.word	0x40013000

08002554 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255a:	463b      	mov	r3, r7
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <MX_TIM7_Init+0x64>)
 8002564:	4a15      	ldr	r2, [pc, #84]	@ (80025bc <MX_TIM7_Init+0x68>)
 8002566:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <MX_TIM7_Init+0x64>)
 800256a:	2263      	movs	r2, #99	@ 0x63
 800256c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256e:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <MX_TIM7_Init+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 8002574:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <MX_TIM7_Init+0x64>)
 8002576:	f240 3247 	movw	r2, #839	@ 0x347
 800257a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <MX_TIM7_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002582:	480d      	ldr	r0, [pc, #52]	@ (80025b8 <MX_TIM7_Init+0x64>)
 8002584:	f005 fc48 	bl	8007e18 <HAL_TIM_Base_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800258e:	f000 f9f5 	bl	800297c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800259a:	463b      	mov	r3, r7
 800259c:	4619      	mov	r1, r3
 800259e:	4806      	ldr	r0, [pc, #24]	@ (80025b8 <MX_TIM7_Init+0x64>)
 80025a0:	f005 feb8 	bl	8008314 <HAL_TIMEx_MasterConfigSynchronization>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80025aa:	f000 f9e7 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000674 	.word	0x20000674
 80025bc:	40001400 	.word	0x40001400

080025c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <MX_UART4_Init+0x4c>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <MX_UART4_Init+0x50>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <MX_UART4_Init+0x4c>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <MX_UART4_Init+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <MX_UART4_Init+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <MX_UART4_Init+0x4c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b09      	ldr	r3, [pc, #36]	@ (800260c <MX_UART4_Init+0x4c>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b08      	ldr	r3, [pc, #32]	@ (800260c <MX_UART4_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <MX_UART4_Init+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025f6:	4805      	ldr	r0, [pc, #20]	@ (800260c <MX_UART4_Init+0x4c>)
 80025f8:	f005 ff1c 	bl	8008434 <HAL_UART_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002602:	f000 f9bb 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200006bc 	.word	0x200006bc
 8002610:	40004c00 	.word	0x40004c00

08002614 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 800261a:	4a12      	ldr	r2, [pc, #72]	@ (8002664 <MX_USART1_UART_Init+0x50>)
 800261c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 8002620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002624:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002632:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002638:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 800263a:	220c      	movs	r2, #12
 800263c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_USART1_UART_Init+0x4c>)
 800264c:	f005 fef2 	bl	8008434 <HAL_UART_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002656:	f000 f991 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000704 	.word	0x20000704
 8002664:	40011000 	.word	0x40011000

08002668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 800266e:	4a12      	ldr	r2, [pc, #72]	@ (80026b8 <MX_USART2_UART_Init+0x50>)
 8002670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800267a:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 800268e:	220c      	movs	r2, #12
 8002690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002692:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800269e:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <MX_USART2_UART_Init+0x4c>)
 80026a0:	f005 fec8 	bl	8008434 <HAL_UART_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026aa:	f000 f967 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000074c 	.word	0x2000074c
 80026b8:	40004400 	.word	0x40004400

080026bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	@ (800270c <MX_USART3_UART_Init+0x50>)
 80026c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026e2:	220c      	movs	r2, #12
 80026e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026f2:	4805      	ldr	r0, [pc, #20]	@ (8002708 <MX_USART3_UART_Init+0x4c>)
 80026f4:	f005 fe9e 	bl	8008434 <HAL_UART_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026fe:	f000 f93d 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000794 	.word	0x20000794
 800270c:	40004800 	.word	0x40004800

08002710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	@ 0x30
 8002714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	4b4b      	ldr	r3, [pc, #300]	@ (8002858 <MX_GPIO_Init+0x148>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a4a      	ldr	r2, [pc, #296]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002730:	f043 0310 	orr.w	r3, r3, #16
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b48      	ldr	r3, [pc, #288]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	4b44      	ldr	r3, [pc, #272]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a43      	ldr	r2, [pc, #268]	@ (8002858 <MX_GPIO_Init+0x148>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b3d      	ldr	r3, [pc, #244]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a3c      	ldr	r2, [pc, #240]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a35      	ldr	r2, [pc, #212]	@ (8002858 <MX_GPIO_Init+0x148>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b33      	ldr	r3, [pc, #204]	@ (8002858 <MX_GPIO_Init+0x148>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b2f      	ldr	r3, [pc, #188]	@ (8002858 <MX_GPIO_Init+0x148>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	4a2e      	ldr	r2, [pc, #184]	@ (8002858 <MX_GPIO_Init+0x148>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <MX_GPIO_Init+0x148>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <MX_GPIO_Init+0x148>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a27      	ldr	r2, [pc, #156]	@ (8002858 <MX_GPIO_Init+0x148>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <MX_GPIO_Init+0x148>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2110      	movs	r1, #16
 80027d2:	4822      	ldr	r0, [pc, #136]	@ (800285c <MX_GPIO_Init+0x14c>)
 80027d4:	f002 fc94 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 80027d8:	2200      	movs	r2, #0
 80027da:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80027de:	4820      	ldr	r0, [pc, #128]	@ (8002860 <MX_GPIO_Init+0x150>)
 80027e0:	f002 fc8e 	bl	8005100 <HAL_GPIO_WritePin>
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIP_3_Pin DIP_4_Pin DIP_1_Pin DIP_2_Pin */
  GPIO_InitStruct.Pin = DIP_3_Pin|DIP_4_Pin|DIP_1_Pin|DIP_2_Pin;
 80027e4:	230f      	movs	r3, #15
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4619      	mov	r1, r3
 80027f6:	481a      	ldr	r0, [pc, #104]	@ (8002860 <MX_GPIO_Init+0x150>)
 80027f8:	f002 fae6 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80027fc:	2310      	movs	r3, #16
 80027fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002800:	2301      	movs	r3, #1
 8002802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	4619      	mov	r1, r3
 8002812:	4812      	ldr	r0, [pc, #72]	@ (800285c <MX_GPIO_Init+0x14c>)
 8002814:	f002 fad8 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin M_PWR_KEY_Pin
                           ESP_EN_Pin USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8002818:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800281c:	61fb      	str	r3, [r7, #28]
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281e:	2301      	movs	r3, #1
 8002820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	480b      	ldr	r0, [pc, #44]	@ (8002860 <MX_GPIO_Init+0x150>)
 8002832:	f002 fac9 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002836:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800283a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	4806      	ldr	r0, [pc, #24]	@ (8002864 <MX_GPIO_Init+0x154>)
 800284c:	f002 fabc 	bl	8004dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002850:	bf00      	nop
 8002852:	3730      	adds	r7, #48	@ 0x30
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	40020000 	.word	0x40020000
 8002860:	40021000 	.word	0x40021000
 8002864:	40020c00 	.word	0x40020c00

08002868 <HAL_TIM_PeriodElapsedCallback>:
//
// =======================================================================================================
/* tim 7 인터럽트 처리부 */
/* TIM7 업데이트 인터럽트 콜백 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    Timer_Interrupt_Proc();
 800287a:	f000 fc07 	bl	800308c <Timer_Interrupt_Proc>
      //   Error_Handler();
      // }      
    }
#endif
  }
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40001400 	.word	0x40001400

0800288c <HAL_UART_RxCpltCallback>:
//
// =======================================================================================================
/* uart 1 처리부 */
/* UART Rx Complete 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  // uart1에서 수신된 바이트를 처리
  if (huart->Instance == USART1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a28      	ldr	r2, [pc, #160]	@ (800293c <HAL_UART_RxCpltCallback+0xb0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d109      	bne.n	80028b2 <HAL_UART_RxCpltCallback+0x26>
  {
    // 1) 에코: 받은 바이트를 바로 송신
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 800289e:	2201      	movs	r2, #1
 80028a0:	4927      	ldr	r1, [pc, #156]	@ (8002940 <HAL_UART_RxCpltCallback+0xb4>)
 80028a2:	4828      	ldr	r0, [pc, #160]	@ (8002944 <HAL_UART_RxCpltCallback+0xb8>)
 80028a4:	f005 ff38 	bl	8008718 <HAL_UART_Transmit_IT>

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80028a8:	2201      	movs	r2, #1
 80028aa:	4925      	ldr	r1, [pc, #148]	@ (8002940 <HAL_UART_RxCpltCallback+0xb4>)
 80028ac:	4825      	ldr	r0, [pc, #148]	@ (8002944 <HAL_UART_RxCpltCallback+0xb8>)
 80028ae:	f005 ff69 	bl	8008784 <HAL_UART_Receive_IT>
  }

  // uart2에서 수신된 바이트를 처리

  if (huart->Instance == USART2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a24      	ldr	r2, [pc, #144]	@ (8002948 <HAL_UART_RxCpltCallback+0xbc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d12b      	bne.n	8002914 <HAL_UART_RxCpltCallback+0x88>
  {
    char c = g_atRxByte;
 80028bc:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_UART_RxCpltCallback+0xc0>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	73fb      	strb	r3, [r7, #15]

    // 1) 수신 바이트를 라인 버퍼에 저장
    if (atIdx < AT_RX_BUF_SIZE-1)
 80028c2:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <HAL_UART_RxCpltCallback+0xc4>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80028c8:	d809      	bhi.n	80028de <HAL_UART_RxCpltCallback+0x52>
    {
      atLineBuf[atIdx++] = c;
 80028ca:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_UART_RxCpltCallback+0xc4>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	b291      	uxth	r1, r2
 80028d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <HAL_UART_RxCpltCallback+0xc4>)
 80028d4:	8011      	strh	r1, [r2, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002954 <HAL_UART_RxCpltCallback+0xc8>)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	5453      	strb	r3, [r2, r1]
    }

    // 2) '\n' 이 들어오면 한 줄 완성
    if (c == '\n' || c == '\r')
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b0a      	cmp	r3, #10
 80028e2:	d002      	beq.n	80028ea <HAL_UART_RxCpltCallback+0x5e>
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b0d      	cmp	r3, #13
 80028e8:	d10f      	bne.n	800290a <HAL_UART_RxCpltCallback+0x7e>
    {
      atLineBuf[atIdx] = '\0';  // 문자열 종료
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_UART_RxCpltCallback+0xc4>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_UART_RxCpltCallback+0xc8>)
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

      // AT 명령어 처리 로직 (예: AT 명령어 파싱 및 응답)
      // 여기서 atLineBuf를 사용하여 AT 명령어를 처리
      // 받은 명령을 다시 STM uart 송신
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)atLineBuf, atIdx);
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <HAL_UART_RxCpltCallback+0xc4>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4915      	ldr	r1, [pc, #84]	@ (8002954 <HAL_UART_RxCpltCallback+0xc8>)
 80028fe:	4811      	ldr	r0, [pc, #68]	@ (8002944 <HAL_UART_RxCpltCallback+0xb8>)
 8002900:	f005 ff0a 	bl	8008718 <HAL_UART_Transmit_IT>

      atIdx = 0;  // 인덱스 초기화
 8002904:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_UART_RxCpltCallback+0xc4>)
 8002906:	2200      	movs	r2, #0
 8002908:	801a      	strh	r2, [r3, #0]
    }

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
 800290a:	2201      	movs	r2, #1
 800290c:	490f      	ldr	r1, [pc, #60]	@ (800294c <HAL_UART_RxCpltCallback+0xc0>)
 800290e:	4812      	ldr	r0, [pc, #72]	@ (8002958 <HAL_UART_RxCpltCallback+0xcc>)
 8002910:	f005 ff38 	bl	8008784 <HAL_UART_Receive_IT>
  }

  // uart3에서 수신된 바이트를 처리
  if (huart->Instance == USART3)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a10      	ldr	r2, [pc, #64]	@ (800295c <HAL_UART_RxCpltCallback+0xd0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d109      	bne.n	8002932 <HAL_UART_RxCpltCallback+0xa6>
  {
    // SIM 카드에서 수신된 바이트를 처리
    // 예: SIM 카드 응답을 UART1로 전달
    HAL_UART_Transmit_IT(&huart1, &rxSIMByte, 1);
 800291e:	2201      	movs	r2, #1
 8002920:	490f      	ldr	r1, [pc, #60]	@ (8002960 <HAL_UART_RxCpltCallback+0xd4>)
 8002922:	4808      	ldr	r0, [pc, #32]	@ (8002944 <HAL_UART_RxCpltCallback+0xb8>)
 8002924:	f005 fef8 	bl	8008718 <HAL_UART_Transmit_IT>

    // 다시 수신 대기
    HAL_UART_Receive_IT(&huart3, &rxSIMByte, 1);
 8002928:	2201      	movs	r2, #1
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <HAL_UART_RxCpltCallback+0xd4>)
 800292c:	480d      	ldr	r0, [pc, #52]	@ (8002964 <HAL_UART_RxCpltCallback+0xd8>)
 800292e:	f005 ff29 	bl	8008784 <HAL_UART_Receive_IT>
        // 2) 다시 UART2 수신 대기
        HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
    }
#endif

}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40011000 	.word	0x40011000
 8002940:	200007fe 	.word	0x200007fe
 8002944:	20000704 	.word	0x20000704
 8002948:	40004400 	.word	0x40004400
 800294c:	2000007c 	.word	0x2000007c
 8002950:	200000c0 	.word	0x200000c0
 8002954:	20000080 	.word	0x20000080
 8002958:	2000074c 	.word	0x2000074c
 800295c:	40004800 	.word	0x40004800
 8002960:	200007ff 	.word	0x200007ff
 8002964:	20000794 	.word	0x20000794

08002968 <HAL_UART_TxCpltCallback>:

/* UART 전송 완료 콜백 (필요 시..) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  // 전송 완료 후 다른 처리가 필요하면 여기에…
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <Error_Handler+0x8>

08002988 <SD_Card_Check>:
// ──────────────────────────────────────────────────────────────────────────────

// ──────────────────────────────────────────────────────────────────────────────

void SD_Card_Check(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
    int isSd = SD_Card_Is_Exist(); // SD 카드 존재 여부 확인
 800298e:	f001 fafb 	bl	8003f88 <SD_Card_Is_Exist>
 8002992:	6078      	str	r0, [r7, #4]

    while (isSd == SD_ERROR)
 8002994:	e017      	b.n	80029c6 <SD_Card_Check+0x3e>
    {
        HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_SET);  // LED ON
 8002996:	2201      	movs	r2, #1
 8002998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800299c:	480e      	ldr	r0, [pc, #56]	@ (80029d8 <SD_Card_Check+0x50>)
 800299e:	f002 fbaf 	bl	8005100 <HAL_GPIO_WritePin>
        HAL_Delay(200);  // 0.5초 대기
 80029a2:	20c8      	movs	r0, #200	@ 0xc8
 80029a4:	f002 f848 	bl	8004a38 <HAL_Delay>
        HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_RESET); // LED OFF
 80029a8:	2200      	movs	r2, #0
 80029aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029ae:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <SD_Card_Check+0x50>)
 80029b0:	f002 fba6 	bl	8005100 <HAL_GPIO_WritePin>
        HAL_Delay(200);  // 0.5초 대기
 80029b4:	20c8      	movs	r0, #200	@ 0xc8
 80029b6:	f002 f83f 	bl	8004a38 <HAL_Delay>

        isSd = SD_Card_Is_Exist(); // SD 카드 존재 여부 확인
 80029ba:	f001 fae5 	bl	8003f88 <SD_Card_Is_Exist>
 80029be:	6078      	str	r0, [r7, #4]
        if(isSd == SD_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <SD_Card_Check+0x46>
    while (isSd == SD_ERROR)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d0e4      	beq.n	8002996 <SD_Card_Check+0xe>
        {
            break; // SD 카드가 존재하면 루프 종료
        }
    }
}
 80029cc:	e000      	b.n	80029d0 <SD_Card_Check+0x48>
            break; // SD 카드가 존재하면 루프 종료
 80029ce:	bf00      	nop
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000

080029dc <Mode_Check>:


// ──────────────────────────────────────────────────────────────────────────────

void Mode_Check(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
    int mode = Device_Mode_Check(); // 현재 모드 확인
 80029e2:	f7fe f8fb 	bl	8000bdc <Device_Mode_Check>
 80029e6:	6078      	str	r0, [r7, #4]

    // Device_Mode_Check 함수에서 모드가 변경되어 반영했으므로 아래는 따로 진행안해도 무관
    switch (mode)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b07      	cmp	r3, #7
 80029ec:	d812      	bhi.n	8002a14 <Mode_Check+0x38>
 80029ee:	a201      	add	r2, pc, #4	@ (adr r2, 80029f4 <Mode_Check+0x18>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a15 	.word	0x08002a15
 80029f8:	08002a15 	.word	0x08002a15
 80029fc:	08002a15 	.word	0x08002a15
 8002a00:	08002a15 	.word	0x08002a15
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a15 	.word	0x08002a15
 8002a0c:	08002a15 	.word	0x08002a15
 8002a10:	08002a15 	.word	0x08002a15
        break;
    case MODE_TEST:
        break;
    
    default:
        break;
 8002a14:	bf00      	nop
    }

    g_nMode = mode; // 현재 모드
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <Mode_Check+0x4c>)
 8002a1c:	701a      	strb	r2, [r3, #0]
    
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000800 	.word	0x20000800

08002a2c <AP_Mode_Proc>:

// ──────────────────────────────────────────────────────────────────────────────

// AP 모드 프로세스
void AP_Mode_Proc(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
    int step = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
    int result = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
    int bootLoop = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]

    // ====================================================================

    // 부팅 동작
    while (bootLoop)
 8002a3e:	e044      	b.n	8002aca <AP_Mode_Proc+0x9e>
    {
        switch (step)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d03d      	beq.n	8002ac2 <AP_Mode_Proc+0x96>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	dc3d      	bgt.n	8002ac8 <AP_Mode_Proc+0x9c>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <AP_Mode_Proc+0x2e>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d01a      	beq.n	8002a8e <AP_Mode_Proc+0x62>
        case 2:
            bootLoop = 0; // 부팅 루프 종료
            break;
        
        default:
            break;
 8002a58:	e036      	b.n	8002ac8 <AP_Mode_Proc+0x9c>
            result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 8002a5a:	f001 f85d 	bl	8003b18 <SD_Card_Boot>
 8002a5e:	6078      	str	r0, [r7, #4]
            SD_Card_Log("SD Card Boot...\n");
 8002a60:	4828      	ldr	r0, [pc, #160]	@ (8002b04 <AP_Mode_Proc+0xd8>)
 8002a62:	f001 fa11 	bl	8003e88 <SD_Card_Log>
            if (result == SD_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <AP_Mode_Proc+0x4e>
                SD_Card_Log("SD Card Booted Successfully!\n");
 8002a6c:	4826      	ldr	r0, [pc, #152]	@ (8002b08 <AP_Mode_Proc+0xdc>)
 8002a6e:	f001 fa0b 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3301      	adds	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
            break;
 8002a78:	e027      	b.n	8002aca <AP_Mode_Proc+0x9e>
                SD_Card_Log("SD Card Boot Failed!\n");
 8002a7a:	4824      	ldr	r0, [pc, #144]	@ (8002b0c <AP_Mode_Proc+0xe0>)
 8002a7c:	f001 fa04 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002a80:	4823      	ldr	r0, [pc, #140]	@ (8002b10 <AP_Mode_Proc+0xe4>)
 8002a82:	f001 fa01 	bl	8003e88 <SD_Card_Log>
                Error_Proc(1);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 f858 	bl	8002b3c <Error_Proc>
            break;
 8002a8c:	e01d      	b.n	8002aca <AP_Mode_Proc+0x9e>
            result = ESP_AT_Boot(); // ESP32 AT 테스트
 8002a8e:	f7fe f949 	bl	8000d24 <ESP_AT_Boot>
 8002a92:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 AT Boot...\n");
 8002a94:	481f      	ldr	r0, [pc, #124]	@ (8002b14 <AP_Mode_Proc+0xe8>)
 8002a96:	f001 f9f7 	bl	8003e88 <SD_Card_Log>
            if (result == AT_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <AP_Mode_Proc+0x82>
                SD_Card_Log("ESP32 AT Booted Successfully!\n");
 8002aa0:	481d      	ldr	r0, [pc, #116]	@ (8002b18 <AP_Mode_Proc+0xec>)
 8002aa2:	f001 f9f1 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
            break;
 8002aac:	e00d      	b.n	8002aca <AP_Mode_Proc+0x9e>
                SD_Card_Log("ESP32 AT Boot Failed!\n");
 8002aae:	481b      	ldr	r0, [pc, #108]	@ (8002b1c <AP_Mode_Proc+0xf0>)
 8002ab0:	f001 f9ea 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002ab4:	4816      	ldr	r0, [pc, #88]	@ (8002b10 <AP_Mode_Proc+0xe4>)
 8002ab6:	f001 f9e7 	bl	8003e88 <SD_Card_Log>
                Error_Proc(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 f83e 	bl	8002b3c <Error_Proc>
            break;
 8002ac0:	e003      	b.n	8002aca <AP_Mode_Proc+0x9e>
            bootLoop = 0; // 부팅 루프 종료
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
            break;
 8002ac6:	e000      	b.n	8002aca <AP_Mode_Proc+0x9e>
            break;
 8002ac8:	bf00      	nop
    while (bootLoop)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1b7      	bne.n	8002a40 <AP_Mode_Proc+0x14>

    //     ESP_AP_Server(); // ESP32 AP 서버 시작
    // }

    // 와이파이 드라이버 초기화
    ESP_AT_Send_Command_Sync("AT+CWINIT=1\r\n");
 8002ad0:	4813      	ldr	r0, [pc, #76]	@ (8002b20 <AP_Mode_Proc+0xf4>)
 8002ad2:	f7fe f9e3 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    // softAP 모드로 설정
    ESP_AT_Send_Command_Sync("AT+CWMODE=3\r\n");
 8002ad6:	4813      	ldr	r0, [pc, #76]	@ (8002b24 <AP_Mode_Proc+0xf8>)
 8002ad8:	f7fe f9e0 	bl	8000e9c <ESP_AT_Send_Command_Sync>
    
    // AP SSID와 비밀번호 설정
    // ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT_AP\",\"12345678\",5,3\r\n");
    ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT_AP\",\"\",5,0\r\n");
 8002adc:	4812      	ldr	r0, [pc, #72]	@ (8002b28 <AP_Mode_Proc+0xfc>)
 8002ade:	f7fe f9dd 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    // SoftAP DHCP 서버 활성화
    ESP_AT_Send_Command_Sync("AT+CWDHCP=1,2\r\n");
 8002ae2:	4812      	ldr	r0, [pc, #72]	@ (8002b2c <AP_Mode_Proc+0x100>)
 8002ae4:	f7fe f9da 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    // SoftAP IP 주소 설정
    ESP_AT_Send_Command_Sync("AT+CIPAP=\"192.168.4.1\",\"255.255.255.0\"\r\n");
 8002ae8:	4811      	ldr	r0, [pc, #68]	@ (8002b30 <AP_Mode_Proc+0x104>)
 8002aea:	f7fe f9d7 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    // 멀티플 커넥션 모드 설정
    ESP_AT_Send_Command_Sync("AT+CIPMUX=1\r\n");
 8002aee:	4811      	ldr	r0, [pc, #68]	@ (8002b34 <AP_Mode_Proc+0x108>)
 8002af0:	f7fe f9d4 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    // HTTP 서버 시작
    ESP_AT_Send_Command_Sync("AT+CIPSERVER=1,80\r\n");
 8002af4:	4810      	ldr	r0, [pc, #64]	@ (8002b38 <AP_Mode_Proc+0x10c>)
 8002af6:	f7fe f9d1 	bl	8000e9c <ESP_AT_Send_Command_Sync>

    Handle_IPD_and_Respond(); // 클라이언트 요청 처리
 8002afa:	f7fe ff39 	bl	8001970 <Handle_IPD_and_Respond>

    while (1)
 8002afe:	bf00      	nop
 8002b00:	e7fd      	b.n	8002afe <AP_Mode_Proc+0xd2>
 8002b02:	bf00      	nop
 8002b04:	0800e3d4 	.word	0x0800e3d4
 8002b08:	0800e3e8 	.word	0x0800e3e8
 8002b0c:	0800e408 	.word	0x0800e408
 8002b10:	0800e420 	.word	0x0800e420
 8002b14:	0800e42c 	.word	0x0800e42c
 8002b18:	0800e440 	.word	0x0800e440
 8002b1c:	0800e460 	.word	0x0800e460
 8002b20:	0800e478 	.word	0x0800e478
 8002b24:	0800e488 	.word	0x0800e488
 8002b28:	0800e498 	.word	0x0800e498
 8002b2c:	0800e4b8 	.word	0x0800e4b8
 8002b30:	0800e4c8 	.word	0x0800e4c8
 8002b34:	0800e4f4 	.word	0x0800e4f4
 8002b38:	0800e504 	.word	0x0800e504

08002b3c <Error_Proc>:

// ──────────────────────────────────────────────────────────────────────────────
// 파라미터 0 : Error_Handler 호출
// 파라미터 !0 : uart1 코맨트 전송
void Error_Proc(int errorCode)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    const char *comment = "Check Log.txt!\r\n";
 8002b44:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <Error_Proc+0x58>)
 8002b46:	60fb      	str	r3, [r7, #12]

    switch (errorCode)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <Error_Proc+0x1a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d003      	beq.n	8002b5c <Error_Proc+0x20>
 8002b54:	e00e      	b.n	8002b74 <Error_Proc+0x38>
    {
    case 0:
        Error_Handler();
 8002b56:	f7ff ff11 	bl	800297c <Error_Handler>
        break;
 8002b5a:	e017      	b.n	8002b8c <Error_Proc+0x50>
    case 1:
        HAL_UART_Transmit(&huart1, (uint8_t*)comment, strlen(comment), HAL_MAX_DELAY);
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7fd fb41 	bl	80001e4 <strlen>
 8002b62:	4603      	mov	r3, r0
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	480a      	ldr	r0, [pc, #40]	@ (8002b98 <Error_Proc+0x5c>)
 8002b6e:	f005 fcb1 	bl	80084d4 <HAL_UART_Transmit>
        break;
 8002b72:	e00b      	b.n	8002b8c <Error_Proc+0x50>
    
    default:
        HAL_UART_Transmit(&huart1, (uint8_t*)comment, strlen(comment), HAL_MAX_DELAY);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7fd fb35 	bl	80001e4 <strlen>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <Error_Proc+0x5c>)
 8002b86:	f005 fca5 	bl	80084d4 <HAL_UART_Transmit>
        break;
 8002b8a:	bf00      	nop
    }
    
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	0800e518 	.word	0x0800e518
 8002b98:	20000704 	.word	0x20000704

08002b9c <Master_Proc>:

// ──────────────────────────────────────────────────────────────────────────────

void Master_Proc(void) 
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
    switch (g_nBoot_Step)
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <Master_Proc+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
    case 0:
            
      break;
    
    default:
      break;
 8002ba6:	bf00      	nop
    }

    SD_Card_Check(); // SD 카드 존재 여부 확인
 8002ba8:	f7ff feee 	bl	8002988 <SD_Card_Check>
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000080c 	.word	0x2000080c

08002bb4 <DEBUG_Proc>:

// ─────────────────────────────────────────────────────────────────────────────

void DEBUG_Proc(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b0c4      	sub	sp, #272	@ 0x110
 8002bb8:	af00      	add	r7, sp, #0
    // 디버그 모드인걸 uart로 알리기
    const char *debugMsg = "DEBUG MODE ACTIVE!\r\n";
 8002bba:	4b35      	ldr	r3, [pc, #212]	@ (8002c90 <DEBUG_Proc+0xdc>)
 8002bbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_UART_Transmit(&huart1, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8002bc0:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002bc4:	f7fd fb0e 	bl	80001e4 <strlen>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8002bd4:	482f      	ldr	r0, [pc, #188]	@ (8002c94 <DEBUG_Proc+0xe0>)
 8002bd6:	f005 fc7d 	bl	80084d4 <HAL_UART_Transmit>

    // SIM_Init(); // SIM 모듈 초기화, 앞에서 이미 했음

    // SIM 모듈 전원 끄기
    // HAL_TICK 사용
    uint32_t start = HAL_GetTick();
 8002bda:	f001 ff21 	bl	8004a20 <HAL_GetTick>
 8002bde:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    uint8_t  ch;
    size_t   idx = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    // while ((HAL_GetTick() - start) < 100)
    // {   
    //     SIM_PWR_ON();  // OFF 해야 HIGH 신호 발생, 오실로스코프 찍어보셈
    // }

    start = HAL_GetTick();
 8002be8:	f001 ff1a 	bl	8004a20 <HAL_GetTick>
 8002bec:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    while ((HAL_GetTick() - start) < 200)
 8002bf0:	e001      	b.n	8002bf6 <DEBUG_Proc+0x42>
    {
        SIM_PWR_OFF();   // ON 해야 LOW 신호 발생
 8002bf2:	f001 fb61 	bl	80042b8 <SIM_PWR_OFF>
    while ((HAL_GetTick() - start) < 200)
 8002bf6:	f001 ff13 	bl	8004a20 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c04:	d9f5      	bls.n	8002bf2 <DEBUG_Proc+0x3e>
    }
    // SIM 모듈 상태 ON 1.1초
    HAL_UART_Transmit(&huart1, (uint8_t*)"SIM ON!\r\n", 10, HAL_MAX_DELAY);
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	220a      	movs	r2, #10
 8002c0c:	4922      	ldr	r1, [pc, #136]	@ (8002c98 <DEBUG_Proc+0xe4>)
 8002c0e:	4821      	ldr	r0, [pc, #132]	@ (8002c94 <DEBUG_Proc+0xe0>)
 8002c10:	f005 fc60 	bl	80084d4 <HAL_UART_Transmit>
    start = HAL_GetTick();
 8002c14:	f001 ff04 	bl	8004a20 <HAL_GetTick>
 8002c18:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    while ((HAL_GetTick() - start) < 200)
 8002c1c:	e001      	b.n	8002c22 <DEBUG_Proc+0x6e>
    {
        SIM_PWR_ON();   // ON 해야 LOW 신호 발생
 8002c1e:	f001 fb3d 	bl	800429c <SIM_PWR_ON>
    while ((HAL_GetTick() - start) < 200)
 8002c22:	f001 fefd 	bl	8004a20 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c30:	d9f5      	bls.n	8002c1e <DEBUG_Proc+0x6a>
    }
    SIM_PWR_OFF();   // ON 해야 LOW 신호 발생
 8002c32:	f001 fb41 	bl	80042b8 <SIM_PWR_OFF>
    }
#endif
    // uart 3에서 들어오는 값 확인
    char resp[256];
    size_t n;
    n = SIM_UART_ReadData(resp, sizeof(resp), 10000, 1000); // 10초 전체 대기, 바이트당 1000ms 대기
 8002c36:	4638      	mov	r0, r7
 8002c38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c3c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002c40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c44:	f001 fb46 	bl	80042d4 <SIM_UART_ReadData>
 8002c48:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100

    if (n > 0)
 8002c4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <DEBUG_Proc+0xc6>
    {
        resp[n] = '\0'; // 문자열 종료
 8002c54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c58:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8002c5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002c60:	4413      	add	r3, r2
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)resp, n, HAL_MAX_DELAY); // uart1로 전송
 8002c66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4639      	mov	r1, r7
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	4808      	ldr	r0, [pc, #32]	@ (8002c94 <DEBUG_Proc+0xe0>)
 8002c74:	f005 fc2e 	bl	80084d4 <HAL_UART_Transmit>
 8002c78:	e007      	b.n	8002c8a <DEBUG_Proc+0xd6>
    }
    else
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)"No data received!\r\n", 20, HAL_MAX_DELAY);
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	2214      	movs	r2, #20
 8002c80:	4906      	ldr	r1, [pc, #24]	@ (8002c9c <DEBUG_Proc+0xe8>)
 8002c82:	4804      	ldr	r0, [pc, #16]	@ (8002c94 <DEBUG_Proc+0xe0>)
 8002c84:	f005 fc26 	bl	80084d4 <HAL_UART_Transmit>
    }

    
    while (1)
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	e7fd      	b.n	8002c8a <DEBUG_Proc+0xd6>
 8002c8e:	bf00      	nop
 8002c90:	0800e52c 	.word	0x0800e52c
 8002c94:	20000704 	.word	0x20000704
 8002c98:	0800e544 	.word	0x0800e544
 8002c9c:	0800e550 	.word	0x0800e550

08002ca0 <Test_Proc>:


// ─────────────────────────────────────────────────────────────────────────────

void Test_Proc(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
    // 테스트 모드 프로세스
    // 마스터 시퀀스 테스트
    // 순서 ESP AP 모드열어서 휴대폰으로 WIFI 접속
    // 웹사이트 접근
    
    int step = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
    int result = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
    int bootLoop = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
 
    const char *testMsg = "TEST MODE ACTIVE!\r\n";
 8002cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8002f3c <Test_Proc+0x29c>)
 8002cb4:	603b      	str	r3, [r7, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	f7fd fa94 	bl	80001e4 <strlen>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	489e      	ldr	r0, [pc, #632]	@ (8002f40 <Test_Proc+0x2a0>)
 8002cc8:	f005 fc04 	bl	80084d4 <HAL_UART_Transmit>

    // 테스트 모드 부팅 동작
    while (bootLoop)
 8002ccc:	e1c1      	b.n	8003052 <Test_Proc+0x3b2>
    {
        switch (step)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b16      	cmp	r3, #22
 8002cd2:	f200 81bd 	bhi.w	8003050 <Test_Proc+0x3b0>
 8002cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <Test_Proc+0x3c>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002d39 	.word	0x08002d39
 8002ce0:	08002d81 	.word	0x08002d81
 8002ce4:	08002dc9 	.word	0x08002dc9
 8002ce8:	08002e13 	.word	0x08002e13
 8002cec:	08002e5d 	.word	0x08002e5d
 8002cf0:	08002ea7 	.word	0x08002ea7
 8002cf4:	08002ef1 	.word	0x08002ef1
 8002cf8:	08002fb1 	.word	0x08002fb1
 8002cfc:	08002ffb 	.word	0x08002ffb
 8002d00:	08003045 	.word	0x08003045
 8002d04:	08003051 	.word	0x08003051
 8002d08:	08003051 	.word	0x08003051
 8002d0c:	08003051 	.word	0x08003051
 8002d10:	08003051 	.word	0x08003051
 8002d14:	08003051 	.word	0x08003051
 8002d18:	08003051 	.word	0x08003051
 8002d1c:	08003051 	.word	0x08003051
 8002d20:	08003051 	.word	0x08003051
 8002d24:	08003051 	.word	0x08003051
 8002d28:	08003051 	.word	0x08003051
 8002d2c:	08003051 	.word	0x08003051
 8002d30:	08003051 	.word	0x08003051
 8002d34:	0800304b 	.word	0x0800304b
        {
        case 0:
            result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 8002d38:	f000 feee 	bl	8003b18 <SD_Card_Boot>
 8002d3c:	6078      	str	r0, [r7, #4]
            
            SD_Card_Log("SD Card Boot...\n");
 8002d3e:	4881      	ldr	r0, [pc, #516]	@ (8002f44 <Test_Proc+0x2a4>)
 8002d40:	f001 f8a2 	bl	8003e88 <SD_Card_Log>
            
            if (result == SD_OK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d113      	bne.n	8002d72 <Test_Proc+0xd2>
            {
                SD_Card_Log("SD Card Booted Successfully!\n");
 8002d4a:	487f      	ldr	r0, [pc, #508]	@ (8002f48 <Test_Proc+0x2a8>)
 8002d4c:	f001 f89c 	bl	8003e88 <SD_Card_Log>
                testMsg = "SD Card Booted Successfully!\n";
 8002d50:	4b7d      	ldr	r3, [pc, #500]	@ (8002f48 <Test_Proc+0x2a8>)
 8002d52:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002d54:	6838      	ldr	r0, [r7, #0]
 8002d56:	f7fd fa45 	bl	80001e4 <strlen>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	4876      	ldr	r0, [pc, #472]	@ (8002f40 <Test_Proc+0x2a0>)
 8002d66:	f005 fbb5 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("again...\n");
                // SD 카드 부팅 실패 시 에러 처리
                // Error_Handler();
                // Error_Proc(1);
            }
            break;
 8002d70:	e16f      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("SD Card Boot Failed!\n");
 8002d72:	4876      	ldr	r0, [pc, #472]	@ (8002f4c <Test_Proc+0x2ac>)
 8002d74:	f001 f888 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002d78:	4875      	ldr	r0, [pc, #468]	@ (8002f50 <Test_Proc+0x2b0>)
 8002d7a:	f001 f885 	bl	8003e88 <SD_Card_Log>
            break;
 8002d7e:	e168      	b.n	8003052 <Test_Proc+0x3b2>
            // ----------------------
        case 1:
            result = ESP_AT_Boot(); // ESP32 AT 테스트
 8002d80:	f7fd ffd0 	bl	8000d24 <ESP_AT_Boot>
 8002d84:	6078      	str	r0, [r7, #4]

            SD_Card_Log("ESP32 AT Boot...\n");
 8002d86:	4873      	ldr	r0, [pc, #460]	@ (8002f54 <Test_Proc+0x2b4>)
 8002d88:	f001 f87e 	bl	8003e88 <SD_Card_Log>

            if (result == AT_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <Test_Proc+0x11a>
            {
                SD_Card_Log("ESP32 AT Booted Successfully!\n");
 8002d92:	4871      	ldr	r0, [pc, #452]	@ (8002f58 <Test_Proc+0x2b8>)
 8002d94:	f001 f878 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 AT Booted Successfully!\n";
 8002d98:	4b6f      	ldr	r3, [pc, #444]	@ (8002f58 <Test_Proc+0x2b8>)
 8002d9a:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	f7fd fa21 	bl	80001e4 <strlen>
 8002da2:	4603      	mov	r3, r0
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	6839      	ldr	r1, [r7, #0]
 8002dac:	4864      	ldr	r0, [pc, #400]	@ (8002f40 <Test_Proc+0x2a0>)
 8002dae:	f005 fb91 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3301      	adds	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("again...\n");
                // ESP32 AT 부팅 실패 시 에러 처리
                //Error_Handler();
                // Error_Proc(1);
            }
            break;
 8002db8:	e14b      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 AT Boot Failed!\n");
 8002dba:	4868      	ldr	r0, [pc, #416]	@ (8002f5c <Test_Proc+0x2bc>)
 8002dbc:	f001 f864 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002dc0:	4863      	ldr	r0, [pc, #396]	@ (8002f50 <Test_Proc+0x2b0>)
 8002dc2:	f001 f861 	bl	8003e88 <SD_Card_Log>
            break;
 8002dc6:	e144      	b.n	8003052 <Test_Proc+0x3b2>
            // ----------------------
        case 2:
            // 와이파이 드라이버 초기화
            result = ESP_AT_Send_Command_Sync_Get_int("AT+CWINIT=1\r\n");
 8002dc8:	4865      	ldr	r0, [pc, #404]	@ (8002f60 <Test_Proc+0x2c0>)
 8002dca:	f7fe f951 	bl	8001070 <ESP_AT_Send_Command_Sync_Get_int>
 8002dce:	6078      	str	r0, [r7, #4]

            SD_Card_Log("ESP32 WiFi Init...\n");
 8002dd0:	4864      	ldr	r0, [pc, #400]	@ (8002f64 <Test_Proc+0x2c4>)
 8002dd2:	f001 f859 	bl	8003e88 <SD_Card_Log>

            if (result == AT_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d113      	bne.n	8002e04 <Test_Proc+0x164>
            {
                SD_Card_Log("ESP32 WiFi Init Success!\n");
 8002ddc:	4862      	ldr	r0, [pc, #392]	@ (8002f68 <Test_Proc+0x2c8>)
 8002dde:	f001 f853 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 WiFi Init Success!\n";
 8002de2:	4b61      	ldr	r3, [pc, #388]	@ (8002f68 <Test_Proc+0x2c8>)
 8002de4:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002de6:	6838      	ldr	r0, [r7, #0]
 8002de8:	f7fd f9fc 	bl	80001e4 <strlen>
 8002dec:	4603      	mov	r3, r0
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	4852      	ldr	r0, [pc, #328]	@ (8002f40 <Test_Proc+0x2a0>)
 8002df8:	f005 fb6c 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("ESP32 WiFi Init Failed!\n");
                SD_Card_Log("again...\n");
                // ESP32 WiFi 초기화 실패 시 에러 처리
                // Error_Proc(1);
            }
            break;
 8002e02:	e126      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 WiFi Init Failed!\n");
 8002e04:	4859      	ldr	r0, [pc, #356]	@ (8002f6c <Test_Proc+0x2cc>)
 8002e06:	f001 f83f 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002e0a:	4851      	ldr	r0, [pc, #324]	@ (8002f50 <Test_Proc+0x2b0>)
 8002e0c:	f001 f83c 	bl	8003e88 <SD_Card_Log>
            break;
 8002e10:	e11f      	b.n	8003052 <Test_Proc+0x3b2>
            // ----------------------
        case 3:
            // softAP 모드로 설정
            result = ESP_AT_Send_Command_Sync_Get_int("AT+CWMODE=2\r\n");
 8002e12:	4857      	ldr	r0, [pc, #348]	@ (8002f70 <Test_Proc+0x2d0>)
 8002e14:	f7fe f92c 	bl	8001070 <ESP_AT_Send_Command_Sync_Get_int>
 8002e18:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 Set SoftAP Mode...\n");
 8002e1a:	4856      	ldr	r0, [pc, #344]	@ (8002f74 <Test_Proc+0x2d4>)
 8002e1c:	f001 f834 	bl	8003e88 <SD_Card_Log>
            if (result == AT_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d113      	bne.n	8002e4e <Test_Proc+0x1ae>
            {
                SD_Card_Log("ESP32 Set SoftAP Mode Success!\n");
 8002e26:	4854      	ldr	r0, [pc, #336]	@ (8002f78 <Test_Proc+0x2d8>)
 8002e28:	f001 f82e 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 Set SoftAP Mode Success!\n";
 8002e2c:	4b52      	ldr	r3, [pc, #328]	@ (8002f78 <Test_Proc+0x2d8>)
 8002e2e:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002e30:	6838      	ldr	r0, [r7, #0]
 8002e32:	f7fd f9d7 	bl	80001e4 <strlen>
 8002e36:	4603      	mov	r3, r0
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	483f      	ldr	r0, [pc, #252]	@ (8002f40 <Test_Proc+0x2a0>)
 8002e42:	f005 fb47 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("ESP32 Set SoftAP Mode Failed!\n");
                SD_Card_Log("again...\n");
                // ESP32 SoftAP 모드 설정 실패 시 에러 처리
                // Error_Proc(1);
            }
            break;
 8002e4c:	e101      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 Set SoftAP Mode Failed!\n");
 8002e4e:	484b      	ldr	r0, [pc, #300]	@ (8002f7c <Test_Proc+0x2dc>)
 8002e50:	f001 f81a 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002e54:	483e      	ldr	r0, [pc, #248]	@ (8002f50 <Test_Proc+0x2b0>)
 8002e56:	f001 f817 	bl	8003e88 <SD_Card_Log>
            break;
 8002e5a:	e0fa      	b.n	8003052 <Test_Proc+0x3b2>
            // ----------------------
        case 4:
            // AP SSID와 비밀번호 설정
            result = ESP_AT_Send_Command_Sync_Get_int("AT+CWSAP=\"AMKIT_AP\",\"\",5,0\r\n");
 8002e5c:	4848      	ldr	r0, [pc, #288]	@ (8002f80 <Test_Proc+0x2e0>)
 8002e5e:	f7fe f907 	bl	8001070 <ESP_AT_Send_Command_Sync_Get_int>
 8002e62:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 Set SoftAP SSID and Password...\n");
 8002e64:	4847      	ldr	r0, [pc, #284]	@ (8002f84 <Test_Proc+0x2e4>)
 8002e66:	f001 f80f 	bl	8003e88 <SD_Card_Log>
            if (result == AT_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d113      	bne.n	8002e98 <Test_Proc+0x1f8>
            {
                SD_Card_Log("ESP32 Set SoftAP SSID and Password Success!\n");
 8002e70:	4845      	ldr	r0, [pc, #276]	@ (8002f88 <Test_Proc+0x2e8>)
 8002e72:	f001 f809 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 Set SoftAP SSID and Password Success!\n";
 8002e76:	4b44      	ldr	r3, [pc, #272]	@ (8002f88 <Test_Proc+0x2e8>)
 8002e78:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002e7a:	6838      	ldr	r0, [r7, #0]
 8002e7c:	f7fd f9b2 	bl	80001e4 <strlen>
 8002e80:	4603      	mov	r3, r0
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	6839      	ldr	r1, [r7, #0]
 8002e8a:	482d      	ldr	r0, [pc, #180]	@ (8002f40 <Test_Proc+0x2a0>)
 8002e8c:	f005 fb22 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("ESP32 Set SoftAP SSID and Password Failed!\n");
                SD_Card_Log("again...\n");
                // ESP32 SoftAP SSID와 비밀번호 설정 실패 시 에러 처리
                // Error_Proc(1);
            }
            break;
 8002e96:	e0dc      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 Set SoftAP SSID and Password Failed!\n");
 8002e98:	483c      	ldr	r0, [pc, #240]	@ (8002f8c <Test_Proc+0x2ec>)
 8002e9a:	f000 fff5 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002e9e:	482c      	ldr	r0, [pc, #176]	@ (8002f50 <Test_Proc+0x2b0>)
 8002ea0:	f000 fff2 	bl	8003e88 <SD_Card_Log>
            break;
 8002ea4:	e0d5      	b.n	8003052 <Test_Proc+0x3b2>
            // ----------------------
        case 5:
            // SoftAP DHCP 서버 활성화
            result = ESP_AT_Send_Command_Sync_Get_int("AT+CWDHCP=1,2\r\n");
 8002ea6:	483a      	ldr	r0, [pc, #232]	@ (8002f90 <Test_Proc+0x2f0>)
 8002ea8:	f7fe f8e2 	bl	8001070 <ESP_AT_Send_Command_Sync_Get_int>
 8002eac:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 Enable SoftAP DHCP Server...\n");
 8002eae:	4839      	ldr	r0, [pc, #228]	@ (8002f94 <Test_Proc+0x2f4>)
 8002eb0:	f000 ffea 	bl	8003e88 <SD_Card_Log>
            if (result == AT_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <Test_Proc+0x242>
            {
                SD_Card_Log("ESP32 Enable SoftAP DHCP Server Success!\n");
 8002eba:	4837      	ldr	r0, [pc, #220]	@ (8002f98 <Test_Proc+0x2f8>)
 8002ebc:	f000 ffe4 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 Enable SoftAP DHCP Server Success!\n";
 8002ec0:	4b35      	ldr	r3, [pc, #212]	@ (8002f98 <Test_Proc+0x2f8>)
 8002ec2:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f7fd f98d 	bl	80001e4 <strlen>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	481a      	ldr	r0, [pc, #104]	@ (8002f40 <Test_Proc+0x2a0>)
 8002ed6:	f005 fafd 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3301      	adds	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("ESP32 Enable SoftAP DHCP Server Failed!\n");
                SD_Card_Log("again...\n");
                // ESP32 SoftAP DHCP 서버 활성화 실패 시 에러 처리
                // Error_Proc(1);
            }
            break;
 8002ee0:	e0b7      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 Enable SoftAP DHCP Server Failed!\n");
 8002ee2:	482e      	ldr	r0, [pc, #184]	@ (8002f9c <Test_Proc+0x2fc>)
 8002ee4:	f000 ffd0 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002ee8:	4819      	ldr	r0, [pc, #100]	@ (8002f50 <Test_Proc+0x2b0>)
 8002eea:	f000 ffcd 	bl	8003e88 <SD_Card_Log>
            break;
 8002eee:	e0b0      	b.n	8003052 <Test_Proc+0x3b2>
                // ESP32 SoftAP IP 주소 조회 실패 시 에러 처리
                Error_Proc(1);
            }
        #else
            // SoftAP IP 주소 설정
            result = ESP_AT_Send_Command_Sync_Get_int("AT+CIPAP=\"192.168.4.1\",\"255.255.255.0\"\r\n");
 8002ef0:	482b      	ldr	r0, [pc, #172]	@ (8002fa0 <Test_Proc+0x300>)
 8002ef2:	f7fe f8bd 	bl	8001070 <ESP_AT_Send_Command_Sync_Get_int>
 8002ef6:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 Set SoftAP IP Address...\n");
 8002ef8:	482a      	ldr	r0, [pc, #168]	@ (8002fa4 <Test_Proc+0x304>)
 8002efa:	f000 ffc5 	bl	8003e88 <SD_Card_Log>
            if (result == AT_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d113      	bne.n	8002f2c <Test_Proc+0x28c>
            {
                SD_Card_Log("ESP32 Set SoftAP IP Address Success!\n");
 8002f04:	4828      	ldr	r0, [pc, #160]	@ (8002fa8 <Test_Proc+0x308>)
 8002f06:	f000 ffbf 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 Set SoftAP IP Address Success!\n";
 8002f0a:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <Test_Proc+0x308>)
 8002f0c:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	f7fd f968 	bl	80001e4 <strlen>
 8002f14:	4603      	mov	r3, r0
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	4808      	ldr	r0, [pc, #32]	@ (8002f40 <Test_Proc+0x2a0>)
 8002f20:	f005 fad8 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("again...\n");
                // ESP32 SoftAP IP 주소 설정 실패 시 에러 처리
                // Error_Proc(1);
            }
        #endif
            break;
 8002f2a:	e092      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 Set SoftAP IP Address Failed!\n");
 8002f2c:	481f      	ldr	r0, [pc, #124]	@ (8002fac <Test_Proc+0x30c>)
 8002f2e:	f000 ffab 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002f32:	4807      	ldr	r0, [pc, #28]	@ (8002f50 <Test_Proc+0x2b0>)
 8002f34:	f000 ffa8 	bl	8003e88 <SD_Card_Log>
            break;
 8002f38:	e08b      	b.n	8003052 <Test_Proc+0x3b2>
 8002f3a:	bf00      	nop
 8002f3c:	0800e564 	.word	0x0800e564
 8002f40:	20000704 	.word	0x20000704
 8002f44:	0800e3d4 	.word	0x0800e3d4
 8002f48:	0800e3e8 	.word	0x0800e3e8
 8002f4c:	0800e408 	.word	0x0800e408
 8002f50:	0800e420 	.word	0x0800e420
 8002f54:	0800e42c 	.word	0x0800e42c
 8002f58:	0800e440 	.word	0x0800e440
 8002f5c:	0800e460 	.word	0x0800e460
 8002f60:	0800e478 	.word	0x0800e478
 8002f64:	0800e578 	.word	0x0800e578
 8002f68:	0800e58c 	.word	0x0800e58c
 8002f6c:	0800e5a8 	.word	0x0800e5a8
 8002f70:	0800e5c4 	.word	0x0800e5c4
 8002f74:	0800e5d4 	.word	0x0800e5d4
 8002f78:	0800e5f0 	.word	0x0800e5f0
 8002f7c:	0800e610 	.word	0x0800e610
 8002f80:	0800e498 	.word	0x0800e498
 8002f84:	0800e630 	.word	0x0800e630
 8002f88:	0800e658 	.word	0x0800e658
 8002f8c:	0800e688 	.word	0x0800e688
 8002f90:	0800e4b8 	.word	0x0800e4b8
 8002f94:	0800e6b4 	.word	0x0800e6b4
 8002f98:	0800e6d8 	.word	0x0800e6d8
 8002f9c:	0800e704 	.word	0x0800e704
 8002fa0:	0800e4c8 	.word	0x0800e4c8
 8002fa4:	0800e730 	.word	0x0800e730
 8002fa8:	0800e750 	.word	0x0800e750
 8002fac:	0800e778 	.word	0x0800e778
            // ----------------------
        case 7:
            // 멀티플 커넥션 모드 설정
            result = ESP_AT_Send_Command_Sync_Get_int("AT+CIPMUX=1\r\n");
 8002fb0:	482c      	ldr	r0, [pc, #176]	@ (8003064 <Test_Proc+0x3c4>)
 8002fb2:	f7fe f85d 	bl	8001070 <ESP_AT_Send_Command_Sync_Get_int>
 8002fb6:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 Set Multiple Connection Mode...\n");
 8002fb8:	482b      	ldr	r0, [pc, #172]	@ (8003068 <Test_Proc+0x3c8>)
 8002fba:	f000 ff65 	bl	8003e88 <SD_Card_Log>
            if (result == AT_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d113      	bne.n	8002fec <Test_Proc+0x34c>
            {
                SD_Card_Log("ESP32 Set Multiple Connection Mode Success!\n");
 8002fc4:	4829      	ldr	r0, [pc, #164]	@ (800306c <Test_Proc+0x3cc>)
 8002fc6:	f000 ff5f 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 Set Multiple Connection Mode Success!\n";
 8002fca:	4b28      	ldr	r3, [pc, #160]	@ (800306c <Test_Proc+0x3cc>)
 8002fcc:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f7fd f908 	bl	80001e4 <strlen>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	6839      	ldr	r1, [r7, #0]
 8002fde:	4824      	ldr	r0, [pc, #144]	@ (8003070 <Test_Proc+0x3d0>)
 8002fe0:	f005 fa78 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("ESP32 Set Multiple Connection Mode Failed!\n");
                SD_Card_Log("again...\n");
                // ESP32 멀티플 커넥션 모드 설정 실패 시 에러 처리
                // Error_Proc(1);
            }
            break;
 8002fea:	e032      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 Set Multiple Connection Mode Failed!\n");
 8002fec:	4821      	ldr	r0, [pc, #132]	@ (8003074 <Test_Proc+0x3d4>)
 8002fee:	f000 ff4b 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8002ff2:	4821      	ldr	r0, [pc, #132]	@ (8003078 <Test_Proc+0x3d8>)
 8002ff4:	f000 ff48 	bl	8003e88 <SD_Card_Log>
            break;
 8002ff8:	e02b      	b.n	8003052 <Test_Proc+0x3b2>
            // ----------------------
        case 8:
            // HTTP 서버 시작
            result = ESP_AT_Send_Command_Sync_Get_int("AT+CIPSERVER=1,80\r\n");
 8002ffa:	4820      	ldr	r0, [pc, #128]	@ (800307c <Test_Proc+0x3dc>)
 8002ffc:	f7fe f838 	bl	8001070 <ESP_AT_Send_Command_Sync_Get_int>
 8003000:	6078      	str	r0, [r7, #4]
            SD_Card_Log("ESP32 Start HTTP Server...\n");
 8003002:	481f      	ldr	r0, [pc, #124]	@ (8003080 <Test_Proc+0x3e0>)
 8003004:	f000 ff40 	bl	8003e88 <SD_Card_Log>
            if (result == AT_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d113      	bne.n	8003036 <Test_Proc+0x396>
            {
                SD_Card_Log("ESP32 Start HTTP Server Success!\n");
 800300e:	481d      	ldr	r0, [pc, #116]	@ (8003084 <Test_Proc+0x3e4>)
 8003010:	f000 ff3a 	bl	8003e88 <SD_Card_Log>
                testMsg = "ESP32 Start HTTP Server Success!\n";
 8003014:	4b1b      	ldr	r3, [pc, #108]	@ (8003084 <Test_Proc+0x3e4>)
 8003016:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8003018:	6838      	ldr	r0, [r7, #0]
 800301a:	f7fd f8e3 	bl	80001e4 <strlen>
 800301e:	4603      	mov	r3, r0
 8003020:	b29a      	uxth	r2, r3
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	4811      	ldr	r0, [pc, #68]	@ (8003070 <Test_Proc+0x3d0>)
 800302a:	f005 fa53 	bl	80084d4 <HAL_UART_Transmit>
                step++; // 다음 단계로 이동
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
                SD_Card_Log("ESP32 Start HTTP Server Failed!\n");
                SD_Card_Log("again...\n");
                // ESP32 HTTP 서버 시작 실패 시 에러 처리
                // Error_Proc(1);
            }
            break;
 8003034:	e00d      	b.n	8003052 <Test_Proc+0x3b2>
                SD_Card_Log("ESP32 Start HTTP Server Failed!\n");
 8003036:	4814      	ldr	r0, [pc, #80]	@ (8003088 <Test_Proc+0x3e8>)
 8003038:	f000 ff26 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 800303c:	480e      	ldr	r0, [pc, #56]	@ (8003078 <Test_Proc+0x3d8>)
 800303e:	f000 ff23 	bl	8003e88 <SD_Card_Log>
            break;
 8003042:	e006      	b.n	8003052 <Test_Proc+0x3b2>
            // ----------------------
        case 9:
            Handle_IPD_and_Respond_4(); // 클라이언트 요청 처리
 8003044:	f7fe fe3a 	bl	8001cbc <Handle_IPD_and_Respond_4>
            break;
 8003048:	e003      	b.n	8003052 <Test_Proc+0x3b2>

        case 22:
            bootLoop = 0; // 부팅 루프 종료
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
            break;
 800304e:	e000      	b.n	8003052 <Test_Proc+0x3b2>
        
        default:
            break;
 8003050:	bf00      	nop
    while (bootLoop)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f ae3a 	bne.w	8002cce <Test_Proc+0x2e>
        }
    }
    
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	0800e4f4 	.word	0x0800e4f4
 8003068:	0800e7a0 	.word	0x0800e7a0
 800306c:	0800e7c8 	.word	0x0800e7c8
 8003070:	20000704 	.word	0x20000704
 8003074:	0800e7f8 	.word	0x0800e7f8
 8003078:	0800e420 	.word	0x0800e420
 800307c:	0800e504 	.word	0x0800e504
 8003080:	0800e824 	.word	0x0800e824
 8003084:	0800e840 	.word	0x0800e840
 8003088:	0800e864 	.word	0x0800e864

0800308c <Timer_Interrupt_Proc>:

// ─────────────────────────────────────────────────────────────────────────────


void Timer_Interrupt_Proc(void)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b098      	sub	sp, #96	@ 0x60
 8003090:	af04      	add	r7, sp, #16
    int rxTimeVal_master    = 100; // RX LED 깜빡임 시간 (ms 단위)
 8003092:	2364      	movs	r3, #100	@ 0x64
 8003094:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int rxTimeVal_slave     = 120; // RX LED 깜빡임 시간 (ms 단위)
 8003096:	2378      	movs	r3, #120	@ 0x78
 8003098:	64bb      	str	r3, [r7, #72]	@ 0x48
    ms_tick_1++;
 800309a:	4b91      	ldr	r3, [pc, #580]	@ (80032e0 <Timer_Interrupt_Proc+0x254>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b8f      	ldr	r3, [pc, #572]	@ (80032e0 <Timer_Interrupt_Proc+0x254>)
 80030a4:	801a      	strh	r2, [r3, #0]

    g_nLed_tick_1++; // LED 관련 1 ms 카운터
 80030a6:	4b8f      	ldr	r3, [pc, #572]	@ (80032e4 <Timer_Interrupt_Proc+0x258>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b8d      	ldr	r3, [pc, #564]	@ (80032e4 <Timer_Interrupt_Proc+0x258>)
 80030b0:	801a      	strh	r2, [r3, #0]
    
    g_nRX_Led_tick_1++; // RX LED 관련 1 ms 카운터
 80030b2:	4b8d      	ldr	r3, [pc, #564]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	4b8b      	ldr	r3, [pc, #556]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 80030bc:	801a      	strh	r2, [r3, #0]

    alive_counter++;
 80030be:	4b8b      	ldr	r3, [pc, #556]	@ (80032ec <Timer_Interrupt_Proc+0x260>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	4b89      	ldr	r3, [pc, #548]	@ (80032ec <Timer_Interrupt_Proc+0x260>)
 80030c8:	801a      	strh	r2, [r3, #0]
    g_nBoot_Tick++; // 부팅 타이머 증가
 80030ca:	4b89      	ldr	r3, [pc, #548]	@ (80032f0 <Timer_Interrupt_Proc+0x264>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	4a87      	ldr	r2, [pc, #540]	@ (80032f0 <Timer_Interrupt_Proc+0x264>)
 80030d2:	6013      	str	r3, [r2, #0]

    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 80030d4:	4b82      	ldr	r3, [pc, #520]	@ (80032e0 <Timer_Interrupt_Proc+0x254>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80030da:	d902      	bls.n	80030e2 <Timer_Interrupt_Proc+0x56>
    {
      ms_tick_1 = 0;
 80030dc:	4b80      	ldr	r3, [pc, #512]	@ (80032e0 <Timer_Interrupt_Proc+0x254>)
 80030de:	2200      	movs	r2, #0
 80030e0:	801a      	strh	r2, [r3, #0]
      // HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
    }

    // ====================================================================
    // 10초마다 생존 메시지 전송
    if (g_nBoot_Status == BOOT_SUCCESS && alive_counter >= 15000)    // 10 s 경과 체크
 80030e2:	4b84      	ldr	r3, [pc, #528]	@ (80032f4 <Timer_Interrupt_Proc+0x268>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d132      	bne.n	8003150 <Timer_Interrupt_Proc+0xc4>
 80030ea:	4b80      	ldr	r3, [pc, #512]	@ (80032ec <Timer_Interrupt_Proc+0x260>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d92c      	bls.n	8003150 <Timer_Interrupt_Proc+0xc4>
    {
      alive_counter = 0;
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <Timer_Interrupt_Proc+0x260>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	801a      	strh	r2, [r3, #0]

      /* 1) RTC에서 현재 시간 읽기 */
      HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 80030fc:	2200      	movs	r2, #0
 80030fe:	497e      	ldr	r1, [pc, #504]	@ (80032f8 <Timer_Interrupt_Proc+0x26c>)
 8003100:	487e      	ldr	r0, [pc, #504]	@ (80032fc <Timer_Interrupt_Proc+0x270>)
 8003102:	f002 feac 	bl	8005e5e <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8003106:	2200      	movs	r2, #0
 8003108:	497d      	ldr	r1, [pc, #500]	@ (8003300 <Timer_Interrupt_Proc+0x274>)
 800310a:	487c      	ldr	r0, [pc, #496]	@ (80032fc <Timer_Interrupt_Proc+0x270>)
 800310c:	f002 ff89 	bl	8006022 <HAL_RTC_GetDate>

      /* 2) 문자열로 포맷 */
      char buf[64];

      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003110:	4b7b      	ldr	r3, [pc, #492]	@ (8003300 <Timer_Interrupt_Proc+0x274>)
 8003112:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003114:	461d      	mov	r5, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003116:	4b7a      	ldr	r3, [pc, #488]	@ (8003300 <Timer_Interrupt_Proc+0x274>)
 8003118:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 800311a:	461a      	mov	r2, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 800311c:	4b76      	ldr	r3, [pc, #472]	@ (80032f8 <Timer_Interrupt_Proc+0x26c>)
 800311e:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003120:	4619      	mov	r1, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003122:	4b75      	ldr	r3, [pc, #468]	@ (80032f8 <Timer_Interrupt_Proc+0x26c>)
 8003124:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8003126:	461c      	mov	r4, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8003128:	4b73      	ldr	r3, [pc, #460]	@ (80032f8 <Timer_Interrupt_Proc+0x26c>)
 800312a:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 800312c:	1d38      	adds	r0, r7, #4
 800312e:	9303      	str	r3, [sp, #12]
 8003130:	9402      	str	r4, [sp, #8]
 8003132:	9101      	str	r1, [sp, #4]
 8003134:	9200      	str	r2, [sp, #0]
 8003136:	462b      	mov	r3, r5
 8003138:	4a72      	ldr	r2, [pc, #456]	@ (8003304 <Timer_Interrupt_Proc+0x278>)
 800313a:	2140      	movs	r1, #64	@ 0x40
 800313c:	f009 fcd8 	bl	800caf0 <sniprintf>
 8003140:	6478      	str	r0, [r7, #68]	@ 0x44

      /* 3) UART로 생존 및 시간 전송 */
      // UART1로 현재 시간 전송
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 8003142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003144:	b29a      	uxth	r2, r3
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	4619      	mov	r1, r3
 800314a:	486f      	ldr	r0, [pc, #444]	@ (8003308 <Timer_Interrupt_Proc+0x27c>)
 800314c:	f005 fae4 	bl	8008718 <HAL_UART_Transmit_IT>
    // ====================================================================
    // 100 ms마다 Status LED 상태 변경
    // 비트연산할 변수하나 만들고 NOT 연산으로 LED 상태 변경
    // 예시: g_nLed_tick_1 = ~g_nLed_tick_1
    // 100 ms마다 LED 상태 변경
    if (g_nMode != MODE_AP) // AP 모드가 아닐 때만 LED 상태 변경
 8003150:	4b6e      	ldr	r3, [pc, #440]	@ (800330c <Timer_Interrupt_Proc+0x280>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	f000 80b9 	beq.w	80032cc <Timer_Interrupt_Proc+0x240>
    {
        if (g_nLed_tick_1 >= 100) // 100 ms 경과
 800315a:	4b62      	ldr	r3, [pc, #392]	@ (80032e4 <Timer_Interrupt_Proc+0x258>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	2b63      	cmp	r3, #99	@ 0x63
 8003160:	d915      	bls.n	800318e <Timer_Interrupt_Proc+0x102>
        {
            g_nLed_tick_1 = 0; // 카운터 초기화
 8003162:	4b60      	ldr	r3, [pc, #384]	@ (80032e4 <Timer_Interrupt_Proc+0x258>)
 8003164:	2200      	movs	r2, #0
 8003166:	801a      	strh	r2, [r3, #0]
            g_nLed_State = !g_nLed_State; // LED 상태 토글
 8003168:	4b69      	ldr	r3, [pc, #420]	@ (8003310 <Timer_Interrupt_Proc+0x284>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	4b65      	ldr	r3, [pc, #404]	@ (8003310 <Timer_Interrupt_Proc+0x284>)
 800317a:	701a      	strb	r2, [r3, #0]

            if (g_nLed_State)
 800317c:	4b64      	ldr	r3, [pc, #400]	@ (8003310 <Timer_Interrupt_Proc+0x284>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <Timer_Interrupt_Proc+0xfe>
            {
                STATUS_LED_On();  // LED ON
 8003184:	f7ff f83c 	bl	8002200 <STATUS_LED_On>
 8003188:	e001      	b.n	800318e <Timer_Interrupt_Proc+0x102>
            }
            else
            {
                STATUS_LED_Off(); // LED OFF
 800318a:	f7ff f847 	bl	800221c <STATUS_LED_Off>
            }
        }
    

        // ====================================================================
        if (g_nBoot_Status == BOOT_SUCCESS)
 800318e:	4b59      	ldr	r3, [pc, #356]	@ (80032f4 <Timer_Interrupt_Proc+0x268>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <Timer_Interrupt_Proc+0x124>
        {
            // 마스터 모드, 모기체
            if ((DIP_1_GPIO_Port->IDR & DIP_1_Pin) == 0)
 8003196:	4b5f      	ldr	r3, [pc, #380]	@ (8003314 <Timer_Interrupt_Proc+0x288>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <Timer_Interrupt_Proc+0x11e>
            {
                // IDR 레지스터의 해당 핀이 0이면 (접지되어 있으면) MODE_MASTER
                g_nMode = MODE_MASTER;
 80031a2:	4b5a      	ldr	r3, [pc, #360]	@ (800330c <Timer_Interrupt_Proc+0x280>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e002      	b.n	80031b0 <Timer_Interrupt_Proc+0x124>
                // TX_LED_Off();  // LED OFF
            }
            else    // 슬레이브 모드, 자기체
            {
                // 핀이 1이면 (풀업되어 있으면) 다른 모드로…
                g_nMode = MODE_SLAVE;  // 예시
 80031aa:	4b58      	ldr	r3, [pc, #352]	@ (800330c <Timer_Interrupt_Proc+0x280>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]


        // 부팅 성공 이후부터 상태 LED표시 
        // 마스터 두번씩 깜빡임
        // 슬레이브 세번씩 깜빡임
        if (g_nBoot_Status == BOOT_SUCCESS)
 80031b0:	4b50      	ldr	r3, [pc, #320]	@ (80032f4 <Timer_Interrupt_Proc+0x268>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 808f 	bne.w	80032d8 <Timer_Interrupt_Proc+0x24c>
        {
            if (g_nMode == MODE_MASTER)
 80031ba:	4b54      	ldr	r3, [pc, #336]	@ (800330c <Timer_Interrupt_Proc+0x280>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d132      	bne.n	8003228 <Timer_Interrupt_Proc+0x19c>
            {
                // 마스터 모드일 때 LED 2번 깜빡임
                if (g_nRX_Led_tick_1 == rxTimeVal_master)
 80031c2:	4b49      	ldr	r3, [pc, #292]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d102      	bne.n	80031d4 <Timer_Interrupt_Proc+0x148>
                {
                    RX_LED_On();
 80031ce:	f7fe ffdd 	bl	800218c <RX_LED_On>
 80031d2:	e029      	b.n	8003228 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*2)
 80031d4:	4b44      	ldr	r3, [pc, #272]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	429a      	cmp	r2, r3
 80031e0:	d102      	bne.n	80031e8 <Timer_Interrupt_Proc+0x15c>
                {
                    RX_LED_Off();
 80031e2:	f7fe ffe1 	bl	80021a8 <RX_LED_Off>
 80031e6:	e01f      	b.n	8003228 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*3)
 80031e8:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	4299      	cmp	r1, r3
 80031f8:	d102      	bne.n	8003200 <Timer_Interrupt_Proc+0x174>
                {
                    RX_LED_On();
 80031fa:	f7fe ffc7 	bl	800218c <RX_LED_On>
 80031fe:	e013      	b.n	8003228 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 == rxTimeVal_master*4)
 8003200:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	429a      	cmp	r2, r3
 800320c:	d102      	bne.n	8003214 <Timer_Interrupt_Proc+0x188>
                {
                    RX_LED_Off();
 800320e:	f7fe ffcb 	bl	80021a8 <RX_LED_Off>
 8003212:	e009      	b.n	8003228 <Timer_Interrupt_Proc+0x19c>
                }
                else if (g_nRX_Led_tick_1 >= 1000)
 8003214:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800321c:	d304      	bcc.n	8003228 <Timer_Interrupt_Proc+0x19c>
                {
                    RX_LED_Off();
 800321e:	f7fe ffc3 	bl	80021a8 <RX_LED_Off>
                    g_nRX_Led_tick_1 = 0; // 카운터 초기화
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003224:	2200      	movs	r2, #0
 8003226:	801a      	strh	r2, [r3, #0]
                }
            }
            if (g_nMode == MODE_SLAVE)
 8003228:	4b38      	ldr	r3, [pc, #224]	@ (800330c <Timer_Interrupt_Proc+0x280>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d153      	bne.n	80032d8 <Timer_Interrupt_Proc+0x24c>
            {
                // 슬레이브 모드일 때 LED 3번 깜빡임
                if (g_nRX_Led_tick_1 == rxTimeVal_slave)
 8003230:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003238:	4293      	cmp	r3, r2
 800323a:	d102      	bne.n	8003242 <Timer_Interrupt_Proc+0x1b6>
                {
                    RX_LED_On();
 800323c:	f7fe ffa6 	bl	800218c <RX_LED_On>
        STATUS_LED_On();
    }


    
}
 8003240:	e04a      	b.n	80032d8 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*2)
 8003242:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	429a      	cmp	r2, r3
 800324e:	d102      	bne.n	8003256 <Timer_Interrupt_Proc+0x1ca>
                    RX_LED_Off();
 8003250:	f7fe ffaa 	bl	80021a8 <RX_LED_Off>
}
 8003254:	e040      	b.n	80032d8 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*3)
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	4299      	cmp	r1, r3
 8003266:	d102      	bne.n	800326e <Timer_Interrupt_Proc+0x1e2>
                    RX_LED_On();
 8003268:	f7fe ff90 	bl	800218c <RX_LED_On>
}
 800326c:	e034      	b.n	80032d8 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*4)
 800326e:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d102      	bne.n	8003282 <Timer_Interrupt_Proc+0x1f6>
                    RX_LED_Off();
 800327c:	f7fe ff94 	bl	80021a8 <RX_LED_Off>
}
 8003280:	e02a      	b.n	80032d8 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*5)
 8003282:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	4299      	cmp	r1, r3
 8003292:	d102      	bne.n	800329a <Timer_Interrupt_Proc+0x20e>
                    RX_LED_On();
 8003294:	f7fe ff7a 	bl	800218c <RX_LED_On>
}
 8003298:	e01e      	b.n	80032d8 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 == rxTimeVal_slave*6)
 800329a:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4299      	cmp	r1, r3
 80032ac:	d102      	bne.n	80032b4 <Timer_Interrupt_Proc+0x228>
                    RX_LED_Off();
 80032ae:	f7fe ff7b 	bl	80021a8 <RX_LED_Off>
}
 80032b2:	e011      	b.n	80032d8 <Timer_Interrupt_Proc+0x24c>
                else if (g_nRX_Led_tick_1 >= 1500)
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80032bc:	4293      	cmp	r3, r2
 80032be:	d90b      	bls.n	80032d8 <Timer_Interrupt_Proc+0x24c>
                    RX_LED_Off();
 80032c0:	f7fe ff72 	bl	80021a8 <RX_LED_Off>
                    g_nRX_Led_tick_1 = 0; // 카운터 초기화
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <Timer_Interrupt_Proc+0x25c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]
}
 80032ca:	e005      	b.n	80032d8 <Timer_Interrupt_Proc+0x24c>
        RX_LED_On();
 80032cc:	f7fe ff5e 	bl	800218c <RX_LED_On>
        TX_LED_On();
 80032d0:	f7fe ff88 	bl	80021e4 <TX_LED_On>
        STATUS_LED_On();
 80032d4:	f7fe ff94 	bl	8002200 <STATUS_LED_On>
}
 80032d8:	bf00      	nop
 80032da:	3750      	adds	r7, #80	@ 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	bdb0      	pop	{r4, r5, r7, pc}
 80032e0:	200007f4 	.word	0x200007f4
 80032e4:	200007f6 	.word	0x200007f6
 80032e8:	200007f8 	.word	0x200007f8
 80032ec:	200007fc 	.word	0x200007fc
 80032f0:	20000808 	.word	0x20000808
 80032f4:	20000000 	.word	0x20000000
 80032f8:	200007dc 	.word	0x200007dc
 80032fc:	20000578 	.word	0x20000578
 8003300:	200007f0 	.word	0x200007f0
 8003304:	0800e888 	.word	0x0800e888
 8003308:	20000704 	.word	0x20000704
 800330c:	20000800 	.word	0x20000800
 8003310:	200007fa 	.word	0x200007fa
 8003314:	40021000 	.word	0x40021000

08003318 <Main_System>:
// ─────────────────────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────────────────────

void Main_System(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
    switch (g_nMode)
 800331c:	4b13      	ldr	r3, [pc, #76]	@ (800336c <Main_System+0x54>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b07      	cmp	r3, #7
 8003322:	d81f      	bhi.n	8003364 <Main_System+0x4c>
 8003324:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <Main_System+0x14>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	0800334d 	.word	0x0800334d
 8003330:	08003365 	.word	0x08003365
 8003334:	08003353 	.word	0x08003353
 8003338:	08003365 	.word	0x08003365
 800333c:	08003365 	.word	0x08003365
 8003340:	08003365 	.word	0x08003365
 8003344:	08003359 	.word	0x08003359
 8003348:	0800335f 	.word	0x0800335f
    {
    case MODE_MASTER:
        Master_Proc();
 800334c:	f7ff fc26 	bl	8002b9c <Master_Proc>
        break;
 8003350:	e009      	b.n	8003366 <Main_System+0x4e>
    case MODE_SLAVE:
        break;
    case MODE_AP:
        AP_Mode_Proc();
 8003352:	f7ff fb6b 	bl	8002a2c <AP_Mode_Proc>
        break;
 8003356:	e006      	b.n	8003366 <Main_System+0x4e>
    case MODE_DEBUG:
        DEBUG_Proc();
 8003358:	f7ff fc2c 	bl	8002bb4 <DEBUG_Proc>
        break;
 800335c:	e003      	b.n	8003366 <Main_System+0x4e>
    case MODE_TEST:
        // 테스트 모드 동작
        Test_Proc();
 800335e:	f7ff fc9f 	bl	8002ca0 <Test_Proc>
        break;
 8003362:	e000      	b.n	8003366 <Main_System+0x4e>
    
    default:
        break;
 8003364:	bf00      	nop
    }
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000800 	.word	0x20000800

08003370 <Oper_CCM_Init>:
//                                                       
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// CCM 영역 초기화 함수
void Oper_CCM_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
    UTC_Time_Init();      // UTC 시간 초기화
 8003374:	f7fd fcca 	bl	8000d0c <UTC_Time_Init>
    SERVER_API_Init();    // 서버 API 초기화
 8003378:	f000 fe30 	bl	8003fdc <SERVER_API_Init>
    DEVICE_Init();        // 디바이스 초기화
 800337c:	f7fd fbe6 	bl	8000b4c <DEVICE_Init>
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <Oper_Init>:
//                                                                                                                         
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// 기본 초기화
void Oper_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
    FRAM_Init(); // FRAM 초기화
 8003388:	f7fd fbca 	bl	8000b20 <FRAM_Init>
    // 부팅 상태 초기화
    g_nBoot_Status = BOOT_IN_PROGRESS; // 부팅 상태를 부팅 중으로 설정
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <Oper_Init+0x1c>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]

    LED_Init(); // LED 초기화
 8003392:	f7fe fe79 	bl	8002088 <LED_Init>
    SIM_M_PWR_KEY_Init(); // SIM 모듈 초기화
 8003396:	f000 ff65 	bl	8004264 <SIM_M_PWR_KEY_Init>
    // SIM_USIM_RESET_Init(); // SIM 모듈 리셋 핀 초기화

    //SIM_USIM_RESET_Clear(); // SIM 모듈 리셋 핀 초기화
    // SIM_USIM_RESET_Set(); // SIM 모듈 리셋 핀 설정
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000000 	.word	0x20000000

080033a4 <Oper_Boot>:
// 4. UTC시간 서버 연결
// 5. RTC 시간 동기화
// 6. 토큰 요청 및 반환
// 7. 기기 MAC 주소 조회 (기기 고유값)
void Oper_Boot(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
    int bootLoop = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
    int step = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
    int result = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
    const char *token;
    const char *macAddress;

    while (bootLoop)
 80033b6:	e1fa      	b.n	80037ae <Oper_Boot+0x40a>
    {
        switch (step)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	f200 81f6 	bhi.w	80037ac <Oper_Boot+0x408>
 80033c0:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <Oper_Boot+0x24>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	08003421 	.word	0x08003421
 80033d0:	08003455 	.word	0x08003455
 80033d4:	08003489 	.word	0x08003489
 80033d8:	08003541 	.word	0x08003541
 80033dc:	08003599 	.word	0x08003599
 80033e0:	080035e7 	.word	0x080035e7
 80033e4:	0800363b 	.word	0x0800363b
 80033e8:	08003729 	.word	0x08003729
        {
        case 0:
            result = SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 80033ec:	f000 fb94 	bl	8003b18 <SD_Card_Boot>
 80033f0:	60f8      	str	r0, [r7, #12]
            
            SD_Card_Log("SD Card Boot...\n");
 80033f2:	48a7      	ldr	r0, [pc, #668]	@ (8003690 <Oper_Boot+0x2ec>)
 80033f4:	f000 fd48 	bl	8003e88 <SD_Card_Log>
            
            if (result == SD_OK)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <Oper_Boot+0x68>
            {
                SD_Card_Log("SD Card Booted Successfully!\n");
 80033fe:	48a5      	ldr	r0, [pc, #660]	@ (8003694 <Oper_Boot+0x2f0>)
 8003400:	f000 fd42 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3301      	adds	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // SD 카드 부팅 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 800340a:	e1d0      	b.n	80037ae <Oper_Boot+0x40a>
                SD_Card_Log("SD Card Boot Failed!\n");
 800340c:	48a2      	ldr	r0, [pc, #648]	@ (8003698 <Oper_Boot+0x2f4>)
 800340e:	f000 fd3b 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8003412:	48a2      	ldr	r0, [pc, #648]	@ (800369c <Oper_Boot+0x2f8>)
 8003414:	f000 fd38 	bl	8003e88 <SD_Card_Log>
                Error_Proc(1);
 8003418:	2001      	movs	r0, #1
 800341a:	f7ff fb8f 	bl	8002b3c <Error_Proc>
            break;
 800341e:	e1c6      	b.n	80037ae <Oper_Boot+0x40a>
            // ====================================================================
        case 1:
            result = ESP_AT_Boot(); // ESP32 AT 테스트
 8003420:	f7fd fc80 	bl	8000d24 <ESP_AT_Boot>
 8003424:	60f8      	str	r0, [r7, #12]

            SD_Card_Log("ESP32 AT Boot...\n");
 8003426:	489e      	ldr	r0, [pc, #632]	@ (80036a0 <Oper_Boot+0x2fc>)
 8003428:	f000 fd2e 	bl	8003e88 <SD_Card_Log>

            if (result == AT_OK)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <Oper_Boot+0x9c>
            {
                SD_Card_Log("ESP32 AT Booted Successfully!\n");
 8003432:	489c      	ldr	r0, [pc, #624]	@ (80036a4 <Oper_Boot+0x300>)
 8003434:	f000 fd28 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	3301      	adds	r3, #1
 800343c:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // ESP32 AT 부팅 실패 시 에러 처리
                //Error_Handler();
                Error_Proc(1);
            }
            break;
 800343e:	e1b6      	b.n	80037ae <Oper_Boot+0x40a>
                SD_Card_Log("ESP32 AT Boot Failed!\n");
 8003440:	4899      	ldr	r0, [pc, #612]	@ (80036a8 <Oper_Boot+0x304>)
 8003442:	f000 fd21 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8003446:	4895      	ldr	r0, [pc, #596]	@ (800369c <Oper_Boot+0x2f8>)
 8003448:	f000 fd1e 	bl	8003e88 <SD_Card_Log>
                Error_Proc(1);
 800344c:	2001      	movs	r0, #1
 800344e:	f7ff fb75 	bl	8002b3c <Error_Proc>
            break;
 8003452:	e1ac      	b.n	80037ae <Oper_Boot+0x40a>

        case 2:
            result = ESP_AT_Get_Firmware_Version(); // ESP32 AT 명령어로 펌웨어 버전 조회
 8003454:	f7fd ffaa 	bl	80013ac <ESP_AT_Get_Firmware_Version>
 8003458:	60f8      	str	r0, [r7, #12]
            
            SD_Card_Log("ESP32 AT Firmware Version Retrieval...\n");
 800345a:	4894      	ldr	r0, [pc, #592]	@ (80036ac <Oper_Boot+0x308>)
 800345c:	f000 fd14 	bl	8003e88 <SD_Card_Log>

            if (result == AT_OK)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <Oper_Boot+0xd0>
            {
                SD_Card_Log("ESP32 AT Firmware Version Retrieved Successfully!\n");
 8003466:	4892      	ldr	r0, [pc, #584]	@ (80036b0 <Oper_Boot+0x30c>)
 8003468:	f000 fd0e 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	3301      	adds	r3, #1
 8003470:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // ESP32 AT 펌웨어 버전 조회 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 8003472:	e19c      	b.n	80037ae <Oper_Boot+0x40a>
                SD_Card_Log("ESP32 AT Firmware Version Retrieval Failed!\n");
 8003474:	488f      	ldr	r0, [pc, #572]	@ (80036b4 <Oper_Boot+0x310>)
 8003476:	f000 fd07 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 800347a:	4888      	ldr	r0, [pc, #544]	@ (800369c <Oper_Boot+0x2f8>)
 800347c:	f000 fd04 	bl	8003e88 <SD_Card_Log>
                Error_Proc(1);
 8003480:	2001      	movs	r0, #1
 8003482:	f7ff fb5b 	bl	8002b3c <Error_Proc>
            break;
 8003486:	e192      	b.n	80037ae <Oper_Boot+0x40a>
            // ====================================================================
        case 3:
            // 현재 모드가 AP 모드인지 확인
            if (g_nMode == MODE_AP) // AP 모드인 경우
 8003488:	4b8b      	ldr	r3, [pc, #556]	@ (80036b8 <Oper_Boot+0x314>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d107      	bne.n	80034a0 <Oper_Boot+0xfc>
            {
                SD_Card_Log("AP Mode Detected. Skipping BOOT Configuration...\n");
 8003490:	488a      	ldr	r0, [pc, #552]	@ (80036bc <Oper_Boot+0x318>)
 8003492:	f000 fcf9 	bl	8003e88 <SD_Card_Log>
                step = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
                bootLoop = 0; // 부팅 루프 종료
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
                break; // WiFi 설정 단계 건너뛰기
 800349e:	e186      	b.n	80037ae <Oper_Boot+0x40a>
            }
            
            // Save_Wifi_Status_FRAM_Dummy(); // wifi 상태 초기화
            Load_Wifi_Status_FRAM(); // FRAM에서 WiFi 상태 로드
 80034a0:	f7fd f9c0 	bl	8000824 <Load_Wifi_Status_FRAM>

            g_nWifi_Status = DEVICE_WIFI_DISCONNECTED; // WiFi 연결 상태 초기화
 80034a4:	4b86      	ldr	r3, [pc, #536]	@ (80036c0 <Oper_Boot+0x31c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("WiFi Configuration...\n");
 80034aa:	4886      	ldr	r0, [pc, #536]	@ (80036c4 <Oper_Boot+0x320>)
 80034ac:	f000 fcec 	bl	8003e88 <SD_Card_Log>

            if (g_nWifi_Status == DEVICE_WIFI_DISCONNECTED) // WiFi가 연결되지 않은 경우
 80034b0:	4b83      	ldr	r3, [pc, #524]	@ (80036c0 <Oper_Boot+0x31c>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11c      	bne.n	80034f2 <Oper_Boot+0x14e>
            {
                // ESP32 AT 명령어를 통해 현재 WiFi 모드 조회
                ESP_AT_Send_Command_Sync("AT+CWMODE?\r\n");
 80034b8:	4883      	ldr	r0, [pc, #524]	@ (80036c8 <Oper_Boot+0x324>)
 80034ba:	f7fd fcef 	bl	8000e9c <ESP_AT_Send_Command_Sync>

                // ESP32 AT 명령어를 통해 WiFi 모드 설정 스테이션 모드 + AP모드
                ESP_AT_Send_Command_Sync("AT+CWMODE=3\r\n");
 80034be:	4883      	ldr	r0, [pc, #524]	@ (80036cc <Oper_Boot+0x328>)
 80034c0:	f7fd fcec 	bl	8000e9c <ESP_AT_Send_Command_Sync>
                // 0 = OPEN
                // 1 = WEP
                // 2 = WPA_PSK
                // 3 = WPA2_PSK
                // 4 = WPA_WPA2_PSK
                ESP_AT_Send_Command_Sync("AT+CWSAP=\"AMKIT\",\"\",5,0\r\n");
 80034c4:	4882      	ldr	r0, [pc, #520]	@ (80036d0 <Oper_Boot+0x32c>)
 80034c6:	f7fd fce9 	bl	8000e9c <ESP_AT_Send_Command_Sync>

                // 연결 가능한 WiFi AP 목록 조회
                ESP_AT_Send_Command_Sync("AT+CWLAP\r\n");
 80034ca:	4882      	ldr	r0, [pc, #520]	@ (80036d4 <Oper_Boot+0x330>)
 80034cc:	f7fd fce6 	bl	8000e9c <ESP_AT_Send_Command_Sync>

                result = ESP_AT_Send_WiFi_Config(); // WiFi 설정 전송
 80034d0:	f7fd fc6a 	bl	8000da8 <ESP_AT_Send_WiFi_Config>
 80034d4:	60f8      	str	r0, [r7, #12]

                if (result == AT_OK) // WiFi 설정 전송 성공
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <Oper_Boot+0x140>
                {
                    g_nWifi_Status = DEVICE_WIFI_CONNECTED; // WiFi 연결 상태 업데이트
 80034dc:	4b78      	ldr	r3, [pc, #480]	@ (80036c0 <Oper_Boot+0x31c>)
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e002      	b.n	80034ea <Oper_Boot+0x146>
                }
                else
                {
                    g_nWifi_Status = DEVICE_WIFI_DISCONNECTED; // WiFi 연결 상태 업데이트 실패
 80034e4:	4b76      	ldr	r3, [pc, #472]	@ (80036c0 <Oper_Boot+0x31c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
                }
            
                Save_Wifi_Status_FRAM(); // FRAM에 WiFi 상태 저장
 80034ea:	f7fd f9b7 	bl	800085c <Save_Wifi_Status_FRAM>

                result = AT_OK; // WiFi 설정 성공
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
            }
            if (g_nWifi_Status == DEVICE_WIFI_CONNECTED) // WiFi가 연결된 경우
 80034f2:	4b73      	ldr	r3, [pc, #460]	@ (80036c0 <Oper_Boot+0x31c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <Oper_Boot+0x162>
            {
                // ESP32 AT 명령어를 통해 현재 WiFi IP 주소 조회
                ESP_AT_Send_Command_Sync("AT+CIFSR\r\n");
 80034fa:	4877      	ldr	r0, [pc, #476]	@ (80036d8 <Oper_Boot+0x334>)
 80034fc:	f7fd fcce 	bl	8000e9c <ESP_AT_Send_Command_Sync>
                result = AT_OK; // WiFi 연결 성공
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e001      	b.n	800350a <Oper_Boot+0x166>
            } 
            else // WiFi 연결 실패 시
            {
                result = AT_ERROR; // WiFi 연결 실패
 8003506:	2301      	movs	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
            }

            if (result == AT_OK)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <Oper_Boot+0x188>
            {
                SD_Card_Log("WiFi Configuration Sent Successfully!\n");
 8003510:	4872      	ldr	r0, [pc, #456]	@ (80036dc <Oper_Boot+0x338>)
 8003512:	f000 fcb9 	bl	8003e88 <SD_Card_Log>

                HAL_UART_Transmit(&huart1, (uint8_t*)"WiFi Configuration Sent Successfully!\n", 40, HAL_MAX_DELAY);
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	2228      	movs	r2, #40	@ 0x28
 800351c:	496f      	ldr	r1, [pc, #444]	@ (80036dc <Oper_Boot+0x338>)
 800351e:	4870      	ldr	r0, [pc, #448]	@ (80036e0 <Oper_Boot+0x33c>)
 8003520:	f004 ffd8 	bl	80084d4 <HAL_UART_Transmit>
                
                step++; // 다음 단계로 이동
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	3301      	adds	r3, #1
 8003528:	613b      	str	r3, [r7, #16]
                SD_Card_Log("again...\n");
                // WiFi 설정 실패 시 에러 처리
                // Error_Handler();
                Error_Proc(1);
            }
            break;
 800352a:	e140      	b.n	80037ae <Oper_Boot+0x40a>
                SD_Card_Log("WiFi Configuration Failed!\n");
 800352c:	486d      	ldr	r0, [pc, #436]	@ (80036e4 <Oper_Boot+0x340>)
 800352e:	f000 fcab 	bl	8003e88 <SD_Card_Log>
                SD_Card_Log("again...\n");
 8003532:	485a      	ldr	r0, [pc, #360]	@ (800369c <Oper_Boot+0x2f8>)
 8003534:	f000 fca8 	bl	8003e88 <SD_Card_Log>
                Error_Proc(1);
 8003538:	2001      	movs	r0, #1
 800353a:	f7ff faff 	bl	8002b3c <Error_Proc>
            break;
 800353e:	e136      	b.n	80037ae <Oper_Boot+0x40a>
            // ====================================================================
        case 4:
            // Save_TimeStatus_FRAM_Dummy();  // 시간 상태 초기화
            // SNTP 서버 연결 및 시간 구조 저장
            Load_TimeStatus_FRAM(); // FRAM에서 시간 동기화 상태 로드
 8003540:	f7fd f940 	bl	80007c4 <Load_TimeStatus_FRAM>

            g_nTime_Status = DEVICE_TIME_NOT_SYNCED; // 시간 동기화 상태 초기화
 8003544:	4b68      	ldr	r3, [pc, #416]	@ (80036e8 <Oper_Boot+0x344>)
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("SNTP Server Connection...\n");
 800354a:	4868      	ldr	r0, [pc, #416]	@ (80036ec <Oper_Boot+0x348>)
 800354c:	f000 fc9c 	bl	8003e88 <SD_Card_Log>

            if (g_nTime_Status == DEVICE_TIME_NOT_SYNCED) // 시간 동기화가 안 된 경우
 8003550:	4b65      	ldr	r3, [pc, #404]	@ (80036e8 <Oper_Boot+0x344>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d118      	bne.n	800358a <Oper_Boot+0x1e6>
            {
                // 서버 연결 후 시간 구조 저장 
                result = ESP_AT_Set_SNTP_Time(AT_SNTP_UTC_OFFSET);
 8003558:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800355c:	f7fe f878 	bl	8001650 <ESP_AT_Set_SNTP_Time>
 8003560:	60f8      	str	r0, [r7, #12]

                if (result == AT_OK) // SNTP 서버 연결 성공
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <Oper_Boot+0x1d2>
                {
                    SD_Card_Log("SNTP Server Connected Successfully!\n");
 8003568:	4861      	ldr	r0, [pc, #388]	@ (80036f0 <Oper_Boot+0x34c>)
 800356a:	f000 fc8d 	bl	8003e88 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3301      	adds	r3, #1
 8003572:	613b      	str	r3, [r7, #16]
            else // 시간 동기화가 이미 된 경우
            {
                SD_Card_Log("Time Already Synced!\n");
                step++; // 다음 단계로 이동
            }
            break;
 8003574:	e11b      	b.n	80037ae <Oper_Boot+0x40a>
                    SD_Card_Log("SNTP Server Connection Failed!\n");
 8003576:	485f      	ldr	r0, [pc, #380]	@ (80036f4 <Oper_Boot+0x350>)
 8003578:	f000 fc86 	bl	8003e88 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 800357c:	4847      	ldr	r0, [pc, #284]	@ (800369c <Oper_Boot+0x2f8>)
 800357e:	f000 fc83 	bl	8003e88 <SD_Card_Log>
                    Error_Proc(1);
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff fada 	bl	8002b3c <Error_Proc>
            break;
 8003588:	e111      	b.n	80037ae <Oper_Boot+0x40a>
                SD_Card_Log("Time Already Synced!\n");
 800358a:	485b      	ldr	r0, [pc, #364]	@ (80036f8 <Oper_Boot+0x354>)
 800358c:	f000 fc7c 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	3301      	adds	r3, #1
 8003594:	613b      	str	r3, [r7, #16]
            break;
 8003596:	e10a      	b.n	80037ae <Oper_Boot+0x40a>
            // ====================================================================
        case 5:
            // 저장된 시간 구조 RTC 동기화
            if (g_nTime_Status == DEVICE_TIME_NOT_SYNCED) // 시간 동기화가 안 된 경우
 8003598:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <Oper_Boot+0x344>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11b      	bne.n	80035d8 <Oper_Boot+0x234>
            {
                result = RTC_Set_UTC(); // RTC 초기화 및 UTC 시간 설정
 80035a0:	f000 f9aa 	bl	80038f8 <RTC_Set_UTC>
 80035a4:	60f8      	str	r0, [r7, #12]
                
                g_nTime_Status = DEVICE_TIME_SYNCED; // 시간 동기화 상태 업데이트
 80035a6:	4b50      	ldr	r3, [pc, #320]	@ (80036e8 <Oper_Boot+0x344>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]

                Save_TimeStatus_FRAM(); // FRAM에 시간 동기화 상태 저장
 80035ac:	f7fd f926 	bl	80007fc <Save_TimeStatus_FRAM>
                
                if (result == RTC_OK) // RTC 설정 성공
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <Oper_Boot+0x220>
                {
                    SD_Card_Log("RTC Set to UTC Successfully!\n");
 80035b6:	4851      	ldr	r0, [pc, #324]	@ (80036fc <Oper_Boot+0x358>)
 80035b8:	f000 fc66 	bl	8003e88 <SD_Card_Log>
                    step++; // 다음 단계로 이동
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	3301      	adds	r3, #1
 80035c0:	613b      	str	r3, [r7, #16]
            else
            {
                SD_Card_Log("RTC Already Synced!\n");
                step++; // 다음 단계로 이동
            }
            break;
 80035c2:	e0f4      	b.n	80037ae <Oper_Boot+0x40a>
                    SD_Card_Log("RTC Set to UTC Failed!\n");
 80035c4:	484e      	ldr	r0, [pc, #312]	@ (8003700 <Oper_Boot+0x35c>)
 80035c6:	f000 fc5f 	bl	8003e88 <SD_Card_Log>
                    SD_Card_Log("again...\n");
 80035ca:	4834      	ldr	r0, [pc, #208]	@ (800369c <Oper_Boot+0x2f8>)
 80035cc:	f000 fc5c 	bl	8003e88 <SD_Card_Log>
                    Error_Proc(1);
 80035d0:	2001      	movs	r0, #1
 80035d2:	f7ff fab3 	bl	8002b3c <Error_Proc>
            break;
 80035d6:	e0ea      	b.n	80037ae <Oper_Boot+0x40a>
                SD_Card_Log("RTC Already Synced!\n");
 80035d8:	484a      	ldr	r0, [pc, #296]	@ (8003704 <Oper_Boot+0x360>)
 80035da:	f000 fc55 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3301      	adds	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
            break;
 80035e4:	e0e3      	b.n	80037ae <Oper_Boot+0x40a>

        case 6:
            // 토큰 상태 로드
            Load_Token_Status_FRAM(); // FRAM에서 토큰 상태 로드
 80035e6:	f7fd f94d 	bl	8000884 <Load_Token_Status_FRAM>

            g_nToken_Status = DEVICE_TOKEN_NOT_SET;
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <Oper_Boot+0x364>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("Token Configuration...\n");
 80035f0:	4846      	ldr	r0, [pc, #280]	@ (800370c <Oper_Boot+0x368>)
 80035f2:	f000 fc49 	bl	8003e88 <SD_Card_Log>

            if (g_nToken_Status == DEVICE_TOKEN_NOT_SET) // 토큰이 설정되지 않은 경우
 80035f6:	4b44      	ldr	r3, [pc, #272]	@ (8003708 <Oper_Boot+0x364>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d114      	bne.n	8003628 <Oper_Boot+0x284>
            {
                token = ESP_AT_Get_Token(); // ESP32 AT 명령어를 통해 토큰 조회
 80035fe:	f7fd ff19 	bl	8001434 <ESP_AT_Get_Token>
 8003602:	6078      	str	r0, [r7, #4]

                SERVER_API_Set_Token(token); // 서버 API 토큰 저장 함수 호출
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fcf5 	bl	8003ff4 <SERVER_API_Set_Token>

                // 메모리에 토큰 저장
                Save_Token_FRAM(token); // FRAM에 토큰 저장
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd f96a 	bl	80008e4 <Save_Token_FRAM>

                g_nToken_Status = DEVICE_TOKEN_SET; // 토큰 상태 업데이트
 8003610:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <Oper_Boot+0x364>)
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
                Save_Token_Status_FRAM(); // FRAM에 토큰 상태 저장
 8003616:	f7fd f951 	bl	80008bc <Save_Token_Status_FRAM>

                SD_Card_Log("Token Set Successfully!\n");
 800361a:	483d      	ldr	r0, [pc, #244]	@ (8003710 <Oper_Boot+0x36c>)
 800361c:	f000 fc34 	bl	8003e88 <SD_Card_Log>

                step++; // 다음 단계로 이동
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3301      	adds	r3, #1
 8003624:	613b      	str	r3, [r7, #16]
                SD_Card_Log("Token Already Set!\n");

                // 다음 스텝
                step++; // 다음 단계로 이동
            }
            break;
 8003626:	e0c2      	b.n	80037ae <Oper_Boot+0x40a>
                Load_Token_FRAM(); // FRAM에서 토큰 로드
 8003628:	f7fd f99c 	bl	8000964 <Load_Token_FRAM>
                SD_Card_Log("Token Already Set!\n");
 800362c:	4839      	ldr	r0, [pc, #228]	@ (8003714 <Oper_Boot+0x370>)
 800362e:	f000 fc2b 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	3301      	adds	r3, #1
 8003636:	613b      	str	r3, [r7, #16]
            break;
 8003638:	e0b9      	b.n	80037ae <Oper_Boot+0x40a>
        case 7:
            // MAC 주소 상태 로드
            Load_MAC_Status_FRAM(); // FRAM에서 MAC 주소 상태 로드
 800363a:	f7fd f9d1 	bl	80009e0 <Load_MAC_Status_FRAM>

            g_nMac_Status = DEVICE_MAC_NOT_SET;
 800363e:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <Oper_Boot+0x374>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]

            SD_Card_Log("MAC Address Configuration...\n");
 8003644:	4835      	ldr	r0, [pc, #212]	@ (800371c <Oper_Boot+0x378>)
 8003646:	f000 fc1f 	bl	8003e88 <SD_Card_Log>

            if (g_nMac_Status == DEVICE_MAC_NOT_SET) // MAC 주소가 설정되지 않은 경우
 800364a:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <Oper_Boot+0x374>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d114      	bne.n	800367c <Oper_Boot+0x2d8>
            {
                macAddress = ESP_AT_Get_MAC_Address(); // ESP32 AT 명령어를 통해 MAC 주소 조회
 8003652:	f7fd ff77 	bl	8001544 <ESP_AT_Get_MAC_Address>
 8003656:	60b8      	str	r0, [r7, #8]

                // MAC 주소 저장
                SERVER_API_Set_MAC_Address(macAddress);  // 서버 API MAC 주소 저장 함수 호출
 8003658:	68b8      	ldr	r0, [r7, #8]
 800365a:	f000 fce7 	bl	800402c <SERVER_API_Set_MAC_Address>

                // 메모리에 MAC 주소 저장
                Save_MAC_FRAM(macAddress); // FRAM에 MAC 주소 저장
 800365e:	68b8      	ldr	r0, [r7, #8]
 8003660:	f7fd f9ee 	bl	8000a40 <Save_MAC_FRAM>
                
                g_nMac_Status = DEVICE_MAC_SET; // MAC 주소 상태 업데이트
 8003664:	4b2c      	ldr	r3, [pc, #176]	@ (8003718 <Oper_Boot+0x374>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
                Save_MAC_Status_FRAM(); // FRAM에 MAC 주소 상태 저장
 800366a:	f7fd f9d5 	bl	8000a18 <Save_MAC_Status_FRAM>

                SD_Card_Log("MAC Address Set Successfully!\n");
 800366e:	482c      	ldr	r0, [pc, #176]	@ (8003720 <Oper_Boot+0x37c>)
 8003670:	f000 fc0a 	bl	8003e88 <SD_Card_Log>

                step++; // 다음 단계로 이동
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	3301      	adds	r3, #1
 8003678:	613b      	str	r3, [r7, #16]

                SD_Card_Log("MAC Address Already Set!\n");

                step++; // 다음 단계로 이동
            }
            break;
 800367a:	e098      	b.n	80037ae <Oper_Boot+0x40a>
                Load_MAC_FRAM(); // FRAM에서 MAC 주소 로드
 800367c:	f7fd fa0c 	bl	8000a98 <Load_MAC_FRAM>
                SD_Card_Log("MAC Address Already Set!\n");
 8003680:	4828      	ldr	r0, [pc, #160]	@ (8003724 <Oper_Boot+0x380>)
 8003682:	f000 fc01 	bl	8003e88 <SD_Card_Log>
                step++; // 다음 단계로 이동
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3301      	adds	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
            break;
 800368c:	e08f      	b.n	80037ae <Oper_Boot+0x40a>
 800368e:	bf00      	nop
 8003690:	0800e8ac 	.word	0x0800e8ac
 8003694:	0800e8c0 	.word	0x0800e8c0
 8003698:	0800e8e0 	.word	0x0800e8e0
 800369c:	0800e8f8 	.word	0x0800e8f8
 80036a0:	0800e904 	.word	0x0800e904
 80036a4:	0800e918 	.word	0x0800e918
 80036a8:	0800e938 	.word	0x0800e938
 80036ac:	0800e950 	.word	0x0800e950
 80036b0:	0800e978 	.word	0x0800e978
 80036b4:	0800e9ac 	.word	0x0800e9ac
 80036b8:	20000800 	.word	0x20000800
 80036bc:	0800e9dc 	.word	0x0800e9dc
 80036c0:	20000801 	.word	0x20000801
 80036c4:	0800ea10 	.word	0x0800ea10
 80036c8:	0800ea28 	.word	0x0800ea28
 80036cc:	0800ea38 	.word	0x0800ea38
 80036d0:	0800ea48 	.word	0x0800ea48
 80036d4:	0800ea64 	.word	0x0800ea64
 80036d8:	0800ea70 	.word	0x0800ea70
 80036dc:	0800ea7c 	.word	0x0800ea7c
 80036e0:	20000704 	.word	0x20000704
 80036e4:	0800eaa4 	.word	0x0800eaa4
 80036e8:	20000802 	.word	0x20000802
 80036ec:	0800eac0 	.word	0x0800eac0
 80036f0:	0800eadc 	.word	0x0800eadc
 80036f4:	0800eb04 	.word	0x0800eb04
 80036f8:	0800eb24 	.word	0x0800eb24
 80036fc:	0800eb3c 	.word	0x0800eb3c
 8003700:	0800eb5c 	.word	0x0800eb5c
 8003704:	0800eb74 	.word	0x0800eb74
 8003708:	20000803 	.word	0x20000803
 800370c:	0800eb8c 	.word	0x0800eb8c
 8003710:	0800eba4 	.word	0x0800eba4
 8003714:	0800ebc0 	.word	0x0800ebc0
 8003718:	20000804 	.word	0x20000804
 800371c:	0800ebd4 	.word	0x0800ebd4
 8003720:	0800ebf4 	.word	0x0800ebf4
 8003724:	0800ec14 	.word	0x0800ec14
        case 8:
            // 모든 초기화가 완료된 후 최종 상태 로그
            SD_Card_Log("Device Booted Successfully!\n");
 8003728:	4825      	ldr	r0, [pc, #148]	@ (80037c0 <Oper_Boot+0x41c>)
 800372a:	f000 fbad 	bl	8003e88 <SD_Card_Log>
            
            // 부팅 최종 시간 SD카드 기록
            SD_Card_Log("Current Boot Time: ");
 800372e:	4825      	ldr	r0, [pc, #148]	@ (80037c4 <Oper_Boot+0x420>)
 8003730:	f000 fbaa 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Year_String());
 8003734:	f000 f954 	bl	80039e0 <RTC_Get_Synced_Year_String>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fba4 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log("-");
 8003740:	4821      	ldr	r0, [pc, #132]	@ (80037c8 <Oper_Boot+0x424>)
 8003742:	f000 fba1 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Month_String());
 8003746:	f000 f965 	bl	8003a14 <RTC_Get_Synced_Month_String>
 800374a:	4603      	mov	r3, r0
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fb9b 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log("-");
 8003752:	481d      	ldr	r0, [pc, #116]	@ (80037c8 <Oper_Boot+0x424>)
 8003754:	f000 fb98 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Date_String());
 8003758:	f000 f976 	bl	8003a48 <RTC_Get_Synced_Date_String>
 800375c:	4603      	mov	r3, r0
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fb92 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(" ");
 8003764:	4819      	ldr	r0, [pc, #100]	@ (80037cc <Oper_Boot+0x428>)
 8003766:	f000 fb8f 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Hour_String());
 800376a:	f000 f987 	bl	8003a7c <RTC_Get_Synced_Hour_String>
 800376e:	4603      	mov	r3, r0
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fb89 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(":");
 8003776:	4816      	ldr	r0, [pc, #88]	@ (80037d0 <Oper_Boot+0x42c>)
 8003778:	f000 fb86 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Minute_String());
 800377c:	f000 f998 	bl	8003ab0 <RTC_Get_Synced_Minute_String>
 8003780:	4603      	mov	r3, r0
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fb80 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(":");
 8003788:	4811      	ldr	r0, [pc, #68]	@ (80037d0 <Oper_Boot+0x42c>)
 800378a:	f000 fb7d 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log(RTC_Get_Synced_Second_String());
 800378e:	f000 f9a9 	bl	8003ae4 <RTC_Get_Synced_Second_String>
 8003792:	4603      	mov	r3, r0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fb77 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log("\n");
 800379a:	480e      	ldr	r0, [pc, #56]	@ (80037d4 <Oper_Boot+0x430>)
 800379c:	f000 fb74 	bl	8003e88 <SD_Card_Log>
            SD_Card_Log("==================<< DONE >>==================\n");
 80037a0:	480d      	ldr	r0, [pc, #52]	@ (80037d8 <Oper_Boot+0x434>)
 80037a2:	f000 fb71 	bl	8003e88 <SD_Card_Log>

            bootLoop = 0; // 부팅 루프 종료
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
            break;
 80037aa:	e000      	b.n	80037ae <Oper_Boot+0x40a>
        
        default:
            break;
 80037ac:	bf00      	nop
    while (bootLoop)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f47f ae01 	bne.w	80033b8 <Oper_Boot+0x14>
        g_nTime_Status = DEVICE_TIME_SYNCED; // 시간 동기화 상태 업데이트

        Save_TimeStatus_FRAM(); // FRAM에 시간 동기화 상태 저장
    }
#endif
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	0800ec30 	.word	0x0800ec30
 80037c4:	0800ec50 	.word	0x0800ec50
 80037c8:	0800ec64 	.word	0x0800ec64
 80037cc:	0800ec68 	.word	0x0800ec68
 80037d0:	0800ec6c 	.word	0x0800ec6c
 80037d4:	0800ec70 	.word	0x0800ec70
 80037d8:	0800ec74 	.word	0x0800ec74

080037dc <Month_String_To_Number>:
// PAT_UTC_Time pAtUtcTime; UTC 시간 구조체 포인터를 사용하여 시간 동기화 함수


// 월 문자열을 숫자로 변환
int Month_String_To_Number(const char* monthStr)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    
    if (strcmp(monthStr, "Jan") == 0) return RTC_MONTH_JANUARY;
 80037e4:	4938      	ldr	r1, [pc, #224]	@ (80038c8 <Month_String_To_Number+0xec>)
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fc fcf2 	bl	80001d0 <strcmp>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <Month_String_To_Number+0x1a>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e064      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Feb") == 0) return RTC_MONTH_FEBRUARY;
 80037f6:	4935      	ldr	r1, [pc, #212]	@ (80038cc <Month_String_To_Number+0xf0>)
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7fc fce9 	bl	80001d0 <strcmp>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <Month_String_To_Number+0x2c>
 8003804:	2302      	movs	r3, #2
 8003806:	e05b      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Mar") == 0) return RTC_MONTH_MARCH;
 8003808:	4931      	ldr	r1, [pc, #196]	@ (80038d0 <Month_String_To_Number+0xf4>)
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc fce0 	bl	80001d0 <strcmp>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <Month_String_To_Number+0x3e>
 8003816:	2303      	movs	r3, #3
 8003818:	e052      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Apr") == 0) return RTC_MONTH_APRIL;
 800381a:	492e      	ldr	r1, [pc, #184]	@ (80038d4 <Month_String_To_Number+0xf8>)
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fc fcd7 	bl	80001d0 <strcmp>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <Month_String_To_Number+0x50>
 8003828:	2304      	movs	r3, #4
 800382a:	e049      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "May") == 0) return RTC_MONTH_MAY;
 800382c:	492a      	ldr	r1, [pc, #168]	@ (80038d8 <Month_String_To_Number+0xfc>)
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fc fcce 	bl	80001d0 <strcmp>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <Month_String_To_Number+0x62>
 800383a:	2305      	movs	r3, #5
 800383c:	e040      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Jun") == 0) return RTC_MONTH_JUNE;
 800383e:	4927      	ldr	r1, [pc, #156]	@ (80038dc <Month_String_To_Number+0x100>)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7fc fcc5 	bl	80001d0 <strcmp>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <Month_String_To_Number+0x74>
 800384c:	2306      	movs	r3, #6
 800384e:	e037      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Jul") == 0) return RTC_MONTH_JULY;
 8003850:	4923      	ldr	r1, [pc, #140]	@ (80038e0 <Month_String_To_Number+0x104>)
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fc fcbc 	bl	80001d0 <strcmp>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <Month_String_To_Number+0x86>
 800385e:	2307      	movs	r3, #7
 8003860:	e02e      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Aug") == 0) return RTC_MONTH_AUGUST;
 8003862:	4920      	ldr	r1, [pc, #128]	@ (80038e4 <Month_String_To_Number+0x108>)
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7fc fcb3 	bl	80001d0 <strcmp>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <Month_String_To_Number+0x98>
 8003870:	2308      	movs	r3, #8
 8003872:	e025      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Sep") == 0) return RTC_MONTH_SEPTEMBER;
 8003874:	491c      	ldr	r1, [pc, #112]	@ (80038e8 <Month_String_To_Number+0x10c>)
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fc fcaa 	bl	80001d0 <strcmp>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <Month_String_To_Number+0xaa>
 8003882:	2309      	movs	r3, #9
 8003884:	e01c      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Oct") == 0) return RTC_MONTH_OCTOBER;
 8003886:	4919      	ldr	r1, [pc, #100]	@ (80038ec <Month_String_To_Number+0x110>)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fc fca1 	bl	80001d0 <strcmp>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <Month_String_To_Number+0xbc>
 8003894:	2310      	movs	r3, #16
 8003896:	e013      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Nov") == 0) return RTC_MONTH_NOVEMBER;
 8003898:	4915      	ldr	r1, [pc, #84]	@ (80038f0 <Month_String_To_Number+0x114>)
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fc fc98 	bl	80001d0 <strcmp>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <Month_String_To_Number+0xce>
 80038a6:	2311      	movs	r3, #17
 80038a8:	e00a      	b.n	80038c0 <Month_String_To_Number+0xe4>
    if (strcmp(monthStr, "Dec") == 0) return RTC_MONTH_DECEMBER;
 80038aa:	4912      	ldr	r1, [pc, #72]	@ (80038f4 <Month_String_To_Number+0x118>)
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fc fc8f 	bl	80001d0 <strcmp>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <Month_String_To_Number+0xe0>
 80038b8:	2312      	movs	r3, #18
 80038ba:	e001      	b.n	80038c0 <Month_String_To_Number+0xe4>

    return -1; // 잘못된 월 문자열
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	0800eca4 	.word	0x0800eca4
 80038cc:	0800eca8 	.word	0x0800eca8
 80038d0:	0800ecac 	.word	0x0800ecac
 80038d4:	0800ecb0 	.word	0x0800ecb0
 80038d8:	0800ecb4 	.word	0x0800ecb4
 80038dc:	0800ecb8 	.word	0x0800ecb8
 80038e0:	0800ecbc 	.word	0x0800ecbc
 80038e4:	0800ecc0 	.word	0x0800ecc0
 80038e8:	0800ecc4 	.word	0x0800ecc4
 80038ec:	0800ecc8 	.word	0x0800ecc8
 80038f0:	0800eccc 	.word	0x0800eccc
 80038f4:	0800ecd0 	.word	0x0800ecd0

080038f8 <RTC_Set_UTC>:
    return -1; // 잘못된 요일 문자열
}

// 저장된 UTC 시간으로 RTC 시간을 설정하는 함수
int RTC_Set_UTC(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
    int result = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
    PAT_UTC_Time pAtUtcTime = AT_Get_UTC_Time(); // UTC 시간 구조체 포인터
 8003902:	f7fd f9f9 	bl	8000cf8 <AT_Get_UTC_Time>
 8003906:	6038      	str	r0, [r7, #0]
    // ──────────────────────────────────────────────────────────────────────────────

    g_Time.Hours = (uint8_t)pAtUtcTime->sHour;       // 시
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4b30      	ldr	r3, [pc, #192]	@ (80039d0 <RTC_Set_UTC+0xd8>)
 8003910:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = (uint8_t)pAtUtcTime->sMinute;   // 분
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b2d      	ldr	r3, [pc, #180]	@ (80039d0 <RTC_Set_UTC+0xd8>)
 800391a:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = (uint8_t)pAtUtcTime->sSecond;   // 초
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <RTC_Set_UTC+0xd8>)
 8003924:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE; // 일광 절약 시간 없음
 8003926:	4b2a      	ldr	r3, [pc, #168]	@ (80039d0 <RTC_Set_UTC+0xd8>)
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET; // 저장 작업 없음
 800392c:	4b28      	ldr	r3, [pc, #160]	@ (80039d0 <RTC_Set_UTC+0xd8>)
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]

    g_Date.WeekDay = (uint8_t)pAtUtcTime->sDayOfWeek; // 요일
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	4b26      	ldr	r3, [pc, #152]	@ (80039d4 <RTC_Set_UTC+0xdc>)
 800393a:	701a      	strb	r2, [r3, #0]
    g_Date.Month = (uint8_t)pAtUtcTime->sMonth;       // 월
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <RTC_Set_UTC+0xdc>)
 8003944:	705a      	strb	r2, [r3, #1]
    g_Date.Date = (uint8_t)pAtUtcTime->sDay;          // 일
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b21      	ldr	r3, [pc, #132]	@ (80039d4 <RTC_Set_UTC+0xdc>)
 800394e:	709a      	strb	r2, [r3, #2]
    g_Date.Year = (uint8_t)(pAtUtcTime->sYear % 100);   // 연
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <RTC_Set_UTC+0xe0>)
 8003956:	fb82 1203 	smull	r1, r2, r2, r3
 800395a:	1151      	asrs	r1, r2, #5
 800395c:	17da      	asrs	r2, r3, #31
 800395e:	1a8a      	subs	r2, r1, r2
 8003960:	2164      	movs	r1, #100	@ 0x64
 8003962:	fb01 f202 	mul.w	r2, r1, r2
 8003966:	1a9a      	subs	r2, r3, r2
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <RTC_Set_UTC+0xdc>)
 800396c:	70da      	strb	r2, [r3, #3]

    // 
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);   // RTC 쓰기 보호 해제
 800396e:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <RTC_Set_UTC+0xe4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	22ca      	movs	r2, #202	@ 0xca
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24
 8003976:	4b19      	ldr	r3, [pc, #100]	@ (80039dc <RTC_Set_UTC+0xe4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2253      	movs	r2, #83	@ 0x53
 800397c:	625a      	str	r2, [r3, #36]	@ 0x24

    // RTC 시간 설정
    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BIN) != HAL_OK)
 800397e:	2200      	movs	r2, #0
 8003980:	4913      	ldr	r1, [pc, #76]	@ (80039d0 <RTC_Set_UTC+0xd8>)
 8003982:	4816      	ldr	r0, [pc, #88]	@ (80039dc <RTC_Set_UTC+0xe4>)
 8003984:	f002 f9d1 	bl	8005d2a <HAL_RTC_SetTime>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <RTC_Set_UTC+0x9e>
    {
        // 초기화 실패 처리
        Error_Handler();
 800398e:	f7fe fff5 	bl	800297c <Error_Handler>
        result = RTC_ERROR; // 실패 코드
 8003992:	2301      	movs	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
    }
    // RTC 날짜 설정
    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BIN) != HAL_OK)
 8003996:	2200      	movs	r2, #0
 8003998:	490e      	ldr	r1, [pc, #56]	@ (80039d4 <RTC_Set_UTC+0xdc>)
 800399a:	4810      	ldr	r0, [pc, #64]	@ (80039dc <RTC_Set_UTC+0xe4>)
 800399c:	f002 fabd 	bl	8005f1a <HAL_RTC_SetDate>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <RTC_Set_UTC+0xb6>
    {
        // 초기화 실패 처리
        Error_Handler();
 80039a6:	f7fe ffe9 	bl	800297c <Error_Handler>
        result = RTC_ERROR; // 실패 코드
 80039aa:	2301      	movs	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
    }

    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc); // RTC 쓰기 보호 재설정
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <RTC_Set_UTC+0xe4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	22ff      	movs	r2, #255	@ 0xff
 80039b4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (result == RTC_ERROR)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <RTC_Set_UTC+0xc8>
    {
        return result; // 오류 발생 시 즉시 반환
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	e002      	b.n	80039c6 <RTC_Set_UTC+0xce>
    }

    result = RTC_OK; // 성공 코드    
 80039c0:	2300      	movs	r3, #0
 80039c2:	607b      	str	r3, [r7, #4]
    
    return result;
 80039c4:	687b      	ldr	r3, [r7, #4]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200007dc 	.word	0x200007dc
 80039d4:	200007f0 	.word	0x200007f0
 80039d8:	51eb851f 	.word	0x51eb851f
 80039dc:	20000578 	.word	0x20000578

080039e0 <RTC_Get_Synced_Year_String>:

// 저장된 연도를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Year_String(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
    static char yearString[5]; // 정적 버퍼로 연도 문자열 저장
    
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 80039e4:	2200      	movs	r2, #0
 80039e6:	4907      	ldr	r1, [pc, #28]	@ (8003a04 <RTC_Get_Synced_Year_String+0x24>)
 80039e8:	4807      	ldr	r0, [pc, #28]	@ (8003a08 <RTC_Get_Synced_Year_String+0x28>)
 80039ea:	f002 fb1a 	bl	8006022 <HAL_RTC_GetDate>
    
    // snprintf(yearString, sizeof(yearString), "%04d", g_Date.Year + 2000);
    snprintf(yearString, sizeof(yearString), "%02d", (int)g_Date.Year );
 80039ee:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <RTC_Get_Synced_Year_String+0x24>)
 80039f0:	78db      	ldrb	r3, [r3, #3]
 80039f2:	4a06      	ldr	r2, [pc, #24]	@ (8003a0c <RTC_Get_Synced_Year_String+0x2c>)
 80039f4:	2105      	movs	r1, #5
 80039f6:	4806      	ldr	r0, [pc, #24]	@ (8003a10 <RTC_Get_Synced_Year_String+0x30>)
 80039f8:	f009 f87a 	bl	800caf0 <sniprintf>
    return yearString; // 연도 문자열 반환
 80039fc:	4b04      	ldr	r3, [pc, #16]	@ (8003a10 <RTC_Get_Synced_Year_String+0x30>)
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200007f0 	.word	0x200007f0
 8003a08:	20000578 	.word	0x20000578
 8003a0c:	0800ecf0 	.word	0x0800ecf0
 8003a10:	20000810 	.word	0x20000810

08003a14 <RTC_Get_Synced_Month_String>:
}


// 저장된 월을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Month_String(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
    static char monthString[4]; // 정적 버퍼로 월 문자열 저장

    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4907      	ldr	r1, [pc, #28]	@ (8003a38 <RTC_Get_Synced_Month_String+0x24>)
 8003a1c:	4807      	ldr	r0, [pc, #28]	@ (8003a3c <RTC_Get_Synced_Month_String+0x28>)
 8003a1e:	f002 fb00 	bl	8006022 <HAL_RTC_GetDate>

    snprintf(monthString, sizeof(monthString), "%02d", g_Date.Month); // 2자리 월로 포맷
 8003a22:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <RTC_Get_Synced_Month_String+0x24>)
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	4a06      	ldr	r2, [pc, #24]	@ (8003a40 <RTC_Get_Synced_Month_String+0x2c>)
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4806      	ldr	r0, [pc, #24]	@ (8003a44 <RTC_Get_Synced_Month_String+0x30>)
 8003a2c:	f009 f860 	bl	800caf0 <sniprintf>
    
    return monthString; // 월 문자열 반환
 8003a30:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <RTC_Get_Synced_Month_String+0x30>)
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200007f0 	.word	0x200007f0
 8003a3c:	20000578 	.word	0x20000578
 8003a40:	0800ecf0 	.word	0x0800ecf0
 8003a44:	20000818 	.word	0x20000818

08003a48 <RTC_Get_Synced_Date_String>:
    return monthString; // 월 문자열 반환
}

// 저장된 일을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Date_String(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
    static char dateString[4]; // 정적 버퍼로 일 문자열 저장

    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	4907      	ldr	r1, [pc, #28]	@ (8003a6c <RTC_Get_Synced_Date_String+0x24>)
 8003a50:	4807      	ldr	r0, [pc, #28]	@ (8003a70 <RTC_Get_Synced_Date_String+0x28>)
 8003a52:	f002 fae6 	bl	8006022 <HAL_RTC_GetDate>

    snprintf(dateString, sizeof(dateString), "%02d", g_Date.Date); // 2자리 일로 포맷
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <RTC_Get_Synced_Date_String+0x24>)
 8003a58:	789b      	ldrb	r3, [r3, #2]
 8003a5a:	4a06      	ldr	r2, [pc, #24]	@ (8003a74 <RTC_Get_Synced_Date_String+0x2c>)
 8003a5c:	2104      	movs	r1, #4
 8003a5e:	4806      	ldr	r0, [pc, #24]	@ (8003a78 <RTC_Get_Synced_Date_String+0x30>)
 8003a60:	f009 f846 	bl	800caf0 <sniprintf>
    
    return dateString; // 일 문자열 반환
 8003a64:	4b04      	ldr	r3, [pc, #16]	@ (8003a78 <RTC_Get_Synced_Date_String+0x30>)
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200007f0 	.word	0x200007f0
 8003a70:	20000578 	.word	0x20000578
 8003a74:	0800ecf0 	.word	0x0800ecf0
 8003a78:	2000081c 	.word	0x2000081c

08003a7c <RTC_Get_Synced_Hour_String>:
    return dateString; // 일 문자열 반환
}

// 저장된 시를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Hour_String(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
    static char hourString[4]; // 정적 버퍼로 시 문자열 저장

    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8003a80:	2200      	movs	r2, #0
 8003a82:	4907      	ldr	r1, [pc, #28]	@ (8003aa0 <RTC_Get_Synced_Hour_String+0x24>)
 8003a84:	4807      	ldr	r0, [pc, #28]	@ (8003aa4 <RTC_Get_Synced_Hour_String+0x28>)
 8003a86:	f002 f9ea 	bl	8005e5e <HAL_RTC_GetTime>
    
    snprintf(hourString, sizeof(hourString), "%02d", g_Time.Hours); // 2자리 시로 포맷
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <RTC_Get_Synced_Hour_String+0x24>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4a06      	ldr	r2, [pc, #24]	@ (8003aa8 <RTC_Get_Synced_Hour_String+0x2c>)
 8003a90:	2104      	movs	r1, #4
 8003a92:	4806      	ldr	r0, [pc, #24]	@ (8003aac <RTC_Get_Synced_Hour_String+0x30>)
 8003a94:	f009 f82c 	bl	800caf0 <sniprintf>
    
    return hourString; // 시 문자열 반환
 8003a98:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <RTC_Get_Synced_Hour_String+0x30>)
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200007dc 	.word	0x200007dc
 8003aa4:	20000578 	.word	0x20000578
 8003aa8:	0800ecf0 	.word	0x0800ecf0
 8003aac:	20000820 	.word	0x20000820

08003ab0 <RTC_Get_Synced_Minute_String>:
    return hourString; // 시 문자열 반환
}

// 저장됨 분을 문자열로 반환하는 함수
const char* RTC_Get_Synced_Minute_String(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
    static char minuteString[4]; // 정적 버퍼로 분 문자열 저장
    
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4907      	ldr	r1, [pc, #28]	@ (8003ad4 <RTC_Get_Synced_Minute_String+0x24>)
 8003ab8:	4807      	ldr	r0, [pc, #28]	@ (8003ad8 <RTC_Get_Synced_Minute_String+0x28>)
 8003aba:	f002 f9d0 	bl	8005e5e <HAL_RTC_GetTime>
    
    snprintf(minuteString, sizeof(minuteString), "%02d", g_Time.Minutes); // 2자리 분으로 포맷
 8003abe:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <RTC_Get_Synced_Minute_String+0x24>)
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	4a06      	ldr	r2, [pc, #24]	@ (8003adc <RTC_Get_Synced_Minute_String+0x2c>)
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	4806      	ldr	r0, [pc, #24]	@ (8003ae0 <RTC_Get_Synced_Minute_String+0x30>)
 8003ac8:	f009 f812 	bl	800caf0 <sniprintf>
    
    return minuteString; // 분 문자열 반환
 8003acc:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <RTC_Get_Synced_Minute_String+0x30>)
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200007dc 	.word	0x200007dc
 8003ad8:	20000578 	.word	0x20000578
 8003adc:	0800ecf0 	.word	0x0800ecf0
 8003ae0:	20000824 	.word	0x20000824

08003ae4 <RTC_Get_Synced_Second_String>:
    return minuteString; // 분 문자열 반환
}

// 저장된 초를 문자열로 반환하는 함수
const char* RTC_Get_Synced_Second_String(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
    static char secondString[4]; // 정적 버퍼로 초 문자열 저장
    
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4907      	ldr	r1, [pc, #28]	@ (8003b08 <RTC_Get_Synced_Second_String+0x24>)
 8003aec:	4807      	ldr	r0, [pc, #28]	@ (8003b0c <RTC_Get_Synced_Second_String+0x28>)
 8003aee:	f002 f9b6 	bl	8005e5e <HAL_RTC_GetTime>
    
    snprintf(secondString, sizeof(secondString), "%02d", g_Time.Seconds); // 2자리 초로 포맷
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <RTC_Get_Synced_Second_String+0x24>)
 8003af4:	789b      	ldrb	r3, [r3, #2]
 8003af6:	4a06      	ldr	r2, [pc, #24]	@ (8003b10 <RTC_Get_Synced_Second_String+0x2c>)
 8003af8:	2104      	movs	r1, #4
 8003afa:	4806      	ldr	r0, [pc, #24]	@ (8003b14 <RTC_Get_Synced_Second_String+0x30>)
 8003afc:	f008 fff8 	bl	800caf0 <sniprintf>
    
    return secondString; // 초 문자열 반환
 8003b00:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <RTC_Get_Synced_Second_String+0x30>)
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200007dc 	.word	0x200007dc
 8003b0c:	20000578 	.word	0x20000578
 8003b10:	0800ecf0 	.word	0x0800ecf0
 8003b14:	20000828 	.word	0x20000828

08003b18 <SD_Card_Boot>:



// =========================================================
int SD_Card_Boot(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 8003b1e:	af00      	add	r7, sp, #0
    FATFS SDFatFS;  // FATFS 구조체
    FIL SDFile;     // 파일 구조체
    FRESULT fres;   // FATFS 함수 결과
    UINT bw, br;    // 바이트 쓰기/읽기 변수

    int result = 0; // 결과 변수 초기화
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
    }
#endif // 0
    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8003b26:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	494c      	ldr	r1, [pc, #304]	@ (8003c60 <SD_Card_Boot+0x148>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f008 f99c 	bl	800be6c <f_mount>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
    if (fres != FR_OK)
 8003b3a:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <SD_Card_Boot+0x2e>
    {
        // 마운트 실패 처리
        Error_Handler();
 8003b42:	f7fe ff1b 	bl	800297c <Error_Handler>
    }

    // 2) 와이파이 파일 있는지 확인
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	2201      	movs	r2, #1
 8003b4a:	4946      	ldr	r1, [pc, #280]	@ (8003c64 <SD_Card_Boot+0x14c>)
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f008 f9d3 	bl	800bef8 <f_open>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
    if (fres == FR_OK)
 8003b58:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11c      	bne.n	8003b9a <SD_Card_Boot+0x82>
    {
        // 파일이 존재하면 OK Sd카드 언마운트
        f_close(&SDFile);
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	4618      	mov	r0, r3
 8003b64:	f008 feb4 	bl	800c8d0 <f_close>
        fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003b68:	2201      	movs	r2, #1
 8003b6a:	493d      	ldr	r1, [pc, #244]	@ (8003c60 <SD_Card_Boot+0x148>)
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f008 f97d 	bl	800be6c <f_mount>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 8003b78:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <SD_Card_Boot+0x7a>
        {
            SD_Card_Log("SD Card Unmount Failed!\n");
 8003b80:	4839      	ldr	r0, [pc, #228]	@ (8003c68 <SD_Card_Boot+0x150>)
 8003b82:	f000 f981 	bl	8003e88 <SD_Card_Log>
            // 언마운트 실패 처리
            // Error_Handler();
            Error_Proc(1);
 8003b86:	2001      	movs	r0, #1
 8003b88:	f7fe ffd8 	bl	8002b3c <Error_Proc>

            result = SD_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        
        result = SD_OK; // 파일이 존재하면 OK
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 8003b98:	e05a      	b.n	8003c50 <SD_Card_Boot+0x138>
    }
    else
    {
        // 파일이 없으면 생성
        fres = f_open(&SDFile, "wifi.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	220a      	movs	r2, #10
 8003b9e:	4931      	ldr	r1, [pc, #196]	@ (8003c64 <SD_Card_Boot+0x14c>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f008 f9a9 	bl	800bef8 <f_open>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 8003bac:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <SD_Card_Boot+0xae>
        {
            // 파일 열기 실패 처리
            // Error_Handler();
            Error_Proc(1);
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f7fe ffc1 	bl	8002b3c <Error_Proc>
            SD_Card_Log("SD Card File Open Failed!\n");
 8003bba:	482c      	ldr	r0, [pc, #176]	@ (8003c6c <SD_Card_Boot+0x154>)
 8003bbc:	f000 f964 	bl	8003e88 <SD_Card_Log>
            result = SD_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        // 파일에 기본 Wi-Fi 설정 데이터 쓰기
        const char *wifiData = "SSID=YourSSID\nPassword=YourPassword\n";
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <SD_Card_Boot+0x158>)
 8003bc8:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
        fres = f_write(&SDFile, wifiData, strlen(wifiData), &bw);
 8003bcc:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 8003bd0:	f7fc fb08 	bl	80001e4 <strlen>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	1d38      	adds	r0, r7, #4
 8003bda:	f8d7 1464 	ldr.w	r1, [r7, #1124]	@ 0x464
 8003bde:	f008 fc84 	bl	800c4ea <f_write>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK || bw < strlen(wifiData))
 8003be8:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <SD_Card_Boot+0xf0>
 8003bf0:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 8003bf4:	f7fc faf6 	bl	80001e4 <strlen>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8003bfe:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d90c      	bls.n	8003c22 <SD_Card_Boot+0x10a>
        {
            // 파일 쓰기 실패 처리
            f_close(&SDFile);
 8003c08:	1d3b      	adds	r3, r7, #4
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f008 fe60 	bl	800c8d0 <f_close>
            // Error_Handler();
            Error_Proc(1);
 8003c10:	2001      	movs	r0, #1
 8003c12:	f7fe ff93 	bl	8002b3c <Error_Proc>
            SD_Card_Log("SD Card File Write Failed!\n");
 8003c16:	4817      	ldr	r0, [pc, #92]	@ (8003c74 <SD_Card_Boot+0x15c>)
 8003c18:	f000 f936 	bl	8003e88 <SD_Card_Log>
            result = SD_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }
        // 파일 닫기
        fres = f_close(&SDFile);
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f008 fe53 	bl	800c8d0 <f_close>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 346b 	strb.w	r3, [r7, #1131]	@ 0x46b
        if (fres != FR_OK)
 8003c30:	f897 346b 	ldrb.w	r3, [r7, #1131]	@ 0x46b
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <SD_Card_Boot+0x132>
        {
            // 파일 닫기 실패 처리
            // Error_Handler();
            Error_Proc(1);
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f7fe ff7f 	bl	8002b3c <Error_Proc>
            SD_Card_Log("SD Card File Close Failed!\n");
 8003c3e:	480e      	ldr	r0, [pc, #56]	@ (8003c78 <SD_Card_Boot+0x160>)
 8003c40:	f000 f922 	bl	8003e88 <SD_Card_Log>
            result = SD_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
        }

        result = SD_OK; // 파일 생성 성공
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
    }

    return result; // SD 카드 부팅 결과 반환
 8003c50:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000878 	.word	0x20000878
 8003c64:	0800ed20 	.word	0x0800ed20
 8003c68:	0800ed2c 	.word	0x0800ed2c
 8003c6c:	0800ed48 	.word	0x0800ed48
 8003c70:	0800ed64 	.word	0x0800ed64
 8003c74:	0800ed8c 	.word	0x0800ed8c
 8003c78:	0800eda8 	.word	0x0800eda8

08003c7c <SD_Card_Get_WiFi_SSID>:


// WIFI SSID를 반환하는 함수
const char* SD_Card_Get_WiFi_SSID(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8003c82:	af00      	add	r7, sp, #0
    UINT br;              // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8003c84:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4936      	ldr	r1, [pc, #216]	@ (8003d64 <SD_Card_Get_WiFi_SSID+0xe8>)
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f008 f8ed 	bl	800be6c <f_mount>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8003c98:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <SD_Card_Get_WiFi_SSID+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 8003ca0:	f7fe fe6c 	bl	800297c <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 8003ca4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ca8:	2201      	movs	r2, #1
 8003caa:	492f      	ldr	r1, [pc, #188]	@ (8003d68 <SD_Card_Get_WiFi_SSID+0xec>)
 8003cac:	4618      	mov	r0, r3
 8003cae:	f008 f923 	bl	800bef8 <f_open>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8003cb8:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <SD_Card_Get_WiFi_SSID+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8003cc0:	f7fe fe5c 	bl	800297c <Error_Handler>
    }

    // 3) 파일에서 SSID 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 8003cc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003cc8:	4639      	mov	r1, r7
 8003cca:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8003cce:	223f      	movs	r2, #63	@ 0x3f
 8003cd0:	f008 facc 	bl	800c26c <f_read>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK || br == 0)
 8003cda:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <SD_Card_Get_WiFi_SSID+0x74>
 8003ce2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8003ce6:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <SD_Card_Get_WiFi_SSID+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 8003cf0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f008 fdeb 	bl	800c8d0 <f_close>
        Error_Handler();
 8003cfa:	f7fe fe3f 	bl	800297c <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 8003cfe:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8003d02:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f507 6295 	add.w	r2, r7, #1192	@ 0x4a8
 8003d0c:	f5a2 6295 	sub.w	r2, r2, #1192	@ 0x4a8
 8003d10:	2100      	movs	r1, #0
 8003d12:	54d1      	strb	r1, [r2, r3]

    // 4) SSID (최초 부트에서 "SSID=YourSSID" 형식으로 저장)
    sscanf(buffer, "SSID=%31s", ssid);
 8003d14:	463b      	mov	r3, r7
 8003d16:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <SD_Card_Get_WiFi_SSID+0xf0>)
 8003d18:	4915      	ldr	r1, [pc, #84]	@ (8003d70 <SD_Card_Get_WiFi_SSID+0xf4>)
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f008 ff1c 	bl	800cb58 <siscanf>

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 8003d20:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d24:	4618      	mov	r0, r3
 8003d26:	f008 fdd3 	bl	800c8d0 <f_close>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8003d30:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <SD_Card_Get_WiFi_SSID+0xc0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8003d38:	f7fe fe20 	bl	800297c <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4909      	ldr	r1, [pc, #36]	@ (8003d64 <SD_Card_Get_WiFi_SSID+0xe8>)
 8003d40:	2000      	movs	r0, #0
 8003d42:	f008 f893 	bl	800be6c <f_mount>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8003d4c:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <SD_Card_Get_WiFi_SSID+0xdc>
    {
        // 언마운트 실패 처리
        Error_Handler();
 8003d54:	f7fe fe12 	bl	800297c <Error_Handler>
    }

    return ssid; // SSID 반환
 8003d58:	4b04      	ldr	r3, [pc, #16]	@ (8003d6c <SD_Card_Get_WiFi_SSID+0xf0>)
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000878 	.word	0x20000878
 8003d68:	0800ed20 	.word	0x0800ed20
 8003d6c:	2000082c 	.word	0x2000082c
 8003d70:	0800edc4 	.word	0x0800edc4

08003d74 <SD_Card_Get_WiFi_Password>:

// WIFI 비밀번호를 반환하는 함수
const char* SD_Card_Get_WiFi_Password(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 8003d7a:	af00      	add	r7, sp, #0
    UINT br;                  // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8003d7c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8003d80:	2201      	movs	r2, #1
 8003d82:	493c      	ldr	r1, [pc, #240]	@ (8003e74 <SD_Card_Get_WiFi_Password+0x100>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f008 f871 	bl	800be6c <f_mount>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8003d90:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <SD_Card_Get_WiFi_Password+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 8003d98:	f7fe fdf0 	bl	800297c <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 8003d9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003da0:	2201      	movs	r2, #1
 8003da2:	4935      	ldr	r1, [pc, #212]	@ (8003e78 <SD_Card_Get_WiFi_Password+0x104>)
 8003da4:	4618      	mov	r0, r3
 8003da6:	f008 f8a7 	bl	800bef8 <f_open>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8003db0:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <SD_Card_Get_WiFi_Password+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8003db8:	f7fe fde0 	bl	800297c <Error_Handler>
    }

    // 3) 파일에서 비밀번호 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 8003dbc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003dc0:	1d39      	adds	r1, r7, #4
 8003dc2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8003dc6:	223f      	movs	r2, #63	@ 0x3f
 8003dc8:	f008 fa50 	bl	800c26c <f_read>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK || br == 0)
 8003dd2:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <SD_Card_Get_WiFi_Password+0x74>
 8003dda:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8003dde:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <SD_Card_Get_WiFi_Password+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 8003de8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003dec:	4618      	mov	r0, r3
 8003dee:	f008 fd6f 	bl	800c8d0 <f_close>
        Error_Handler();
 8003df2:	f7fe fdc3 	bl	800297c <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 8003df6:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8003dfa:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8003e04:	f2a2 42ac 	subw	r2, r2, #1196	@ 0x4ac
 8003e08:	2100      	movs	r1, #0
 8003e0a:	54d1      	strb	r1, [r2, r3]

    // 4) 비밀번호 (최초 부트에서 "Password=YourPassword" 형식으로 저장)
    const char *p = strstr(buffer, "Password=");
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	491b      	ldr	r1, [pc, #108]	@ (8003e7c <SD_Card_Get_WiFi_Password+0x108>)
 8003e10:	4618      	mov	r0, r3
 8003e12:	f008 ff05 	bl	800cc20 <strstr>
 8003e16:	f8c7 04a8 	str.w	r0, [r7, #1192]	@ 0x4a8
    if(p)
 8003e1a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <SD_Card_Get_WiFi_Password+0xba>
    {
        sscanf(p, "Password=%31s", password);
 8003e22:	4a17      	ldr	r2, [pc, #92]	@ (8003e80 <SD_Card_Get_WiFi_Password+0x10c>)
 8003e24:	4917      	ldr	r1, [pc, #92]	@ (8003e84 <SD_Card_Get_WiFi_Password+0x110>)
 8003e26:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 8003e2a:	f008 fe95 	bl	800cb58 <siscanf>
    }
    // sscanf(buffer, "Password=%31s", password);

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 8003e2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003e32:	4618      	mov	r0, r3
 8003e34:	f008 fd4c 	bl	800c8d0 <f_close>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8003e3e:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <SD_Card_Get_WiFi_Password+0xd6>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8003e46:	f7fe fd99 	bl	800297c <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4909      	ldr	r1, [pc, #36]	@ (8003e74 <SD_Card_Get_WiFi_Password+0x100>)
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f008 f80c 	bl	800be6c <f_mount>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8003e5a:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <SD_Card_Get_WiFi_Password+0xf2>
    {
        // 언마운트 실패 처리
        Error_Handler();
 8003e62:	f7fe fd8b 	bl	800297c <Error_Handler>
    }

    return password; // 비밀번호 반환
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <SD_Card_Get_WiFi_Password+0x10c>)
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f507 6796 	add.w	r7, r7, #1200	@ 0x4b0
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000878 	.word	0x20000878
 8003e78:	0800ed20 	.word	0x0800ed20
 8003e7c:	0800edd0 	.word	0x0800edd0
 8003e80:	2000084c 	.word	0x2000084c
 8003e84:	0800eddc 	.word	0x0800eddc

08003e88 <SD_Card_Log>:



// SD카드에 로그를 남기는 함수
void SD_Card_Log(const char *logMessage)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8003e94:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8003e98:	6018      	str	r0, [r3, #0]
    UINT bw;        // 바이트 쓰기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8003e9a:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4937      	ldr	r1, [pc, #220]	@ (8003f80 <SD_Card_Log+0xf8>)
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f007 ffe2 	bl	800be6c <f_mount>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8003eae:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <SD_Card_Log+0x32>
    {
        // 마운트 실패 처리
        Error_Handler();
 8003eb6:	f7fe fd61 	bl	800297c <Error_Handler>
    }

    // 2) 로그 파일 열기(없으면 생성)
    fres = f_open(&SDFile, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 8003eba:	f107 030c 	add.w	r3, r7, #12
 8003ebe:	2232      	movs	r2, #50	@ 0x32
 8003ec0:	4930      	ldr	r1, [pc, #192]	@ (8003f84 <SD_Card_Log+0xfc>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f008 f818 	bl	800bef8 <f_open>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8003ece:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <SD_Card_Log+0x52>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8003ed6:	f7fe fd51 	bl	800297c <Error_Handler>
    }

    // 3) 로그 메시지 쓰기
    fres = f_write(&SDFile, logMessage, strlen(logMessage), &bw);
 8003eda:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8003ede:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	f7fc f97e 	bl	80001e4 <strlen>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8003ef2:	f2a2 416c 	subw	r1, r2, #1132	@ 0x46c
 8003ef6:	f107 000c 	add.w	r0, r7, #12
 8003efa:	4622      	mov	r2, r4
 8003efc:	6809      	ldr	r1, [r1, #0]
 8003efe:	f008 faf4 	bl	800c4ea <f_write>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK || bw < strlen(logMessage))
 8003f08:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <SD_Card_Log+0xa6>
 8003f10:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8003f14:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	f7fc f963 	bl	80001e4 <strlen>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8003f24:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d906      	bls.n	8003f3c <SD_Card_Log+0xb4>
    {
        // 파일 쓰기 실패 처리
        f_close(&SDFile);
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	4618      	mov	r0, r3
 8003f34:	f008 fccc 	bl	800c8d0 <f_close>
        Error_Handler();
 8003f38:	f7fe fd20 	bl	800297c <Error_Handler>
    }

    // 4) 파일 닫기
    fres = f_close(&SDFile);
 8003f3c:	f107 030c 	add.w	r3, r7, #12
 8003f40:	4618      	mov	r0, r3
 8003f42:	f008 fcc5 	bl	800c8d0 <f_close>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8003f4c:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <SD_Card_Log+0xd0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8003f54:	f7fe fd12 	bl	800297c <Error_Handler>
    }

    // 5) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4909      	ldr	r1, [pc, #36]	@ (8003f80 <SD_Card_Log+0xf8>)
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f007 ff85 	bl	800be6c <f_mount>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8003f68:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <SD_Card_Log+0xec>
    {
        // 언마운트 실패 처리
        Error_Handler();
 8003f70:	f7fe fd04 	bl	800297c <Error_Handler>
    }
}
 8003f74:	bf00      	nop
 8003f76:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd90      	pop	{r4, r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000878 	.word	0x20000878
 8003f84:	0800edec 	.word	0x0800edec

08003f88 <SD_Card_Is_Exist>:

// SD카드가 있는지 확인하여 반환하는 함수
int SD_Card_Is_Exist(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8003f8e:	af00      	add	r7, sp, #0
    FRESULT fres;   // FATFS 함수 결과

    // --------------------------------------------------

    // 1) SD 카드 마운트 시도
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	2201      	movs	r2, #1
 8003f94:	490b      	ldr	r1, [pc, #44]	@ (8003fc4 <SD_Card_Is_Exist+0x3c>)
 8003f96:	4618      	mov	r0, r3
 8003f98:	f007 ff68 	bl	800be6c <f_mount>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
    if (fres == FR_OK)
 8003fa2:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <SD_Card_Is_Exist+0x30>
    {
        // 마운트 성공 시 언마운트 후 OK 반환
        f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8003faa:	2201      	movs	r2, #1
 8003fac:	4905      	ldr	r1, [pc, #20]	@ (8003fc4 <SD_Card_Is_Exist+0x3c>)
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f007 ff5c 	bl	800be6c <f_mount>
        return SD_OK; // SD 카드 존재
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <SD_Card_Is_Exist+0x32>
    }
    
    return SD_ERROR; // SD 카드 없음
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000878 	.word	0x20000878

08003fc8 <SERVER_API_Get_Data>:


__CCMRAM__ Server_API_Data g_serverApiData; // 서버 API 데이터 구조체 인스턴스

PServer_API_Data SERVER_API_Get_Data(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
    // g_serverApiData의 주소를 반환
    return &g_serverApiData;
 8003fcc:	4b02      	ldr	r3, [pc, #8]	@ (8003fd8 <SERVER_API_Get_Data+0x10>)
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	10000028 	.word	0x10000028

08003fdc <SERVER_API_Init>:

// CCMRAM 초기화
void SERVER_API_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
    // g_serverApiData 구조체를 0으로 초기화
    memset(&g_serverApiData, 0, sizeof(g_serverApiData));
 8003fe0:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4802      	ldr	r0, [pc, #8]	@ (8003ff0 <SERVER_API_Init+0x14>)
 8003fe8:	f008 fdf2 	bl	800cbd0 <memset>
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	10000028 	.word	0x10000028

08003ff4 <SERVER_API_Set_Token>:


// 토큰을 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_Token(const char* token)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    if (token != NULL && strlen(token) < sizeof(g_serverApiData.sToken))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00e      	beq.n	8004020 <SERVER_API_Set_Token+0x2c>
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc f8ee 	bl	80001e4 <strlen>
 8004008:	4603      	mov	r3, r0
 800400a:	2b7f      	cmp	r3, #127	@ 0x7f
 800400c:	d808      	bhi.n	8004020 <SERVER_API_Set_Token+0x2c>
    {
        strncpy(g_serverApiData.sToken, token, sizeof(g_serverApiData.sToken) - 1);
 800400e:	227f      	movs	r2, #127	@ 0x7f
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4805      	ldr	r0, [pc, #20]	@ (8004028 <SERVER_API_Set_Token+0x34>)
 8004014:	f008 fdf1 	bl	800cbfa <strncpy>
        g_serverApiData.sToken[sizeof(g_serverApiData.sToken) - 1] = '\0'; // 문자열 종료
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <SERVER_API_Set_Token+0x34>)
 800401a:	2200      	movs	r2, #0
 800401c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    }
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	10000028 	.word	0x10000028

0800402c <SERVER_API_Set_MAC_Address>:

// MAC 주소를 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_MAC_Address(const char* mac)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    if (mac != NULL && strlen(mac) < sizeof(g_serverApiData.sMac))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <SERVER_API_Set_MAC_Address+0x2c>
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc f8d2 	bl	80001e4 <strlen>
 8004040:	4603      	mov	r3, r0
 8004042:	2b11      	cmp	r3, #17
 8004044:	d808      	bhi.n	8004058 <SERVER_API_Set_MAC_Address+0x2c>
    {
        strncpy(g_serverApiData.sMac, mac, sizeof(g_serverApiData.sMac) - 1);
 8004046:	2211      	movs	r2, #17
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4805      	ldr	r0, [pc, #20]	@ (8004060 <SERVER_API_Set_MAC_Address+0x34>)
 800404c:	f008 fdd5 	bl	800cbfa <strncpy>
        g_serverApiData.sMac[sizeof(g_serverApiData.sMac) - 1] = '\0'; // 문자열 종료
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <SERVER_API_Set_MAC_Address+0x38>)
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    }
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	100000a8 	.word	0x100000a8
 8004064:	10000028 	.word	0x10000028

08004068 <Server_Send_Boot>:
// =======================================================================================================


// AT 명령어로 Json 날리기 , 서버에 날리기, 함수는 성공 여부를 반환
int Server_Send_Boot(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 800406e:	af02      	add	r7, sp, #8
    // 토큰을 가져올 구조체
    PServer_API_Data pServerApiData = SERVER_API_Get_Data();
 8004070:	f7ff ffaa 	bl	8003fc8 <SERVER_API_Get_Data>
 8004074:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330


    int result = 0; // 결과 변수 초기화
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    const char *success = "Boot Data sent successfully!\r\n";
 800407e:	4b70      	ldr	r3, [pc, #448]	@ (8004240 <Server_Send_Boot+0x1d8>)
 8004080:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    const char *fail = "Failed to send Boot Data!\r\n";
 8004084:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <Server_Send_Boot+0x1dc>)
 8004086:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    const char *tokenCheck = "Token is empty or NULL\r\n";
 800408a:	4b6f      	ldr	r3, [pc, #444]	@ (8004248 <Server_Send_Boot+0x1e0>)
 800408c:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
    const char *macPCheck = "MAC-P address is empty or NULL\r\n";
 8004090:	4b6e      	ldr	r3, [pc, #440]	@ (800424c <Server_Send_Boot+0x1e4>)
 8004092:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
    const char *macCCheck = "MAC-C address is empty or NULL\r\n";
 8004096:	4b6e      	ldr	r3, [pc, #440]	@ (8004250 <Server_Send_Boot+0x1e8>)
 8004098:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c

    const char* token = pServerApiData->sToken; // 서버 API 토큰 가져오기
 800409c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80040a0:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
    const char* macP = pServerApiData->sMac; // MAC 주소 가져오기
 80040a4:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80040a8:	3380      	adds	r3, #128	@ 0x80
 80040aa:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    const char* macC = pServerApiData->sMac; // MAC 주소 가져오기
 80040ae:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80040b2:	3380      	adds	r3, #128	@ 0x80
 80040b4:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310

    char jsonData[256]={0}; // AT 명령어를 저장할 버퍼 // 토큰이 128바이트 공간 차지하므로 커맨드 버퍼는 충분히 커야 함
 80040b8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80040bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	3304      	adds	r3, #4
 80040c6:	22fc      	movs	r2, #252	@ 0xfc
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f008 fd80 	bl	800cbd0 <memset>

    // 토큰 값 유효한지 확인
    if (token == NULL || strlen(token) == 0)
 80040d0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <Server_Send_Boot+0x7a>
 80040d8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <Server_Send_Boot+0x98>
    {
        // 토큰이 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)tokenCheck, strlen(tokenCheck), HAL_MAX_DELAY);
 80040e2:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 80040e6:	f7fc f87d 	bl	80001e4 <strlen>
 80040ea:	4603      	mov	r3, r0
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 80040f6:	4857      	ldr	r0, [pc, #348]	@ (8004254 <Server_Send_Boot+0x1ec>)
 80040f8:	f004 f9ec 	bl	80084d4 <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 80040fc:	2301      	movs	r3, #1
 80040fe:	e09a      	b.n	8004236 <Server_Send_Boot+0x1ce>
    }
    // MAC 주소 값 유효한지 확인
    if (macP == NULL || strlen(macP) == 0)
 8004100:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <Server_Send_Boot+0xaa>
 8004108:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10e      	bne.n	8004130 <Server_Send_Boot+0xc8>
    {
        // MAC 주소가 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)macPCheck, strlen(macPCheck), HAL_MAX_DELAY);
 8004112:	f8d7 0320 	ldr.w	r0, [r7, #800]	@ 0x320
 8004116:	f7fc f865 	bl	80001e4 <strlen>
 800411a:	4603      	mov	r3, r0
 800411c:	b29a      	uxth	r2, r3
 800411e:	f04f 33ff 	mov.w	r3, #4294967295
 8004122:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 8004126:	484b      	ldr	r0, [pc, #300]	@ (8004254 <Server_Send_Boot+0x1ec>)
 8004128:	f004 f9d4 	bl	80084d4 <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 800412c:	2301      	movs	r3, #1
 800412e:	e082      	b.n	8004236 <Server_Send_Boot+0x1ce>
    }
    // MAC 주소 값 유효한지 확인
    if (macC == NULL || strlen(macC) == 0)
 8004130:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <Server_Send_Boot+0xda>
 8004138:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10e      	bne.n	8004160 <Server_Send_Boot+0xf8>
    {
        // MAC 주소가 비어있으면 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)macCCheck, strlen(macCCheck), HAL_MAX_DELAY);
 8004142:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8004146:	f7fc f84d 	bl	80001e4 <strlen>
 800414a:	4603      	mov	r3, r0
 800414c:	b29a      	uxth	r2, r3
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	f8d7 131c 	ldr.w	r1, [r7, #796]	@ 0x31c
 8004156:	483f      	ldr	r0, [pc, #252]	@ (8004254 <Server_Send_Boot+0x1ec>)
 8004158:	f004 f9bc 	bl	80084d4 <HAL_UART_Transmit>
        return AT_ERROR; // 실패 코드
 800415c:	2301      	movs	r3, #1
 800415e:	e06a      	b.n	8004236 <Server_Send_Boot+0x1ce>
    }
    
    // 1) 보낼 JSON 문자열 정의 (큰 따옴표는 백슬래시로 이스케이프)
    int jsonDataLen = snprintf(
 8004160:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8004164:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004174:	4a38      	ldr	r2, [pc, #224]	@ (8004258 <Server_Send_Boot+0x1f0>)
 8004176:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800417a:	f008 fcb9 	bl	800caf0 <sniprintf>
 800417e:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
        sizeof(jsonData), 
        "{\\\"token\\\":\\\"%s\\\"\\,\\\"articleid_p\\\":\\\"%s\\\"\\,\\\"articleid\\\":\\\"%s\\\"}",
        token, macP, macP
    );

    if (jsonDataLen < 0 || jsonDataLen >= (int)sizeof(jsonData)) 
 8004182:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8004186:	2b00      	cmp	r3, #0
 8004188:	db03      	blt.n	8004192 <Server_Send_Boot+0x12a>
 800418a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800418e:	2bff      	cmp	r3, #255	@ 0xff
 8004190:	dd04      	ble.n	800419c <Server_Send_Boot+0x134>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8004192:	f7fe fbf3 	bl	800297c <Error_Handler>
        result = AT_ERROR; // 실패 코드
 8004196:	2301      	movs	r3, #1
 8004198:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }
    
    char atCmd[512]; // 충분히 큰 버퍼

    int fullJson = snprintf(atCmd, sizeof(atCmd),
 800419c:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80041a0:	1d38      	adds	r0, r7, #4
 80041a2:	4a2e      	ldr	r2, [pc, #184]	@ (800425c <Server_Send_Boot+0x1f4>)
 80041a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041a8:	f008 fca2 	bl	800caf0 <sniprintf>
 80041ac:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
        "AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/boot\",\"dev-api.andamiro.net\",\"/test/boot\",2,\"%s\"\r\n",
        jsonData);

    if (fullJson < 0 || fullJson >= (int)sizeof(atCmd)) 
 80041b0:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db04      	blt.n	80041c2 <Server_Send_Boot+0x15a>
 80041b8:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c0:	db04      	blt.n	80041cc <Server_Send_Boot+0x164>
    {
        // snprintf 실패 또는 버퍼 부족
        Error_Handler();
 80041c2:	f7fe fbdb 	bl	800297c <Error_Handler>
        result = AT_ERROR; // 실패 코드
 80041c6:	2301      	movs	r3, #1
 80041c8:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }

    // AT 명령어 전송 및 응답 처리
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(atCmd);
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd f844 	bl	800125c <ESP_AT_Send_Command_Sync_Get_Result>
 80041d4:	f8c7 0304 	str.w	r0, [r7, #772]	@ 0x304
    
    // 응답에서 OK 문자열 찾기
    if (response != NULL && strstr(response, "OK") != NULL) 
 80041d8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d018      	beq.n	8004212 <Server_Send_Boot+0x1aa>
 80041e0:	491f      	ldr	r1, [pc, #124]	@ (8004260 <Server_Send_Boot+0x1f8>)
 80041e2:	f8d7 0304 	ldr.w	r0, [r7, #772]	@ 0x304
 80041e6:	f008 fd1b 	bl	800cc20 <strstr>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <Server_Send_Boot+0x1aa>
    {
        // OK 응답이 있으면 성공
        HAL_UART_Transmit(&huart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 80041f0:	f8d7 032c 	ldr.w	r0, [r7, #812]	@ 0x32c
 80041f4:	f7fb fff6 	bl	80001e4 <strlen>
 80041f8:	4603      	mov	r3, r0
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 8004204:	4813      	ldr	r0, [pc, #76]	@ (8004254 <Server_Send_Boot+0x1ec>)
 8004206:	f004 f965 	bl	80084d4 <HAL_UART_Transmit>
        result = AT_OK; // 성공 코드
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8004210:	e00f      	b.n	8004232 <Server_Send_Boot+0x1ca>
    } 
    else 
    {
        // OK 응답이 없으면 실패
        HAL_UART_Transmit(&huart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 8004212:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8004216:	f7fb ffe5 	bl	80001e4 <strlen>
 800421a:	4603      	mov	r3, r0
 800421c:	b29a      	uxth	r2, r3
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	f8d7 1328 	ldr.w	r1, [r7, #808]	@ 0x328
 8004226:	480b      	ldr	r0, [pc, #44]	@ (8004254 <Server_Send_Boot+0x1ec>)
 8004228:	f004 f954 	bl	80084d4 <HAL_UART_Transmit>
        result = AT_ERROR; // 실패 코드
 800422c:	2301      	movs	r3, #1
 800422e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    }

    return result; // 결과 반환
 8004232:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
}
 8004236:	4618      	mov	r0, r3
 8004238:	f507 774e 	add.w	r7, r7, #824	@ 0x338
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	0800edf4 	.word	0x0800edf4
 8004244:	0800ee14 	.word	0x0800ee14
 8004248:	0800ee30 	.word	0x0800ee30
 800424c:	0800ee4c 	.word	0x0800ee4c
 8004250:	0800ee70 	.word	0x0800ee70
 8004254:	20000704 	.word	0x20000704
 8004258:	0800ee94 	.word	0x0800ee94
 800425c:	0800eed8 	.word	0x0800eed8
 8004260:	0800ef40 	.word	0x0800ef40

08004264 <SIM_M_PWR_KEY_Init>:
// ──────────────────────────────────────────────────────────────────────────────
// ──────────────────────────────────────────────────────────────────────────────

// M_PWR_KEY 초기화
void SIM_M_PWR_KEY_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0

    // M_PWR_KEY_GPIO_Port->BSRR = (1U << (11 + 16));  // ODR[11] ← 0
    M_PWR_KEY_GPIO_Port->BSRR = (1U << 11); // set PE11
#else
    // HAL라이브러리 사용해서 GPIO 초기화
    HAL_GPIO_WritePin(M_PWR_KEY_GPIO_Port, M_PWR_KEY_Pin, GPIO_PIN_SET);
 8004268:	2201      	movs	r2, #1
 800426a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800426e:	480a      	ldr	r0, [pc, #40]	@ (8004298 <SIM_M_PWR_KEY_Init+0x34>)
 8004270:	f000 ff46 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(M_PWR_KEY_GPIO_Port, M_PWR_KEY_Pin, GPIO_PIN_RESET);
 8004274:	2200      	movs	r2, #0
 8004276:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800427a:	4807      	ldr	r0, [pc, #28]	@ (8004298 <SIM_M_PWR_KEY_Init+0x34>)
 800427c:	f000 ff40 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(1100); // 1.1초 대기
 8004280:	f240 404c 	movw	r0, #1100	@ 0x44c
 8004284:	f000 fbd8 	bl	8004a38 <HAL_Delay>
    HAL_GPIO_WritePin(M_PWR_KEY_GPIO_Port, M_PWR_KEY_Pin, GPIO_PIN_SET);
 8004288:	2201      	movs	r2, #1
 800428a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800428e:	4802      	ldr	r0, [pc, #8]	@ (8004298 <SIM_M_PWR_KEY_Init+0x34>)
 8004290:	f000 ff36 	bl	8005100 <HAL_GPIO_WritePin>


#endif
}
 8004294:	bf00      	nop
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000

0800429c <SIM_PWR_ON>:

void SIM_PWR_ON(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
    // M_PWR_KEY 핀을 HIGH로 설정하여 SIM 모듈 전원 ON
    M_PWR_KEY_GPIO_Port->BSRR = (1U << 11); // set PE11
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <SIM_PWR_ON+0x18>)
 80042a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042a6:	619a      	str	r2, [r3, #24]
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000

080042b8 <SIM_PWR_OFF>:

void SIM_PWR_OFF(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
    // M_PWR_KEY 핀을 LOW로 설정하여 SIM 모듈 전원 OFF
    M_PWR_KEY_GPIO_Port->BSRR = (1U << (11 + 16)); // reset PE11
 80042bc:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <SIM_PWR_OFF+0x18>)
 80042be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042c2:	619a      	str	r2, [r3, #24]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000

080042d4 <SIM_UART_ReadData>:
 * @param  overall_timeout_ms  전체 읽기 최대 대기 시간 (ms)
 * @param  byte_timeout_ms     바이트당 최대 대기 시간 (ms)
 * @retval 실제 읽어온 바이트 수 (널종료 문자는 제외)
 */
size_t SIM_UART_ReadData(char *buf, size_t buf_len, uint32_t overall_timeout_ms, uint32_t byte_timeout_ms)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
    uint32_t start = HAL_GetTick();
 80042e2:	f000 fb9d 	bl	8004a20 <HAL_GetTick>
 80042e6:	61f8      	str	r0, [r7, #28]
    size_t   pos   = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
    uint8_t  ch;

    // 읽기 루프
    while ((HAL_GetTick() - start) < overall_timeout_ms && pos < buf_len - 1)
 80042ec:	e013      	b.n	8004316 <SIM_UART_ReadData+0x42>
    {
        // 1바이트 받기 (타임아웃 byte_timeout_ms)
        if (HAL_UART_Receive(&huart3, &ch, 1, byte_timeout_ms) == HAL_OK)
 80042ee:	f107 0117 	add.w	r1, r7, #23
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4813      	ldr	r0, [pc, #76]	@ (8004344 <SIM_UART_ReadData+0x70>)
 80042f8:	f004 f977 	bl	80085ea <HAL_UART_Receive>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <SIM_UART_ReadData+0x42>
        {
            buf[pos++] = (char)ch;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	61ba      	str	r2, [r7, #24]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	7dfa      	ldrb	r2, [r7, #23]
 800430e:	701a      	strb	r2, [r3, #0]
            start = HAL_GetTick(); // 새 데이터 수신 시 전체 타임아웃 리셋
 8004310:	f000 fb86 	bl	8004a20 <HAL_GetTick>
 8004314:	61f8      	str	r0, [r7, #28]
    while ((HAL_GetTick() - start) < overall_timeout_ms && pos < buf_len - 1)
 8004316:	f000 fb83 	bl	8004a20 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d904      	bls.n	8004330 <SIM_UART_ReadData+0x5c>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3b01      	subs	r3, #1
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	429a      	cmp	r2, r3
 800432e:	d3de      	bcc.n	80042ee <SIM_UART_ReadData+0x1a>
        }
        // else: byte_timeout_ms 경과 시 재시도, overall_timeout_ms 만료 전까지
    }

    buf[pos] = '\0'; // 널종료
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	4413      	add	r3, r2
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
    return pos;
 800433a:	69bb      	ldr	r3, [r7, #24]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000794 	.word	0x20000794

08004348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <HAL_MspInit+0x4c>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	4a0f      	ldr	r2, [pc, #60]	@ (8004394 <HAL_MspInit+0x4c>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800435c:	6453      	str	r3, [r2, #68]	@ 0x44
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <HAL_MspInit+0x4c>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	4b09      	ldr	r3, [pc, #36]	@ (8004394 <HAL_MspInit+0x4c>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	4a08      	ldr	r2, [pc, #32]	@ (8004394 <HAL_MspInit+0x4c>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	@ 0x40
 800437a:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_MspInit+0x4c>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800

08004398 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043a0:	f107 0308 	add.w	r3, r7, #8
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a10      	ldr	r2, [pc, #64]	@ (80043f4 <HAL_RTC_MspInit+0x5c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d119      	bne.n	80043ec <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043b8:	2302      	movs	r3, #2
 80043ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80043bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043c0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fb4c 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80043d2:	f7fe fad3 	bl	800297c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80043d6:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <HAL_RTC_MspInit+0x60>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80043dc:	2200      	movs	r2, #0
 80043de:	2100      	movs	r1, #0
 80043e0:	2029      	movs	r0, #41	@ 0x29
 80043e2:	f000 fc28 	bl	8004c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80043e6:	2029      	movs	r0, #41	@ 0x29
 80043e8:	f000 fc41 	bl	8004c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40002800 	.word	0x40002800
 80043f8:	42470e3c 	.word	0x42470e3c

080043fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	@ 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a28      	ldr	r2, [pc, #160]	@ (80044bc <HAL_SD_MspInit+0xc0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d14a      	bne.n	80044b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	4b27      	ldr	r3, [pc, #156]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	4a26      	ldr	r2, [pc, #152]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 8004428:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800442c:	6453      	str	r3, [r2, #68]	@ 0x44
 800442e:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	4a1f      	ldr	r2, [pc, #124]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6313      	str	r3, [r2, #48]	@ 0x30
 800444a:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	4b19      	ldr	r3, [pc, #100]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	4a18      	ldr	r2, [pc, #96]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	6313      	str	r3, [r2, #48]	@ 0x30
 8004466:	4b16      	ldr	r3, [pc, #88]	@ (80044c0 <HAL_SD_MspInit+0xc4>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004472:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8004476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004478:	2302      	movs	r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004480:	2303      	movs	r3, #3
 8004482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004484:	230c      	movs	r3, #12
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4619      	mov	r1, r3
 800448e:	480d      	ldr	r0, [pc, #52]	@ (80044c4 <HAL_SD_MspInit+0xc8>)
 8004490:	f000 fc9a 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004494:	2304      	movs	r3, #4
 8004496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004498:	2302      	movs	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a0:	2303      	movs	r3, #3
 80044a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80044a4:	230c      	movs	r3, #12
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	4619      	mov	r1, r3
 80044ae:	4806      	ldr	r0, [pc, #24]	@ (80044c8 <HAL_SD_MspInit+0xcc>)
 80044b0:	f000 fc8a 	bl	8004dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80044b4:	bf00      	nop
 80044b6:	3728      	adds	r7, #40	@ 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40020800 	.word	0x40020800
 80044c8:	40020c00 	.word	0x40020c00

080044cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a19      	ldr	r2, [pc, #100]	@ (8004550 <HAL_SPI_MspInit+0x84>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d12b      	bne.n	8004546 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	4b18      	ldr	r3, [pc, #96]	@ (8004554 <HAL_SPI_MspInit+0x88>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	4a17      	ldr	r2, [pc, #92]	@ (8004554 <HAL_SPI_MspInit+0x88>)
 80044f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <HAL_SPI_MspInit+0x88>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b11      	ldr	r3, [pc, #68]	@ (8004554 <HAL_SPI_MspInit+0x88>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	4a10      	ldr	r2, [pc, #64]	@ (8004554 <HAL_SPI_MspInit+0x88>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6313      	str	r3, [r2, #48]	@ 0x30
 800451a:	4b0e      	ldr	r3, [pc, #56]	@ (8004554 <HAL_SPI_MspInit+0x88>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004526:	23e0      	movs	r3, #224	@ 0xe0
 8004528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452a:	2302      	movs	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004532:	2303      	movs	r3, #3
 8004534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004536:	2305      	movs	r3, #5
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453a:	f107 0314 	add.w	r3, r7, #20
 800453e:	4619      	mov	r1, r3
 8004540:	4805      	ldr	r0, [pc, #20]	@ (8004558 <HAL_SPI_MspInit+0x8c>)
 8004542:	f000 fc41 	bl	8004dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004546:	bf00      	nop
 8004548:	3728      	adds	r7, #40	@ 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40013000 	.word	0x40013000
 8004554:	40023800 	.word	0x40023800
 8004558:	40020000 	.word	0x40020000

0800455c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0e      	ldr	r2, [pc, #56]	@ (80045a4 <HAL_TIM_Base_MspInit+0x48>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d115      	bne.n	800459a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <HAL_TIM_Base_MspInit+0x4c>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	4a0c      	ldr	r2, [pc, #48]	@ (80045a8 <HAL_TIM_Base_MspInit+0x4c>)
 8004578:	f043 0320 	orr.w	r3, r3, #32
 800457c:	6413      	str	r3, [r2, #64]	@ 0x40
 800457e:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <HAL_TIM_Base_MspInit+0x4c>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	2037      	movs	r0, #55	@ 0x37
 8004590:	f000 fb51 	bl	8004c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004594:	2037      	movs	r0, #55	@ 0x37
 8004596:	f000 fb6a 	bl	8004c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40001400 	.word	0x40001400
 80045a8:	40023800 	.word	0x40023800

080045ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b090      	sub	sp, #64	@ 0x40
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a71      	ldr	r2, [pc, #452]	@ (8004790 <HAL_UART_MspInit+0x1e4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d12c      	bne.n	8004628 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d2:	4b70      	ldr	r3, [pc, #448]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80045d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ee:	4b69      	ldr	r3, [pc, #420]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	4a68      	ldr	r2, [pc, #416]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fa:	4b66      	ldr	r3, [pc, #408]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ESP_2_TX_Pin|ESP_2_RX_Pin;
 8004606:	2303      	movs	r3, #3
 8004608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460a:	2302      	movs	r3, #2
 800460c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004612:	2303      	movs	r3, #3
 8004614:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004616:	2308      	movs	r3, #8
 8004618:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800461e:	4619      	mov	r1, r3
 8004620:	485d      	ldr	r0, [pc, #372]	@ (8004798 <HAL_UART_MspInit+0x1ec>)
 8004622:	f000 fbd1 	bl	8004dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004626:	e0ae      	b.n	8004786 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a5b      	ldr	r2, [pc, #364]	@ (800479c <HAL_UART_MspInit+0x1f0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d135      	bne.n	800469e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	623b      	str	r3, [r7, #32]
 8004636:	4b57      	ldr	r3, [pc, #348]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	4a56      	ldr	r2, [pc, #344]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 800463c:	f043 0310 	orr.w	r3, r3, #16
 8004640:	6453      	str	r3, [r2, #68]	@ 0x44
 8004642:	4b54      	ldr	r3, [pc, #336]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	4b50      	ldr	r3, [pc, #320]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	4a4f      	ldr	r2, [pc, #316]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6313      	str	r3, [r2, #48]	@ 0x30
 800465e:	4b4d      	ldr	r3, [pc, #308]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800466a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004678:	2303      	movs	r3, #3
 800467a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800467c:	2307      	movs	r3, #7
 800467e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004680:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004684:	4619      	mov	r1, r3
 8004686:	4844      	ldr	r0, [pc, #272]	@ (8004798 <HAL_UART_MspInit+0x1ec>)
 8004688:	f000 fb9e 	bl	8004dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800468c:	2200      	movs	r2, #0
 800468e:	2100      	movs	r1, #0
 8004690:	2025      	movs	r0, #37	@ 0x25
 8004692:	f000 fad0 	bl	8004c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004696:	2025      	movs	r0, #37	@ 0x25
 8004698:	f000 fae9 	bl	8004c6e <HAL_NVIC_EnableIRQ>
}
 800469c:	e073      	b.n	8004786 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3f      	ldr	r2, [pc, #252]	@ (80047a0 <HAL_UART_MspInit+0x1f4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d134      	bne.n	8004712 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	4a38      	ldr	r2, [pc, #224]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80046b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b8:	4b36      	ldr	r3, [pc, #216]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	4b32      	ldr	r3, [pc, #200]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	4a31      	ldr	r2, [pc, #196]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80046d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 80046e0:	230c      	movs	r3, #12
 80046e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e4:	2302      	movs	r3, #2
 80046e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046f0:	2307      	movs	r3, #7
 80046f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046f8:	4619      	mov	r1, r3
 80046fa:	4827      	ldr	r0, [pc, #156]	@ (8004798 <HAL_UART_MspInit+0x1ec>)
 80046fc:	f000 fb64 	bl	8004dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	2026      	movs	r0, #38	@ 0x26
 8004706:	f000 fa96 	bl	8004c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800470a:	2026      	movs	r0, #38	@ 0x26
 800470c:	f000 faaf 	bl	8004c6e <HAL_NVIC_EnableIRQ>
}
 8004710:	e039      	b.n	8004786 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART3)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a23      	ldr	r2, [pc, #140]	@ (80047a4 <HAL_UART_MspInit+0x1f8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d134      	bne.n	8004786 <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART3_CLK_ENABLE();
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	4b1c      	ldr	r3, [pc, #112]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004726:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800472a:	6413      	str	r3, [r2, #64]	@ 0x40
 800472c:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	4a14      	ldr	r2, [pc, #80]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 8004742:	f043 0302 	orr.w	r3, r3, #2
 8004746:	6313      	str	r3, [r2, #48]	@ 0x30
 8004748:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <HAL_UART_MspInit+0x1e8>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8004754:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475a:	2302      	movs	r3, #2
 800475c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004762:	2303      	movs	r3, #3
 8004764:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004766:	2307      	movs	r3, #7
 8004768:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800476e:	4619      	mov	r1, r3
 8004770:	480d      	ldr	r0, [pc, #52]	@ (80047a8 <HAL_UART_MspInit+0x1fc>)
 8004772:	f000 fb29 	bl	8004dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	2027      	movs	r0, #39	@ 0x27
 800477c:	f000 fa5b 	bl	8004c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004780:	2027      	movs	r0, #39	@ 0x27
 8004782:	f000 fa74 	bl	8004c6e <HAL_NVIC_EnableIRQ>
}
 8004786:	bf00      	nop
 8004788:	3740      	adds	r7, #64	@ 0x40
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40004c00 	.word	0x40004c00
 8004794:	40023800 	.word	0x40023800
 8004798:	40020000 	.word	0x40020000
 800479c:	40011000 	.word	0x40011000
 80047a0:	40004400 	.word	0x40004400
 80047a4:	40004800 	.word	0x40004800
 80047a8:	40020400 	.word	0x40020400

080047ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <NMI_Handler+0x4>

080047b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <HardFault_Handler+0x4>

080047bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <MemManage_Handler+0x4>

080047c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047c8:	bf00      	nop
 80047ca:	e7fd      	b.n	80047c8 <BusFault_Handler+0x4>

080047cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047d0:	bf00      	nop
 80047d2:	e7fd      	b.n	80047d0 <UsageFault_Handler+0x4>

080047d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004802:	f000 f8f9 	bl	80049f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004810:	4802      	ldr	r0, [pc, #8]	@ (800481c <USART1_IRQHandler+0x10>)
 8004812:	f003 ffdd 	bl	80087d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000704 	.word	0x20000704

08004820 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004824:	4802      	ldr	r0, [pc, #8]	@ (8004830 <USART2_IRQHandler+0x10>)
 8004826:	f003 ffd3 	bl	80087d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	2000074c 	.word	0x2000074c

08004834 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004838:	4802      	ldr	r0, [pc, #8]	@ (8004844 <USART3_IRQHandler+0x10>)
 800483a:	f003 ffc9 	bl	80087d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000794 	.word	0x20000794

08004848 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800484c:	4802      	ldr	r0, [pc, #8]	@ (8004858 <RTC_Alarm_IRQHandler+0x10>)
 800484e:	f001 fc37 	bl	80060c0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000578 	.word	0x20000578

0800485c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004860:	4802      	ldr	r0, [pc, #8]	@ (800486c <TIM7_IRQHandler+0x10>)
 8004862:	f003 fb99 	bl	8007f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000674 	.word	0x20000674

08004870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004878:	4a14      	ldr	r2, [pc, #80]	@ (80048cc <_sbrk+0x5c>)
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <_sbrk+0x60>)
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004884:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <_sbrk+0x64>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800488c:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <_sbrk+0x64>)
 800488e:	4a12      	ldr	r2, [pc, #72]	@ (80048d8 <_sbrk+0x68>)
 8004890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004892:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <_sbrk+0x64>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d207      	bcs.n	80048b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048a0:	f008 f9d4 	bl	800cc4c <__errno>
 80048a4:	4603      	mov	r3, r0
 80048a6:	220c      	movs	r2, #12
 80048a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295
 80048ae:	e009      	b.n	80048c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048b0:	4b08      	ldr	r3, [pc, #32]	@ (80048d4 <_sbrk+0x64>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048b6:	4b07      	ldr	r3, [pc, #28]	@ (80048d4 <_sbrk+0x64>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	4a05      	ldr	r2, [pc, #20]	@ (80048d4 <_sbrk+0x64>)
 80048c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048c2:	68fb      	ldr	r3, [r7, #12]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20020000 	.word	0x20020000
 80048d0:	00000400 	.word	0x00000400
 80048d4:	2000086c 	.word	0x2000086c
 80048d8:	200009f8 	.word	0x200009f8

080048dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <SystemInit+0x20>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	4a05      	ldr	r2, [pc, #20]	@ (80048fc <SystemInit+0x20>)
 80048e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004938 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004904:	f7ff ffea 	bl	80048dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004908:	480c      	ldr	r0, [pc, #48]	@ (800493c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800490a:	490d      	ldr	r1, [pc, #52]	@ (8004940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800490c:	4a0d      	ldr	r2, [pc, #52]	@ (8004944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800490e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004910:	e002      	b.n	8004918 <LoopCopyDataInit>

08004912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004916:	3304      	adds	r3, #4

08004918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800491a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800491c:	d3f9      	bcc.n	8004912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800491e:	4a0a      	ldr	r2, [pc, #40]	@ (8004948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004920:	4c0a      	ldr	r4, [pc, #40]	@ (800494c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004924:	e001      	b.n	800492a <LoopFillZerobss>

08004926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004928:	3204      	adds	r2, #4

0800492a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800492a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800492c:	d3fb      	bcc.n	8004926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800492e:	f008 f993 	bl	800cc58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004932:	f7fd fc81 	bl	8002238 <main>
  bx  lr    
 8004936:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800493c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004940:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004944:	0800f640 	.word	0x0800f640
  ldr r2, =_sbss
 8004948:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800494c:	200009f8 	.word	0x200009f8

08004950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004950:	e7fe      	b.n	8004950 <ADC_IRQHandler>
	...

08004954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004958:	4b0e      	ldr	r3, [pc, #56]	@ (8004994 <HAL_Init+0x40>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0d      	ldr	r2, [pc, #52]	@ (8004994 <HAL_Init+0x40>)
 800495e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_Init+0x40>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <HAL_Init+0x40>)
 800496a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800496e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004970:	4b08      	ldr	r3, [pc, #32]	@ (8004994 <HAL_Init+0x40>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a07      	ldr	r2, [pc, #28]	@ (8004994 <HAL_Init+0x40>)
 8004976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800497a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800497c:	2003      	movs	r0, #3
 800497e:	f000 f94f 	bl	8004c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004982:	200f      	movs	r0, #15
 8004984:	f000 f808 	bl	8004998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004988:	f7ff fcde 	bl	8004348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023c00 	.word	0x40023c00

08004998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049a0:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <HAL_InitTick+0x54>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <HAL_InitTick+0x58>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f967 	bl	8004c8a <HAL_SYSTICK_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e00e      	b.n	80049e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b0f      	cmp	r3, #15
 80049ca:	d80a      	bhi.n	80049e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049cc:	2200      	movs	r2, #0
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295
 80049d4:	f000 f92f 	bl	8004c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049d8:	4a06      	ldr	r2, [pc, #24]	@ (80049f4 <HAL_InitTick+0x5c>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000004 	.word	0x20000004
 80049f0:	2000000c 	.word	0x2000000c
 80049f4:	20000008 	.word	0x20000008

080049f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_IncTick+0x20>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <HAL_IncTick+0x24>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4413      	add	r3, r2
 8004a08:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <HAL_IncTick+0x24>)
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	2000000c 	.word	0x2000000c
 8004a1c:	20000870 	.word	0x20000870

08004a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return uwTick;
 8004a24:	4b03      	ldr	r3, [pc, #12]	@ (8004a34 <HAL_GetTick+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000870 	.word	0x20000870

08004a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a40:	f7ff ffee 	bl	8004a20 <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d005      	beq.n	8004a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <HAL_Delay+0x44>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a5e:	bf00      	nop
 8004a60:	f7ff ffde 	bl	8004a20 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d8f7      	bhi.n	8004a60 <HAL_Delay+0x28>
  {
  }
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2000000c 	.word	0x2000000c

08004a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab2:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	60d3      	str	r3, [r2, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004acc:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	f003 0307 	and.w	r3, r3, #7
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	db0b      	blt.n	8004b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	f003 021f 	and.w	r2, r3, #31
 8004afc:	4907      	ldr	r1, [pc, #28]	@ (8004b1c <__NVIC_EnableIRQ+0x38>)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	2001      	movs	r0, #1
 8004b06:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	e000e100 	.word	0xe000e100

08004b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	6039      	str	r1, [r7, #0]
 8004b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	db0a      	blt.n	8004b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	490c      	ldr	r1, [pc, #48]	@ (8004b6c <__NVIC_SetPriority+0x4c>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	0112      	lsls	r2, r2, #4
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	440b      	add	r3, r1
 8004b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b48:	e00a      	b.n	8004b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4908      	ldr	r1, [pc, #32]	@ (8004b70 <__NVIC_SetPriority+0x50>)
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	3b04      	subs	r3, #4
 8004b58:	0112      	lsls	r2, r2, #4
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	761a      	strb	r2, [r3, #24]
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000e100 	.word	0xe000e100
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	@ 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f1c3 0307 	rsb	r3, r3, #7
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	bf28      	it	cs
 8004b92:	2304      	movcs	r3, #4
 8004b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	2b06      	cmp	r3, #6
 8004b9c:	d902      	bls.n	8004ba4 <NVIC_EncodePriority+0x30>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3b03      	subs	r3, #3
 8004ba2:	e000      	b.n	8004ba6 <NVIC_EncodePriority+0x32>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc6:	43d9      	mvns	r1, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bcc:	4313      	orrs	r3, r2
         );
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3724      	adds	r7, #36	@ 0x24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bec:	d301      	bcc.n	8004bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e00f      	b.n	8004c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004c1c <SysTick_Config+0x40>)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bfa:	210f      	movs	r1, #15
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	f7ff ff8e 	bl	8004b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <SysTick_Config+0x40>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c0a:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <SysTick_Config+0x40>)
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	e000e010 	.word	0xe000e010

08004c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff29 	bl	8004a80 <__NVIC_SetPriorityGrouping>
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b086      	sub	sp, #24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c48:	f7ff ff3e 	bl	8004ac8 <__NVIC_GetPriorityGrouping>
 8004c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	6978      	ldr	r0, [r7, #20]
 8004c54:	f7ff ff8e 	bl	8004b74 <NVIC_EncodePriority>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff5d 	bl	8004b20 <__NVIC_SetPriority>
}
 8004c66:	bf00      	nop
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	4603      	mov	r3, r0
 8004c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff31 	bl	8004ae4 <__NVIC_EnableIRQ>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ffa2 	bl	8004bdc <SysTick_Config>
 8004c98:	4603      	mov	r3, r0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cb0:	f7ff feb6 	bl	8004a20 <HAL_GetTick>
 8004cb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d008      	beq.n	8004cd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2280      	movs	r2, #128	@ 0x80
 8004cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e052      	b.n	8004d7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0216 	bic.w	r2, r2, #22
 8004ce2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <HAL_DMA_Abort+0x62>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0208 	bic.w	r2, r2, #8
 8004d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d24:	e013      	b.n	8004d4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d26:	f7ff fe7b 	bl	8004a20 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b05      	cmp	r3, #5
 8004d32:	d90c      	bls.n	8004d4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e015      	b.n	8004d7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e4      	bne.n	8004d26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d60:	223f      	movs	r2, #63	@ 0x3f
 8004d62:	409a      	lsls	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2280      	movs	r2, #128	@ 0x80
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e00c      	b.n	8004dba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2205      	movs	r2, #5
 8004da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	@ 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e16b      	b.n	80050bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004de4:	2201      	movs	r2, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	f040 815a 	bne.w	80050b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d005      	beq.n	8004e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d130      	bne.n	8004e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	2203      	movs	r2, #3
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e50:	2201      	movs	r2, #1
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 0201 	and.w	r2, r3, #1
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d017      	beq.n	8004eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	2203      	movs	r2, #3
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d123      	bne.n	8004f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	08da      	lsrs	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3208      	adds	r2, #8
 8004ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	220f      	movs	r2, #15
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	08da      	lsrs	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3208      	adds	r2, #8
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	2203      	movs	r2, #3
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0203 	and.w	r2, r3, #3
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80b4 	beq.w	80050b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	4b60      	ldr	r3, [pc, #384]	@ (80050d4 <HAL_GPIO_Init+0x30c>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f56:	4a5f      	ldr	r2, [pc, #380]	@ (80050d4 <HAL_GPIO_Init+0x30c>)
 8004f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80050d4 <HAL_GPIO_Init+0x30c>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80050d8 <HAL_GPIO_Init+0x310>)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	3302      	adds	r3, #2
 8004f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	220f      	movs	r2, #15
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a52      	ldr	r2, [pc, #328]	@ (80050dc <HAL_GPIO_Init+0x314>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02b      	beq.n	8004fee <HAL_GPIO_Init+0x226>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a51      	ldr	r2, [pc, #324]	@ (80050e0 <HAL_GPIO_Init+0x318>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d025      	beq.n	8004fea <HAL_GPIO_Init+0x222>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a50      	ldr	r2, [pc, #320]	@ (80050e4 <HAL_GPIO_Init+0x31c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_GPIO_Init+0x21e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80050e8 <HAL_GPIO_Init+0x320>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_Init+0x21a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80050ec <HAL_GPIO_Init+0x324>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_Init+0x216>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80050f0 <HAL_GPIO_Init+0x328>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_Init+0x212>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4c      	ldr	r2, [pc, #304]	@ (80050f4 <HAL_GPIO_Init+0x32c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_Init+0x20e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a4b      	ldr	r2, [pc, #300]	@ (80050f8 <HAL_GPIO_Init+0x330>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_Init+0x20a>
 8004fce:	2307      	movs	r3, #7
 8004fd0:	e00e      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	e00c      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fd6:	2306      	movs	r3, #6
 8004fd8:	e00a      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fda:	2305      	movs	r3, #5
 8004fdc:	e008      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e006      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e004      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e002      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_GPIO_Init+0x228>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	f002 0203 	and.w	r2, r2, #3
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	4093      	lsls	r3, r2
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005000:	4935      	ldr	r1, [pc, #212]	@ (80050d8 <HAL_GPIO_Init+0x310>)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	3302      	adds	r3, #2
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800500e:	4b3b      	ldr	r3, [pc, #236]	@ (80050fc <HAL_GPIO_Init+0x334>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005032:	4a32      	ldr	r2, [pc, #200]	@ (80050fc <HAL_GPIO_Init+0x334>)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005038:	4b30      	ldr	r3, [pc, #192]	@ (80050fc <HAL_GPIO_Init+0x334>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800505c:	4a27      	ldr	r2, [pc, #156]	@ (80050fc <HAL_GPIO_Init+0x334>)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005062:	4b26      	ldr	r3, [pc, #152]	@ (80050fc <HAL_GPIO_Init+0x334>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005086:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <HAL_GPIO_Init+0x334>)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800508c:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_GPIO_Init+0x334>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050b0:	4a12      	ldr	r2, [pc, #72]	@ (80050fc <HAL_GPIO_Init+0x334>)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	f67f ae90 	bls.w	8004de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	3724      	adds	r7, #36	@ 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40020000 	.word	0x40020000
 80050e0:	40020400 	.word	0x40020400
 80050e4:	40020800 	.word	0x40020800
 80050e8:	40020c00 	.word	0x40020c00
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40021400 	.word	0x40021400
 80050f4:	40021800 	.word	0x40021800
 80050f8:	40021c00 	.word	0x40021c00
 80050fc:	40013c00 	.word	0x40013c00

08005100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
 800510c:	4613      	mov	r3, r2
 800510e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005110:	787b      	ldrb	r3, [r7, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800511c:	e003      	b.n	8005126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800511e:	887b      	ldrh	r3, [r7, #2]
 8005120:	041a      	lsls	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	619a      	str	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e267      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d075      	beq.n	800523e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005152:	4b88      	ldr	r3, [pc, #544]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	2b04      	cmp	r3, #4
 800515c:	d00c      	beq.n	8005178 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800515e:	4b85      	ldr	r3, [pc, #532]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005166:	2b08      	cmp	r3, #8
 8005168:	d112      	bne.n	8005190 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800516a:	4b82      	ldr	r3, [pc, #520]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005176:	d10b      	bne.n	8005190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	4b7e      	ldr	r3, [pc, #504]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05b      	beq.n	800523c <HAL_RCC_OscConfig+0x108>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d157      	bne.n	800523c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e242      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005198:	d106      	bne.n	80051a8 <HAL_RCC_OscConfig+0x74>
 800519a:	4b76      	ldr	r3, [pc, #472]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a75      	ldr	r2, [pc, #468]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e01d      	b.n	80051e4 <HAL_RCC_OscConfig+0xb0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x98>
 80051b2:	4b70      	ldr	r3, [pc, #448]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a6f      	ldr	r2, [pc, #444]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b6d      	ldr	r3, [pc, #436]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6c      	ldr	r2, [pc, #432]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_OscConfig+0xb0>
 80051cc:	4b69      	ldr	r3, [pc, #420]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a68      	ldr	r2, [pc, #416]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	4b66      	ldr	r3, [pc, #408]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a65      	ldr	r2, [pc, #404]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80051de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d013      	beq.n	8005214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ec:	f7ff fc18 	bl	8004a20 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f4:	f7ff fc14 	bl	8004a20 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b64      	cmp	r3, #100	@ 0x64
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e207      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005206:	4b5b      	ldr	r3, [pc, #364]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0xc0>
 8005212:	e014      	b.n	800523e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7ff fc04 	bl	8004a20 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800521c:	f7ff fc00 	bl	8004a20 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	@ 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e1f3      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522e:	4b51      	ldr	r3, [pc, #324]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0xe8>
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d063      	beq.n	8005312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800524a:	4b4a      	ldr	r3, [pc, #296]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005256:	4b47      	ldr	r3, [pc, #284]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800525e:	2b08      	cmp	r3, #8
 8005260:	d11c      	bne.n	800529c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005262:	4b44      	ldr	r3, [pc, #272]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d116      	bne.n	800529c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526e:	4b41      	ldr	r3, [pc, #260]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_RCC_OscConfig+0x152>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e1c7      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	4b3b      	ldr	r3, [pc, #236]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4937      	ldr	r1, [pc, #220]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529a:	e03a      	b.n	8005312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a4:	4b34      	ldr	r3, [pc, #208]	@ (8005378 <HAL_RCC_OscConfig+0x244>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7ff fbb9 	bl	8004a20 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b2:	f7ff fbb5 	bl	8004a20 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e1a8      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b28      	ldr	r3, [pc, #160]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4925      	ldr	r1, [pc, #148]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]
 80052e4:	e015      	b.n	8005312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052e6:	4b24      	ldr	r3, [pc, #144]	@ (8005378 <HAL_RCC_OscConfig+0x244>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7ff fb98 	bl	8004a20 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f4:	f7ff fb94 	bl	8004a20 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e187      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005306:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d036      	beq.n	800538c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005326:	4b15      	ldr	r3, [pc, #84]	@ (800537c <HAL_RCC_OscConfig+0x248>)
 8005328:	2201      	movs	r2, #1
 800532a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7ff fb78 	bl	8004a20 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005334:	f7ff fb74 	bl	8004a20 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e167      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_RCC_OscConfig+0x240>)
 8005348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x200>
 8005352:	e01b      	b.n	800538c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005354:	4b09      	ldr	r3, [pc, #36]	@ (800537c <HAL_RCC_OscConfig+0x248>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535a:	f7ff fb61 	bl	8004a20 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005360:	e00e      	b.n	8005380 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005362:	f7ff fb5d 	bl	8004a20 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d907      	bls.n	8005380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e150      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
 8005374:	40023800 	.word	0x40023800
 8005378:	42470000 	.word	0x42470000
 800537c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b88      	ldr	r3, [pc, #544]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ea      	bne.n	8005362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8097 	beq.w	80054c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539a:	2300      	movs	r3, #0
 800539c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539e:	4b81      	ldr	r3, [pc, #516]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10f      	bne.n	80053ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	4b7d      	ldr	r3, [pc, #500]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	4a7c      	ldr	r2, [pc, #496]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ba:	4b7a      	ldr	r3, [pc, #488]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	4b77      	ldr	r3, [pc, #476]	@ (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d118      	bne.n	8005408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053d6:	4b74      	ldr	r3, [pc, #464]	@ (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a73      	ldr	r2, [pc, #460]	@ (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e2:	f7ff fb1d 	bl	8004a20 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7ff fb19 	bl	8004a20 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e10c      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fc:	4b6a      	ldr	r3, [pc, #424]	@ (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d106      	bne.n	800541e <HAL_RCC_OscConfig+0x2ea>
 8005410:	4b64      	ldr	r3, [pc, #400]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005414:	4a63      	ldr	r2, [pc, #396]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	6713      	str	r3, [r2, #112]	@ 0x70
 800541c:	e01c      	b.n	8005458 <HAL_RCC_OscConfig+0x324>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b05      	cmp	r3, #5
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x30c>
 8005426:	4b5f      	ldr	r3, [pc, #380]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	4a5e      	ldr	r2, [pc, #376]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	6713      	str	r3, [r2, #112]	@ 0x70
 8005432:	4b5c      	ldr	r3, [pc, #368]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005436:	4a5b      	ldr	r2, [pc, #364]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6713      	str	r3, [r2, #112]	@ 0x70
 800543e:	e00b      	b.n	8005458 <HAL_RCC_OscConfig+0x324>
 8005440:	4b58      	ldr	r3, [pc, #352]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005444:	4a57      	ldr	r2, [pc, #348]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	6713      	str	r3, [r2, #112]	@ 0x70
 800544c:	4b55      	ldr	r3, [pc, #340]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005450:	4a54      	ldr	r2, [pc, #336]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005452:	f023 0304 	bic.w	r3, r3, #4
 8005456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d015      	beq.n	800548c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7ff fade 	bl	8004a20 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005466:	e00a      	b.n	800547e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005468:	f7ff fada 	bl	8004a20 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e0cb      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547e:	4b49      	ldr	r3, [pc, #292]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0ee      	beq.n	8005468 <HAL_RCC_OscConfig+0x334>
 800548a:	e014      	b.n	80054b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548c:	f7ff fac8 	bl	8004a20 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005492:	e00a      	b.n	80054aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7ff fac4 	bl	8004a20 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0b5      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054aa:	4b3e      	ldr	r3, [pc, #248]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1ee      	bne.n	8005494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054bc:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	4a38      	ldr	r2, [pc, #224]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a1 	beq.w	8005614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054d2:	4b34      	ldr	r3, [pc, #208]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d05c      	beq.n	8005598 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d141      	bne.n	800556a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	4b31      	ldr	r3, [pc, #196]	@ (80055ac <HAL_RCC_OscConfig+0x478>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ec:	f7ff fa98 	bl	8004a20 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f4:	f7ff fa94 	bl	8004a20 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e087      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	4b27      	ldr	r3, [pc, #156]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	3b01      	subs	r3, #1
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	491b      	ldr	r1, [pc, #108]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800553c:	4b1b      	ldr	r3, [pc, #108]	@ (80055ac <HAL_RCC_OscConfig+0x478>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005542:	f7ff fa6d 	bl	8004a20 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554a:	f7ff fa69 	bl	8004a20 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e05c      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555c:	4b11      	ldr	r3, [pc, #68]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x416>
 8005568:	e054      	b.n	8005614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556a:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <HAL_RCC_OscConfig+0x478>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005570:	f7ff fa56 	bl	8004a20 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005578:	f7ff fa52 	bl	8004a20 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e045      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558a:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_RCC_OscConfig+0x470>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x444>
 8005596:	e03d      	b.n	8005614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e038      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	40007000 	.word	0x40007000
 80055ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005620 <HAL_RCC_OscConfig+0x4ec>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d028      	beq.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d121      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d11a      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d111      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800

08005624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0cc      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005638:	4b68      	ldr	r3, [pc, #416]	@ (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d90c      	bls.n	8005660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005646:	4b65      	ldr	r3, [pc, #404]	@ (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b63      	ldr	r3, [pc, #396]	@ (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0b8      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005678:	4b59      	ldr	r3, [pc, #356]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a58      	ldr	r2, [pc, #352]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005682:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005690:	4b53      	ldr	r3, [pc, #332]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4a52      	ldr	r2, [pc, #328]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800569a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800569c:	4b50      	ldr	r3, [pc, #320]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	494d      	ldr	r1, [pc, #308]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d044      	beq.n	8005744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b47      	ldr	r3, [pc, #284]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d119      	bne.n	8005702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e07f      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d003      	beq.n	80056e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d107      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e2:	4b3f      	ldr	r3, [pc, #252]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e06f      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f2:	4b3b      	ldr	r3, [pc, #236]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e067      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005702:	4b37      	ldr	r3, [pc, #220]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f023 0203 	bic.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4934      	ldr	r1, [pc, #208]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	4313      	orrs	r3, r2
 8005712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005714:	f7ff f984 	bl	8004a20 <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	e00a      	b.n	8005732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800571c:	f7ff f980 	bl	8004a20 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e04f      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005732:	4b2b      	ldr	r3, [pc, #172]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 020c 	and.w	r2, r3, #12
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	429a      	cmp	r2, r3
 8005742:	d1eb      	bne.n	800571c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005744:	4b25      	ldr	r3, [pc, #148]	@ (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d20c      	bcs.n	800576c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b22      	ldr	r3, [pc, #136]	@ (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b20      	ldr	r3, [pc, #128]	@ (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e032      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005778:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4916      	ldr	r1, [pc, #88]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005796:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	490e      	ldr	r1, [pc, #56]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057aa:	f000 f821 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 80057ae:	4602      	mov	r2, r0
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	490a      	ldr	r1, [pc, #40]	@ (80057e4 <HAL_RCC_ClockConfig+0x1c0>)
 80057bc:	5ccb      	ldrb	r3, [r1, r3]
 80057be:	fa22 f303 	lsr.w	r3, r2, r3
 80057c2:	4a09      	ldr	r2, [pc, #36]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c4>)
 80057c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057c6:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <HAL_RCC_ClockConfig+0x1c8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff f8e4 	bl	8004998 <HAL_InitTick>

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40023c00 	.word	0x40023c00
 80057e0:	40023800 	.word	0x40023800
 80057e4:	0800f018 	.word	0x0800f018
 80057e8:	20000004 	.word	0x20000004
 80057ec:	20000008 	.word	0x20000008

080057f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f4:	b094      	sub	sp, #80	@ 0x50
 80057f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005808:	4b79      	ldr	r3, [pc, #484]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b08      	cmp	r3, #8
 8005812:	d00d      	beq.n	8005830 <HAL_RCC_GetSysClockFreq+0x40>
 8005814:	2b08      	cmp	r3, #8
 8005816:	f200 80e1 	bhi.w	80059dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0x34>
 800581e:	2b04      	cmp	r3, #4
 8005820:	d003      	beq.n	800582a <HAL_RCC_GetSysClockFreq+0x3a>
 8005822:	e0db      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005824:	4b73      	ldr	r3, [pc, #460]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005826:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005828:	e0db      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800582a:	4b73      	ldr	r3, [pc, #460]	@ (80059f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800582c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800582e:	e0d8      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005830:	4b6f      	ldr	r3, [pc, #444]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005838:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800583a:	4b6d      	ldr	r3, [pc, #436]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d063      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005846:	4b6a      	ldr	r3, [pc, #424]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	2200      	movs	r2, #0
 800584e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005850:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
 800585e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	f04f 0000 	mov.w	r0, #0
 800586a:	f04f 0100 	mov.w	r1, #0
 800586e:	0159      	lsls	r1, r3, #5
 8005870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005874:	0150      	lsls	r0, r2, #5
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4621      	mov	r1, r4
 800587c:	1a51      	subs	r1, r2, r1
 800587e:	6139      	str	r1, [r7, #16]
 8005880:	4629      	mov	r1, r5
 8005882:	eb63 0301 	sbc.w	r3, r3, r1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005894:	4659      	mov	r1, fp
 8005896:	018b      	lsls	r3, r1, #6
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800589e:	4651      	mov	r1, sl
 80058a0:	018a      	lsls	r2, r1, #6
 80058a2:	4651      	mov	r1, sl
 80058a4:	ebb2 0801 	subs.w	r8, r2, r1
 80058a8:	4659      	mov	r1, fp
 80058aa:	eb63 0901 	sbc.w	r9, r3, r1
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058c2:	4690      	mov	r8, r2
 80058c4:	4699      	mov	r9, r3
 80058c6:	4623      	mov	r3, r4
 80058c8:	eb18 0303 	adds.w	r3, r8, r3
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	462b      	mov	r3, r5
 80058d0:	eb49 0303 	adc.w	r3, r9, r3
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058e2:	4629      	mov	r1, r5
 80058e4:	024b      	lsls	r3, r1, #9
 80058e6:	4621      	mov	r1, r4
 80058e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058ec:	4621      	mov	r1, r4
 80058ee:	024a      	lsls	r2, r1, #9
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f6:	2200      	movs	r2, #0
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005900:	f7fa fcce 	bl	80002a0 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4613      	mov	r3, r2
 800590a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590c:	e058      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590e:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	099b      	lsrs	r3, r3, #6
 8005914:	2200      	movs	r2, #0
 8005916:	4618      	mov	r0, r3
 8005918:	4611      	mov	r1, r2
 800591a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
 8005924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	f04f 0000 	mov.w	r0, #0
 8005930:	f04f 0100 	mov.w	r1, #0
 8005934:	0159      	lsls	r1, r3, #5
 8005936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800593a:	0150      	lsls	r0, r2, #5
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4641      	mov	r1, r8
 8005942:	ebb2 0a01 	subs.w	sl, r2, r1
 8005946:	4649      	mov	r1, r9
 8005948:	eb63 0b01 	sbc.w	fp, r3, r1
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800595c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005960:	ebb2 040a 	subs.w	r4, r2, sl
 8005964:	eb63 050b 	sbc.w	r5, r3, fp
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	00eb      	lsls	r3, r5, #3
 8005972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005976:	00e2      	lsls	r2, r4, #3
 8005978:	4614      	mov	r4, r2
 800597a:	461d      	mov	r5, r3
 800597c:	4643      	mov	r3, r8
 800597e:	18e3      	adds	r3, r4, r3
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	464b      	mov	r3, r9
 8005984:	eb45 0303 	adc.w	r3, r5, r3
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005996:	4629      	mov	r1, r5
 8005998:	028b      	lsls	r3, r1, #10
 800599a:	4621      	mov	r1, r4
 800599c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059a0:	4621      	mov	r1, r4
 80059a2:	028a      	lsls	r2, r1, #10
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059aa:	2200      	movs	r2, #0
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	61fa      	str	r2, [r7, #28]
 80059b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059b4:	f7fa fc74 	bl	80002a0 <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4613      	mov	r3, r2
 80059be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059c0:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	3301      	adds	r3, #1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059da:	e002      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059dc:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80059de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3750      	adds	r7, #80	@ 0x50
 80059e8:	46bd      	mov	sp, r7
 80059ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800
 80059f4:	00f42400 	.word	0x00f42400
 80059f8:	007a1200 	.word	0x007a1200

080059fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a00:	4b03      	ldr	r3, [pc, #12]	@ (8005a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a02:	681b      	ldr	r3, [r3, #0]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	20000004 	.word	0x20000004

08005a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a18:	f7ff fff0 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	0a9b      	lsrs	r3, r3, #10
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4903      	ldr	r1, [pc, #12]	@ (8005a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40023800 	.word	0x40023800
 8005a38:	0800f028 	.word	0x0800f028

08005a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a40:	f7ff ffdc 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	0b5b      	lsrs	r3, r3, #13
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4903      	ldr	r1, [pc, #12]	@ (8005a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	0800f028 	.word	0x0800f028

08005a64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d035      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a8c:	4b62      	ldr	r3, [pc, #392]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a92:	f7fe ffc5 	bl	8004a20 <HAL_GetTick>
 8005a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a9a:	f7fe ffc1 	bl	8004a20 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e0b0      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aac:	4b5b      	ldr	r3, [pc, #364]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f0      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	019a      	lsls	r2, r3, #6
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	071b      	lsls	r3, r3, #28
 8005ac4:	4955      	ldr	r1, [pc, #340]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005acc:	4b52      	ldr	r3, [pc, #328]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ad2:	f7fe ffa5 	bl	8004a20 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ad8:	e008      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ada:	f7fe ffa1 	bl	8004a20 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e090      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aec:	4b4b      	ldr	r3, [pc, #300]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8083 	beq.w	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4b44      	ldr	r3, [pc, #272]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	4a43      	ldr	r2, [pc, #268]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b16:	4b41      	ldr	r3, [pc, #260]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b22:	4b3f      	ldr	r3, [pc, #252]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3e      	ldr	r2, [pc, #248]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b2e:	f7fe ff77 	bl	8004a20 <HAL_GetTick>
 8005b32:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b36:	f7fe ff73 	bl	8004a20 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e062      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b48:	4b35      	ldr	r3, [pc, #212]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f0      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b54:	4b31      	ldr	r3, [pc, #196]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d02f      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d028      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b72:	4b2a      	ldr	r3, [pc, #168]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b7c:	4b29      	ldr	r3, [pc, #164]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b82:	4b28      	ldr	r3, [pc, #160]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b88:	4a24      	ldr	r2, [pc, #144]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b8e:	4b23      	ldr	r3, [pc, #140]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d114      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fe ff41 	bl	8004a20 <HAL_GetTick>
 8005b9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fe ff3d 	bl	8004a20 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e02a      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb8:	4b18      	ldr	r3, [pc, #96]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ee      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bd0:	d10d      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005bd2:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be6:	490d      	ldr	r1, [pc, #52]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	608b      	str	r3, [r1, #8]
 8005bec:	e005      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bee:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005bf8:	6093      	str	r3, [r2, #8]
 8005bfa:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c06:	4905      	ldr	r1, [pc, #20]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	42470068 	.word	0x42470068
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40007000 	.word	0x40007000
 8005c24:	42470e40 	.word	0x42470e40

08005c28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e073      	b.n	8005d22 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7f5b      	ldrb	r3, [r3, #29]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fe fba4 	bl	8004398 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d055      	beq.n	8005d10 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	22ca      	movs	r2, #202	@ 0xca
 8005c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2253      	movs	r2, #83	@ 0x53
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fa99 	bl	80061ac <RTC_EnterInitMode>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d12c      	bne.n	8005cde <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c96:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68d2      	ldr	r2, [r2, #12]
 8005cbe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6919      	ldr	r1, [r3, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	041a      	lsls	r2, r3, #16
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 faa0 	bl	800621a <RTC_ExitInitMode>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d110      	bne.n	8005d06 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	22ff      	movs	r2, #255	@ 0xff
 8005d0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d0e:	e001      	b.n	8005d14 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d2a:	b590      	push	{r4, r7, lr}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	7f1b      	ldrb	r3, [r3, #28]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_RTC_SetTime+0x1c>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e087      	b.n	8005e56 <HAL_RTC_SetTime+0x12c>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d126      	bne.n	8005da6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fa77 	bl	8006264 <RTC_ByteToBcd2>
 8005d76:	4603      	mov	r3, r0
 8005d78:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fa70 	bl	8006264 <RTC_ByteToBcd2>
 8005d84:	4603      	mov	r3, r0
 8005d86:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d88:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	789b      	ldrb	r3, [r3, #2]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fa68 	bl	8006264 <RTC_ByteToBcd2>
 8005d94:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d96:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	78db      	ldrb	r3, [r3, #3]
 8005d9e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e018      	b.n	8005dd8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2200      	movs	r2, #0
 8005db8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dc6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005dcc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	22ca      	movs	r2, #202	@ 0xca
 8005dde:	625a      	str	r2, [r3, #36]	@ 0x24
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2253      	movs	r2, #83	@ 0x53
 8005de6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f9df 	bl	80061ac <RTC_EnterInitMode>
 8005dee:	4603      	mov	r3, r0
 8005df0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005df2:	7cfb      	ldrb	r3, [r7, #19]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d120      	bne.n	8005e3a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005e02:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005e06:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f9f2 	bl	800621a <RTC_ExitInitMode>
 8005e36:	4603      	mov	r3, r0
 8005e38:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e3a:	7cfb      	ldrb	r3, [r7, #19]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	22ff      	movs	r2, #255	@ 0xff
 8005e4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]

  return status;
 8005e54:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd90      	pop	{r4, r7, pc}

08005e5e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005e90:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005e94:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	0d9b      	lsrs	r3, r3, #22
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d11a      	bne.n	8005f10 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f9de 	bl	80062a0 <RTC_Bcd2ToByte>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 f9d5 	bl	80062a0 <RTC_Bcd2ToByte>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	789b      	ldrb	r3, [r3, #2]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f9cc 	bl	80062a0 <RTC_Bcd2ToByte>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f1a:	b590      	push	{r4, r7, lr}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	7f1b      	ldrb	r3, [r3, #28]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_RTC_SetDate+0x1c>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e071      	b.n	800601a <HAL_RTC_SetDate+0x100>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10e      	bne.n	8005f66 <HAL_RTC_SetDate+0x4c>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	f003 0310 	and.w	r3, r3, #16
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	f023 0310 	bic.w	r3, r3, #16
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	330a      	adds	r3, #10
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d11c      	bne.n	8005fa6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	78db      	ldrb	r3, [r3, #3]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f977 	bl	8006264 <RTC_ByteToBcd2>
 8005f76:	4603      	mov	r3, r0
 8005f78:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 f970 	bl	8006264 <RTC_ByteToBcd2>
 8005f84:	4603      	mov	r3, r0
 8005f86:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f88:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	789b      	ldrb	r3, [r3, #2]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f968 	bl	8006264 <RTC_ByteToBcd2>
 8005f94:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f96:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e00e      	b.n	8005fc4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	78db      	ldrb	r3, [r3, #3]
 8005faa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fb2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005fb8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	22ca      	movs	r2, #202	@ 0xca
 8005fca:	625a      	str	r2, [r3, #36]	@ 0x24
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2253      	movs	r2, #83	@ 0x53
 8005fd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f8e9 	bl	80061ac <RTC_EnterInitMode>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fde:	7cfb      	ldrb	r3, [r7, #19]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005fee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ff2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f910 	bl	800621a <RTC_ExitInitMode>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ffe:	7cfb      	ldrb	r3, [r7, #19]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	22ff      	movs	r2, #255	@ 0xff
 8006010:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]

  return status;
 8006018:	7cfb      	ldrb	r3, [r7, #19]
}
 800601a:	4618      	mov	r0, r3
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd90      	pop	{r4, r7, pc}

08006022 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800603c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006040:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	0c1b      	lsrs	r3, r3, #16
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006064:	b2da      	uxtb	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	0b5b      	lsrs	r3, r3, #13
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d11a      	bne.n	80060b6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	78db      	ldrb	r3, [r3, #3]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f90b 	bl	80062a0 <RTC_Bcd2ToByte>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f902 	bl	80062a0 <RTC_Bcd2ToByte>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	789b      	ldrb	r3, [r3, #2]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f8f9 	bl	80062a0 <RTC_Bcd2ToByte>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80060c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006148 <HAL_RTC_AlarmIRQHandler+0x88>)
 80060ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80060ce:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d012      	beq.n	8006104 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80060fc:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f824 	bl	800614c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d012      	beq.n	8006138 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006130:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f904 	bl	8006340 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	775a      	strb	r2, [r3, #29]
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40013c00 	.word	0x40013c00

0800614c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <HAL_RTC_WaitForSynchro+0x48>)
 8006172:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006174:	f7fe fc54 	bl	8004a20 <HAL_GetTick>
 8006178:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800617a:	e009      	b.n	8006190 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800617c:	f7fe fc50 	bl	8004a20 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800618a:	d901      	bls.n	8006190 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e007      	b.n	80061a0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0ee      	beq.n	800617c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	00017f5f 	.word	0x00017f5f

080061ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d122      	bne.n	8006210 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061da:	f7fe fc21 	bl	8004a20 <HAL_GetTick>
 80061de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061e0:	e00c      	b.n	80061fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061e2:	f7fe fc1d 	bl	8004a20 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061f0:	d904      	bls.n	80061fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2204      	movs	r2, #4
 80061f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <RTC_EnterInitMode+0x64>
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d1e8      	bne.n	80061e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006234:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff ff8b 	bl	8006160 <HAL_RTC_WaitForSynchro>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2204      	movs	r2, #4
 8006254:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800625a:	7bfb      	ldrb	r3, [r7, #15]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006272:	e005      	b.n	8006280 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	3b0a      	subs	r3, #10
 800627e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	2b09      	cmp	r3, #9
 8006284:	d8f6      	bhi.n	8006274 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	b2da      	uxtb	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	4313      	orrs	r3, r2
 8006292:	b2db      	uxtb	r3, r3
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	4413      	add	r3, r2
 80062ce:	b2db      	uxtb	r3, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3350      	adds	r3, #80	@ 0x50
 80062f2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3350      	adds	r3, #80	@ 0x50
 8006324:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e022      	b.n	80063ac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fe f83f 	bl	80043fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2203      	movs	r2, #3
 8006382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f814 	bl	80063b4 <HAL_SD_InitCard>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e00a      	b.n	80063ac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063b4:	b5b0      	push	{r4, r5, r7, lr}
 80063b6:	b08e      	sub	sp, #56	@ 0x38
 80063b8:	af04      	add	r7, sp, #16
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80063d0:	2376      	movs	r3, #118	@ 0x76
 80063d2:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681d      	ldr	r5, [r3, #0]
 80063d8:	466c      	mov	r4, sp
 80063da:	f107 0318 	add.w	r3, r7, #24
 80063de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063ec:	4628      	mov	r0, r5
 80063ee:	f003 f951 	bl	8009694 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80063f2:	4b2a      	ldr	r3, [pc, #168]	@ (800649c <HAL_SD_InitCard+0xe8>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f003 f992 	bl	8009726 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006402:	4b26      	ldr	r3, [pc, #152]	@ (800649c <HAL_SD_InitCard+0xe8>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006408:	2002      	movs	r0, #2
 800640a:	f7fe fb15 	bl	8004a38 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fe7a 	bl	8007108 <SD_PowerON>
 8006414:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e02e      	b.n	8006492 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fd99 	bl	8006f6c <SD_InitCard>
 800643a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e01b      	b.n	8006492 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006462:	4618      	mov	r0, r3
 8006464:	f003 f9f1 	bl	800984a <SDMMC_CmdBlockLength>
 8006468:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00f      	beq.n	8006490 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a0a      	ldr	r2, [pc, #40]	@ (80064a0 <HAL_SD_InitCard+0xec>)
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3728      	adds	r7, #40	@ 0x28
 8006496:	46bd      	mov	sp, r7
 8006498:	bdb0      	pop	{r4, r5, r7, pc}
 800649a:	bf00      	nop
 800649c:	422580a0 	.word	0x422580a0
 80064a0:	004005ff 	.word	0x004005ff

080064a4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b092      	sub	sp, #72	@ 0x48
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80064b2:	f7fe fab5 	bl	8004a20 <HAL_GetTick>
 80064b6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d107      	bne.n	80064d6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e1c5      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b01      	cmp	r3, #1
 80064e0:	f040 81b8 	bne.w	8006854 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	441a      	add	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d907      	bls.n	8006508 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e1ac      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2203      	movs	r2, #3
 800650c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2200      	movs	r2, #0
 8006516:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651c:	2b01      	cmp	r3, #1
 800651e:	d002      	beq.n	8006526 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	025b      	lsls	r3, r3, #9
 8006524:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006526:	f04f 33ff 	mov.w	r3, #4294967295
 800652a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	025b      	lsls	r3, r3, #9
 8006530:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006532:	2390      	movs	r3, #144	@ 0x90
 8006534:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006536:	2302      	movs	r3, #2
 8006538:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800653a:	2300      	movs	r3, #0
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800653e:	2301      	movs	r3, #1
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f107 0214 	add.w	r2, r7, #20
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f003 f950 	bl	80097f2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d90a      	bls.n	800656e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2202      	movs	r2, #2
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006564:	4618      	mov	r0, r3
 8006566:	f003 f9b4 	bl	80098d2 <SDMMC_CmdReadMultiBlock>
 800656a:	6478      	str	r0, [r7, #68]	@ 0x44
 800656c:	e009      	b.n	8006582 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800657a:	4618      	mov	r0, r3
 800657c:	f003 f987 	bl	800988e <SDMMC_CmdReadSingleBlock>
 8006580:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006584:	2b00      	cmp	r3, #0
 8006586:	d012      	beq.n	80065ae <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7e      	ldr	r2, [pc, #504]	@ (8006788 <HAL_SD_ReadBlocks+0x2e4>)
 800658e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006596:	431a      	orrs	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e159      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80065b2:	e061      	b.n	8006678 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d03c      	beq.n	800663c <HAL_SD_ReadBlocks+0x198>
 80065c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d039      	beq.n	800663c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80065c8:	2300      	movs	r3, #0
 80065ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80065cc:	e033      	b.n	8006636 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f003 f889 	bl	80096ea <SDIO_ReadFIFO>
 80065d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80065da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	3301      	adds	r3, #1
 80065e6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ea:	3b01      	subs	r3, #1
 80065ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	0a1b      	lsrs	r3, r3, #8
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fa:	3301      	adds	r3, #1
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006600:	3b01      	subs	r3, #1
 8006602:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006606:	0c1b      	lsrs	r3, r3, #16
 8006608:	b2da      	uxtb	r2, r3
 800660a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	3301      	adds	r3, #1
 8006612:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006616:	3b01      	subs	r3, #1
 8006618:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	0e1b      	lsrs	r3, r3, #24
 800661e:	b2da      	uxtb	r2, r3
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	3301      	adds	r3, #1
 8006628:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800662a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800662c:	3b01      	subs	r3, #1
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8006630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006632:	3301      	adds	r3, #1
 8006634:	643b      	str	r3, [r7, #64]	@ 0x40
 8006636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006638:	2b07      	cmp	r3, #7
 800663a:	d9c8      	bls.n	80065ce <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800663c:	f7fe f9f0 	bl	8004a20 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006648:	429a      	cmp	r2, r3
 800664a:	d902      	bls.n	8006652 <HAL_SD_ReadBlocks+0x1ae>
 800664c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800664e:	2b00      	cmp	r3, #0
 8006650:	d112      	bne.n	8006678 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4c      	ldr	r2, [pc, #304]	@ (8006788 <HAL_SD_ReadBlocks+0x2e4>)
 8006658:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e0f4      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800667e:	f240 332a 	movw	r3, #810	@ 0x32a
 8006682:	4013      	ands	r3, r2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d095      	beq.n	80065b4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d022      	beq.n	80066dc <HAL_SD_ReadBlocks+0x238>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d91f      	bls.n	80066dc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d01b      	beq.n	80066dc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f003 f979 	bl	80099a0 <SDMMC_CmdStopTransfer>
 80066ae:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80066b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d012      	beq.n	80066dc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a33      	ldr	r2, [pc, #204]	@ (8006788 <HAL_SD_ReadBlocks+0x2e4>)
 80066bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0c2      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_SD_ReadBlocks+0x254>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a22      	ldr	r2, [pc, #136]	@ (8006788 <HAL_SD_ReadBlocks+0x2e4>)
 80066fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006704:	f043 0208 	orr.w	r2, r3, #8
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e0a1      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d012      	beq.n	8006752 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <HAL_SD_ReadBlocks+0x2e4>)
 8006732:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006738:	f043 0202 	orr.w	r2, r3, #2
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e087      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d064      	beq.n	800682a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a08      	ldr	r2, [pc, #32]	@ (8006788 <HAL_SD_ReadBlocks+0x2e4>)
 8006766:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e06d      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
 8006786:	bf00      	nop
 8006788:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f002 ffaa 	bl	80096ea <SDIO_ReadFIFO>
 8006796:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	b2da      	uxtb	r2, r3
 800679c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80067a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a2:	3301      	adds	r3, #1
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80067a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a8:	3b01      	subs	r3, #1
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ae:	0a1b      	lsrs	r3, r3, #8
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80067b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b8:	3301      	adds	r3, #1
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	3b01      	subs	r3, #1
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80067c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80067cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ce:	3301      	adds	r3, #1
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80067d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d4:	3b01      	subs	r3, #1
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	0e1b      	lsrs	r3, r3, #24
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80067e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e4:	3301      	adds	r3, #1
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80067e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ea:	3b01      	subs	r3, #1
 80067ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80067ee:	f7fe f917 	bl	8004a20 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d902      	bls.n	8006804 <HAL_SD_ReadBlocks+0x360>
 80067fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006800:	2b00      	cmp	r3, #0
 8006802:	d112      	bne.n	800682a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a18      	ldr	r2, [pc, #96]	@ (800686c <HAL_SD_ReadBlocks+0x3c8>)
 800680a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e01b      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_SD_ReadBlocks+0x39a>
 8006838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1a6      	bne.n	800678c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006846:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e006      	b.n	8006862 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006858:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
  }
}
 8006862:	4618      	mov	r0, r3
 8006864:	3748      	adds	r7, #72	@ 0x48
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	004005ff 	.word	0x004005ff

08006870 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b092      	sub	sp, #72	@ 0x48
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800687e:	f7fe f8cf 	bl	8004a20 <HAL_GetTick>
 8006882:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e16d      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	f040 8160 	bne.w	8006b70 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	441a      	add	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d907      	bls.n	80068d4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e154      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2203      	movs	r2, #3
 80068d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2200      	movs	r2, #0
 80068e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d002      	beq.n	80068f2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	025b      	lsls	r3, r3, #9
 80068f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	025b      	lsls	r3, r3, #9
 80068fc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80068fe:	2390      	movs	r3, #144	@ 0x90
 8006900:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006902:	2300      	movs	r3, #0
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006906:	2300      	movs	r3, #0
 8006908:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800690a:	2301      	movs	r3, #1
 800690c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f107 0218 	add.w	r2, r7, #24
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f002 ff6a 	bl	80097f2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d90a      	bls.n	800693a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006930:	4618      	mov	r0, r3
 8006932:	f003 f812 	bl	800995a <SDMMC_CmdWriteMultiBlock>
 8006936:	6478      	str	r0, [r7, #68]	@ 0x44
 8006938:	e009      	b.n	800694e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2210      	movs	r2, #16
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006946:	4618      	mov	r0, r3
 8006948:	f002 ffe5 	bl	8009916 <SDMMC_CmdWriteSingleBlock>
 800694c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800694e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006950:	2b00      	cmp	r3, #0
 8006952:	d012      	beq.n	800697a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a8b      	ldr	r2, [pc, #556]	@ (8006b88 <HAL_SD_WriteBlocks+0x318>)
 800695a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006962:	431a      	orrs	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e101      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800697e:	e065      	b.n	8006a4c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d040      	beq.n	8006a10 <HAL_SD_WriteBlocks+0x1a0>
 800698e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d03d      	beq.n	8006a10 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006994:	2300      	movs	r3, #0
 8006996:	643b      	str	r3, [r7, #64]	@ 0x40
 8006998:	e037      	b.n	8006a0a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800699a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	3301      	adds	r3, #1
 80069a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80069a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a8:	3b01      	subs	r3, #1
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80069ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	021a      	lsls	r2, r3, #8
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80069b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ba:	3301      	adds	r3, #1
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80069be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c0:	3b01      	subs	r3, #1
 80069c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80069c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	041a      	lsls	r2, r3, #16
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80069d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d2:	3301      	adds	r3, #1
 80069d4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80069d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d8:	3b01      	subs	r3, #1
 80069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80069dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	061a      	lsls	r2, r3, #24
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80069e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ea:	3301      	adds	r3, #1
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80069ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f0:	3b01      	subs	r3, #1
 80069f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f107 0214 	add.w	r2, r7, #20
 80069fc:	4611      	mov	r1, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f002 fe80 	bl	8009704 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a06:	3301      	adds	r3, #1
 8006a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a0c:	2b07      	cmp	r3, #7
 8006a0e:	d9c4      	bls.n	800699a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a10:	f7fe f806 	bl	8004a20 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d902      	bls.n	8006a26 <HAL_SD_WriteBlocks+0x1b6>
 8006a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d112      	bne.n	8006a4c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a57      	ldr	r2, [pc, #348]	@ (8006b88 <HAL_SD_WriteBlocks+0x318>)
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e098      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a52:	f240 331a 	movw	r3, #794	@ 0x31a
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d091      	beq.n	8006980 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d022      	beq.n	8006ab0 <HAL_SD_WriteBlocks+0x240>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d91f      	bls.n	8006ab0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d01b      	beq.n	8006ab0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 ff8f 	bl	80099a0 <SDMMC_CmdStopTransfer>
 8006a82:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d012      	beq.n	8006ab0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8006b88 <HAL_SD_WriteBlocks+0x318>)
 8006a90:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e066      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_SD_WriteBlocks+0x25c>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d012      	beq.n	8006af2 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b88 <HAL_SD_WriteBlocks+0x318>)
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	f043 0208 	orr.w	r2, r3, #8
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e045      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d012      	beq.n	8006b26 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a20      	ldr	r2, [pc, #128]	@ (8006b88 <HAL_SD_WriteBlocks+0x318>)
 8006b06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0c:	f043 0202 	orr.w	r2, r3, #2
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e02b      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d012      	beq.n	8006b5a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a13      	ldr	r2, [pc, #76]	@ (8006b88 <HAL_SD_WriteBlocks+0x318>)
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	f043 0210 	orr.w	r2, r3, #16
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e011      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006b62:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e006      	b.n	8006b7e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
  }
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3748      	adds	r7, #72	@ 0x48
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	004005ff 	.word	0x004005ff

08006b8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9a:	0f9b      	lsrs	r3, r3, #30
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ba6:	0e9b      	lsrs	r3, r3, #26
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb8:	0e1b      	lsrs	r3, r3, #24
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd6:	0a1b      	lsrs	r3, r3, #8
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bec:	0d1b      	lsrs	r3, r3, #20
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c0a:	0bdb      	lsrs	r3, r3, #15
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c1c:	0b9b      	lsrs	r3, r3, #14
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c2e:	0b5b      	lsrs	r3, r3, #13
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c40:	0b1b      	lsrs	r3, r3, #12
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2200      	movs	r2, #0
 8006c52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d163      	bne.n	8006d24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c60:	009a      	lsls	r2, r3, #2
 8006c62:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006c66:	4013      	ands	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006c6c:	0f92      	lsrs	r2, r2, #30
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c78:	0edb      	lsrs	r3, r3, #27
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c8a:	0e1b      	lsrs	r3, r3, #24
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c9c:	0d5b      	lsrs	r3, r3, #21
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cae:	0c9b      	lsrs	r3, r3, #18
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cc0:	0bdb      	lsrs	r3, r3, #15
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	7e1b      	ldrb	r3, [r3, #24]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006cee:	fb03 f202 	mul.w	r2, r3, r2
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	7a1b      	ldrb	r3, [r3, #8]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	2201      	movs	r2, #1
 8006d02:	409a      	lsls	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006d10:	0a52      	lsrs	r2, r2, #9
 8006d12:	fb03 f202 	mul.w	r2, r3, r2
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d20:	661a      	str	r2, [r3, #96]	@ 0x60
 8006d22:	e031      	b.n	8006d88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d11d      	bne.n	8006d68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3a:	0c1b      	lsrs	r3, r3, #16
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	3301      	adds	r3, #1
 8006d48:	029a      	lsls	r2, r3, #10
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d5c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	661a      	str	r2, [r3, #96]	@ 0x60
 8006d66:	e00f      	b.n	8006d88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a58      	ldr	r2, [pc, #352]	@ (8006ed0 <HAL_SD_GetCardCSD+0x344>)
 8006d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e09d      	b.n	8006ec4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d8c:	0b9b      	lsrs	r3, r3, #14
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d9e:	09db      	lsrs	r3, r3, #7
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc0:	0fdb      	lsrs	r3, r3, #31
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dcc:	0f5b      	lsrs	r3, r3, #29
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	0e9b      	lsrs	r3, r3, #26
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df0:	0d9b      	lsrs	r3, r3, #22
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e02:	0d5b      	lsrs	r3, r3, #21
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e32:	0bdb      	lsrs	r3, r3, #15
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e46:	0b9b      	lsrs	r3, r3, #14
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5a:	0b5b      	lsrs	r3, r3, #13
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6e:	0b1b      	lsrs	r3, r3, #12
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e82:	0a9b      	lsrs	r3, r3, #10
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	004005ff 	.word	0x004005ff

08006ed4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f970 	bl	8007224 <SD_SendStatus>
 8006f44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	0a5b      	lsrs	r3, r3, #9
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f62:	693b      	ldr	r3, [r7, #16]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f6c:	b5b0      	push	{r4, r5, r7, lr}
 8006f6e:	b094      	sub	sp, #80	@ 0x50
 8006f70:	af04      	add	r7, sp, #16
 8006f72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006f74:	2301      	movs	r3, #1
 8006f76:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f002 fbe0 	bl	8009742 <SDIO_GetPowerState>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d102      	bne.n	8006f8e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f88:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006f8c:	e0b8      	b.n	8007100 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d02f      	beq.n	8006ff6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 fdc7 	bl	8009b2e <SDMMC_CmdSendCID>
 8006fa0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <SD_InitCard+0x40>
    {
      return errorstate;
 8006fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006faa:	e0a9      	b.n	8007100 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f002 fc0a 	bl	80097cc <SDIO_GetResponse>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2104      	movs	r1, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f002 fc01 	bl	80097cc <SDIO_GetResponse>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2108      	movs	r1, #8
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 fbf8 	bl	80097cc <SDIO_GetResponse>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	210c      	movs	r1, #12
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f002 fbef 	bl	80097cc <SDIO_GetResponse>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d00d      	beq.n	800701a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f107 020e 	add.w	r2, r7, #14
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f002 fdcd 	bl	8009ba8 <SDMMC_CmdSetRelAdd>
 800700e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <SD_InitCard+0xae>
    {
      return errorstate;
 8007016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007018:	e072      	b.n	8007100 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701e:	2b03      	cmp	r3, #3
 8007020:	d036      	beq.n	8007090 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007022:	89fb      	ldrh	r3, [r7, #14]
 8007024:	461a      	mov	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f002 fd97 	bl	8009b6a <SDMMC_CmdSendCSD>
 800703c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800703e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007046:	e05b      	b.n	8007100 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f002 fbbc 	bl	80097cc <SDIO_GetResponse>
 8007054:	4602      	mov	r2, r0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2104      	movs	r1, #4
 8007060:	4618      	mov	r0, r3
 8007062:	f002 fbb3 	bl	80097cc <SDIO_GetResponse>
 8007066:	4602      	mov	r2, r0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2108      	movs	r1, #8
 8007072:	4618      	mov	r0, r3
 8007074:	f002 fbaa 	bl	80097cc <SDIO_GetResponse>
 8007078:	4602      	mov	r2, r0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	210c      	movs	r1, #12
 8007084:	4618      	mov	r0, r3
 8007086:	f002 fba1 	bl	80097cc <SDIO_GetResponse>
 800708a:	4602      	mov	r2, r0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2104      	movs	r1, #4
 8007096:	4618      	mov	r0, r3
 8007098:	f002 fb98 	bl	80097cc <SDIO_GetResponse>
 800709c:	4603      	mov	r3, r0
 800709e:	0d1a      	lsrs	r2, r3, #20
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80070a4:	f107 0310 	add.w	r3, r7, #16
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff fd6e 	bl	8006b8c <HAL_SD_GetCardCSD>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80070ba:	e021      	b.n	8007100 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6819      	ldr	r1, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	2200      	movs	r2, #0
 80070c8:	461c      	mov	r4, r3
 80070ca:	4615      	mov	r5, r2
 80070cc:	4622      	mov	r2, r4
 80070ce:	462b      	mov	r3, r5
 80070d0:	4608      	mov	r0, r1
 80070d2:	f002 fc87 	bl	80099e4 <SDMMC_CmdSelDesel>
 80070d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <SD_InitCard+0x176>
  {
    return errorstate;
 80070de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e0:	e00e      	b.n	8007100 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	466c      	mov	r4, sp
 80070ea:	f103 0210 	add.w	r2, r3, #16
 80070ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80070f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070f4:	3304      	adds	r3, #4
 80070f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070f8:	4628      	mov	r0, r5
 80070fa:	f002 facb 	bl	8009694 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3740      	adds	r7, #64	@ 0x40
 8007104:	46bd      	mov	sp, r7
 8007106:	bdb0      	pop	{r4, r5, r7, pc}

08007108 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f002 fc82 	bl	8009a2a <SDMMC_CmdGoIdleState>
 8007126:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <SD_PowerON+0x2a>
  {
    return errorstate;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	e072      	b.n	8007218 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f002 fc95 	bl	8009a66 <SDMMC_CmdOperCond>
 800713c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00d      	beq.n	8007160 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f002 fc6b 	bl	8009a2a <SDMMC_CmdGoIdleState>
 8007154:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <SD_PowerON+0x5e>
    {
      return errorstate;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	e05b      	b.n	8007218 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800716a:	2b01      	cmp	r3, #1
 800716c:	d137      	bne.n	80071de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f002 fc95 	bl	8009aa4 <SDMMC_CmdAppCommand>
 800717a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d02d      	beq.n	80071de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007182:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007186:	e047      	b.n	8007218 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f002 fc88 	bl	8009aa4 <SDMMC_CmdAppCommand>
 8007194:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	e03b      	b.n	8007218 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	491e      	ldr	r1, [pc, #120]	@ (8007220 <SD_PowerON+0x118>)
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 fc9e 	bl	8009ae8 <SDMMC_CmdAppOperCommand>
 80071ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071b4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80071b8:	e02e      	b.n	8007218 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f002 fb03 	bl	80097cc <SDIO_GetResponse>
 80071c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	0fdb      	lsrs	r3, r3, #31
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <SD_PowerON+0xcc>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <SD_PowerON+0xce>
 80071d4:	2300      	movs	r3, #0
 80071d6:	613b      	str	r3, [r7, #16]

    count++;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3301      	adds	r3, #1
 80071dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d802      	bhi.n	80071ee <SD_PowerON+0xe6>
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0cc      	beq.n	8007188 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d902      	bls.n	80071fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071fc:	e00c      	b.n	8007218 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	645a      	str	r2, [r3, #68]	@ 0x44
 800720e:	e002      	b.n	8007216 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	c1100000 	.word	0xc1100000

08007224 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007234:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007238:	e018      	b.n	800726c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f002 fccf 	bl	8009bea <SDMMC_CmdSendStatus>
 800724c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	e009      	b.n	800726c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f002 fab4 	bl	80097cc <SDIO_GetResponse>
 8007264:	4602      	mov	r2, r0
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e07b      	b.n	800737e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728a:	2b00      	cmp	r3, #0
 800728c:	d108      	bne.n	80072a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007296:	d009      	beq.n	80072ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	61da      	str	r2, [r3, #28]
 800729e:	e005      	b.n	80072ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fd f900 	bl	80044cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007330:	ea42 0103 	orr.w	r1, r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	f003 0104 	and.w	r1, r3, #4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007352:	f003 0210 	and.w	r2, r3, #16
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800736c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007396:	f7fd fb43 	bl	8004a20 <HAL_GetTick>
 800739a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
 80073ae:	e12a      	b.n	8007606 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <HAL_SPI_Transmit+0x36>
 80073b6:	88fb      	ldrh	r3, [r7, #6]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e122      	b.n	8007606 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_SPI_Transmit+0x48>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e11b      	b.n	8007606 <HAL_SPI_Transmit+0x280>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2203      	movs	r2, #3
 80073da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800741c:	d10f      	bne.n	800743e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800742c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800743c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007448:	2b40      	cmp	r3, #64	@ 0x40
 800744a:	d007      	beq.n	800745c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800745a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007464:	d152      	bne.n	800750c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <HAL_SPI_Transmit+0xee>
 800746e:	8b7b      	ldrh	r3, [r7, #26]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d145      	bne.n	8007500 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007478:	881a      	ldrh	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007484:	1c9a      	adds	r2, r3, #2
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007498:	e032      	b.n	8007500 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d112      	bne.n	80074ce <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	881a      	ldrh	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b8:	1c9a      	adds	r2, r3, #2
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80074cc:	e018      	b.n	8007500 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074ce:	f7fd faa7 	bl	8004a20 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d803      	bhi.n	80074e6 <HAL_SPI_Transmit+0x160>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d102      	bne.n	80074ec <HAL_SPI_Transmit+0x166>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e082      	b.n	8007606 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1c7      	bne.n	800749a <HAL_SPI_Transmit+0x114>
 800750a:	e053      	b.n	80075b4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_Transmit+0x194>
 8007514:	8b7b      	ldrh	r3, [r7, #26]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d147      	bne.n	80075aa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007540:	e033      	b.n	80075aa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d113      	bne.n	8007578 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007576:	e018      	b.n	80075aa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007578:	f7fd fa52 	bl	8004a20 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d803      	bhi.n	8007590 <HAL_SPI_Transmit+0x20a>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d102      	bne.n	8007596 <HAL_SPI_Transmit+0x210>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e02d      	b.n	8007606 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1c6      	bne.n	8007542 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fbd9 	bl	8007d70 <SPI_EndRxTxTransaction>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2220      	movs	r2, #32
 80075c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e000      	b.n	8007606 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007604:	2300      	movs	r3, #0
  }
}
 8007606:	4618      	mov	r0, r3
 8007608:	3720      	adds	r7, #32
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b088      	sub	sp, #32
 8007612:	af02      	add	r7, sp, #8
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	603b      	str	r3, [r7, #0]
 800761a:	4613      	mov	r3, r2
 800761c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b01      	cmp	r3, #1
 8007628:	d001      	beq.n	800762e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800762a:	2302      	movs	r3, #2
 800762c:	e104      	b.n	8007838 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_SPI_Receive+0x2c>
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e0fc      	b.n	8007838 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007646:	d112      	bne.n	800766e <HAL_SPI_Receive+0x60>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10e      	bne.n	800766e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2204      	movs	r2, #4
 8007654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	4613      	mov	r3, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 f8eb 	bl	8007840 <HAL_SPI_TransmitReceive>
 800766a:	4603      	mov	r3, r0
 800766c:	e0e4      	b.n	8007838 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800766e:	f7fd f9d7 	bl	8004a20 <HAL_GetTick>
 8007672:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_SPI_Receive+0x74>
 800767e:	2302      	movs	r3, #2
 8007680:	e0da      	b.n	8007838 <HAL_SPI_Receive+0x22a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2204      	movs	r2, #4
 800768e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	88fa      	ldrh	r2, [r7, #6]
 80076a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076d0:	d10f      	bne.n	80076f2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fc:	2b40      	cmp	r3, #64	@ 0x40
 80076fe:	d007      	beq.n	8007710 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800770e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d170      	bne.n	80077fa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007718:	e035      	b.n	8007786 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b01      	cmp	r3, #1
 8007726:	d115      	bne.n	8007754 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f103 020c 	add.w	r2, r3, #12
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	7812      	ldrb	r2, [r2, #0]
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007752:	e018      	b.n	8007786 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007754:	f7fd f964 	bl	8004a20 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d803      	bhi.n	800776c <HAL_SPI_Receive+0x15e>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	d102      	bne.n	8007772 <HAL_SPI_Receive+0x164>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e058      	b.n	8007838 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1c4      	bne.n	800771a <HAL_SPI_Receive+0x10c>
 8007790:	e038      	b.n	8007804 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b01      	cmp	r3, #1
 800779e:	d113      	bne.n	80077c8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077aa:	b292      	uxth	r2, r2
 80077ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	1c9a      	adds	r2, r3, #2
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077c6:	e018      	b.n	80077fa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c8:	f7fd f92a 	bl	8004a20 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d803      	bhi.n	80077e0 <HAL_SPI_Receive+0x1d2>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d102      	bne.n	80077e6 <HAL_SPI_Receive+0x1d8>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e01e      	b.n	8007838 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1c6      	bne.n	8007792 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fa4b 	bl	8007ca4 <SPI_EndRxTransaction>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007836:	2300      	movs	r3, #0
  }
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08a      	sub	sp, #40	@ 0x28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800784e:	2301      	movs	r3, #1
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007852:	f7fd f8e5 	bl	8004a20 <HAL_GetTick>
 8007856:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800785e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007866:	887b      	ldrh	r3, [r7, #2]
 8007868:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800786a:	7ffb      	ldrb	r3, [r7, #31]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d00c      	beq.n	800788a <HAL_SPI_TransmitReceive+0x4a>
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007876:	d106      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x46>
 8007880:	7ffb      	ldrb	r3, [r7, #31]
 8007882:	2b04      	cmp	r3, #4
 8007884:	d001      	beq.n	800788a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007886:	2302      	movs	r3, #2
 8007888:	e17f      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_SPI_TransmitReceive+0x5c>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_SPI_TransmitReceive+0x5c>
 8007896:	887b      	ldrh	r3, [r7, #2]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e174      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x6e>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e16d      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x34a>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d003      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2205      	movs	r2, #5
 80078c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	887a      	ldrh	r2, [r7, #2]
 80078da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	887a      	ldrh	r2, [r7, #2]
 80078e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	887a      	ldrh	r2, [r7, #2]
 80078ec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	887a      	ldrh	r2, [r7, #2]
 80078f2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790a:	2b40      	cmp	r3, #64	@ 0x40
 800790c:	d007      	beq.n	800791e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800791c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007926:	d17e      	bne.n	8007a26 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_SPI_TransmitReceive+0xf6>
 8007930:	8afb      	ldrh	r3, [r7, #22]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d16c      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793a:	881a      	ldrh	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	1c9a      	adds	r2, r3, #2
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800795a:	e059      	b.n	8007a10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b02      	cmp	r3, #2
 8007968:	d11b      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x162>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d016      	beq.n	80079a2 <HAL_SPI_TransmitReceive+0x162>
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	2b01      	cmp	r3, #1
 8007978:	d113      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797e:	881a      	ldrh	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798a:	1c9a      	adds	r2, r3, #2
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d119      	bne.n	80079e4 <HAL_SPI_TransmitReceive+0x1a4>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d014      	beq.n	80079e4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	b292      	uxth	r2, r2
 80079c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079cc:	1c9a      	adds	r2, r3, #2
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079e0:	2301      	movs	r3, #1
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079e4:	f7fd f81c 	bl	8004a20 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d80d      	bhi.n	8007a10 <HAL_SPI_TransmitReceive+0x1d0>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d009      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e0bc      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1a0      	bne.n	800795c <HAL_SPI_TransmitReceive+0x11c>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d19b      	bne.n	800795c <HAL_SPI_TransmitReceive+0x11c>
 8007a24:	e082      	b.n	8007b2c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0x1f4>
 8007a2e:	8afb      	ldrh	r3, [r7, #22]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d171      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	7812      	ldrb	r2, [r2, #0]
 8007a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a5a:	e05d      	b.n	8007b18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d11c      	bne.n	8007aa4 <HAL_SPI_TransmitReceive+0x264>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d017      	beq.n	8007aa4 <HAL_SPI_TransmitReceive+0x264>
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d114      	bne.n	8007aa4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	7812      	ldrb	r2, [r2, #0]
 8007a86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d119      	bne.n	8007ae6 <HAL_SPI_TransmitReceive+0x2a6>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d014      	beq.n	8007ae6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ae6:	f7fc ff9b 	bl	8004a20 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d803      	bhi.n	8007afe <HAL_SPI_TransmitReceive+0x2be>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d102      	bne.n	8007b04 <HAL_SPI_TransmitReceive+0x2c4>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d109      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e038      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d19c      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x21c>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d197      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b2c:	6a3a      	ldr	r2, [r7, #32]
 8007b2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f91d 	bl	8007d70 <SPI_EndRxTxTransaction>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e01d      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007b88:	2300      	movs	r3, #0
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3728      	adds	r7, #40	@ 0x28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ba4:	f7fc ff3c 	bl	8004a20 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bb4:	f7fc ff34 	bl	8004a20 <HAL_GetTick>
 8007bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bba:	4b39      	ldr	r3, [pc, #228]	@ (8007ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	015b      	lsls	r3, r3, #5
 8007bc0:	0d1b      	lsrs	r3, r3, #20
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
 8007bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bca:	e055      	b.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd2:	d051      	beq.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bd4:	f7fc ff24 	bl	8004a20 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d902      	bls.n	8007bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d13d      	bne.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c02:	d111      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c0c:	d004      	beq.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c16:	d107      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c30:	d10f      	bne.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e018      	b.n	8007c98 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e002      	b.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4013      	ands	r3, r2
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d19a      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000004 	.word	0x20000004

08007ca4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cb8:	d111      	bne.n	8007cde <SPI_EndRxTransaction+0x3a>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cc2:	d004      	beq.n	8007cce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ccc:	d107      	bne.n	8007cde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ce6:	d12a      	bne.n	8007d3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cf0:	d012      	beq.n	8007d18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2180      	movs	r1, #128	@ 0x80
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7ff ff49 	bl	8007b94 <SPI_WaitFlagStateUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02d      	beq.n	8007d64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0c:	f043 0220 	orr.w	r2, r3, #32
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e026      	b.n	8007d66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2101      	movs	r1, #1
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff ff36 	bl	8007b94 <SPI_WaitFlagStateUntilTimeout>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01a      	beq.n	8007d64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d32:	f043 0220 	orr.w	r2, r3, #32
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e013      	b.n	8007d66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2200      	movs	r2, #0
 8007d46:	2101      	movs	r1, #1
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff ff23 	bl	8007b94 <SPI_WaitFlagStateUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d58:	f043 0220 	orr.w	r2, r3, #32
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e000      	b.n	8007d66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2201      	movs	r2, #1
 8007d84:	2102      	movs	r1, #2
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff ff04 	bl	8007b94 <SPI_WaitFlagStateUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d96:	f043 0220 	orr.w	r2, r3, #32
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e032      	b.n	8007e08 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007da2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <SPI_EndRxTxTransaction+0xa0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e14 <SPI_EndRxTxTransaction+0xa4>)
 8007da8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dac:	0d5b      	lsrs	r3, r3, #21
 8007dae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
 8007db6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dc0:	d112      	bne.n	8007de8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2180      	movs	r1, #128	@ 0x80
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff fee1 	bl	8007b94 <SPI_WaitFlagStateUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d016      	beq.n	8007e06 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ddc:	f043 0220 	orr.w	r2, r3, #32
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e00f      	b.n	8007e08 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dfe:	2b80      	cmp	r3, #128	@ 0x80
 8007e00:	d0f2      	beq.n	8007de8 <SPI_EndRxTxTransaction+0x78>
 8007e02:	e000      	b.n	8007e06 <SPI_EndRxTxTransaction+0x96>
        break;
 8007e04:	bf00      	nop
  }

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000004 	.word	0x20000004
 8007e14:	165e9f81 	.word	0x165e9f81

08007e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e041      	b.n	8007eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fc fb8c 	bl	800455c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3304      	adds	r3, #4
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f000 f9b6 	bl	80081c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d001      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e04e      	b.n	8007f6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a23      	ldr	r2, [pc, #140]	@ (8007f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d022      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007efa:	d01d      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a1f      	ldr	r2, [pc, #124]	@ (8007f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d018      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d013      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1c      	ldr	r2, [pc, #112]	@ (8007f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d00e      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d009      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a19      	ldr	r2, [pc, #100]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a18      	ldr	r2, [pc, #96]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d111      	bne.n	8007f5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d010      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 0201 	orr.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5a:	e007      	b.n	8007f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40001800 	.word	0x40001800

08007f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d020      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01b      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0202 	mvn.w	r2, #2
 8007fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f8d2 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 8007fe8:	e005      	b.n	8007ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8c4 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f8d5 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d020      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01b      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0204 	mvn.w	r2, #4
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8ac 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f89e 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f8af 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d020      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01b      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0208 	mvn.w	r2, #8
 8008064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f886 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f878 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f889 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0210 	mvn.w	r2, #16
 80080b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2208      	movs	r2, #8
 80080b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f860 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f852 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f863 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0201 	mvn.w	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fa fbb2 	bl	8002868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00c      	beq.n	8008128 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f97c 	bl	8008420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00c      	beq.n	800814c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f834 	bl	80081b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0220 	mvn.w	r2, #32
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f94e 	bl	800840c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a43      	ldr	r2, [pc, #268]	@ (80082e8 <TIM_Base_SetConfig+0x120>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d013      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e6:	d00f      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a40      	ldr	r2, [pc, #256]	@ (80082ec <TIM_Base_SetConfig+0x124>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00b      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a3f      	ldr	r2, [pc, #252]	@ (80082f0 <TIM_Base_SetConfig+0x128>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d007      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <TIM_Base_SetConfig+0x12c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a3d      	ldr	r2, [pc, #244]	@ (80082f8 <TIM_Base_SetConfig+0x130>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d108      	bne.n	800821a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800820e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a32      	ldr	r2, [pc, #200]	@ (80082e8 <TIM_Base_SetConfig+0x120>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d02b      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008228:	d027      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a2f      	ldr	r2, [pc, #188]	@ (80082ec <TIM_Base_SetConfig+0x124>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d023      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a2e      	ldr	r2, [pc, #184]	@ (80082f0 <TIM_Base_SetConfig+0x128>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d01f      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a2d      	ldr	r2, [pc, #180]	@ (80082f4 <TIM_Base_SetConfig+0x12c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01b      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a2c      	ldr	r2, [pc, #176]	@ (80082f8 <TIM_Base_SetConfig+0x130>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d017      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2b      	ldr	r2, [pc, #172]	@ (80082fc <TIM_Base_SetConfig+0x134>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d013      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2a      	ldr	r2, [pc, #168]	@ (8008300 <TIM_Base_SetConfig+0x138>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00f      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a29      	ldr	r2, [pc, #164]	@ (8008304 <TIM_Base_SetConfig+0x13c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00b      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a28      	ldr	r2, [pc, #160]	@ (8008308 <TIM_Base_SetConfig+0x140>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d007      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a27      	ldr	r2, [pc, #156]	@ (800830c <TIM_Base_SetConfig+0x144>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d003      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a26      	ldr	r2, [pc, #152]	@ (8008310 <TIM_Base_SetConfig+0x148>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d108      	bne.n	800828c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	4313      	orrs	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a0e      	ldr	r2, [pc, #56]	@ (80082e8 <TIM_Base_SetConfig+0x120>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_Base_SetConfig+0xf2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a10      	ldr	r2, [pc, #64]	@ (80082f8 <TIM_Base_SetConfig+0x130>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d103      	bne.n	80082c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f043 0204 	orr.w	r2, r3, #4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	601a      	str	r2, [r3, #0]
}
 80082da:	bf00      	nop
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40000800 	.word	0x40000800
 80082f4:	40000c00 	.word	0x40000c00
 80082f8:	40010400 	.word	0x40010400
 80082fc:	40014000 	.word	0x40014000
 8008300:	40014400 	.word	0x40014400
 8008304:	40014800 	.word	0x40014800
 8008308:	40001800 	.word	0x40001800
 800830c:	40001c00 	.word	0x40001c00
 8008310:	40002000 	.word	0x40002000

08008314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008328:	2302      	movs	r3, #2
 800832a:	e05a      	b.n	80083e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a21      	ldr	r2, [pc, #132]	@ (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d022      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008378:	d01d      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1d      	ldr	r2, [pc, #116]	@ (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d018      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1b      	ldr	r2, [pc, #108]	@ (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1a      	ldr	r2, [pc, #104]	@ (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00e      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a18      	ldr	r2, [pc, #96]	@ (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d009      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a17      	ldr	r2, [pc, #92]	@ (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d004      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a15      	ldr	r2, [pc, #84]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d10c      	bne.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40010000 	.word	0x40010000
 80083f4:	40000400 	.word	0x40000400
 80083f8:	40000800 	.word	0x40000800
 80083fc:	40000c00 	.word	0x40000c00
 8008400:	40010400 	.word	0x40010400
 8008404:	40014000 	.word	0x40014000
 8008408:	40001800 	.word	0x40001800

0800840c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e042      	b.n	80084cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d106      	bne.n	8008460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fc f8a6 	bl	80045ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2224      	movs	r2, #36	@ 0x24
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fe97 	bl	80091ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800848c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695a      	ldr	r2, [r3, #20]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800849c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	@ 0x28
 80084d8:	af02      	add	r7, sp, #8
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	4613      	mov	r3, r2
 80084e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d175      	bne.n	80085e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <HAL_UART_Transmit+0x2c>
 80084fa:	88fb      	ldrh	r3, [r7, #6]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e06e      	b.n	80085e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2221      	movs	r2, #33	@ 0x21
 800850e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008512:	f7fc fa85 	bl	8004a20 <HAL_GetTick>
 8008516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	88fa      	ldrh	r2, [r7, #6]
 800851c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	88fa      	ldrh	r2, [r7, #6]
 8008522:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852c:	d108      	bne.n	8008540 <HAL_UART_Transmit+0x6c>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	e003      	b.n	8008548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008548:	e02e      	b.n	80085a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2200      	movs	r2, #0
 8008552:	2180      	movs	r1, #128	@ 0x80
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fbfb 	bl	8008d50 <UART_WaitOnFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2220      	movs	r2, #32
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e03a      	b.n	80085e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	3302      	adds	r3, #2
 8008586:	61bb      	str	r3, [r7, #24]
 8008588:	e007      	b.n	800859a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	3301      	adds	r3, #1
 8008598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3b01      	subs	r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1cb      	bne.n	800854a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2200      	movs	r2, #0
 80085ba:	2140      	movs	r1, #64	@ 0x40
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 fbc7 	bl	8008d50 <UART_WaitOnFlagUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e006      	b.n	80085e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	e000      	b.n	80085e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b08a      	sub	sp, #40	@ 0x28
 80085ee:	af02      	add	r7, sp, #8
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b20      	cmp	r3, #32
 8008608:	f040 8081 	bne.w	800870e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <HAL_UART_Receive+0x2e>
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e079      	b.n	8008710 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2222      	movs	r2, #34	@ 0x22
 8008626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008630:	f7fc f9f6 	bl	8004a20 <HAL_GetTick>
 8008634:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	88fa      	ldrh	r2, [r7, #6]
 8008640:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864a:	d108      	bne.n	800865e <HAL_UART_Receive+0x74>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008654:	2300      	movs	r3, #0
 8008656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e003      	b.n	8008666 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008666:	e047      	b.n	80086f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2200      	movs	r2, #0
 8008670:	2120      	movs	r1, #32
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fb6c 	bl	8008d50 <UART_WaitOnFlagUntilTimeout>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e042      	b.n	8008710 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10c      	bne.n	80086aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869c:	b29a      	uxth	r2, r3
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	3302      	adds	r3, #2
 80086a6:	61bb      	str	r3, [r7, #24]
 80086a8:	e01f      	b.n	80086ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086b2:	d007      	beq.n	80086c4 <HAL_UART_Receive+0xda>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <HAL_UART_Receive+0xe8>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d106      	bne.n	80086d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	e008      	b.n	80086e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	3301      	adds	r3, #1
 80086e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1b2      	bne.n	8008668 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2220      	movs	r2, #32
 8008706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	e000      	b.n	8008710 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800870e:	2302      	movs	r3, #2
  }
}
 8008710:	4618      	mov	r0, r3
 8008712:	3720      	adds	r7, #32
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b20      	cmp	r3, #32
 8008730:	d121      	bne.n	8008776 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <HAL_UART_Transmit_IT+0x26>
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e01a      	b.n	8008778 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	88fa      	ldrh	r2, [r7, #6]
 800874c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	88fa      	ldrh	r2, [r7, #6]
 8008752:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2221      	movs	r2, #33	@ 0x21
 800875e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008770:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	e000      	b.n	8008778 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008776:	2302      	movs	r3, #2
  }
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b20      	cmp	r3, #32
 800879c:	d112      	bne.n	80087c4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_UART_Receive_IT+0x26>
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e00b      	b.n	80087c6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087b4:	88fb      	ldrh	r3, [r7, #6]
 80087b6:	461a      	mov	r2, r3
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 fb21 	bl	8008e02 <UART_Start_Receive_IT>
 80087c0:	4603      	mov	r3, r0
 80087c2:	e000      	b.n	80087c6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80087c4:	2302      	movs	r3, #2
  }
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b0ba      	sub	sp, #232	@ 0xe8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008806:	f003 030f 	and.w	r3, r3, #15
 800880a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800880e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10f      	bne.n	8008836 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d009      	beq.n	8008836 <HAL_UART_IRQHandler+0x66>
 8008822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fbfd 	bl	800902e <UART_Receive_IT>
      return;
 8008834:	e273      	b.n	8008d1e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80de 	beq.w	80089fc <HAL_UART_IRQHandler+0x22c>
 8008840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800884c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008850:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 80d1 	beq.w	80089fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800885a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <HAL_UART_IRQHandler+0xae>
 8008866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800886a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008876:	f043 0201 	orr.w	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800887e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008882:	f003 0304 	and.w	r3, r3, #4
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <HAL_UART_IRQHandler+0xd2>
 800888a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889a:	f043 0202 	orr.w	r2, r3, #2
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00b      	beq.n	80088c6 <HAL_UART_IRQHandler+0xf6>
 80088ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088be:	f043 0204 	orr.w	r2, r3, #4
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ca:	f003 0308 	and.w	r3, r3, #8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d011      	beq.n	80088f6 <HAL_UART_IRQHandler+0x126>
 80088d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d105      	bne.n	80088ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ee:	f043 0208 	orr.w	r2, r3, #8
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 820a 	beq.w	8008d14 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008904:	f003 0320 	and.w	r3, r3, #32
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_UART_IRQHandler+0x14e>
 800890c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fb88 	bl	800902e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008928:	2b40      	cmp	r3, #64	@ 0x40
 800892a:	bf0c      	ite	eq
 800892c:	2301      	moveq	r3, #1
 800892e:	2300      	movne	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <HAL_UART_IRQHandler+0x17a>
 8008942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008946:	2b00      	cmp	r3, #0
 8008948:	d04f      	beq.n	80089ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa93 	bl	8008e76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800895a:	2b40      	cmp	r3, #64	@ 0x40
 800895c:	d141      	bne.n	80089e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3314      	adds	r3, #20
 8008964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800897c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3314      	adds	r3, #20
 8008986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800898a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800898e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1d9      	bne.n	800895e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d013      	beq.n	80089da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b6:	4a8a      	ldr	r2, [pc, #552]	@ (8008be0 <HAL_UART_IRQHandler+0x410>)
 80089b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fc f9df 	bl	8004d82 <HAL_DMA_Abort_IT>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d016      	beq.n	80089f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d8:	e00e      	b.n	80089f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f9a2 	bl	8008d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e0:	e00a      	b.n	80089f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f99e 	bl	8008d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e8:	e006      	b.n	80089f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f99a 	bl	8008d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80089f6:	e18d      	b.n	8008d14 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f8:	bf00      	nop
    return;
 80089fa:	e18b      	b.n	8008d14 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	f040 8167 	bne.w	8008cd4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a0a:	f003 0310 	and.w	r3, r3, #16
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 8160 	beq.w	8008cd4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8159 	beq.w	8008cd4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a42:	2b40      	cmp	r3, #64	@ 0x40
 8008a44:	f040 80ce 	bne.w	8008be4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80a9 	beq.w	8008bb0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a66:	429a      	cmp	r2, r3
 8008a68:	f080 80a2 	bcs.w	8008bb0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a7e:	f000 8088 	beq.w	8008b92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	330c      	adds	r3, #12
 8008a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008aae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1d9      	bne.n	8008a82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3314      	adds	r3, #20
 8008ad4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3314      	adds	r3, #20
 8008aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008af2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e1      	bne.n	8008ace <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3314      	adds	r3, #20
 8008b10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3314      	adds	r3, #20
 8008b2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e3      	bne.n	8008b0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	330c      	adds	r3, #12
 8008b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b62:	f023 0310 	bic.w	r3, r3, #16
 8008b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	330c      	adds	r3, #12
 8008b70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008b74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e3      	bne.n	8008b50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fc f888 	bl	8004ca2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8c5 	bl	8008d38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008bae:	e0b3      	b.n	8008d18 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008bb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	f040 80ad 	bne.w	8008d18 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bc8:	f040 80a6 	bne.w	8008d18 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8ad 	bl	8008d38 <HAL_UARTEx_RxEventCallback>
      return;
 8008bde:	e09b      	b.n	8008d18 <HAL_UART_IRQHandler+0x548>
 8008be0:	08008f3d 	.word	0x08008f3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 808e 	beq.w	8008d1c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 8089 	beq.w	8008d1c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e3      	bne.n	8008c0a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3314      	adds	r3, #20
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	623b      	str	r3, [r7, #32]
   return(result);
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3314      	adds	r3, #20
 8008c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e3      	bne.n	8008c42 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008cac:	61fa      	str	r2, [r7, #28]
 8008cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e3      	bne.n	8008c88 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f833 	bl	8008d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cd2:	e023      	b.n	8008d1c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d009      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x524>
 8008ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f936 	bl	8008f5e <UART_Transmit_IT>
    return;
 8008cf2:	e014      	b.n	8008d1e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00e      	beq.n	8008d1e <HAL_UART_IRQHandler+0x54e>
 8008d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f976 	bl	8008ffe <UART_EndTransmit_IT>
    return;
 8008d12:	e004      	b.n	8008d1e <HAL_UART_IRQHandler+0x54e>
    return;
 8008d14:	bf00      	nop
 8008d16:	e002      	b.n	8008d1e <HAL_UART_IRQHandler+0x54e>
      return;
 8008d18:	bf00      	nop
 8008d1a:	e000      	b.n	8008d1e <HAL_UART_IRQHandler+0x54e>
      return;
 8008d1c:	bf00      	nop
  }
}
 8008d1e:	37e8      	adds	r7, #232	@ 0xe8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d60:	e03b      	b.n	8008dda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d68:	d037      	beq.n	8008dda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6a:	f7fb fe59 	bl	8004a20 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	6a3a      	ldr	r2, [r7, #32]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d302      	bcc.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e03a      	b.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0304 	and.w	r3, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d023      	beq.n	8008dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b80      	cmp	r3, #128	@ 0x80
 8008d96:	d020      	beq.n	8008dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b40      	cmp	r3, #64	@ 0x40
 8008d9c:	d01d      	beq.n	8008dda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d116      	bne.n	8008dda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008dac:	2300      	movs	r3, #0
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f857 	bl	8008e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2208      	movs	r2, #8
 8008dcc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e00f      	b.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	4013      	ands	r3, r2
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	bf0c      	ite	eq
 8008dea:	2301      	moveq	r3, #1
 8008dec:	2300      	movne	r3, #0
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	461a      	mov	r2, r3
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d0b4      	beq.n	8008d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	88fa      	ldrh	r2, [r7, #6]
 8008e1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	88fa      	ldrh	r2, [r7, #6]
 8008e20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2222      	movs	r2, #34	@ 0x22
 8008e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d007      	beq.n	8008e48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695a      	ldr	r2, [r3, #20]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0220 	orr.w	r2, r2, #32
 8008e66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b095      	sub	sp, #84	@ 0x54
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	330c      	adds	r3, #12
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	330c      	adds	r3, #12
 8008e9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e5      	bne.n	8008e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3314      	adds	r3, #20
 8008eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e5      	bne.n	8008eb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d119      	bne.n	8008f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	330c      	adds	r3, #12
 8008ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f023 0310 	bic.w	r3, r3, #16
 8008f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	330c      	adds	r3, #12
 8008f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f0e:	61ba      	str	r2, [r7, #24]
 8008f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6979      	ldr	r1, [r7, #20]
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e5      	bne.n	8008eee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008f30:	bf00      	nop
 8008f32:	3754      	adds	r7, #84	@ 0x54
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff fee7 	bl	8008d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b21      	cmp	r3, #33	@ 0x21
 8008f70:	d13e      	bne.n	8008ff0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f7a:	d114      	bne.n	8008fa6 <UART_Transmit_IT+0x48>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d110      	bne.n	8008fa6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	1c9a      	adds	r2, r3, #2
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	621a      	str	r2, [r3, #32]
 8008fa4:	e008      	b.n	8008fb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	1c59      	adds	r1, r3, #1
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6211      	str	r1, [r2, #32]
 8008fb0:	781a      	ldrb	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10f      	bne.n	8008fec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e000      	b.n	8008ff2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ff0:	2302      	movs	r3, #2
  }
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b082      	sub	sp, #8
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7f9 fca2 	bl	8002968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b08c      	sub	sp, #48	@ 0x30
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b22      	cmp	r3, #34	@ 0x22
 8009048:	f040 80aa 	bne.w	80091a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009054:	d115      	bne.n	8009082 <UART_Receive_IT+0x54>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d111      	bne.n	8009082 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009062:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	b29b      	uxth	r3, r3
 800906c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009070:	b29a      	uxth	r2, r3
 8009072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009074:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907a:	1c9a      	adds	r2, r3, #2
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009080:	e024      	b.n	80090cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009086:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009090:	d007      	beq.n	80090a2 <UART_Receive_IT+0x74>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10a      	bne.n	80090b0 <UART_Receive_IT+0x82>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d106      	bne.n	80090b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	e008      	b.n	80090c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	4619      	mov	r1, r3
 80090da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d15d      	bne.n	800919c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0220 	bic.w	r2, r2, #32
 80090ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80090fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	695a      	ldr	r2, [r3, #20]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009122:	2b01      	cmp	r3, #1
 8009124:	d135      	bne.n	8009192 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	330c      	adds	r3, #12
 8009132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	613b      	str	r3, [r7, #16]
   return(result);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f023 0310 	bic.w	r3, r3, #16
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	330c      	adds	r3, #12
 800914a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800914c:	623a      	str	r2, [r7, #32]
 800914e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	69f9      	ldr	r1, [r7, #28]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	61bb      	str	r3, [r7, #24]
   return(result);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e5      	bne.n	800912c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b10      	cmp	r3, #16
 800916c:	d10a      	bne.n	8009184 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fdd4 	bl	8008d38 <HAL_UARTEx_RxEventCallback>
 8009190:	e002      	b.n	8009198 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7f9 fb7a 	bl	800288c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e002      	b.n	80091a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	e000      	b.n	80091a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80091a0:	2302      	movs	r3, #2
  }
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3730      	adds	r7, #48	@ 0x30
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091b0:	b0c0      	sub	sp, #256	@ 0x100
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c8:	68d9      	ldr	r1, [r3, #12]
 80091ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	ea40 0301 	orr.w	r3, r0, r1
 80091d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091da:	689a      	ldr	r2, [r3, #8]
 80091dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	431a      	orrs	r2, r3
 80091ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009204:	f021 010c 	bic.w	r1, r1, #12
 8009208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009212:	430b      	orrs	r3, r1
 8009214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009226:	6999      	ldr	r1, [r3, #24]
 8009228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	ea40 0301 	orr.w	r3, r0, r1
 8009232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4b8f      	ldr	r3, [pc, #572]	@ (8009478 <UART_SetConfig+0x2cc>)
 800923c:	429a      	cmp	r2, r3
 800923e:	d005      	beq.n	800924c <UART_SetConfig+0xa0>
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b8d      	ldr	r3, [pc, #564]	@ (800947c <UART_SetConfig+0x2d0>)
 8009248:	429a      	cmp	r2, r3
 800924a:	d104      	bne.n	8009256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800924c:	f7fc fbf6 	bl	8005a3c <HAL_RCC_GetPCLK2Freq>
 8009250:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009254:	e003      	b.n	800925e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009256:	f7fc fbdd 	bl	8005a14 <HAL_RCC_GetPCLK1Freq>
 800925a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800925e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009268:	f040 810c 	bne.w	8009484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800926c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009270:	2200      	movs	r2, #0
 8009272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009276:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800927a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800927e:	4622      	mov	r2, r4
 8009280:	462b      	mov	r3, r5
 8009282:	1891      	adds	r1, r2, r2
 8009284:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009286:	415b      	adcs	r3, r3
 8009288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800928a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800928e:	4621      	mov	r1, r4
 8009290:	eb12 0801 	adds.w	r8, r2, r1
 8009294:	4629      	mov	r1, r5
 8009296:	eb43 0901 	adc.w	r9, r3, r1
 800929a:	f04f 0200 	mov.w	r2, #0
 800929e:	f04f 0300 	mov.w	r3, #0
 80092a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092ae:	4690      	mov	r8, r2
 80092b0:	4699      	mov	r9, r3
 80092b2:	4623      	mov	r3, r4
 80092b4:	eb18 0303 	adds.w	r3, r8, r3
 80092b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092bc:	462b      	mov	r3, r5
 80092be:	eb49 0303 	adc.w	r3, r9, r3
 80092c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80092d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80092da:	460b      	mov	r3, r1
 80092dc:	18db      	adds	r3, r3, r3
 80092de:	653b      	str	r3, [r7, #80]	@ 0x50
 80092e0:	4613      	mov	r3, r2
 80092e2:	eb42 0303 	adc.w	r3, r2, r3
 80092e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80092e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80092ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80092f0:	f7f6 ffd6 	bl	80002a0 <__aeabi_uldivmod>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4b61      	ldr	r3, [pc, #388]	@ (8009480 <UART_SetConfig+0x2d4>)
 80092fa:	fba3 2302 	umull	r2, r3, r3, r2
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	011c      	lsls	r4, r3, #4
 8009302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009306:	2200      	movs	r2, #0
 8009308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800930c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009314:	4642      	mov	r2, r8
 8009316:	464b      	mov	r3, r9
 8009318:	1891      	adds	r1, r2, r2
 800931a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800931c:	415b      	adcs	r3, r3
 800931e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009324:	4641      	mov	r1, r8
 8009326:	eb12 0a01 	adds.w	sl, r2, r1
 800932a:	4649      	mov	r1, r9
 800932c:	eb43 0b01 	adc.w	fp, r3, r1
 8009330:	f04f 0200 	mov.w	r2, #0
 8009334:	f04f 0300 	mov.w	r3, #0
 8009338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800933c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009344:	4692      	mov	sl, r2
 8009346:	469b      	mov	fp, r3
 8009348:	4643      	mov	r3, r8
 800934a:	eb1a 0303 	adds.w	r3, sl, r3
 800934e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009352:	464b      	mov	r3, r9
 8009354:	eb4b 0303 	adc.w	r3, fp, r3
 8009358:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800935c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009368:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800936c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009370:	460b      	mov	r3, r1
 8009372:	18db      	adds	r3, r3, r3
 8009374:	643b      	str	r3, [r7, #64]	@ 0x40
 8009376:	4613      	mov	r3, r2
 8009378:	eb42 0303 	adc.w	r3, r2, r3
 800937c:	647b      	str	r3, [r7, #68]	@ 0x44
 800937e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009386:	f7f6 ff8b 	bl	80002a0 <__aeabi_uldivmod>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4611      	mov	r1, r2
 8009390:	4b3b      	ldr	r3, [pc, #236]	@ (8009480 <UART_SetConfig+0x2d4>)
 8009392:	fba3 2301 	umull	r2, r3, r3, r1
 8009396:	095b      	lsrs	r3, r3, #5
 8009398:	2264      	movs	r2, #100	@ 0x64
 800939a:	fb02 f303 	mul.w	r3, r2, r3
 800939e:	1acb      	subs	r3, r1, r3
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80093a6:	4b36      	ldr	r3, [pc, #216]	@ (8009480 <UART_SetConfig+0x2d4>)
 80093a8:	fba3 2302 	umull	r2, r3, r3, r2
 80093ac:	095b      	lsrs	r3, r3, #5
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80093b4:	441c      	add	r4, r3
 80093b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80093c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80093c8:	4642      	mov	r2, r8
 80093ca:	464b      	mov	r3, r9
 80093cc:	1891      	adds	r1, r2, r2
 80093ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80093d0:	415b      	adcs	r3, r3
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80093d8:	4641      	mov	r1, r8
 80093da:	1851      	adds	r1, r2, r1
 80093dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80093de:	4649      	mov	r1, r9
 80093e0:	414b      	adcs	r3, r1
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80093f0:	4659      	mov	r1, fp
 80093f2:	00cb      	lsls	r3, r1, #3
 80093f4:	4651      	mov	r1, sl
 80093f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093fa:	4651      	mov	r1, sl
 80093fc:	00ca      	lsls	r2, r1, #3
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	4603      	mov	r3, r0
 8009404:	4642      	mov	r2, r8
 8009406:	189b      	adds	r3, r3, r2
 8009408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800940c:	464b      	mov	r3, r9
 800940e:	460a      	mov	r2, r1
 8009410:	eb42 0303 	adc.w	r3, r2, r3
 8009414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009424:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800942c:	460b      	mov	r3, r1
 800942e:	18db      	adds	r3, r3, r3
 8009430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009432:	4613      	mov	r3, r2
 8009434:	eb42 0303 	adc.w	r3, r2, r3
 8009438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800943a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800943e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009442:	f7f6 ff2d 	bl	80002a0 <__aeabi_uldivmod>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4b0d      	ldr	r3, [pc, #52]	@ (8009480 <UART_SetConfig+0x2d4>)
 800944c:	fba3 1302 	umull	r1, r3, r3, r2
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	2164      	movs	r1, #100	@ 0x64
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	3332      	adds	r3, #50	@ 0x32
 800945e:	4a08      	ldr	r2, [pc, #32]	@ (8009480 <UART_SetConfig+0x2d4>)
 8009460:	fba2 2303 	umull	r2, r3, r2, r3
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	f003 0207 	and.w	r2, r3, #7
 800946a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4422      	add	r2, r4
 8009472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009474:	e106      	b.n	8009684 <UART_SetConfig+0x4d8>
 8009476:	bf00      	nop
 8009478:	40011000 	.word	0x40011000
 800947c:	40011400 	.word	0x40011400
 8009480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009488:	2200      	movs	r2, #0
 800948a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800948e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009496:	4642      	mov	r2, r8
 8009498:	464b      	mov	r3, r9
 800949a:	1891      	adds	r1, r2, r2
 800949c:	6239      	str	r1, [r7, #32]
 800949e:	415b      	adcs	r3, r3
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094a6:	4641      	mov	r1, r8
 80094a8:	1854      	adds	r4, r2, r1
 80094aa:	4649      	mov	r1, r9
 80094ac:	eb43 0501 	adc.w	r5, r3, r1
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	00eb      	lsls	r3, r5, #3
 80094ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094be:	00e2      	lsls	r2, r4, #3
 80094c0:	4614      	mov	r4, r2
 80094c2:	461d      	mov	r5, r3
 80094c4:	4643      	mov	r3, r8
 80094c6:	18e3      	adds	r3, r4, r3
 80094c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094cc:	464b      	mov	r3, r9
 80094ce:	eb45 0303 	adc.w	r3, r5, r3
 80094d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80094f2:	4629      	mov	r1, r5
 80094f4:	008b      	lsls	r3, r1, #2
 80094f6:	4621      	mov	r1, r4
 80094f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094fc:	4621      	mov	r1, r4
 80094fe:	008a      	lsls	r2, r1, #2
 8009500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009504:	f7f6 fecc 	bl	80002a0 <__aeabi_uldivmod>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4b60      	ldr	r3, [pc, #384]	@ (8009690 <UART_SetConfig+0x4e4>)
 800950e:	fba3 2302 	umull	r2, r3, r3, r2
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	011c      	lsls	r4, r3, #4
 8009516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800951a:	2200      	movs	r2, #0
 800951c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009520:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	1891      	adds	r1, r2, r2
 800952e:	61b9      	str	r1, [r7, #24]
 8009530:	415b      	adcs	r3, r3
 8009532:	61fb      	str	r3, [r7, #28]
 8009534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009538:	4641      	mov	r1, r8
 800953a:	1851      	adds	r1, r2, r1
 800953c:	6139      	str	r1, [r7, #16]
 800953e:	4649      	mov	r1, r9
 8009540:	414b      	adcs	r3, r1
 8009542:	617b      	str	r3, [r7, #20]
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	f04f 0300 	mov.w	r3, #0
 800954c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009550:	4659      	mov	r1, fp
 8009552:	00cb      	lsls	r3, r1, #3
 8009554:	4651      	mov	r1, sl
 8009556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800955a:	4651      	mov	r1, sl
 800955c:	00ca      	lsls	r2, r1, #3
 800955e:	4610      	mov	r0, r2
 8009560:	4619      	mov	r1, r3
 8009562:	4603      	mov	r3, r0
 8009564:	4642      	mov	r2, r8
 8009566:	189b      	adds	r3, r3, r2
 8009568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800956c:	464b      	mov	r3, r9
 800956e:	460a      	mov	r2, r1
 8009570:	eb42 0303 	adc.w	r3, r2, r3
 8009574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009582:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009584:	f04f 0200 	mov.w	r2, #0
 8009588:	f04f 0300 	mov.w	r3, #0
 800958c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009590:	4649      	mov	r1, r9
 8009592:	008b      	lsls	r3, r1, #2
 8009594:	4641      	mov	r1, r8
 8009596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800959a:	4641      	mov	r1, r8
 800959c:	008a      	lsls	r2, r1, #2
 800959e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80095a2:	f7f6 fe7d 	bl	80002a0 <__aeabi_uldivmod>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	4b38      	ldr	r3, [pc, #224]	@ (8009690 <UART_SetConfig+0x4e4>)
 80095ae:	fba3 2301 	umull	r2, r3, r3, r1
 80095b2:	095b      	lsrs	r3, r3, #5
 80095b4:	2264      	movs	r2, #100	@ 0x64
 80095b6:	fb02 f303 	mul.w	r3, r2, r3
 80095ba:	1acb      	subs	r3, r1, r3
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	3332      	adds	r3, #50	@ 0x32
 80095c0:	4a33      	ldr	r2, [pc, #204]	@ (8009690 <UART_SetConfig+0x4e4>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095cc:	441c      	add	r4, r3
 80095ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095d2:	2200      	movs	r2, #0
 80095d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80095d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80095d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80095dc:	4642      	mov	r2, r8
 80095de:	464b      	mov	r3, r9
 80095e0:	1891      	adds	r1, r2, r2
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	415b      	adcs	r3, r3
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095ec:	4641      	mov	r1, r8
 80095ee:	1851      	adds	r1, r2, r1
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	4649      	mov	r1, r9
 80095f4:	414b      	adcs	r3, r1
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	f04f 0200 	mov.w	r2, #0
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009604:	4659      	mov	r1, fp
 8009606:	00cb      	lsls	r3, r1, #3
 8009608:	4651      	mov	r1, sl
 800960a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800960e:	4651      	mov	r1, sl
 8009610:	00ca      	lsls	r2, r1, #3
 8009612:	4610      	mov	r0, r2
 8009614:	4619      	mov	r1, r3
 8009616:	4603      	mov	r3, r0
 8009618:	4642      	mov	r2, r8
 800961a:	189b      	adds	r3, r3, r2
 800961c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800961e:	464b      	mov	r3, r9
 8009620:	460a      	mov	r2, r1
 8009622:	eb42 0303 	adc.w	r3, r2, r3
 8009626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	663b      	str	r3, [r7, #96]	@ 0x60
 8009632:	667a      	str	r2, [r7, #100]	@ 0x64
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009640:	4649      	mov	r1, r9
 8009642:	008b      	lsls	r3, r1, #2
 8009644:	4641      	mov	r1, r8
 8009646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800964a:	4641      	mov	r1, r8
 800964c:	008a      	lsls	r2, r1, #2
 800964e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009652:	f7f6 fe25 	bl	80002a0 <__aeabi_uldivmod>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4b0d      	ldr	r3, [pc, #52]	@ (8009690 <UART_SetConfig+0x4e4>)
 800965c:	fba3 1302 	umull	r1, r3, r3, r2
 8009660:	095b      	lsrs	r3, r3, #5
 8009662:	2164      	movs	r1, #100	@ 0x64
 8009664:	fb01 f303 	mul.w	r3, r1, r3
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	3332      	adds	r3, #50	@ 0x32
 800966e:	4a08      	ldr	r2, [pc, #32]	@ (8009690 <UART_SetConfig+0x4e4>)
 8009670:	fba2 2303 	umull	r2, r3, r2, r3
 8009674:	095b      	lsrs	r3, r3, #5
 8009676:	f003 020f 	and.w	r2, r3, #15
 800967a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4422      	add	r2, r4
 8009682:	609a      	str	r2, [r3, #8]
}
 8009684:	bf00      	nop
 8009686:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800968a:	46bd      	mov	sp, r7
 800968c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009690:	51eb851f 	.word	0x51eb851f

08009694 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009694:	b084      	sub	sp, #16
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	f107 001c 	add.w	r0, r7, #28
 80096a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80096aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80096ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80096ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80096b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80096b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80096b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80096b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80096ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80096be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80096ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	b004      	add	sp, #16
 80096e8:	4770      	bx	lr

080096ea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2203      	movs	r2, #3
 8009732:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0303 	and.w	r3, r3, #3
}
 8009752:	4618      	mov	r0, r3
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800975e:	b480      	push	{r7}
 8009760:	b085      	sub	sp, #20
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800977c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009782:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009788:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009798:	f023 030f 	bic.w	r3, r3, #15
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	b2db      	uxtb	r3, r3
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3314      	adds	r3, #20
 80097da:	461a      	mov	r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	4413      	add	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
}  
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b085      	sub	sp, #20
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009818:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800981e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009824:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800983c:	2300      	movs	r3, #0

}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009858:	2310      	movs	r3, #16
 800985a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800985c:	2340      	movs	r3, #64	@ 0x40
 800985e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009868:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff ff74 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800987a:	2110      	movs	r1, #16
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f9d7 	bl	8009c30 <SDMMC_GetCmdResp1>
 8009882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009884:	69fb      	ldr	r3, [r7, #28]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b088      	sub	sp, #32
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800989c:	2311      	movs	r3, #17
 800989e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098a0:	2340      	movs	r3, #64	@ 0x40
 80098a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098a4:	2300      	movs	r3, #0
 80098a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098ae:	f107 0308 	add.w	r3, r7, #8
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff ff52 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80098ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098be:	2111      	movs	r1, #17
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f9b5 	bl	8009c30 <SDMMC_GetCmdResp1>
 80098c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c8:	69fb      	ldr	r3, [r7, #28]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b088      	sub	sp, #32
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80098e0:	2312      	movs	r3, #18
 80098e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098e4:	2340      	movs	r3, #64	@ 0x40
 80098e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff ff30 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009902:	2112      	movs	r1, #18
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f993 	bl	8009c30 <SDMMC_GetCmdResp1>
 800990a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b088      	sub	sp, #32
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009924:	2318      	movs	r3, #24
 8009926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009928:	2340      	movs	r3, #64	@ 0x40
 800992a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800992c:	2300      	movs	r3, #0
 800992e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009934:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff ff0e 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009946:	2118      	movs	r1, #24
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f971 	bl	8009c30 <SDMMC_GetCmdResp1>
 800994e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009950:	69fb      	ldr	r3, [r7, #28]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b088      	sub	sp, #32
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009968:	2319      	movs	r3, #25
 800996a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800996c:	2340      	movs	r3, #64	@ 0x40
 800996e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009978:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800997a:	f107 0308 	add.w	r3, r7, #8
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff feec 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800998a:	2119      	movs	r1, #25
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f94f 	bl	8009c30 <SDMMC_GetCmdResp1>
 8009992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009994:	69fb      	ldr	r3, [r7, #28]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099ac:	230c      	movs	r3, #12
 80099ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099b0:	2340      	movs	r3, #64	@ 0x40
 80099b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099be:	f107 0308 	add.w	r3, r7, #8
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff feca 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80099ca:	4a05      	ldr	r2, [pc, #20]	@ (80099e0 <SDMMC_CmdStopTransfer+0x40>)
 80099cc:	210c      	movs	r1, #12
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f92e 	bl	8009c30 <SDMMC_GetCmdResp1>
 80099d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d6:	69fb      	ldr	r3, [r7, #28]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	05f5e100 	.word	0x05f5e100

080099e4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08a      	sub	sp, #40	@ 0x28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80099f4:	2307      	movs	r3, #7
 80099f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099f8:	2340      	movs	r3, #64	@ 0x40
 80099fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099fc:	2300      	movs	r3, #0
 80099fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a04:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a06:	f107 0310 	add.w	r3, r7, #16
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff fea6 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a16:	2107      	movs	r1, #7
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 f909 	bl	8009c30 <SDMMC_GetCmdResp1>
 8009a1e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3728      	adds	r7, #40	@ 0x28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b088      	sub	sp, #32
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff fe85 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb23 	bl	800a0a0 <SDMMC_GetCmdError>
 8009a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a5c:	69fb      	ldr	r3, [r7, #28]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3720      	adds	r7, #32
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b088      	sub	sp, #32
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a6e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a74:	2308      	movs	r3, #8
 8009a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a78:	2340      	movs	r3, #64	@ 0x40
 8009a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fe66 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fab6 	bl	800a004 <SDMMC_GetCmdResp7>
 8009a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ab2:	2337      	movs	r3, #55	@ 0x37
 8009ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ab6:	2340      	movs	r3, #64	@ 0x40
 8009ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aba:	2300      	movs	r3, #0
 8009abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ac4:	f107 0308 	add.w	r3, r7, #8
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff fe47 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad4:	2137      	movs	r1, #55	@ 0x37
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f8aa 	bl	8009c30 <SDMMC_GetCmdResp1>
 8009adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ade:	69fb      	ldr	r3, [r7, #28]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009af8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009afe:	2329      	movs	r3, #41	@ 0x29
 8009b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b02:	2340      	movs	r3, #64	@ 0x40
 8009b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b06:	2300      	movs	r3, #0
 8009b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b10:	f107 0308 	add.w	r3, r7, #8
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff fe21 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9bd 	bl	8009e9c <SDMMC_GetCmdResp3>
 8009b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b24:	69fb      	ldr	r3, [r7, #28]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3720      	adds	r7, #32
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b088      	sub	sp, #32
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b3e:	23c0      	movs	r3, #192	@ 0xc0
 8009b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fe03 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f957 	bl	8009e0c <SDMMC_GetCmdResp2>
 8009b5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b60:	69fb      	ldr	r3, [r7, #28]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b088      	sub	sp, #32
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b78:	2309      	movs	r3, #9
 8009b7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b7c:	23c0      	movs	r3, #192	@ 0xc0
 8009b7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b8a:	f107 0308 	add.w	r3, r7, #8
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fde4 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f938 	bl	8009e0c <SDMMC_GetCmdResp2>
 8009b9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b088      	sub	sp, #32
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bba:	2340      	movs	r3, #64	@ 0x40
 8009bbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bc8:	f107 0308 	add.w	r3, r7, #8
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff fdc5 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	2103      	movs	r1, #3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f99d 	bl	8009f18 <SDMMC_GetCmdResp6>
 8009bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009be0:	69fb      	ldr	r3, [r7, #28]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3720      	adds	r7, #32
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b088      	sub	sp, #32
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009bf8:	230d      	movs	r3, #13
 8009bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bfc:	2340      	movs	r3, #64	@ 0x40
 8009bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fda4 	bl	800975e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c1a:	210d      	movs	r1, #13
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f807 	bl	8009c30 <SDMMC_GetCmdResp1>
 8009c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c24:	69fb      	ldr	r3, [r7, #28]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b088      	sub	sp, #32
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c3e:	4b70      	ldr	r3, [pc, #448]	@ (8009e00 <SDMMC_GetCmdResp1+0x1d0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a70      	ldr	r2, [pc, #448]	@ (8009e04 <SDMMC_GetCmdResp1+0x1d4>)
 8009c44:	fba2 2303 	umull	r2, r3, r2, r3
 8009c48:	0a5a      	lsrs	r2, r3, #9
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	fb02 f303 	mul.w	r3, r2, r3
 8009c50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	1e5a      	subs	r2, r3, #1
 8009c56:	61fa      	str	r2, [r7, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d102      	bne.n	8009c62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c60:	e0c9      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0ef      	beq.n	8009c52 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1ea      	bne.n	8009c52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d004      	beq.n	8009c92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c8e:	2304      	movs	r3, #4
 8009c90:	e0b1      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d004      	beq.n	8009ca8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e0a6      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	22c5      	movs	r2, #197	@ 0xc5
 8009cac:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff fd7f 	bl	80097b2 <SDIO_GetCommandResponse>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	7afb      	ldrb	r3, [r7, #11]
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d001      	beq.n	8009cc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e099      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff fd81 	bl	80097cc <SDIO_GetResponse>
 8009cca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	4b4e      	ldr	r3, [pc, #312]	@ (8009e08 <SDMMC_GetCmdResp1+0x1d8>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e08d      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	da02      	bge.n	8009ce6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ce4:	e087      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009cf0:	2340      	movs	r3, #64	@ 0x40
 8009cf2:	e080      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009cfe:	2380      	movs	r3, #128	@ 0x80
 8009d00:	e079      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d10:	e071      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d20:	e069      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d30:	e061      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d40:	e059      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d50:	e051      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009d60:	e049      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d70:	e041      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d80:	e039      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009d90:	e031      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009da0:	e029      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009dac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009db0:	e021      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009dbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009dc0:	e019      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009dcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009dd0:	e011      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009ddc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009de0:	e009      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f003 0308 	and.w	r3, r3, #8
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009dec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009df0:	e001      	b.n	8009df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009df2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3720      	adds	r7, #32
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	20000004 	.word	0x20000004
 8009e04:	10624dd3 	.word	0x10624dd3
 8009e08:	fdffe008 	.word	0xfdffe008

08009e0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e14:	4b1f      	ldr	r3, [pc, #124]	@ (8009e94 <SDMMC_GetCmdResp2+0x88>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a1f      	ldr	r2, [pc, #124]	@ (8009e98 <SDMMC_GetCmdResp2+0x8c>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	0a5b      	lsrs	r3, r3, #9
 8009e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e24:	fb02 f303 	mul.w	r3, r2, r3
 8009e28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1e5a      	subs	r2, r3, #1
 8009e2e:	60fa      	str	r2, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e38:	e026      	b.n	8009e88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0ef      	beq.n	8009e2a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ea      	bne.n	8009e2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2204      	movs	r2, #4
 8009e64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e66:	2304      	movs	r3, #4
 8009e68:	e00e      	b.n	8009e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e003      	b.n	8009e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	22c5      	movs	r2, #197	@ 0xc5
 8009e84:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	20000004 	.word	0x20000004
 8009e98:	10624dd3 	.word	0x10624dd3

08009e9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f10 <SDMMC_GetCmdResp3+0x74>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8009f14 <SDMMC_GetCmdResp3+0x78>)
 8009eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009eae:	0a5b      	lsrs	r3, r3, #9
 8009eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eb4:	fb02 f303 	mul.w	r3, r2, r3
 8009eb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1e5a      	subs	r2, r3, #1
 8009ebe:	60fa      	str	r2, [r7, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d102      	bne.n	8009eca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ec4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ec8:	e01b      	b.n	8009f02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ece:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0ef      	beq.n	8009eba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1ea      	bne.n	8009eba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d004      	beq.n	8009efa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2204      	movs	r2, #4
 8009ef4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ef6:	2304      	movs	r3, #4
 8009ef8:	e003      	b.n	8009f02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	22c5      	movs	r2, #197	@ 0xc5
 8009efe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	20000004 	.word	0x20000004
 8009f14:	10624dd3 	.word	0x10624dd3

08009f18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	460b      	mov	r3, r1
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f26:	4b35      	ldr	r3, [pc, #212]	@ (8009ffc <SDMMC_GetCmdResp6+0xe4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a35      	ldr	r2, [pc, #212]	@ (800a000 <SDMMC_GetCmdResp6+0xe8>)
 8009f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f30:	0a5b      	lsrs	r3, r3, #9
 8009f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
 8009f3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	1e5a      	subs	r2, r3, #1
 8009f40:	61fa      	str	r2, [r7, #28]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f4a:	e052      	b.n	8009ff2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0ef      	beq.n	8009f3c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1ea      	bne.n	8009f3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f6a:	f003 0304 	and.w	r3, r3, #4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d004      	beq.n	8009f7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2204      	movs	r2, #4
 8009f76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f78:	2304      	movs	r3, #4
 8009f7a:	e03a      	b.n	8009ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e02f      	b.n	8009ff2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff fc0d 	bl	80097b2 <SDIO_GetCommandResponse>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d001      	beq.n	8009fa6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e025      	b.n	8009ff2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	22c5      	movs	r2, #197	@ 0xc5
 8009faa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009fac:	2100      	movs	r1, #0
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7ff fc0c 	bl	80097cc <SDIO_GetResponse>
 8009fb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d106      	bne.n	8009fce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	0c1b      	lsrs	r3, r3, #16
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	e011      	b.n	8009ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009fdc:	e009      	b.n	8009ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fec:	e001      	b.n	8009ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009fee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3720      	adds	r7, #32
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000004 	.word	0x20000004
 800a000:	10624dd3 	.word	0x10624dd3

0800a004 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a00c:	4b22      	ldr	r3, [pc, #136]	@ (800a098 <SDMMC_GetCmdResp7+0x94>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a22      	ldr	r2, [pc, #136]	@ (800a09c <SDMMC_GetCmdResp7+0x98>)
 800a012:	fba2 2303 	umull	r2, r3, r2, r3
 800a016:	0a5b      	lsrs	r3, r3, #9
 800a018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a01c:	fb02 f303 	mul.w	r3, r2, r3
 800a020:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1e5a      	subs	r2, r3, #1
 800a026:	60fa      	str	r2, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a02c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a030:	e02c      	b.n	800a08c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a036:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0ef      	beq.n	800a022 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1ea      	bne.n	800a022 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b00      	cmp	r3, #0
 800a056:	d004      	beq.n	800a062 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2204      	movs	r2, #4
 800a05c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a05e:	2304      	movs	r3, #4
 800a060:	e014      	b.n	800a08c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a074:	2301      	movs	r3, #1
 800a076:	e009      	b.n	800a08c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2240      	movs	r2, #64	@ 0x40
 800a088:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a08a:	2300      	movs	r3, #0
  
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	20000004 	.word	0x20000004
 800a09c:	10624dd3 	.word	0x10624dd3

0800a0a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0a8:	4b11      	ldr	r3, [pc, #68]	@ (800a0f0 <SDMMC_GetCmdError+0x50>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a11      	ldr	r2, [pc, #68]	@ (800a0f4 <SDMMC_GetCmdError+0x54>)
 800a0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b2:	0a5b      	lsrs	r3, r3, #9
 800a0b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0b8:	fb02 f303 	mul.w	r3, r2, r3
 800a0bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	1e5a      	subs	r2, r3, #1
 800a0c2:	60fa      	str	r2, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0cc:	e009      	b.n	800a0e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0f1      	beq.n	800a0be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	22c5      	movs	r2, #197	@ 0xc5
 800a0de:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20000004 	.word	0x20000004
 800a0f4:	10624dd3 	.word	0x10624dd3

0800a0f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0fc:	4904      	ldr	r1, [pc, #16]	@ (800a110 <MX_FATFS_Init+0x18>)
 800a0fe:	4805      	ldr	r0, [pc, #20]	@ (800a114 <MX_FATFS_Init+0x1c>)
 800a100:	f002 fc5c 	bl	800c9bc <FATFS_LinkDriver>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	4b03      	ldr	r3, [pc, #12]	@ (800a118 <MX_FATFS_Init+0x20>)
 800a10a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a10c:	bf00      	nop
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20000878 	.word	0x20000878
 800a114:	0800f44c 	.word	0x0800f44c
 800a118:	20000874 	.word	0x20000874

0800a11c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a120:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a122:	4618      	mov	r0, r3
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a136:	f000 f86b 	bl	800a210 <BSP_SD_IsDetected>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d001      	beq.n	800a144 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e005      	b.n	800a150 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a144:	4804      	ldr	r0, [pc, #16]	@ (800a158 <BSP_SD_Init+0x2c>)
 800a146:	f7fc f905 	bl	8006354 <HAL_SD_Init>
 800a14a:	4603      	mov	r3, r0
 800a14c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a14e:	79fb      	ldrb	r3, [r7, #7]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20000598 	.word	0x20000598

0800a15c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af02      	add	r7, sp, #8
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	68f9      	ldr	r1, [r7, #12]
 800a178:	4806      	ldr	r0, [pc, #24]	@ (800a194 <BSP_SD_ReadBlocks+0x38>)
 800a17a:	f7fc f993 	bl	80064a4 <HAL_SD_ReadBlocks>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20000598 	.word	0x20000598

0800a198 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	4806      	ldr	r0, [pc, #24]	@ (800a1d0 <BSP_SD_WriteBlocks+0x38>)
 800a1b6:	f7fc fb5b 	bl	8006870 <HAL_SD_WriteBlocks>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000598 	.word	0x20000598

0800a1d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a1d8:	4805      	ldr	r0, [pc, #20]	@ (800a1f0 <BSP_SD_GetCardState+0x1c>)
 800a1da:	f7fc fea7 	bl	8006f2c <HAL_SD_GetCardState>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	bf14      	ite	ne
 800a1e4:	2301      	movne	r3, #1
 800a1e6:	2300      	moveq	r3, #0
 800a1e8:	b2db      	uxtb	r3, r3
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000598 	.word	0x20000598

0800a1f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4803      	ldr	r0, [pc, #12]	@ (800a20c <BSP_SD_GetCardInfo+0x18>)
 800a200:	f7fc fe68 	bl	8006ed4 <HAL_SD_GetCardInfo>
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20000598 	.word	0x20000598

0800a210 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a216:	2301      	movs	r3, #1
 800a218:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a21a:	79fb      	ldrb	r3, [r7, #7]
 800a21c:	b2db      	uxtb	r3, r3
}
 800a21e:	4618      	mov	r0, r3
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a236:	4b0b      	ldr	r3, [pc, #44]	@ (800a264 <SD_CheckStatus+0x38>)
 800a238:	2201      	movs	r2, #1
 800a23a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a23c:	f7ff ffca 	bl	800a1d4 <BSP_SD_GetCardState>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d107      	bne.n	800a256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a246:	4b07      	ldr	r3, [pc, #28]	@ (800a264 <SD_CheckStatus+0x38>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	b2da      	uxtb	r2, r3
 800a252:	4b04      	ldr	r3, [pc, #16]	@ (800a264 <SD_CheckStatus+0x38>)
 800a254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a256:	4b03      	ldr	r3, [pc, #12]	@ (800a264 <SD_CheckStatus+0x38>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b2db      	uxtb	r3, r3
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	2000000d 	.word	0x2000000d

0800a268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a272:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a0 <SD_initialize+0x38>)
 800a274:	2201      	movs	r2, #1
 800a276:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a278:	f7ff ff58 	bl	800a12c <BSP_SD_Init>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d107      	bne.n	800a292 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff ffd1 	bl	800a22c <SD_CheckStatus>
 800a28a:	4603      	mov	r3, r0
 800a28c:	461a      	mov	r2, r3
 800a28e:	4b04      	ldr	r3, [pc, #16]	@ (800a2a0 <SD_initialize+0x38>)
 800a290:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a292:	4b03      	ldr	r3, [pc, #12]	@ (800a2a0 <SD_initialize+0x38>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b2db      	uxtb	r3, r3
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	2000000d 	.word	0x2000000d

0800a2a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a2ae:	79fb      	ldrb	r3, [r7, #7]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff ffbb 	bl	800a22c <SD_CheckStatus>
 800a2b6:	4603      	mov	r3, r0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	603b      	str	r3, [r7, #0]
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	68b8      	ldr	r0, [r7, #8]
 800a2de:	f7ff ff3d 	bl	800a15c <BSP_SD_ReadBlocks>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d107      	bne.n	800a2f8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a2e8:	bf00      	nop
 800a2ea:	f7ff ff73 	bl	800a1d4 <BSP_SD_GetCardState>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1fa      	bne.n	800a2ea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b086      	sub	sp, #24
 800a306:	af00      	add	r7, sp, #0
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	603b      	str	r3, [r7, #0]
 800a30e:	4603      	mov	r3, r0
 800a310:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a316:	f04f 33ff 	mov.w	r3, #4294967295
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	68b8      	ldr	r0, [r7, #8]
 800a320:	f7ff ff3a 	bl	800a198 <BSP_SD_WriteBlocks>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d107      	bne.n	800a33a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a32a:	bf00      	nop
 800a32c:	f7ff ff52 	bl	800a1d4 <BSP_SD_GetCardState>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1fa      	bne.n	800a32c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08c      	sub	sp, #48	@ 0x30
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	603a      	str	r2, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
 800a350:	460b      	mov	r3, r1
 800a352:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a35a:	4b25      	ldr	r3, [pc, #148]	@ (800a3f0 <SD_ioctl+0xac>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <SD_ioctl+0x28>
 800a368:	2303      	movs	r3, #3
 800a36a:	e03c      	b.n	800a3e6 <SD_ioctl+0xa2>

  switch (cmd)
 800a36c:	79bb      	ldrb	r3, [r7, #6]
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d834      	bhi.n	800a3dc <SD_ioctl+0x98>
 800a372:	a201      	add	r2, pc, #4	@ (adr r2, 800a378 <SD_ioctl+0x34>)
 800a374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a378:	0800a389 	.word	0x0800a389
 800a37c:	0800a391 	.word	0x0800a391
 800a380:	0800a3a9 	.word	0x0800a3a9
 800a384:	0800a3c3 	.word	0x0800a3c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a38e:	e028      	b.n	800a3e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a390:	f107 030c 	add.w	r3, r7, #12
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff ff2d 	bl	800a1f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a3a6:	e01c      	b.n	800a3e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3a8:	f107 030c 	add.w	r3, r7, #12
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ff21 	bl	800a1f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a3c0:	e00f      	b.n	800a3e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3c2:	f107 030c 	add.w	r3, r7, #12
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff ff14 	bl	800a1f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ce:	0a5a      	lsrs	r2, r3, #9
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a3da:	e002      	b.n	800a3e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3dc:	2304      	movs	r3, #4
 800a3de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3730      	adds	r7, #48	@ 0x30
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	2000000d 	.word	0x2000000d

0800a3f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	4a08      	ldr	r2, [pc, #32]	@ (800a424 <disk_status+0x30>)
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	79fa      	ldrb	r2, [r7, #7]
 800a40c:	4905      	ldr	r1, [pc, #20]	@ (800a424 <disk_status+0x30>)
 800a40e:	440a      	add	r2, r1
 800a410:	7a12      	ldrb	r2, [r2, #8]
 800a412:	4610      	mov	r0, r2
 800a414:	4798      	blx	r3
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	200008a4 	.word	0x200008a4

0800a428 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	4603      	mov	r3, r0
 800a430:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	4a0e      	ldr	r2, [pc, #56]	@ (800a474 <disk_initialize+0x4c>)
 800a43a:	5cd3      	ldrb	r3, [r2, r3]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d114      	bne.n	800a46a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	4a0c      	ldr	r2, [pc, #48]	@ (800a474 <disk_initialize+0x4c>)
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	79fa      	ldrb	r2, [r7, #7]
 800a44e:	4909      	ldr	r1, [pc, #36]	@ (800a474 <disk_initialize+0x4c>)
 800a450:	440a      	add	r2, r1
 800a452:	7a12      	ldrb	r2, [r2, #8]
 800a454:	4610      	mov	r0, r2
 800a456:	4798      	blx	r3
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d103      	bne.n	800a46a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a462:	79fb      	ldrb	r3, [r7, #7]
 800a464:	4a03      	ldr	r2, [pc, #12]	@ (800a474 <disk_initialize+0x4c>)
 800a466:	2101      	movs	r1, #1
 800a468:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200008a4 	.word	0x200008a4

0800a478 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	4a0a      	ldr	r2, [pc, #40]	@ (800a4b4 <disk_read+0x3c>)
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	689c      	ldr	r4, [r3, #8]
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	4a07      	ldr	r2, [pc, #28]	@ (800a4b4 <disk_read+0x3c>)
 800a498:	4413      	add	r3, r2
 800a49a:	7a18      	ldrb	r0, [r3, #8]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	47a0      	blx	r4
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd90      	pop	{r4, r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	200008a4 	.word	0x200008a4

0800a4b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a4b8:	b590      	push	{r4, r7, lr}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	4a0a      	ldr	r2, [pc, #40]	@ (800a4f4 <disk_write+0x3c>)
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	68dc      	ldr	r4, [r3, #12]
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	4a07      	ldr	r2, [pc, #28]	@ (800a4f4 <disk_write+0x3c>)
 800a4d8:	4413      	add	r3, r2
 800a4da:	7a18      	ldrb	r0, [r3, #8]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	47a0      	blx	r4
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	371c      	adds	r7, #28
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd90      	pop	{r4, r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	200008a4 	.word	0x200008a4

0800a4f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	603a      	str	r2, [r7, #0]
 800a502:	71fb      	strb	r3, [r7, #7]
 800a504:	460b      	mov	r3, r1
 800a506:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	4a09      	ldr	r2, [pc, #36]	@ (800a530 <disk_ioctl+0x38>)
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	79fa      	ldrb	r2, [r7, #7]
 800a516:	4906      	ldr	r1, [pc, #24]	@ (800a530 <disk_ioctl+0x38>)
 800a518:	440a      	add	r2, r1
 800a51a:	7a10      	ldrb	r0, [r2, #8]
 800a51c:	79b9      	ldrb	r1, [r7, #6]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	4798      	blx	r3
 800a522:	4603      	mov	r3, r0
 800a524:	73fb      	strb	r3, [r7, #15]
  return res;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	200008a4 	.word	0x200008a4

0800a534 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3301      	adds	r3, #1
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a544:	89fb      	ldrh	r3, [r7, #14]
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	b21a      	sxth	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	b21b      	sxth	r3, r3
 800a550:	4313      	orrs	r3, r2
 800a552:	b21b      	sxth	r3, r3
 800a554:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a556:	89fb      	ldrh	r3, [r7, #14]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3303      	adds	r3, #3
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	021b      	lsls	r3, r3, #8
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	3202      	adds	r2, #2
 800a57c:	7812      	ldrb	r2, [r2, #0]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	021b      	lsls	r3, r3, #8
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	3201      	adds	r2, #1
 800a58a:	7812      	ldrb	r2, [r2, #0]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	7812      	ldrb	r2, [r2, #0]
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a59c:	68fb      	ldr	r3, [r7, #12]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	887a      	ldrh	r2, [r7, #2]
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	887b      	ldrh	r3, [r7, #2]
 800a5c4:	0a1b      	lsrs	r3, r3, #8
 800a5c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	887a      	ldrh	r2, [r7, #2]
 800a5d0:	b2d2      	uxtb	r2, r2
 800a5d2:	701a      	strb	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	0a1b      	lsrs	r3, r3, #8
 800a5fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	607a      	str	r2, [r7, #4]
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	b2d2      	uxtb	r2, r2
 800a606:	701a      	strb	r2, [r3, #0]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	0a1b      	lsrs	r3, r3, #8
 800a60c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	0a1b      	lsrs	r3, r3, #8
 800a61e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	607a      	str	r2, [r7, #4]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	b2d2      	uxtb	r2, r2
 800a62a:	701a      	strb	r2, [r3, #0]
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00d      	beq.n	800a66e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	1c53      	adds	r3, r2, #1
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	1c59      	adds	r1, r3, #1
 800a65c:	6179      	str	r1, [r7, #20]
 800a65e:	7812      	ldrb	r2, [r2, #0]
 800a660:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3b01      	subs	r3, #1
 800a666:	607b      	str	r3, [r7, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1f1      	bne.n	800a652 <mem_cpy+0x1a>
	}
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a67a:	b480      	push	{r7}
 800a67c:	b087      	sub	sp, #28
 800a67e:	af00      	add	r7, sp, #0
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	617a      	str	r2, [r7, #20]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3b01      	subs	r3, #1
 800a69a:	607b      	str	r3, [r7, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1f3      	bne.n	800a68a <mem_set+0x10>
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	371c      	adds	r7, #28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a6b0:	b480      	push	{r7}
 800a6b2:	b089      	sub	sp, #36	@ 0x24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	61fb      	str	r3, [r7, #28]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	61fa      	str	r2, [r7, #28]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	61ba      	str	r2, [r7, #24]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	1acb      	subs	r3, r1, r3
 800a6dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	607b      	str	r3, [r7, #4]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <mem_cmp+0x40>
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0eb      	beq.n	800a6c8 <mem_cmp+0x18>

	return r;
 800a6f0:	697b      	ldr	r3, [r7, #20]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3724      	adds	r7, #36	@ 0x24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a708:	e002      	b.n	800a710 <chk_chr+0x12>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3301      	adds	r3, #1
 800a70e:	607b      	str	r3, [r7, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <chk_chr+0x26>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	461a      	mov	r2, r3
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	4293      	cmp	r3, r2
 800a722:	d1f2      	bne.n	800a70a <chk_chr+0xc>
	return *str;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	781b      	ldrb	r3, [r3, #0]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a73e:	2300      	movs	r3, #0
 800a740:	60bb      	str	r3, [r7, #8]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	e029      	b.n	800a79c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a748:	4a27      	ldr	r2, [pc, #156]	@ (800a7e8 <chk_lock+0xb4>)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	4413      	add	r3, r2
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d01d      	beq.n	800a792 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a756:	4a24      	ldr	r2, [pc, #144]	@ (800a7e8 <chk_lock+0xb4>)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	4413      	add	r3, r2
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	429a      	cmp	r2, r3
 800a766:	d116      	bne.n	800a796 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a768:	4a1f      	ldr	r2, [pc, #124]	@ (800a7e8 <chk_lock+0xb4>)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	4413      	add	r3, r2
 800a770:	3304      	adds	r3, #4
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a778:	429a      	cmp	r2, r3
 800a77a:	d10c      	bne.n	800a796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a77c:	4a1a      	ldr	r2, [pc, #104]	@ (800a7e8 <chk_lock+0xb4>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	4413      	add	r3, r2
 800a784:	3308      	adds	r3, #8
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d102      	bne.n	800a796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a790:	e007      	b.n	800a7a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a792:	2301      	movs	r3, #1
 800a794:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d9d2      	bls.n	800a748 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d109      	bne.n	800a7bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d102      	bne.n	800a7b4 <chk_lock+0x80>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d101      	bne.n	800a7b8 <chk_lock+0x84>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	e010      	b.n	800a7da <chk_lock+0xa6>
 800a7b8:	2312      	movs	r3, #18
 800a7ba:	e00e      	b.n	800a7da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d108      	bne.n	800a7d4 <chk_lock+0xa0>
 800a7c2:	4a09      	ldr	r2, [pc, #36]	@ (800a7e8 <chk_lock+0xb4>)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	4413      	add	r3, r2
 800a7ca:	330c      	adds	r3, #12
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7d2:	d101      	bne.n	800a7d8 <chk_lock+0xa4>
 800a7d4:	2310      	movs	r3, #16
 800a7d6:	e000      	b.n	800a7da <chk_lock+0xa6>
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000884 	.word	0x20000884

0800a7ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	607b      	str	r3, [r7, #4]
 800a7f6:	e002      	b.n	800a7fe <enq_lock+0x12>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	607b      	str	r3, [r7, #4]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d806      	bhi.n	800a812 <enq_lock+0x26>
 800a804:	4a09      	ldr	r2, [pc, #36]	@ (800a82c <enq_lock+0x40>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	011b      	lsls	r3, r3, #4
 800a80a:	4413      	add	r3, r2
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1f2      	bne.n	800a7f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b02      	cmp	r3, #2
 800a816:	bf14      	ite	ne
 800a818:	2301      	movne	r3, #1
 800a81a:	2300      	moveq	r3, #0
 800a81c:	b2db      	uxtb	r3, r3
}
 800a81e:	4618      	mov	r0, r3
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	20000884 	.word	0x20000884

0800a830 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	e01f      	b.n	800a880 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a840:	4a41      	ldr	r2, [pc, #260]	@ (800a948 <inc_lock+0x118>)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	4413      	add	r3, r2
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d113      	bne.n	800a87a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a852:	4a3d      	ldr	r2, [pc, #244]	@ (800a948 <inc_lock+0x118>)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	4413      	add	r3, r2
 800a85a:	3304      	adds	r3, #4
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a862:	429a      	cmp	r2, r3
 800a864:	d109      	bne.n	800a87a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a866:	4a38      	ldr	r2, [pc, #224]	@ (800a948 <inc_lock+0x118>)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	011b      	lsls	r3, r3, #4
 800a86c:	4413      	add	r3, r2
 800a86e:	3308      	adds	r3, #8
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a876:	429a      	cmp	r2, r3
 800a878:	d006      	beq.n	800a888 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3301      	adds	r3, #1
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d9dc      	bls.n	800a840 <inc_lock+0x10>
 800a886:	e000      	b.n	800a88a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a888:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d132      	bne.n	800a8f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e002      	b.n	800a89c <inc_lock+0x6c>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3301      	adds	r3, #1
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d806      	bhi.n	800a8b0 <inc_lock+0x80>
 800a8a2:	4a29      	ldr	r2, [pc, #164]	@ (800a948 <inc_lock+0x118>)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	011b      	lsls	r3, r3, #4
 800a8a8:	4413      	add	r3, r2
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1f2      	bne.n	800a896 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d101      	bne.n	800a8ba <inc_lock+0x8a>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e040      	b.n	800a93c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	4922      	ldr	r1, [pc, #136]	@ (800a948 <inc_lock+0x118>)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	440b      	add	r3, r1
 800a8c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	491e      	ldr	r1, [pc, #120]	@ (800a948 <inc_lock+0x118>)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	695a      	ldr	r2, [r3, #20]
 800a8dc:	491a      	ldr	r1, [pc, #104]	@ (800a948 <inc_lock+0x118>)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	011b      	lsls	r3, r3, #4
 800a8e2:	440b      	add	r3, r1
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8e8:	4a17      	ldr	r2, [pc, #92]	@ (800a948 <inc_lock+0x118>)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	4413      	add	r3, r2
 800a8f0:	330c      	adds	r3, #12
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d009      	beq.n	800a910 <inc_lock+0xe0>
 800a8fc:	4a12      	ldr	r2, [pc, #72]	@ (800a948 <inc_lock+0x118>)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	4413      	add	r3, r2
 800a904:	330c      	adds	r3, #12
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <inc_lock+0xe0>
 800a90c:	2300      	movs	r3, #0
 800a90e:	e015      	b.n	800a93c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d108      	bne.n	800a928 <inc_lock+0xf8>
 800a916:	4a0c      	ldr	r2, [pc, #48]	@ (800a948 <inc_lock+0x118>)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	011b      	lsls	r3, r3, #4
 800a91c:	4413      	add	r3, r2
 800a91e:	330c      	adds	r3, #12
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	b29a      	uxth	r2, r3
 800a926:	e001      	b.n	800a92c <inc_lock+0xfc>
 800a928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a92c:	4906      	ldr	r1, [pc, #24]	@ (800a948 <inc_lock+0x118>)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	011b      	lsls	r3, r3, #4
 800a932:	440b      	add	r3, r1
 800a934:	330c      	adds	r3, #12
 800a936:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3301      	adds	r3, #1
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	20000884 	.word	0x20000884

0800a94c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3b01      	subs	r3, #1
 800a958:	607b      	str	r3, [r7, #4]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d825      	bhi.n	800a9ac <dec_lock+0x60>
		n = Files[i].ctr;
 800a960:	4a17      	ldr	r2, [pc, #92]	@ (800a9c0 <dec_lock+0x74>)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	011b      	lsls	r3, r3, #4
 800a966:	4413      	add	r3, r2
 800a968:	330c      	adds	r3, #12
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a96e:	89fb      	ldrh	r3, [r7, #14]
 800a970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a974:	d101      	bne.n	800a97a <dec_lock+0x2e>
 800a976:	2300      	movs	r3, #0
 800a978:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a97a:	89fb      	ldrh	r3, [r7, #14]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <dec_lock+0x3a>
 800a980:	89fb      	ldrh	r3, [r7, #14]
 800a982:	3b01      	subs	r3, #1
 800a984:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a986:	4a0e      	ldr	r2, [pc, #56]	@ (800a9c0 <dec_lock+0x74>)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	011b      	lsls	r3, r3, #4
 800a98c:	4413      	add	r3, r2
 800a98e:	330c      	adds	r3, #12
 800a990:	89fa      	ldrh	r2, [r7, #14]
 800a992:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a994:	89fb      	ldrh	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d105      	bne.n	800a9a6 <dec_lock+0x5a>
 800a99a:	4a09      	ldr	r2, [pc, #36]	@ (800a9c0 <dec_lock+0x74>)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	4413      	add	r3, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	737b      	strb	r3, [r7, #13]
 800a9aa:	e001      	b.n	800a9b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a9b0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20000884 	.word	0x20000884

0800a9c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e010      	b.n	800a9f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9d2:	4a0d      	ldr	r2, [pc, #52]	@ (800aa08 <clear_lock+0x44>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	011b      	lsls	r3, r3, #4
 800a9d8:	4413      	add	r3, r2
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d105      	bne.n	800a9ee <clear_lock+0x2a>
 800a9e2:	4a09      	ldr	r2, [pc, #36]	@ (800aa08 <clear_lock+0x44>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	4413      	add	r3, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d9eb      	bls.n	800a9d2 <clear_lock+0xe>
	}
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	20000884 	.word	0x20000884

0800aa0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	78db      	ldrb	r3, [r3, #3]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d034      	beq.n	800aa8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	7858      	ldrb	r0, [r3, #1]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa30:	2301      	movs	r3, #1
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	f7ff fd40 	bl	800a4b8 <disk_write>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	73fb      	strb	r3, [r7, #15]
 800aa42:	e022      	b.n	800aa8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	1ad2      	subs	r2, r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d217      	bcs.n	800aa8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	789b      	ldrb	r3, [r3, #2]
 800aa5e:	613b      	str	r3, [r7, #16]
 800aa60:	e010      	b.n	800aa84 <sync_window+0x78>
					wsect += fs->fsize;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	4413      	add	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	7858      	ldrb	r0, [r3, #1]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa76:	2301      	movs	r3, #1
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	f7ff fd1d 	bl	800a4b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d8eb      	bhi.n	800aa62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d01b      	beq.n	800aae4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff ffad 	bl	800aa0c <sync_window>
 800aab2:	4603      	mov	r3, r0
 800aab4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d113      	bne.n	800aae4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	7858      	ldrb	r0, [r3, #1]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aac6:	2301      	movs	r3, #1
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	f7ff fcd5 	bl	800a478 <disk_read>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d004      	beq.n	800aade <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aad4:	f04f 33ff 	mov.w	r3, #4294967295
 800aad8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aada:	2301      	movs	r3, #1
 800aadc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff ff87 	bl	800aa0c <sync_window>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d158      	bne.n	800abba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d148      	bne.n	800aba2 <sync_fs+0xb2>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	791b      	ldrb	r3, [r3, #4]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d144      	bne.n	800aba2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3330      	adds	r3, #48	@ 0x30
 800ab1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab20:	2100      	movs	r1, #0
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fda9 	bl	800a67a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3330      	adds	r3, #48	@ 0x30
 800ab2c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ab30:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fd38 	bl	800a5aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3330      	adds	r3, #48	@ 0x30
 800ab3e:	4921      	ldr	r1, [pc, #132]	@ (800abc4 <sync_fs+0xd4>)
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff fd4d 	bl	800a5e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	3330      	adds	r3, #48	@ 0x30
 800ab4a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ab4e:	491e      	ldr	r1, [pc, #120]	@ (800abc8 <sync_fs+0xd8>)
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fd45 	bl	800a5e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3330      	adds	r3, #48	@ 0x30
 800ab5a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	4619      	mov	r1, r3
 800ab64:	4610      	mov	r0, r2
 800ab66:	f7ff fd3b 	bl	800a5e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3330      	adds	r3, #48	@ 0x30
 800ab6e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	4619      	mov	r1, r3
 800ab78:	4610      	mov	r0, r2
 800ab7a:	f7ff fd31 	bl	800a5e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7858      	ldrb	r0, [r3, #1]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab96:	2301      	movs	r3, #1
 800ab98:	f7ff fc8e 	bl	800a4b8 <disk_write>
			fs->fsi_flag = 0;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2200      	movs	r2, #0
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff fca4 	bl	800a4f8 <disk_ioctl>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <sync_fs+0xca>
 800abb6:	2301      	movs	r3, #1
 800abb8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	41615252 	.word	0x41615252
 800abc8:	61417272 	.word	0x61417272

0800abcc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	3b02      	subs	r3, #2
 800abda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	3b02      	subs	r3, #2
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d301      	bcc.n	800abec <clust2sect+0x20>
 800abe8:	2300      	movs	r3, #0
 800abea:	e008      	b.n	800abfe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	895b      	ldrh	r3, [r3, #10]
 800abf0:	461a      	mov	r2, r3
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	fb03 f202 	mul.w	r2, r3, r2
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfc:	4413      	add	r3, r2
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b086      	sub	sp, #24
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d904      	bls.n	800ac2a <get_fat+0x20>
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d302      	bcc.n	800ac30 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	e08e      	b.n	800ad4e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ac30:	f04f 33ff 	mov.w	r3, #4294967295
 800ac34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d061      	beq.n	800ad02 <get_fat+0xf8>
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	dc7b      	bgt.n	800ad3a <get_fat+0x130>
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d002      	beq.n	800ac4c <get_fat+0x42>
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d041      	beq.n	800acce <get_fat+0xc4>
 800ac4a:	e076      	b.n	800ad3a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	085b      	lsrs	r3, r3, #1
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4413      	add	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6a1a      	ldr	r2, [r3, #32]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	0a5b      	lsrs	r3, r3, #9
 800ac62:	4413      	add	r3, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	6938      	ldr	r0, [r7, #16]
 800ac68:	f7ff ff14 	bl	800aa94 <move_window>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d166      	bne.n	800ad40 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	60fa      	str	r2, [r7, #12]
 800ac78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	6a1a      	ldr	r2, [r3, #32]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	0a5b      	lsrs	r3, r3, #9
 800ac8e:	4413      	add	r3, r2
 800ac90:	4619      	mov	r1, r3
 800ac92:	6938      	ldr	r0, [r7, #16]
 800ac94:	f7ff fefe 	bl	800aa94 <move_window>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d152      	bne.n	800ad44 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4413      	add	r3, r2
 800aca8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <get_fat+0xba>
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	091b      	lsrs	r3, r3, #4
 800acc2:	e002      	b.n	800acca <get_fat+0xc0>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acca:	617b      	str	r3, [r7, #20]
			break;
 800accc:	e03f      	b.n	800ad4e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	6a1a      	ldr	r2, [r3, #32]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	4413      	add	r3, r2
 800acd8:	4619      	mov	r1, r3
 800acda:	6938      	ldr	r0, [r7, #16]
 800acdc:	f7ff feda 	bl	800aa94 <move_window>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d130      	bne.n	800ad48 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800acf4:	4413      	add	r3, r2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff fc1c 	bl	800a534 <ld_word>
 800acfc:	4603      	mov	r3, r0
 800acfe:	617b      	str	r3, [r7, #20]
			break;
 800ad00:	e025      	b.n	800ad4e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6a1a      	ldr	r2, [r3, #32]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	09db      	lsrs	r3, r3, #7
 800ad0a:	4413      	add	r3, r2
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6938      	ldr	r0, [r7, #16]
 800ad10:	f7ff fec0 	bl	800aa94 <move_window>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d118      	bne.n	800ad4c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ad28:	4413      	add	r3, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff fc1a 	bl	800a564 <ld_dword>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ad36:	617b      	str	r3, [r7, #20]
			break;
 800ad38:	e009      	b.n	800ad4e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	617b      	str	r3, [r7, #20]
 800ad3e:	e006      	b.n	800ad4e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad40:	bf00      	nop
 800ad42:	e004      	b.n	800ad4e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad44:	bf00      	nop
 800ad46:	e002      	b.n	800ad4e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad48:	bf00      	nop
 800ad4a:	e000      	b.n	800ad4e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad4c:	bf00      	nop
		}
	}

	return val;
 800ad4e:	697b      	ldr	r3, [r7, #20]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad58:	b590      	push	{r4, r7, lr}
 800ad5a:	b089      	sub	sp, #36	@ 0x24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad64:	2302      	movs	r3, #2
 800ad66:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	f240 80d9 	bls.w	800af22 <put_fat+0x1ca>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	f080 80d3 	bcs.w	800af22 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	f000 8096 	beq.w	800aeb2 <put_fat+0x15a>
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	f300 80cb 	bgt.w	800af22 <put_fat+0x1ca>
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d002      	beq.n	800ad96 <put_fat+0x3e>
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d06e      	beq.n	800ae72 <put_fat+0x11a>
 800ad94:	e0c5      	b.n	800af22 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	61bb      	str	r3, [r7, #24]
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	085b      	lsrs	r3, r3, #1
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	4413      	add	r3, r2
 800ada2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6a1a      	ldr	r2, [r3, #32]
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	0a5b      	lsrs	r3, r3, #9
 800adac:	4413      	add	r3, r2
 800adae:	4619      	mov	r1, r3
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7ff fe6f 	bl	800aa94 <move_window>
 800adb6:	4603      	mov	r3, r0
 800adb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adba:	7ffb      	ldrb	r3, [r7, #31]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f040 80a9 	bne.w	800af14 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	1c59      	adds	r1, r3, #1
 800adcc:	61b9      	str	r1, [r7, #24]
 800adce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add2:	4413      	add	r3, r2
 800add4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00d      	beq.n	800adfc <put_fat+0xa4>
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	b25b      	sxtb	r3, r3
 800ade6:	f003 030f 	and.w	r3, r3, #15
 800adea:	b25a      	sxtb	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	011b      	lsls	r3, r3, #4
 800adf2:	b25b      	sxtb	r3, r3
 800adf4:	4313      	orrs	r3, r2
 800adf6:	b25b      	sxtb	r3, r3
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	e001      	b.n	800ae00 <put_fat+0xa8>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2201      	movs	r2, #1
 800ae08:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6a1a      	ldr	r2, [r3, #32]
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	0a5b      	lsrs	r3, r3, #9
 800ae12:	4413      	add	r3, r2
 800ae14:	4619      	mov	r1, r3
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff fe3c 	bl	800aa94 <move_window>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae20:	7ffb      	ldrb	r3, [r7, #31]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d178      	bne.n	800af18 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae32:	4413      	add	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <put_fat+0xf0>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	091b      	lsrs	r3, r3, #4
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	e00e      	b.n	800ae66 <put_fat+0x10e>
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	b25b      	sxtb	r3, r3
 800ae4e:	f023 030f 	bic.w	r3, r3, #15
 800ae52:	b25a      	sxtb	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	0a1b      	lsrs	r3, r3, #8
 800ae58:	b25b      	sxtb	r3, r3
 800ae5a:	f003 030f 	and.w	r3, r3, #15
 800ae5e:	b25b      	sxtb	r3, r3
 800ae60:	4313      	orrs	r3, r2
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	70da      	strb	r2, [r3, #3]
			break;
 800ae70:	e057      	b.n	800af22 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1a      	ldr	r2, [r3, #32]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	0a1b      	lsrs	r3, r3, #8
 800ae7a:	4413      	add	r3, r2
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7ff fe08 	bl	800aa94 <move_window>
 800ae84:	4603      	mov	r3, r0
 800ae86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae88:	7ffb      	ldrb	r3, [r7, #31]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d146      	bne.n	800af1c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ae9c:	4413      	add	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	b292      	uxth	r2, r2
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7ff fb80 	bl	800a5aa <st_word>
			fs->wflag = 1;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2201      	movs	r2, #1
 800aeae:	70da      	strb	r2, [r3, #3]
			break;
 800aeb0:	e037      	b.n	800af22 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a1a      	ldr	r2, [r3, #32]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	09db      	lsrs	r3, r3, #7
 800aeba:	4413      	add	r3, r2
 800aebc:	4619      	mov	r1, r3
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff fde8 	bl	800aa94 <move_window>
 800aec4:	4603      	mov	r3, r0
 800aec6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aec8:	7ffb      	ldrb	r3, [r7, #31]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d128      	bne.n	800af20 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800aee2:	4413      	add	r3, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff fb3d 	bl	800a564 <ld_dword>
 800aeea:	4603      	mov	r3, r0
 800aeec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800aef0:	4323      	orrs	r3, r4
 800aef2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800af02:	4413      	add	r3, r2
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff fb6a 	bl	800a5e0 <st_dword>
			fs->wflag = 1;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	70da      	strb	r2, [r3, #3]
			break;
 800af12:	e006      	b.n	800af22 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af14:	bf00      	nop
 800af16:	e004      	b.n	800af22 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af18:	bf00      	nop
 800af1a:	e002      	b.n	800af22 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af1c:	bf00      	nop
 800af1e:	e000      	b.n	800af22 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af20:	bf00      	nop
		}
	}
	return res;
 800af22:	7ffb      	ldrb	r3, [r7, #31]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3724      	adds	r7, #36	@ 0x24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd90      	pop	{r4, r7, pc}

0800af2c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d904      	bls.n	800af52 <remove_chain+0x26>
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d301      	bcc.n	800af56 <remove_chain+0x2a>
 800af52:	2302      	movs	r3, #2
 800af54:	e04b      	b.n	800afee <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00c      	beq.n	800af76 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800af5c:	f04f 32ff 	mov.w	r2, #4294967295
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	69b8      	ldr	r0, [r7, #24]
 800af64:	f7ff fef8 	bl	800ad58 <put_fat>
 800af68:	4603      	mov	r3, r0
 800af6a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800af6c:	7ffb      	ldrb	r3, [r7, #31]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <remove_chain+0x4a>
 800af72:	7ffb      	ldrb	r3, [r7, #31]
 800af74:	e03b      	b.n	800afee <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800af76:	68b9      	ldr	r1, [r7, #8]
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7ff fe46 	bl	800ac0a <get_fat>
 800af7e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d031      	beq.n	800afea <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d101      	bne.n	800af90 <remove_chain+0x64>
 800af8c:	2302      	movs	r3, #2
 800af8e:	e02e      	b.n	800afee <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d101      	bne.n	800af9c <remove_chain+0x70>
 800af98:	2301      	movs	r3, #1
 800af9a:	e028      	b.n	800afee <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800af9c:	2200      	movs	r2, #0
 800af9e:	68b9      	ldr	r1, [r7, #8]
 800afa0:	69b8      	ldr	r0, [r7, #24]
 800afa2:	f7ff fed9 	bl	800ad58 <put_fat>
 800afa6:	4603      	mov	r3, r0
 800afa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800afaa:	7ffb      	ldrb	r3, [r7, #31]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <remove_chain+0x88>
 800afb0:	7ffb      	ldrb	r3, [r7, #31]
 800afb2:	e01c      	b.n	800afee <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	3b02      	subs	r3, #2
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d20b      	bcs.n	800afda <remove_chain+0xae>
			fs->free_clst++;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	791b      	ldrb	r3, [r3, #4]
 800afd0:	f043 0301 	orr.w	r3, r3, #1
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	695b      	ldr	r3, [r3, #20]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d3c6      	bcc.n	800af76 <remove_chain+0x4a>
 800afe8:	e000      	b.n	800afec <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800afea:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3720      	adds	r7, #32
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b088      	sub	sp, #32
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10d      	bne.n	800b028 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d004      	beq.n	800b022 <create_chain+0x2c>
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d31b      	bcc.n	800b05a <create_chain+0x64>
 800b022:	2301      	movs	r3, #1
 800b024:	61bb      	str	r3, [r7, #24]
 800b026:	e018      	b.n	800b05a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff fded 	bl	800ac0a <get_fat>
 800b030:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d801      	bhi.n	800b03c <create_chain+0x46>
 800b038:	2301      	movs	r3, #1
 800b03a:	e070      	b.n	800b11e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b042:	d101      	bne.n	800b048 <create_chain+0x52>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	e06a      	b.n	800b11e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	695b      	ldr	r3, [r3, #20]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d201      	bcs.n	800b056 <create_chain+0x60>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	e063      	b.n	800b11e <create_chain+0x128>
		scl = clst;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	3301      	adds	r3, #1
 800b062:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	69fa      	ldr	r2, [r7, #28]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d307      	bcc.n	800b07e <create_chain+0x88>
				ncl = 2;
 800b06e:	2302      	movs	r3, #2
 800b070:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b072:	69fa      	ldr	r2, [r7, #28]
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	429a      	cmp	r2, r3
 800b078:	d901      	bls.n	800b07e <create_chain+0x88>
 800b07a:	2300      	movs	r3, #0
 800b07c:	e04f      	b.n	800b11e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b07e:	69f9      	ldr	r1, [r7, #28]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff fdc2 	bl	800ac0a <get_fat>
 800b086:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00e      	beq.n	800b0ac <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d003      	beq.n	800b09c <create_chain+0xa6>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09a:	d101      	bne.n	800b0a0 <create_chain+0xaa>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	e03e      	b.n	800b11e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b0a0:	69fa      	ldr	r2, [r7, #28]
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d1da      	bne.n	800b05e <create_chain+0x68>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e038      	b.n	800b11e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b0ac:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b2:	69f9      	ldr	r1, [r7, #28]
 800b0b4:	6938      	ldr	r0, [r7, #16]
 800b0b6:	f7ff fe4f 	bl	800ad58 <put_fat>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d109      	bne.n	800b0d8 <create_chain+0xe2>
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d006      	beq.n	800b0d8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b0ca:	69fa      	ldr	r2, [r7, #28]
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6938      	ldr	r0, [r7, #16]
 800b0d0:	f7ff fe42 	bl	800ad58 <put_fat>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d116      	bne.n	800b10c <create_chain+0x116>
		fs->last_clst = ncl;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	691a      	ldr	r2, [r3, #16]
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	3b02      	subs	r3, #2
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d804      	bhi.n	800b0fc <create_chain+0x106>
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	1e5a      	subs	r2, r3, #1
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	791b      	ldrb	r3, [r3, #4]
 800b100:	f043 0301 	orr.w	r3, r3, #1
 800b104:	b2da      	uxtb	r2, r3
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	711a      	strb	r2, [r3, #4]
 800b10a:	e007      	b.n	800b11c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d102      	bne.n	800b118 <create_chain+0x122>
 800b112:	f04f 33ff 	mov.w	r3, #4294967295
 800b116:	e000      	b.n	800b11a <create_chain+0x124>
 800b118:	2301      	movs	r3, #1
 800b11a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b11c:	69fb      	ldr	r3, [r7, #28]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3720      	adds	r7, #32
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b126:	b480      	push	{r7}
 800b128:	b087      	sub	sp, #28
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13a:	3304      	adds	r3, #4
 800b13c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	0a5b      	lsrs	r3, r3, #9
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	8952      	ldrh	r2, [r2, #10]
 800b146:	fbb3 f3f2 	udiv	r3, r3, r2
 800b14a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	1d1a      	adds	r2, r3, #4
 800b150:	613a      	str	r2, [r7, #16]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <clmt_clust+0x3a>
 800b15c:	2300      	movs	r3, #0
 800b15e:	e010      	b.n	800b182 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	429a      	cmp	r2, r3
 800b166:	d307      	bcc.n	800b178 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	3304      	adds	r3, #4
 800b174:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b176:	e7e9      	b.n	800b14c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b178:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	4413      	add	r3, r2
}
 800b182:	4618      	mov	r0, r3
 800b184:	371c      	adds	r7, #28
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b086      	sub	sp, #24
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1a4:	d204      	bcs.n	800b1b0 <dir_sdi+0x22>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	f003 031f 	and.w	r3, r3, #31
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e063      	b.n	800b27c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <dir_sdi+0x46>
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d902      	bls.n	800b1d4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10c      	bne.n	800b1f4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	095b      	lsrs	r3, r3, #5
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	8912      	ldrh	r2, [r2, #8]
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d301      	bcc.n	800b1ea <dir_sdi+0x5c>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e048      	b.n	800b27c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	61da      	str	r2, [r3, #28]
 800b1f2:	e029      	b.n	800b248 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	895b      	ldrh	r3, [r3, #10]
 800b1f8:	025b      	lsls	r3, r3, #9
 800b1fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b1fc:	e019      	b.n	800b232 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6979      	ldr	r1, [r7, #20]
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fd01 	bl	800ac0a <get_fat>
 800b208:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d101      	bne.n	800b216 <dir_sdi+0x88>
 800b212:	2301      	movs	r3, #1
 800b214:	e032      	b.n	800b27c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d904      	bls.n	800b226 <dir_sdi+0x98>
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	429a      	cmp	r2, r3
 800b224:	d301      	bcc.n	800b22a <dir_sdi+0x9c>
 800b226:	2302      	movs	r3, #2
 800b228:	e028      	b.n	800b27c <dir_sdi+0xee>
			ofs -= csz;
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	429a      	cmp	r2, r3
 800b238:	d2e1      	bcs.n	800b1fe <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b23a:	6979      	ldr	r1, [r7, #20]
 800b23c:	6938      	ldr	r0, [r7, #16]
 800b23e:	f7ff fcc5 	bl	800abcc <clust2sect>
 800b242:	4602      	mov	r2, r0
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	69db      	ldr	r3, [r3, #28]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <dir_sdi+0xcc>
 800b256:	2302      	movs	r3, #2
 800b258:	e010      	b.n	800b27c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	69da      	ldr	r2, [r3, #28]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	0a5b      	lsrs	r3, r3, #9
 800b262:	441a      	add	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b274:	441a      	add	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	3320      	adds	r3, #32
 800b29a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <dir_next+0x28>
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2aa:	d301      	bcc.n	800b2b0 <dir_next+0x2c>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	e0aa      	b.n	800b406 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f040 8098 	bne.w	800b3ec <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	095b      	lsrs	r3, r3, #5
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	8912      	ldrh	r2, [r2, #8]
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	f0c0 8088 	bcc.w	800b3ec <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	61da      	str	r2, [r3, #28]
 800b2e2:	2304      	movs	r3, #4
 800b2e4:	e08f      	b.n	800b406 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	0a5b      	lsrs	r3, r3, #9
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	8952      	ldrh	r2, [r2, #10]
 800b2ee:	3a01      	subs	r2, #1
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d17a      	bne.n	800b3ec <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4610      	mov	r0, r2
 800b300:	f7ff fc83 	bl	800ac0a <get_fat>
 800b304:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d801      	bhi.n	800b310 <dir_next+0x8c>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e07a      	b.n	800b406 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b316:	d101      	bne.n	800b31c <dir_next+0x98>
 800b318:	2301      	movs	r3, #1
 800b31a:	e074      	b.n	800b406 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	695b      	ldr	r3, [r3, #20]
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	429a      	cmp	r2, r3
 800b324:	d358      	bcc.n	800b3d8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d104      	bne.n	800b336 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	61da      	str	r2, [r3, #28]
 800b332:	2304      	movs	r3, #4
 800b334:	e067      	b.n	800b406 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	4619      	mov	r1, r3
 800b33e:	4610      	mov	r0, r2
 800b340:	f7ff fe59 	bl	800aff6 <create_chain>
 800b344:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <dir_next+0xcc>
 800b34c:	2307      	movs	r3, #7
 800b34e:	e05a      	b.n	800b406 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d101      	bne.n	800b35a <dir_next+0xd6>
 800b356:	2302      	movs	r3, #2
 800b358:	e055      	b.n	800b406 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b360:	d101      	bne.n	800b366 <dir_next+0xe2>
 800b362:	2301      	movs	r3, #1
 800b364:	e04f      	b.n	800b406 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7ff fb50 	bl	800aa0c <sync_window>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <dir_next+0xf2>
 800b372:	2301      	movs	r3, #1
 800b374:	e047      	b.n	800b406 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3330      	adds	r3, #48	@ 0x30
 800b37a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b37e:	2100      	movs	r1, #0
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff f97a 	bl	800a67a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b386:	2300      	movs	r3, #0
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	6979      	ldr	r1, [r7, #20]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f7ff fc1d 	bl	800abcc <clust2sect>
 800b392:	4602      	mov	r2, r0
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b398:	e012      	b.n	800b3c0 <dir_next+0x13c>
						fs->wflag = 1;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7ff fb33 	bl	800aa0c <sync_window>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <dir_next+0x12c>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e02a      	b.n	800b406 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	613b      	str	r3, [r7, #16]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	895b      	ldrh	r3, [r3, #10]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d3e6      	bcc.n	800b39a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	1ad2      	subs	r2, r2, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b3de:	6979      	ldr	r1, [r7, #20]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fbf3 	bl	800abcc <clust2sect>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fe:	441a      	add	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b086      	sub	sp, #24
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b41e:	2100      	movs	r1, #0
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff feb4 	bl	800b18e <dir_sdi>
 800b426:	4603      	mov	r3, r0
 800b428:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d12b      	bne.n	800b488 <dir_alloc+0x7a>
		n = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	69db      	ldr	r3, [r3, #28]
 800b438:	4619      	mov	r1, r3
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f7ff fb2a 	bl	800aa94 <move_window>
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b444:	7dfb      	ldrb	r3, [r7, #23]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d11d      	bne.n	800b486 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2be5      	cmp	r3, #229	@ 0xe5
 800b452:	d004      	beq.n	800b45e <dir_alloc+0x50>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d107      	bne.n	800b46e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	3301      	adds	r3, #1
 800b462:	613b      	str	r3, [r7, #16]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d102      	bne.n	800b472 <dir_alloc+0x64>
 800b46c:	e00c      	b.n	800b488 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b46e:	2300      	movs	r3, #0
 800b470:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b472:	2101      	movs	r1, #1
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7ff ff05 	bl	800b284 <dir_next>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d0d7      	beq.n	800b434 <dir_alloc+0x26>
 800b484:	e000      	b.n	800b488 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b486:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	d101      	bne.n	800b492 <dir_alloc+0x84>
 800b48e:	2307      	movs	r3, #7
 800b490:	75fb      	strb	r3, [r7, #23]
	return res;
 800b492:	7dfb      	ldrb	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	331a      	adds	r3, #26
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff f842 	bl	800a534 <ld_word>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d109      	bne.n	800b4d0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	3314      	adds	r3, #20
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff f837 	bl	800a534 <ld_word>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	041b      	lsls	r3, r3, #16
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	331a      	adds	r3, #26
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	b292      	uxth	r2, r2
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff f85a 	bl	800a5aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d109      	bne.n	800b512 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f103 0214 	add.w	r2, r3, #20
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	0c1b      	lsrs	r3, r3, #16
 800b508:	b29b      	uxth	r3, r3
 800b50a:	4619      	mov	r1, r3
 800b50c:	4610      	mov	r0, r2
 800b50e:	f7ff f84c 	bl	800a5aa <st_word>
	}
}
 800b512:	bf00      	nop
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b086      	sub	sp, #24
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff fe2f 	bl	800b18e <dir_sdi>
 800b530:	4603      	mov	r3, r0
 800b532:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <dir_find+0x24>
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	e03e      	b.n	800b5bc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	4619      	mov	r1, r3
 800b544:	6938      	ldr	r0, [r7, #16]
 800b546:	f7ff faa5 	bl	800aa94 <move_window>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d12f      	bne.n	800b5b4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d102      	bne.n	800b568 <dir_find+0x4e>
 800b562:	2304      	movs	r3, #4
 800b564:	75fb      	strb	r3, [r7, #23]
 800b566:	e028      	b.n	800b5ba <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a1b      	ldr	r3, [r3, #32]
 800b56c:	330b      	adds	r3, #11
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b574:	b2da      	uxtb	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	330b      	adds	r3, #11
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	f003 0308 	and.w	r3, r3, #8
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10a      	bne.n	800b5a0 <dir_find+0x86>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a18      	ldr	r0, [r3, #32]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3324      	adds	r3, #36	@ 0x24
 800b592:	220b      	movs	r2, #11
 800b594:	4619      	mov	r1, r3
 800b596:	f7ff f88b 	bl	800a6b0 <mem_cmp>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00b      	beq.n	800b5b8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff fe6e 	bl	800b284 <dir_next>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0c5      	beq.n	800b53e <dir_find+0x24>
 800b5b2:	e002      	b.n	800b5ba <dir_find+0xa0>
		if (res != FR_OK) break;
 800b5b4:	bf00      	nop
 800b5b6:	e000      	b.n	800b5ba <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b5b8:	bf00      	nop

	return res;
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff ff1a 	bl	800b40e <dir_alloc>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d11c      	bne.n	800b61e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	68b8      	ldr	r0, [r7, #8]
 800b5ec:	f7ff fa52 	bl	800aa94 <move_window>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d111      	bne.n	800b61e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	2220      	movs	r2, #32
 800b600:	2100      	movs	r1, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff f839 	bl	800a67a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a18      	ldr	r0, [r3, #32]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3324      	adds	r3, #36	@ 0x24
 800b610:	220b      	movs	r2, #11
 800b612:	4619      	mov	r1, r3
 800b614:	f7ff f810 	bl	800a638 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2201      	movs	r2, #1
 800b61c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3324      	adds	r3, #36	@ 0x24
 800b63c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b63e:	220b      	movs	r2, #11
 800b640:	2120      	movs	r1, #32
 800b642:	68b8      	ldr	r0, [r7, #8]
 800b644:	f7ff f819 	bl	800a67a <mem_set>
	si = i = 0; ni = 8;
 800b648:	2300      	movs	r3, #0
 800b64a:	613b      	str	r3, [r7, #16]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	61fb      	str	r3, [r7, #28]
 800b650:	2308      	movs	r3, #8
 800b652:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	61fa      	str	r2, [r7, #28]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4413      	add	r3, r2
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b662:	7efb      	ldrb	r3, [r7, #27]
 800b664:	2b20      	cmp	r3, #32
 800b666:	d94e      	bls.n	800b706 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b668:	7efb      	ldrb	r3, [r7, #27]
 800b66a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b66c:	d006      	beq.n	800b67c <create_name+0x54>
 800b66e:	7efb      	ldrb	r3, [r7, #27]
 800b670:	2b5c      	cmp	r3, #92	@ 0x5c
 800b672:	d110      	bne.n	800b696 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b674:	e002      	b.n	800b67c <create_name+0x54>
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	3301      	adds	r3, #1
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b2f      	cmp	r3, #47	@ 0x2f
 800b686:	d0f6      	beq.n	800b676 <create_name+0x4e>
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b5c      	cmp	r3, #92	@ 0x5c
 800b692:	d0f0      	beq.n	800b676 <create_name+0x4e>
			break;
 800b694:	e038      	b.n	800b708 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b696:	7efb      	ldrb	r3, [r7, #27]
 800b698:	2b2e      	cmp	r3, #46	@ 0x2e
 800b69a:	d003      	beq.n	800b6a4 <create_name+0x7c>
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d30c      	bcc.n	800b6be <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2b0b      	cmp	r3, #11
 800b6a8:	d002      	beq.n	800b6b0 <create_name+0x88>
 800b6aa:	7efb      	ldrb	r3, [r7, #27]
 800b6ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6ae:	d001      	beq.n	800b6b4 <create_name+0x8c>
 800b6b0:	2306      	movs	r3, #6
 800b6b2:	e044      	b.n	800b73e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b6b4:	2308      	movs	r3, #8
 800b6b6:	613b      	str	r3, [r7, #16]
 800b6b8:	230b      	movs	r3, #11
 800b6ba:	617b      	str	r3, [r7, #20]
			continue;
 800b6bc:	e022      	b.n	800b704 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b6be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	da04      	bge.n	800b6d0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b6c6:	7efb      	ldrb	r3, [r7, #27]
 800b6c8:	3b80      	subs	r3, #128	@ 0x80
 800b6ca:	4a1f      	ldr	r2, [pc, #124]	@ (800b748 <create_name+0x120>)
 800b6cc:	5cd3      	ldrb	r3, [r2, r3]
 800b6ce:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b6d0:	7efb      	ldrb	r3, [r7, #27]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	481d      	ldr	r0, [pc, #116]	@ (800b74c <create_name+0x124>)
 800b6d6:	f7ff f812 	bl	800a6fe <chk_chr>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <create_name+0xbc>
 800b6e0:	2306      	movs	r3, #6
 800b6e2:	e02c      	b.n	800b73e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b6e4:	7efb      	ldrb	r3, [r7, #27]
 800b6e6:	2b60      	cmp	r3, #96	@ 0x60
 800b6e8:	d905      	bls.n	800b6f6 <create_name+0xce>
 800b6ea:	7efb      	ldrb	r3, [r7, #27]
 800b6ec:	2b7a      	cmp	r3, #122	@ 0x7a
 800b6ee:	d802      	bhi.n	800b6f6 <create_name+0xce>
 800b6f0:	7efb      	ldrb	r3, [r7, #27]
 800b6f2:	3b20      	subs	r3, #32
 800b6f4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	613a      	str	r2, [r7, #16]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	4413      	add	r3, r2
 800b700:	7efa      	ldrb	r2, [r7, #27]
 800b702:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b704:	e7a6      	b.n	800b654 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b706:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	441a      	add	r2, r3
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <create_name+0xf4>
 800b718:	2306      	movs	r3, #6
 800b71a:	e010      	b.n	800b73e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2be5      	cmp	r3, #229	@ 0xe5
 800b722:	d102      	bne.n	800b72a <create_name+0x102>
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2205      	movs	r2, #5
 800b728:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b72a:	7efb      	ldrb	r3, [r7, #27]
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	d801      	bhi.n	800b734 <create_name+0x10c>
 800b730:	2204      	movs	r2, #4
 800b732:	e000      	b.n	800b736 <create_name+0x10e>
 800b734:	2200      	movs	r2, #0
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	330b      	adds	r3, #11
 800b73a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b73c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	0800f460 	.word	0x0800f460
 800b74c:	0800efb4 	.word	0x0800efb4

0800b750 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b764:	e002      	b.n	800b76c <follow_path+0x1c>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b2f      	cmp	r3, #47	@ 0x2f
 800b772:	d0f8      	beq.n	800b766 <follow_path+0x16>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b5c      	cmp	r3, #92	@ 0x5c
 800b77a:	d0f4      	beq.n	800b766 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2200      	movs	r2, #0
 800b780:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b1f      	cmp	r3, #31
 800b788:	d80a      	bhi.n	800b7a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2280      	movs	r2, #128	@ 0x80
 800b78e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b792:	2100      	movs	r1, #0
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fcfa 	bl	800b18e <dir_sdi>
 800b79a:	4603      	mov	r3, r0
 800b79c:	75fb      	strb	r3, [r7, #23]
 800b79e:	e043      	b.n	800b828 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff ff3f 	bl	800b628 <create_name>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d134      	bne.n	800b81e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff feb0 	bl	800b51a <dir_find>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b7c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00a      	beq.n	800b7e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	2b04      	cmp	r3, #4
 800b7d0:	d127      	bne.n	800b822 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b7d2:	7afb      	ldrb	r3, [r7, #11]
 800b7d4:	f003 0304 	and.w	r3, r3, #4
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d122      	bne.n	800b822 <follow_path+0xd2>
 800b7dc:	2305      	movs	r3, #5
 800b7de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b7e0:	e01f      	b.n	800b822 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d11c      	bne.n	800b826 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	799b      	ldrb	r3, [r3, #6]
 800b7f0:	f003 0310 	and.w	r3, r3, #16
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b7f8:	2305      	movs	r3, #5
 800b7fa:	75fb      	strb	r3, [r7, #23]
 800b7fc:	e014      	b.n	800b828 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b80c:	4413      	add	r3, r2
 800b80e:	4619      	mov	r1, r3
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f7ff fe43 	bl	800b49c <ld_clust>
 800b816:	4602      	mov	r2, r0
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b81c:	e7c0      	b.n	800b7a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800b81e:	bf00      	nop
 800b820:	e002      	b.n	800b828 <follow_path+0xd8>
				break;
 800b822:	bf00      	nop
 800b824:	e000      	b.n	800b828 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b826:	bf00      	nop
			}
		}
	}

	return res;
 800b828:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b832:	b480      	push	{r7}
 800b834:	b087      	sub	sp, #28
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b83a:	f04f 33ff 	mov.w	r3, #4294967295
 800b83e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d031      	beq.n	800b8ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	e002      	b.n	800b856 <get_ldnumber+0x24>
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	3301      	adds	r3, #1
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b20      	cmp	r3, #32
 800b85c:	d903      	bls.n	800b866 <get_ldnumber+0x34>
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	2b3a      	cmp	r3, #58	@ 0x3a
 800b864:	d1f4      	bne.n	800b850 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b86c:	d11c      	bne.n	800b8a8 <get_ldnumber+0x76>
			tp = *path;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	60fa      	str	r2, [r7, #12]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	3b30      	subs	r3, #48	@ 0x30
 800b87e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2b09      	cmp	r3, #9
 800b884:	d80e      	bhi.n	800b8a4 <get_ldnumber+0x72>
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d10a      	bne.n	800b8a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d107      	bne.n	800b8a4 <get_ldnumber+0x72>
					vol = (int)i;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	3301      	adds	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	e002      	b.n	800b8ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b8ac:	693b      	ldr	r3, [r7, #16]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
	...

0800b8bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	70da      	strb	r2, [r3, #3]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff f8dc 	bl	800aa94 <move_window>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <check_fs+0x2a>
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	e038      	b.n	800b958 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3330      	adds	r3, #48	@ 0x30
 800b8ea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe fe20 	bl	800a534 <ld_word>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d001      	beq.n	800b904 <check_fs+0x48>
 800b900:	2303      	movs	r3, #3
 800b902:	e029      	b.n	800b958 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b90a:	2be9      	cmp	r3, #233	@ 0xe9
 800b90c:	d009      	beq.n	800b922 <check_fs+0x66>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b914:	2beb      	cmp	r3, #235	@ 0xeb
 800b916:	d11e      	bne.n	800b956 <check_fs+0x9a>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b91e:	2b90      	cmp	r3, #144	@ 0x90
 800b920:	d119      	bne.n	800b956 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	3330      	adds	r3, #48	@ 0x30
 800b926:	3336      	adds	r3, #54	@ 0x36
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fe1b 	bl	800a564 <ld_dword>
 800b92e:	4603      	mov	r3, r0
 800b930:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b934:	4a0a      	ldr	r2, [pc, #40]	@ (800b960 <check_fs+0xa4>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d101      	bne.n	800b93e <check_fs+0x82>
 800b93a:	2300      	movs	r3, #0
 800b93c:	e00c      	b.n	800b958 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3330      	adds	r3, #48	@ 0x30
 800b942:	3352      	adds	r3, #82	@ 0x52
 800b944:	4618      	mov	r0, r3
 800b946:	f7fe fe0d 	bl	800a564 <ld_dword>
 800b94a:	4603      	mov	r3, r0
 800b94c:	4a05      	ldr	r2, [pc, #20]	@ (800b964 <check_fs+0xa8>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d101      	bne.n	800b956 <check_fs+0x9a>
 800b952:	2300      	movs	r3, #0
 800b954:	e000      	b.n	800b958 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b956:	2302      	movs	r3, #2
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	00544146 	.word	0x00544146
 800b964:	33544146 	.word	0x33544146

0800b968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b096      	sub	sp, #88	@ 0x58
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	4613      	mov	r3, r2
 800b974:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f7ff ff58 	bl	800b832 <get_ldnumber>
 800b982:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b986:	2b00      	cmp	r3, #0
 800b988:	da01      	bge.n	800b98e <find_volume+0x26>
 800b98a:	230b      	movs	r3, #11
 800b98c:	e22d      	b.n	800bdea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b98e:	4aa1      	ldr	r2, [pc, #644]	@ (800bc14 <find_volume+0x2ac>)
 800b990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b996:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <find_volume+0x3a>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	e223      	b.n	800bdea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b9a8:	79fb      	ldrb	r3, [r7, #7]
 800b9aa:	f023 0301 	bic.w	r3, r3, #1
 800b9ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01a      	beq.n	800b9ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ba:	785b      	ldrb	r3, [r3, #1]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe fd19 	bl	800a3f4 <disk_status>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b9c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10c      	bne.n	800b9ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d007      	beq.n	800b9ea <find_volume+0x82>
 800b9da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9de:	f003 0304 	and.w	r3, r3, #4
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b9e6:	230a      	movs	r3, #10
 800b9e8:	e1ff      	b.n	800bdea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e1fd      	b.n	800bdea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	785b      	ldrb	r3, [r3, #1]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe fd11 	bl	800a428 <disk_initialize>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ba0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d001      	beq.n	800ba1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e1e6      	b.n	800bdea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d007      	beq.n	800ba32 <find_volume+0xca>
 800ba22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba26:	f003 0304 	and.w	r3, r3, #4
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ba2e:	230a      	movs	r3, #10
 800ba30:	e1db      	b.n	800bdea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ba36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba3a:	f7ff ff3f 	bl	800b8bc <check_fs>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ba44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d149      	bne.n	800bae0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba50:	e01e      	b.n	800ba90 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ba52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba5a:	011b      	lsls	r3, r3, #4
 800ba5c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ba60:	4413      	add	r3, r2
 800ba62:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ba64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba66:	3304      	adds	r3, #4
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d006      	beq.n	800ba7c <find_volume+0x114>
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba70:	3308      	adds	r3, #8
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe fd76 	bl	800a564 <ld_dword>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	e000      	b.n	800ba7e <find_volume+0x116>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	3358      	adds	r3, #88	@ 0x58
 800ba84:	443b      	add	r3, r7
 800ba86:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d9dd      	bls.n	800ba52 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba96:	2300      	movs	r3, #0
 800ba98:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ba9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <find_volume+0x13e>
 800baa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baa2:	3b01      	subs	r3, #1
 800baa4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800baa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	3358      	adds	r3, #88	@ 0x58
 800baac:	443b      	add	r3, r7
 800baae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bab2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d005      	beq.n	800bac6 <find_volume+0x15e>
 800baba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800babc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800babe:	f7ff fefd 	bl	800b8bc <check_fs>
 800bac2:	4603      	mov	r3, r0
 800bac4:	e000      	b.n	800bac8 <find_volume+0x160>
 800bac6:	2303      	movs	r3, #3
 800bac8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bacc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d905      	bls.n	800bae0 <find_volume+0x178>
 800bad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bad6:	3301      	adds	r3, #1
 800bad8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800badc:	2b03      	cmp	r3, #3
 800bade:	d9e2      	bls.n	800baa6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bae0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d101      	bne.n	800baec <find_volume+0x184>
 800bae8:	2301      	movs	r3, #1
 800baea:	e17e      	b.n	800bdea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800baec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d901      	bls.n	800baf8 <find_volume+0x190>
 800baf4:	230d      	movs	r3, #13
 800baf6:	e178      	b.n	800bdea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800baf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafa:	3330      	adds	r3, #48	@ 0x30
 800bafc:	330b      	adds	r3, #11
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe fd18 	bl	800a534 <ld_word>
 800bb04:	4603      	mov	r3, r0
 800bb06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb0a:	d001      	beq.n	800bb10 <find_volume+0x1a8>
 800bb0c:	230d      	movs	r3, #13
 800bb0e:	e16c      	b.n	800bdea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb12:	3330      	adds	r3, #48	@ 0x30
 800bb14:	3316      	adds	r3, #22
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe fd0c 	bl	800a534 <ld_word>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bb20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d106      	bne.n	800bb34 <find_volume+0x1cc>
 800bb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb28:	3330      	adds	r3, #48	@ 0x30
 800bb2a:	3324      	adds	r3, #36	@ 0x24
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fd19 	bl	800a564 <ld_dword>
 800bb32:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb38:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800bb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb46:	789b      	ldrb	r3, [r3, #2]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d005      	beq.n	800bb58 <find_volume+0x1f0>
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4e:	789b      	ldrb	r3, [r3, #2]
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d001      	beq.n	800bb58 <find_volume+0x1f0>
 800bb54:	230d      	movs	r3, #13
 800bb56:	e148      	b.n	800bdea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5a:	789b      	ldrb	r3, [r3, #2]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb60:	fb02 f303 	mul.w	r3, r2, r3
 800bb64:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb74:	895b      	ldrh	r3, [r3, #10]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d008      	beq.n	800bb8c <find_volume+0x224>
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7c:	895b      	ldrh	r3, [r3, #10]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb82:	895b      	ldrh	r3, [r3, #10]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	4013      	ands	r3, r2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <find_volume+0x228>
 800bb8c:	230d      	movs	r3, #13
 800bb8e:	e12c      	b.n	800bdea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb92:	3330      	adds	r3, #48	@ 0x30
 800bb94:	3311      	adds	r3, #17
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe fccc 	bl	800a534 <ld_word>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba6:	891b      	ldrh	r3, [r3, #8]
 800bba8:	f003 030f 	and.w	r3, r3, #15
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <find_volume+0x24e>
 800bbb2:	230d      	movs	r3, #13
 800bbb4:	e119      	b.n	800bdea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb8:	3330      	adds	r3, #48	@ 0x30
 800bbba:	3313      	adds	r3, #19
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fcb9 	bl	800a534 <ld_word>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bbc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <find_volume+0x272>
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbce:	3330      	adds	r3, #48	@ 0x30
 800bbd0:	3320      	adds	r3, #32
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fcc6 	bl	800a564 <ld_dword>
 800bbd8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbdc:	3330      	adds	r3, #48	@ 0x30
 800bbde:	330e      	adds	r3, #14
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fca7 	bl	800a534 <ld_word>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bbea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d101      	bne.n	800bbf4 <find_volume+0x28c>
 800bbf0:	230d      	movs	r3, #13
 800bbf2:	e0fa      	b.n	800bdea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bbf4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bbf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbf8:	4413      	add	r3, r2
 800bbfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbfc:	8912      	ldrh	r2, [r2, #8]
 800bbfe:	0912      	lsrs	r2, r2, #4
 800bc00:	b292      	uxth	r2, r2
 800bc02:	4413      	add	r3, r2
 800bc04:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bc06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d204      	bcs.n	800bc18 <find_volume+0x2b0>
 800bc0e:	230d      	movs	r3, #13
 800bc10:	e0eb      	b.n	800bdea <find_volume+0x482>
 800bc12:	bf00      	nop
 800bc14:	2000087c 	.word	0x2000087c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bc18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc20:	8952      	ldrh	r2, [r2, #10]
 800bc22:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc26:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <find_volume+0x2ca>
 800bc2e:	230d      	movs	r3, #13
 800bc30:	e0db      	b.n	800bdea <find_volume+0x482>
		fmt = FS_FAT32;
 800bc32:	2303      	movs	r3, #3
 800bc34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d802      	bhi.n	800bc48 <find_volume+0x2e0>
 800bc42:	2302      	movs	r3, #2
 800bc44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d802      	bhi.n	800bc58 <find_volume+0x2f0>
 800bc52:	2301      	movs	r3, #1
 800bc54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5a:	1c9a      	adds	r2, r3, #2
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800bc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc64:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bc68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc6a:	441a      	add	r2, r3
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800bc70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	441a      	add	r2, r3
 800bc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc78:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800bc7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d11e      	bne.n	800bcc0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc84:	3330      	adds	r3, #48	@ 0x30
 800bc86:	332a      	adds	r3, #42	@ 0x2a
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe fc53 	bl	800a534 <ld_word>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <find_volume+0x330>
 800bc94:	230d      	movs	r3, #13
 800bc96:	e0a8      	b.n	800bdea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9a:	891b      	ldrh	r3, [r3, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <find_volume+0x33c>
 800bca0:	230d      	movs	r3, #13
 800bca2:	e0a2      	b.n	800bdea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca6:	3330      	adds	r3, #48	@ 0x30
 800bca8:	332c      	adds	r3, #44	@ 0x2c
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fe fc5a 	bl	800a564 <ld_dword>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcbe:	e01f      	b.n	800bd00 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc2:	891b      	ldrh	r3, [r3, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <find_volume+0x364>
 800bcc8:	230d      	movs	r3, #13
 800bcca:	e08e      	b.n	800bdea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcce:	6a1a      	ldr	r2, [r3, #32]
 800bcd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcd2:	441a      	add	r2, r3
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bcd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d103      	bne.n	800bce8 <find_volume+0x380>
 800bce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	e00a      	b.n	800bcfe <find_volume+0x396>
 800bce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcea:	695a      	ldr	r2, [r3, #20]
 800bcec:	4613      	mov	r3, r2
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	4413      	add	r3, r2
 800bcf2:	085a      	lsrs	r2, r3, #1
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	f003 0301 	and.w	r3, r3, #1
 800bcfc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bcfe:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd02:	699a      	ldr	r2, [r3, #24]
 800bd04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd06:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800bd0a:	0a5b      	lsrs	r3, r3, #9
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d201      	bcs.n	800bd14 <find_volume+0x3ac>
 800bd10:	230d      	movs	r3, #13
 800bd12:	e06a      	b.n	800bdea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd16:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1a:	611a      	str	r2, [r3, #16]
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1e:	691a      	ldr	r2, [r3, #16]
 800bd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd22:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd26:	2280      	movs	r2, #128	@ 0x80
 800bd28:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bd2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d149      	bne.n	800bdc6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd34:	3330      	adds	r3, #48	@ 0x30
 800bd36:	3330      	adds	r3, #48	@ 0x30
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fbfb 	bl	800a534 <ld_word>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d140      	bne.n	800bdc6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bd44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd46:	3301      	adds	r3, #1
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd4c:	f7fe fea2 	bl	800aa94 <move_window>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d137      	bne.n	800bdc6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd58:	2200      	movs	r2, #0
 800bd5a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5e:	3330      	adds	r3, #48	@ 0x30
 800bd60:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fe fbe5 	bl	800a534 <ld_word>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d127      	bne.n	800bdc6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd78:	3330      	adds	r3, #48	@ 0x30
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fbf2 	bl	800a564 <ld_dword>
 800bd80:	4603      	mov	r3, r0
 800bd82:	4a1c      	ldr	r2, [pc, #112]	@ (800bdf4 <find_volume+0x48c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d11e      	bne.n	800bdc6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8a:	3330      	adds	r3, #48	@ 0x30
 800bd8c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fe fbe7 	bl	800a564 <ld_dword>
 800bd96:	4603      	mov	r3, r0
 800bd98:	4a17      	ldr	r2, [pc, #92]	@ (800bdf8 <find_volume+0x490>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d113      	bne.n	800bdc6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda0:	3330      	adds	r3, #48	@ 0x30
 800bda2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fbdc 	bl	800a564 <ld_dword>
 800bdac:	4602      	mov	r2, r0
 800bdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb4:	3330      	adds	r3, #48	@ 0x30
 800bdb6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe fbd2 	bl	800a564 <ld_dword>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bdcc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bdce:	4b0b      	ldr	r3, [pc, #44]	@ (800bdfc <find_volume+0x494>)
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	4b09      	ldr	r3, [pc, #36]	@ (800bdfc <find_volume+0x494>)
 800bdd8:	801a      	strh	r2, [r3, #0]
 800bdda:	4b08      	ldr	r3, [pc, #32]	@ (800bdfc <find_volume+0x494>)
 800bddc:	881a      	ldrh	r2, [r3, #0]
 800bdde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bde2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bde4:	f7fe fdee 	bl	800a9c4 <clear_lock>
#endif
	return FR_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3758      	adds	r7, #88	@ 0x58
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	41615252 	.word	0x41615252
 800bdf8:	61417272 	.word	0x61417272
 800bdfc:	20000880 	.word	0x20000880

0800be00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800be0a:	2309      	movs	r3, #9
 800be0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01c      	beq.n	800be4e <validate+0x4e>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d018      	beq.n	800be4e <validate+0x4e>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d013      	beq.n	800be4e <validate+0x4e>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	889a      	ldrh	r2, [r3, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	88db      	ldrh	r3, [r3, #6]
 800be30:	429a      	cmp	r2, r3
 800be32:	d10c      	bne.n	800be4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	785b      	ldrb	r3, [r3, #1]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe fada 	bl	800a3f4 <disk_status>
 800be40:	4603      	mov	r3, r0
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <validate+0x4e>
			res = FR_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <validate+0x5a>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	e000      	b.n	800be5c <validate+0x5c>
 800be5a:	2300      	movs	r3, #0
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	6013      	str	r3, [r2, #0]
	return res;
 800be60:	7bfb      	ldrb	r3, [r7, #15]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
	...

0800be6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	4613      	mov	r3, r2
 800be78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be7e:	f107 0310 	add.w	r3, r7, #16
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff fcd5 	bl	800b832 <get_ldnumber>
 800be88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	da01      	bge.n	800be94 <f_mount+0x28>
 800be90:	230b      	movs	r3, #11
 800be92:	e02b      	b.n	800beec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800be94:	4a17      	ldr	r2, [pc, #92]	@ (800bef4 <f_mount+0x88>)
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bea4:	69b8      	ldr	r0, [r7, #24]
 800bea6:	f7fe fd8d 	bl	800a9c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	2200      	movs	r2, #0
 800beae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d002      	beq.n	800bebc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	490d      	ldr	r1, [pc, #52]	@ (800bef4 <f_mount+0x88>)
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <f_mount+0x66>
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d001      	beq.n	800bed6 <f_mount+0x6a>
 800bed2:	2300      	movs	r3, #0
 800bed4:	e00a      	b.n	800beec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bed6:	f107 010c 	add.w	r1, r7, #12
 800beda:	f107 0308 	add.w	r3, r7, #8
 800bede:	2200      	movs	r2, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fd41 	bl	800b968 <find_volume>
 800bee6:	4603      	mov	r3, r0
 800bee8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800beea:	7dfb      	ldrb	r3, [r7, #23]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3720      	adds	r7, #32
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	2000087c 	.word	0x2000087c

0800bef8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b098      	sub	sp, #96	@ 0x60
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	4613      	mov	r3, r2
 800bf04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <f_open+0x18>
 800bf0c:	2309      	movs	r3, #9
 800bf0e:	e1a9      	b.n	800c264 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bf10:	79fb      	ldrb	r3, [r7, #7]
 800bf12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bf18:	79fa      	ldrb	r2, [r7, #7]
 800bf1a:	f107 0110 	add.w	r1, r7, #16
 800bf1e:	f107 0308 	add.w	r3, r7, #8
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff fd20 	bl	800b968 <find_volume>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800bf2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f040 818d 	bne.w	800c252 <f_open+0x35a>
		dj.obj.fs = fs;
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	f107 0314 	add.w	r3, r7, #20
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff fc03 	bl	800b750 <follow_path>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bf50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d118      	bne.n	800bf8a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bf58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf5c:	b25b      	sxtb	r3, r3
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	da03      	bge.n	800bf6a <f_open+0x72>
				res = FR_INVALID_NAME;
 800bf62:	2306      	movs	r3, #6
 800bf64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bf68:	e00f      	b.n	800bf8a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	bf8c      	ite	hi
 800bf70:	2301      	movhi	r3, #1
 800bf72:	2300      	movls	r3, #0
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	461a      	mov	r2, r3
 800bf78:	f107 0314 	add.w	r3, r7, #20
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fe fbd8 	bl	800a734 <chk_lock>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	f003 031c 	and.w	r3, r3, #28
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d07f      	beq.n	800c094 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bf94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d017      	beq.n	800bfcc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfa0:	2b04      	cmp	r3, #4
 800bfa2:	d10e      	bne.n	800bfc2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bfa4:	f7fe fc22 	bl	800a7ec <enq_lock>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d006      	beq.n	800bfbc <f_open+0xc4>
 800bfae:	f107 0314 	add.w	r3, r7, #20
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fb06 	bl	800b5c4 <dir_register>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	e000      	b.n	800bfbe <f_open+0xc6>
 800bfbc:	2312      	movs	r3, #18
 800bfbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	f043 0308 	orr.w	r3, r3, #8
 800bfc8:	71fb      	strb	r3, [r7, #7]
 800bfca:	e010      	b.n	800bfee <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bfcc:	7ebb      	ldrb	r3, [r7, #26]
 800bfce:	f003 0311 	and.w	r3, r3, #17
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d003      	beq.n	800bfde <f_open+0xe6>
					res = FR_DENIED;
 800bfd6:	2307      	movs	r3, #7
 800bfd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bfdc:	e007      	b.n	800bfee <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	f003 0304 	and.w	r3, r3, #4
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <f_open+0xf6>
 800bfe8:	2308      	movs	r3, #8
 800bfea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bfee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d168      	bne.n	800c0c8 <f_open+0x1d0>
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	f003 0308 	and.w	r3, r3, #8
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d063      	beq.n	800c0c8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c000:	f7fe f88c 	bl	800a11c <get_fattime>
 800c004:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c008:	330e      	adds	r3, #14
 800c00a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fe fae7 	bl	800a5e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c014:	3316      	adds	r3, #22
 800c016:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fae1 	bl	800a5e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c020:	330b      	adds	r3, #11
 800c022:	2220      	movs	r2, #32
 800c024:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c02a:	4611      	mov	r1, r2
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fa35 	bl	800b49c <ld_clust>
 800c032:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c038:	2200      	movs	r2, #0
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff fa4d 	bl	800b4da <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c042:	331c      	adds	r3, #28
 800c044:	2100      	movs	r1, #0
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe faca 	bl	800a5e0 <st_dword>
					fs->wflag = 1;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	2201      	movs	r2, #1
 800c050:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c054:	2b00      	cmp	r3, #0
 800c056:	d037      	beq.n	800c0c8 <f_open+0x1d0>
						dw = fs->winsect;
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c05c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c05e:	f107 0314 	add.w	r3, r7, #20
 800c062:	2200      	movs	r2, #0
 800c064:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c066:	4618      	mov	r0, r3
 800c068:	f7fe ff60 	bl	800af2c <remove_chain>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c072:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c076:	2b00      	cmp	r3, #0
 800c078:	d126      	bne.n	800c0c8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fd08 	bl	800aa94 <move_window>
 800c084:	4603      	mov	r3, r0
 800c086:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c08e:	3a01      	subs	r2, #1
 800c090:	60da      	str	r2, [r3, #12]
 800c092:	e019      	b.n	800c0c8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c094:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d115      	bne.n	800c0c8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c09c:	7ebb      	ldrb	r3, [r7, #26]
 800c09e:	f003 0310 	and.w	r3, r3, #16
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <f_open+0x1b6>
					res = FR_NO_FILE;
 800c0a6:	2304      	movs	r3, #4
 800c0a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c0ac:	e00c      	b.n	800c0c8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	f003 0302 	and.w	r3, r3, #2
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d007      	beq.n	800c0c8 <f_open+0x1d0>
 800c0b8:	7ebb      	ldrb	r3, [r7, #26]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <f_open+0x1d0>
						res = FR_DENIED;
 800c0c2:	2307      	movs	r3, #7
 800c0c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c0c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d126      	bne.n	800c11e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	f003 0308 	and.w	r3, r3, #8
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d003      	beq.n	800c0e2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c0da:	79fb      	ldrb	r3, [r7, #7]
 800c0dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c0ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	bf8c      	ite	hi
 800c0f6:	2301      	movhi	r3, #1
 800c0f8:	2300      	movls	r3, #0
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f107 0314 	add.w	r3, r7, #20
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe fb93 	bl	800a830 <inc_lock>
 800c10a:	4602      	mov	r2, r0
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d102      	bne.n	800c11e <f_open+0x226>
 800c118:	2302      	movs	r3, #2
 800c11a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c11e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c122:	2b00      	cmp	r3, #0
 800c124:	f040 8095 	bne.w	800c252 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff f9b4 	bl	800b49c <ld_clust>
 800c134:	4602      	mov	r2, r0
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c13c:	331c      	adds	r3, #28
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fe fa10 	bl	800a564 <ld_dword>
 800c144:	4602      	mov	r2, r0
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	88da      	ldrh	r2, [r3, #6]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	79fa      	ldrb	r2, [r7, #7]
 800c162:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3330      	adds	r3, #48	@ 0x30
 800c17a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c17e:	2100      	movs	r1, #0
 800c180:	4618      	mov	r0, r3
 800c182:	f7fe fa7a 	bl	800a67a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	f003 0320 	and.w	r3, r3, #32
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d060      	beq.n	800c252 <f_open+0x35a>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d05c      	beq.n	800c252 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	68da      	ldr	r2, [r3, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	895b      	ldrh	r3, [r3, #10]
 800c1a4:	025b      	lsls	r3, r3, #9
 800c1a6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1b4:	e016      	b.n	800c1e4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fd25 	bl	800ac0a <get_fat>
 800c1c0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c1c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d802      	bhi.n	800c1ce <f_open+0x2d6>
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c1ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d4:	d102      	bne.n	800c1dc <f_open+0x2e4>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d103      	bne.n	800c1f4 <f_open+0x2fc>
 800c1ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d8e0      	bhi.n	800c1b6 <f_open+0x2be>
				}
				fp->clust = clst;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d127      	bne.n	800c252 <f_open+0x35a>
 800c202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d022      	beq.n	800c252 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c210:	4618      	mov	r0, r3
 800c212:	f7fe fcdb 	bl	800abcc <clust2sect>
 800c216:	6478      	str	r0, [r7, #68]	@ 0x44
 800c218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d103      	bne.n	800c226 <f_open+0x32e>
						res = FR_INT_ERR;
 800c21e:	2302      	movs	r3, #2
 800c220:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c224:	e015      	b.n	800c252 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c228:	0a5a      	lsrs	r2, r3, #9
 800c22a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c22c:	441a      	add	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	7858      	ldrb	r0, [r3, #1]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6a1a      	ldr	r2, [r3, #32]
 800c240:	2301      	movs	r3, #1
 800c242:	f7fe f919 	bl	800a478 <disk_read>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <f_open+0x35a>
 800c24c:	2301      	movs	r3, #1
 800c24e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c252:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <f_open+0x368>
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c260:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c264:	4618      	mov	r0, r3
 800c266:	3760      	adds	r7, #96	@ 0x60
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08e      	sub	sp, #56	@ 0x38
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f107 0214 	add.w	r2, r7, #20
 800c28a:	4611      	mov	r1, r2
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fdb7 	bl	800be00 <validate>
 800c292:	4603      	mov	r3, r0
 800c294:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c298:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d107      	bne.n	800c2b0 <f_read+0x44>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	7d5b      	ldrb	r3, [r3, #21]
 800c2a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c2a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <f_read+0x4a>
 800c2b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2b4:	e115      	b.n	800c4e2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	7d1b      	ldrb	r3, [r3, #20]
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <f_read+0x5a>
 800c2c2:	2307      	movs	r3, #7
 800c2c4:	e10d      	b.n	800c4e2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	68da      	ldr	r2, [r3, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6a3b      	ldr	r3, [r7, #32]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	f240 80fe 	bls.w	800c4d8 <f_read+0x26c>
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c2e0:	e0fa      	b.n	800c4d8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f040 80c6 	bne.w	800c47c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	0a5b      	lsrs	r3, r3, #9
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	8952      	ldrh	r2, [r2, #10]
 800c2fa:	3a01      	subs	r2, #1
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d12f      	bne.n	800c366 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d103      	bne.n	800c316 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	633b      	str	r3, [r7, #48]	@ 0x30
 800c314:	e013      	b.n	800c33e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d007      	beq.n	800c32e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	4619      	mov	r1, r3
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f7fe fefe 	bl	800b126 <clmt_clust>
 800c32a:	6338      	str	r0, [r7, #48]	@ 0x30
 800c32c:	e007      	b.n	800c33e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	4619      	mov	r1, r3
 800c336:	4610      	mov	r0, r2
 800c338:	f7fe fc67 	bl	800ac0a <get_fat>
 800c33c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c340:	2b01      	cmp	r3, #1
 800c342:	d804      	bhi.n	800c34e <f_read+0xe2>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2202      	movs	r2, #2
 800c348:	755a      	strb	r2, [r3, #21]
 800c34a:	2302      	movs	r3, #2
 800c34c:	e0c9      	b.n	800c4e2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c354:	d104      	bne.n	800c360 <f_read+0xf4>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2201      	movs	r2, #1
 800c35a:	755a      	strb	r2, [r3, #21]
 800c35c:	2301      	movs	r3, #1
 800c35e:	e0c0      	b.n	800c4e2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c364:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	4619      	mov	r1, r3
 800c36e:	4610      	mov	r0, r2
 800c370:	f7fe fc2c 	bl	800abcc <clust2sect>
 800c374:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d104      	bne.n	800c386 <f_read+0x11a>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2202      	movs	r2, #2
 800c380:	755a      	strb	r2, [r3, #21]
 800c382:	2302      	movs	r3, #2
 800c384:	e0ad      	b.n	800c4e2 <f_read+0x276>
			sect += csect;
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	4413      	add	r3, r2
 800c38c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	0a5b      	lsrs	r3, r3, #9
 800c392:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	2b00      	cmp	r3, #0
 800c398:	d039      	beq.n	800c40e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c39a:	69fa      	ldr	r2, [r7, #28]
 800c39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39e:	4413      	add	r3, r2
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	8952      	ldrh	r2, [r2, #10]
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d905      	bls.n	800c3b4 <f_read+0x148>
					cc = fs->csize - csect;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	895b      	ldrh	r3, [r3, #10]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	7858      	ldrb	r0, [r3, #1]
 800c3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ba:	69ba      	ldr	r2, [r7, #24]
 800c3bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c3be:	f7fe f85b 	bl	800a478 <disk_read>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <f_read+0x166>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	755a      	strb	r2, [r3, #21]
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e087      	b.n	800c4e2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	7d1b      	ldrb	r3, [r3, #20]
 800c3d6:	b25b      	sxtb	r3, r3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	da14      	bge.n	800c406 <f_read+0x19a>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6a1a      	ldr	r2, [r3, #32]
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d90d      	bls.n	800c406 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6a1a      	ldr	r2, [r3, #32]
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	025b      	lsls	r3, r3, #9
 800c3f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3f6:	18d0      	adds	r0, r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3330      	adds	r3, #48	@ 0x30
 800c3fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c400:	4619      	mov	r1, r3
 800c402:	f7fe f919 	bl	800a638 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c408:	025b      	lsls	r3, r3, #9
 800c40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c40c:	e050      	b.n	800c4b0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6a1b      	ldr	r3, [r3, #32]
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	429a      	cmp	r2, r3
 800c416:	d02e      	beq.n	800c476 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	7d1b      	ldrb	r3, [r3, #20]
 800c41c:	b25b      	sxtb	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	da18      	bge.n	800c454 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	7858      	ldrb	r0, [r3, #1]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6a1a      	ldr	r2, [r3, #32]
 800c430:	2301      	movs	r3, #1
 800c432:	f7fe f841 	bl	800a4b8 <disk_write>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d004      	beq.n	800c446 <f_read+0x1da>
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2201      	movs	r2, #1
 800c440:	755a      	strb	r2, [r3, #21]
 800c442:	2301      	movs	r3, #1
 800c444:	e04d      	b.n	800c4e2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	7d1b      	ldrb	r3, [r3, #20]
 800c44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	7858      	ldrb	r0, [r3, #1]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c45e:	2301      	movs	r3, #1
 800c460:	69ba      	ldr	r2, [r7, #24]
 800c462:	f7fe f809 	bl	800a478 <disk_read>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d004      	beq.n	800c476 <f_read+0x20a>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2201      	movs	r2, #1
 800c470:	755a      	strb	r2, [r3, #21]
 800c472:	2301      	movs	r3, #1
 800c474:	e035      	b.n	800c4e2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	69ba      	ldr	r2, [r7, #24]
 800c47a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c484:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c488:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c48a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d901      	bls.n	800c496 <f_read+0x22a>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a4:	4413      	add	r3, r2
 800c4a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4ac:	f7fe f8c4 	bl	800a638 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b4:	4413      	add	r3, r2
 800c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	699a      	ldr	r2, [r3, #24]
 800c4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4be:	441a      	add	r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	619a      	str	r2, [r3, #24]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ca:	441a      	add	r2, r3
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f47f af01 	bne.w	800c2e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3738      	adds	r7, #56	@ 0x38
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b08c      	sub	sp, #48	@ 0x30
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	607a      	str	r2, [r7, #4]
 800c4f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f107 0210 	add.w	r2, r7, #16
 800c508:	4611      	mov	r1, r2
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fc78 	bl	800be00 <validate>
 800c510:	4603      	mov	r3, r0
 800c512:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c516:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d107      	bne.n	800c52e <f_write+0x44>
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	7d5b      	ldrb	r3, [r3, #21]
 800c522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c526:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <f_write+0x4a>
 800c52e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c532:	e14b      	b.n	800c7cc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	7d1b      	ldrb	r3, [r3, #20]
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d101      	bne.n	800c544 <f_write+0x5a>
 800c540:	2307      	movs	r3, #7
 800c542:	e143      	b.n	800c7cc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	699a      	ldr	r2, [r3, #24]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	441a      	add	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	429a      	cmp	r2, r3
 800c552:	f080 812d 	bcs.w	800c7b0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	43db      	mvns	r3, r3
 800c55c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c55e:	e127      	b.n	800c7b0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f040 80e3 	bne.w	800c734 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	0a5b      	lsrs	r3, r3, #9
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	8952      	ldrh	r2, [r2, #10]
 800c578:	3a01      	subs	r2, #1
 800c57a:	4013      	ands	r3, r2
 800c57c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d143      	bne.n	800c60c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10c      	bne.n	800c5a6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c594:	2b00      	cmp	r3, #0
 800c596:	d11a      	bne.n	800c5ce <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2100      	movs	r1, #0
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fe fd2a 	bl	800aff6 <create_chain>
 800c5a2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c5a4:	e013      	b.n	800c5ce <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7fe fdb6 	bl	800b126 <clmt_clust>
 800c5ba:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c5bc:	e007      	b.n	800c5ce <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	4610      	mov	r0, r2
 800c5c8:	f7fe fd15 	bl	800aff6 <create_chain>
 800c5cc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 80f2 	beq.w	800c7ba <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d104      	bne.n	800c5e6 <f_write+0xfc>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	755a      	strb	r2, [r3, #21]
 800c5e2:	2302      	movs	r3, #2
 800c5e4:	e0f2      	b.n	800c7cc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ec:	d104      	bne.n	800c5f8 <f_write+0x10e>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	755a      	strb	r2, [r3, #21]
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e0e9      	b.n	800c7cc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d102      	bne.n	800c60c <f_write+0x122>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c60a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	7d1b      	ldrb	r3, [r3, #20]
 800c610:	b25b      	sxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	da18      	bge.n	800c648 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	7858      	ldrb	r0, [r3, #1]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a1a      	ldr	r2, [r3, #32]
 800c624:	2301      	movs	r3, #1
 800c626:	f7fd ff47 	bl	800a4b8 <disk_write>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d004      	beq.n	800c63a <f_write+0x150>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2201      	movs	r2, #1
 800c634:	755a      	strb	r2, [r3, #21]
 800c636:	2301      	movs	r3, #1
 800c638:	e0c8      	b.n	800c7cc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	7d1b      	ldrb	r3, [r3, #20]
 800c63e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c642:	b2da      	uxtb	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7fe fabb 	bl	800abcc <clust2sect>
 800c656:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d104      	bne.n	800c668 <f_write+0x17e>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2202      	movs	r2, #2
 800c662:	755a      	strb	r2, [r3, #21]
 800c664:	2302      	movs	r3, #2
 800c666:	e0b1      	b.n	800c7cc <f_write+0x2e2>
			sect += csect;
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	4413      	add	r3, r2
 800c66e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	0a5b      	lsrs	r3, r3, #9
 800c674:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d03c      	beq.n	800c6f6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c67c:	69ba      	ldr	r2, [r7, #24]
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	4413      	add	r3, r2
 800c682:	693a      	ldr	r2, [r7, #16]
 800c684:	8952      	ldrh	r2, [r2, #10]
 800c686:	4293      	cmp	r3, r2
 800c688:	d905      	bls.n	800c696 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	895b      	ldrh	r3, [r3, #10]
 800c68e:	461a      	mov	r2, r3
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	7858      	ldrb	r0, [r3, #1]
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	69f9      	ldr	r1, [r7, #28]
 800c6a0:	f7fd ff0a 	bl	800a4b8 <disk_write>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d004      	beq.n	800c6b4 <f_write+0x1ca>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	755a      	strb	r2, [r3, #21]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e08b      	b.n	800c7cc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6a1a      	ldr	r2, [r3, #32]
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	6a3a      	ldr	r2, [r7, #32]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d915      	bls.n	800c6ee <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6a1a      	ldr	r2, [r3, #32]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	025b      	lsls	r3, r3, #9
 800c6d2:	69fa      	ldr	r2, [r7, #28]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6da:	4619      	mov	r1, r3
 800c6dc:	f7fd ffac 	bl	800a638 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	7d1b      	ldrb	r3, [r3, #20]
 800c6e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c6ee:	6a3b      	ldr	r3, [r7, #32]
 800c6f0:	025b      	lsls	r3, r3, #9
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c6f4:	e03f      	b.n	800c776 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d016      	beq.n	800c72e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	699a      	ldr	r2, [r3, #24]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c708:	429a      	cmp	r2, r3
 800c70a:	d210      	bcs.n	800c72e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	7858      	ldrb	r0, [r3, #1]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c716:	2301      	movs	r3, #1
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	f7fd fead 	bl	800a478 <disk_read>
 800c71e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c720:	2b00      	cmp	r3, #0
 800c722:	d004      	beq.n	800c72e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2201      	movs	r2, #1
 800c728:	755a      	strb	r2, [r3, #21]
 800c72a:	2301      	movs	r3, #1
 800c72c:	e04e      	b.n	800c7cc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c740:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	429a      	cmp	r2, r3
 800c748:	d901      	bls.n	800c74e <f_write+0x264>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75c:	4413      	add	r3, r2
 800c75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c760:	69f9      	ldr	r1, [r7, #28]
 800c762:	4618      	mov	r0, r3
 800c764:	f7fd ff68 	bl	800a638 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	7d1b      	ldrb	r3, [r3, #20]
 800c76c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c770:	b2da      	uxtb	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	4413      	add	r3, r2
 800c77c:	61fb      	str	r3, [r7, #28]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	699a      	ldr	r2, [r3, #24]
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	441a      	add	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	619a      	str	r2, [r3, #24]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	68da      	ldr	r2, [r3, #12]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	429a      	cmp	r2, r3
 800c794:	bf38      	it	cc
 800c796:	461a      	movcc	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	60da      	str	r2, [r3, #12]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a2:	441a      	add	r2, r3
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f47f aed4 	bne.w	800c560 <f_write+0x76>
 800c7b8:	e000      	b.n	800c7bc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7ba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	7d1b      	ldrb	r3, [r3, #20]
 800c7c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3730      	adds	r7, #48	@ 0x30
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f107 0208 	add.w	r2, r7, #8
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7ff fb0b 	bl	800be00 <validate>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d168      	bne.n	800c8c6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	7d1b      	ldrb	r3, [r3, #20]
 800c7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d062      	beq.n	800c8c6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7d1b      	ldrb	r3, [r3, #20]
 800c804:	b25b      	sxtb	r3, r3
 800c806:	2b00      	cmp	r3, #0
 800c808:	da15      	bge.n	800c836 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	7858      	ldrb	r0, [r3, #1]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a1a      	ldr	r2, [r3, #32]
 800c818:	2301      	movs	r3, #1
 800c81a:	f7fd fe4d 	bl	800a4b8 <disk_write>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d001      	beq.n	800c828 <f_sync+0x54>
 800c824:	2301      	movs	r3, #1
 800c826:	e04f      	b.n	800c8c8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	7d1b      	ldrb	r3, [r3, #20]
 800c82c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c830:	b2da      	uxtb	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c836:	f7fd fc71 	bl	800a11c <get_fattime>
 800c83a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c842:	4619      	mov	r1, r3
 800c844:	4610      	mov	r0, r2
 800c846:	f7fe f925 	bl	800aa94 <move_window>
 800c84a:	4603      	mov	r3, r0
 800c84c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d138      	bne.n	800c8c6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c858:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	330b      	adds	r3, #11
 800c85e:	781a      	ldrb	r2, [r3, #0]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	330b      	adds	r3, #11
 800c864:	f042 0220 	orr.w	r2, r2, #32
 800c868:	b2d2      	uxtb	r2, r2
 800c86a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6818      	ldr	r0, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	461a      	mov	r2, r3
 800c876:	68f9      	ldr	r1, [r7, #12]
 800c878:	f7fe fe2f 	bl	800b4da <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f103 021c 	add.w	r2, r3, #28
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fd fea9 	bl	800a5e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3316      	adds	r3, #22
 800c892:	6939      	ldr	r1, [r7, #16]
 800c894:	4618      	mov	r0, r3
 800c896:	f7fd fea3 	bl	800a5e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3312      	adds	r3, #18
 800c89e:	2100      	movs	r1, #0
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fd fe82 	bl	800a5aa <st_word>
					fs->wflag = 1;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fe f91e 	bl	800aaf0 <sync_fs>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7d1b      	ldrb	r3, [r3, #20]
 800c8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff ff7b 	bl	800c7d4 <f_sync>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d118      	bne.n	800c91a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f107 0208 	add.w	r2, r7, #8
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff fa85 	bl	800be00 <validate>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10c      	bne.n	800c91a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	4618      	mov	r0, r3
 800c906:	f7fe f821 	bl	800a94c <dec_lock>
 800c90a:	4603      	mov	r3, r0
 800c90c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d102      	bne.n	800c91a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	4613      	mov	r3, r2
 800c930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c932:	2301      	movs	r3, #1
 800c934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c93a:	4b1f      	ldr	r3, [pc, #124]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c93c:	7a5b      	ldrb	r3, [r3, #9]
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d131      	bne.n	800c9a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c944:	4b1c      	ldr	r3, [pc, #112]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c946:	7a5b      	ldrb	r3, [r3, #9]
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	461a      	mov	r2, r3
 800c94c:	4b1a      	ldr	r3, [pc, #104]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c94e:	2100      	movs	r1, #0
 800c950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c952:	4b19      	ldr	r3, [pc, #100]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c954:	7a5b      	ldrb	r3, [r3, #9]
 800c956:	b2db      	uxtb	r3, r3
 800c958:	4a17      	ldr	r2, [pc, #92]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c962:	4b15      	ldr	r3, [pc, #84]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c964:	7a5b      	ldrb	r3, [r3, #9]
 800c966:	b2db      	uxtb	r3, r3
 800c968:	461a      	mov	r2, r3
 800c96a:	4b13      	ldr	r3, [pc, #76]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c96c:	4413      	add	r3, r2
 800c96e:	79fa      	ldrb	r2, [r7, #7]
 800c970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c972:	4b11      	ldr	r3, [pc, #68]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c974:	7a5b      	ldrb	r3, [r3, #9]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	b2d1      	uxtb	r1, r2
 800c97c:	4a0e      	ldr	r2, [pc, #56]	@ (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c97e:	7251      	strb	r1, [r2, #9]
 800c980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c982:	7dbb      	ldrb	r3, [r7, #22]
 800c984:	3330      	adds	r3, #48	@ 0x30
 800c986:	b2da      	uxtb	r2, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	3301      	adds	r3, #1
 800c990:	223a      	movs	r2, #58	@ 0x3a
 800c992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	3302      	adds	r3, #2
 800c998:	222f      	movs	r2, #47	@ 0x2f
 800c99a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	3303      	adds	r3, #3
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	371c      	adds	r7, #28
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	200008a4 	.word	0x200008a4

0800c9bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff ffaa 	bl	800c924 <FATFS_LinkDriverEx>
 800c9d0:	4603      	mov	r3, r0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <atoi>:
 800c9da:	220a      	movs	r2, #10
 800c9dc:	2100      	movs	r1, #0
 800c9de:	f000 b87d 	b.w	800cadc <strtol>
	...

0800c9e4 <_strtol_l.constprop.0>:
 800c9e4:	2b24      	cmp	r3, #36	@ 0x24
 800c9e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ea:	4686      	mov	lr, r0
 800c9ec:	4690      	mov	r8, r2
 800c9ee:	d801      	bhi.n	800c9f4 <_strtol_l.constprop.0+0x10>
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d106      	bne.n	800ca02 <_strtol_l.constprop.0+0x1e>
 800c9f4:	f000 f92a 	bl	800cc4c <__errno>
 800c9f8:	2316      	movs	r3, #22
 800c9fa:	6003      	str	r3, [r0, #0]
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca02:	4834      	ldr	r0, [pc, #208]	@ (800cad4 <_strtol_l.constprop.0+0xf0>)
 800ca04:	460d      	mov	r5, r1
 800ca06:	462a      	mov	r2, r5
 800ca08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca0c:	5d06      	ldrb	r6, [r0, r4]
 800ca0e:	f016 0608 	ands.w	r6, r6, #8
 800ca12:	d1f8      	bne.n	800ca06 <_strtol_l.constprop.0+0x22>
 800ca14:	2c2d      	cmp	r4, #45	@ 0x2d
 800ca16:	d12d      	bne.n	800ca74 <_strtol_l.constprop.0+0x90>
 800ca18:	782c      	ldrb	r4, [r5, #0]
 800ca1a:	2601      	movs	r6, #1
 800ca1c:	1c95      	adds	r5, r2, #2
 800ca1e:	f033 0210 	bics.w	r2, r3, #16
 800ca22:	d109      	bne.n	800ca38 <_strtol_l.constprop.0+0x54>
 800ca24:	2c30      	cmp	r4, #48	@ 0x30
 800ca26:	d12a      	bne.n	800ca7e <_strtol_l.constprop.0+0x9a>
 800ca28:	782a      	ldrb	r2, [r5, #0]
 800ca2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca2e:	2a58      	cmp	r2, #88	@ 0x58
 800ca30:	d125      	bne.n	800ca7e <_strtol_l.constprop.0+0x9a>
 800ca32:	786c      	ldrb	r4, [r5, #1]
 800ca34:	2310      	movs	r3, #16
 800ca36:	3502      	adds	r5, #2
 800ca38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ca3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ca40:	2200      	movs	r2, #0
 800ca42:	fbbc f9f3 	udiv	r9, ip, r3
 800ca46:	4610      	mov	r0, r2
 800ca48:	fb03 ca19 	mls	sl, r3, r9, ip
 800ca4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ca50:	2f09      	cmp	r7, #9
 800ca52:	d81b      	bhi.n	800ca8c <_strtol_l.constprop.0+0xa8>
 800ca54:	463c      	mov	r4, r7
 800ca56:	42a3      	cmp	r3, r4
 800ca58:	dd27      	ble.n	800caaa <_strtol_l.constprop.0+0xc6>
 800ca5a:	1c57      	adds	r7, r2, #1
 800ca5c:	d007      	beq.n	800ca6e <_strtol_l.constprop.0+0x8a>
 800ca5e:	4581      	cmp	r9, r0
 800ca60:	d320      	bcc.n	800caa4 <_strtol_l.constprop.0+0xc0>
 800ca62:	d101      	bne.n	800ca68 <_strtol_l.constprop.0+0x84>
 800ca64:	45a2      	cmp	sl, r4
 800ca66:	db1d      	blt.n	800caa4 <_strtol_l.constprop.0+0xc0>
 800ca68:	fb00 4003 	mla	r0, r0, r3, r4
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca72:	e7eb      	b.n	800ca4c <_strtol_l.constprop.0+0x68>
 800ca74:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca76:	bf04      	itt	eq
 800ca78:	782c      	ldrbeq	r4, [r5, #0]
 800ca7a:	1c95      	addeq	r5, r2, #2
 800ca7c:	e7cf      	b.n	800ca1e <_strtol_l.constprop.0+0x3a>
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1da      	bne.n	800ca38 <_strtol_l.constprop.0+0x54>
 800ca82:	2c30      	cmp	r4, #48	@ 0x30
 800ca84:	bf0c      	ite	eq
 800ca86:	2308      	moveq	r3, #8
 800ca88:	230a      	movne	r3, #10
 800ca8a:	e7d5      	b.n	800ca38 <_strtol_l.constprop.0+0x54>
 800ca8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ca90:	2f19      	cmp	r7, #25
 800ca92:	d801      	bhi.n	800ca98 <_strtol_l.constprop.0+0xb4>
 800ca94:	3c37      	subs	r4, #55	@ 0x37
 800ca96:	e7de      	b.n	800ca56 <_strtol_l.constprop.0+0x72>
 800ca98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ca9c:	2f19      	cmp	r7, #25
 800ca9e:	d804      	bhi.n	800caaa <_strtol_l.constprop.0+0xc6>
 800caa0:	3c57      	subs	r4, #87	@ 0x57
 800caa2:	e7d8      	b.n	800ca56 <_strtol_l.constprop.0+0x72>
 800caa4:	f04f 32ff 	mov.w	r2, #4294967295
 800caa8:	e7e1      	b.n	800ca6e <_strtol_l.constprop.0+0x8a>
 800caaa:	1c53      	adds	r3, r2, #1
 800caac:	d108      	bne.n	800cac0 <_strtol_l.constprop.0+0xdc>
 800caae:	2322      	movs	r3, #34	@ 0x22
 800cab0:	f8ce 3000 	str.w	r3, [lr]
 800cab4:	4660      	mov	r0, ip
 800cab6:	f1b8 0f00 	cmp.w	r8, #0
 800caba:	d0a0      	beq.n	800c9fe <_strtol_l.constprop.0+0x1a>
 800cabc:	1e69      	subs	r1, r5, #1
 800cabe:	e006      	b.n	800cace <_strtol_l.constprop.0+0xea>
 800cac0:	b106      	cbz	r6, 800cac4 <_strtol_l.constprop.0+0xe0>
 800cac2:	4240      	negs	r0, r0
 800cac4:	f1b8 0f00 	cmp.w	r8, #0
 800cac8:	d099      	beq.n	800c9fe <_strtol_l.constprop.0+0x1a>
 800caca:	2a00      	cmp	r2, #0
 800cacc:	d1f6      	bne.n	800cabc <_strtol_l.constprop.0+0xd8>
 800cace:	f8c8 1000 	str.w	r1, [r8]
 800cad2:	e794      	b.n	800c9fe <_strtol_l.constprop.0+0x1a>
 800cad4:	0800f4e1 	.word	0x0800f4e1

0800cad8 <_strtol_r>:
 800cad8:	f7ff bf84 	b.w	800c9e4 <_strtol_l.constprop.0>

0800cadc <strtol>:
 800cadc:	4613      	mov	r3, r2
 800cade:	460a      	mov	r2, r1
 800cae0:	4601      	mov	r1, r0
 800cae2:	4802      	ldr	r0, [pc, #8]	@ (800caec <strtol+0x10>)
 800cae4:	6800      	ldr	r0, [r0, #0]
 800cae6:	f7ff bf7d 	b.w	800c9e4 <_strtol_l.constprop.0>
 800caea:	bf00      	nop
 800caec:	20000010 	.word	0x20000010

0800caf0 <sniprintf>:
 800caf0:	b40c      	push	{r2, r3}
 800caf2:	b530      	push	{r4, r5, lr}
 800caf4:	4b17      	ldr	r3, [pc, #92]	@ (800cb54 <sniprintf+0x64>)
 800caf6:	1e0c      	subs	r4, r1, #0
 800caf8:	681d      	ldr	r5, [r3, #0]
 800cafa:	b09d      	sub	sp, #116	@ 0x74
 800cafc:	da08      	bge.n	800cb10 <sniprintf+0x20>
 800cafe:	238b      	movs	r3, #139	@ 0x8b
 800cb00:	602b      	str	r3, [r5, #0]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295
 800cb06:	b01d      	add	sp, #116	@ 0x74
 800cb08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb0c:	b002      	add	sp, #8
 800cb0e:	4770      	bx	lr
 800cb10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb18:	bf14      	ite	ne
 800cb1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb1e:	4623      	moveq	r3, r4
 800cb20:	9304      	str	r3, [sp, #16]
 800cb22:	9307      	str	r3, [sp, #28]
 800cb24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb28:	9002      	str	r0, [sp, #8]
 800cb2a:	9006      	str	r0, [sp, #24]
 800cb2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb30:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb32:	ab21      	add	r3, sp, #132	@ 0x84
 800cb34:	a902      	add	r1, sp, #8
 800cb36:	4628      	mov	r0, r5
 800cb38:	9301      	str	r3, [sp, #4]
 800cb3a:	f000 fa15 	bl	800cf68 <_svfiprintf_r>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	bfbc      	itt	lt
 800cb42:	238b      	movlt	r3, #139	@ 0x8b
 800cb44:	602b      	strlt	r3, [r5, #0]
 800cb46:	2c00      	cmp	r4, #0
 800cb48:	d0dd      	beq.n	800cb06 <sniprintf+0x16>
 800cb4a:	9b02      	ldr	r3, [sp, #8]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	701a      	strb	r2, [r3, #0]
 800cb50:	e7d9      	b.n	800cb06 <sniprintf+0x16>
 800cb52:	bf00      	nop
 800cb54:	20000010 	.word	0x20000010

0800cb58 <siscanf>:
 800cb58:	b40e      	push	{r1, r2, r3}
 800cb5a:	b530      	push	{r4, r5, lr}
 800cb5c:	b09c      	sub	sp, #112	@ 0x70
 800cb5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800cb60:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800cb64:	f854 5b04 	ldr.w	r5, [r4], #4
 800cb68:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cb6c:	9002      	str	r0, [sp, #8]
 800cb6e:	9006      	str	r0, [sp, #24]
 800cb70:	f7f3 fb38 	bl	80001e4 <strlen>
 800cb74:	4b0b      	ldr	r3, [pc, #44]	@ (800cba4 <siscanf+0x4c>)
 800cb76:	9003      	str	r0, [sp, #12]
 800cb78:	9007      	str	r0, [sp, #28]
 800cb7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb7c:	480a      	ldr	r0, [pc, #40]	@ (800cba8 <siscanf+0x50>)
 800cb7e:	9401      	str	r4, [sp, #4]
 800cb80:	2300      	movs	r3, #0
 800cb82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb84:	9314      	str	r3, [sp, #80]	@ 0x50
 800cb86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb8e:	462a      	mov	r2, r5
 800cb90:	4623      	mov	r3, r4
 800cb92:	a902      	add	r1, sp, #8
 800cb94:	6800      	ldr	r0, [r0, #0]
 800cb96:	f000 fb3b 	bl	800d210 <__ssvfiscanf_r>
 800cb9a:	b01c      	add	sp, #112	@ 0x70
 800cb9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cba0:	b003      	add	sp, #12
 800cba2:	4770      	bx	lr
 800cba4:	0800cbad 	.word	0x0800cbad
 800cba8:	20000010 	.word	0x20000010

0800cbac <__seofread>:
 800cbac:	2000      	movs	r0, #0
 800cbae:	4770      	bx	lr

0800cbb0 <memcmp>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	3901      	subs	r1, #1
 800cbb4:	4402      	add	r2, r0
 800cbb6:	4290      	cmp	r0, r2
 800cbb8:	d101      	bne.n	800cbbe <memcmp+0xe>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	e005      	b.n	800cbca <memcmp+0x1a>
 800cbbe:	7803      	ldrb	r3, [r0, #0]
 800cbc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	d001      	beq.n	800cbcc <memcmp+0x1c>
 800cbc8:	1b18      	subs	r0, r3, r4
 800cbca:	bd10      	pop	{r4, pc}
 800cbcc:	3001      	adds	r0, #1
 800cbce:	e7f2      	b.n	800cbb6 <memcmp+0x6>

0800cbd0 <memset>:
 800cbd0:	4402      	add	r2, r0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d100      	bne.n	800cbda <memset+0xa>
 800cbd8:	4770      	bx	lr
 800cbda:	f803 1b01 	strb.w	r1, [r3], #1
 800cbde:	e7f9      	b.n	800cbd4 <memset+0x4>

0800cbe0 <strchr>:
 800cbe0:	b2c9      	uxtb	r1, r1
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbea:	b112      	cbz	r2, 800cbf2 <strchr+0x12>
 800cbec:	428a      	cmp	r2, r1
 800cbee:	d1f9      	bne.n	800cbe4 <strchr+0x4>
 800cbf0:	4770      	bx	lr
 800cbf2:	2900      	cmp	r1, #0
 800cbf4:	bf18      	it	ne
 800cbf6:	2000      	movne	r0, #0
 800cbf8:	4770      	bx	lr

0800cbfa <strncpy>:
 800cbfa:	b510      	push	{r4, lr}
 800cbfc:	3901      	subs	r1, #1
 800cbfe:	4603      	mov	r3, r0
 800cc00:	b132      	cbz	r2, 800cc10 <strncpy+0x16>
 800cc02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc06:	f803 4b01 	strb.w	r4, [r3], #1
 800cc0a:	3a01      	subs	r2, #1
 800cc0c:	2c00      	cmp	r4, #0
 800cc0e:	d1f7      	bne.n	800cc00 <strncpy+0x6>
 800cc10:	441a      	add	r2, r3
 800cc12:	2100      	movs	r1, #0
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d100      	bne.n	800cc1a <strncpy+0x20>
 800cc18:	bd10      	pop	{r4, pc}
 800cc1a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc1e:	e7f9      	b.n	800cc14 <strncpy+0x1a>

0800cc20 <strstr>:
 800cc20:	780a      	ldrb	r2, [r1, #0]
 800cc22:	b570      	push	{r4, r5, r6, lr}
 800cc24:	b96a      	cbnz	r2, 800cc42 <strstr+0x22>
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d109      	bne.n	800cc40 <strstr+0x20>
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	4605      	mov	r5, r0
 800cc30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0f6      	beq.n	800cc26 <strstr+0x6>
 800cc38:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cc3c:	429e      	cmp	r6, r3
 800cc3e:	d0f7      	beq.n	800cc30 <strstr+0x10>
 800cc40:	3001      	adds	r0, #1
 800cc42:	7803      	ldrb	r3, [r0, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1ef      	bne.n	800cc28 <strstr+0x8>
 800cc48:	4618      	mov	r0, r3
 800cc4a:	e7ec      	b.n	800cc26 <strstr+0x6>

0800cc4c <__errno>:
 800cc4c:	4b01      	ldr	r3, [pc, #4]	@ (800cc54 <__errno+0x8>)
 800cc4e:	6818      	ldr	r0, [r3, #0]
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	20000010 	.word	0x20000010

0800cc58 <__libc_init_array>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	4d0d      	ldr	r5, [pc, #52]	@ (800cc90 <__libc_init_array+0x38>)
 800cc5c:	4c0d      	ldr	r4, [pc, #52]	@ (800cc94 <__libc_init_array+0x3c>)
 800cc5e:	1b64      	subs	r4, r4, r5
 800cc60:	10a4      	asrs	r4, r4, #2
 800cc62:	2600      	movs	r6, #0
 800cc64:	42a6      	cmp	r6, r4
 800cc66:	d109      	bne.n	800cc7c <__libc_init_array+0x24>
 800cc68:	4d0b      	ldr	r5, [pc, #44]	@ (800cc98 <__libc_init_array+0x40>)
 800cc6a:	4c0c      	ldr	r4, [pc, #48]	@ (800cc9c <__libc_init_array+0x44>)
 800cc6c:	f001 f864 	bl	800dd38 <_init>
 800cc70:	1b64      	subs	r4, r4, r5
 800cc72:	10a4      	asrs	r4, r4, #2
 800cc74:	2600      	movs	r6, #0
 800cc76:	42a6      	cmp	r6, r4
 800cc78:	d105      	bne.n	800cc86 <__libc_init_array+0x2e>
 800cc7a:	bd70      	pop	{r4, r5, r6, pc}
 800cc7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc80:	4798      	blx	r3
 800cc82:	3601      	adds	r6, #1
 800cc84:	e7ee      	b.n	800cc64 <__libc_init_array+0xc>
 800cc86:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc8a:	4798      	blx	r3
 800cc8c:	3601      	adds	r6, #1
 800cc8e:	e7f2      	b.n	800cc76 <__libc_init_array+0x1e>
 800cc90:	0800f638 	.word	0x0800f638
 800cc94:	0800f638 	.word	0x0800f638
 800cc98:	0800f638 	.word	0x0800f638
 800cc9c:	0800f63c 	.word	0x0800f63c

0800cca0 <__retarget_lock_acquire_recursive>:
 800cca0:	4770      	bx	lr

0800cca2 <__retarget_lock_release_recursive>:
 800cca2:	4770      	bx	lr

0800cca4 <memcpy>:
 800cca4:	440a      	add	r2, r1
 800cca6:	4291      	cmp	r1, r2
 800cca8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccac:	d100      	bne.n	800ccb0 <memcpy+0xc>
 800ccae:	4770      	bx	lr
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccba:	4291      	cmp	r1, r2
 800ccbc:	d1f9      	bne.n	800ccb2 <memcpy+0xe>
 800ccbe:	bd10      	pop	{r4, pc}

0800ccc0 <_free_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	d041      	beq.n	800cd4c <_free_r+0x8c>
 800ccc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cccc:	1f0c      	subs	r4, r1, #4
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	bfb8      	it	lt
 800ccd2:	18e4      	addlt	r4, r4, r3
 800ccd4:	f000 f8e0 	bl	800ce98 <__malloc_lock>
 800ccd8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd50 <_free_r+0x90>)
 800ccda:	6813      	ldr	r3, [r2, #0]
 800ccdc:	b933      	cbnz	r3, 800ccec <_free_r+0x2c>
 800ccde:	6063      	str	r3, [r4, #4]
 800cce0:	6014      	str	r4, [r2, #0]
 800cce2:	4628      	mov	r0, r5
 800cce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cce8:	f000 b8dc 	b.w	800cea4 <__malloc_unlock>
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	d908      	bls.n	800cd02 <_free_r+0x42>
 800ccf0:	6820      	ldr	r0, [r4, #0]
 800ccf2:	1821      	adds	r1, r4, r0
 800ccf4:	428b      	cmp	r3, r1
 800ccf6:	bf01      	itttt	eq
 800ccf8:	6819      	ldreq	r1, [r3, #0]
 800ccfa:	685b      	ldreq	r3, [r3, #4]
 800ccfc:	1809      	addeq	r1, r1, r0
 800ccfe:	6021      	streq	r1, [r4, #0]
 800cd00:	e7ed      	b.n	800ccde <_free_r+0x1e>
 800cd02:	461a      	mov	r2, r3
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	b10b      	cbz	r3, 800cd0c <_free_r+0x4c>
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d9fa      	bls.n	800cd02 <_free_r+0x42>
 800cd0c:	6811      	ldr	r1, [r2, #0]
 800cd0e:	1850      	adds	r0, r2, r1
 800cd10:	42a0      	cmp	r0, r4
 800cd12:	d10b      	bne.n	800cd2c <_free_r+0x6c>
 800cd14:	6820      	ldr	r0, [r4, #0]
 800cd16:	4401      	add	r1, r0
 800cd18:	1850      	adds	r0, r2, r1
 800cd1a:	4283      	cmp	r3, r0
 800cd1c:	6011      	str	r1, [r2, #0]
 800cd1e:	d1e0      	bne.n	800cce2 <_free_r+0x22>
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	6053      	str	r3, [r2, #4]
 800cd26:	4408      	add	r0, r1
 800cd28:	6010      	str	r0, [r2, #0]
 800cd2a:	e7da      	b.n	800cce2 <_free_r+0x22>
 800cd2c:	d902      	bls.n	800cd34 <_free_r+0x74>
 800cd2e:	230c      	movs	r3, #12
 800cd30:	602b      	str	r3, [r5, #0]
 800cd32:	e7d6      	b.n	800cce2 <_free_r+0x22>
 800cd34:	6820      	ldr	r0, [r4, #0]
 800cd36:	1821      	adds	r1, r4, r0
 800cd38:	428b      	cmp	r3, r1
 800cd3a:	bf04      	itt	eq
 800cd3c:	6819      	ldreq	r1, [r3, #0]
 800cd3e:	685b      	ldreq	r3, [r3, #4]
 800cd40:	6063      	str	r3, [r4, #4]
 800cd42:	bf04      	itt	eq
 800cd44:	1809      	addeq	r1, r1, r0
 800cd46:	6021      	streq	r1, [r4, #0]
 800cd48:	6054      	str	r4, [r2, #4]
 800cd4a:	e7ca      	b.n	800cce2 <_free_r+0x22>
 800cd4c:	bd38      	pop	{r3, r4, r5, pc}
 800cd4e:	bf00      	nop
 800cd50:	200009f4 	.word	0x200009f4

0800cd54 <sbrk_aligned>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4e0f      	ldr	r6, [pc, #60]	@ (800cd94 <sbrk_aligned+0x40>)
 800cd58:	460c      	mov	r4, r1
 800cd5a:	6831      	ldr	r1, [r6, #0]
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	b911      	cbnz	r1, 800cd66 <sbrk_aligned+0x12>
 800cd60:	f000 ff34 	bl	800dbcc <_sbrk_r>
 800cd64:	6030      	str	r0, [r6, #0]
 800cd66:	4621      	mov	r1, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f000 ff2f 	bl	800dbcc <_sbrk_r>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	d103      	bne.n	800cd7a <sbrk_aligned+0x26>
 800cd72:	f04f 34ff 	mov.w	r4, #4294967295
 800cd76:	4620      	mov	r0, r4
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
 800cd7a:	1cc4      	adds	r4, r0, #3
 800cd7c:	f024 0403 	bic.w	r4, r4, #3
 800cd80:	42a0      	cmp	r0, r4
 800cd82:	d0f8      	beq.n	800cd76 <sbrk_aligned+0x22>
 800cd84:	1a21      	subs	r1, r4, r0
 800cd86:	4628      	mov	r0, r5
 800cd88:	f000 ff20 	bl	800dbcc <_sbrk_r>
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	d1f2      	bne.n	800cd76 <sbrk_aligned+0x22>
 800cd90:	e7ef      	b.n	800cd72 <sbrk_aligned+0x1e>
 800cd92:	bf00      	nop
 800cd94:	200009f0 	.word	0x200009f0

0800cd98 <_malloc_r>:
 800cd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	1ccd      	adds	r5, r1, #3
 800cd9e:	f025 0503 	bic.w	r5, r5, #3
 800cda2:	3508      	adds	r5, #8
 800cda4:	2d0c      	cmp	r5, #12
 800cda6:	bf38      	it	cc
 800cda8:	250c      	movcc	r5, #12
 800cdaa:	2d00      	cmp	r5, #0
 800cdac:	4606      	mov	r6, r0
 800cdae:	db01      	blt.n	800cdb4 <_malloc_r+0x1c>
 800cdb0:	42a9      	cmp	r1, r5
 800cdb2:	d904      	bls.n	800cdbe <_malloc_r+0x26>
 800cdb4:	230c      	movs	r3, #12
 800cdb6:	6033      	str	r3, [r6, #0]
 800cdb8:	2000      	movs	r0, #0
 800cdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce94 <_malloc_r+0xfc>
 800cdc2:	f000 f869 	bl	800ce98 <__malloc_lock>
 800cdc6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdca:	461c      	mov	r4, r3
 800cdcc:	bb44      	cbnz	r4, 800ce20 <_malloc_r+0x88>
 800cdce:	4629      	mov	r1, r5
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7ff ffbf 	bl	800cd54 <sbrk_aligned>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	4604      	mov	r4, r0
 800cdda:	d158      	bne.n	800ce8e <_malloc_r+0xf6>
 800cddc:	f8d8 4000 	ldr.w	r4, [r8]
 800cde0:	4627      	mov	r7, r4
 800cde2:	2f00      	cmp	r7, #0
 800cde4:	d143      	bne.n	800ce6e <_malloc_r+0xd6>
 800cde6:	2c00      	cmp	r4, #0
 800cde8:	d04b      	beq.n	800ce82 <_malloc_r+0xea>
 800cdea:	6823      	ldr	r3, [r4, #0]
 800cdec:	4639      	mov	r1, r7
 800cdee:	4630      	mov	r0, r6
 800cdf0:	eb04 0903 	add.w	r9, r4, r3
 800cdf4:	f000 feea 	bl	800dbcc <_sbrk_r>
 800cdf8:	4581      	cmp	r9, r0
 800cdfa:	d142      	bne.n	800ce82 <_malloc_r+0xea>
 800cdfc:	6821      	ldr	r1, [r4, #0]
 800cdfe:	1a6d      	subs	r5, r5, r1
 800ce00:	4629      	mov	r1, r5
 800ce02:	4630      	mov	r0, r6
 800ce04:	f7ff ffa6 	bl	800cd54 <sbrk_aligned>
 800ce08:	3001      	adds	r0, #1
 800ce0a:	d03a      	beq.n	800ce82 <_malloc_r+0xea>
 800ce0c:	6823      	ldr	r3, [r4, #0]
 800ce0e:	442b      	add	r3, r5
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	f8d8 3000 	ldr.w	r3, [r8]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	bb62      	cbnz	r2, 800ce74 <_malloc_r+0xdc>
 800ce1a:	f8c8 7000 	str.w	r7, [r8]
 800ce1e:	e00f      	b.n	800ce40 <_malloc_r+0xa8>
 800ce20:	6822      	ldr	r2, [r4, #0]
 800ce22:	1b52      	subs	r2, r2, r5
 800ce24:	d420      	bmi.n	800ce68 <_malloc_r+0xd0>
 800ce26:	2a0b      	cmp	r2, #11
 800ce28:	d917      	bls.n	800ce5a <_malloc_r+0xc2>
 800ce2a:	1961      	adds	r1, r4, r5
 800ce2c:	42a3      	cmp	r3, r4
 800ce2e:	6025      	str	r5, [r4, #0]
 800ce30:	bf18      	it	ne
 800ce32:	6059      	strne	r1, [r3, #4]
 800ce34:	6863      	ldr	r3, [r4, #4]
 800ce36:	bf08      	it	eq
 800ce38:	f8c8 1000 	streq.w	r1, [r8]
 800ce3c:	5162      	str	r2, [r4, r5]
 800ce3e:	604b      	str	r3, [r1, #4]
 800ce40:	4630      	mov	r0, r6
 800ce42:	f000 f82f 	bl	800cea4 <__malloc_unlock>
 800ce46:	f104 000b 	add.w	r0, r4, #11
 800ce4a:	1d23      	adds	r3, r4, #4
 800ce4c:	f020 0007 	bic.w	r0, r0, #7
 800ce50:	1ac2      	subs	r2, r0, r3
 800ce52:	bf1c      	itt	ne
 800ce54:	1a1b      	subne	r3, r3, r0
 800ce56:	50a3      	strne	r3, [r4, r2]
 800ce58:	e7af      	b.n	800cdba <_malloc_r+0x22>
 800ce5a:	6862      	ldr	r2, [r4, #4]
 800ce5c:	42a3      	cmp	r3, r4
 800ce5e:	bf0c      	ite	eq
 800ce60:	f8c8 2000 	streq.w	r2, [r8]
 800ce64:	605a      	strne	r2, [r3, #4]
 800ce66:	e7eb      	b.n	800ce40 <_malloc_r+0xa8>
 800ce68:	4623      	mov	r3, r4
 800ce6a:	6864      	ldr	r4, [r4, #4]
 800ce6c:	e7ae      	b.n	800cdcc <_malloc_r+0x34>
 800ce6e:	463c      	mov	r4, r7
 800ce70:	687f      	ldr	r7, [r7, #4]
 800ce72:	e7b6      	b.n	800cde2 <_malloc_r+0x4a>
 800ce74:	461a      	mov	r2, r3
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	42a3      	cmp	r3, r4
 800ce7a:	d1fb      	bne.n	800ce74 <_malloc_r+0xdc>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	6053      	str	r3, [r2, #4]
 800ce80:	e7de      	b.n	800ce40 <_malloc_r+0xa8>
 800ce82:	230c      	movs	r3, #12
 800ce84:	6033      	str	r3, [r6, #0]
 800ce86:	4630      	mov	r0, r6
 800ce88:	f000 f80c 	bl	800cea4 <__malloc_unlock>
 800ce8c:	e794      	b.n	800cdb8 <_malloc_r+0x20>
 800ce8e:	6005      	str	r5, [r0, #0]
 800ce90:	e7d6      	b.n	800ce40 <_malloc_r+0xa8>
 800ce92:	bf00      	nop
 800ce94:	200009f4 	.word	0x200009f4

0800ce98 <__malloc_lock>:
 800ce98:	4801      	ldr	r0, [pc, #4]	@ (800cea0 <__malloc_lock+0x8>)
 800ce9a:	f7ff bf01 	b.w	800cca0 <__retarget_lock_acquire_recursive>
 800ce9e:	bf00      	nop
 800cea0:	200009ec 	.word	0x200009ec

0800cea4 <__malloc_unlock>:
 800cea4:	4801      	ldr	r0, [pc, #4]	@ (800ceac <__malloc_unlock+0x8>)
 800cea6:	f7ff befc 	b.w	800cca2 <__retarget_lock_release_recursive>
 800ceaa:	bf00      	nop
 800ceac:	200009ec 	.word	0x200009ec

0800ceb0 <__ssputs_r>:
 800ceb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb4:	688e      	ldr	r6, [r1, #8]
 800ceb6:	461f      	mov	r7, r3
 800ceb8:	42be      	cmp	r6, r7
 800ceba:	680b      	ldr	r3, [r1, #0]
 800cebc:	4682      	mov	sl, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	4690      	mov	r8, r2
 800cec2:	d82d      	bhi.n	800cf20 <__ssputs_r+0x70>
 800cec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cec8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cecc:	d026      	beq.n	800cf1c <__ssputs_r+0x6c>
 800cece:	6965      	ldr	r5, [r4, #20]
 800ced0:	6909      	ldr	r1, [r1, #16]
 800ced2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ced6:	eba3 0901 	sub.w	r9, r3, r1
 800ceda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cede:	1c7b      	adds	r3, r7, #1
 800cee0:	444b      	add	r3, r9
 800cee2:	106d      	asrs	r5, r5, #1
 800cee4:	429d      	cmp	r5, r3
 800cee6:	bf38      	it	cc
 800cee8:	461d      	movcc	r5, r3
 800ceea:	0553      	lsls	r3, r2, #21
 800ceec:	d527      	bpl.n	800cf3e <__ssputs_r+0x8e>
 800ceee:	4629      	mov	r1, r5
 800cef0:	f7ff ff52 	bl	800cd98 <_malloc_r>
 800cef4:	4606      	mov	r6, r0
 800cef6:	b360      	cbz	r0, 800cf52 <__ssputs_r+0xa2>
 800cef8:	6921      	ldr	r1, [r4, #16]
 800cefa:	464a      	mov	r2, r9
 800cefc:	f7ff fed2 	bl	800cca4 <memcpy>
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	6126      	str	r6, [r4, #16]
 800cf0e:	6165      	str	r5, [r4, #20]
 800cf10:	444e      	add	r6, r9
 800cf12:	eba5 0509 	sub.w	r5, r5, r9
 800cf16:	6026      	str	r6, [r4, #0]
 800cf18:	60a5      	str	r5, [r4, #8]
 800cf1a:	463e      	mov	r6, r7
 800cf1c:	42be      	cmp	r6, r7
 800cf1e:	d900      	bls.n	800cf22 <__ssputs_r+0x72>
 800cf20:	463e      	mov	r6, r7
 800cf22:	6820      	ldr	r0, [r4, #0]
 800cf24:	4632      	mov	r2, r6
 800cf26:	4641      	mov	r1, r8
 800cf28:	f000 fe35 	bl	800db96 <memmove>
 800cf2c:	68a3      	ldr	r3, [r4, #8]
 800cf2e:	1b9b      	subs	r3, r3, r6
 800cf30:	60a3      	str	r3, [r4, #8]
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	4433      	add	r3, r6
 800cf36:	6023      	str	r3, [r4, #0]
 800cf38:	2000      	movs	r0, #0
 800cf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3e:	462a      	mov	r2, r5
 800cf40:	f000 fe54 	bl	800dbec <_realloc_r>
 800cf44:	4606      	mov	r6, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d1e0      	bne.n	800cf0c <__ssputs_r+0x5c>
 800cf4a:	6921      	ldr	r1, [r4, #16]
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	f7ff feb7 	bl	800ccc0 <_free_r>
 800cf52:	230c      	movs	r3, #12
 800cf54:	f8ca 3000 	str.w	r3, [sl]
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf5e:	81a3      	strh	r3, [r4, #12]
 800cf60:	f04f 30ff 	mov.w	r0, #4294967295
 800cf64:	e7e9      	b.n	800cf3a <__ssputs_r+0x8a>
	...

0800cf68 <_svfiprintf_r>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	4698      	mov	r8, r3
 800cf6e:	898b      	ldrh	r3, [r1, #12]
 800cf70:	061b      	lsls	r3, r3, #24
 800cf72:	b09d      	sub	sp, #116	@ 0x74
 800cf74:	4607      	mov	r7, r0
 800cf76:	460d      	mov	r5, r1
 800cf78:	4614      	mov	r4, r2
 800cf7a:	d510      	bpl.n	800cf9e <_svfiprintf_r+0x36>
 800cf7c:	690b      	ldr	r3, [r1, #16]
 800cf7e:	b973      	cbnz	r3, 800cf9e <_svfiprintf_r+0x36>
 800cf80:	2140      	movs	r1, #64	@ 0x40
 800cf82:	f7ff ff09 	bl	800cd98 <_malloc_r>
 800cf86:	6028      	str	r0, [r5, #0]
 800cf88:	6128      	str	r0, [r5, #16]
 800cf8a:	b930      	cbnz	r0, 800cf9a <_svfiprintf_r+0x32>
 800cf8c:	230c      	movs	r3, #12
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	f04f 30ff 	mov.w	r0, #4294967295
 800cf94:	b01d      	add	sp, #116	@ 0x74
 800cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9a:	2340      	movs	r3, #64	@ 0x40
 800cf9c:	616b      	str	r3, [r5, #20]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfa2:	2320      	movs	r3, #32
 800cfa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfac:	2330      	movs	r3, #48	@ 0x30
 800cfae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d14c <_svfiprintf_r+0x1e4>
 800cfb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfb6:	f04f 0901 	mov.w	r9, #1
 800cfba:	4623      	mov	r3, r4
 800cfbc:	469a      	mov	sl, r3
 800cfbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfc2:	b10a      	cbz	r2, 800cfc8 <_svfiprintf_r+0x60>
 800cfc4:	2a25      	cmp	r2, #37	@ 0x25
 800cfc6:	d1f9      	bne.n	800cfbc <_svfiprintf_r+0x54>
 800cfc8:	ebba 0b04 	subs.w	fp, sl, r4
 800cfcc:	d00b      	beq.n	800cfe6 <_svfiprintf_r+0x7e>
 800cfce:	465b      	mov	r3, fp
 800cfd0:	4622      	mov	r2, r4
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f7ff ff6b 	bl	800ceb0 <__ssputs_r>
 800cfda:	3001      	adds	r0, #1
 800cfdc:	f000 80a7 	beq.w	800d12e <_svfiprintf_r+0x1c6>
 800cfe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfe2:	445a      	add	r2, fp
 800cfe4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfe6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f000 809f 	beq.w	800d12e <_svfiprintf_r+0x1c6>
 800cff0:	2300      	movs	r3, #0
 800cff2:	f04f 32ff 	mov.w	r2, #4294967295
 800cff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cffa:	f10a 0a01 	add.w	sl, sl, #1
 800cffe:	9304      	str	r3, [sp, #16]
 800d000:	9307      	str	r3, [sp, #28]
 800d002:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d006:	931a      	str	r3, [sp, #104]	@ 0x68
 800d008:	4654      	mov	r4, sl
 800d00a:	2205      	movs	r2, #5
 800d00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d010:	484e      	ldr	r0, [pc, #312]	@ (800d14c <_svfiprintf_r+0x1e4>)
 800d012:	f7f3 f8f5 	bl	8000200 <memchr>
 800d016:	9a04      	ldr	r2, [sp, #16]
 800d018:	b9d8      	cbnz	r0, 800d052 <_svfiprintf_r+0xea>
 800d01a:	06d0      	lsls	r0, r2, #27
 800d01c:	bf44      	itt	mi
 800d01e:	2320      	movmi	r3, #32
 800d020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d024:	0711      	lsls	r1, r2, #28
 800d026:	bf44      	itt	mi
 800d028:	232b      	movmi	r3, #43	@ 0x2b
 800d02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d02e:	f89a 3000 	ldrb.w	r3, [sl]
 800d032:	2b2a      	cmp	r3, #42	@ 0x2a
 800d034:	d015      	beq.n	800d062 <_svfiprintf_r+0xfa>
 800d036:	9a07      	ldr	r2, [sp, #28]
 800d038:	4654      	mov	r4, sl
 800d03a:	2000      	movs	r0, #0
 800d03c:	f04f 0c0a 	mov.w	ip, #10
 800d040:	4621      	mov	r1, r4
 800d042:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d046:	3b30      	subs	r3, #48	@ 0x30
 800d048:	2b09      	cmp	r3, #9
 800d04a:	d94b      	bls.n	800d0e4 <_svfiprintf_r+0x17c>
 800d04c:	b1b0      	cbz	r0, 800d07c <_svfiprintf_r+0x114>
 800d04e:	9207      	str	r2, [sp, #28]
 800d050:	e014      	b.n	800d07c <_svfiprintf_r+0x114>
 800d052:	eba0 0308 	sub.w	r3, r0, r8
 800d056:	fa09 f303 	lsl.w	r3, r9, r3
 800d05a:	4313      	orrs	r3, r2
 800d05c:	9304      	str	r3, [sp, #16]
 800d05e:	46a2      	mov	sl, r4
 800d060:	e7d2      	b.n	800d008 <_svfiprintf_r+0xa0>
 800d062:	9b03      	ldr	r3, [sp, #12]
 800d064:	1d19      	adds	r1, r3, #4
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	9103      	str	r1, [sp, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bfbb      	ittet	lt
 800d06e:	425b      	neglt	r3, r3
 800d070:	f042 0202 	orrlt.w	r2, r2, #2
 800d074:	9307      	strge	r3, [sp, #28]
 800d076:	9307      	strlt	r3, [sp, #28]
 800d078:	bfb8      	it	lt
 800d07a:	9204      	strlt	r2, [sp, #16]
 800d07c:	7823      	ldrb	r3, [r4, #0]
 800d07e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d080:	d10a      	bne.n	800d098 <_svfiprintf_r+0x130>
 800d082:	7863      	ldrb	r3, [r4, #1]
 800d084:	2b2a      	cmp	r3, #42	@ 0x2a
 800d086:	d132      	bne.n	800d0ee <_svfiprintf_r+0x186>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	1d1a      	adds	r2, r3, #4
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	9203      	str	r2, [sp, #12]
 800d090:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d094:	3402      	adds	r4, #2
 800d096:	9305      	str	r3, [sp, #20]
 800d098:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d15c <_svfiprintf_r+0x1f4>
 800d09c:	7821      	ldrb	r1, [r4, #0]
 800d09e:	2203      	movs	r2, #3
 800d0a0:	4650      	mov	r0, sl
 800d0a2:	f7f3 f8ad 	bl	8000200 <memchr>
 800d0a6:	b138      	cbz	r0, 800d0b8 <_svfiprintf_r+0x150>
 800d0a8:	9b04      	ldr	r3, [sp, #16]
 800d0aa:	eba0 000a 	sub.w	r0, r0, sl
 800d0ae:	2240      	movs	r2, #64	@ 0x40
 800d0b0:	4082      	lsls	r2, r0
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	3401      	adds	r4, #1
 800d0b6:	9304      	str	r3, [sp, #16]
 800d0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0bc:	4824      	ldr	r0, [pc, #144]	@ (800d150 <_svfiprintf_r+0x1e8>)
 800d0be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0c2:	2206      	movs	r2, #6
 800d0c4:	f7f3 f89c 	bl	8000200 <memchr>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d036      	beq.n	800d13a <_svfiprintf_r+0x1d2>
 800d0cc:	4b21      	ldr	r3, [pc, #132]	@ (800d154 <_svfiprintf_r+0x1ec>)
 800d0ce:	bb1b      	cbnz	r3, 800d118 <_svfiprintf_r+0x1b0>
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	3307      	adds	r3, #7
 800d0d4:	f023 0307 	bic.w	r3, r3, #7
 800d0d8:	3308      	adds	r3, #8
 800d0da:	9303      	str	r3, [sp, #12]
 800d0dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0de:	4433      	add	r3, r6
 800d0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0e2:	e76a      	b.n	800cfba <_svfiprintf_r+0x52>
 800d0e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	e7a8      	b.n	800d040 <_svfiprintf_r+0xd8>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	3401      	adds	r4, #1
 800d0f2:	9305      	str	r3, [sp, #20]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	f04f 0c0a 	mov.w	ip, #10
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d100:	3a30      	subs	r2, #48	@ 0x30
 800d102:	2a09      	cmp	r2, #9
 800d104:	d903      	bls.n	800d10e <_svfiprintf_r+0x1a6>
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0c6      	beq.n	800d098 <_svfiprintf_r+0x130>
 800d10a:	9105      	str	r1, [sp, #20]
 800d10c:	e7c4      	b.n	800d098 <_svfiprintf_r+0x130>
 800d10e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d112:	4604      	mov	r4, r0
 800d114:	2301      	movs	r3, #1
 800d116:	e7f0      	b.n	800d0fa <_svfiprintf_r+0x192>
 800d118:	ab03      	add	r3, sp, #12
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	462a      	mov	r2, r5
 800d11e:	4b0e      	ldr	r3, [pc, #56]	@ (800d158 <_svfiprintf_r+0x1f0>)
 800d120:	a904      	add	r1, sp, #16
 800d122:	4638      	mov	r0, r7
 800d124:	f3af 8000 	nop.w
 800d128:	1c42      	adds	r2, r0, #1
 800d12a:	4606      	mov	r6, r0
 800d12c:	d1d6      	bne.n	800d0dc <_svfiprintf_r+0x174>
 800d12e:	89ab      	ldrh	r3, [r5, #12]
 800d130:	065b      	lsls	r3, r3, #25
 800d132:	f53f af2d 	bmi.w	800cf90 <_svfiprintf_r+0x28>
 800d136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d138:	e72c      	b.n	800cf94 <_svfiprintf_r+0x2c>
 800d13a:	ab03      	add	r3, sp, #12
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	462a      	mov	r2, r5
 800d140:	4b05      	ldr	r3, [pc, #20]	@ (800d158 <_svfiprintf_r+0x1f0>)
 800d142:	a904      	add	r1, sp, #16
 800d144:	4638      	mov	r0, r7
 800d146:	f000 fa45 	bl	800d5d4 <_printf_i>
 800d14a:	e7ed      	b.n	800d128 <_svfiprintf_r+0x1c0>
 800d14c:	0800f5e1 	.word	0x0800f5e1
 800d150:	0800f5eb 	.word	0x0800f5eb
 800d154:	00000000 	.word	0x00000000
 800d158:	0800ceb1 	.word	0x0800ceb1
 800d15c:	0800f5e7 	.word	0x0800f5e7

0800d160 <_sungetc_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	1c4b      	adds	r3, r1, #1
 800d164:	4614      	mov	r4, r2
 800d166:	d103      	bne.n	800d170 <_sungetc_r+0x10>
 800d168:	f04f 35ff 	mov.w	r5, #4294967295
 800d16c:	4628      	mov	r0, r5
 800d16e:	bd38      	pop	{r3, r4, r5, pc}
 800d170:	8993      	ldrh	r3, [r2, #12]
 800d172:	f023 0320 	bic.w	r3, r3, #32
 800d176:	8193      	strh	r3, [r2, #12]
 800d178:	6853      	ldr	r3, [r2, #4]
 800d17a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d17c:	b2cd      	uxtb	r5, r1
 800d17e:	b18a      	cbz	r2, 800d1a4 <_sungetc_r+0x44>
 800d180:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d182:	429a      	cmp	r2, r3
 800d184:	dd08      	ble.n	800d198 <_sungetc_r+0x38>
 800d186:	6823      	ldr	r3, [r4, #0]
 800d188:	1e5a      	subs	r2, r3, #1
 800d18a:	6022      	str	r2, [r4, #0]
 800d18c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d190:	6863      	ldr	r3, [r4, #4]
 800d192:	3301      	adds	r3, #1
 800d194:	6063      	str	r3, [r4, #4]
 800d196:	e7e9      	b.n	800d16c <_sungetc_r+0xc>
 800d198:	4621      	mov	r1, r4
 800d19a:	f000 fcc2 	bl	800db22 <__submore>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d0f1      	beq.n	800d186 <_sungetc_r+0x26>
 800d1a2:	e7e1      	b.n	800d168 <_sungetc_r+0x8>
 800d1a4:	6921      	ldr	r1, [r4, #16]
 800d1a6:	6822      	ldr	r2, [r4, #0]
 800d1a8:	b141      	cbz	r1, 800d1bc <_sungetc_r+0x5c>
 800d1aa:	4291      	cmp	r1, r2
 800d1ac:	d206      	bcs.n	800d1bc <_sungetc_r+0x5c>
 800d1ae:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d1b2:	42a9      	cmp	r1, r5
 800d1b4:	d102      	bne.n	800d1bc <_sungetc_r+0x5c>
 800d1b6:	3a01      	subs	r2, #1
 800d1b8:	6022      	str	r2, [r4, #0]
 800d1ba:	e7ea      	b.n	800d192 <_sungetc_r+0x32>
 800d1bc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d1c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d1ca:	4623      	mov	r3, r4
 800d1cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e7de      	b.n	800d194 <_sungetc_r+0x34>

0800d1d6 <__ssrefill_r>:
 800d1d6:	b510      	push	{r4, lr}
 800d1d8:	460c      	mov	r4, r1
 800d1da:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d1dc:	b169      	cbz	r1, 800d1fa <__ssrefill_r+0x24>
 800d1de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d001      	beq.n	800d1ea <__ssrefill_r+0x14>
 800d1e6:	f7ff fd6b 	bl	800ccc0 <_free_r>
 800d1ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1ec:	6063      	str	r3, [r4, #4]
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	6360      	str	r0, [r4, #52]	@ 0x34
 800d1f2:	b113      	cbz	r3, 800d1fa <__ssrefill_r+0x24>
 800d1f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	bd10      	pop	{r4, pc}
 800d1fa:	6923      	ldr	r3, [r4, #16]
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	2300      	movs	r3, #0
 800d200:	6063      	str	r3, [r4, #4]
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	f043 0320 	orr.w	r3, r3, #32
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	f04f 30ff 	mov.w	r0, #4294967295
 800d20e:	e7f3      	b.n	800d1f8 <__ssrefill_r+0x22>

0800d210 <__ssvfiscanf_r>:
 800d210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d214:	460c      	mov	r4, r1
 800d216:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d21a:	2100      	movs	r1, #0
 800d21c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d220:	49a5      	ldr	r1, [pc, #660]	@ (800d4b8 <__ssvfiscanf_r+0x2a8>)
 800d222:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d224:	f10d 0804 	add.w	r8, sp, #4
 800d228:	49a4      	ldr	r1, [pc, #656]	@ (800d4bc <__ssvfiscanf_r+0x2ac>)
 800d22a:	4fa5      	ldr	r7, [pc, #660]	@ (800d4c0 <__ssvfiscanf_r+0x2b0>)
 800d22c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d230:	4606      	mov	r6, r0
 800d232:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	7813      	ldrb	r3, [r2, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 8158 	beq.w	800d4ee <__ssvfiscanf_r+0x2de>
 800d23e:	5cf9      	ldrb	r1, [r7, r3]
 800d240:	f011 0108 	ands.w	r1, r1, #8
 800d244:	f102 0501 	add.w	r5, r2, #1
 800d248:	d019      	beq.n	800d27e <__ssvfiscanf_r+0x6e>
 800d24a:	6863      	ldr	r3, [r4, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	dd0f      	ble.n	800d270 <__ssvfiscanf_r+0x60>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	781a      	ldrb	r2, [r3, #0]
 800d254:	5cba      	ldrb	r2, [r7, r2]
 800d256:	0712      	lsls	r2, r2, #28
 800d258:	d401      	bmi.n	800d25e <__ssvfiscanf_r+0x4e>
 800d25a:	462a      	mov	r2, r5
 800d25c:	e7eb      	b.n	800d236 <__ssvfiscanf_r+0x26>
 800d25e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d260:	3201      	adds	r2, #1
 800d262:	9245      	str	r2, [sp, #276]	@ 0x114
 800d264:	6862      	ldr	r2, [r4, #4]
 800d266:	3301      	adds	r3, #1
 800d268:	3a01      	subs	r2, #1
 800d26a:	6062      	str	r2, [r4, #4]
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	e7ec      	b.n	800d24a <__ssvfiscanf_r+0x3a>
 800d270:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d272:	4621      	mov	r1, r4
 800d274:	4630      	mov	r0, r6
 800d276:	4798      	blx	r3
 800d278:	2800      	cmp	r0, #0
 800d27a:	d0e9      	beq.n	800d250 <__ssvfiscanf_r+0x40>
 800d27c:	e7ed      	b.n	800d25a <__ssvfiscanf_r+0x4a>
 800d27e:	2b25      	cmp	r3, #37	@ 0x25
 800d280:	d012      	beq.n	800d2a8 <__ssvfiscanf_r+0x98>
 800d282:	4699      	mov	r9, r3
 800d284:	6863      	ldr	r3, [r4, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	f340 8093 	ble.w	800d3b2 <__ssvfiscanf_r+0x1a2>
 800d28c:	6822      	ldr	r2, [r4, #0]
 800d28e:	7813      	ldrb	r3, [r2, #0]
 800d290:	454b      	cmp	r3, r9
 800d292:	f040 812c 	bne.w	800d4ee <__ssvfiscanf_r+0x2de>
 800d296:	6863      	ldr	r3, [r4, #4]
 800d298:	3b01      	subs	r3, #1
 800d29a:	6063      	str	r3, [r4, #4]
 800d29c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d29e:	3201      	adds	r2, #1
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	6022      	str	r2, [r4, #0]
 800d2a4:	9345      	str	r3, [sp, #276]	@ 0x114
 800d2a6:	e7d8      	b.n	800d25a <__ssvfiscanf_r+0x4a>
 800d2a8:	9141      	str	r1, [sp, #260]	@ 0x104
 800d2aa:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d2ac:	7853      	ldrb	r3, [r2, #1]
 800d2ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2b0:	bf02      	ittt	eq
 800d2b2:	2310      	moveq	r3, #16
 800d2b4:	1c95      	addeq	r5, r2, #2
 800d2b6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d2b8:	220a      	movs	r2, #10
 800d2ba:	46a9      	mov	r9, r5
 800d2bc:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d2c0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d2c4:	2b09      	cmp	r3, #9
 800d2c6:	d91e      	bls.n	800d306 <__ssvfiscanf_r+0xf6>
 800d2c8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800d4c4 <__ssvfiscanf_r+0x2b4>
 800d2cc:	2203      	movs	r2, #3
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	f7f2 ff96 	bl	8000200 <memchr>
 800d2d4:	b138      	cbz	r0, 800d2e6 <__ssvfiscanf_r+0xd6>
 800d2d6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d2d8:	eba0 000a 	sub.w	r0, r0, sl
 800d2dc:	2301      	movs	r3, #1
 800d2de:	4083      	lsls	r3, r0
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	9341      	str	r3, [sp, #260]	@ 0x104
 800d2e4:	464d      	mov	r5, r9
 800d2e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2ea:	2b78      	cmp	r3, #120	@ 0x78
 800d2ec:	d806      	bhi.n	800d2fc <__ssvfiscanf_r+0xec>
 800d2ee:	2b57      	cmp	r3, #87	@ 0x57
 800d2f0:	d810      	bhi.n	800d314 <__ssvfiscanf_r+0x104>
 800d2f2:	2b25      	cmp	r3, #37	@ 0x25
 800d2f4:	d0c5      	beq.n	800d282 <__ssvfiscanf_r+0x72>
 800d2f6:	d857      	bhi.n	800d3a8 <__ssvfiscanf_r+0x198>
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d065      	beq.n	800d3c8 <__ssvfiscanf_r+0x1b8>
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d300:	230a      	movs	r3, #10
 800d302:	9342      	str	r3, [sp, #264]	@ 0x108
 800d304:	e078      	b.n	800d3f8 <__ssvfiscanf_r+0x1e8>
 800d306:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d308:	fb02 1103 	mla	r1, r2, r3, r1
 800d30c:	3930      	subs	r1, #48	@ 0x30
 800d30e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d310:	464d      	mov	r5, r9
 800d312:	e7d2      	b.n	800d2ba <__ssvfiscanf_r+0xaa>
 800d314:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d318:	2a20      	cmp	r2, #32
 800d31a:	d8ef      	bhi.n	800d2fc <__ssvfiscanf_r+0xec>
 800d31c:	a101      	add	r1, pc, #4	@ (adr r1, 800d324 <__ssvfiscanf_r+0x114>)
 800d31e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d322:	bf00      	nop
 800d324:	0800d3d7 	.word	0x0800d3d7
 800d328:	0800d2fd 	.word	0x0800d2fd
 800d32c:	0800d2fd 	.word	0x0800d2fd
 800d330:	0800d431 	.word	0x0800d431
 800d334:	0800d2fd 	.word	0x0800d2fd
 800d338:	0800d2fd 	.word	0x0800d2fd
 800d33c:	0800d2fd 	.word	0x0800d2fd
 800d340:	0800d2fd 	.word	0x0800d2fd
 800d344:	0800d2fd 	.word	0x0800d2fd
 800d348:	0800d2fd 	.word	0x0800d2fd
 800d34c:	0800d2fd 	.word	0x0800d2fd
 800d350:	0800d447 	.word	0x0800d447
 800d354:	0800d42d 	.word	0x0800d42d
 800d358:	0800d3af 	.word	0x0800d3af
 800d35c:	0800d3af 	.word	0x0800d3af
 800d360:	0800d3af 	.word	0x0800d3af
 800d364:	0800d2fd 	.word	0x0800d2fd
 800d368:	0800d3e9 	.word	0x0800d3e9
 800d36c:	0800d2fd 	.word	0x0800d2fd
 800d370:	0800d2fd 	.word	0x0800d2fd
 800d374:	0800d2fd 	.word	0x0800d2fd
 800d378:	0800d2fd 	.word	0x0800d2fd
 800d37c:	0800d457 	.word	0x0800d457
 800d380:	0800d3f1 	.word	0x0800d3f1
 800d384:	0800d3cf 	.word	0x0800d3cf
 800d388:	0800d2fd 	.word	0x0800d2fd
 800d38c:	0800d2fd 	.word	0x0800d2fd
 800d390:	0800d453 	.word	0x0800d453
 800d394:	0800d2fd 	.word	0x0800d2fd
 800d398:	0800d42d 	.word	0x0800d42d
 800d39c:	0800d2fd 	.word	0x0800d2fd
 800d3a0:	0800d2fd 	.word	0x0800d2fd
 800d3a4:	0800d3d7 	.word	0x0800d3d7
 800d3a8:	3b45      	subs	r3, #69	@ 0x45
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d8a6      	bhi.n	800d2fc <__ssvfiscanf_r+0xec>
 800d3ae:	2305      	movs	r3, #5
 800d3b0:	e021      	b.n	800d3f6 <__ssvfiscanf_r+0x1e6>
 800d3b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	4798      	blx	r3
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	f43f af66 	beq.w	800d28c <__ssvfiscanf_r+0x7c>
 800d3c0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f040 808b 	bne.w	800d4de <__ssvfiscanf_r+0x2ce>
 800d3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3cc:	e08b      	b.n	800d4e6 <__ssvfiscanf_r+0x2d6>
 800d3ce:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d3d0:	f042 0220 	orr.w	r2, r2, #32
 800d3d4:	9241      	str	r2, [sp, #260]	@ 0x104
 800d3d6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d3d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3dc:	9241      	str	r2, [sp, #260]	@ 0x104
 800d3de:	2210      	movs	r2, #16
 800d3e0:	2b6e      	cmp	r3, #110	@ 0x6e
 800d3e2:	9242      	str	r2, [sp, #264]	@ 0x108
 800d3e4:	d902      	bls.n	800d3ec <__ssvfiscanf_r+0x1dc>
 800d3e6:	e005      	b.n	800d3f4 <__ssvfiscanf_r+0x1e4>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	9342      	str	r3, [sp, #264]	@ 0x108
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	e002      	b.n	800d3f6 <__ssvfiscanf_r+0x1e6>
 800d3f0:	2308      	movs	r3, #8
 800d3f2:	9342      	str	r3, [sp, #264]	@ 0x108
 800d3f4:	2304      	movs	r3, #4
 800d3f6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d3f8:	6863      	ldr	r3, [r4, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	dd39      	ble.n	800d472 <__ssvfiscanf_r+0x262>
 800d3fe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d400:	0659      	lsls	r1, r3, #25
 800d402:	d404      	bmi.n	800d40e <__ssvfiscanf_r+0x1fe>
 800d404:	6823      	ldr	r3, [r4, #0]
 800d406:	781a      	ldrb	r2, [r3, #0]
 800d408:	5cba      	ldrb	r2, [r7, r2]
 800d40a:	0712      	lsls	r2, r2, #28
 800d40c:	d438      	bmi.n	800d480 <__ssvfiscanf_r+0x270>
 800d40e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d410:	2b02      	cmp	r3, #2
 800d412:	dc47      	bgt.n	800d4a4 <__ssvfiscanf_r+0x294>
 800d414:	466b      	mov	r3, sp
 800d416:	4622      	mov	r2, r4
 800d418:	a941      	add	r1, sp, #260	@ 0x104
 800d41a:	4630      	mov	r0, r6
 800d41c:	f000 f9fa 	bl	800d814 <_scanf_chars>
 800d420:	2801      	cmp	r0, #1
 800d422:	d064      	beq.n	800d4ee <__ssvfiscanf_r+0x2de>
 800d424:	2802      	cmp	r0, #2
 800d426:	f47f af18 	bne.w	800d25a <__ssvfiscanf_r+0x4a>
 800d42a:	e7c9      	b.n	800d3c0 <__ssvfiscanf_r+0x1b0>
 800d42c:	220a      	movs	r2, #10
 800d42e:	e7d7      	b.n	800d3e0 <__ssvfiscanf_r+0x1d0>
 800d430:	4629      	mov	r1, r5
 800d432:	4640      	mov	r0, r8
 800d434:	f000 fb3c 	bl	800dab0 <__sccl>
 800d438:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d43e:	9341      	str	r3, [sp, #260]	@ 0x104
 800d440:	4605      	mov	r5, r0
 800d442:	2301      	movs	r3, #1
 800d444:	e7d7      	b.n	800d3f6 <__ssvfiscanf_r+0x1e6>
 800d446:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d44c:	9341      	str	r3, [sp, #260]	@ 0x104
 800d44e:	2300      	movs	r3, #0
 800d450:	e7d1      	b.n	800d3f6 <__ssvfiscanf_r+0x1e6>
 800d452:	2302      	movs	r3, #2
 800d454:	e7cf      	b.n	800d3f6 <__ssvfiscanf_r+0x1e6>
 800d456:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d458:	06c3      	lsls	r3, r0, #27
 800d45a:	f53f aefe 	bmi.w	800d25a <__ssvfiscanf_r+0x4a>
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d462:	1d19      	adds	r1, r3, #4
 800d464:	9100      	str	r1, [sp, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	07c0      	lsls	r0, r0, #31
 800d46a:	bf4c      	ite	mi
 800d46c:	801a      	strhmi	r2, [r3, #0]
 800d46e:	601a      	strpl	r2, [r3, #0]
 800d470:	e6f3      	b.n	800d25a <__ssvfiscanf_r+0x4a>
 800d472:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d474:	4621      	mov	r1, r4
 800d476:	4630      	mov	r0, r6
 800d478:	4798      	blx	r3
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d0bf      	beq.n	800d3fe <__ssvfiscanf_r+0x1ee>
 800d47e:	e79f      	b.n	800d3c0 <__ssvfiscanf_r+0x1b0>
 800d480:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d482:	3201      	adds	r2, #1
 800d484:	9245      	str	r2, [sp, #276]	@ 0x114
 800d486:	6862      	ldr	r2, [r4, #4]
 800d488:	3a01      	subs	r2, #1
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	6062      	str	r2, [r4, #4]
 800d48e:	dd02      	ble.n	800d496 <__ssvfiscanf_r+0x286>
 800d490:	3301      	adds	r3, #1
 800d492:	6023      	str	r3, [r4, #0]
 800d494:	e7b6      	b.n	800d404 <__ssvfiscanf_r+0x1f4>
 800d496:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d498:	4621      	mov	r1, r4
 800d49a:	4630      	mov	r0, r6
 800d49c:	4798      	blx	r3
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d0b0      	beq.n	800d404 <__ssvfiscanf_r+0x1f4>
 800d4a2:	e78d      	b.n	800d3c0 <__ssvfiscanf_r+0x1b0>
 800d4a4:	2b04      	cmp	r3, #4
 800d4a6:	dc0f      	bgt.n	800d4c8 <__ssvfiscanf_r+0x2b8>
 800d4a8:	466b      	mov	r3, sp
 800d4aa:	4622      	mov	r2, r4
 800d4ac:	a941      	add	r1, sp, #260	@ 0x104
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f000 fa0a 	bl	800d8c8 <_scanf_i>
 800d4b4:	e7b4      	b.n	800d420 <__ssvfiscanf_r+0x210>
 800d4b6:	bf00      	nop
 800d4b8:	0800d161 	.word	0x0800d161
 800d4bc:	0800d1d7 	.word	0x0800d1d7
 800d4c0:	0800f4e1 	.word	0x0800f4e1
 800d4c4:	0800f5e7 	.word	0x0800f5e7
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4f4 <__ssvfiscanf_r+0x2e4>)
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f43f aec5 	beq.w	800d25a <__ssvfiscanf_r+0x4a>
 800d4d0:	466b      	mov	r3, sp
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	a941      	add	r1, sp, #260	@ 0x104
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f3af 8000 	nop.w
 800d4dc:	e7a0      	b.n	800d420 <__ssvfiscanf_r+0x210>
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	065b      	lsls	r3, r3, #25
 800d4e2:	f53f af71 	bmi.w	800d3c8 <__ssvfiscanf_r+0x1b8>
 800d4e6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ee:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d4f0:	e7f9      	b.n	800d4e6 <__ssvfiscanf_r+0x2d6>
 800d4f2:	bf00      	nop
 800d4f4:	00000000 	.word	0x00000000

0800d4f8 <_printf_common>:
 800d4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	4698      	mov	r8, r3
 800d500:	688a      	ldr	r2, [r1, #8]
 800d502:	690b      	ldr	r3, [r1, #16]
 800d504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d508:	4293      	cmp	r3, r2
 800d50a:	bfb8      	it	lt
 800d50c:	4613      	movlt	r3, r2
 800d50e:	6033      	str	r3, [r6, #0]
 800d510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d514:	4607      	mov	r7, r0
 800d516:	460c      	mov	r4, r1
 800d518:	b10a      	cbz	r2, 800d51e <_printf_common+0x26>
 800d51a:	3301      	adds	r3, #1
 800d51c:	6033      	str	r3, [r6, #0]
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	0699      	lsls	r1, r3, #26
 800d522:	bf42      	ittt	mi
 800d524:	6833      	ldrmi	r3, [r6, #0]
 800d526:	3302      	addmi	r3, #2
 800d528:	6033      	strmi	r3, [r6, #0]
 800d52a:	6825      	ldr	r5, [r4, #0]
 800d52c:	f015 0506 	ands.w	r5, r5, #6
 800d530:	d106      	bne.n	800d540 <_printf_common+0x48>
 800d532:	f104 0a19 	add.w	sl, r4, #25
 800d536:	68e3      	ldr	r3, [r4, #12]
 800d538:	6832      	ldr	r2, [r6, #0]
 800d53a:	1a9b      	subs	r3, r3, r2
 800d53c:	42ab      	cmp	r3, r5
 800d53e:	dc26      	bgt.n	800d58e <_printf_common+0x96>
 800d540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d544:	6822      	ldr	r2, [r4, #0]
 800d546:	3b00      	subs	r3, #0
 800d548:	bf18      	it	ne
 800d54a:	2301      	movne	r3, #1
 800d54c:	0692      	lsls	r2, r2, #26
 800d54e:	d42b      	bmi.n	800d5a8 <_printf_common+0xb0>
 800d550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d554:	4641      	mov	r1, r8
 800d556:	4638      	mov	r0, r7
 800d558:	47c8      	blx	r9
 800d55a:	3001      	adds	r0, #1
 800d55c:	d01e      	beq.n	800d59c <_printf_common+0xa4>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	6922      	ldr	r2, [r4, #16]
 800d562:	f003 0306 	and.w	r3, r3, #6
 800d566:	2b04      	cmp	r3, #4
 800d568:	bf02      	ittt	eq
 800d56a:	68e5      	ldreq	r5, [r4, #12]
 800d56c:	6833      	ldreq	r3, [r6, #0]
 800d56e:	1aed      	subeq	r5, r5, r3
 800d570:	68a3      	ldr	r3, [r4, #8]
 800d572:	bf0c      	ite	eq
 800d574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d578:	2500      	movne	r5, #0
 800d57a:	4293      	cmp	r3, r2
 800d57c:	bfc4      	itt	gt
 800d57e:	1a9b      	subgt	r3, r3, r2
 800d580:	18ed      	addgt	r5, r5, r3
 800d582:	2600      	movs	r6, #0
 800d584:	341a      	adds	r4, #26
 800d586:	42b5      	cmp	r5, r6
 800d588:	d11a      	bne.n	800d5c0 <_printf_common+0xc8>
 800d58a:	2000      	movs	r0, #0
 800d58c:	e008      	b.n	800d5a0 <_printf_common+0xa8>
 800d58e:	2301      	movs	r3, #1
 800d590:	4652      	mov	r2, sl
 800d592:	4641      	mov	r1, r8
 800d594:	4638      	mov	r0, r7
 800d596:	47c8      	blx	r9
 800d598:	3001      	adds	r0, #1
 800d59a:	d103      	bne.n	800d5a4 <_printf_common+0xac>
 800d59c:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a4:	3501      	adds	r5, #1
 800d5a6:	e7c6      	b.n	800d536 <_printf_common+0x3e>
 800d5a8:	18e1      	adds	r1, r4, r3
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	2030      	movs	r0, #48	@ 0x30
 800d5ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d5b2:	4422      	add	r2, r4
 800d5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d5b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d5bc:	3302      	adds	r3, #2
 800d5be:	e7c7      	b.n	800d550 <_printf_common+0x58>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	4622      	mov	r2, r4
 800d5c4:	4641      	mov	r1, r8
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	47c8      	blx	r9
 800d5ca:	3001      	adds	r0, #1
 800d5cc:	d0e6      	beq.n	800d59c <_printf_common+0xa4>
 800d5ce:	3601      	adds	r6, #1
 800d5d0:	e7d9      	b.n	800d586 <_printf_common+0x8e>
	...

0800d5d4 <_printf_i>:
 800d5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	7e0f      	ldrb	r7, [r1, #24]
 800d5da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d5dc:	2f78      	cmp	r7, #120	@ 0x78
 800d5de:	4691      	mov	r9, r2
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	469a      	mov	sl, r3
 800d5e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d5ea:	d807      	bhi.n	800d5fc <_printf_i+0x28>
 800d5ec:	2f62      	cmp	r7, #98	@ 0x62
 800d5ee:	d80a      	bhi.n	800d606 <_printf_i+0x32>
 800d5f0:	2f00      	cmp	r7, #0
 800d5f2:	f000 80d2 	beq.w	800d79a <_printf_i+0x1c6>
 800d5f6:	2f58      	cmp	r7, #88	@ 0x58
 800d5f8:	f000 80b9 	beq.w	800d76e <_printf_i+0x19a>
 800d5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d604:	e03a      	b.n	800d67c <_printf_i+0xa8>
 800d606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d60a:	2b15      	cmp	r3, #21
 800d60c:	d8f6      	bhi.n	800d5fc <_printf_i+0x28>
 800d60e:	a101      	add	r1, pc, #4	@ (adr r1, 800d614 <_printf_i+0x40>)
 800d610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d614:	0800d66d 	.word	0x0800d66d
 800d618:	0800d681 	.word	0x0800d681
 800d61c:	0800d5fd 	.word	0x0800d5fd
 800d620:	0800d5fd 	.word	0x0800d5fd
 800d624:	0800d5fd 	.word	0x0800d5fd
 800d628:	0800d5fd 	.word	0x0800d5fd
 800d62c:	0800d681 	.word	0x0800d681
 800d630:	0800d5fd 	.word	0x0800d5fd
 800d634:	0800d5fd 	.word	0x0800d5fd
 800d638:	0800d5fd 	.word	0x0800d5fd
 800d63c:	0800d5fd 	.word	0x0800d5fd
 800d640:	0800d781 	.word	0x0800d781
 800d644:	0800d6ab 	.word	0x0800d6ab
 800d648:	0800d73b 	.word	0x0800d73b
 800d64c:	0800d5fd 	.word	0x0800d5fd
 800d650:	0800d5fd 	.word	0x0800d5fd
 800d654:	0800d7a3 	.word	0x0800d7a3
 800d658:	0800d5fd 	.word	0x0800d5fd
 800d65c:	0800d6ab 	.word	0x0800d6ab
 800d660:	0800d5fd 	.word	0x0800d5fd
 800d664:	0800d5fd 	.word	0x0800d5fd
 800d668:	0800d743 	.word	0x0800d743
 800d66c:	6833      	ldr	r3, [r6, #0]
 800d66e:	1d1a      	adds	r2, r3, #4
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6032      	str	r2, [r6, #0]
 800d674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d67c:	2301      	movs	r3, #1
 800d67e:	e09d      	b.n	800d7bc <_printf_i+0x1e8>
 800d680:	6833      	ldr	r3, [r6, #0]
 800d682:	6820      	ldr	r0, [r4, #0]
 800d684:	1d19      	adds	r1, r3, #4
 800d686:	6031      	str	r1, [r6, #0]
 800d688:	0606      	lsls	r6, r0, #24
 800d68a:	d501      	bpl.n	800d690 <_printf_i+0xbc>
 800d68c:	681d      	ldr	r5, [r3, #0]
 800d68e:	e003      	b.n	800d698 <_printf_i+0xc4>
 800d690:	0645      	lsls	r5, r0, #25
 800d692:	d5fb      	bpl.n	800d68c <_printf_i+0xb8>
 800d694:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d698:	2d00      	cmp	r5, #0
 800d69a:	da03      	bge.n	800d6a4 <_printf_i+0xd0>
 800d69c:	232d      	movs	r3, #45	@ 0x2d
 800d69e:	426d      	negs	r5, r5
 800d6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6a4:	4859      	ldr	r0, [pc, #356]	@ (800d80c <_printf_i+0x238>)
 800d6a6:	230a      	movs	r3, #10
 800d6a8:	e011      	b.n	800d6ce <_printf_i+0xfa>
 800d6aa:	6821      	ldr	r1, [r4, #0]
 800d6ac:	6833      	ldr	r3, [r6, #0]
 800d6ae:	0608      	lsls	r0, r1, #24
 800d6b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d6b4:	d402      	bmi.n	800d6bc <_printf_i+0xe8>
 800d6b6:	0649      	lsls	r1, r1, #25
 800d6b8:	bf48      	it	mi
 800d6ba:	b2ad      	uxthmi	r5, r5
 800d6bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d6be:	4853      	ldr	r0, [pc, #332]	@ (800d80c <_printf_i+0x238>)
 800d6c0:	6033      	str	r3, [r6, #0]
 800d6c2:	bf14      	ite	ne
 800d6c4:	230a      	movne	r3, #10
 800d6c6:	2308      	moveq	r3, #8
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d6ce:	6866      	ldr	r6, [r4, #4]
 800d6d0:	60a6      	str	r6, [r4, #8]
 800d6d2:	2e00      	cmp	r6, #0
 800d6d4:	bfa2      	ittt	ge
 800d6d6:	6821      	ldrge	r1, [r4, #0]
 800d6d8:	f021 0104 	bicge.w	r1, r1, #4
 800d6dc:	6021      	strge	r1, [r4, #0]
 800d6de:	b90d      	cbnz	r5, 800d6e4 <_printf_i+0x110>
 800d6e0:	2e00      	cmp	r6, #0
 800d6e2:	d04b      	beq.n	800d77c <_printf_i+0x1a8>
 800d6e4:	4616      	mov	r6, r2
 800d6e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6ea:	fb03 5711 	mls	r7, r3, r1, r5
 800d6ee:	5dc7      	ldrb	r7, [r0, r7]
 800d6f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6f4:	462f      	mov	r7, r5
 800d6f6:	42bb      	cmp	r3, r7
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	d9f4      	bls.n	800d6e6 <_printf_i+0x112>
 800d6fc:	2b08      	cmp	r3, #8
 800d6fe:	d10b      	bne.n	800d718 <_printf_i+0x144>
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	07df      	lsls	r7, r3, #31
 800d704:	d508      	bpl.n	800d718 <_printf_i+0x144>
 800d706:	6923      	ldr	r3, [r4, #16]
 800d708:	6861      	ldr	r1, [r4, #4]
 800d70a:	4299      	cmp	r1, r3
 800d70c:	bfde      	ittt	le
 800d70e:	2330      	movle	r3, #48	@ 0x30
 800d710:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d714:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d718:	1b92      	subs	r2, r2, r6
 800d71a:	6122      	str	r2, [r4, #16]
 800d71c:	f8cd a000 	str.w	sl, [sp]
 800d720:	464b      	mov	r3, r9
 800d722:	aa03      	add	r2, sp, #12
 800d724:	4621      	mov	r1, r4
 800d726:	4640      	mov	r0, r8
 800d728:	f7ff fee6 	bl	800d4f8 <_printf_common>
 800d72c:	3001      	adds	r0, #1
 800d72e:	d14a      	bne.n	800d7c6 <_printf_i+0x1f2>
 800d730:	f04f 30ff 	mov.w	r0, #4294967295
 800d734:	b004      	add	sp, #16
 800d736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	f043 0320 	orr.w	r3, r3, #32
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	4833      	ldr	r0, [pc, #204]	@ (800d810 <_printf_i+0x23c>)
 800d744:	2778      	movs	r7, #120	@ 0x78
 800d746:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	6831      	ldr	r1, [r6, #0]
 800d74e:	061f      	lsls	r7, r3, #24
 800d750:	f851 5b04 	ldr.w	r5, [r1], #4
 800d754:	d402      	bmi.n	800d75c <_printf_i+0x188>
 800d756:	065f      	lsls	r7, r3, #25
 800d758:	bf48      	it	mi
 800d75a:	b2ad      	uxthmi	r5, r5
 800d75c:	6031      	str	r1, [r6, #0]
 800d75e:	07d9      	lsls	r1, r3, #31
 800d760:	bf44      	itt	mi
 800d762:	f043 0320 	orrmi.w	r3, r3, #32
 800d766:	6023      	strmi	r3, [r4, #0]
 800d768:	b11d      	cbz	r5, 800d772 <_printf_i+0x19e>
 800d76a:	2310      	movs	r3, #16
 800d76c:	e7ac      	b.n	800d6c8 <_printf_i+0xf4>
 800d76e:	4827      	ldr	r0, [pc, #156]	@ (800d80c <_printf_i+0x238>)
 800d770:	e7e9      	b.n	800d746 <_printf_i+0x172>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	f023 0320 	bic.w	r3, r3, #32
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	e7f6      	b.n	800d76a <_printf_i+0x196>
 800d77c:	4616      	mov	r6, r2
 800d77e:	e7bd      	b.n	800d6fc <_printf_i+0x128>
 800d780:	6833      	ldr	r3, [r6, #0]
 800d782:	6825      	ldr	r5, [r4, #0]
 800d784:	6961      	ldr	r1, [r4, #20]
 800d786:	1d18      	adds	r0, r3, #4
 800d788:	6030      	str	r0, [r6, #0]
 800d78a:	062e      	lsls	r6, r5, #24
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	d501      	bpl.n	800d794 <_printf_i+0x1c0>
 800d790:	6019      	str	r1, [r3, #0]
 800d792:	e002      	b.n	800d79a <_printf_i+0x1c6>
 800d794:	0668      	lsls	r0, r5, #25
 800d796:	d5fb      	bpl.n	800d790 <_printf_i+0x1bc>
 800d798:	8019      	strh	r1, [r3, #0]
 800d79a:	2300      	movs	r3, #0
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	4616      	mov	r6, r2
 800d7a0:	e7bc      	b.n	800d71c <_printf_i+0x148>
 800d7a2:	6833      	ldr	r3, [r6, #0]
 800d7a4:	1d1a      	adds	r2, r3, #4
 800d7a6:	6032      	str	r2, [r6, #0]
 800d7a8:	681e      	ldr	r6, [r3, #0]
 800d7aa:	6862      	ldr	r2, [r4, #4]
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	f7f2 fd26 	bl	8000200 <memchr>
 800d7b4:	b108      	cbz	r0, 800d7ba <_printf_i+0x1e6>
 800d7b6:	1b80      	subs	r0, r0, r6
 800d7b8:	6060      	str	r0, [r4, #4]
 800d7ba:	6863      	ldr	r3, [r4, #4]
 800d7bc:	6123      	str	r3, [r4, #16]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7c4:	e7aa      	b.n	800d71c <_printf_i+0x148>
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	4632      	mov	r2, r6
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	4640      	mov	r0, r8
 800d7ce:	47d0      	blx	sl
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d0ad      	beq.n	800d730 <_printf_i+0x15c>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	079b      	lsls	r3, r3, #30
 800d7d8:	d413      	bmi.n	800d802 <_printf_i+0x22e>
 800d7da:	68e0      	ldr	r0, [r4, #12]
 800d7dc:	9b03      	ldr	r3, [sp, #12]
 800d7de:	4298      	cmp	r0, r3
 800d7e0:	bfb8      	it	lt
 800d7e2:	4618      	movlt	r0, r3
 800d7e4:	e7a6      	b.n	800d734 <_printf_i+0x160>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	4632      	mov	r2, r6
 800d7ea:	4649      	mov	r1, r9
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	47d0      	blx	sl
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	d09d      	beq.n	800d730 <_printf_i+0x15c>
 800d7f4:	3501      	adds	r5, #1
 800d7f6:	68e3      	ldr	r3, [r4, #12]
 800d7f8:	9903      	ldr	r1, [sp, #12]
 800d7fa:	1a5b      	subs	r3, r3, r1
 800d7fc:	42ab      	cmp	r3, r5
 800d7fe:	dcf2      	bgt.n	800d7e6 <_printf_i+0x212>
 800d800:	e7eb      	b.n	800d7da <_printf_i+0x206>
 800d802:	2500      	movs	r5, #0
 800d804:	f104 0619 	add.w	r6, r4, #25
 800d808:	e7f5      	b.n	800d7f6 <_printf_i+0x222>
 800d80a:	bf00      	nop
 800d80c:	0800f5f2 	.word	0x0800f5f2
 800d810:	0800f603 	.word	0x0800f603

0800d814 <_scanf_chars>:
 800d814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d818:	4615      	mov	r5, r2
 800d81a:	688a      	ldr	r2, [r1, #8]
 800d81c:	4680      	mov	r8, r0
 800d81e:	460c      	mov	r4, r1
 800d820:	b932      	cbnz	r2, 800d830 <_scanf_chars+0x1c>
 800d822:	698a      	ldr	r2, [r1, #24]
 800d824:	2a00      	cmp	r2, #0
 800d826:	bf14      	ite	ne
 800d828:	f04f 32ff 	movne.w	r2, #4294967295
 800d82c:	2201      	moveq	r2, #1
 800d82e:	608a      	str	r2, [r1, #8]
 800d830:	6822      	ldr	r2, [r4, #0]
 800d832:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d8c4 <_scanf_chars+0xb0>
 800d836:	06d1      	lsls	r1, r2, #27
 800d838:	bf5f      	itttt	pl
 800d83a:	681a      	ldrpl	r2, [r3, #0]
 800d83c:	1d11      	addpl	r1, r2, #4
 800d83e:	6019      	strpl	r1, [r3, #0]
 800d840:	6816      	ldrpl	r6, [r2, #0]
 800d842:	2700      	movs	r7, #0
 800d844:	69a0      	ldr	r0, [r4, #24]
 800d846:	b188      	cbz	r0, 800d86c <_scanf_chars+0x58>
 800d848:	2801      	cmp	r0, #1
 800d84a:	d107      	bne.n	800d85c <_scanf_chars+0x48>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	781a      	ldrb	r2, [r3, #0]
 800d850:	6963      	ldr	r3, [r4, #20]
 800d852:	5c9b      	ldrb	r3, [r3, r2]
 800d854:	b953      	cbnz	r3, 800d86c <_scanf_chars+0x58>
 800d856:	2f00      	cmp	r7, #0
 800d858:	d031      	beq.n	800d8be <_scanf_chars+0xaa>
 800d85a:	e022      	b.n	800d8a2 <_scanf_chars+0x8e>
 800d85c:	2802      	cmp	r0, #2
 800d85e:	d120      	bne.n	800d8a2 <_scanf_chars+0x8e>
 800d860:	682b      	ldr	r3, [r5, #0]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d868:	071b      	lsls	r3, r3, #28
 800d86a:	d41a      	bmi.n	800d8a2 <_scanf_chars+0x8e>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	06da      	lsls	r2, r3, #27
 800d870:	bf5e      	ittt	pl
 800d872:	682b      	ldrpl	r3, [r5, #0]
 800d874:	781b      	ldrbpl	r3, [r3, #0]
 800d876:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d87a:	682a      	ldr	r2, [r5, #0]
 800d87c:	686b      	ldr	r3, [r5, #4]
 800d87e:	3201      	adds	r2, #1
 800d880:	602a      	str	r2, [r5, #0]
 800d882:	68a2      	ldr	r2, [r4, #8]
 800d884:	3b01      	subs	r3, #1
 800d886:	3a01      	subs	r2, #1
 800d888:	606b      	str	r3, [r5, #4]
 800d88a:	3701      	adds	r7, #1
 800d88c:	60a2      	str	r2, [r4, #8]
 800d88e:	b142      	cbz	r2, 800d8a2 <_scanf_chars+0x8e>
 800d890:	2b00      	cmp	r3, #0
 800d892:	dcd7      	bgt.n	800d844 <_scanf_chars+0x30>
 800d894:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d898:	4629      	mov	r1, r5
 800d89a:	4640      	mov	r0, r8
 800d89c:	4798      	blx	r3
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d0d0      	beq.n	800d844 <_scanf_chars+0x30>
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	f013 0310 	ands.w	r3, r3, #16
 800d8a8:	d105      	bne.n	800d8b6 <_scanf_chars+0xa2>
 800d8aa:	68e2      	ldr	r2, [r4, #12]
 800d8ac:	3201      	adds	r2, #1
 800d8ae:	60e2      	str	r2, [r4, #12]
 800d8b0:	69a2      	ldr	r2, [r4, #24]
 800d8b2:	b102      	cbz	r2, 800d8b6 <_scanf_chars+0xa2>
 800d8b4:	7033      	strb	r3, [r6, #0]
 800d8b6:	6923      	ldr	r3, [r4, #16]
 800d8b8:	443b      	add	r3, r7
 800d8ba:	6123      	str	r3, [r4, #16]
 800d8bc:	2000      	movs	r0, #0
 800d8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c2:	bf00      	nop
 800d8c4:	0800f4e1 	.word	0x0800f4e1

0800d8c8 <_scanf_i>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	4698      	mov	r8, r3
 800d8ce:	4b74      	ldr	r3, [pc, #464]	@ (800daa0 <_scanf_i+0x1d8>)
 800d8d0:	460c      	mov	r4, r1
 800d8d2:	4682      	mov	sl, r0
 800d8d4:	4616      	mov	r6, r2
 800d8d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	ab03      	add	r3, sp, #12
 800d8de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d8e2:	4b70      	ldr	r3, [pc, #448]	@ (800daa4 <_scanf_i+0x1dc>)
 800d8e4:	69a1      	ldr	r1, [r4, #24]
 800d8e6:	4a70      	ldr	r2, [pc, #448]	@ (800daa8 <_scanf_i+0x1e0>)
 800d8e8:	2903      	cmp	r1, #3
 800d8ea:	bf08      	it	eq
 800d8ec:	461a      	moveq	r2, r3
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	9201      	str	r2, [sp, #4]
 800d8f2:	1e5a      	subs	r2, r3, #1
 800d8f4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d8f8:	bf88      	it	hi
 800d8fa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d8fe:	4627      	mov	r7, r4
 800d900:	bf82      	ittt	hi
 800d902:	eb03 0905 	addhi.w	r9, r3, r5
 800d906:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d90a:	60a3      	strhi	r3, [r4, #8]
 800d90c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d910:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d914:	bf98      	it	ls
 800d916:	f04f 0900 	movls.w	r9, #0
 800d91a:	6023      	str	r3, [r4, #0]
 800d91c:	463d      	mov	r5, r7
 800d91e:	f04f 0b00 	mov.w	fp, #0
 800d922:	6831      	ldr	r1, [r6, #0]
 800d924:	ab03      	add	r3, sp, #12
 800d926:	7809      	ldrb	r1, [r1, #0]
 800d928:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d92c:	2202      	movs	r2, #2
 800d92e:	f7f2 fc67 	bl	8000200 <memchr>
 800d932:	b328      	cbz	r0, 800d980 <_scanf_i+0xb8>
 800d934:	f1bb 0f01 	cmp.w	fp, #1
 800d938:	d159      	bne.n	800d9ee <_scanf_i+0x126>
 800d93a:	6862      	ldr	r2, [r4, #4]
 800d93c:	b92a      	cbnz	r2, 800d94a <_scanf_i+0x82>
 800d93e:	6822      	ldr	r2, [r4, #0]
 800d940:	2108      	movs	r1, #8
 800d942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d946:	6061      	str	r1, [r4, #4]
 800d948:	6022      	str	r2, [r4, #0]
 800d94a:	6822      	ldr	r2, [r4, #0]
 800d94c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d950:	6022      	str	r2, [r4, #0]
 800d952:	68a2      	ldr	r2, [r4, #8]
 800d954:	1e51      	subs	r1, r2, #1
 800d956:	60a1      	str	r1, [r4, #8]
 800d958:	b192      	cbz	r2, 800d980 <_scanf_i+0xb8>
 800d95a:	6832      	ldr	r2, [r6, #0]
 800d95c:	1c51      	adds	r1, r2, #1
 800d95e:	6031      	str	r1, [r6, #0]
 800d960:	7812      	ldrb	r2, [r2, #0]
 800d962:	f805 2b01 	strb.w	r2, [r5], #1
 800d966:	6872      	ldr	r2, [r6, #4]
 800d968:	3a01      	subs	r2, #1
 800d96a:	2a00      	cmp	r2, #0
 800d96c:	6072      	str	r2, [r6, #4]
 800d96e:	dc07      	bgt.n	800d980 <_scanf_i+0xb8>
 800d970:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d974:	4631      	mov	r1, r6
 800d976:	4650      	mov	r0, sl
 800d978:	4790      	blx	r2
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f040 8085 	bne.w	800da8a <_scanf_i+0x1c2>
 800d980:	f10b 0b01 	add.w	fp, fp, #1
 800d984:	f1bb 0f03 	cmp.w	fp, #3
 800d988:	d1cb      	bne.n	800d922 <_scanf_i+0x5a>
 800d98a:	6863      	ldr	r3, [r4, #4]
 800d98c:	b90b      	cbnz	r3, 800d992 <_scanf_i+0xca>
 800d98e:	230a      	movs	r3, #10
 800d990:	6063      	str	r3, [r4, #4]
 800d992:	6863      	ldr	r3, [r4, #4]
 800d994:	4945      	ldr	r1, [pc, #276]	@ (800daac <_scanf_i+0x1e4>)
 800d996:	6960      	ldr	r0, [r4, #20]
 800d998:	1ac9      	subs	r1, r1, r3
 800d99a:	f000 f889 	bl	800dab0 <__sccl>
 800d99e:	f04f 0b00 	mov.w	fp, #0
 800d9a2:	68a3      	ldr	r3, [r4, #8]
 800d9a4:	6822      	ldr	r2, [r4, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d03d      	beq.n	800da26 <_scanf_i+0x15e>
 800d9aa:	6831      	ldr	r1, [r6, #0]
 800d9ac:	6960      	ldr	r0, [r4, #20]
 800d9ae:	f891 c000 	ldrb.w	ip, [r1]
 800d9b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d035      	beq.n	800da26 <_scanf_i+0x15e>
 800d9ba:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d9be:	d124      	bne.n	800da0a <_scanf_i+0x142>
 800d9c0:	0510      	lsls	r0, r2, #20
 800d9c2:	d522      	bpl.n	800da0a <_scanf_i+0x142>
 800d9c4:	f10b 0b01 	add.w	fp, fp, #1
 800d9c8:	f1b9 0f00 	cmp.w	r9, #0
 800d9cc:	d003      	beq.n	800d9d6 <_scanf_i+0x10e>
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d9d4:	60a3      	str	r3, [r4, #8]
 800d9d6:	6873      	ldr	r3, [r6, #4]
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	6073      	str	r3, [r6, #4]
 800d9de:	dd1b      	ble.n	800da18 <_scanf_i+0x150>
 800d9e0:	6833      	ldr	r3, [r6, #0]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	6033      	str	r3, [r6, #0]
 800d9e6:	68a3      	ldr	r3, [r4, #8]
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	60a3      	str	r3, [r4, #8]
 800d9ec:	e7d9      	b.n	800d9a2 <_scanf_i+0xda>
 800d9ee:	f1bb 0f02 	cmp.w	fp, #2
 800d9f2:	d1ae      	bne.n	800d952 <_scanf_i+0x8a>
 800d9f4:	6822      	ldr	r2, [r4, #0]
 800d9f6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d9fa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d9fe:	d1bf      	bne.n	800d980 <_scanf_i+0xb8>
 800da00:	2110      	movs	r1, #16
 800da02:	6061      	str	r1, [r4, #4]
 800da04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800da08:	e7a2      	b.n	800d950 <_scanf_i+0x88>
 800da0a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800da0e:	6022      	str	r2, [r4, #0]
 800da10:	780b      	ldrb	r3, [r1, #0]
 800da12:	f805 3b01 	strb.w	r3, [r5], #1
 800da16:	e7de      	b.n	800d9d6 <_scanf_i+0x10e>
 800da18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800da1c:	4631      	mov	r1, r6
 800da1e:	4650      	mov	r0, sl
 800da20:	4798      	blx	r3
 800da22:	2800      	cmp	r0, #0
 800da24:	d0df      	beq.n	800d9e6 <_scanf_i+0x11e>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	05d9      	lsls	r1, r3, #23
 800da2a:	d50d      	bpl.n	800da48 <_scanf_i+0x180>
 800da2c:	42bd      	cmp	r5, r7
 800da2e:	d909      	bls.n	800da44 <_scanf_i+0x17c>
 800da30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800da34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da38:	4632      	mov	r2, r6
 800da3a:	4650      	mov	r0, sl
 800da3c:	4798      	blx	r3
 800da3e:	f105 39ff 	add.w	r9, r5, #4294967295
 800da42:	464d      	mov	r5, r9
 800da44:	42bd      	cmp	r5, r7
 800da46:	d028      	beq.n	800da9a <_scanf_i+0x1d2>
 800da48:	6822      	ldr	r2, [r4, #0]
 800da4a:	f012 0210 	ands.w	r2, r2, #16
 800da4e:	d113      	bne.n	800da78 <_scanf_i+0x1b0>
 800da50:	702a      	strb	r2, [r5, #0]
 800da52:	6863      	ldr	r3, [r4, #4]
 800da54:	9e01      	ldr	r6, [sp, #4]
 800da56:	4639      	mov	r1, r7
 800da58:	4650      	mov	r0, sl
 800da5a:	47b0      	blx	r6
 800da5c:	f8d8 3000 	ldr.w	r3, [r8]
 800da60:	6821      	ldr	r1, [r4, #0]
 800da62:	1d1a      	adds	r2, r3, #4
 800da64:	f8c8 2000 	str.w	r2, [r8]
 800da68:	f011 0f20 	tst.w	r1, #32
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	d00f      	beq.n	800da90 <_scanf_i+0x1c8>
 800da70:	6018      	str	r0, [r3, #0]
 800da72:	68e3      	ldr	r3, [r4, #12]
 800da74:	3301      	adds	r3, #1
 800da76:	60e3      	str	r3, [r4, #12]
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	1bed      	subs	r5, r5, r7
 800da7c:	445d      	add	r5, fp
 800da7e:	442b      	add	r3, r5
 800da80:	6123      	str	r3, [r4, #16]
 800da82:	2000      	movs	r0, #0
 800da84:	b007      	add	sp, #28
 800da86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8a:	f04f 0b00 	mov.w	fp, #0
 800da8e:	e7ca      	b.n	800da26 <_scanf_i+0x15e>
 800da90:	07ca      	lsls	r2, r1, #31
 800da92:	bf4c      	ite	mi
 800da94:	8018      	strhmi	r0, [r3, #0]
 800da96:	6018      	strpl	r0, [r3, #0]
 800da98:	e7eb      	b.n	800da72 <_scanf_i+0x1aa>
 800da9a:	2001      	movs	r0, #1
 800da9c:	e7f2      	b.n	800da84 <_scanf_i+0x1bc>
 800da9e:	bf00      	nop
 800daa0:	0800eff8 	.word	0x0800eff8
 800daa4:	0800cad9 	.word	0x0800cad9
 800daa8:	0800dd25 	.word	0x0800dd25
 800daac:	0800f624 	.word	0x0800f624

0800dab0 <__sccl>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	780b      	ldrb	r3, [r1, #0]
 800dab4:	4604      	mov	r4, r0
 800dab6:	2b5e      	cmp	r3, #94	@ 0x5e
 800dab8:	bf0b      	itete	eq
 800daba:	784b      	ldrbeq	r3, [r1, #1]
 800dabc:	1c4a      	addne	r2, r1, #1
 800dabe:	1c8a      	addeq	r2, r1, #2
 800dac0:	2100      	movne	r1, #0
 800dac2:	bf08      	it	eq
 800dac4:	2101      	moveq	r1, #1
 800dac6:	3801      	subs	r0, #1
 800dac8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800dacc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800dad0:	42a8      	cmp	r0, r5
 800dad2:	d1fb      	bne.n	800dacc <__sccl+0x1c>
 800dad4:	b90b      	cbnz	r3, 800dada <__sccl+0x2a>
 800dad6:	1e50      	subs	r0, r2, #1
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
 800dada:	f081 0101 	eor.w	r1, r1, #1
 800dade:	54e1      	strb	r1, [r4, r3]
 800dae0:	4610      	mov	r0, r2
 800dae2:	4602      	mov	r2, r0
 800dae4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dae8:	2d2d      	cmp	r5, #45	@ 0x2d
 800daea:	d005      	beq.n	800daf8 <__sccl+0x48>
 800daec:	2d5d      	cmp	r5, #93	@ 0x5d
 800daee:	d016      	beq.n	800db1e <__sccl+0x6e>
 800daf0:	2d00      	cmp	r5, #0
 800daf2:	d0f1      	beq.n	800dad8 <__sccl+0x28>
 800daf4:	462b      	mov	r3, r5
 800daf6:	e7f2      	b.n	800dade <__sccl+0x2e>
 800daf8:	7846      	ldrb	r6, [r0, #1]
 800dafa:	2e5d      	cmp	r6, #93	@ 0x5d
 800dafc:	d0fa      	beq.n	800daf4 <__sccl+0x44>
 800dafe:	42b3      	cmp	r3, r6
 800db00:	dcf8      	bgt.n	800daf4 <__sccl+0x44>
 800db02:	3002      	adds	r0, #2
 800db04:	461a      	mov	r2, r3
 800db06:	3201      	adds	r2, #1
 800db08:	4296      	cmp	r6, r2
 800db0a:	54a1      	strb	r1, [r4, r2]
 800db0c:	dcfb      	bgt.n	800db06 <__sccl+0x56>
 800db0e:	1af2      	subs	r2, r6, r3
 800db10:	3a01      	subs	r2, #1
 800db12:	1c5d      	adds	r5, r3, #1
 800db14:	42b3      	cmp	r3, r6
 800db16:	bfa8      	it	ge
 800db18:	2200      	movge	r2, #0
 800db1a:	18ab      	adds	r3, r5, r2
 800db1c:	e7e1      	b.n	800dae2 <__sccl+0x32>
 800db1e:	4610      	mov	r0, r2
 800db20:	e7da      	b.n	800dad8 <__sccl+0x28>

0800db22 <__submore>:
 800db22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db26:	460c      	mov	r4, r1
 800db28:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800db2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db2e:	4299      	cmp	r1, r3
 800db30:	d11d      	bne.n	800db6e <__submore+0x4c>
 800db32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800db36:	f7ff f92f 	bl	800cd98 <_malloc_r>
 800db3a:	b918      	cbnz	r0, 800db44 <__submore+0x22>
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295
 800db40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db48:	63a3      	str	r3, [r4, #56]	@ 0x38
 800db4a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800db4e:	6360      	str	r0, [r4, #52]	@ 0x34
 800db50:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800db54:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800db58:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800db5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800db60:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800db64:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800db68:	6020      	str	r0, [r4, #0]
 800db6a:	2000      	movs	r0, #0
 800db6c:	e7e8      	b.n	800db40 <__submore+0x1e>
 800db6e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800db70:	0077      	lsls	r7, r6, #1
 800db72:	463a      	mov	r2, r7
 800db74:	f000 f83a 	bl	800dbec <_realloc_r>
 800db78:	4605      	mov	r5, r0
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d0de      	beq.n	800db3c <__submore+0x1a>
 800db7e:	eb00 0806 	add.w	r8, r0, r6
 800db82:	4601      	mov	r1, r0
 800db84:	4632      	mov	r2, r6
 800db86:	4640      	mov	r0, r8
 800db88:	f7ff f88c 	bl	800cca4 <memcpy>
 800db8c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800db90:	f8c4 8000 	str.w	r8, [r4]
 800db94:	e7e9      	b.n	800db6a <__submore+0x48>

0800db96 <memmove>:
 800db96:	4288      	cmp	r0, r1
 800db98:	b510      	push	{r4, lr}
 800db9a:	eb01 0402 	add.w	r4, r1, r2
 800db9e:	d902      	bls.n	800dba6 <memmove+0x10>
 800dba0:	4284      	cmp	r4, r0
 800dba2:	4623      	mov	r3, r4
 800dba4:	d807      	bhi.n	800dbb6 <memmove+0x20>
 800dba6:	1e43      	subs	r3, r0, #1
 800dba8:	42a1      	cmp	r1, r4
 800dbaa:	d008      	beq.n	800dbbe <memmove+0x28>
 800dbac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbb4:	e7f8      	b.n	800dba8 <memmove+0x12>
 800dbb6:	4402      	add	r2, r0
 800dbb8:	4601      	mov	r1, r0
 800dbba:	428a      	cmp	r2, r1
 800dbbc:	d100      	bne.n	800dbc0 <memmove+0x2a>
 800dbbe:	bd10      	pop	{r4, pc}
 800dbc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbc8:	e7f7      	b.n	800dbba <memmove+0x24>
	...

0800dbcc <_sbrk_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d06      	ldr	r5, [pc, #24]	@ (800dbe8 <_sbrk_r+0x1c>)
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	602b      	str	r3, [r5, #0]
 800dbd8:	f7f6 fe4a 	bl	8004870 <_sbrk>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	d102      	bne.n	800dbe6 <_sbrk_r+0x1a>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	b103      	cbz	r3, 800dbe6 <_sbrk_r+0x1a>
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	200009e8 	.word	0x200009e8

0800dbec <_realloc_r>:
 800dbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf0:	4680      	mov	r8, r0
 800dbf2:	4615      	mov	r5, r2
 800dbf4:	460c      	mov	r4, r1
 800dbf6:	b921      	cbnz	r1, 800dc02 <_realloc_r+0x16>
 800dbf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	f7ff b8cb 	b.w	800cd98 <_malloc_r>
 800dc02:	b92a      	cbnz	r2, 800dc10 <_realloc_r+0x24>
 800dc04:	f7ff f85c 	bl	800ccc0 <_free_r>
 800dc08:	2400      	movs	r4, #0
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc10:	f000 f88a 	bl	800dd28 <_malloc_usable_size_r>
 800dc14:	4285      	cmp	r5, r0
 800dc16:	4606      	mov	r6, r0
 800dc18:	d802      	bhi.n	800dc20 <_realloc_r+0x34>
 800dc1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc1e:	d8f4      	bhi.n	800dc0a <_realloc_r+0x1e>
 800dc20:	4629      	mov	r1, r5
 800dc22:	4640      	mov	r0, r8
 800dc24:	f7ff f8b8 	bl	800cd98 <_malloc_r>
 800dc28:	4607      	mov	r7, r0
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d0ec      	beq.n	800dc08 <_realloc_r+0x1c>
 800dc2e:	42b5      	cmp	r5, r6
 800dc30:	462a      	mov	r2, r5
 800dc32:	4621      	mov	r1, r4
 800dc34:	bf28      	it	cs
 800dc36:	4632      	movcs	r2, r6
 800dc38:	f7ff f834 	bl	800cca4 <memcpy>
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	4640      	mov	r0, r8
 800dc40:	f7ff f83e 	bl	800ccc0 <_free_r>
 800dc44:	463c      	mov	r4, r7
 800dc46:	e7e0      	b.n	800dc0a <_realloc_r+0x1e>

0800dc48 <_strtoul_l.constprop.0>:
 800dc48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc4c:	4e34      	ldr	r6, [pc, #208]	@ (800dd20 <_strtoul_l.constprop.0+0xd8>)
 800dc4e:	4686      	mov	lr, r0
 800dc50:	460d      	mov	r5, r1
 800dc52:	4628      	mov	r0, r5
 800dc54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc58:	5d37      	ldrb	r7, [r6, r4]
 800dc5a:	f017 0708 	ands.w	r7, r7, #8
 800dc5e:	d1f8      	bne.n	800dc52 <_strtoul_l.constprop.0+0xa>
 800dc60:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc62:	d12f      	bne.n	800dcc4 <_strtoul_l.constprop.0+0x7c>
 800dc64:	782c      	ldrb	r4, [r5, #0]
 800dc66:	2701      	movs	r7, #1
 800dc68:	1c85      	adds	r5, r0, #2
 800dc6a:	f033 0010 	bics.w	r0, r3, #16
 800dc6e:	d109      	bne.n	800dc84 <_strtoul_l.constprop.0+0x3c>
 800dc70:	2c30      	cmp	r4, #48	@ 0x30
 800dc72:	d12c      	bne.n	800dcce <_strtoul_l.constprop.0+0x86>
 800dc74:	7828      	ldrb	r0, [r5, #0]
 800dc76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800dc7a:	2858      	cmp	r0, #88	@ 0x58
 800dc7c:	d127      	bne.n	800dcce <_strtoul_l.constprop.0+0x86>
 800dc7e:	786c      	ldrb	r4, [r5, #1]
 800dc80:	2310      	movs	r3, #16
 800dc82:	3502      	adds	r5, #2
 800dc84:	f04f 38ff 	mov.w	r8, #4294967295
 800dc88:	2600      	movs	r6, #0
 800dc8a:	fbb8 f8f3 	udiv	r8, r8, r3
 800dc8e:	fb03 f908 	mul.w	r9, r3, r8
 800dc92:	ea6f 0909 	mvn.w	r9, r9
 800dc96:	4630      	mov	r0, r6
 800dc98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800dc9c:	f1bc 0f09 	cmp.w	ip, #9
 800dca0:	d81c      	bhi.n	800dcdc <_strtoul_l.constprop.0+0x94>
 800dca2:	4664      	mov	r4, ip
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	dd2a      	ble.n	800dcfe <_strtoul_l.constprop.0+0xb6>
 800dca8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800dcac:	d007      	beq.n	800dcbe <_strtoul_l.constprop.0+0x76>
 800dcae:	4580      	cmp	r8, r0
 800dcb0:	d322      	bcc.n	800dcf8 <_strtoul_l.constprop.0+0xb0>
 800dcb2:	d101      	bne.n	800dcb8 <_strtoul_l.constprop.0+0x70>
 800dcb4:	45a1      	cmp	r9, r4
 800dcb6:	db1f      	blt.n	800dcf8 <_strtoul_l.constprop.0+0xb0>
 800dcb8:	fb00 4003 	mla	r0, r0, r3, r4
 800dcbc:	2601      	movs	r6, #1
 800dcbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcc2:	e7e9      	b.n	800dc98 <_strtoul_l.constprop.0+0x50>
 800dcc4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dcc6:	bf04      	itt	eq
 800dcc8:	782c      	ldrbeq	r4, [r5, #0]
 800dcca:	1c85      	addeq	r5, r0, #2
 800dccc:	e7cd      	b.n	800dc6a <_strtoul_l.constprop.0+0x22>
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1d8      	bne.n	800dc84 <_strtoul_l.constprop.0+0x3c>
 800dcd2:	2c30      	cmp	r4, #48	@ 0x30
 800dcd4:	bf0c      	ite	eq
 800dcd6:	2308      	moveq	r3, #8
 800dcd8:	230a      	movne	r3, #10
 800dcda:	e7d3      	b.n	800dc84 <_strtoul_l.constprop.0+0x3c>
 800dcdc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800dce0:	f1bc 0f19 	cmp.w	ip, #25
 800dce4:	d801      	bhi.n	800dcea <_strtoul_l.constprop.0+0xa2>
 800dce6:	3c37      	subs	r4, #55	@ 0x37
 800dce8:	e7dc      	b.n	800dca4 <_strtoul_l.constprop.0+0x5c>
 800dcea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800dcee:	f1bc 0f19 	cmp.w	ip, #25
 800dcf2:	d804      	bhi.n	800dcfe <_strtoul_l.constprop.0+0xb6>
 800dcf4:	3c57      	subs	r4, #87	@ 0x57
 800dcf6:	e7d5      	b.n	800dca4 <_strtoul_l.constprop.0+0x5c>
 800dcf8:	f04f 36ff 	mov.w	r6, #4294967295
 800dcfc:	e7df      	b.n	800dcbe <_strtoul_l.constprop.0+0x76>
 800dcfe:	1c73      	adds	r3, r6, #1
 800dd00:	d106      	bne.n	800dd10 <_strtoul_l.constprop.0+0xc8>
 800dd02:	2322      	movs	r3, #34	@ 0x22
 800dd04:	f8ce 3000 	str.w	r3, [lr]
 800dd08:	4630      	mov	r0, r6
 800dd0a:	b932      	cbnz	r2, 800dd1a <_strtoul_l.constprop.0+0xd2>
 800dd0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd10:	b107      	cbz	r7, 800dd14 <_strtoul_l.constprop.0+0xcc>
 800dd12:	4240      	negs	r0, r0
 800dd14:	2a00      	cmp	r2, #0
 800dd16:	d0f9      	beq.n	800dd0c <_strtoul_l.constprop.0+0xc4>
 800dd18:	b106      	cbz	r6, 800dd1c <_strtoul_l.constprop.0+0xd4>
 800dd1a:	1e69      	subs	r1, r5, #1
 800dd1c:	6011      	str	r1, [r2, #0]
 800dd1e:	e7f5      	b.n	800dd0c <_strtoul_l.constprop.0+0xc4>
 800dd20:	0800f4e1 	.word	0x0800f4e1

0800dd24 <_strtoul_r>:
 800dd24:	f7ff bf90 	b.w	800dc48 <_strtoul_l.constprop.0>

0800dd28 <_malloc_usable_size_r>:
 800dd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd2c:	1f18      	subs	r0, r3, #4
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	bfbc      	itt	lt
 800dd32:	580b      	ldrlt	r3, [r1, r0]
 800dd34:	18c0      	addlt	r0, r0, r3
 800dd36:	4770      	bx	lr

0800dd38 <_init>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	bf00      	nop
 800dd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3e:	bc08      	pop	{r3}
 800dd40:	469e      	mov	lr, r3
 800dd42:	4770      	bx	lr

0800dd44 <_fini>:
 800dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd46:	bf00      	nop
 800dd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd4a:	bc08      	pop	{r3}
 800dd4c:	469e      	mov	lr, r3
 800dd4e:	4770      	bx	lr
