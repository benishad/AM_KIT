
AMKIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008fcc  08008fcc  00009fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009140  08009140  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009140  08009140  0000a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009148  08009148  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009148  08009148  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800914c  0800914c  0000a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009150  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b05c  2**0
                  CONTENTS
 10 .bss          000003e4  2000005c  2000005c  0000b05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000440  20000440  0000b05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d56  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000350f  00000000  00000000  00023de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  000272f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001247  00000000  00000000  00028a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f67  00000000  00000000  00029cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5c7  00000000  00000000  0004ec26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dac0d  00000000  00000000  0006c1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146dfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068e4  00000000  00000000  00146e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0014d724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fb4 	.word	0x08008fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08008fb4 	.word	0x08008fb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	f5ad 6d97 	sub.w	sp, sp, #1208	@ 0x4b8
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fed2 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8ea 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fad0 	bl	8000b24 <MX_GPIO_Init>
  MX_RTC_Init();
 8000584:	f000 f952 	bl	800082c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000588:	f000 f9c2 	bl	8000910 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800058c:	f000 f9e0 	bl	8000950 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000590:	f000 fa14 	bl	80009bc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000594:	f000 fa48 	bl	8000a28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000598:	f000 fa70 	bl	8000a7c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800059c:	f000 fa98 	bl	8000ad0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005a0:	f005 fbe2 	bl	8005d68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // 타이머 인터럽트 모드로 시작 (TIM7은 이미 PSC/ARR로 1 kHz, 1 ms 인터럽트로 설정되어 있다고 가정)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80005a4:	4864      	ldr	r0, [pc, #400]	@ (8000738 <main+0x1c8>)
 80005a6:	f003 fc3b 	bl	8003e20 <HAL_TIM_Base_Start_IT>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <main+0x44>
  {
    Error_Handler();
 80005b0:	f000 fbde 	bl	8000d70 <Error_Handler>
  }

  // 1) 콜백 기반 수신을 시작 (1바이트)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 80005b4:	2201      	movs	r2, #1
 80005b6:	4961      	ldr	r1, [pc, #388]	@ (800073c <main+0x1cc>)
 80005b8:	4861      	ldr	r0, [pc, #388]	@ (8000740 <main+0x1d0>)
 80005ba:	f003 ff75 	bl	80044a8 <HAL_UART_Receive_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <main+0x58>
  {
    // 수신 시작 실패 처리
    Error_Handler();
 80005c4:	f000 fbd4 	bl	8000d70 <Error_Handler>
  FIL SDFile;     // SD 카드 파일 핸들
  FRESULT fres;   // FATFS 함수 결과
  UINT bw, br;    // 바이트 쓰기/읽기 변수

  /* 1) SD 카드 마운트 (SDPath는 fatfs.c 에 extern으로 선언됨) */
  fres = f_mount(&SDFatFS, SDPath, 1);    // SDPath는 "0:"으로 설정되어 있어야 함
 80005c8:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 80005cc:	2201      	movs	r2, #1
 80005ce:	495d      	ldr	r1, [pc, #372]	@ (8000744 <main+0x1d4>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f007 fa83 	bl	8007adc <f_mount>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
  if (fres != FR_OK)
 80005dc:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x78>
  {
    // 마운트 실패 처리
    Error_Handler();
 80005e4:	f000 fbc4 	bl	8000d70 <Error_Handler>
  }

  /* 2) 새 파일 생성(덮어쓰기) */
  fres = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80005e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005ec:	220a      	movs	r2, #10
 80005ee:	4956      	ldr	r1, [pc, #344]	@ (8000748 <main+0x1d8>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f007 fab9 	bl	8007b68 <f_open>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
  if (fres != FR_OK)
 80005fc:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0x98>
  {
    // 파일 열기 실패 처리
    Error_Handler();
 8000604:	f000 fbb4 	bl	8000d70 <Error_Handler>
  }
  /* 3) 파일에 데이터 쓰기 */
  const char *data = "Hello, STM32 SD Card! \n test";
 8000608:	4b50      	ldr	r3, [pc, #320]	@ (800074c <main+0x1dc>)
 800060a:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
  fres = f_write(&SDFile, data, strlen(data), &bw);
 800060e:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	@ 0x4b0
 8000612:	f7ff fddd 	bl	80001d0 <strlen>
 8000616:	4602      	mov	r2, r0
 8000618:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800061c:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000620:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8000624:	f007 fd99 	bl	800815a <f_write>
 8000628:	4603      	mov	r3, r0
 800062a:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
  if (fres != FR_OK || bw < strlen(data))
 800062e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10b      	bne.n	800064e <main+0xde>
 8000636:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	@ 0x4b0
 800063a:	f7ff fdc9 	bl	80001d0 <strlen>
 800063e:	4602      	mov	r2, r0
 8000640:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000644:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d906      	bls.n	800065c <main+0xec>
  {
    // 파일 쓰기 실패 처리
    f_close(&SDFile);
 800064e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000652:	4618      	mov	r0, r3
 8000654:	f007 ff74 	bl	8008540 <f_close>
    Error_Handler();
 8000658:	f000 fb8a 	bl	8000d70 <Error_Handler>
  }
  /* 4) 파일 닫기 */
  fres = f_close(&SDFile);
 800065c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000660:	4618      	mov	r0, r3
 8000662:	f007 ff6d 	bl	8008540 <f_close>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
  if (fres != FR_OK)
 800066c:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x108>
  {
    // 파일 닫기 실패 처리
    Error_Handler();
 8000674:	f000 fb7c 	bl	8000d70 <Error_Handler>
  }
  /* 5) 파일 읽기 */
  fres = f_open(&SDFile, "test.txt", FA_READ);
 8000678:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800067c:	2201      	movs	r2, #1
 800067e:	4932      	ldr	r1, [pc, #200]	@ (8000748 <main+0x1d8>)
 8000680:	4618      	mov	r0, r3
 8000682:	f007 fa71 	bl	8007b68 <f_open>
 8000686:	4603      	mov	r3, r0
 8000688:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
  if (fres != FR_OK)
 800068c:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <main+0x128>
  {
    // 파일 열기 실패 처리
    Error_Handler();
 8000694:	f000 fb6c 	bl	8000d70 <Error_Handler>
  }
  char readBuffer[64];    // 읽기 버퍼
  fres = f_read(&SDFile, readBuffer, sizeof(readBuffer) - 1, &br);
 8000698:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800069c:	1d39      	adds	r1, r7, #4
 800069e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80006a2:	223f      	movs	r2, #63	@ 0x3f
 80006a4:	f007 fc1a 	bl	8007edc <f_read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
  if (fres != FR_OK || br == 0)
 80006ae:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <main+0x154>
 80006b6:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80006ba:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d106      	bne.n	80006d2 <main+0x162>
  {
    // 파일 읽기 실패 처리
    f_close(&SDFile);
 80006c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 ff39 	bl	8008540 <f_close>
    Error_Handler();
 80006ce:	f000 fb4f 	bl	8000d70 <Error_Handler>
  }
  readBuffer[br] = '\0'; // 문자열 종료
 80006d2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80006d6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 80006e0:	f2a2 42b4 	subw	r2, r2, #1204	@ 0x4b4
 80006e4:	2100      	movs	r1, #0
 80006e6:	54d1      	strb	r1, [r2, r3]
  /* 6) SD카드 언마운트*/
  fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 80006e8:	2201      	movs	r2, #1
 80006ea:	4916      	ldr	r1, [pc, #88]	@ (8000744 <main+0x1d4>)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f007 f9f5 	bl	8007adc <f_mount>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
  if (fres != FR_OK)
 80006f8:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <main+0x194>
  {
    // 언마운트 실패 처리
    Error_Handler();
 8000700:	f000 fb36 	bl	8000d70 <Error_Handler>
//	  HAL_Delay(200);
//	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(200);

    // Dip1 스위치 상태 읽기
    GPIO_PinState dip_1_state = HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin);
 8000704:	2101      	movs	r1, #1
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0x1e0>)
 8000708:	f001 f9e0 	bl	8001acc <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (dip_1_state == GPIO_PIN_SET)
 8000712:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000716:	2b01      	cmp	r3, #1
 8000718:	d106      	bne.n	8000728 <main+0x1b8>
    {
      // Dip1 스위치가 눌렸을 때
      HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET); // LED 켜기
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000720:	480b      	ldr	r0, [pc, #44]	@ (8000750 <main+0x1e0>)
 8000722:	f001 f9eb 	bl	8001afc <HAL_GPIO_WritePin>
 8000726:	e7ed      	b.n	8000704 <main+0x194>
    }
    else
    {
      // Dip1 스위치가 눌리지 않았을 때
      HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET); // LED 끄기
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072e:	4808      	ldr	r0, [pc, #32]	@ (8000750 <main+0x1e0>)
 8000730:	f001 f9e4 	bl	8001afc <HAL_GPIO_WritePin>
  {
 8000734:	e7e6      	b.n	8000704 <main+0x194>
 8000736:	bf00      	nop
 8000738:	20000174 	.word	0x20000174
 800073c:	20000298 	.word	0x20000298
 8000740:	200001bc 	.word	0x200001bc
 8000744:	200002c0 	.word	0x200002c0
 8000748:	08008fcc 	.word	0x08008fcc
 800074c:	08008fd8 	.word	0x08008fd8
 8000750:	40021000 	.word	0x40021000

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	@ 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f007 ffa6 	bl	80086b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <SystemClock_Config+0xd0>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	4a28      	ldr	r2, [pc, #160]	@ (8000824 <SystemClock_Config+0xd0>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	@ 0x40
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <SystemClock_Config+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a22      	ldr	r2, [pc, #136]	@ (8000828 <SystemClock_Config+0xd4>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007b0:	2305      	movs	r3, #5
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007cc:	23a8      	movs	r3, #168	@ 0xa8
 80007ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d4:	2307      	movs	r3, #7
 80007d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f9a7 	bl	8001b30 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007e8:	f000 fac2 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2105      	movs	r1, #5
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fc08 	bl	8002020 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000816:	f000 faab 	bl	8000d70 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	@ 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000830:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <MX_RTC_Init+0xd4>)
 8000832:	4a34      	ldr	r2, [pc, #208]	@ (8000904 <MX_RTC_Init+0xd8>)
 8000834:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000836:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <MX_RTC_Init+0xd4>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800083c:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <MX_RTC_Init+0xd4>)
 800083e:	227f      	movs	r2, #127	@ 0x7f
 8000840:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000842:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <MX_RTC_Init+0xd4>)
 8000844:	22ff      	movs	r2, #255	@ 0xff
 8000846:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000848:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <MX_RTC_Init+0xd4>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <MX_RTC_Init+0xd4>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000854:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <MX_RTC_Init+0xd4>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800085a:	4829      	ldr	r0, [pc, #164]	@ (8000900 <MX_RTC_Init+0xd4>)
 800085c:	f001 fee2 	bl	8002624 <HAL_RTC_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000866:	f000 fa83 	bl	8000d70 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  // RTC 백업 레지스터를 읽어 초기화 여부 확인
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_REG) != RTC_MAGIC_VALUE)
 800086a:	2101      	movs	r1, #1
 800086c:	4824      	ldr	r0, [pc, #144]	@ (8000900 <MX_RTC_Init+0xd4>)
 800086e:	f002 fa4d 	bl	8002d0c <HAL_RTCEx_BKUPRead>
 8000872:	4603      	mov	r3, r0
 8000874:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000878:	4293      	cmp	r3, r2
 800087a:	d035      	beq.n	80008e8 <MX_RTC_Init+0xbc>
  {
    // RTC 백업 레지스터가 초기화되지 않았거나 값이 일치하지 않으면 RTC를 초기화
    // RTC 백업 레지스터에 초기화 마크를 기록
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_REG, RTC_MAGIC_VALUE);
 800087c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000880:	2101      	movs	r1, #1
 8000882:	481f      	ldr	r0, [pc, #124]	@ (8000900 <MX_RTC_Init+0xd4>)
 8000884:	f002 fa28 	bl	8002cd8 <HAL_RTCEx_BKUPWrite>

    // RTC 시간과 날짜를 초기화
    g_Time.Hours = 0x0;  // 00:00:00
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_RTC_Init+0xdc>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = 0x0;
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_RTC_Init+0xdc>)
 8000890:	2200      	movs	r2, #0
 8000892:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = 0x0;
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_RTC_Init+0xdc>)
 8000896:	2200      	movs	r2, #0
 8000898:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_RTC_Init+0xdc>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_RTC_Init+0xdc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BCD) != HAL_OK)
 80008a6:	2201      	movs	r2, #1
 80008a8:	4917      	ldr	r1, [pc, #92]	@ (8000908 <MX_RTC_Init+0xdc>)
 80008aa:	4815      	ldr	r0, [pc, #84]	@ (8000900 <MX_RTC_Init+0xd4>)
 80008ac:	f001 ff3b 	bl	8002726 <HAL_RTC_SetTime>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_RTC_Init+0x8e>
    {
      // 초기화 실패 처리
      Error_Handler();
 80008b6:	f000 fa5b 	bl	8000d70 <Error_Handler>
    }
    g_Date.WeekDay = RTC_WEEKDAY_MONDAY;    // 월요일
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_RTC_Init+0xe0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
    g_Date.Month = RTC_MONTH_JANUARY;       // 1월
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <MX_RTC_Init+0xe0>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	705a      	strb	r2, [r3, #1]
    g_Date.Date = 0x1;                      // 1일
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_RTC_Init+0xe0>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	709a      	strb	r2, [r3, #2]
    g_Date.Year = 0x25;                     // 2025년 (BCD 형식으로 25)
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_RTC_Init+0xe0>)
 80008ce:	2225      	movs	r2, #37	@ 0x25
 80008d0:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BCD) != HAL_OK)
 80008d2:	2201      	movs	r2, #1
 80008d4:	490d      	ldr	r1, [pc, #52]	@ (800090c <MX_RTC_Init+0xe0>)
 80008d6:	480a      	ldr	r0, [pc, #40]	@ (8000900 <MX_RTC_Init+0xd4>)
 80008d8:	f002 f81d 	bl	8002916 <HAL_RTC_SetDate>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00c      	beq.n	80008fc <MX_RTC_Init+0xd0>
    {
      // 초기화 실패 처리
      Error_Handler();
 80008e2:	f000 fa45 	bl	8000d70 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008e6:	e009      	b.n	80008fc <MX_RTC_Init+0xd0>
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 80008e8:	2201      	movs	r2, #1
 80008ea:	4907      	ldr	r1, [pc, #28]	@ (8000908 <MX_RTC_Init+0xdc>)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_RTC_Init+0xd4>)
 80008ee:	f001 ffb4 	bl	800285a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 80008f2:	2201      	movs	r2, #1
 80008f4:	4905      	ldr	r1, [pc, #20]	@ (800090c <MX_RTC_Init+0xe0>)
 80008f6:	4802      	ldr	r0, [pc, #8]	@ (8000900 <MX_RTC_Init+0xd4>)
 80008f8:	f002 f891 	bl	8002a1e <HAL_RTC_GetDate>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000078 	.word	0x20000078
 8000904:	40002800 	.word	0x40002800
 8000908:	2000029c 	.word	0x2000029c
 800090c:	200002b0 	.word	0x200002b0

08000910 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_SDIO_SD_Init+0x38>)
 8000916:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <MX_SDIO_SD_Init+0x3c>)
 8000918:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_SDIO_SD_Init+0x38>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_SDIO_SD_Init+0x38>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_SDIO_SD_Init+0x38>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_SDIO_SD_Init+0x38>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000932:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <MX_SDIO_SD_Init+0x38>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <MX_SDIO_SD_Init+0x38>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	20000098 	.word	0x20000098
 800094c:	40012c00 	.word	0x40012c00

08000950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	@ (80009b8 <MX_SPI1_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_SPI1_Init+0x64>)
 80009a2:	f003 f965 	bl	8003c70 <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 f9e0 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000011c 	.word	0x2000011c
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_TIM7_Init+0x64>)
 80009cc:	4a15      	ldr	r2, [pc, #84]	@ (8000a24 <MX_TIM7_Init+0x68>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_TIM7_Init+0x64>)
 80009d2:	2263      	movs	r2, #99	@ 0x63
 80009d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_TIM7_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_TIM7_Init+0x64>)
 80009de:	f240 3247 	movw	r2, #839	@ 0x347
 80009e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_TIM7_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009ea:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <MX_TIM7_Init+0x64>)
 80009ec:	f003 f9c9 	bl	8003d82 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009f6:	f000 f9bb 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <MX_TIM7_Init+0x64>)
 8000a08:	f003 fc38 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a12:	f000 f9ad 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000174 	.word	0x20000174
 8000a24:	40001400 	.word	0x40001400

08000a28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <MX_USART1_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a60:	f003 fc9c 	bl	800439c <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f981 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001bc 	.word	0x200001bc
 8000a78:	40011000 	.word	0x40011000

08000a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <MX_USART2_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f003 fc72 	bl	800439c <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f957 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000204 	.word	0x20000204
 8000acc:	40004400 	.word	0x40004400

08000ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_USART3_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b08:	f003 fc48 	bl	800439c <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f92d 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000024c 	.word	0x2000024c
 8000b20:	40004800 	.word	0x40004800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	@ 0x30
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	4b42      	ldr	r3, [pc, #264]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a41      	ldr	r2, [pc, #260]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b38      	ldr	r3, [pc, #224]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b34      	ldr	r3, [pc, #208]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a33      	ldr	r2, [pc, #204]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a2c      	ldr	r2, [pc, #176]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a25      	ldr	r2, [pc, #148]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a1e      	ldr	r2, [pc, #120]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_GPIO_Init+0x124>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000be8:	4818      	ldr	r0, [pc, #96]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000bea:	f000 ff87 	bl	8001afc <HAL_GPIO_WritePin>
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIP_3_Pin DIP_4_Pin DIP_1_Pin DIP_2_Pin */
  GPIO_InitStruct.Pin = DIP_3_Pin|DIP_4_Pin|DIP_1_Pin|DIP_2_Pin;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4812      	ldr	r0, [pc, #72]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000c02:	f000 fdc7 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin M_PWR_KEY_Pin
                           ESP_EN_Pin USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8000c06:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000c0a:	61fb      	str	r3, [r7, #28]
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000c20:	f000 fdb8 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c24:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000c28:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_GPIO_Init+0x12c>)
 8000c3a:	f000 fdab 	bl	8001794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	@ 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <HAL_TIM_PeriodElapsedCallback>:
//
// =======================================================================================================
/* tim 7 인터럽트 처리부 */
/* TIM7 업데이트 인터럽트 콜백 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b098      	sub	sp, #96	@ 0x60
 8000c58:	af04      	add	r7, sp, #16
 8000c5a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a27      	ldr	r2, [pc, #156]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d147      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0xa2>
  {
    ms_tick_1++;
 8000c66:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c70:	801a      	strh	r2, [r3, #0]
    alive_counter++;
 8000c72:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c7c:	801a      	strh	r2, [r3, #0]

    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c84:	d902      	bls.n	8000c8c <HAL_TIM_PeriodElapsedCallback+0x38>
    {
      ms_tick_1 = 0;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
      // HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
    }

    if (alive_counter >= 5000)    // 10 s 경과 체크
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d92e      	bls.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
      alive_counter = 0;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]

      /* 1) RTC에서 현재 시간 읽기 */
      // RTC_TimeTypeDef sTime;
      // RTC_DateTypeDef sDate;
      HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	491a      	ldr	r1, [pc, #104]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ca2:	481b      	ldr	r0, [pc, #108]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ca4:	f001 fdd9 	bl	800285a <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	491a      	ldr	r1, [pc, #104]	@ (8000d14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cac:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cae:	f001 feb6 	bl	8002a1e <HAL_RTC_GetDate>
      // int len = snprintf(buf, sizeof(buf), "ALIVE: %02d:%02d:%02d %02d/%02d/%04d\n",
      //                   sTime.Hours, sTime.Minutes, sTime.Seconds,
      //                   sDate.Date, sDate.Month, 2000 + sDate.Year);

      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cb4:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cb6:	461d      	mov	r5, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cba:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cbc:	461a      	mov	r2, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cc2:	4619      	mov	r1, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cc8:	461c      	mov	r4, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ccc:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000cce:	f107 000c 	add.w	r0, r7, #12
 8000cd2:	9303      	str	r3, [sp, #12]
 8000cd4:	9402      	str	r4, [sp, #8]
 8000cd6:	9101      	str	r1, [sp, #4]
 8000cd8:	9200      	str	r2, [sp, #0]
 8000cda:	462b      	mov	r3, r5
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cde:	2140      	movs	r1, #64	@ 0x40
 8000ce0:	f007 fcb4 	bl	800864c <sniprintf>
 8000ce4:	64f8      	str	r0, [r7, #76]	@ 0x4c
      //HAL_UART_Transmit_IT(&huart2, txAlive, sizeof(txAlive) - 1);
      //HAL_UART_Transmit_IT(&huart3, txAlive, sizeof(txAlive) - 1);

      /* 3) UART로 생존 및 시간 전송 */
      // UART1로 현재 시간 전송
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 8000ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480a      	ldr	r0, [pc, #40]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cf2:	f003 fba3 	bl	800443c <HAL_UART_Transmit_IT>
    }
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3750      	adds	r7, #80	@ 0x50
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40001400 	.word	0x40001400
 8000d04:	20000294 	.word	0x20000294
 8000d08:	20000296 	.word	0x20000296
 8000d0c:	2000029c 	.word	0x2000029c
 8000d10:	20000078 	.word	0x20000078
 8000d14:	200002b0 	.word	0x200002b0
 8000d18:	08008ff8 	.word	0x08008ff8
 8000d1c:	200001bc 	.word	0x200001bc

08000d20 <HAL_UART_RxCpltCallback>:
//
// =======================================================================================================
/* uart 1 처리부 */
/* UART Rx Complete 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_UART_RxCpltCallback+0x30>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d109      	bne.n	8000d46 <HAL_UART_RxCpltCallback+0x26>
  {
    // 1) 에코: 받은 바이트를 바로 송신
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	4907      	ldr	r1, [pc, #28]	@ (8000d54 <HAL_UART_RxCpltCallback+0x34>)
 8000d36:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <HAL_UART_RxCpltCallback+0x38>)
 8000d38:	f003 fb80 	bl	800443c <HAL_UART_Transmit_IT>

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4905      	ldr	r1, [pc, #20]	@ (8000d54 <HAL_UART_RxCpltCallback+0x34>)
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_UART_RxCpltCallback+0x38>)
 8000d42:	f003 fbb1 	bl	80044a8 <HAL_UART_Receive_IT>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40011000 	.word	0x40011000
 8000d54:	20000298 	.word	0x20000298
 8000d58:	200001bc 	.word	0x200001bc

08000d5c <HAL_UART_TxCpltCallback>:

/* UART 전송 완료 콜백 (필요 시..) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  // 전송 완료 후 다른 처리가 필요하면 여기에…
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <HAL_RTC_MspInit+0x5c>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d119      	bne.n	8000e20 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fb30 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000e06:	f7ff ffb3 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_RTC_MspInit+0x60>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2029      	movs	r0, #41	@ 0x29
 8000e16:	f000 fbf4 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e1a:	2029      	movs	r0, #41	@ 0x29
 8000e1c:	f000 fc0d 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40002800 	.word	0x40002800
 8000e2c:	42470e3c 	.word	0x42470e3c

08000e30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a28      	ldr	r2, [pc, #160]	@ (8000ef0 <HAL_SD_MspInit+0xc0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d14a      	bne.n	8000ee8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a26      	ldr	r2, [pc, #152]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_SD_MspInit+0xc4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000ea6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <HAL_SD_MspInit+0xc8>)
 8000ec4:	f000 fc66 	bl	8001794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <HAL_SD_MspInit+0xcc>)
 8000ee4:	f000 fc56 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	@ 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40012c00 	.word	0x40012c00
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <HAL_SPI_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f5a:	23e0      	movs	r3, #224	@ 0xe0
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <HAL_SPI_MspInit+0x8c>)
 8000f76:	f000 fc0d 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40013000 	.word	0x40013000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d115      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_TIM_Base_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <HAL_TIM_Base_MspInit+0x4c>)
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_TIM_Base_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2037      	movs	r0, #55	@ 0x37
 8000fc4:	f000 fb1d 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fc8:	2037      	movs	r0, #55	@ 0x37
 8000fca:	f000 fb36 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40001400 	.word	0x40001400
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	@ 0x38
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	@ (8001160 <HAL_UART_MspInit+0x180>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d135      	bne.n	800106e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	4b57      	ldr	r3, [pc, #348]	@ (8001164 <HAL_UART_MspInit+0x184>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a56      	ldr	r2, [pc, #344]	@ (8001164 <HAL_UART_MspInit+0x184>)
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b54      	ldr	r3, [pc, #336]	@ (8001164 <HAL_UART_MspInit+0x184>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	4b50      	ldr	r3, [pc, #320]	@ (8001164 <HAL_UART_MspInit+0x184>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a4f      	ldr	r2, [pc, #316]	@ (8001164 <HAL_UART_MspInit+0x184>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b4d      	ldr	r3, [pc, #308]	@ (8001164 <HAL_UART_MspInit+0x184>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800103a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800104c:	2307      	movs	r3, #7
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4844      	ldr	r0, [pc, #272]	@ (8001168 <HAL_UART_MspInit+0x188>)
 8001058:	f000 fb9c 	bl	8001794 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2025      	movs	r0, #37	@ 0x25
 8001062:	f000 face 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001066:	2025      	movs	r0, #37	@ 0x25
 8001068:	f000 fae7 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106c:	e073      	b.n	8001156 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a3e      	ldr	r2, [pc, #248]	@ (800116c <HAL_UART_MspInit+0x18c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d134      	bne.n	80010e2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <HAL_UART_MspInit+0x184>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	4a38      	ldr	r2, [pc, #224]	@ (8001164 <HAL_UART_MspInit+0x184>)
 8001082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001086:	6413      	str	r3, [r2, #64]	@ 0x40
 8001088:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <HAL_UART_MspInit+0x184>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <HAL_UART_MspInit+0x184>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a31      	ldr	r2, [pc, #196]	@ (8001164 <HAL_UART_MspInit+0x184>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <HAL_UART_MspInit+0x184>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 80010b0:	230c      	movs	r3, #12
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c0:	2307      	movs	r3, #7
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4827      	ldr	r0, [pc, #156]	@ (8001168 <HAL_UART_MspInit+0x188>)
 80010cc:	f000 fb62 	bl	8001794 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2026      	movs	r0, #38	@ 0x26
 80010d6:	f000 fa94 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010da:	2026      	movs	r0, #38	@ 0x26
 80010dc:	f000 faad 	bl	800163a <HAL_NVIC_EnableIRQ>
}
 80010e0:	e039      	b.n	8001156 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a22      	ldr	r2, [pc, #136]	@ (8001170 <HAL_UART_MspInit+0x190>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d134      	bne.n	8001156 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <HAL_UART_MspInit+0x184>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <HAL_UART_MspInit+0x184>)
 80010f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_UART_MspInit+0x184>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_UART_MspInit+0x184>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <HAL_UART_MspInit+0x184>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6313      	str	r3, [r2, #48]	@ 0x30
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_UART_MspInit+0x184>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8001124:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001136:	2307      	movs	r3, #7
 8001138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <HAL_UART_MspInit+0x194>)
 8001142:	f000 fb27 	bl	8001794 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2027      	movs	r0, #39	@ 0x27
 800114c:	f000 fa59 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001150:	2027      	movs	r0, #39	@ 0x27
 8001152:	f000 fa72 	bl	800163a <HAL_NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	@ 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40011000 	.word	0x40011000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000
 800116c:	40004400 	.word	0x40004400
 8001170:	40004800 	.word	0x40004800
 8001174:	40020400 	.word	0x40020400

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <NMI_Handler+0x4>

08001180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <UsageFault_Handler+0x4>

080011a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 f8f9 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <USART1_IRQHandler+0x10>)
 80011de:	f003 f989 	bl	80044f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001bc 	.word	0x200001bc

080011ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <USART2_IRQHandler+0x10>)
 80011f2:	f003 f97f 	bl	80044f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000204 	.word	0x20000204

08001200 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <USART3_IRQHandler+0x10>)
 8001206:	f003 f975 	bl	80044f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000024c 	.word	0x2000024c

08001214 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <RTC_Alarm_IRQHandler+0x10>)
 800121a:	f001 fc4f 	bl	8002abc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000078 	.word	0x20000078

08001228 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <TIM7_IRQHandler+0x10>)
 800122e:	f002 fe67 	bl	8003f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000174 	.word	0x20000174

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f007 fa2a 	bl	80086c4 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20020000 	.word	0x20020000
 800129c:	00000400 	.word	0x00000400
 80012a0:	200002b4 	.word	0x200002b4
 80012a4:	20000440 	.word	0x20000440

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012d0:	f7ff ffea 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012d6:	490d      	ldr	r1, [pc, #52]	@ (800130c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fa:	f007 f9e9 	bl	80086d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff f937 	bl	8000570 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001310:	08009150 	.word	0x08009150
  ldr r2, =_sbss
 8001314:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001318:	20000440 	.word	0x20000440

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f94f 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	200f      	movs	r0, #15
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fd12 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f967 	bl	8001656 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f92f 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	@ (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200002b8 	.word	0x200002b8

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200002b8 	.word	0x200002b8

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	@ (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	@ (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	@ 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff29 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff3e 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff31 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff feb6 	bl	80013ec <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d008      	beq.n	80016a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2280      	movs	r2, #128	@ 0x80
 8001692:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e052      	b.n	8001746 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0216 	bic.w	r2, r2, #22
 80016ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <HAL_DMA_Abort+0x62>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0208 	bic.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f0:	e013      	b.n	800171a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f2:	f7ff fe7b 	bl	80013ec <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d90c      	bls.n	800171a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2220      	movs	r2, #32
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e015      	b.n	8001746 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e4      	bne.n	80016f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	223f      	movs	r2, #63	@ 0x3f
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d004      	beq.n	800176c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e00c      	b.n	8001786 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2205      	movs	r2, #5
 8001770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e16b      	b.n	8001a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 815a 	bne.w	8001a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d005      	beq.n	80017e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d130      	bne.n	8001848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 0201 	and.w	r2, r3, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b03      	cmp	r3, #3
 8001852:	d017      	beq.n	8001884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	69b9      	ldr	r1, [r7, #24]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80b4 	beq.w	8001a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b60      	ldr	r3, [pc, #384]	@ (8001aa0 <HAL_GPIO_Init+0x30c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa0 <HAL_GPIO_Init+0x30c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001928:	6453      	str	r3, [r2, #68]	@ 0x44
 800192a:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa0 <HAL_GPIO_Init+0x30c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a5b      	ldr	r2, [pc, #364]	@ (8001aa4 <HAL_GPIO_Init+0x310>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	@ (8001aa8 <HAL_GPIO_Init+0x314>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d02b      	beq.n	80019ba <HAL_GPIO_Init+0x226>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a51      	ldr	r2, [pc, #324]	@ (8001aac <HAL_GPIO_Init+0x318>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x222>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a50      	ldr	r2, [pc, #320]	@ (8001ab0 <HAL_GPIO_Init+0x31c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x21e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab4 <HAL_GPIO_Init+0x320>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x21a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ab8 <HAL_GPIO_Init+0x324>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x216>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4d      	ldr	r2, [pc, #308]	@ (8001abc <HAL_GPIO_Init+0x328>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x212>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac0 <HAL_GPIO_Init+0x32c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac4 <HAL_GPIO_Init+0x330>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x20a>
 800199a:	2307      	movs	r3, #7
 800199c:	e00e      	b.n	80019bc <HAL_GPIO_Init+0x228>
 800199e:	2308      	movs	r3, #8
 80019a0:	e00c      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019a2:	2306      	movs	r3, #6
 80019a4:	e00a      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019a6:	2305      	movs	r3, #5
 80019a8:	e008      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019aa:	2304      	movs	r3, #4
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019ae:	2303      	movs	r3, #3
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019ba:	2300      	movs	r3, #0
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f002 0203 	and.w	r2, r2, #3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019cc:	4935      	ldr	r1, [pc, #212]	@ (8001aa4 <HAL_GPIO_Init+0x310>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fe:	4a32      	ldr	r2, [pc, #200]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a04:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a28:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a7c:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	f67f ae90 	bls.w	80017b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3724      	adds	r7, #36	@ 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40021400 	.word	0x40021400
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40021c00 	.word	0x40021c00
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e267      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d075      	beq.n	8001c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b4e:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d00c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5a:	4b85      	ldr	r3, [pc, #532]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d112      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b66:	4b82      	ldr	r3, [pc, #520]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b72:	d10b      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	4b7e      	ldr	r3, [pc, #504]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d05b      	beq.n	8001c38 <HAL_RCC_OscConfig+0x108>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d157      	bne.n	8001c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e242      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x74>
 8001b96:	4b76      	ldr	r3, [pc, #472]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a75      	ldr	r2, [pc, #468]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e01d      	b.n	8001be0 <HAL_RCC_OscConfig+0xb0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x98>
 8001bae:	4b70      	ldr	r3, [pc, #448]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6d      	ldr	r3, [pc, #436]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0xb0>
 8001bc8:	4b69      	ldr	r3, [pc, #420]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a68      	ldr	r2, [pc, #416]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a65      	ldr	r2, [pc, #404]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fc00 	bl	80013ec <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fbfc 	bl	80013ec <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e207      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b5b      	ldr	r3, [pc, #364]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xc0>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fbec 	bl	80013ec <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fbe8 	bl	80013ec <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1f3      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	4b51      	ldr	r3, [pc, #324]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0xe8>
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d063      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c46:	4b4a      	ldr	r3, [pc, #296]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c52:	4b47      	ldr	r3, [pc, #284]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d11c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5e:	4b44      	ldr	r3, [pc, #272]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d116      	bne.n	8001c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x152>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e1c7      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4937      	ldr	r1, [pc, #220]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	e03a      	b.n	8001d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca0:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <HAL_RCC_OscConfig+0x244>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fba1 	bl	80013ec <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff fb9d 	bl	80013ec <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e1a8      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4925      	ldr	r1, [pc, #148]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e015      	b.n	8001d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_RCC_OscConfig+0x244>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fb80 	bl	80013ec <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fb7c 	bl	80013ec <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e187      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d036      	beq.n	8001d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d016      	beq.n	8001d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_RCC_OscConfig+0x248>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fb60 	bl	80013ec <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fb5c 	bl	80013ec <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e167      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x200>
 8001d4e:	e01b      	b.n	8001d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_OscConfig+0x248>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb49 	bl	80013ec <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	e00e      	b.n	8001d7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fb45 	bl	80013ec <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d907      	bls.n	8001d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e150      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
 8001d70:	40023800 	.word	0x40023800
 8001d74:	42470000 	.word	0x42470000
 8001d78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	4b88      	ldr	r3, [pc, #544]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ea      	bne.n	8001d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8097 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b81      	ldr	r3, [pc, #516]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10f      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	4a7c      	ldr	r2, [pc, #496]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b77      	ldr	r3, [pc, #476]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b74      	ldr	r3, [pc, #464]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a73      	ldr	r2, [pc, #460]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb05 	bl	80013ec <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff fb01 	bl	80013ec <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e10c      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2ea>
 8001e0c:	4b64      	ldr	r3, [pc, #400]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e10:	4a63      	ldr	r2, [pc, #396]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e18:	e01c      	b.n	8001e54 <HAL_RCC_OscConfig+0x324>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x30c>
 8001e22:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0x324>
 8001e3c:	4b58      	ldr	r3, [pc, #352]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e40:	4a57      	ldr	r2, [pc, #348]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e48:	4b55      	ldr	r3, [pc, #340]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a54      	ldr	r2, [pc, #336]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 0304 	bic.w	r3, r3, #4
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d015      	beq.n	8001e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fac6 	bl	80013ec <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7ff fac2 	bl	80013ec <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e0cb      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	4b49      	ldr	r3, [pc, #292]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0ee      	beq.n	8001e64 <HAL_RCC_OscConfig+0x334>
 8001e86:	e014      	b.n	8001eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fab0 	bl	80013ec <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff faac 	bl	80013ec <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0b5      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ee      	bne.n	8001e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb8:	4b39      	ldr	r3, [pc, #228]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	4a38      	ldr	r2, [pc, #224]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a1 	beq.w	8002010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ece:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d05c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d141      	bne.n	8001f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <HAL_RCC_OscConfig+0x478>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fa80 	bl	80013ec <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff fa7c 	bl	80013ec <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e087      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	3b01      	subs	r3, #1
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	491b      	ldr	r1, [pc, #108]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_RCC_OscConfig+0x478>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa55 	bl	80013ec <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa51 	bl	80013ec <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e05c      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x416>
 8001f64:	e054      	b.n	8002010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_RCC_OscConfig+0x478>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fa3e 	bl	80013ec <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff fa3a 	bl	80013ec <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e045      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x444>
 8001f92:	e03d      	b.n	8002010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e038      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_RCC_OscConfig+0x4ec>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d028      	beq.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d121      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d11a      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0cc      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d90c      	bls.n	800205c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b65      	ldr	r3, [pc, #404]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a58      	ldr	r2, [pc, #352]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800207e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a52      	ldr	r2, [pc, #328]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d044      	beq.n	8002140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d119      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d003      	beq.n	80020de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b3f      	ldr	r3, [pc, #252]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e06f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e067      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4934      	ldr	r1, [pc, #208]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002110:	f7ff f96c 	bl	80013ec <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff f968 	bl	80013ec <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e04f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2b      	ldr	r3, [pc, #172]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d20c      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f8cc 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023c00 	.word	0x40023c00
 80021dc:	40023800 	.word	0x40023800
 80021e0:	08009060 	.word	0x08009060
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f0:	b094      	sub	sp, #80	@ 0x50
 80021f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002204:	4b79      	ldr	r3, [pc, #484]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d00d      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x40>
 8002210:	2b08      	cmp	r3, #8
 8002212:	f200 80e1 	bhi.w	80023d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x34>
 800221a:	2b04      	cmp	r3, #4
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x3a>
 800221e:	e0db      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002224:	e0db      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002226:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800222a:	e0d8      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800222c:	4b6f      	ldr	r3, [pc, #444]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002234:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002236:	4b6d      	ldr	r3, [pc, #436]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	2200      	movs	r2, #0
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800224c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800224e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002254:	633b      	str	r3, [r7, #48]	@ 0x30
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	@ 0x34
 800225a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800225e:	4622      	mov	r2, r4
 8002260:	462b      	mov	r3, r5
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002270:	0150      	lsls	r0, r2, #5
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4621      	mov	r1, r4
 8002278:	1a51      	subs	r1, r2, r1
 800227a:	6139      	str	r1, [r7, #16]
 800227c:	4629      	mov	r1, r5
 800227e:	eb63 0301 	sbc.w	r3, r3, r1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002290:	4659      	mov	r1, fp
 8002292:	018b      	lsls	r3, r1, #6
 8002294:	4651      	mov	r1, sl
 8002296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800229a:	4651      	mov	r1, sl
 800229c:	018a      	lsls	r2, r1, #6
 800229e:	4651      	mov	r1, sl
 80022a0:	ebb2 0801 	subs.w	r8, r2, r1
 80022a4:	4659      	mov	r1, fp
 80022a6:	eb63 0901 	sbc.w	r9, r3, r1
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022be:	4690      	mov	r8, r2
 80022c0:	4699      	mov	r9, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	eb18 0303 	adds.w	r3, r8, r3
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	462b      	mov	r3, r5
 80022cc:	eb49 0303 	adc.w	r3, r9, r3
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022de:	4629      	mov	r1, r5
 80022e0:	024b      	lsls	r3, r1, #9
 80022e2:	4621      	mov	r1, r4
 80022e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e8:	4621      	mov	r1, r4
 80022ea:	024a      	lsls	r2, r1, #9
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f2:	2200      	movs	r2, #0
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022fc:	f7fd ffc0 	bl	8000280 <__aeabi_uldivmod>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4613      	mov	r3, r2
 8002306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002308:	e058      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	4b38      	ldr	r3, [pc, #224]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	2200      	movs	r2, #0
 8002312:	4618      	mov	r0, r3
 8002314:	4611      	mov	r1, r2
 8002316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002324:	4642      	mov	r2, r8
 8002326:	464b      	mov	r3, r9
 8002328:	f04f 0000 	mov.w	r0, #0
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	0159      	lsls	r1, r3, #5
 8002332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002336:	0150      	lsls	r0, r2, #5
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4641      	mov	r1, r8
 800233e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002342:	4649      	mov	r1, r9
 8002344:	eb63 0b01 	sbc.w	fp, r3, r1
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800235c:	ebb2 040a 	subs.w	r4, r2, sl
 8002360:	eb63 050b 	sbc.w	r5, r3, fp
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	00eb      	lsls	r3, r5, #3
 800236e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002372:	00e2      	lsls	r2, r4, #3
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
 8002378:	4643      	mov	r3, r8
 800237a:	18e3      	adds	r3, r4, r3
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	464b      	mov	r3, r9
 8002380:	eb45 0303 	adc.w	r3, r5, r3
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4629      	mov	r1, r5
 8002394:	028b      	lsls	r3, r1, #10
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800239c:	4621      	mov	r1, r4
 800239e:	028a      	lsls	r2, r1, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a6:	2200      	movs	r2, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	61fa      	str	r2, [r7, #28]
 80023ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b0:	f7fd ff66 	bl	8000280 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3750      	adds	r7, #80	@ 0x50
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	@ (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08009070 	.word	0x08009070

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	@ (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08009070 	.word	0x08009070

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002484:	2b00      	cmp	r3, #0
 8002486:	d035      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002488:	4b62      	ldr	r3, [pc, #392]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800248e:	f7fe ffad 	bl	80013ec <HAL_GetTick>
 8002492:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002496:	f7fe ffa9 	bl	80013ec <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0b0      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	019a      	lsls	r2, r3, #6
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	071b      	lsls	r3, r3, #28
 80024c0:	4955      	ldr	r1, [pc, #340]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024c8:	4b52      	ldr	r3, [pc, #328]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ce:	f7fe ff8d 	bl	80013ec <HAL_GetTick>
 80024d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024d6:	f7fe ff89 	bl	80013ec <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e090      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8083 	beq.w	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b44      	ldr	r3, [pc, #272]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a43      	ldr	r2, [pc, #268]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002510:	6413      	str	r3, [r2, #64]	@ 0x40
 8002512:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800251e:	4b3f      	ldr	r3, [pc, #252]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3e      	ldr	r2, [pc, #248]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002528:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800252a:	f7fe ff5f 	bl	80013ec <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7fe ff5b 	bl	80013ec <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e062      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002544:	4b35      	ldr	r3, [pc, #212]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002550:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002558:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02f      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	429a      	cmp	r2, r3
 800256c:	d028      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800256e:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002576:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002578:	4b29      	ldr	r3, [pc, #164]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800257e:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002584:	4a24      	ldr	r2, [pc, #144]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800258a:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d114      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe ff29 	bl	80013ec <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe ff25 	bl	80013ec <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e02a      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ee      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025cc:	d10d      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80025ce:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80025de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025e2:	490d      	ldr	r1, [pc, #52]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
 80025e8:	e005      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025f4:	6093      	str	r3, [r2, #8]
 80025f6:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	4905      	ldr	r1, [pc, #20]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	42470068 	.word	0x42470068
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000
 8002620:	42470e40 	.word	0x42470e40

08002624 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e073      	b.n	800271e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7f5b      	ldrb	r3, [r3, #29]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fbc0 	bl	8000dcc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b10      	cmp	r3, #16
 800265e:	d055      	beq.n	800270c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	22ca      	movs	r2, #202	@ 0xca
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2253      	movs	r2, #83	@ 0x53
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fa99 	bl	8002ba8 <RTC_EnterInitMode>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d12c      	bne.n	80026da <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800268e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002692:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	041a      	lsls	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 faa0 	bl	8002c16 <RTC_ExitInitMode>
 80026d6:	4603      	mov	r3, r0
 80026d8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	22ff      	movs	r2, #255	@ 0xff
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
 800270a:	e001      	b.n	8002710 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002726:	b590      	push	{r4, r7, lr}
 8002728:	b087      	sub	sp, #28
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	7f1b      	ldrb	r3, [r3, #28]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_RTC_SetTime+0x1c>
 800273e:	2302      	movs	r3, #2
 8002740:	e087      	b.n	8002852 <HAL_RTC_SetTime+0x12c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2202      	movs	r2, #2
 800274c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d126      	bne.n	80027a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa77 	bl	8002c60 <RTC_ByteToBcd2>
 8002772:	4603      	mov	r3, r0
 8002774:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	785b      	ldrb	r3, [r3, #1]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fa70 	bl	8002c60 <RTC_ByteToBcd2>
 8002780:	4603      	mov	r3, r0
 8002782:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002784:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	789b      	ldrb	r3, [r3, #2]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fa68 	bl	8002c60 <RTC_ByteToBcd2>
 8002790:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002792:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	78db      	ldrb	r3, [r3, #3]
 800279a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e018      	b.n	80027d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	22ca      	movs	r2, #202	@ 0xca
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2253      	movs	r2, #83	@ 0x53
 80027e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f9df 	bl	8002ba8 <RTC_EnterInitMode>
 80027ea:	4603      	mov	r3, r0
 80027ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d120      	bne.n	8002836 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80027fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002802:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002812:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f9f2 	bl	8002c16 <RTC_ExitInitMode>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	22ff      	movs	r2, #255	@ 0xff
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]

  return status;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
}
 8002852:	4618      	mov	r0, r3
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}

0800285a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800288c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002890:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	0d9b      	lsrs	r3, r3, #22
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11a      	bne.n	800290c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f9de 	bl	8002c9c <RTC_Bcd2ToByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f9d5 	bl	8002c9c <RTC_Bcd2ToByte>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	789b      	ldrb	r3, [r3, #2]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f9cc 	bl	8002c9c <RTC_Bcd2ToByte>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002916:	b590      	push	{r4, r7, lr}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	7f1b      	ldrb	r3, [r3, #28]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_RTC_SetDate+0x1c>
 800292e:	2302      	movs	r3, #2
 8002930:	e071      	b.n	8002a16 <HAL_RTC_SetDate+0x100>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2202      	movs	r2, #2
 800293c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10e      	bne.n	8002962 <HAL_RTC_SetDate+0x4c>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	f023 0310 	bic.w	r3, r3, #16
 8002958:	b2db      	uxtb	r3, r3
 800295a:	330a      	adds	r3, #10
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11c      	bne.n	80029a2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	78db      	ldrb	r3, [r3, #3]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f977 	bl	8002c60 <RTC_ByteToBcd2>
 8002972:	4603      	mov	r3, r0
 8002974:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f970 	bl	8002c60 <RTC_ByteToBcd2>
 8002980:	4603      	mov	r3, r0
 8002982:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002984:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	789b      	ldrb	r3, [r3, #2]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f968 	bl	8002c60 <RTC_ByteToBcd2>
 8002990:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002992:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e00e      	b.n	80029c0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	78db      	ldrb	r3, [r3, #3]
 80029a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029ae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	22ca      	movs	r2, #202	@ 0xca
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2253      	movs	r2, #83	@ 0x53
 80029ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f8e9 	bl	8002ba8 <RTC_EnterInitMode>
 80029d6:	4603      	mov	r3, r0
 80029d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10c      	bne.n	80029fa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80029ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f910 	bl	8002c16 <RTC_ExitInitMode>
 80029f6:	4603      	mov	r3, r0
 80029f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	22ff      	movs	r2, #255	@ 0xff
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]

  return status;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}

08002a1e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	0b5b      	lsrs	r3, r3, #13
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11a      	bne.n	8002ab2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	78db      	ldrb	r3, [r3, #3]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f90b 	bl	8002c9c <RTC_Bcd2ToByte>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f902 	bl	8002c9c <RTC_Bcd2ToByte>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	789b      	ldrb	r3, [r3, #2]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f8f9 	bl	8002c9c <RTC_Bcd2ToByte>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002ac6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aca:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002af8:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f824 	bl	8002b48 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002b2c:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f904 	bl	8002d3c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	775a      	strb	r2, [r3, #29]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40013c00 	.word	0x40013c00

08002b48 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <HAL_RTC_WaitForSynchro+0x48>)
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b70:	f7fe fc3c 	bl	80013ec <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b76:	e009      	b.n	8002b8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b78:	f7fe fc38 	bl	80013ec <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b86:	d901      	bls.n	8002b8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e007      	b.n	8002b9c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ee      	beq.n	8002b78 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	00017f5f 	.word	0x00017f5f

08002ba8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d122      	bne.n	8002c0c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bd4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe fc09 	bl	80013ec <HAL_GetTick>
 8002bda:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002bdc:	e00c      	b.n	8002bf8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bde:	f7fe fc05 	bl	80013ec <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bec:	d904      	bls.n	8002bf8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <RTC_EnterInitMode+0x64>
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d1e8      	bne.n	8002bde <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff8b 	bl	8002b5c <HAL_RTC_WaitForSynchro>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002c6e:	e005      	b.n	8002c7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	3b0a      	subs	r3, #10
 8002c7a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d8f6      	bhi.n	8002c70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b2db      	uxtb	r3, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	b2db      	uxtb	r3, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3350      	adds	r3, #80	@ 0x50
 8002cee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3350      	adds	r3, #80	@ 0x50
 8002d20:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e022      	b.n	8002da8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe f85b 	bl	8000e30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f814 	bl	8002db0 <HAL_SD_InitCard>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00a      	b.n	8002da8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b08e      	sub	sp, #56	@ 0x38
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002dcc:	2376      	movs	r3, #118	@ 0x76
 8002dce:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681d      	ldr	r5, [r3, #0]
 8002dd4:	466c      	mov	r4, sp
 8002dd6:	f107 0318 	add.w	r3, r7, #24
 8002dda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002de2:	f107 030c 	add.w	r3, r7, #12
 8002de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de8:	4628      	mov	r0, r5
 8002dea:	f002 fa8b 	bl	8005304 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002dee:	4b2a      	ldr	r3, [pc, #168]	@ (8002e98 <HAL_SD_InitCard+0xe8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 facc 	bl	8005396 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002dfe:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <HAL_SD_InitCard+0xe8>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002e04:	2002      	movs	r0, #2
 8002e06:	f7fe fafd 	bl	8001404 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fe7a 	bl	8003b04 <SD_PowerON>
 8002e10:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e02e      	b.n	8002e8e <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fd99 	bl	8003968 <SD_InitCard>
 8002e36:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e01b      	b.n	8002e8e <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fb2b 	bl	80054ba <SDMMC_CmdBlockLength>
 8002e64:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00f      	beq.n	8002e8c <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	@ (8002e9c <HAL_SD_InitCard+0xec>)
 8002e72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3728      	adds	r7, #40	@ 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdb0      	pop	{r4, r5, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	422580a0 	.word	0x422580a0
 8002e9c:	004005ff 	.word	0x004005ff

08002ea0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b092      	sub	sp, #72	@ 0x48
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002eae:	f7fe fa9d 	bl	80013ec <HAL_GetTick>
 8002eb2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1c5      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f040 81b8 	bne.w	8003250 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ee6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	441a      	add	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d907      	bls.n	8002f04 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e1ac      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2203      	movs	r2, #3
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d002      	beq.n	8002f22 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1e:	025b      	lsls	r3, r3, #9
 8002f20:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	025b      	lsls	r3, r3, #9
 8002f2c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f2e:	2390      	movs	r3, #144	@ 0x90
 8002f30:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f32:	2302      	movs	r3, #2
 8002f34:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f107 0214 	add.w	r2, r7, #20
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 fa8a 	bl	8005462 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d90a      	bls.n	8002f6a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2202      	movs	r2, #2
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 faee 	bl	8005542 <SDMMC_CmdReadMultiBlock>
 8002f66:	6478      	str	r0, [r7, #68]	@ 0x44
 8002f68:	e009      	b.n	8002f7e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fac1 	bl	80054fe <SDMMC_CmdReadSingleBlock>
 8002f7c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a7e      	ldr	r2, [pc, #504]	@ (8003184 <HAL_SD_ReadBlocks+0x2e4>)
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e159      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002fae:	e061      	b.n	8003074 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d03c      	beq.n	8003038 <HAL_SD_ReadBlocks+0x198>
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d039      	beq.n	8003038 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fc8:	e033      	b.n	8003032 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 f9c3 	bl	800535a <SDIO_ReadFIFO>
 8002fd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fdc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	b2da      	uxtb	r2, r3
 8003006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003008:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800300a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300c:	3301      	adds	r3, #1
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003012:	3b01      	subs	r3, #1
 8003014:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003018:	0e1b      	lsrs	r3, r3, #24
 800301a:	b2da      	uxtb	r2, r3
 800301c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	3301      	adds	r3, #1
 8003024:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003028:	3b01      	subs	r3, #1
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800302c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800302e:	3301      	adds	r3, #1
 8003030:	643b      	str	r3, [r7, #64]	@ 0x40
 8003032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003034:	2b07      	cmp	r3, #7
 8003036:	d9c8      	bls.n	8002fca <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003038:	f7fe f9d8 	bl	80013ec <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003044:	429a      	cmp	r2, r3
 8003046:	d902      	bls.n	800304e <HAL_SD_ReadBlocks+0x1ae>
 8003048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304a:	2b00      	cmp	r3, #0
 800304c:	d112      	bne.n	8003074 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a4c      	ldr	r2, [pc, #304]	@ (8003184 <HAL_SD_ReadBlocks+0x2e4>)
 8003054:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0f4      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307a:	f240 332a 	movw	r3, #810	@ 0x32a
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d095      	beq.n	8002fb0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d022      	beq.n	80030d8 <HAL_SD_ReadBlocks+0x238>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d91f      	bls.n	80030d8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309c:	2b03      	cmp	r3, #3
 800309e:	d01b      	beq.n	80030d8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fab3 	bl	8005610 <SDMMC_CmdStopTransfer>
 80030aa:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80030ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d012      	beq.n	80030d8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a33      	ldr	r2, [pc, #204]	@ (8003184 <HAL_SD_ReadBlocks+0x2e4>)
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0c2      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_SD_ReadBlocks+0x254>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a22      	ldr	r2, [pc, #136]	@ (8003184 <HAL_SD_ReadBlocks+0x2e4>)
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	f043 0208 	orr.w	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0a1      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a15      	ldr	r2, [pc, #84]	@ (8003184 <HAL_SD_ReadBlocks+0x2e4>)
 800312e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	f043 0202 	orr.w	r2, r3, #2
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e087      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d064      	beq.n	8003226 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_SD_ReadBlocks+0x2e4>)
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06d      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
 8003182:	bf00      	nop
 8003184:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f002 f8e4 	bl	800535a <SDIO_ReadFIFO>
 8003192:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003196:	b2da      	uxtb	r2, r3
 8003198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	3301      	adds	r3, #1
 80031a0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a4:	3b01      	subs	r3, #1
 80031a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b4:	3301      	adds	r3, #1
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ba:	3b01      	subs	r3, #1
 80031bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80031be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	3301      	adds	r3, #1
 80031cc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d0:	3b01      	subs	r3, #1
 80031d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	0e1b      	lsrs	r3, r3, #24
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e0:	3301      	adds	r3, #1
 80031e2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e6:	3b01      	subs	r3, #1
 80031e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031ea:	f7fe f8ff 	bl	80013ec <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d902      	bls.n	8003200 <HAL_SD_ReadBlocks+0x360>
 80031fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d112      	bne.n	8003226 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a18      	ldr	r2, [pc, #96]	@ (8003268 <HAL_SD_ReadBlocks+0x3c8>)
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e01b      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SD_ReadBlocks+0x39a>
 8003234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1a6      	bne.n	8003188 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e006      	b.n	800325e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3748      	adds	r7, #72	@ 0x48
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	004005ff 	.word	0x004005ff

0800326c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b092      	sub	sp, #72	@ 0x48
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800327a:	f7fe f8b7 	bl	80013ec <HAL_GetTick>
 800327e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e16d      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f040 8160 	bne.w	800356c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	429a      	cmp	r2, r3
 80032be:	d907      	bls.n	80032d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e154      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2203      	movs	r2, #3
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2200      	movs	r2, #0
 80032de:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d002      	beq.n	80032ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80032e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	025b      	lsls	r3, r3, #9
 80032f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032fa:	2390      	movs	r3, #144	@ 0x90
 80032fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003302:	2300      	movs	r3, #0
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003306:	2301      	movs	r3, #1
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f107 0218 	add.w	r2, r7, #24
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f002 f8a4 	bl	8005462 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d90a      	bls.n	8003336 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800332c:	4618      	mov	r0, r3
 800332e:	f002 f94c 	bl	80055ca <SDMMC_CmdWriteMultiBlock>
 8003332:	6478      	str	r0, [r7, #68]	@ 0x44
 8003334:	e009      	b.n	800334a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2210      	movs	r2, #16
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003342:	4618      	mov	r0, r3
 8003344:	f002 f91f 	bl	8005586 <SDMMC_CmdWriteSingleBlock>
 8003348:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800334a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a8b      	ldr	r2, [pc, #556]	@ (8003584 <HAL_SD_WriteBlocks+0x318>)
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800335c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800335e:	431a      	orrs	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e101      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800337a:	e065      	b.n	8003448 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_SD_WriteBlocks+0x1a0>
 800338a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d03d      	beq.n	800340c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003390:	2300      	movs	r3, #0
 8003392:	643b      	str	r3, [r7, #64]	@ 0x40
 8003394:	e037      	b.n	8003406 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800339c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339e:	3301      	adds	r3, #1
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a4:	3b01      	subs	r3, #1
 80033a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b6:	3301      	adds	r3, #1
 80033b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033bc:	3b01      	subs	r3, #1
 80033be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	041a      	lsls	r2, r3, #16
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	3301      	adds	r3, #1
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d4:	3b01      	subs	r3, #1
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80033d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	061a      	lsls	r2, r3, #24
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e6:	3301      	adds	r3, #1
 80033e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ec:	3b01      	subs	r3, #1
 80033ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f107 0214 	add.w	r2, r7, #20
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 ffba 	bl	8005374 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003402:	3301      	adds	r3, #1
 8003404:	643b      	str	r3, [r7, #64]	@ 0x40
 8003406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003408:	2b07      	cmp	r3, #7
 800340a:	d9c4      	bls.n	8003396 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800340c:	f7fd ffee 	bl	80013ec <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003418:	429a      	cmp	r2, r3
 800341a:	d902      	bls.n	8003422 <HAL_SD_WriteBlocks+0x1b6>
 800341c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800341e:	2b00      	cmp	r3, #0
 8003420:	d112      	bne.n	8003448 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a57      	ldr	r2, [pc, #348]	@ (8003584 <HAL_SD_WriteBlocks+0x318>)
 8003428:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e098      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800344e:	f240 331a 	movw	r3, #794	@ 0x31a
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d091      	beq.n	800337c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d022      	beq.n	80034ac <HAL_SD_WriteBlocks+0x240>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d91f      	bls.n	80034ac <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	2b03      	cmp	r3, #3
 8003472:	d01b      	beq.n	80034ac <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f002 f8c9 	bl	8005610 <SDMMC_CmdStopTransfer>
 800347e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3e      	ldr	r2, [pc, #248]	@ (8003584 <HAL_SD_WriteBlocks+0x318>)
 800348c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e066      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_SD_WriteBlocks+0x25c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d012      	beq.n	80034ee <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003584 <HAL_SD_WriteBlocks+0x318>)
 80034ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	f043 0208 	orr.w	r2, r3, #8
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e045      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d012      	beq.n	8003522 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a20      	ldr	r2, [pc, #128]	@ (8003584 <HAL_SD_WriteBlocks+0x318>)
 8003502:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e02b      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d012      	beq.n	8003556 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a13      	ldr	r2, [pc, #76]	@ (8003584 <HAL_SD_WriteBlocks+0x318>)
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e011      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800355e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e006      	b.n	800357a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3748      	adds	r7, #72	@ 0x48
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	004005ff 	.word	0x004005ff

08003588 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003596:	0f9b      	lsrs	r3, r3, #30
 8003598:	b2da      	uxtb	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035a2:	0e9b      	lsrs	r3, r3, #26
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035b4:	0e1b      	lsrs	r3, r3, #24
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035e8:	0d1b      	lsrs	r3, r3, #20
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003606:	0bdb      	lsrs	r3, r3, #15
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003618:	0b9b      	lsrs	r3, r3, #14
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800362a:	0b5b      	lsrs	r3, r3, #13
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800363c:	0b1b      	lsrs	r3, r3, #12
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2200      	movs	r2, #0
 800364e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003654:	2b00      	cmp	r3, #0
 8003656:	d163      	bne.n	8003720 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800365c:	009a      	lsls	r2, r3, #2
 800365e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003662:	4013      	ands	r3, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003668:	0f92      	lsrs	r2, r2, #30
 800366a:	431a      	orrs	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003674:	0edb      	lsrs	r3, r3, #27
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	b2da      	uxtb	r2, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003686:	0e1b      	lsrs	r3, r3, #24
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	b2da      	uxtb	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003698:	0d5b      	lsrs	r3, r3, #21
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036bc:	0bdb      	lsrs	r3, r3, #15
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	7e1b      	ldrb	r3, [r3, #24]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	3302      	adds	r3, #2
 80036e0:	2201      	movs	r2, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80036ea:	fb03 f202 	mul.w	r2, r3, r2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	7a1b      	ldrb	r3, [r3, #8]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800370c:	0a52      	lsrs	r2, r2, #9
 800370e:	fb03 f202 	mul.w	r2, r3, r2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60
 800371e:	e031      	b.n	8003784 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003724:	2b01      	cmp	r3, #1
 8003726:	d11d      	bne.n	8003764 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003736:	0c1b      	lsrs	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	3301      	adds	r3, #1
 8003744:	029a      	lsls	r2, r3, #10
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003758:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	661a      	str	r2, [r3, #96]	@ 0x60
 8003762:	e00f      	b.n	8003784 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a58      	ldr	r2, [pc, #352]	@ (80038cc <HAL_SD_GetCardCSD+0x344>)
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e09d      	b.n	80038c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003788:	0b9b      	lsrs	r3, r3, #14
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379a:	09db      	lsrs	r3, r3, #7
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	0fdb      	lsrs	r3, r3, #31
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	0f5b      	lsrs	r3, r3, #29
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ec:	0d9b      	lsrs	r3, r3, #22
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	0d5b      	lsrs	r3, r3, #21
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	0c1b      	lsrs	r3, r3, #16
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	b2da      	uxtb	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	0bdb      	lsrs	r3, r3, #15
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	0b9b      	lsrs	r3, r3, #14
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	0b5b      	lsrs	r3, r3, #13
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	b2da      	uxtb	r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	0b1b      	lsrs	r3, r3, #12
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	0a9b      	lsrs	r3, r3, #10
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	b2da      	uxtb	r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	b2da      	uxtb	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	004005ff 	.word	0x004005ff

080038d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003934:	f107 030c 	add.w	r3, r7, #12
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f970 	bl	8003c20 <SD_SendStatus>
 8003940:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	0a5b      	lsrs	r3, r3, #9
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800395e:	693b      	ldr	r3, [r7, #16]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003968:	b5b0      	push	{r4, r5, r7, lr}
 800396a:	b094      	sub	sp, #80	@ 0x50
 800396c:	af04      	add	r7, sp, #16
 800396e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003970:	2301      	movs	r3, #1
 8003972:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fd1a 	bl	80053b2 <SDIO_GetPowerState>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003984:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003988:	e0b8      	b.n	8003afc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	2b03      	cmp	r3, #3
 8003990:	d02f      	beq.n	80039f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f001 ff01 	bl	800579e <SDMMC_CmdSendCID>
 800399c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800399e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80039a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a6:	e0a9      	b.n	8003afc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fd44 	bl	800543c <SDIO_GetResponse>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2104      	movs	r1, #4
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fd3b 	bl	800543c <SDIO_GetResponse>
 80039c6:	4602      	mov	r2, r0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2108      	movs	r1, #8
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fd32 	bl	800543c <SDIO_GetResponse>
 80039d8:	4602      	mov	r2, r0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	210c      	movs	r1, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 fd29 	bl	800543c <SDIO_GetResponse>
 80039ea:	4602      	mov	r2, r0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d00d      	beq.n	8003a16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f107 020e 	add.w	r2, r7, #14
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 ff07 	bl	8005818 <SDMMC_CmdSetRelAdd>
 8003a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <SD_InitCard+0xae>
    {
      return errorstate;
 8003a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a14:	e072      	b.n	8003afc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d036      	beq.n	8003a8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	461a      	mov	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f001 fed1 	bl	80057da <SDMMC_CmdSendCSD>
 8003a38:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a42:	e05b      	b.n	8003afc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fcf6 	bl	800543c <SDIO_GetResponse>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 fced 	bl	800543c <SDIO_GetResponse>
 8003a62:	4602      	mov	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2108      	movs	r1, #8
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 fce4 	bl	800543c <SDIO_GetResponse>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	210c      	movs	r1, #12
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fcdb 	bl	800543c <SDIO_GetResponse>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2104      	movs	r1, #4
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fcd2 	bl	800543c <SDIO_GetResponse>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	0d1a      	lsrs	r2, r3, #20
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fd6e 	bl	8003588 <HAL_SD_GetCardCSD>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ab2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003ab6:	e021      	b.n	8003afc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	461c      	mov	r4, r3
 8003ac6:	4615      	mov	r5, r2
 8003ac8:	4622      	mov	r2, r4
 8003aca:	462b      	mov	r3, r5
 8003acc:	4608      	mov	r0, r1
 8003ace:	f001 fdc1 	bl	8005654 <SDMMC_CmdSelDesel>
 8003ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SD_InitCard+0x176>
  {
    return errorstate;
 8003ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003adc:	e00e      	b.n	8003afc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681d      	ldr	r5, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	466c      	mov	r4, sp
 8003ae6:	f103 0210 	add.w	r2, r3, #16
 8003aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003af0:	3304      	adds	r3, #4
 8003af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af4:	4628      	mov	r0, r5
 8003af6:	f001 fc05 	bl	8005304 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3740      	adds	r7, #64	@ 0x40
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bdb0      	pop	{r4, r5, r7, pc}

08003b04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 fdbc 	bl	800569a <SDMMC_CmdGoIdleState>
 8003b22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	e072      	b.n	8003c14 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 fdcf 	bl	80056d6 <SDMMC_CmdOperCond>
 8003b38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fda5 	bl	800569a <SDMMC_CmdGoIdleState>
 8003b50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	e05b      	b.n	8003c14 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d137      	bne.n	8003bda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 fdcf 	bl	8005714 <SDMMC_CmdAppCommand>
 8003b76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d02d      	beq.n	8003bda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b82:	e047      	b.n	8003c14 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fdc2 	bl	8005714 <SDMMC_CmdAppCommand>
 8003b90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <SD_PowerON+0x98>
    {
      return errorstate;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	e03b      	b.n	8003c14 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	491e      	ldr	r1, [pc, #120]	@ (8003c1c <SD_PowerON+0x118>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 fdd8 	bl	8005758 <SDMMC_CmdAppOperCommand>
 8003ba8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bb0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003bb4:	e02e      	b.n	8003c14 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fc3d 	bl	800543c <SDIO_GetResponse>
 8003bc2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	0fdb      	lsrs	r3, r3, #31
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <SD_PowerON+0xcc>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <SD_PowerON+0xce>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]

    count++;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d802      	bhi.n	8003bea <SD_PowerON+0xe6>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0cc      	beq.n	8003b84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d902      	bls.n	8003bfa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bf8:	e00c      	b.n	8003c14 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c0a:	e002      	b.n	8003c12 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	c1100000 	.word	0xc1100000

08003c20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003c30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c34:	e018      	b.n	8003c68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f001 fe09 	bl	800585a <SDMMC_CmdSendStatus>
 8003c48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	e009      	b.n	8003c68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fbee 	bl	800543c <SDIO_GetResponse>
 8003c60:	4602      	mov	r2, r0
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07b      	b.n	8003d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c92:	d009      	beq.n	8003ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
 8003c9a:	e005      	b.n	8003ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd f91c 	bl	8000f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	ea42 0103 	orr.w	r1, r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0104 	and.w	r1, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	f003 0210 	and.w	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e041      	b.n	8003e18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fd f8f1 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 f9b5 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d001      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e04e      	b.n	8003ed6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d022      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x80>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e62:	d01d      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x80>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x80>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	@ (8003eec <HAL_TIM_Base_Start_IT+0xcc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x80>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x80>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x80>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a19      	ldr	r2, [pc, #100]	@ (8003ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x80>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <HAL_TIM_Base_Start_IT+0xdc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d111      	bne.n	8003ec4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d010      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	e007      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40010400 	.word	0x40010400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40001800 	.word	0x40001800

08003f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d020      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01b      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0202 	mvn.w	r2, #2
 8003f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f8d2 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8c4 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8d5 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0204 	mvn.w	r2, #4
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8ac 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f89e 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8af 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0208 	mvn.w	r2, #8
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f886 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f878 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f889 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0210 	mvn.w	r2, #16
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2208      	movs	r2, #8
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f860 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f852 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f863 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0201 	mvn.w	r2, #1
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc fdf4 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f97c 	bl	8004388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f834 	bl	800411c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0220 	mvn.w	r2, #32
 80040d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f94e 	bl	8004374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a43      	ldr	r2, [pc, #268]	@ (8004250 <TIM_Base_SetConfig+0x120>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414e:	d00f      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a40      	ldr	r2, [pc, #256]	@ (8004254 <TIM_Base_SetConfig+0x124>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3f      	ldr	r2, [pc, #252]	@ (8004258 <TIM_Base_SetConfig+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3e      	ldr	r2, [pc, #248]	@ (800425c <TIM_Base_SetConfig+0x12c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a3d      	ldr	r2, [pc, #244]	@ (8004260 <TIM_Base_SetConfig+0x130>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d108      	bne.n	8004182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a32      	ldr	r2, [pc, #200]	@ (8004250 <TIM_Base_SetConfig+0x120>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02b      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d027      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2f      	ldr	r2, [pc, #188]	@ (8004254 <TIM_Base_SetConfig+0x124>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d023      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2e      	ldr	r2, [pc, #184]	@ (8004258 <TIM_Base_SetConfig+0x128>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <TIM_Base_SetConfig+0x12c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01b      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <TIM_Base_SetConfig+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d017      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004264 <TIM_Base_SetConfig+0x134>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004268 <TIM_Base_SetConfig+0x138>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a29      	ldr	r2, [pc, #164]	@ (800426c <TIM_Base_SetConfig+0x13c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a28      	ldr	r2, [pc, #160]	@ (8004270 <TIM_Base_SetConfig+0x140>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a27      	ldr	r2, [pc, #156]	@ (8004274 <TIM_Base_SetConfig+0x144>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a26      	ldr	r2, [pc, #152]	@ (8004278 <TIM_Base_SetConfig+0x148>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a0e      	ldr	r2, [pc, #56]	@ (8004250 <TIM_Base_SetConfig+0x120>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0xf2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a10      	ldr	r2, [pc, #64]	@ (8004260 <TIM_Base_SetConfig+0x130>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d103      	bne.n	800422a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	601a      	str	r2, [r3, #0]
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40010000 	.word	0x40010000
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40010400 	.word	0x40010400
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800
 8004270:	40001800 	.word	0x40001800
 8004274:	40001c00 	.word	0x40001c00
 8004278:	40002000 	.word	0x40002000

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e05a      	b.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a21      	ldr	r2, [pc, #132]	@ (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d022      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e0:	d01d      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1d      	ldr	r2, [pc, #116]	@ (800435c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d018      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a18      	ldr	r2, [pc, #96]	@ (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a17      	ldr	r2, [pc, #92]	@ (800436c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10c      	bne.n	8004338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4313      	orrs	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	40010400 	.word	0x40010400
 800436c:	40014000 	.word	0x40014000
 8004370:	40001800 	.word	0x40001800

08004374 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e042      	b.n	8004434 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fc fe0c 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	@ 0x24
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fd1b 	bl	8004e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	d121      	bne.n	800449a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_UART_Transmit_IT+0x26>
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e01a      	b.n	800449c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2221      	movs	r2, #33	@ 0x21
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004494:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d112      	bne.n	80044e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_UART_Receive_IT+0x26>
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00b      	b.n	80044ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	461a      	mov	r2, r3
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fac8 	bl	8004a74 <UART_Start_Receive_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	e000      	b.n	80044ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0ba      	sub	sp, #232	@ 0xe8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004520:	2300      	movs	r3, #0
 8004522:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_UART_IRQHandler+0x66>
 8004546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fba4 	bl	8004ca0 <UART_Receive_IT>
      return;
 8004558:	e273      	b.n	8004a42 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800455a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80de 	beq.w	8004720 <HAL_UART_IRQHandler+0x22c>
 8004564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004574:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80d1 	beq.w	8004720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <HAL_UART_IRQHandler+0xae>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_UART_IRQHandler+0xd2>
 80045ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	f043 0202 	orr.w	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_UART_IRQHandler+0xf6>
 80045d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f043 0204 	orr.w	r2, r3, #4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d011      	beq.n	800461a <HAL_UART_IRQHandler+0x126>
 80045f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d105      	bne.n	800460e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f043 0208 	orr.w	r2, r3, #8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 820a 	beq.w	8004a38 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_UART_IRQHandler+0x14e>
 8004630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fb2f 	bl	8004ca0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464c:	2b40      	cmp	r3, #64	@ 0x40
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <HAL_UART_IRQHandler+0x17a>
 8004666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04f      	beq.n	800470e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa3a 	bl	8004ae8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d141      	bne.n	8004706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800469c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1d9      	bne.n	8004682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046da:	4a8a      	ldr	r2, [pc, #552]	@ (8004904 <HAL_UART_IRQHandler+0x410>)
 80046dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fd f833 	bl	800174e <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00e      	b.n	800471c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9a2 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e00a      	b.n	800471c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f99e 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e006      	b.n	800471c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f99a 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800471a:	e18d      	b.n	8004a38 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	bf00      	nop
    return;
 800471e:	e18b      	b.n	8004a38 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	2b01      	cmp	r3, #1
 8004726:	f040 8167 	bne.w	80049f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8160 	beq.w	80049f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8159 	beq.w	80049f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b40      	cmp	r3, #64	@ 0x40
 8004768:	f040 80ce 	bne.w	8004908 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a9 	beq.w	80048d4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800478a:	429a      	cmp	r2, r3
 800478c:	f080 80a2 	bcs.w	80048d4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004796:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a2:	f000 8088 	beq.w	80048b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1d9      	bne.n	80047a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3314      	adds	r3, #20
 8004812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004816:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800481a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800481e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e1      	bne.n	80047f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800483e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e3      	bne.n	800482e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004886:	f023 0310 	bic.w	r3, r3, #16
 800488a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004898:	65ba      	str	r2, [r7, #88]	@ 0x58
 800489a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800489e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e3      	bne.n	8004874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fc fedc 	bl	800166e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8c5 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80048d2:	e0b3      	b.n	8004a3c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048dc:	429a      	cmp	r2, r3
 80048de:	f040 80ad 	bne.w	8004a3c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ec:	f040 80a6 	bne.w	8004a3c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8ad 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
      return;
 8004902:	e09b      	b.n	8004a3c <HAL_UART_IRQHandler+0x548>
 8004904:	08004baf 	.word	0x08004baf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004910:	b29b      	uxth	r3, r3
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 808e 	beq.w	8004a40 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8089 	beq.w	8004a40 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800493e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004952:	647a      	str	r2, [r7, #68]	@ 0x44
 8004954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e3      	bne.n	800492e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	623b      	str	r3, [r7, #32]
   return(result);
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800498a:	633a      	str	r2, [r7, #48]	@ 0x30
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e3      	bne.n	8004966 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0310 	bic.w	r3, r3, #16
 80049c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	617b      	str	r3, [r7, #20]
   return(result);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e3      	bne.n	80049ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f833 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f6:	e023      	b.n	8004a40 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d009      	beq.n	8004a18 <HAL_UART_IRQHandler+0x524>
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8dd 	bl	8004bd0 <UART_Transmit_IT>
    return;
 8004a16:	e014      	b.n	8004a42 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <HAL_UART_IRQHandler+0x54e>
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f91d 	bl	8004c70 <UART_EndTransmit_IT>
    return;
 8004a36:	e004      	b.n	8004a42 <HAL_UART_IRQHandler+0x54e>
    return;
 8004a38:	bf00      	nop
 8004a3a:	e002      	b.n	8004a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8004a40:	bf00      	nop
  }
}
 8004a42:	37e8      	adds	r7, #232	@ 0xe8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2222      	movs	r2, #34	@ 0x22
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0220 	orr.w	r2, r2, #32
 8004ad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b095      	sub	sp, #84	@ 0x54
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b10:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e5      	bne.n	8004af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e5      	bne.n	8004b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d119      	bne.n	8004b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f023 0310 	bic.w	r3, r3, #16
 8004b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b80:	61ba      	str	r2, [r7, #24]
 8004b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6979      	ldr	r1, [r7, #20]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ba2:	bf00      	nop
 8004ba4:	3754      	adds	r7, #84	@ 0x54
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff40 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b21      	cmp	r3, #33	@ 0x21
 8004be2:	d13e      	bne.n	8004c62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bec:	d114      	bne.n	8004c18 <UART_Transmit_IT+0x48>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d110      	bne.n	8004c18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]
 8004c16:	e008      	b.n	8004c2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	1c59      	adds	r1, r3, #1
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6211      	str	r1, [r2, #32]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4619      	mov	r1, r3
 8004c38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
  }
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc f863 	bl	8000d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	@ 0x30
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b22      	cmp	r3, #34	@ 0x22
 8004cba:	f040 80aa 	bne.w	8004e12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc6:	d115      	bne.n	8004cf4 <UART_Receive_IT+0x54>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d111      	bne.n	8004cf4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cf2:	e024      	b.n	8004d3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d02:	d007      	beq.n	8004d14 <UART_Receive_IT+0x74>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <UART_Receive_IT+0x82>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e008      	b.n	8004d34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d15d      	bne.n	8004e0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0220 	bic.w	r2, r2, #32
 8004d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d135      	bne.n	8004e04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	613b      	str	r3, [r7, #16]
   return(result);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f023 0310 	bic.w	r3, r3, #16
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbe:	623a      	str	r2, [r7, #32]
 8004dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	69f9      	ldr	r1, [r7, #28]
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e5      	bne.n	8004d9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d10a      	bne.n	8004df6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fe2d 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
 8004e02:	e002      	b.n	8004e0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb ff8b 	bl	8000d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e002      	b.n	8004e14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e000      	b.n	8004e14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
  }
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3730      	adds	r7, #48	@ 0x30
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e20:	b0c0      	sub	sp, #256	@ 0x100
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	ea40 0301 	orr.w	r3, r0, r1
 8004e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e74:	f021 010c 	bic.w	r1, r1, #12
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e82:	430b      	orrs	r3, r1
 8004e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	6999      	ldr	r1, [r3, #24]
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b8f      	ldr	r3, [pc, #572]	@ (80050e8 <UART_SetConfig+0x2cc>)
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d005      	beq.n	8004ebc <UART_SetConfig+0xa0>
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80050ec <UART_SetConfig+0x2d0>)
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d104      	bne.n	8004ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fd fabc 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ec4:	e003      	b.n	8004ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ec6:	f7fd faa3 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8004eca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed8:	f040 810c 	bne.w	80050f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004efe:	4621      	mov	r1, r4
 8004f00:	eb12 0801 	adds.w	r8, r2, r1
 8004f04:	4629      	mov	r1, r5
 8004f06:	eb43 0901 	adc.w	r9, r3, r1
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f1e:	4690      	mov	r8, r2
 8004f20:	4699      	mov	r9, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	eb18 0303 	adds.w	r3, r8, r3
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	eb49 0303 	adc.w	r3, r9, r3
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	18db      	adds	r3, r3, r3
 8004f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f50:	4613      	mov	r3, r2
 8004f52:	eb42 0303 	adc.w	r3, r2, r3
 8004f56:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f60:	f7fb f98e 	bl	8000280 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b61      	ldr	r3, [pc, #388]	@ (80050f0 <UART_SetConfig+0x2d4>)
 8004f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011c      	lsls	r4, r3, #4
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f94:	4641      	mov	r1, r8
 8004f96:	eb12 0a01 	adds.w	sl, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb4:	4692      	mov	sl, r2
 8004fb6:	469b      	mov	fp, r3
 8004fb8:	4643      	mov	r3, r8
 8004fba:	eb1a 0303 	adds.w	r3, sl, r3
 8004fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	18db      	adds	r3, r3, r3
 8004fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ff6:	f7fb f943 	bl	8000280 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <UART_SetConfig+0x2d4>)
 8005002:	fba3 2301 	umull	r2, r3, r3, r1
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2264      	movs	r2, #100	@ 0x64
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	1acb      	subs	r3, r1, r3
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005016:	4b36      	ldr	r3, [pc, #216]	@ (80050f0 <UART_SetConfig+0x2d4>)
 8005018:	fba3 2302 	umull	r2, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005024:	441c      	add	r4, r3
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005030:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005040:	415b      	adcs	r3, r3
 8005042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6339      	str	r1, [r7, #48]	@ 0x30
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005094:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800509c:	460b      	mov	r3, r1
 800509e:	18db      	adds	r3, r3, r3
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a2:	4613      	mov	r3, r2
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050b2:	f7fb f8e5 	bl	8000280 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <UART_SetConfig+0x2d4>)
 80050bc:	fba3 1302 	umull	r1, r3, r3, r2
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	2164      	movs	r1, #100	@ 0x64
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	3332      	adds	r3, #50	@ 0x32
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <UART_SetConfig+0x2d4>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f003 0207 	and.w	r2, r3, #7
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4422      	add	r2, r4
 80050e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e4:	e106      	b.n	80052f4 <UART_SetConfig+0x4d8>
 80050e6:	bf00      	nop
 80050e8:	40011000 	.word	0x40011000
 80050ec:	40011400 	.word	0x40011400
 80050f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005106:	4642      	mov	r2, r8
 8005108:	464b      	mov	r3, r9
 800510a:	1891      	adds	r1, r2, r2
 800510c:	6239      	str	r1, [r7, #32]
 800510e:	415b      	adcs	r3, r3
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
 8005112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005116:	4641      	mov	r1, r8
 8005118:	1854      	adds	r4, r2, r1
 800511a:	4649      	mov	r1, r9
 800511c:	eb43 0501 	adc.w	r5, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	00eb      	lsls	r3, r5, #3
 800512a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512e:	00e2      	lsls	r2, r4, #3
 8005130:	4614      	mov	r4, r2
 8005132:	461d      	mov	r5, r3
 8005134:	4643      	mov	r3, r8
 8005136:	18e3      	adds	r3, r4, r3
 8005138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800513c:	464b      	mov	r3, r9
 800513e:	eb45 0303 	adc.w	r3, r5, r3
 8005142:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005162:	4629      	mov	r1, r5
 8005164:	008b      	lsls	r3, r1, #2
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516c:	4621      	mov	r1, r4
 800516e:	008a      	lsls	r2, r1, #2
 8005170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005174:	f7fb f884 	bl	8000280 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4b60      	ldr	r3, [pc, #384]	@ (8005300 <UART_SetConfig+0x4e4>)
 800517e:	fba3 2302 	umull	r2, r3, r3, r2
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	011c      	lsls	r4, r3, #4
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518a:	2200      	movs	r2, #0
 800518c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005190:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	1891      	adds	r1, r2, r2
 800519e:	61b9      	str	r1, [r7, #24]
 80051a0:	415b      	adcs	r3, r3
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a8:	4641      	mov	r1, r8
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6139      	str	r1, [r7, #16]
 80051ae:	4649      	mov	r1, r9
 80051b0:	414b      	adcs	r3, r1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c0:	4659      	mov	r1, fp
 80051c2:	00cb      	lsls	r3, r1, #3
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ca:	4651      	mov	r1, sl
 80051cc:	00ca      	lsls	r2, r1, #3
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	4642      	mov	r2, r8
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051dc:	464b      	mov	r3, r9
 80051de:	460a      	mov	r2, r1
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005200:	4649      	mov	r1, r9
 8005202:	008b      	lsls	r3, r1, #2
 8005204:	4641      	mov	r1, r8
 8005206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520a:	4641      	mov	r1, r8
 800520c:	008a      	lsls	r2, r1, #2
 800520e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005212:	f7fb f835 	bl	8000280 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4611      	mov	r1, r2
 800521c:	4b38      	ldr	r3, [pc, #224]	@ (8005300 <UART_SetConfig+0x4e4>)
 800521e:	fba3 2301 	umull	r2, r3, r3, r1
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2264      	movs	r2, #100	@ 0x64
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	1acb      	subs	r3, r1, r3
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	3332      	adds	r3, #50	@ 0x32
 8005230:	4a33      	ldr	r2, [pc, #204]	@ (8005300 <UART_SetConfig+0x4e4>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800523c:	441c      	add	r4, r3
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005242:	2200      	movs	r2, #0
 8005244:	673b      	str	r3, [r7, #112]	@ 0x70
 8005246:	677a      	str	r2, [r7, #116]	@ 0x74
 8005248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800524c:	4642      	mov	r2, r8
 800524e:	464b      	mov	r3, r9
 8005250:	1891      	adds	r1, r2, r2
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	415b      	adcs	r3, r3
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525c:	4641      	mov	r1, r8
 800525e:	1851      	adds	r1, r2, r1
 8005260:	6039      	str	r1, [r7, #0]
 8005262:	4649      	mov	r1, r9
 8005264:	414b      	adcs	r3, r1
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005274:	4659      	mov	r1, fp
 8005276:	00cb      	lsls	r3, r1, #3
 8005278:	4651      	mov	r1, sl
 800527a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527e:	4651      	mov	r1, sl
 8005280:	00ca      	lsls	r2, r1, #3
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	4603      	mov	r3, r0
 8005288:	4642      	mov	r2, r8
 800528a:	189b      	adds	r3, r3, r2
 800528c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800528e:	464b      	mov	r3, r9
 8005290:	460a      	mov	r2, r1
 8005292:	eb42 0303 	adc.w	r3, r2, r3
 8005296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052b0:	4649      	mov	r1, r9
 80052b2:	008b      	lsls	r3, r1, #2
 80052b4:	4641      	mov	r1, r8
 80052b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ba:	4641      	mov	r1, r8
 80052bc:	008a      	lsls	r2, r1, #2
 80052be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052c2:	f7fa ffdd 	bl	8000280 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <UART_SetConfig+0x4e4>)
 80052cc:	fba3 1302 	umull	r1, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	2164      	movs	r1, #100	@ 0x64
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	3332      	adds	r3, #50	@ 0x32
 80052de:	4a08      	ldr	r2, [pc, #32]	@ (8005300 <UART_SetConfig+0x4e4>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4422      	add	r2, r4
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005300:	51eb851f 	.word	0x51eb851f

08005304 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005304:	b084      	sub	sp, #16
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	f107 001c 	add.w	r0, r7, #28
 8005312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800531a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800531c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800531e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005322:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005326:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800532a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800532e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800533e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	b004      	add	sp, #16
 8005358:	4770      	bx	lr

0800535a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2203      	movs	r2, #3
 80053a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0303 	and.w	r3, r3, #3
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053ec:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80053f2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80053f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005408:	f023 030f 	bic.w	r3, r3, #15
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	b2db      	uxtb	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3314      	adds	r3, #20
 800544a:	461a      	mov	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4413      	add	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
}  
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005488:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800548e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005494:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0

}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b088      	sub	sp, #32
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80054c8:	2310      	movs	r3, #16
 80054ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054cc:	2340      	movs	r3, #64	@ 0x40
 80054ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ff74 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80054e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ea:	2110      	movs	r1, #16
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9d7 	bl	80058a0 <SDMMC_GetCmdResp1>
 80054f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f4:	69fb      	ldr	r3, [r7, #28]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800550c:	2311      	movs	r3, #17
 800550e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005510:	2340      	movs	r3, #64	@ 0x40
 8005512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800551c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff52 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	2111      	movs	r1, #17
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f9b5 	bl	80058a0 <SDMMC_GetCmdResp1>
 8005536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005538:	69fb      	ldr	r3, [r7, #28]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005550:	2312      	movs	r3, #18
 8005552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005554:	2340      	movs	r3, #64	@ 0x40
 8005556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800555c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ff30 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800556e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005572:	2112      	movs	r1, #18
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f993 	bl	80058a0 <SDMMC_GetCmdResp1>
 800557a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b088      	sub	sp, #32
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005594:	2318      	movs	r3, #24
 8005596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005598:	2340      	movs	r3, #64	@ 0x40
 800559a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff0e 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80055b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b6:	2118      	movs	r1, #24
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f971 	bl	80058a0 <SDMMC_GetCmdResp1>
 80055be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c0:	69fb      	ldr	r3, [r7, #28]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b088      	sub	sp, #32
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80055d8:	2319      	movs	r3, #25
 80055da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055dc:	2340      	movs	r3, #64	@ 0x40
 80055de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff feec 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fa:	2119      	movs	r1, #25
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f94f 	bl	80058a0 <SDMMC_GetCmdResp1>
 8005602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005604:	69fb      	ldr	r3, [r7, #28]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3720      	adds	r7, #32
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800561c:	230c      	movs	r3, #12
 800561e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005620:	2340      	movs	r3, #64	@ 0x40
 8005622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800562c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800562e:	f107 0308 	add.w	r3, r7, #8
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff feca 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800563a:	4a05      	ldr	r2, [pc, #20]	@ (8005650 <SDMMC_CmdStopTransfer+0x40>)
 800563c:	210c      	movs	r1, #12
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f92e 	bl	80058a0 <SDMMC_GetCmdResp1>
 8005644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005646:	69fb      	ldr	r3, [r7, #28]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	05f5e100 	.word	0x05f5e100

08005654 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	@ 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005664:	2307      	movs	r3, #7
 8005666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800566c:	2300      	movs	r3, #0
 800566e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005674:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005676:	f107 0310 	add.w	r3, r7, #16
 800567a:	4619      	mov	r1, r3
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff fea6 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005686:	2107      	movs	r1, #7
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f909 	bl	80058a0 <SDMMC_GetCmdResp1>
 800568e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005692:	4618      	mov	r0, r3
 8005694:	3728      	adds	r7, #40	@ 0x28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b088      	sub	sp, #32
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056b8:	f107 0308 	add.w	r3, r7, #8
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fe85 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fb23 	bl	8005d10 <SDMMC_GetCmdError>
 80056ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056cc:	69fb      	ldr	r3, [r7, #28]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b088      	sub	sp, #32
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80056de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80056e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80056e4:	2308      	movs	r3, #8
 80056e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056e8:	2340      	movs	r3, #64	@ 0x40
 80056ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056f6:	f107 0308 	add.w	r3, r7, #8
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fe66 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fab6 	bl	8005c74 <SDMMC_GetCmdResp7>
 8005708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800570a:	69fb      	ldr	r3, [r7, #28]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005722:	2337      	movs	r3, #55	@ 0x37
 8005724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005726:	2340      	movs	r3, #64	@ 0x40
 8005728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800572e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fe47 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005744:	2137      	movs	r1, #55	@ 0x37
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f8aa 	bl	80058a0 <SDMMC_GetCmdResp1>
 800574c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800574e:	69fb      	ldr	r3, [r7, #28]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005768:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800576c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800576e:	2329      	movs	r3, #41	@ 0x29
 8005770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005772:	2340      	movs	r3, #64	@ 0x40
 8005774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800577a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800577e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005780:	f107 0308 	add.w	r3, r7, #8
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fe21 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9bd 	bl	8005b0c <SDMMC_GetCmdResp3>
 8005792:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005794:	69fb      	ldr	r3, [r7, #28]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b088      	sub	sp, #32
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057aa:	2302      	movs	r3, #2
 80057ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057ae:	23c0      	movs	r3, #192	@ 0xc0
 80057b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057bc:	f107 0308 	add.w	r3, r7, #8
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fe03 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f957 	bl	8005a7c <SDMMC_GetCmdResp2>
 80057ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057d0:	69fb      	ldr	r3, [r7, #28]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b088      	sub	sp, #32
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80057e8:	2309      	movs	r3, #9
 80057ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057ec:	23c0      	movs	r3, #192	@ 0xc0
 80057ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fde4 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f938 	bl	8005a7c <SDMMC_GetCmdResp2>
 800580c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800580e:	69fb      	ldr	r3, [r7, #28]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005826:	2303      	movs	r3, #3
 8005828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800582a:	2340      	movs	r3, #64	@ 0x40
 800582c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005836:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005838:	f107 0308 	add.w	r3, r7, #8
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fdc5 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	2103      	movs	r1, #3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f99d 	bl	8005b88 <SDMMC_GetCmdResp6>
 800584e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005850:	69fb      	ldr	r3, [r7, #28]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b088      	sub	sp, #32
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005868:	230d      	movs	r3, #13
 800586a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800586c:	2340      	movs	r3, #64	@ 0x40
 800586e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005878:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800587a:	f107 0308 	add.w	r3, r7, #8
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fda4 	bl	80053ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588a:	210d      	movs	r1, #13
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f807 	bl	80058a0 <SDMMC_GetCmdResp1>
 8005892:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005894:	69fb      	ldr	r3, [r7, #28]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	460b      	mov	r3, r1
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80058ae:	4b70      	ldr	r3, [pc, #448]	@ (8005a70 <SDMMC_GetCmdResp1+0x1d0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a70      	ldr	r2, [pc, #448]	@ (8005a74 <SDMMC_GetCmdResp1+0x1d4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	0a5a      	lsrs	r2, r3, #9
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	1e5a      	subs	r2, r3, #1
 80058c6:	61fa      	str	r2, [r7, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058d0:	e0c9      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ef      	beq.n	80058c2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1ea      	bne.n	80058c2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2204      	movs	r2, #4
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058fe:	2304      	movs	r3, #4
 8005900:	e0b1      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005914:	2301      	movs	r3, #1
 8005916:	e0a6      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	22c5      	movs	r2, #197	@ 0xc5
 800591c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7ff fd7f 	bl	8005422 <SDIO_GetCommandResponse>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	7afb      	ldrb	r3, [r7, #11]
 800592a:	4293      	cmp	r3, r2
 800592c:	d001      	beq.n	8005932 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800592e:	2301      	movs	r3, #1
 8005930:	e099      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005932:	2100      	movs	r1, #0
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7ff fd81 	bl	800543c <SDIO_GetResponse>
 800593a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4b4e      	ldr	r3, [pc, #312]	@ (8005a78 <SDMMC_GetCmdResp1+0x1d8>)
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005946:	2300      	movs	r3, #0
 8005948:	e08d      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	da02      	bge.n	8005956 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005950:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005954:	e087      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005960:	2340      	movs	r3, #64	@ 0x40
 8005962:	e080      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800596e:	2380      	movs	r3, #128	@ 0x80
 8005970:	e079      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800597c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005980:	e071      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800598c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005990:	e069      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800599c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059a0:	e061      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80059ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80059b0:	e059      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80059bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059c0:	e051      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80059cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059d0:	e049      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80059dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80059e0:	e041      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80059ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f0:	e039      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80059fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a00:	e031      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a10:	e029      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a20:	e021      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005a2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005a30:	e019      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005a3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a40:	e011      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005a4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005a50:	e009      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005a5c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005a60:	e001      	b.n	8005a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000000 	.word	0x20000000
 8005a74:	10624dd3 	.word	0x10624dd3
 8005a78:	fdffe008 	.word	0xfdffe008

08005a7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a84:	4b1f      	ldr	r3, [pc, #124]	@ (8005b04 <SDMMC_GetCmdResp2+0x88>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1f      	ldr	r2, [pc, #124]	@ (8005b08 <SDMMC_GetCmdResp2+0x8c>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	0a5b      	lsrs	r3, r3, #9
 8005a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a94:	fb02 f303 	mul.w	r3, r2, r3
 8005a98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1e5a      	subs	r2, r3, #1
 8005a9e:	60fa      	str	r2, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005aa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005aa8:	e026      	b.n	8005af8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ef      	beq.n	8005a9a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ea      	bne.n	8005a9a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	e00e      	b.n	8005af8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e003      	b.n	8005af8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	22c5      	movs	r2, #197	@ 0xc5
 8005af4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000000 	.word	0x20000000
 8005b08:	10624dd3 	.word	0x10624dd3

08005b0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b14:	4b1a      	ldr	r3, [pc, #104]	@ (8005b80 <SDMMC_GetCmdResp3+0x74>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1a      	ldr	r2, [pc, #104]	@ (8005b84 <SDMMC_GetCmdResp3+0x78>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	0a5b      	lsrs	r3, r3, #9
 8005b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
 8005b28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1e5a      	subs	r2, r3, #1
 8005b2e:	60fa      	str	r2, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b38:	e01b      	b.n	8005b72 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0ef      	beq.n	8005b2a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ea      	bne.n	8005b2a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2204      	movs	r2, #4
 8005b64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b66:	2304      	movs	r3, #4
 8005b68:	e003      	b.n	8005b72 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	22c5      	movs	r2, #197	@ 0xc5
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000000 	.word	0x20000000
 8005b84:	10624dd3 	.word	0x10624dd3

08005b88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	460b      	mov	r3, r1
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b96:	4b35      	ldr	r3, [pc, #212]	@ (8005c6c <SDMMC_GetCmdResp6+0xe4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a35      	ldr	r2, [pc, #212]	@ (8005c70 <SDMMC_GetCmdResp6+0xe8>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	0a5b      	lsrs	r3, r3, #9
 8005ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	61fa      	str	r2, [r7, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005bba:	e052      	b.n	8005c62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0ef      	beq.n	8005bac <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1ea      	bne.n	8005bac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2204      	movs	r2, #4
 8005be6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005be8:	2304      	movs	r3, #4
 8005bea:	e03a      	b.n	8005c62 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e02f      	b.n	8005c62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fc0d 	bl	8005422 <SDIO_GetCommandResponse>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	7afb      	ldrb	r3, [r7, #11]
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d001      	beq.n	8005c16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e025      	b.n	8005c62 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	22c5      	movs	r2, #197	@ 0xc5
 8005c1a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff fc0c 	bl	800543c <SDIO_GetResponse>
 8005c24:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e011      	b.n	8005c62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c4c:	e009      	b.n	8005c62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c5c:	e001      	b.n	8005c62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	10624dd3 	.word	0x10624dd3

08005c74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c7c:	4b22      	ldr	r3, [pc, #136]	@ (8005d08 <SDMMC_GetCmdResp7+0x94>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a22      	ldr	r2, [pc, #136]	@ (8005d0c <SDMMC_GetCmdResp7+0x98>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0a5b      	lsrs	r3, r3, #9
 8005c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	60fa      	str	r2, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ca0:	e02c      	b.n	8005cfc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0ef      	beq.n	8005c92 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ea      	bne.n	8005c92 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cce:	2304      	movs	r3, #4
 8005cd0:	e014      	b.n	8005cfc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e009      	b.n	8005cfc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005cfa:	2300      	movs	r3, #0
  
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	10624dd3 	.word	0x10624dd3

08005d10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d18:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <SDMMC_GetCmdError+0x50>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a11      	ldr	r2, [pc, #68]	@ (8005d64 <SDMMC_GetCmdError+0x54>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	0a5b      	lsrs	r3, r3, #9
 8005d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d28:	fb02 f303 	mul.w	r3, r2, r3
 8005d2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	60fa      	str	r2, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d3c:	e009      	b.n	8005d52 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f1      	beq.n	8005d2e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	22c5      	movs	r2, #197	@ 0xc5
 8005d4e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000000 	.word	0x20000000
 8005d64:	10624dd3 	.word	0x10624dd3

08005d68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d6c:	4904      	ldr	r1, [pc, #16]	@ (8005d80 <MX_FATFS_Init+0x18>)
 8005d6e:	4805      	ldr	r0, [pc, #20]	@ (8005d84 <MX_FATFS_Init+0x1c>)
 8005d70:	f002 fc5c 	bl	800862c <FATFS_LinkDriver>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461a      	mov	r2, r3
 8005d78:	4b03      	ldr	r3, [pc, #12]	@ (8005d88 <MX_FATFS_Init+0x20>)
 8005d7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	200002c0 	.word	0x200002c0
 8005d84:	08009078 	.word	0x08009078
 8005d88:	200002bc 	.word	0x200002bc

08005d8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005da6:	f000 f86b 	bl	8005e80 <BSP_SD_IsDetected>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e005      	b.n	8005dc0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005db4:	4804      	ldr	r0, [pc, #16]	@ (8005dc8 <BSP_SD_Init+0x2c>)
 8005db6:	f7fc ffcb 	bl	8002d50 <HAL_SD_Init>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000098 	.word	0x20000098

08005dcc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	68f9      	ldr	r1, [r7, #12]
 8005de8:	4806      	ldr	r0, [pc, #24]	@ (8005e04 <BSP_SD_ReadBlocks+0x38>)
 8005dea:	f7fd f859 	bl	8002ea0 <HAL_SD_ReadBlocks>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000098 	.word	0x20000098

08005e08 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	4806      	ldr	r0, [pc, #24]	@ (8005e40 <BSP_SD_WriteBlocks+0x38>)
 8005e26:	f7fd fa21 	bl	800326c <HAL_SD_WriteBlocks>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000098 	.word	0x20000098

08005e44 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e48:	4805      	ldr	r0, [pc, #20]	@ (8005e60 <BSP_SD_GetCardState+0x1c>)
 8005e4a:	f7fd fd6d 	bl	8003928 <HAL_SD_GetCardState>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	bf14      	ite	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	2300      	moveq	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000098 	.word	0x20000098

08005e64 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4803      	ldr	r0, [pc, #12]	@ (8005e7c <BSP_SD_GetCardInfo+0x18>)
 8005e70:	f7fd fd2e 	bl	80038d0 <HAL_SD_GetCardInfo>
}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000098 	.word	0x20000098

08005e80 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005e86:	2301      	movs	r3, #1
 8005e88:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	b2db      	uxtb	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed4 <SD_CheckStatus+0x38>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005eac:	f7ff ffca 	bl	8005e44 <BSP_SD_GetCardState>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d107      	bne.n	8005ec6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005eb6:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <SD_CheckStatus+0x38>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	4b04      	ldr	r3, [pc, #16]	@ (8005ed4 <SD_CheckStatus+0x38>)
 8005ec4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005ec6:	4b03      	ldr	r3, [pc, #12]	@ (8005ed4 <SD_CheckStatus+0x38>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	b2db      	uxtb	r3, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000009 	.word	0x20000009

08005ed8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <SD_initialize+0x38>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005ee8:	f7ff ff58 	bl	8005d9c <BSP_SD_Init>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ffd1 	bl	8005e9c <SD_CheckStatus>
 8005efa:	4603      	mov	r3, r0
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b04      	ldr	r3, [pc, #16]	@ (8005f10 <SD_initialize+0x38>)
 8005f00:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005f02:	4b03      	ldr	r3, [pc, #12]	@ (8005f10 <SD_initialize+0x38>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000009 	.word	0x20000009

08005f14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff ffbb 	bl	8005e9c <SD_CheckStatus>
 8005f26:	4603      	mov	r3, r0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	68b8      	ldr	r0, [r7, #8]
 8005f4e:	f7ff ff3d 	bl	8005dcc <BSP_SD_ReadBlocks>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d107      	bne.n	8005f68 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005f58:	bf00      	nop
 8005f5a:	f7ff ff73 	bl	8005e44 <BSP_SD_GetCardState>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1fa      	bne.n	8005f5a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b086      	sub	sp, #24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005f86:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	68b8      	ldr	r0, [r7, #8]
 8005f90:	f7ff ff3a 	bl	8005e08 <BSP_SD_WriteBlocks>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005f9a:	bf00      	nop
 8005f9c:	f7ff ff52 	bl	8005e44 <BSP_SD_GetCardState>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1fa      	bne.n	8005f9c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	@ 0x30
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	603a      	str	r2, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005fca:	4b25      	ldr	r3, [pc, #148]	@ (8006060 <SD_ioctl+0xac>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <SD_ioctl+0x28>
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e03c      	b.n	8006056 <SD_ioctl+0xa2>

  switch (cmd)
 8005fdc:	79bb      	ldrb	r3, [r7, #6]
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d834      	bhi.n	800604c <SD_ioctl+0x98>
 8005fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe8 <SD_ioctl+0x34>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	08006001 	.word	0x08006001
 8005ff0:	08006019 	.word	0x08006019
 8005ff4:	08006033 	.word	0x08006033
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005ffe:	e028      	b.n	8006052 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff ff2d 	bl	8005e64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800600a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006016:	e01c      	b.n	8006052 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006018:	f107 030c 	add.w	r3, r7, #12
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff ff21 	bl	8005e64 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	b29a      	uxth	r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006030:	e00f      	b.n	8006052 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006032:	f107 030c 	add.w	r3, r7, #12
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff ff14 	bl	8005e64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	0a5a      	lsrs	r2, r3, #9
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800604a:	e002      	b.n	8006052 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800604c:	2304      	movs	r3, #4
 800604e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006056:	4618      	mov	r0, r3
 8006058:	3730      	adds	r7, #48	@ 0x30
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000009 	.word	0x20000009

08006064 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	4a08      	ldr	r2, [pc, #32]	@ (8006094 <disk_status+0x30>)
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	79fa      	ldrb	r2, [r7, #7]
 800607c:	4905      	ldr	r1, [pc, #20]	@ (8006094 <disk_status+0x30>)
 800607e:	440a      	add	r2, r1
 8006080:	7a12      	ldrb	r2, [r2, #8]
 8006082:	4610      	mov	r0, r2
 8006084:	4798      	blx	r3
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
  return stat;
 800608a:	7bfb      	ldrb	r3, [r7, #15]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	200002ec 	.word	0x200002ec

08006098 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	4a0e      	ldr	r2, [pc, #56]	@ (80060e4 <disk_initialize+0x4c>)
 80060aa:	5cd3      	ldrb	r3, [r2, r3]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d114      	bne.n	80060da <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	4a0c      	ldr	r2, [pc, #48]	@ (80060e4 <disk_initialize+0x4c>)
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	79fa      	ldrb	r2, [r7, #7]
 80060be:	4909      	ldr	r1, [pc, #36]	@ (80060e4 <disk_initialize+0x4c>)
 80060c0:	440a      	add	r2, r1
 80060c2:	7a12      	ldrb	r2, [r2, #8]
 80060c4:	4610      	mov	r0, r2
 80060c6:	4798      	blx	r3
 80060c8:	4603      	mov	r3, r0
 80060ca:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	4a03      	ldr	r2, [pc, #12]	@ (80060e4 <disk_initialize+0x4c>)
 80060d6:	2101      	movs	r1, #1
 80060d8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	200002ec 	.word	0x200002ec

080060e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006124 <disk_read+0x3c>)
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	689c      	ldr	r4, [r3, #8]
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	4a07      	ldr	r2, [pc, #28]	@ (8006124 <disk_read+0x3c>)
 8006108:	4413      	add	r3, r2
 800610a:	7a18      	ldrb	r0, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	47a0      	blx	r4
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]
  return res;
 8006118:	7dfb      	ldrb	r3, [r7, #23]
}
 800611a:	4618      	mov	r0, r3
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd90      	pop	{r4, r7, pc}
 8006122:	bf00      	nop
 8006124:	200002ec 	.word	0x200002ec

08006128 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <disk_write+0x3c>)
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	68dc      	ldr	r4, [r3, #12]
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	4a07      	ldr	r2, [pc, #28]	@ (8006164 <disk_write+0x3c>)
 8006148:	4413      	add	r3, r2
 800614a:	7a18      	ldrb	r0, [r3, #8]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	47a0      	blx	r4
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]
  return res;
 8006158:	7dfb      	ldrb	r3, [r7, #23]
}
 800615a:	4618      	mov	r0, r3
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	bd90      	pop	{r4, r7, pc}
 8006162:	bf00      	nop
 8006164:	200002ec 	.word	0x200002ec

08006168 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	603a      	str	r2, [r7, #0]
 8006172:	71fb      	strb	r3, [r7, #7]
 8006174:	460b      	mov	r3, r1
 8006176:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	4a09      	ldr	r2, [pc, #36]	@ (80061a0 <disk_ioctl+0x38>)
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	79fa      	ldrb	r2, [r7, #7]
 8006186:	4906      	ldr	r1, [pc, #24]	@ (80061a0 <disk_ioctl+0x38>)
 8006188:	440a      	add	r2, r1
 800618a:	7a10      	ldrb	r0, [r2, #8]
 800618c:	79b9      	ldrb	r1, [r7, #6]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	73fb      	strb	r3, [r7, #15]
  return res;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200002ec 	.word	0x200002ec

080061a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3301      	adds	r3, #1
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	b21a      	sxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b21b      	sxth	r3, r3
 80061c0:	4313      	orrs	r3, r2
 80061c2:	b21b      	sxth	r3, r3
 80061c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80061c6:	89fb      	ldrh	r3, [r7, #14]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3303      	adds	r3, #3
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	3202      	adds	r2, #2
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	3201      	adds	r2, #1
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	7812      	ldrb	r2, [r2, #0]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
	return rv;
 800620c:	68fb      	ldr	r3, [r7, #12]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	887a      	ldrh	r2, [r7, #2]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	887b      	ldrh	r3, [r7, #2]
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	0a1b      	lsrs	r3, r3, #8
 800628e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00d      	beq.n	80062de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	1c53      	adds	r3, r2, #1
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	1c59      	adds	r1, r3, #1
 80062cc:	6179      	str	r1, [r7, #20]
 80062ce:	7812      	ldrb	r2, [r2, #0]
 80062d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f1      	bne.n	80062c2 <mem_cpy+0x1a>
	}
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80062ea:	b480      	push	{r7}
 80062ec:	b087      	sub	sp, #28
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	617a      	str	r2, [r7, #20]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3b01      	subs	r3, #1
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f3      	bne.n	80062fa <mem_set+0x10>
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	@ 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	61fa      	str	r2, [r7, #28]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	61ba      	str	r2, [r7, #24]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	1acb      	subs	r3, r1, r3
 800634c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3b01      	subs	r3, #1
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <mem_cmp+0x40>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0eb      	beq.n	8006338 <mem_cmp+0x18>

	return r;
 8006360:	697b      	ldr	r3, [r7, #20]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3724      	adds	r7, #36	@ 0x24
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006378:	e002      	b.n	8006380 <chk_chr+0x12>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3301      	adds	r3, #1
 800637e:	607b      	str	r3, [r7, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <chk_chr+0x26>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	4293      	cmp	r3, r2
 8006392:	d1f2      	bne.n	800637a <chk_chr+0xc>
	return *str;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	781b      	ldrb	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063ae:	2300      	movs	r3, #0
 80063b0:	60bb      	str	r3, [r7, #8]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e029      	b.n	800640c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80063b8:	4a27      	ldr	r2, [pc, #156]	@ (8006458 <chk_lock+0xb4>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	4413      	add	r3, r2
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01d      	beq.n	8006402 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063c6:	4a24      	ldr	r2, [pc, #144]	@ (8006458 <chk_lock+0xb4>)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	4413      	add	r3, r2
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d116      	bne.n	8006406 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80063d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006458 <chk_lock+0xb4>)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	4413      	add	r3, r2
 80063e0:	3304      	adds	r3, #4
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d10c      	bne.n	8006406 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006458 <chk_lock+0xb4>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	4413      	add	r3, r2
 80063f4:	3308      	adds	r3, #8
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d102      	bne.n	8006406 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006400:	e007      	b.n	8006412 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d9d2      	bls.n	80063b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d109      	bne.n	800642c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <chk_lock+0x80>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d101      	bne.n	8006428 <chk_lock+0x84>
 8006424:	2300      	movs	r3, #0
 8006426:	e010      	b.n	800644a <chk_lock+0xa6>
 8006428:	2312      	movs	r3, #18
 800642a:	e00e      	b.n	800644a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d108      	bne.n	8006444 <chk_lock+0xa0>
 8006432:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <chk_lock+0xb4>)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	4413      	add	r3, r2
 800643a:	330c      	adds	r3, #12
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006442:	d101      	bne.n	8006448 <chk_lock+0xa4>
 8006444:	2310      	movs	r3, #16
 8006446:	e000      	b.n	800644a <chk_lock+0xa6>
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	200002cc 	.word	0x200002cc

0800645c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
 8006466:	e002      	b.n	800646e <enq_lock+0x12>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3301      	adds	r3, #1
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d806      	bhi.n	8006482 <enq_lock+0x26>
 8006474:	4a09      	ldr	r2, [pc, #36]	@ (800649c <enq_lock+0x40>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	4413      	add	r3, r2
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f2      	bne.n	8006468 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b02      	cmp	r3, #2
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200002cc 	.word	0x200002cc

080064a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e01f      	b.n	80064f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80064b0:	4a41      	ldr	r2, [pc, #260]	@ (80065b8 <inc_lock+0x118>)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	4413      	add	r3, r2
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d113      	bne.n	80064ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80064c2:	4a3d      	ldr	r2, [pc, #244]	@ (80065b8 <inc_lock+0x118>)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	4413      	add	r3, r2
 80064ca:	3304      	adds	r3, #4
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d109      	bne.n	80064ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80064d6:	4a38      	ldr	r2, [pc, #224]	@ (80065b8 <inc_lock+0x118>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	4413      	add	r3, r2
 80064de:	3308      	adds	r3, #8
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d006      	beq.n	80064f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d9dc      	bls.n	80064b0 <inc_lock+0x10>
 80064f6:	e000      	b.n	80064fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80064f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d132      	bne.n	8006566 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <inc_lock+0x6c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d806      	bhi.n	8006520 <inc_lock+0x80>
 8006512:	4a29      	ldr	r2, [pc, #164]	@ (80065b8 <inc_lock+0x118>)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	4413      	add	r3, r2
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f2      	bne.n	8006506 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d101      	bne.n	800652a <inc_lock+0x8a>
 8006526:	2300      	movs	r3, #0
 8006528:	e040      	b.n	80065ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4922      	ldr	r1, [pc, #136]	@ (80065b8 <inc_lock+0x118>)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	440b      	add	r3, r1
 8006536:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	491e      	ldr	r1, [pc, #120]	@ (80065b8 <inc_lock+0x118>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	440b      	add	r3, r1
 8006544:	3304      	adds	r3, #4
 8006546:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	491a      	ldr	r1, [pc, #104]	@ (80065b8 <inc_lock+0x118>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	440b      	add	r3, r1
 8006554:	3308      	adds	r3, #8
 8006556:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006558:	4a17      	ldr	r2, [pc, #92]	@ (80065b8 <inc_lock+0x118>)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	4413      	add	r3, r2
 8006560:	330c      	adds	r3, #12
 8006562:	2200      	movs	r2, #0
 8006564:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <inc_lock+0xe0>
 800656c:	4a12      	ldr	r2, [pc, #72]	@ (80065b8 <inc_lock+0x118>)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	4413      	add	r3, r2
 8006574:	330c      	adds	r3, #12
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <inc_lock+0xe0>
 800657c:	2300      	movs	r3, #0
 800657e:	e015      	b.n	80065ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d108      	bne.n	8006598 <inc_lock+0xf8>
 8006586:	4a0c      	ldr	r2, [pc, #48]	@ (80065b8 <inc_lock+0x118>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	4413      	add	r3, r2
 800658e:	330c      	adds	r3, #12
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	e001      	b.n	800659c <inc_lock+0xfc>
 8006598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800659c:	4906      	ldr	r1, [pc, #24]	@ (80065b8 <inc_lock+0x118>)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	440b      	add	r3, r1
 80065a4:	330c      	adds	r3, #12
 80065a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	200002cc 	.word	0x200002cc

080065bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d825      	bhi.n	800661c <dec_lock+0x60>
		n = Files[i].ctr;
 80065d0:	4a17      	ldr	r2, [pc, #92]	@ (8006630 <dec_lock+0x74>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	4413      	add	r3, r2
 80065d8:	330c      	adds	r3, #12
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e4:	d101      	bne.n	80065ea <dec_lock+0x2e>
 80065e6:	2300      	movs	r3, #0
 80065e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80065ea:	89fb      	ldrh	r3, [r7, #14]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <dec_lock+0x3a>
 80065f0:	89fb      	ldrh	r3, [r7, #14]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80065f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006630 <dec_lock+0x74>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	4413      	add	r3, r2
 80065fe:	330c      	adds	r3, #12
 8006600:	89fa      	ldrh	r2, [r7, #14]
 8006602:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006604:	89fb      	ldrh	r3, [r7, #14]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <dec_lock+0x5a>
 800660a:	4a09      	ldr	r2, [pc, #36]	@ (8006630 <dec_lock+0x74>)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	4413      	add	r3, r2
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	737b      	strb	r3, [r7, #13]
 800661a:	e001      	b.n	8006620 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800661c:	2302      	movs	r3, #2
 800661e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006620:	7b7b      	ldrb	r3, [r7, #13]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	200002cc 	.word	0x200002cc

08006634 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e010      	b.n	8006664 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006642:	4a0d      	ldr	r2, [pc, #52]	@ (8006678 <clear_lock+0x44>)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	4413      	add	r3, r2
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	d105      	bne.n	800665e <clear_lock+0x2a>
 8006652:	4a09      	ldr	r2, [pc, #36]	@ (8006678 <clear_lock+0x44>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	4413      	add	r3, r2
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d9eb      	bls.n	8006642 <clear_lock+0xe>
	}
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	200002cc 	.word	0x200002cc

0800667c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	78db      	ldrb	r3, [r3, #3]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d034      	beq.n	80066fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7858      	ldrb	r0, [r3, #1]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066a0:	2301      	movs	r3, #1
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	f7ff fd40 	bl	8006128 <disk_write>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
 80066b2:	e022      	b.n	80066fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d217      	bcs.n	80066fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	789b      	ldrb	r3, [r3, #2]
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	e010      	b.n	80066f4 <sync_window+0x78>
					wsect += fs->fsize;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7858      	ldrb	r0, [r3, #1]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066e6:	2301      	movs	r3, #1
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	f7ff fd1d 	bl	8006128 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d8eb      	bhi.n	80066d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d01b      	beq.n	8006754 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff ffad 	bl	800667c <sync_window>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d113      	bne.n	8006754 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7858      	ldrb	r0, [r3, #1]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006736:	2301      	movs	r3, #1
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	f7ff fcd5 	bl	80060e8 <disk_read>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006744:	f04f 33ff 	mov.w	r3, #4294967295
 8006748:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800674a:	2301      	movs	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff ff87 	bl	800667c <sync_window>
 800676e:	4603      	mov	r3, r0
 8006770:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d158      	bne.n	800682a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d148      	bne.n	8006812 <sync_fs+0xb2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d144      	bne.n	8006812 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3330      	adds	r3, #48	@ 0x30
 800678c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fda9 	bl	80062ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3330      	adds	r3, #48	@ 0x30
 800679c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80067a0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fd38 	bl	800621a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3330      	adds	r3, #48	@ 0x30
 80067ae:	4921      	ldr	r1, [pc, #132]	@ (8006834 <sync_fs+0xd4>)
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fd4d 	bl	8006250 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3330      	adds	r3, #48	@ 0x30
 80067ba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80067be:	491e      	ldr	r1, [pc, #120]	@ (8006838 <sync_fs+0xd8>)
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fd45 	bl	8006250 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3330      	adds	r3, #48	@ 0x30
 80067ca:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f7ff fd3b 	bl	8006250 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3330      	adds	r3, #48	@ 0x30
 80067de:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7ff fd31 	bl	8006250 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7858      	ldrb	r0, [r3, #1]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	2301      	movs	r3, #1
 8006808:	f7ff fc8e 	bl	8006128 <disk_write>
			fs->fsi_flag = 0;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	2200      	movs	r2, #0
 8006818:	2100      	movs	r1, #0
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fca4 	bl	8006168 <disk_ioctl>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <sync_fs+0xca>
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	41615252 	.word	0x41615252
 8006838:	61417272 	.word	0x61417272

0800683c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	3b02      	subs	r3, #2
 800684a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	3b02      	subs	r3, #2
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d301      	bcc.n	800685c <clust2sect+0x20>
 8006858:	2300      	movs	r3, #0
 800685a:	e008      	b.n	800686e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	895b      	ldrh	r3, [r3, #10]
 8006860:	461a      	mov	r2, r3
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	fb03 f202 	mul.w	r2, r3, r2
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	4413      	add	r3, r2
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d904      	bls.n	800689a <get_fat+0x20>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d302      	bcc.n	80068a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800689a:	2301      	movs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e08e      	b.n	80069be <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80068a0:	f04f 33ff 	mov.w	r3, #4294967295
 80068a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d061      	beq.n	8006972 <get_fat+0xf8>
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	dc7b      	bgt.n	80069aa <get_fat+0x130>
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d002      	beq.n	80068bc <get_fat+0x42>
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d041      	beq.n	800693e <get_fat+0xc4>
 80068ba:	e076      	b.n	80069aa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	0a5b      	lsrs	r3, r3, #9
 80068d2:	4413      	add	r3, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	6938      	ldr	r0, [r7, #16]
 80068d8:	f7ff ff14 	bl	8006704 <move_window>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d166      	bne.n	80069b0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	60fa      	str	r2, [r7, #12]
 80068e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4413      	add	r3, r2
 80068f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6a1a      	ldr	r2, [r3, #32]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	0a5b      	lsrs	r3, r3, #9
 80068fe:	4413      	add	r3, r2
 8006900:	4619      	mov	r1, r3
 8006902:	6938      	ldr	r0, [r7, #16]
 8006904:	f7ff fefe 	bl	8006704 <move_window>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d152      	bne.n	80069b4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	4313      	orrs	r3, r2
 8006922:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <get_fat+0xba>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	e002      	b.n	800693a <get_fat+0xc0>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693a:	617b      	str	r3, [r7, #20]
			break;
 800693c:	e03f      	b.n	80069be <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6a1a      	ldr	r2, [r3, #32]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	4413      	add	r3, r2
 8006948:	4619      	mov	r1, r3
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f7ff feda 	bl	8006704 <move_window>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d130      	bne.n	80069b8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006964:	4413      	add	r3, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fc1c 	bl	80061a4 <ld_word>
 800696c:	4603      	mov	r3, r0
 800696e:	617b      	str	r3, [r7, #20]
			break;
 8006970:	e025      	b.n	80069be <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	09db      	lsrs	r3, r3, #7
 800697a:	4413      	add	r3, r2
 800697c:	4619      	mov	r1, r3
 800697e:	6938      	ldr	r0, [r7, #16]
 8006980:	f7ff fec0 	bl	8006704 <move_window>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d118      	bne.n	80069bc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006998:	4413      	add	r3, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fc1a 	bl	80061d4 <ld_dword>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069a6:	617b      	str	r3, [r7, #20]
			break;
 80069a8:	e009      	b.n	80069be <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e006      	b.n	80069be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069b0:	bf00      	nop
 80069b2:	e004      	b.n	80069be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069b4:	bf00      	nop
 80069b6:	e002      	b.n	80069be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069bc:	bf00      	nop
		}
	}

	return val;
 80069be:	697b      	ldr	r3, [r7, #20]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80069c8:	b590      	push	{r4, r7, lr}
 80069ca:	b089      	sub	sp, #36	@ 0x24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80069d4:	2302      	movs	r3, #2
 80069d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	f240 80d9 	bls.w	8006b92 <put_fat+0x1ca>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	f080 80d3 	bcs.w	8006b92 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	f000 8096 	beq.w	8006b22 <put_fat+0x15a>
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	f300 80cb 	bgt.w	8006b92 <put_fat+0x1ca>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d002      	beq.n	8006a06 <put_fat+0x3e>
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d06e      	beq.n	8006ae2 <put_fat+0x11a>
 8006a04:	e0c5      	b.n	8006b92 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4413      	add	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1a      	ldr	r2, [r3, #32]
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	0a5b      	lsrs	r3, r3, #9
 8006a1c:	4413      	add	r3, r2
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff fe6f 	bl	8006704 <move_window>
 8006a26:	4603      	mov	r3, r0
 8006a28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a2a:	7ffb      	ldrb	r3, [r7, #31]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 80a9 	bne.w	8006b84 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	61b9      	str	r1, [r7, #24]
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	4413      	add	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00d      	beq.n	8006a6c <put_fat+0xa4>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	b25a      	sxtb	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b25b      	sxtb	r3, r3
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	e001      	b.n	8006a70 <put_fat+0xa8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1a      	ldr	r2, [r3, #32]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	0a5b      	lsrs	r3, r3, #9
 8006a82:	4413      	add	r3, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff fe3c 	bl	8006704 <move_window>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a90:	7ffb      	ldrb	r3, [r7, #31]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d178      	bne.n	8006b88 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	4413      	add	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <put_fat+0xf0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	091b      	lsrs	r3, r3, #4
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	e00e      	b.n	8006ad6 <put_fat+0x10e>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	f023 030f 	bic.w	r3, r3, #15
 8006ac2:	b25a      	sxtb	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	b25b      	sxtb	r3, r3
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	70da      	strb	r2, [r3, #3]
			break;
 8006ae0:	e057      	b.n	8006b92 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	0a1b      	lsrs	r3, r3, #8
 8006aea:	4413      	add	r3, r2
 8006aec:	4619      	mov	r1, r3
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff fe08 	bl	8006704 <move_window>
 8006af4:	4603      	mov	r3, r0
 8006af6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006af8:	7ffb      	ldrb	r3, [r7, #31]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d146      	bne.n	8006b8c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006b0c:	4413      	add	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	b292      	uxth	r2, r2
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff fb80 	bl	800621a <st_word>
			fs->wflag = 1;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	70da      	strb	r2, [r3, #3]
			break;
 8006b20:	e037      	b.n	8006b92 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1a      	ldr	r2, [r3, #32]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	09db      	lsrs	r3, r3, #7
 8006b2a:	4413      	add	r3, r2
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff fde8 	bl	8006704 <move_window>
 8006b34:	4603      	mov	r3, r0
 8006b36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b38:	7ffb      	ldrb	r3, [r7, #31]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d128      	bne.n	8006b90 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006b52:	4413      	add	r3, r2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fb3d 	bl	80061d4 <ld_dword>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006b60:	4323      	orrs	r3, r4
 8006b62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006b72:	4413      	add	r3, r2
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fb6a 	bl	8006250 <st_dword>
			fs->wflag = 1;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	70da      	strb	r2, [r3, #3]
			break;
 8006b82:	e006      	b.n	8006b92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b84:	bf00      	nop
 8006b86:	e004      	b.n	8006b92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b88:	bf00      	nop
 8006b8a:	e002      	b.n	8006b92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b8c:	bf00      	nop
 8006b8e:	e000      	b.n	8006b92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b90:	bf00      	nop
		}
	}
	return res;
 8006b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3724      	adds	r7, #36	@ 0x24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd90      	pop	{r4, r7, pc}

08006b9c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d904      	bls.n	8006bc2 <remove_chain+0x26>
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d301      	bcc.n	8006bc6 <remove_chain+0x2a>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e04b      	b.n	8006c5e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00c      	beq.n	8006be6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	69b8      	ldr	r0, [r7, #24]
 8006bd4:	f7ff fef8 	bl	80069c8 <put_fat>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006bdc:	7ffb      	ldrb	r3, [r7, #31]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <remove_chain+0x4a>
 8006be2:	7ffb      	ldrb	r3, [r7, #31]
 8006be4:	e03b      	b.n	8006c5e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fe46 	bl	800687a <get_fat>
 8006bee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d031      	beq.n	8006c5a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <remove_chain+0x64>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e02e      	b.n	8006c5e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d101      	bne.n	8006c0c <remove_chain+0x70>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e028      	b.n	8006c5e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	69b8      	ldr	r0, [r7, #24]
 8006c12:	f7ff fed9 	bl	80069c8 <put_fat>
 8006c16:	4603      	mov	r3, r0
 8006c18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006c1a:	7ffb      	ldrb	r3, [r7, #31]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <remove_chain+0x88>
 8006c20:	7ffb      	ldrb	r3, [r7, #31]
 8006c22:	e01c      	b.n	8006c5e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	691a      	ldr	r2, [r3, #16]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	3b02      	subs	r3, #2
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d20b      	bcs.n	8006c4a <remove_chain+0xae>
			fs->free_clst++;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	791b      	ldrb	r3, [r3, #4]
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d3c6      	bcc.n	8006be6 <remove_chain+0x4a>
 8006c58:	e000      	b.n	8006c5c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006c5a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b088      	sub	sp, #32
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10d      	bne.n	8006c98 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <create_chain+0x2c>
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d31b      	bcc.n	8006cca <create_chain+0x64>
 8006c92:	2301      	movs	r3, #1
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e018      	b.n	8006cca <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fded 	bl	800687a <get_fat>
 8006ca0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d801      	bhi.n	8006cac <create_chain+0x46>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e070      	b.n	8006d8e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d101      	bne.n	8006cb8 <create_chain+0x52>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	e06a      	b.n	8006d8e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d201      	bcs.n	8006cc6 <create_chain+0x60>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	e063      	b.n	8006d8e <create_chain+0x128>
		scl = clst;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d307      	bcc.n	8006cee <create_chain+0x88>
				ncl = 2;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d901      	bls.n	8006cee <create_chain+0x88>
 8006cea:	2300      	movs	r3, #0
 8006cec:	e04f      	b.n	8006d8e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006cee:	69f9      	ldr	r1, [r7, #28]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff fdc2 	bl	800687a <get_fat>
 8006cf6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d003      	beq.n	8006d0c <create_chain+0xa6>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0a:	d101      	bne.n	8006d10 <create_chain+0xaa>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	e03e      	b.n	8006d8e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d1da      	bne.n	8006cce <create_chain+0x68>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e038      	b.n	8006d8e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006d1c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d22:	69f9      	ldr	r1, [r7, #28]
 8006d24:	6938      	ldr	r0, [r7, #16]
 8006d26:	f7ff fe4f 	bl	80069c8 <put_fat>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <create_chain+0xe2>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d006      	beq.n	8006d48 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6938      	ldr	r0, [r7, #16]
 8006d40:	f7ff fe42 	bl	80069c8 <put_fat>
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d116      	bne.n	8006d7c <create_chain+0x116>
		fs->last_clst = ncl;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	3b02      	subs	r3, #2
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d804      	bhi.n	8006d6c <create_chain+0x106>
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	1e5a      	subs	r2, r3, #1
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	791b      	ldrb	r3, [r3, #4]
 8006d70:	f043 0301 	orr.w	r3, r3, #1
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	711a      	strb	r2, [r3, #4]
 8006d7a:	e007      	b.n	8006d8c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d102      	bne.n	8006d88 <create_chain+0x122>
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	e000      	b.n	8006d8a <create_chain+0x124>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006daa:	3304      	adds	r3, #4
 8006dac:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	0a5b      	lsrs	r3, r3, #9
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	8952      	ldrh	r2, [r2, #10]
 8006db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1d1a      	adds	r2, r3, #4
 8006dc0:	613a      	str	r2, [r7, #16]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <clmt_clust+0x3a>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e010      	b.n	8006df2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d307      	bcc.n	8006de8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	3304      	adds	r3, #4
 8006de4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006de6:	e7e9      	b.n	8006dbc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006de8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	4413      	add	r3, r2
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e14:	d204      	bcs.n	8006e20 <dir_sdi+0x22>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006e20:	2302      	movs	r3, #2
 8006e22:	e063      	b.n	8006eec <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <dir_sdi+0x46>
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d902      	bls.n	8006e44 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e42:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10c      	bne.n	8006e64 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	8912      	ldrh	r2, [r2, #8]
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d301      	bcc.n	8006e5a <dir_sdi+0x5c>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e048      	b.n	8006eec <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	61da      	str	r2, [r3, #28]
 8006e62:	e029      	b.n	8006eb8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	895b      	ldrh	r3, [r3, #10]
 8006e68:	025b      	lsls	r3, r3, #9
 8006e6a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e6c:	e019      	b.n	8006ea2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6979      	ldr	r1, [r7, #20]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fd01 	bl	800687a <get_fat>
 8006e78:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e80:	d101      	bne.n	8006e86 <dir_sdi+0x88>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e032      	b.n	8006eec <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d904      	bls.n	8006e96 <dir_sdi+0x98>
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d301      	bcc.n	8006e9a <dir_sdi+0x9c>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e028      	b.n	8006eec <dir_sdi+0xee>
			ofs -= csz;
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d2e1      	bcs.n	8006e6e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006eaa:	6979      	ldr	r1, [r7, #20]
 8006eac:	6938      	ldr	r0, [r7, #16]
 8006eae:	f7ff fcc5 	bl	800683c <clust2sect>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <dir_sdi+0xcc>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e010      	b.n	8006eec <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	0a5b      	lsrs	r3, r3, #9
 8006ed2:	441a      	add	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee4:	441a      	add	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	3320      	adds	r3, #32
 8006f0a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <dir_next+0x28>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f1a:	d301      	bcc.n	8006f20 <dir_next+0x2c>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	e0aa      	b.n	8007076 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f040 8098 	bne.w	800705c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	8912      	ldrh	r2, [r2, #8]
 8006f46:	4293      	cmp	r3, r2
 8006f48:	f0c0 8088 	bcc.w	800705c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	61da      	str	r2, [r3, #28]
 8006f52:	2304      	movs	r3, #4
 8006f54:	e08f      	b.n	8007076 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	0a5b      	lsrs	r3, r3, #9
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	8952      	ldrh	r2, [r2, #10]
 8006f5e:	3a01      	subs	r2, #1
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d17a      	bne.n	800705c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7ff fc83 	bl	800687a <get_fat>
 8006f74:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d801      	bhi.n	8006f80 <dir_next+0x8c>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e07a      	b.n	8007076 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f86:	d101      	bne.n	8006f8c <dir_next+0x98>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e074      	b.n	8007076 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d358      	bcc.n	8007048 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	61da      	str	r2, [r3, #28]
 8006fa2:	2304      	movs	r3, #4
 8006fa4:	e067      	b.n	8007076 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7ff fe59 	bl	8006c66 <create_chain>
 8006fb4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <dir_next+0xcc>
 8006fbc:	2307      	movs	r3, #7
 8006fbe:	e05a      	b.n	8007076 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <dir_next+0xd6>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e055      	b.n	8007076 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d101      	bne.n	8006fd6 <dir_next+0xe2>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e04f      	b.n	8007076 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff fb50 	bl	800667c <sync_window>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <dir_next+0xf2>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e047      	b.n	8007076 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3330      	adds	r3, #48	@ 0x30
 8006fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff f97a 	bl	80062ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	6979      	ldr	r1, [r7, #20]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fc1d 	bl	800683c <clust2sect>
 8007002:	4602      	mov	r2, r0
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007008:	e012      	b.n	8007030 <dir_next+0x13c>
						fs->wflag = 1;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fb33 	bl	800667c <sync_window>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <dir_next+0x12c>
 800701c:	2301      	movs	r3, #1
 800701e:	e02a      	b.n	8007076 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3301      	adds	r3, #1
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	895b      	ldrh	r3, [r3, #10]
 8007034:	461a      	mov	r2, r3
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4293      	cmp	r3, r2
 800703a:	d3e6      	bcc.n	800700a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800704e:	6979      	ldr	r1, [r7, #20]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f7ff fbf3 	bl	800683c <clust2sect>
 8007056:	4602      	mov	r2, r0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff feb4 	bl	8006dfe <dir_sdi>
 8007096:	4603      	mov	r3, r0
 8007098:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d12b      	bne.n	80070f8 <dir_alloc+0x7a>
		n = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4619      	mov	r1, r3
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff fb2a 	bl	8006704 <move_window>
 80070b0:	4603      	mov	r3, r0
 80070b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d11d      	bne.n	80070f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2be5      	cmp	r3, #229	@ 0xe5
 80070c2:	d004      	beq.n	80070ce <dir_alloc+0x50>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d107      	bne.n	80070de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	3301      	adds	r3, #1
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d102      	bne.n	80070e2 <dir_alloc+0x64>
 80070dc:	e00c      	b.n	80070f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80070e2:	2101      	movs	r1, #1
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff05 	bl	8006ef4 <dir_next>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0d7      	beq.n	80070a4 <dir_alloc+0x26>
 80070f4:	e000      	b.n	80070f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80070f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d101      	bne.n	8007102 <dir_alloc+0x84>
 80070fe:	2307      	movs	r3, #7
 8007100:	75fb      	strb	r3, [r7, #23]
	return res;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	331a      	adds	r3, #26
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff f842 	bl	80061a4 <ld_word>
 8007120:	4603      	mov	r3, r0
 8007122:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b03      	cmp	r3, #3
 800712a:	d109      	bne.n	8007140 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff f837 	bl	80061a4 <ld_word>
 8007136:	4603      	mov	r3, r0
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007140:	68fb      	ldr	r3, [r7, #12]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	331a      	adds	r3, #26
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	b292      	uxth	r2, r2
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff f85a 	bl	800621a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d109      	bne.n	8007182 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f103 0214 	add.w	r2, r3, #20
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	0c1b      	lsrs	r3, r3, #16
 8007178:	b29b      	uxth	r3, r3
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7ff f84c 	bl	800621a <st_word>
	}
}
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007198:	2100      	movs	r1, #0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fe2f 	bl	8006dfe <dir_sdi>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <dir_find+0x24>
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	e03e      	b.n	800722c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6938      	ldr	r0, [r7, #16]
 80071b6:	f7ff faa5 	bl	8006704 <move_window>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d12f      	bne.n	8007224 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <dir_find+0x4e>
 80071d2:	2304      	movs	r3, #4
 80071d4:	75fb      	strb	r3, [r7, #23]
 80071d6:	e028      	b.n	800722a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	330b      	adds	r3, #11
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	330b      	adds	r3, #11
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <dir_find+0x86>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a18      	ldr	r0, [r3, #32]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3324      	adds	r3, #36	@ 0x24
 8007202:	220b      	movs	r2, #11
 8007204:	4619      	mov	r1, r3
 8007206:	f7ff f88b 	bl	8006320 <mem_cmp>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007210:	2100      	movs	r1, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fe6e 	bl	8006ef4 <dir_next>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0c5      	beq.n	80071ae <dir_find+0x24>
 8007222:	e002      	b.n	800722a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007228:	bf00      	nop

	return res;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007242:	2101      	movs	r1, #1
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff1a 	bl	800707e <dir_alloc>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11c      	bne.n	800728e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	4619      	mov	r1, r3
 800725a:	68b8      	ldr	r0, [r7, #8]
 800725c:	f7ff fa52 	bl	8006704 <move_window>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d111      	bne.n	800728e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	2220      	movs	r2, #32
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff f839 	bl	80062ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a18      	ldr	r0, [r3, #32]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3324      	adds	r3, #36	@ 0x24
 8007280:	220b      	movs	r2, #11
 8007282:	4619      	mov	r1, r3
 8007284:	f7ff f810 	bl	80062a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2201      	movs	r2, #1
 800728c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3324      	adds	r3, #36	@ 0x24
 80072ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80072ae:	220b      	movs	r2, #11
 80072b0:	2120      	movs	r1, #32
 80072b2:	68b8      	ldr	r0, [r7, #8]
 80072b4:	f7ff f819 	bl	80062ea <mem_set>
	si = i = 0; ni = 8;
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	2308      	movs	r3, #8
 80072c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	61fa      	str	r2, [r7, #28]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80072d2:	7efb      	ldrb	r3, [r7, #27]
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d94e      	bls.n	8007376 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80072d8:	7efb      	ldrb	r3, [r7, #27]
 80072da:	2b2f      	cmp	r3, #47	@ 0x2f
 80072dc:	d006      	beq.n	80072ec <create_name+0x54>
 80072de:	7efb      	ldrb	r3, [r7, #27]
 80072e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80072e2:	d110      	bne.n	8007306 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80072e4:	e002      	b.n	80072ec <create_name+0x54>
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80072f6:	d0f6      	beq.n	80072e6 <create_name+0x4e>
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	4413      	add	r3, r2
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b5c      	cmp	r3, #92	@ 0x5c
 8007302:	d0f0      	beq.n	80072e6 <create_name+0x4e>
			break;
 8007304:	e038      	b.n	8007378 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007306:	7efb      	ldrb	r3, [r7, #27]
 8007308:	2b2e      	cmp	r3, #46	@ 0x2e
 800730a:	d003      	beq.n	8007314 <create_name+0x7c>
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	429a      	cmp	r2, r3
 8007312:	d30c      	bcc.n	800732e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b0b      	cmp	r3, #11
 8007318:	d002      	beq.n	8007320 <create_name+0x88>
 800731a:	7efb      	ldrb	r3, [r7, #27]
 800731c:	2b2e      	cmp	r3, #46	@ 0x2e
 800731e:	d001      	beq.n	8007324 <create_name+0x8c>
 8007320:	2306      	movs	r3, #6
 8007322:	e044      	b.n	80073ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007324:	2308      	movs	r3, #8
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	230b      	movs	r3, #11
 800732a:	617b      	str	r3, [r7, #20]
			continue;
 800732c:	e022      	b.n	8007374 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800732e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007332:	2b00      	cmp	r3, #0
 8007334:	da04      	bge.n	8007340 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007336:	7efb      	ldrb	r3, [r7, #27]
 8007338:	3b80      	subs	r3, #128	@ 0x80
 800733a:	4a1f      	ldr	r2, [pc, #124]	@ (80073b8 <create_name+0x120>)
 800733c:	5cd3      	ldrb	r3, [r2, r3]
 800733e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007340:	7efb      	ldrb	r3, [r7, #27]
 8007342:	4619      	mov	r1, r3
 8007344:	481d      	ldr	r0, [pc, #116]	@ (80073bc <create_name+0x124>)
 8007346:	f7ff f812 	bl	800636e <chk_chr>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <create_name+0xbc>
 8007350:	2306      	movs	r3, #6
 8007352:	e02c      	b.n	80073ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007354:	7efb      	ldrb	r3, [r7, #27]
 8007356:	2b60      	cmp	r3, #96	@ 0x60
 8007358:	d905      	bls.n	8007366 <create_name+0xce>
 800735a:	7efb      	ldrb	r3, [r7, #27]
 800735c:	2b7a      	cmp	r3, #122	@ 0x7a
 800735e:	d802      	bhi.n	8007366 <create_name+0xce>
 8007360:	7efb      	ldrb	r3, [r7, #27]
 8007362:	3b20      	subs	r3, #32
 8007364:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	613a      	str	r2, [r7, #16]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	4413      	add	r3, r2
 8007370:	7efa      	ldrb	r2, [r7, #27]
 8007372:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007374:	e7a6      	b.n	80072c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007376:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	441a      	add	r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <create_name+0xf4>
 8007388:	2306      	movs	r3, #6
 800738a:	e010      	b.n	80073ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2be5      	cmp	r3, #229	@ 0xe5
 8007392:	d102      	bne.n	800739a <create_name+0x102>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2205      	movs	r2, #5
 8007398:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800739a:	7efb      	ldrb	r3, [r7, #27]
 800739c:	2b20      	cmp	r3, #32
 800739e:	d801      	bhi.n	80073a4 <create_name+0x10c>
 80073a0:	2204      	movs	r2, #4
 80073a2:	e000      	b.n	80073a6 <create_name+0x10e>
 80073a4:	2200      	movs	r2, #0
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	330b      	adds	r3, #11
 80073aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80073ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	0800908c 	.word	0x0800908c
 80073bc:	0800901c 	.word	0x0800901c

080073c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80073d4:	e002      	b.n	80073dc <follow_path+0x1c>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	3301      	adds	r3, #1
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80073e2:	d0f8      	beq.n	80073d6 <follow_path+0x16>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80073ea:	d0f4      	beq.n	80073d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b1f      	cmp	r3, #31
 80073f8:	d80a      	bhi.n	8007410 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2280      	movs	r2, #128	@ 0x80
 80073fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007402:	2100      	movs	r1, #0
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff fcfa 	bl	8006dfe <dir_sdi>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]
 800740e:	e043      	b.n	8007498 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007410:	463b      	mov	r3, r7
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff ff3f 	bl	8007298 <create_name>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d134      	bne.n	800748e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff feb0 	bl	800718a <dir_find>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007434:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b04      	cmp	r3, #4
 8007440:	d127      	bne.n	8007492 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d122      	bne.n	8007492 <follow_path+0xd2>
 800744c:	2305      	movs	r3, #5
 800744e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007450:	e01f      	b.n	8007492 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11c      	bne.n	8007496 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	799b      	ldrb	r3, [r3, #6]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007468:	2305      	movs	r3, #5
 800746a:	75fb      	strb	r3, [r7, #23]
 800746c:	e014      	b.n	8007498 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747c:	4413      	add	r3, r2
 800747e:	4619      	mov	r1, r3
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fe43 	bl	800710c <ld_clust>
 8007486:	4602      	mov	r2, r0
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800748c:	e7c0      	b.n	8007410 <follow_path+0x50>
			if (res != FR_OK) break;
 800748e:	bf00      	nop
 8007490:	e002      	b.n	8007498 <follow_path+0xd8>
				break;
 8007492:	bf00      	nop
 8007494:	e000      	b.n	8007498 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007496:	bf00      	nop
			}
		}
	}

	return res;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b087      	sub	sp, #28
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d031      	beq.n	800751c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e002      	b.n	80074c6 <get_ldnumber+0x24>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	3301      	adds	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d903      	bls.n	80074d6 <get_ldnumber+0x34>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80074d4:	d1f4      	bne.n	80074c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b3a      	cmp	r3, #58	@ 0x3a
 80074dc:	d11c      	bne.n	8007518 <get_ldnumber+0x76>
			tp = *path;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	60fa      	str	r2, [r7, #12]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	3b30      	subs	r3, #48	@ 0x30
 80074ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b09      	cmp	r3, #9
 80074f4:	d80e      	bhi.n	8007514 <get_ldnumber+0x72>
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d10a      	bne.n	8007514 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d107      	bne.n	8007514 <get_ldnumber+0x72>
					vol = (int)i;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3301      	adds	r3, #1
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	e002      	b.n	800751e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800751c:	693b      	ldr	r3, [r7, #16]
}
 800751e:	4618      	mov	r0, r3
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
	...

0800752c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	70da      	strb	r2, [r3, #3]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f04f 32ff 	mov.w	r2, #4294967295
 8007542:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff f8dc 	bl	8006704 <move_window>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <check_fs+0x2a>
 8007552:	2304      	movs	r3, #4
 8007554:	e038      	b.n	80075c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3330      	adds	r3, #48	@ 0x30
 800755a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fe20 	bl	80061a4 <ld_word>
 8007564:	4603      	mov	r3, r0
 8007566:	461a      	mov	r2, r3
 8007568:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800756c:	429a      	cmp	r2, r3
 800756e:	d001      	beq.n	8007574 <check_fs+0x48>
 8007570:	2303      	movs	r3, #3
 8007572:	e029      	b.n	80075c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800757a:	2be9      	cmp	r3, #233	@ 0xe9
 800757c:	d009      	beq.n	8007592 <check_fs+0x66>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007584:	2beb      	cmp	r3, #235	@ 0xeb
 8007586:	d11e      	bne.n	80075c6 <check_fs+0x9a>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800758e:	2b90      	cmp	r3, #144	@ 0x90
 8007590:	d119      	bne.n	80075c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3330      	adds	r3, #48	@ 0x30
 8007596:	3336      	adds	r3, #54	@ 0x36
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fe1b 	bl	80061d4 <ld_dword>
 800759e:	4603      	mov	r3, r0
 80075a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80075a4:	4a0a      	ldr	r2, [pc, #40]	@ (80075d0 <check_fs+0xa4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d101      	bne.n	80075ae <check_fs+0x82>
 80075aa:	2300      	movs	r3, #0
 80075ac:	e00c      	b.n	80075c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3330      	adds	r3, #48	@ 0x30
 80075b2:	3352      	adds	r3, #82	@ 0x52
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fe0d 	bl	80061d4 <ld_dword>
 80075ba:	4603      	mov	r3, r0
 80075bc:	4a05      	ldr	r2, [pc, #20]	@ (80075d4 <check_fs+0xa8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d101      	bne.n	80075c6 <check_fs+0x9a>
 80075c2:	2300      	movs	r3, #0
 80075c4:	e000      	b.n	80075c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80075c6:	2302      	movs	r3, #2
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	00544146 	.word	0x00544146
 80075d4:	33544146 	.word	0x33544146

080075d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b096      	sub	sp, #88	@ 0x58
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7ff ff58 	bl	80074a2 <get_ldnumber>
 80075f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80075f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da01      	bge.n	80075fe <find_volume+0x26>
 80075fa:	230b      	movs	r3, #11
 80075fc:	e22d      	b.n	8007a5a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80075fe:	4aa1      	ldr	r2, [pc, #644]	@ (8007884 <find_volume+0x2ac>)
 8007600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007606:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <find_volume+0x3a>
 800760e:	230c      	movs	r3, #12
 8007610:	e223      	b.n	8007a5a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007616:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01a      	beq.n	800765e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe fd19 	bl	8006064 <disk_status>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007638:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <find_volume+0x82>
 800764a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007656:	230a      	movs	r3, #10
 8007658:	e1ff      	b.n	8007a5a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800765a:	2300      	movs	r3, #0
 800765c:	e1fd      	b.n	8007a5a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800765e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007666:	b2da      	uxtb	r2, r3
 8007668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fd11 	bl	8006098 <disk_initialize>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800767c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007688:	2303      	movs	r3, #3
 800768a:	e1e6      	b.n	8007a5a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d007      	beq.n	80076a2 <find_volume+0xca>
 8007692:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800769e:	230a      	movs	r3, #10
 80076a0:	e1db      	b.n	8007a5a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80076a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076aa:	f7ff ff3f 	bl	800752c <check_fs>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80076b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d149      	bne.n	8007750 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076bc:	2300      	movs	r3, #0
 80076be:	643b      	str	r3, [r7, #64]	@ 0x40
 80076c0:	e01e      	b.n	8007700 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80076c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80076d0:	4413      	add	r3, r2
 80076d2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d6:	3304      	adds	r3, #4
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d006      	beq.n	80076ec <find_volume+0x114>
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	3308      	adds	r3, #8
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fd76 	bl	80061d4 <ld_dword>
 80076e8:	4602      	mov	r2, r0
 80076ea:	e000      	b.n	80076ee <find_volume+0x116>
 80076ec:	2200      	movs	r2, #0
 80076ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	3358      	adds	r3, #88	@ 0x58
 80076f4:	443b      	add	r3, r7
 80076f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076fc:	3301      	adds	r3, #1
 80076fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007702:	2b03      	cmp	r3, #3
 8007704:	d9dd      	bls.n	80076c2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007706:	2300      	movs	r3, #0
 8007708:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800770a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <find_volume+0x13e>
 8007710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007712:	3b01      	subs	r3, #1
 8007714:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	3358      	adds	r3, #88	@ 0x58
 800771c:	443b      	add	r3, r7
 800771e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007722:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <find_volume+0x15e>
 800772a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800772c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800772e:	f7ff fefd 	bl	800752c <check_fs>
 8007732:	4603      	mov	r3, r0
 8007734:	e000      	b.n	8007738 <find_volume+0x160>
 8007736:	2303      	movs	r3, #3
 8007738:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800773c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007740:	2b01      	cmp	r3, #1
 8007742:	d905      	bls.n	8007750 <find_volume+0x178>
 8007744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007746:	3301      	adds	r3, #1
 8007748:	643b      	str	r3, [r7, #64]	@ 0x40
 800774a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800774c:	2b03      	cmp	r3, #3
 800774e:	d9e2      	bls.n	8007716 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007750:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007754:	2b04      	cmp	r3, #4
 8007756:	d101      	bne.n	800775c <find_volume+0x184>
 8007758:	2301      	movs	r3, #1
 800775a:	e17e      	b.n	8007a5a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800775c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007760:	2b01      	cmp	r3, #1
 8007762:	d901      	bls.n	8007768 <find_volume+0x190>
 8007764:	230d      	movs	r3, #13
 8007766:	e178      	b.n	8007a5a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	3330      	adds	r3, #48	@ 0x30
 800776c:	330b      	adds	r3, #11
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fd18 	bl	80061a4 <ld_word>
 8007774:	4603      	mov	r3, r0
 8007776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800777a:	d001      	beq.n	8007780 <find_volume+0x1a8>
 800777c:	230d      	movs	r3, #13
 800777e:	e16c      	b.n	8007a5a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	3330      	adds	r3, #48	@ 0x30
 8007784:	3316      	adds	r3, #22
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fd0c 	bl	80061a4 <ld_word>
 800778c:	4603      	mov	r3, r0
 800778e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <find_volume+0x1cc>
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	3330      	adds	r3, #48	@ 0x30
 800779a:	3324      	adds	r3, #36	@ 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fd19 	bl	80061d4 <ld_dword>
 80077a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077a8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80077aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ac:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80077b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	789b      	ldrb	r3, [r3, #2]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d005      	beq.n	80077c8 <find_volume+0x1f0>
 80077bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077be:	789b      	ldrb	r3, [r3, #2]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d001      	beq.n	80077c8 <find_volume+0x1f0>
 80077c4:	230d      	movs	r3, #13
 80077c6:	e148      	b.n	8007a5a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80077c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ca:	789b      	ldrb	r3, [r3, #2]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
 80077d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077dc:	461a      	mov	r2, r3
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	895b      	ldrh	r3, [r3, #10]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <find_volume+0x224>
 80077ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ec:	895b      	ldrh	r3, [r3, #10]
 80077ee:	461a      	mov	r2, r3
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	895b      	ldrh	r3, [r3, #10]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	4013      	ands	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <find_volume+0x228>
 80077fc:	230d      	movs	r3, #13
 80077fe:	e12c      	b.n	8007a5a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	3330      	adds	r3, #48	@ 0x30
 8007804:	3311      	adds	r3, #17
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fccc 	bl	80061a4 <ld_word>
 800780c:	4603      	mov	r3, r0
 800780e:	461a      	mov	r2, r3
 8007810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007812:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	891b      	ldrh	r3, [r3, #8]
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <find_volume+0x24e>
 8007822:	230d      	movs	r3, #13
 8007824:	e119      	b.n	8007a5a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007828:	3330      	adds	r3, #48	@ 0x30
 800782a:	3313      	adds	r3, #19
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe fcb9 	bl	80061a4 <ld_word>
 8007832:	4603      	mov	r3, r0
 8007834:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <find_volume+0x272>
 800783c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783e:	3330      	adds	r3, #48	@ 0x30
 8007840:	3320      	adds	r3, #32
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fcc6 	bl	80061d4 <ld_dword>
 8007848:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	3330      	adds	r3, #48	@ 0x30
 800784e:	330e      	adds	r3, #14
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe fca7 	bl	80061a4 <ld_word>
 8007856:	4603      	mov	r3, r0
 8007858:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800785a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <find_volume+0x28c>
 8007860:	230d      	movs	r3, #13
 8007862:	e0fa      	b.n	8007a5a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007864:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007868:	4413      	add	r3, r2
 800786a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800786c:	8912      	ldrh	r2, [r2, #8]
 800786e:	0912      	lsrs	r2, r2, #4
 8007870:	b292      	uxth	r2, r2
 8007872:	4413      	add	r3, r2
 8007874:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787a:	429a      	cmp	r2, r3
 800787c:	d204      	bcs.n	8007888 <find_volume+0x2b0>
 800787e:	230d      	movs	r3, #13
 8007880:	e0eb      	b.n	8007a5a <find_volume+0x482>
 8007882:	bf00      	nop
 8007884:	200002c4 	.word	0x200002c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800788a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007890:	8952      	ldrh	r2, [r2, #10]
 8007892:	fbb3 f3f2 	udiv	r3, r3, r2
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <find_volume+0x2ca>
 800789e:	230d      	movs	r3, #13
 80078a0:	e0db      	b.n	8007a5a <find_volume+0x482>
		fmt = FS_FAT32;
 80078a2:	2303      	movs	r3, #3
 80078a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d802      	bhi.n	80078b8 <find_volume+0x2e0>
 80078b2:	2302      	movs	r3, #2
 80078b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80078be:	4293      	cmp	r3, r2
 80078c0:	d802      	bhi.n	80078c8 <find_volume+0x2f0>
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	1c9a      	adds	r2, r3, #2
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80078d4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80078d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80078d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078da:	441a      	add	r2, r3
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80078e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80078e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e4:	441a      	add	r2, r3
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80078ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d11e      	bne.n	8007930 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	3330      	adds	r3, #48	@ 0x30
 80078f6:	332a      	adds	r3, #42	@ 0x2a
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fc53 	bl	80061a4 <ld_word>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <find_volume+0x330>
 8007904:	230d      	movs	r3, #13
 8007906:	e0a8      	b.n	8007a5a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790a:	891b      	ldrh	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <find_volume+0x33c>
 8007910:	230d      	movs	r3, #13
 8007912:	e0a2      	b.n	8007a5a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007916:	3330      	adds	r3, #48	@ 0x30
 8007918:	332c      	adds	r3, #44	@ 0x2c
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fc5a 	bl	80061d4 <ld_dword>
 8007920:	4602      	mov	r2, r0
 8007922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007924:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	647b      	str	r3, [r7, #68]	@ 0x44
 800792e:	e01f      	b.n	8007970 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	891b      	ldrh	r3, [r3, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <find_volume+0x364>
 8007938:	230d      	movs	r3, #13
 800793a:	e08e      	b.n	8007a5a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793e:	6a1a      	ldr	r2, [r3, #32]
 8007940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007942:	441a      	add	r2, r3
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007948:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800794c:	2b02      	cmp	r3, #2
 800794e:	d103      	bne.n	8007958 <find_volume+0x380>
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	e00a      	b.n	800796e <find_volume+0x396>
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	695a      	ldr	r2, [r3, #20]
 800795c:	4613      	mov	r3, r2
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4413      	add	r3, r2
 8007962:	085a      	lsrs	r2, r3, #1
 8007964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800796e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007976:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800797a:	0a5b      	lsrs	r3, r3, #9
 800797c:	429a      	cmp	r2, r3
 800797e:	d201      	bcs.n	8007984 <find_volume+0x3ac>
 8007980:	230d      	movs	r3, #13
 8007982:	e06a      	b.n	8007a5a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	f04f 32ff 	mov.w	r2, #4294967295
 800798a:	611a      	str	r2, [r3, #16]
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007996:	2280      	movs	r2, #128	@ 0x80
 8007998:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800799a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d149      	bne.n	8007a36 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	3330      	adds	r3, #48	@ 0x30
 80079a6:	3330      	adds	r3, #48	@ 0x30
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fbfb 	bl	80061a4 <ld_word>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d140      	bne.n	8007a36 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80079b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b6:	3301      	adds	r3, #1
 80079b8:	4619      	mov	r1, r3
 80079ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079bc:	f7fe fea2 	bl	8006704 <move_window>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d137      	bne.n	8007a36 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	2200      	movs	r2, #0
 80079ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	3330      	adds	r3, #48	@ 0x30
 80079d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fe fbe5 	bl	80061a4 <ld_word>
 80079da:	4603      	mov	r3, r0
 80079dc:	461a      	mov	r2, r3
 80079de:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d127      	bne.n	8007a36 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80079e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e8:	3330      	adds	r3, #48	@ 0x30
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fbf2 	bl	80061d4 <ld_dword>
 80079f0:	4603      	mov	r3, r0
 80079f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a64 <find_volume+0x48c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d11e      	bne.n	8007a36 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	3330      	adds	r3, #48	@ 0x30
 80079fc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fbe7 	bl	80061d4 <ld_dword>
 8007a06:	4603      	mov	r3, r0
 8007a08:	4a17      	ldr	r2, [pc, #92]	@ (8007a68 <find_volume+0x490>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d113      	bne.n	8007a36 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a10:	3330      	adds	r3, #48	@ 0x30
 8007a12:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fbdc 	bl	80061d4 <ld_dword>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	3330      	adds	r3, #48	@ 0x30
 8007a26:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fbd2 	bl	80061d4 <ld_dword>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007a3c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <find_volume+0x494>)
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	4b09      	ldr	r3, [pc, #36]	@ (8007a6c <find_volume+0x494>)
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	4b08      	ldr	r3, [pc, #32]	@ (8007a6c <find_volume+0x494>)
 8007a4c:	881a      	ldrh	r2, [r3, #0]
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a50:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a54:	f7fe fdee 	bl	8006634 <clear_lock>
#endif
	return FR_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3758      	adds	r7, #88	@ 0x58
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	41615252 	.word	0x41615252
 8007a68:	61417272 	.word	0x61417272
 8007a6c:	200002c8 	.word	0x200002c8

08007a70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a7a:	2309      	movs	r3, #9
 8007a7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01c      	beq.n	8007abe <validate+0x4e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d018      	beq.n	8007abe <validate+0x4e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d013      	beq.n	8007abe <validate+0x4e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	889a      	ldrh	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	88db      	ldrh	r3, [r3, #6]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d10c      	bne.n	8007abe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fada 	bl	8006064 <disk_status>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <validate+0x4e>
			res = FR_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <validate+0x5a>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	e000      	b.n	8007acc <validate+0x5c>
 8007aca:	2300      	movs	r3, #0
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	6013      	str	r3, [r2, #0]
	return res;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007aee:	f107 0310 	add.w	r3, r7, #16
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fcd5 	bl	80074a2 <get_ldnumber>
 8007af8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da01      	bge.n	8007b04 <f_mount+0x28>
 8007b00:	230b      	movs	r3, #11
 8007b02:	e02b      	b.n	8007b5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007b04:	4a17      	ldr	r2, [pc, #92]	@ (8007b64 <f_mount+0x88>)
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007b14:	69b8      	ldr	r0, [r7, #24]
 8007b16:	f7fe fd8d 	bl	8006634 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	490d      	ldr	r1, [pc, #52]	@ (8007b64 <f_mount+0x88>)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <f_mount+0x66>
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d001      	beq.n	8007b46 <f_mount+0x6a>
 8007b42:	2300      	movs	r3, #0
 8007b44:	e00a      	b.n	8007b5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b46:	f107 010c 	add.w	r1, r7, #12
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fd41 	bl	80075d8 <find_volume>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3720      	adds	r7, #32
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	200002c4 	.word	0x200002c4

08007b68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b098      	sub	sp, #96	@ 0x60
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4613      	mov	r3, r2
 8007b74:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <f_open+0x18>
 8007b7c:	2309      	movs	r3, #9
 8007b7e:	e1a9      	b.n	8007ed4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b86:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b88:	79fa      	ldrb	r2, [r7, #7]
 8007b8a:	f107 0110 	add.w	r1, r7, #16
 8007b8e:	f107 0308 	add.w	r3, r7, #8
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff fd20 	bl	80075d8 <find_volume>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 818d 	bne.w	8007ec2 <f_open+0x35a>
		dj.obj.fs = fs;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	f107 0314 	add.w	r3, r7, #20
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff fc03 	bl	80073c0 <follow_path>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d118      	bne.n	8007bfa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007bc8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bcc:	b25b      	sxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da03      	bge.n	8007bda <f_open+0x72>
				res = FR_INVALID_NAME;
 8007bd2:	2306      	movs	r3, #6
 8007bd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007bd8:	e00f      	b.n	8007bfa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	bf8c      	ite	hi
 8007be0:	2301      	movhi	r3, #1
 8007be2:	2300      	movls	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	f107 0314 	add.w	r3, r7, #20
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fbd8 	bl	80063a4 <chk_lock>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	f003 031c 	and.w	r3, r3, #28
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d07f      	beq.n	8007d04 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007c04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d017      	beq.n	8007c3c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d10e      	bne.n	8007c32 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007c14:	f7fe fc22 	bl	800645c <enq_lock>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d006      	beq.n	8007c2c <f_open+0xc4>
 8007c1e:	f107 0314 	add.w	r3, r7, #20
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fb06 	bl	8007234 <dir_register>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	e000      	b.n	8007c2e <f_open+0xc6>
 8007c2c:	2312      	movs	r3, #18
 8007c2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	f043 0308 	orr.w	r3, r3, #8
 8007c38:	71fb      	strb	r3, [r7, #7]
 8007c3a:	e010      	b.n	8007c5e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007c3c:	7ebb      	ldrb	r3, [r7, #26]
 8007c3e:	f003 0311 	and.w	r3, r3, #17
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <f_open+0xe6>
					res = FR_DENIED;
 8007c46:	2307      	movs	r3, #7
 8007c48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007c4c:	e007      	b.n	8007c5e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <f_open+0xf6>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d168      	bne.n	8007d38 <f_open+0x1d0>
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d063      	beq.n	8007d38 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007c70:	f7fe f88c 	bl	8005d8c <get_fattime>
 8007c74:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c78:	330e      	adds	r3, #14
 8007c7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe fae7 	bl	8006250 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c84:	3316      	adds	r3, #22
 8007c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe fae1 	bl	8006250 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c90:	330b      	adds	r3, #11
 8007c92:	2220      	movs	r2, #32
 8007c94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fa35 	bl	800710c <ld_clust>
 8007ca2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fa4d 	bl	800714a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb2:	331c      	adds	r3, #28
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe faca 	bl	8006250 <st_dword>
					fs->wflag = 1;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d037      	beq.n	8007d38 <f_open+0x1d0>
						dw = fs->winsect;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ccc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007cce:	f107 0314 	add.w	r3, r7, #20
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe ff60 	bl	8006b9c <remove_chain>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d126      	bne.n	8007d38 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fd08 	bl	8006704 <move_window>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cfe:	3a01      	subs	r2, #1
 8007d00:	60da      	str	r2, [r3, #12]
 8007d02:	e019      	b.n	8007d38 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007d04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d115      	bne.n	8007d38 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007d0c:	7ebb      	ldrb	r3, [r7, #26]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <f_open+0x1b6>
					res = FR_NO_FILE;
 8007d16:	2304      	movs	r3, #4
 8007d18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007d1c:	e00c      	b.n	8007d38 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <f_open+0x1d0>
 8007d28:	7ebb      	ldrb	r3, [r7, #26]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <f_open+0x1d0>
						res = FR_DENIED;
 8007d32:	2307      	movs	r3, #7
 8007d34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007d38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d126      	bne.n	8007d8e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007d5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d60:	79fb      	ldrb	r3, [r7, #7]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	bf8c      	ite	hi
 8007d66:	2301      	movhi	r3, #1
 8007d68:	2300      	movls	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f107 0314 	add.w	r3, r7, #20
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe fb93 	bl	80064a0 <inc_lock>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d102      	bne.n	8007d8e <f_open+0x226>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 8095 	bne.w	8007ec2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff f9b4 	bl	800710c <ld_clust>
 8007da4:	4602      	mov	r2, r0
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dac:	331c      	adds	r3, #28
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fa10 	bl	80061d4 <ld_dword>
 8007db4:	4602      	mov	r2, r0
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	88da      	ldrh	r2, [r3, #6]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	79fa      	ldrb	r2, [r7, #7]
 8007dd2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3330      	adds	r3, #48	@ 0x30
 8007dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dee:	2100      	movs	r1, #0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fa7a 	bl	80062ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d060      	beq.n	8007ec2 <f_open+0x35a>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d05c      	beq.n	8007ec2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	895b      	ldrh	r3, [r3, #10]
 8007e14:	025b      	lsls	r3, r3, #9
 8007e16:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e24:	e016      	b.n	8007e54 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe fd25 	bl	800687a <get_fat>
 8007e30:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d802      	bhi.n	8007e3e <f_open+0x2d6>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d102      	bne.n	8007e4c <f_open+0x2e4>
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d103      	bne.n	8007e64 <f_open+0x2fc>
 8007e5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d8e0      	bhi.n	8007e26 <f_open+0x2be>
				}
				fp->clust = clst;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d127      	bne.n	8007ec2 <f_open+0x35a>
 8007e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d022      	beq.n	8007ec2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe fcdb 	bl	800683c <clust2sect>
 8007e86:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d103      	bne.n	8007e96 <f_open+0x32e>
						res = FR_INT_ERR;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007e94:	e015      	b.n	8007ec2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e98:	0a5a      	lsrs	r2, r3, #9
 8007e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e9c:	441a      	add	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	7858      	ldrb	r0, [r3, #1]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1a      	ldr	r2, [r3, #32]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f7fe f919 	bl	80060e8 <disk_read>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <f_open+0x35a>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007ec2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <f_open+0x368>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3760      	adds	r7, #96	@ 0x60
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08e      	sub	sp, #56	@ 0x38
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f107 0214 	add.w	r2, r7, #20
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff fdb7 	bl	8007a70 <validate>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007f08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d107      	bne.n	8007f20 <f_read+0x44>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	7d5b      	ldrb	r3, [r3, #21]
 8007f14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007f18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <f_read+0x4a>
 8007f20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f24:	e115      	b.n	8008152 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	7d1b      	ldrb	r3, [r3, #20]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <f_read+0x5a>
 8007f32:	2307      	movs	r3, #7
 8007f34:	e10d      	b.n	8008152 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	f240 80fe 	bls.w	8008148 <f_read+0x26c>
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f50:	e0fa      	b.n	8008148 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f040 80c6 	bne.w	80080ec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	0a5b      	lsrs	r3, r3, #9
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	8952      	ldrh	r2, [r2, #10]
 8007f6a:	3a01      	subs	r2, #1
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d12f      	bne.n	8007fd6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f84:	e013      	b.n	8007fae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7fe fefe 	bl	8006d96 <clmt_clust>
 8007f9a:	6338      	str	r0, [r7, #48]	@ 0x30
 8007f9c:	e007      	b.n	8007fae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe fc67 	bl	800687a <get_fat>
 8007fac:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d804      	bhi.n	8007fbe <f_read+0xe2>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	755a      	strb	r2, [r3, #21]
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e0c9      	b.n	8008152 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d104      	bne.n	8007fd0 <f_read+0xf4>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	755a      	strb	r2, [r3, #21]
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0c0      	b.n	8008152 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7fe fc2c 	bl	800683c <clust2sect>
 8007fe4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d104      	bne.n	8007ff6 <f_read+0x11a>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	755a      	strb	r2, [r3, #21]
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e0ad      	b.n	8008152 <f_read+0x276>
			sect += csect;
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	0a5b      	lsrs	r3, r3, #9
 8008002:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	d039      	beq.n	800807e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	4413      	add	r3, r2
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	8952      	ldrh	r2, [r2, #10]
 8008014:	4293      	cmp	r3, r2
 8008016:	d905      	bls.n	8008024 <f_read+0x148>
					cc = fs->csize - csect;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	895b      	ldrh	r3, [r3, #10]
 800801c:	461a      	mov	r2, r3
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	7858      	ldrb	r0, [r3, #1]
 8008028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800802e:	f7fe f85b 	bl	80060e8 <disk_read>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <f_read+0x166>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	755a      	strb	r2, [r3, #21]
 800803e:	2301      	movs	r3, #1
 8008040:	e087      	b.n	8008152 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	7d1b      	ldrb	r3, [r3, #20]
 8008046:	b25b      	sxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	da14      	bge.n	8008076 <f_read+0x19a>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1a      	ldr	r2, [r3, #32]
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008056:	429a      	cmp	r2, r3
 8008058:	d90d      	bls.n	8008076 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a1a      	ldr	r2, [r3, #32]
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	025b      	lsls	r3, r3, #9
 8008064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008066:	18d0      	adds	r0, r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3330      	adds	r3, #48	@ 0x30
 800806c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008070:	4619      	mov	r1, r3
 8008072:	f7fe f919 	bl	80062a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	025b      	lsls	r3, r3, #9
 800807a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800807c:	e050      	b.n	8008120 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	429a      	cmp	r2, r3
 8008086:	d02e      	beq.n	80080e6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	7d1b      	ldrb	r3, [r3, #20]
 800808c:	b25b      	sxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	da18      	bge.n	80080c4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	7858      	ldrb	r0, [r3, #1]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1a      	ldr	r2, [r3, #32]
 80080a0:	2301      	movs	r3, #1
 80080a2:	f7fe f841 	bl	8006128 <disk_write>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <f_read+0x1da>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2201      	movs	r2, #1
 80080b0:	755a      	strb	r2, [r3, #21]
 80080b2:	2301      	movs	r3, #1
 80080b4:	e04d      	b.n	8008152 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	7d1b      	ldrb	r3, [r3, #20]
 80080ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	7858      	ldrb	r0, [r3, #1]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080ce:	2301      	movs	r3, #1
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	f7fe f809 	bl	80060e8 <disk_read>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <f_read+0x20a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	755a      	strb	r2, [r3, #21]
 80080e2:	2301      	movs	r3, #1
 80080e4:	e035      	b.n	8008152 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80080f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80080fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d901      	bls.n	8008106 <f_read+0x22a>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008114:	4413      	add	r3, r2
 8008116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008118:	4619      	mov	r1, r3
 800811a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800811c:	f7fe f8c4 	bl	80062a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	4413      	add	r3, r2
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812e:	441a      	add	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	619a      	str	r2, [r3, #24]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813a:	441a      	add	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f47f af01 	bne.w	8007f52 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3738      	adds	r7, #56	@ 0x38
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b08c      	sub	sp, #48	@ 0x30
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	607a      	str	r2, [r7, #4]
 8008166:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f107 0210 	add.w	r2, r7, #16
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff fc78 	bl	8007a70 <validate>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008186:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800818a:	2b00      	cmp	r3, #0
 800818c:	d107      	bne.n	800819e <f_write+0x44>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	7d5b      	ldrb	r3, [r3, #21]
 8008192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008196:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <f_write+0x4a>
 800819e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081a2:	e14b      	b.n	800843c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	7d1b      	ldrb	r3, [r3, #20]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <f_write+0x5a>
 80081b0:	2307      	movs	r3, #7
 80081b2:	e143      	b.n	800843c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	699a      	ldr	r2, [r3, #24]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	441a      	add	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	f080 812d 	bcs.w	8008420 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	43db      	mvns	r3, r3
 80081cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80081ce:	e127      	b.n	8008420 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 80e3 	bne.w	80083a4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	0a5b      	lsrs	r3, r3, #9
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	8952      	ldrh	r2, [r2, #10]
 80081e8:	3a01      	subs	r2, #1
 80081ea:	4013      	ands	r3, r2
 80081ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d143      	bne.n	800827c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10c      	bne.n	8008216 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11a      	bne.n	800823e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2100      	movs	r1, #0
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe fd2a 	bl	8006c66 <create_chain>
 8008212:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008214:	e013      	b.n	800823e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	4619      	mov	r1, r3
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7fe fdb6 	bl	8006d96 <clmt_clust>
 800822a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800822c:	e007      	b.n	800823e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f7fe fd15 	bl	8006c66 <create_chain>
 800823c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80f2 	beq.w	800842a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	2b01      	cmp	r3, #1
 800824a:	d104      	bne.n	8008256 <f_write+0xfc>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2202      	movs	r2, #2
 8008250:	755a      	strb	r2, [r3, #21]
 8008252:	2302      	movs	r3, #2
 8008254:	e0f2      	b.n	800843c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d104      	bne.n	8008268 <f_write+0x10e>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	755a      	strb	r2, [r3, #21]
 8008264:	2301      	movs	r3, #1
 8008266:	e0e9      	b.n	800843c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800826c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <f_write+0x122>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800827a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	7d1b      	ldrb	r3, [r3, #20]
 8008280:	b25b      	sxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	da18      	bge.n	80082b8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	7858      	ldrb	r0, [r3, #1]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a1a      	ldr	r2, [r3, #32]
 8008294:	2301      	movs	r3, #1
 8008296:	f7fd ff47 	bl	8006128 <disk_write>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <f_write+0x150>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	755a      	strb	r2, [r3, #21]
 80082a6:	2301      	movs	r3, #1
 80082a8:	e0c8      	b.n	800843c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	7d1b      	ldrb	r3, [r3, #20]
 80082ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fe fabb 	bl	800683c <clust2sect>
 80082c6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <f_write+0x17e>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2202      	movs	r2, #2
 80082d2:	755a      	strb	r2, [r3, #21]
 80082d4:	2302      	movs	r3, #2
 80082d6:	e0b1      	b.n	800843c <f_write+0x2e2>
			sect += csect;
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	4413      	add	r3, r2
 80082de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	0a5b      	lsrs	r3, r3, #9
 80082e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d03c      	beq.n	8008366 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	4413      	add	r3, r2
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	8952      	ldrh	r2, [r2, #10]
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d905      	bls.n	8008306 <f_write+0x1ac>
					cc = fs->csize - csect;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	895b      	ldrh	r3, [r3, #10]
 80082fe:	461a      	mov	r2, r3
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	7858      	ldrb	r0, [r3, #1]
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	69f9      	ldr	r1, [r7, #28]
 8008310:	f7fd ff0a 	bl	8006128 <disk_write>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <f_write+0x1ca>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2201      	movs	r2, #1
 800831e:	755a      	strb	r2, [r3, #21]
 8008320:	2301      	movs	r3, #1
 8008322:	e08b      	b.n	800843c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a1a      	ldr	r2, [r3, #32]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	6a3a      	ldr	r2, [r7, #32]
 800832e:	429a      	cmp	r2, r3
 8008330:	d915      	bls.n	800835e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1a      	ldr	r2, [r3, #32]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	025b      	lsls	r3, r3, #9
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	4413      	add	r3, r2
 8008346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800834a:	4619      	mov	r1, r3
 800834c:	f7fd ffac 	bl	80062a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	7d1b      	ldrb	r3, [r3, #20]
 8008354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008358:	b2da      	uxtb	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	025b      	lsls	r3, r3, #9
 8008362:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008364:	e03f      	b.n	80083e6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	429a      	cmp	r2, r3
 800836e:	d016      	beq.n	800839e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	699a      	ldr	r2, [r3, #24]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008378:	429a      	cmp	r2, r3
 800837a:	d210      	bcs.n	800839e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	7858      	ldrb	r0, [r3, #1]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008386:	2301      	movs	r3, #1
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	f7fd fead 	bl	80060e8 <disk_read>
 800838e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	755a      	strb	r2, [r3, #21]
 800839a:	2301      	movs	r3, #1
 800839c:	e04e      	b.n	800843c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ac:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80083b0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80083b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d901      	bls.n	80083be <f_write+0x264>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083cc:	4413      	add	r3, r2
 80083ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d0:	69f9      	ldr	r1, [r7, #28]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fd ff68 	bl	80062a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	7d1b      	ldrb	r3, [r3, #20]
 80083dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	4413      	add	r3, r2
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	619a      	str	r2, [r3, #24]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	429a      	cmp	r2, r3
 8008404:	bf38      	it	cc
 8008406:	461a      	movcc	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	60da      	str	r2, [r3, #12]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008412:	441a      	add	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f47f aed4 	bne.w	80081d0 <f_write+0x76>
 8008428:	e000      	b.n	800842c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800842a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	7d1b      	ldrb	r3, [r3, #20]
 8008430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008434:	b2da      	uxtb	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3730      	adds	r7, #48	@ 0x30
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f107 0208 	add.w	r2, r7, #8
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff fb0b 	bl	8007a70 <validate>
 800845a:	4603      	mov	r3, r0
 800845c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d168      	bne.n	8008536 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7d1b      	ldrb	r3, [r3, #20]
 8008468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d062      	beq.n	8008536 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7d1b      	ldrb	r3, [r3, #20]
 8008474:	b25b      	sxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	da15      	bge.n	80084a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	7858      	ldrb	r0, [r3, #1]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1a      	ldr	r2, [r3, #32]
 8008488:	2301      	movs	r3, #1
 800848a:	f7fd fe4d 	bl	8006128 <disk_write>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <f_sync+0x54>
 8008494:	2301      	movs	r3, #1
 8008496:	e04f      	b.n	8008538 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	7d1b      	ldrb	r3, [r3, #20]
 800849c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80084a6:	f7fd fc71 	bl	8005d8c <get_fattime>
 80084aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f7fe f925 	bl	8006704 <move_window>
 80084ba:	4603      	mov	r3, r0
 80084bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d138      	bne.n	8008536 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	330b      	adds	r3, #11
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	330b      	adds	r3, #11
 80084d4:	f042 0220 	orr.w	r2, r2, #32
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	461a      	mov	r2, r3
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	f7fe fe2f 	bl	800714a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f103 021c 	add.w	r2, r3, #28
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	4619      	mov	r1, r3
 80084f8:	4610      	mov	r0, r2
 80084fa:	f7fd fea9 	bl	8006250 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3316      	adds	r3, #22
 8008502:	6939      	ldr	r1, [r7, #16]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fd fea3 	bl	8006250 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3312      	adds	r3, #18
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f7fd fe82 	bl	800621a <st_word>
					fs->wflag = 1;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2201      	movs	r2, #1
 800851a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe f91e 	bl	8006760 <sync_fs>
 8008524:	4603      	mov	r3, r0
 8008526:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7d1b      	ldrb	r3, [r3, #20]
 800852c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008536:	7dfb      	ldrb	r3, [r7, #23]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff ff7b 	bl	8008444 <f_sync>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d118      	bne.n	800858a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f107 0208 	add.w	r2, r7, #8
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff fa85 	bl	8007a70 <validate>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe f821 	bl	80065bc <dec_lock>
 800857a:	4603      	mov	r3, r0
 800857c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d102      	bne.n	800858a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085a2:	2301      	movs	r3, #1
 80085a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80085aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085ac:	7a5b      	ldrb	r3, [r3, #9]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d131      	bne.n	8008618 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80085b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085b6:	7a5b      	ldrb	r3, [r3, #9]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085be:	2100      	movs	r1, #0
 80085c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80085c2:	4b19      	ldr	r3, [pc, #100]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085c4:	7a5b      	ldrb	r3, [r3, #9]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	4a17      	ldr	r2, [pc, #92]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80085d2:	4b15      	ldr	r3, [pc, #84]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085d4:	7a5b      	ldrb	r3, [r3, #9]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	4b13      	ldr	r3, [pc, #76]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085dc:	4413      	add	r3, r2
 80085de:	79fa      	ldrb	r2, [r7, #7]
 80085e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80085e2:	4b11      	ldr	r3, [pc, #68]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085e4:	7a5b      	ldrb	r3, [r3, #9]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	b2d1      	uxtb	r1, r2
 80085ec:	4a0e      	ldr	r2, [pc, #56]	@ (8008628 <FATFS_LinkDriverEx+0x94>)
 80085ee:	7251      	strb	r1, [r2, #9]
 80085f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80085f2:	7dbb      	ldrb	r3, [r7, #22]
 80085f4:	3330      	adds	r3, #48	@ 0x30
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	3301      	adds	r3, #1
 8008600:	223a      	movs	r2, #58	@ 0x3a
 8008602:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	3302      	adds	r3, #2
 8008608:	222f      	movs	r2, #47	@ 0x2f
 800860a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3303      	adds	r3, #3
 8008610:	2200      	movs	r2, #0
 8008612:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008618:	7dfb      	ldrb	r3, [r7, #23]
}
 800861a:	4618      	mov	r0, r3
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	200002ec 	.word	0x200002ec

0800862c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008636:	2200      	movs	r2, #0
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff ffaa 	bl	8008594 <FATFS_LinkDriverEx>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <sniprintf>:
 800864c:	b40c      	push	{r2, r3}
 800864e:	b530      	push	{r4, r5, lr}
 8008650:	4b17      	ldr	r3, [pc, #92]	@ (80086b0 <sniprintf+0x64>)
 8008652:	1e0c      	subs	r4, r1, #0
 8008654:	681d      	ldr	r5, [r3, #0]
 8008656:	b09d      	sub	sp, #116	@ 0x74
 8008658:	da08      	bge.n	800866c <sniprintf+0x20>
 800865a:	238b      	movs	r3, #139	@ 0x8b
 800865c:	602b      	str	r3, [r5, #0]
 800865e:	f04f 30ff 	mov.w	r0, #4294967295
 8008662:	b01d      	add	sp, #116	@ 0x74
 8008664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008668:	b002      	add	sp, #8
 800866a:	4770      	bx	lr
 800866c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008670:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008674:	bf14      	ite	ne
 8008676:	f104 33ff 	addne.w	r3, r4, #4294967295
 800867a:	4623      	moveq	r3, r4
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	9006      	str	r0, [sp, #24]
 8008688:	f8ad 3016 	strh.w	r3, [sp, #22]
 800868c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800868e:	ab21      	add	r3, sp, #132	@ 0x84
 8008690:	a902      	add	r1, sp, #8
 8008692:	4628      	mov	r0, r5
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	f000 f995 	bl	80089c4 <_svfiprintf_r>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	bfbc      	itt	lt
 800869e:	238b      	movlt	r3, #139	@ 0x8b
 80086a0:	602b      	strlt	r3, [r5, #0]
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d0dd      	beq.n	8008662 <sniprintf+0x16>
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	e7d9      	b.n	8008662 <sniprintf+0x16>
 80086ae:	bf00      	nop
 80086b0:	2000000c 	.word	0x2000000c

080086b4 <memset>:
 80086b4:	4402      	add	r2, r0
 80086b6:	4603      	mov	r3, r0
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d100      	bne.n	80086be <memset+0xa>
 80086bc:	4770      	bx	lr
 80086be:	f803 1b01 	strb.w	r1, [r3], #1
 80086c2:	e7f9      	b.n	80086b8 <memset+0x4>

080086c4 <__errno>:
 80086c4:	4b01      	ldr	r3, [pc, #4]	@ (80086cc <__errno+0x8>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	2000000c 	.word	0x2000000c

080086d0 <__libc_init_array>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008708 <__libc_init_array+0x38>)
 80086d4:	4c0d      	ldr	r4, [pc, #52]	@ (800870c <__libc_init_array+0x3c>)
 80086d6:	1b64      	subs	r4, r4, r5
 80086d8:	10a4      	asrs	r4, r4, #2
 80086da:	2600      	movs	r6, #0
 80086dc:	42a6      	cmp	r6, r4
 80086de:	d109      	bne.n	80086f4 <__libc_init_array+0x24>
 80086e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008710 <__libc_init_array+0x40>)
 80086e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008714 <__libc_init_array+0x44>)
 80086e4:	f000 fc66 	bl	8008fb4 <_init>
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	2600      	movs	r6, #0
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	d105      	bne.n	80086fe <__libc_init_array+0x2e>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f8:	4798      	blx	r3
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7ee      	b.n	80086dc <__libc_init_array+0xc>
 80086fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008702:	4798      	blx	r3
 8008704:	3601      	adds	r6, #1
 8008706:	e7f2      	b.n	80086ee <__libc_init_array+0x1e>
 8008708:	08009148 	.word	0x08009148
 800870c:	08009148 	.word	0x08009148
 8008710:	08009148 	.word	0x08009148
 8008714:	0800914c 	.word	0x0800914c

08008718 <__retarget_lock_acquire_recursive>:
 8008718:	4770      	bx	lr

0800871a <__retarget_lock_release_recursive>:
 800871a:	4770      	bx	lr

0800871c <_free_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4605      	mov	r5, r0
 8008720:	2900      	cmp	r1, #0
 8008722:	d041      	beq.n	80087a8 <_free_r+0x8c>
 8008724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008728:	1f0c      	subs	r4, r1, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	bfb8      	it	lt
 800872e:	18e4      	addlt	r4, r4, r3
 8008730:	f000 f8e0 	bl	80088f4 <__malloc_lock>
 8008734:	4a1d      	ldr	r2, [pc, #116]	@ (80087ac <_free_r+0x90>)
 8008736:	6813      	ldr	r3, [r2, #0]
 8008738:	b933      	cbnz	r3, 8008748 <_free_r+0x2c>
 800873a:	6063      	str	r3, [r4, #4]
 800873c:	6014      	str	r4, [r2, #0]
 800873e:	4628      	mov	r0, r5
 8008740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008744:	f000 b8dc 	b.w	8008900 <__malloc_unlock>
 8008748:	42a3      	cmp	r3, r4
 800874a:	d908      	bls.n	800875e <_free_r+0x42>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	1821      	adds	r1, r4, r0
 8008750:	428b      	cmp	r3, r1
 8008752:	bf01      	itttt	eq
 8008754:	6819      	ldreq	r1, [r3, #0]
 8008756:	685b      	ldreq	r3, [r3, #4]
 8008758:	1809      	addeq	r1, r1, r0
 800875a:	6021      	streq	r1, [r4, #0]
 800875c:	e7ed      	b.n	800873a <_free_r+0x1e>
 800875e:	461a      	mov	r2, r3
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	b10b      	cbz	r3, 8008768 <_free_r+0x4c>
 8008764:	42a3      	cmp	r3, r4
 8008766:	d9fa      	bls.n	800875e <_free_r+0x42>
 8008768:	6811      	ldr	r1, [r2, #0]
 800876a:	1850      	adds	r0, r2, r1
 800876c:	42a0      	cmp	r0, r4
 800876e:	d10b      	bne.n	8008788 <_free_r+0x6c>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	4401      	add	r1, r0
 8008774:	1850      	adds	r0, r2, r1
 8008776:	4283      	cmp	r3, r0
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	d1e0      	bne.n	800873e <_free_r+0x22>
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	6053      	str	r3, [r2, #4]
 8008782:	4408      	add	r0, r1
 8008784:	6010      	str	r0, [r2, #0]
 8008786:	e7da      	b.n	800873e <_free_r+0x22>
 8008788:	d902      	bls.n	8008790 <_free_r+0x74>
 800878a:	230c      	movs	r3, #12
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	e7d6      	b.n	800873e <_free_r+0x22>
 8008790:	6820      	ldr	r0, [r4, #0]
 8008792:	1821      	adds	r1, r4, r0
 8008794:	428b      	cmp	r3, r1
 8008796:	bf04      	itt	eq
 8008798:	6819      	ldreq	r1, [r3, #0]
 800879a:	685b      	ldreq	r3, [r3, #4]
 800879c:	6063      	str	r3, [r4, #4]
 800879e:	bf04      	itt	eq
 80087a0:	1809      	addeq	r1, r1, r0
 80087a2:	6021      	streq	r1, [r4, #0]
 80087a4:	6054      	str	r4, [r2, #4]
 80087a6:	e7ca      	b.n	800873e <_free_r+0x22>
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	2000043c 	.word	0x2000043c

080087b0 <sbrk_aligned>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4e0f      	ldr	r6, [pc, #60]	@ (80087f0 <sbrk_aligned+0x40>)
 80087b4:	460c      	mov	r4, r1
 80087b6:	6831      	ldr	r1, [r6, #0]
 80087b8:	4605      	mov	r5, r0
 80087ba:	b911      	cbnz	r1, 80087c2 <sbrk_aligned+0x12>
 80087bc:	f000 fba6 	bl	8008f0c <_sbrk_r>
 80087c0:	6030      	str	r0, [r6, #0]
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 fba1 	bl	8008f0c <_sbrk_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d103      	bne.n	80087d6 <sbrk_aligned+0x26>
 80087ce:	f04f 34ff 	mov.w	r4, #4294967295
 80087d2:	4620      	mov	r0, r4
 80087d4:	bd70      	pop	{r4, r5, r6, pc}
 80087d6:	1cc4      	adds	r4, r0, #3
 80087d8:	f024 0403 	bic.w	r4, r4, #3
 80087dc:	42a0      	cmp	r0, r4
 80087de:	d0f8      	beq.n	80087d2 <sbrk_aligned+0x22>
 80087e0:	1a21      	subs	r1, r4, r0
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 fb92 	bl	8008f0c <_sbrk_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d1f2      	bne.n	80087d2 <sbrk_aligned+0x22>
 80087ec:	e7ef      	b.n	80087ce <sbrk_aligned+0x1e>
 80087ee:	bf00      	nop
 80087f0:	20000438 	.word	0x20000438

080087f4 <_malloc_r>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	1ccd      	adds	r5, r1, #3
 80087fa:	f025 0503 	bic.w	r5, r5, #3
 80087fe:	3508      	adds	r5, #8
 8008800:	2d0c      	cmp	r5, #12
 8008802:	bf38      	it	cc
 8008804:	250c      	movcc	r5, #12
 8008806:	2d00      	cmp	r5, #0
 8008808:	4606      	mov	r6, r0
 800880a:	db01      	blt.n	8008810 <_malloc_r+0x1c>
 800880c:	42a9      	cmp	r1, r5
 800880e:	d904      	bls.n	800881a <_malloc_r+0x26>
 8008810:	230c      	movs	r3, #12
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	2000      	movs	r0, #0
 8008816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088f0 <_malloc_r+0xfc>
 800881e:	f000 f869 	bl	80088f4 <__malloc_lock>
 8008822:	f8d8 3000 	ldr.w	r3, [r8]
 8008826:	461c      	mov	r4, r3
 8008828:	bb44      	cbnz	r4, 800887c <_malloc_r+0x88>
 800882a:	4629      	mov	r1, r5
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ffbf 	bl	80087b0 <sbrk_aligned>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	4604      	mov	r4, r0
 8008836:	d158      	bne.n	80088ea <_malloc_r+0xf6>
 8008838:	f8d8 4000 	ldr.w	r4, [r8]
 800883c:	4627      	mov	r7, r4
 800883e:	2f00      	cmp	r7, #0
 8008840:	d143      	bne.n	80088ca <_malloc_r+0xd6>
 8008842:	2c00      	cmp	r4, #0
 8008844:	d04b      	beq.n	80088de <_malloc_r+0xea>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4639      	mov	r1, r7
 800884a:	4630      	mov	r0, r6
 800884c:	eb04 0903 	add.w	r9, r4, r3
 8008850:	f000 fb5c 	bl	8008f0c <_sbrk_r>
 8008854:	4581      	cmp	r9, r0
 8008856:	d142      	bne.n	80088de <_malloc_r+0xea>
 8008858:	6821      	ldr	r1, [r4, #0]
 800885a:	1a6d      	subs	r5, r5, r1
 800885c:	4629      	mov	r1, r5
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff ffa6 	bl	80087b0 <sbrk_aligned>
 8008864:	3001      	adds	r0, #1
 8008866:	d03a      	beq.n	80088de <_malloc_r+0xea>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	442b      	add	r3, r5
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	f8d8 3000 	ldr.w	r3, [r8]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	bb62      	cbnz	r2, 80088d0 <_malloc_r+0xdc>
 8008876:	f8c8 7000 	str.w	r7, [r8]
 800887a:	e00f      	b.n	800889c <_malloc_r+0xa8>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	1b52      	subs	r2, r2, r5
 8008880:	d420      	bmi.n	80088c4 <_malloc_r+0xd0>
 8008882:	2a0b      	cmp	r2, #11
 8008884:	d917      	bls.n	80088b6 <_malloc_r+0xc2>
 8008886:	1961      	adds	r1, r4, r5
 8008888:	42a3      	cmp	r3, r4
 800888a:	6025      	str	r5, [r4, #0]
 800888c:	bf18      	it	ne
 800888e:	6059      	strne	r1, [r3, #4]
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	bf08      	it	eq
 8008894:	f8c8 1000 	streq.w	r1, [r8]
 8008898:	5162      	str	r2, [r4, r5]
 800889a:	604b      	str	r3, [r1, #4]
 800889c:	4630      	mov	r0, r6
 800889e:	f000 f82f 	bl	8008900 <__malloc_unlock>
 80088a2:	f104 000b 	add.w	r0, r4, #11
 80088a6:	1d23      	adds	r3, r4, #4
 80088a8:	f020 0007 	bic.w	r0, r0, #7
 80088ac:	1ac2      	subs	r2, r0, r3
 80088ae:	bf1c      	itt	ne
 80088b0:	1a1b      	subne	r3, r3, r0
 80088b2:	50a3      	strne	r3, [r4, r2]
 80088b4:	e7af      	b.n	8008816 <_malloc_r+0x22>
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	bf0c      	ite	eq
 80088bc:	f8c8 2000 	streq.w	r2, [r8]
 80088c0:	605a      	strne	r2, [r3, #4]
 80088c2:	e7eb      	b.n	800889c <_malloc_r+0xa8>
 80088c4:	4623      	mov	r3, r4
 80088c6:	6864      	ldr	r4, [r4, #4]
 80088c8:	e7ae      	b.n	8008828 <_malloc_r+0x34>
 80088ca:	463c      	mov	r4, r7
 80088cc:	687f      	ldr	r7, [r7, #4]
 80088ce:	e7b6      	b.n	800883e <_malloc_r+0x4a>
 80088d0:	461a      	mov	r2, r3
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d1fb      	bne.n	80088d0 <_malloc_r+0xdc>
 80088d8:	2300      	movs	r3, #0
 80088da:	6053      	str	r3, [r2, #4]
 80088dc:	e7de      	b.n	800889c <_malloc_r+0xa8>
 80088de:	230c      	movs	r3, #12
 80088e0:	6033      	str	r3, [r6, #0]
 80088e2:	4630      	mov	r0, r6
 80088e4:	f000 f80c 	bl	8008900 <__malloc_unlock>
 80088e8:	e794      	b.n	8008814 <_malloc_r+0x20>
 80088ea:	6005      	str	r5, [r0, #0]
 80088ec:	e7d6      	b.n	800889c <_malloc_r+0xa8>
 80088ee:	bf00      	nop
 80088f0:	2000043c 	.word	0x2000043c

080088f4 <__malloc_lock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	@ (80088fc <__malloc_lock+0x8>)
 80088f6:	f7ff bf0f 	b.w	8008718 <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	20000434 	.word	0x20000434

08008900 <__malloc_unlock>:
 8008900:	4801      	ldr	r0, [pc, #4]	@ (8008908 <__malloc_unlock+0x8>)
 8008902:	f7ff bf0a 	b.w	800871a <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	20000434 	.word	0x20000434

0800890c <__ssputs_r>:
 800890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008910:	688e      	ldr	r6, [r1, #8]
 8008912:	461f      	mov	r7, r3
 8008914:	42be      	cmp	r6, r7
 8008916:	680b      	ldr	r3, [r1, #0]
 8008918:	4682      	mov	sl, r0
 800891a:	460c      	mov	r4, r1
 800891c:	4690      	mov	r8, r2
 800891e:	d82d      	bhi.n	800897c <__ssputs_r+0x70>
 8008920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008924:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008928:	d026      	beq.n	8008978 <__ssputs_r+0x6c>
 800892a:	6965      	ldr	r5, [r4, #20]
 800892c:	6909      	ldr	r1, [r1, #16]
 800892e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008932:	eba3 0901 	sub.w	r9, r3, r1
 8008936:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800893a:	1c7b      	adds	r3, r7, #1
 800893c:	444b      	add	r3, r9
 800893e:	106d      	asrs	r5, r5, #1
 8008940:	429d      	cmp	r5, r3
 8008942:	bf38      	it	cc
 8008944:	461d      	movcc	r5, r3
 8008946:	0553      	lsls	r3, r2, #21
 8008948:	d527      	bpl.n	800899a <__ssputs_r+0x8e>
 800894a:	4629      	mov	r1, r5
 800894c:	f7ff ff52 	bl	80087f4 <_malloc_r>
 8008950:	4606      	mov	r6, r0
 8008952:	b360      	cbz	r0, 80089ae <__ssputs_r+0xa2>
 8008954:	6921      	ldr	r1, [r4, #16]
 8008956:	464a      	mov	r2, r9
 8008958:	f000 fae8 	bl	8008f2c <memcpy>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	6126      	str	r6, [r4, #16]
 800896a:	6165      	str	r5, [r4, #20]
 800896c:	444e      	add	r6, r9
 800896e:	eba5 0509 	sub.w	r5, r5, r9
 8008972:	6026      	str	r6, [r4, #0]
 8008974:	60a5      	str	r5, [r4, #8]
 8008976:	463e      	mov	r6, r7
 8008978:	42be      	cmp	r6, r7
 800897a:	d900      	bls.n	800897e <__ssputs_r+0x72>
 800897c:	463e      	mov	r6, r7
 800897e:	6820      	ldr	r0, [r4, #0]
 8008980:	4632      	mov	r2, r6
 8008982:	4641      	mov	r1, r8
 8008984:	f000 faa8 	bl	8008ed8 <memmove>
 8008988:	68a3      	ldr	r3, [r4, #8]
 800898a:	1b9b      	subs	r3, r3, r6
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	4433      	add	r3, r6
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	2000      	movs	r0, #0
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	462a      	mov	r2, r5
 800899c:	f000 fad4 	bl	8008f48 <_realloc_r>
 80089a0:	4606      	mov	r6, r0
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d1e0      	bne.n	8008968 <__ssputs_r+0x5c>
 80089a6:	6921      	ldr	r1, [r4, #16]
 80089a8:	4650      	mov	r0, sl
 80089aa:	f7ff feb7 	bl	800871c <_free_r>
 80089ae:	230c      	movs	r3, #12
 80089b0:	f8ca 3000 	str.w	r3, [sl]
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	e7e9      	b.n	8008996 <__ssputs_r+0x8a>
	...

080089c4 <_svfiprintf_r>:
 80089c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c8:	4698      	mov	r8, r3
 80089ca:	898b      	ldrh	r3, [r1, #12]
 80089cc:	061b      	lsls	r3, r3, #24
 80089ce:	b09d      	sub	sp, #116	@ 0x74
 80089d0:	4607      	mov	r7, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	4614      	mov	r4, r2
 80089d6:	d510      	bpl.n	80089fa <_svfiprintf_r+0x36>
 80089d8:	690b      	ldr	r3, [r1, #16]
 80089da:	b973      	cbnz	r3, 80089fa <_svfiprintf_r+0x36>
 80089dc:	2140      	movs	r1, #64	@ 0x40
 80089de:	f7ff ff09 	bl	80087f4 <_malloc_r>
 80089e2:	6028      	str	r0, [r5, #0]
 80089e4:	6128      	str	r0, [r5, #16]
 80089e6:	b930      	cbnz	r0, 80089f6 <_svfiprintf_r+0x32>
 80089e8:	230c      	movs	r3, #12
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	f04f 30ff 	mov.w	r0, #4294967295
 80089f0:	b01d      	add	sp, #116	@ 0x74
 80089f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f6:	2340      	movs	r3, #64	@ 0x40
 80089f8:	616b      	str	r3, [r5, #20]
 80089fa:	2300      	movs	r3, #0
 80089fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fe:	2320      	movs	r3, #32
 8008a00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a08:	2330      	movs	r3, #48	@ 0x30
 8008a0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ba8 <_svfiprintf_r+0x1e4>
 8008a0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a12:	f04f 0901 	mov.w	r9, #1
 8008a16:	4623      	mov	r3, r4
 8008a18:	469a      	mov	sl, r3
 8008a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a1e:	b10a      	cbz	r2, 8008a24 <_svfiprintf_r+0x60>
 8008a20:	2a25      	cmp	r2, #37	@ 0x25
 8008a22:	d1f9      	bne.n	8008a18 <_svfiprintf_r+0x54>
 8008a24:	ebba 0b04 	subs.w	fp, sl, r4
 8008a28:	d00b      	beq.n	8008a42 <_svfiprintf_r+0x7e>
 8008a2a:	465b      	mov	r3, fp
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff ff6b 	bl	800890c <__ssputs_r>
 8008a36:	3001      	adds	r0, #1
 8008a38:	f000 80a7 	beq.w	8008b8a <_svfiprintf_r+0x1c6>
 8008a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a3e:	445a      	add	r2, fp
 8008a40:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a42:	f89a 3000 	ldrb.w	r3, [sl]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 809f 	beq.w	8008b8a <_svfiprintf_r+0x1c6>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a56:	f10a 0a01 	add.w	sl, sl, #1
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	9307      	str	r3, [sp, #28]
 8008a5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a62:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a64:	4654      	mov	r4, sl
 8008a66:	2205      	movs	r2, #5
 8008a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6c:	484e      	ldr	r0, [pc, #312]	@ (8008ba8 <_svfiprintf_r+0x1e4>)
 8008a6e:	f7f7 fbb7 	bl	80001e0 <memchr>
 8008a72:	9a04      	ldr	r2, [sp, #16]
 8008a74:	b9d8      	cbnz	r0, 8008aae <_svfiprintf_r+0xea>
 8008a76:	06d0      	lsls	r0, r2, #27
 8008a78:	bf44      	itt	mi
 8008a7a:	2320      	movmi	r3, #32
 8008a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a80:	0711      	lsls	r1, r2, #28
 8008a82:	bf44      	itt	mi
 8008a84:	232b      	movmi	r3, #43	@ 0x2b
 8008a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a90:	d015      	beq.n	8008abe <_svfiprintf_r+0xfa>
 8008a92:	9a07      	ldr	r2, [sp, #28]
 8008a94:	4654      	mov	r4, sl
 8008a96:	2000      	movs	r0, #0
 8008a98:	f04f 0c0a 	mov.w	ip, #10
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa2:	3b30      	subs	r3, #48	@ 0x30
 8008aa4:	2b09      	cmp	r3, #9
 8008aa6:	d94b      	bls.n	8008b40 <_svfiprintf_r+0x17c>
 8008aa8:	b1b0      	cbz	r0, 8008ad8 <_svfiprintf_r+0x114>
 8008aaa:	9207      	str	r2, [sp, #28]
 8008aac:	e014      	b.n	8008ad8 <_svfiprintf_r+0x114>
 8008aae:	eba0 0308 	sub.w	r3, r0, r8
 8008ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	9304      	str	r3, [sp, #16]
 8008aba:	46a2      	mov	sl, r4
 8008abc:	e7d2      	b.n	8008a64 <_svfiprintf_r+0xa0>
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	1d19      	adds	r1, r3, #4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	9103      	str	r1, [sp, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	bfbb      	ittet	lt
 8008aca:	425b      	neglt	r3, r3
 8008acc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ad0:	9307      	strge	r3, [sp, #28]
 8008ad2:	9307      	strlt	r3, [sp, #28]
 8008ad4:	bfb8      	it	lt
 8008ad6:	9204      	strlt	r2, [sp, #16]
 8008ad8:	7823      	ldrb	r3, [r4, #0]
 8008ada:	2b2e      	cmp	r3, #46	@ 0x2e
 8008adc:	d10a      	bne.n	8008af4 <_svfiprintf_r+0x130>
 8008ade:	7863      	ldrb	r3, [r4, #1]
 8008ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae2:	d132      	bne.n	8008b4a <_svfiprintf_r+0x186>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	1d1a      	adds	r2, r3, #4
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	9203      	str	r2, [sp, #12]
 8008aec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008af0:	3402      	adds	r4, #2
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008bb8 <_svfiprintf_r+0x1f4>
 8008af8:	7821      	ldrb	r1, [r4, #0]
 8008afa:	2203      	movs	r2, #3
 8008afc:	4650      	mov	r0, sl
 8008afe:	f7f7 fb6f 	bl	80001e0 <memchr>
 8008b02:	b138      	cbz	r0, 8008b14 <_svfiprintf_r+0x150>
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	eba0 000a 	sub.w	r0, r0, sl
 8008b0a:	2240      	movs	r2, #64	@ 0x40
 8008b0c:	4082      	lsls	r2, r0
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	3401      	adds	r4, #1
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b18:	4824      	ldr	r0, [pc, #144]	@ (8008bac <_svfiprintf_r+0x1e8>)
 8008b1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b1e:	2206      	movs	r2, #6
 8008b20:	f7f7 fb5e 	bl	80001e0 <memchr>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d036      	beq.n	8008b96 <_svfiprintf_r+0x1d2>
 8008b28:	4b21      	ldr	r3, [pc, #132]	@ (8008bb0 <_svfiprintf_r+0x1ec>)
 8008b2a:	bb1b      	cbnz	r3, 8008b74 <_svfiprintf_r+0x1b0>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	3307      	adds	r3, #7
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	3308      	adds	r3, #8
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b3a:	4433      	add	r3, r6
 8008b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b3e:	e76a      	b.n	8008a16 <_svfiprintf_r+0x52>
 8008b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b44:	460c      	mov	r4, r1
 8008b46:	2001      	movs	r0, #1
 8008b48:	e7a8      	b.n	8008a9c <_svfiprintf_r+0xd8>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	4619      	mov	r1, r3
 8008b52:	f04f 0c0a 	mov.w	ip, #10
 8008b56:	4620      	mov	r0, r4
 8008b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5c:	3a30      	subs	r2, #48	@ 0x30
 8008b5e:	2a09      	cmp	r2, #9
 8008b60:	d903      	bls.n	8008b6a <_svfiprintf_r+0x1a6>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0c6      	beq.n	8008af4 <_svfiprintf_r+0x130>
 8008b66:	9105      	str	r1, [sp, #20]
 8008b68:	e7c4      	b.n	8008af4 <_svfiprintf_r+0x130>
 8008b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b6e:	4604      	mov	r4, r0
 8008b70:	2301      	movs	r3, #1
 8008b72:	e7f0      	b.n	8008b56 <_svfiprintf_r+0x192>
 8008b74:	ab03      	add	r3, sp, #12
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	462a      	mov	r2, r5
 8008b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb4 <_svfiprintf_r+0x1f0>)
 8008b7c:	a904      	add	r1, sp, #16
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f3af 8000 	nop.w
 8008b84:	1c42      	adds	r2, r0, #1
 8008b86:	4606      	mov	r6, r0
 8008b88:	d1d6      	bne.n	8008b38 <_svfiprintf_r+0x174>
 8008b8a:	89ab      	ldrh	r3, [r5, #12]
 8008b8c:	065b      	lsls	r3, r3, #25
 8008b8e:	f53f af2d 	bmi.w	80089ec <_svfiprintf_r+0x28>
 8008b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b94:	e72c      	b.n	80089f0 <_svfiprintf_r+0x2c>
 8008b96:	ab03      	add	r3, sp, #12
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	462a      	mov	r2, r5
 8008b9c:	4b05      	ldr	r3, [pc, #20]	@ (8008bb4 <_svfiprintf_r+0x1f0>)
 8008b9e:	a904      	add	r1, sp, #16
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f000 f879 	bl	8008c98 <_printf_i>
 8008ba6:	e7ed      	b.n	8008b84 <_svfiprintf_r+0x1c0>
 8008ba8:	0800910c 	.word	0x0800910c
 8008bac:	08009116 	.word	0x08009116
 8008bb0:	00000000 	.word	0x00000000
 8008bb4:	0800890d 	.word	0x0800890d
 8008bb8:	08009112 	.word	0x08009112

08008bbc <_printf_common>:
 8008bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	4698      	mov	r8, r3
 8008bc4:	688a      	ldr	r2, [r1, #8]
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	bfb8      	it	lt
 8008bd0:	4613      	movlt	r3, r2
 8008bd2:	6033      	str	r3, [r6, #0]
 8008bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008bd8:	4607      	mov	r7, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b10a      	cbz	r2, 8008be2 <_printf_common+0x26>
 8008bde:	3301      	adds	r3, #1
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	0699      	lsls	r1, r3, #26
 8008be6:	bf42      	ittt	mi
 8008be8:	6833      	ldrmi	r3, [r6, #0]
 8008bea:	3302      	addmi	r3, #2
 8008bec:	6033      	strmi	r3, [r6, #0]
 8008bee:	6825      	ldr	r5, [r4, #0]
 8008bf0:	f015 0506 	ands.w	r5, r5, #6
 8008bf4:	d106      	bne.n	8008c04 <_printf_common+0x48>
 8008bf6:	f104 0a19 	add.w	sl, r4, #25
 8008bfa:	68e3      	ldr	r3, [r4, #12]
 8008bfc:	6832      	ldr	r2, [r6, #0]
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	dc26      	bgt.n	8008c52 <_printf_common+0x96>
 8008c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c08:	6822      	ldr	r2, [r4, #0]
 8008c0a:	3b00      	subs	r3, #0
 8008c0c:	bf18      	it	ne
 8008c0e:	2301      	movne	r3, #1
 8008c10:	0692      	lsls	r2, r2, #26
 8008c12:	d42b      	bmi.n	8008c6c <_printf_common+0xb0>
 8008c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c18:	4641      	mov	r1, r8
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	47c8      	blx	r9
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d01e      	beq.n	8008c60 <_printf_common+0xa4>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	6922      	ldr	r2, [r4, #16]
 8008c26:	f003 0306 	and.w	r3, r3, #6
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	bf02      	ittt	eq
 8008c2e:	68e5      	ldreq	r5, [r4, #12]
 8008c30:	6833      	ldreq	r3, [r6, #0]
 8008c32:	1aed      	subeq	r5, r5, r3
 8008c34:	68a3      	ldr	r3, [r4, #8]
 8008c36:	bf0c      	ite	eq
 8008c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c3c:	2500      	movne	r5, #0
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	bfc4      	itt	gt
 8008c42:	1a9b      	subgt	r3, r3, r2
 8008c44:	18ed      	addgt	r5, r5, r3
 8008c46:	2600      	movs	r6, #0
 8008c48:	341a      	adds	r4, #26
 8008c4a:	42b5      	cmp	r5, r6
 8008c4c:	d11a      	bne.n	8008c84 <_printf_common+0xc8>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e008      	b.n	8008c64 <_printf_common+0xa8>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4652      	mov	r2, sl
 8008c56:	4641      	mov	r1, r8
 8008c58:	4638      	mov	r0, r7
 8008c5a:	47c8      	blx	r9
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d103      	bne.n	8008c68 <_printf_common+0xac>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	3501      	adds	r5, #1
 8008c6a:	e7c6      	b.n	8008bfa <_printf_common+0x3e>
 8008c6c:	18e1      	adds	r1, r4, r3
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	2030      	movs	r0, #48	@ 0x30
 8008c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c76:	4422      	add	r2, r4
 8008c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c80:	3302      	adds	r3, #2
 8008c82:	e7c7      	b.n	8008c14 <_printf_common+0x58>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4622      	mov	r2, r4
 8008c88:	4641      	mov	r1, r8
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	47c8      	blx	r9
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d0e6      	beq.n	8008c60 <_printf_common+0xa4>
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7d9      	b.n	8008c4a <_printf_common+0x8e>
	...

08008c98 <_printf_i>:
 8008c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9c:	7e0f      	ldrb	r7, [r1, #24]
 8008c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ca0:	2f78      	cmp	r7, #120	@ 0x78
 8008ca2:	4691      	mov	r9, r2
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cae:	d807      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cb0:	2f62      	cmp	r7, #98	@ 0x62
 8008cb2:	d80a      	bhi.n	8008cca <_printf_i+0x32>
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	f000 80d2 	beq.w	8008e5e <_printf_i+0x1c6>
 8008cba:	2f58      	cmp	r7, #88	@ 0x58
 8008cbc:	f000 80b9 	beq.w	8008e32 <_printf_i+0x19a>
 8008cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cc8:	e03a      	b.n	8008d40 <_printf_i+0xa8>
 8008cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cce:	2b15      	cmp	r3, #21
 8008cd0:	d8f6      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8008cd8 <_printf_i+0x40>)
 8008cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cd8:	08008d31 	.word	0x08008d31
 8008cdc:	08008d45 	.word	0x08008d45
 8008ce0:	08008cc1 	.word	0x08008cc1
 8008ce4:	08008cc1 	.word	0x08008cc1
 8008ce8:	08008cc1 	.word	0x08008cc1
 8008cec:	08008cc1 	.word	0x08008cc1
 8008cf0:	08008d45 	.word	0x08008d45
 8008cf4:	08008cc1 	.word	0x08008cc1
 8008cf8:	08008cc1 	.word	0x08008cc1
 8008cfc:	08008cc1 	.word	0x08008cc1
 8008d00:	08008cc1 	.word	0x08008cc1
 8008d04:	08008e45 	.word	0x08008e45
 8008d08:	08008d6f 	.word	0x08008d6f
 8008d0c:	08008dff 	.word	0x08008dff
 8008d10:	08008cc1 	.word	0x08008cc1
 8008d14:	08008cc1 	.word	0x08008cc1
 8008d18:	08008e67 	.word	0x08008e67
 8008d1c:	08008cc1 	.word	0x08008cc1
 8008d20:	08008d6f 	.word	0x08008d6f
 8008d24:	08008cc1 	.word	0x08008cc1
 8008d28:	08008cc1 	.word	0x08008cc1
 8008d2c:	08008e07 	.word	0x08008e07
 8008d30:	6833      	ldr	r3, [r6, #0]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6032      	str	r2, [r6, #0]
 8008d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d40:	2301      	movs	r3, #1
 8008d42:	e09d      	b.n	8008e80 <_printf_i+0x1e8>
 8008d44:	6833      	ldr	r3, [r6, #0]
 8008d46:	6820      	ldr	r0, [r4, #0]
 8008d48:	1d19      	adds	r1, r3, #4
 8008d4a:	6031      	str	r1, [r6, #0]
 8008d4c:	0606      	lsls	r6, r0, #24
 8008d4e:	d501      	bpl.n	8008d54 <_printf_i+0xbc>
 8008d50:	681d      	ldr	r5, [r3, #0]
 8008d52:	e003      	b.n	8008d5c <_printf_i+0xc4>
 8008d54:	0645      	lsls	r5, r0, #25
 8008d56:	d5fb      	bpl.n	8008d50 <_printf_i+0xb8>
 8008d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d5c:	2d00      	cmp	r5, #0
 8008d5e:	da03      	bge.n	8008d68 <_printf_i+0xd0>
 8008d60:	232d      	movs	r3, #45	@ 0x2d
 8008d62:	426d      	negs	r5, r5
 8008d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d68:	4859      	ldr	r0, [pc, #356]	@ (8008ed0 <_printf_i+0x238>)
 8008d6a:	230a      	movs	r3, #10
 8008d6c:	e011      	b.n	8008d92 <_printf_i+0xfa>
 8008d6e:	6821      	ldr	r1, [r4, #0]
 8008d70:	6833      	ldr	r3, [r6, #0]
 8008d72:	0608      	lsls	r0, r1, #24
 8008d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d78:	d402      	bmi.n	8008d80 <_printf_i+0xe8>
 8008d7a:	0649      	lsls	r1, r1, #25
 8008d7c:	bf48      	it	mi
 8008d7e:	b2ad      	uxthmi	r5, r5
 8008d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d82:	4853      	ldr	r0, [pc, #332]	@ (8008ed0 <_printf_i+0x238>)
 8008d84:	6033      	str	r3, [r6, #0]
 8008d86:	bf14      	ite	ne
 8008d88:	230a      	movne	r3, #10
 8008d8a:	2308      	moveq	r3, #8
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d92:	6866      	ldr	r6, [r4, #4]
 8008d94:	60a6      	str	r6, [r4, #8]
 8008d96:	2e00      	cmp	r6, #0
 8008d98:	bfa2      	ittt	ge
 8008d9a:	6821      	ldrge	r1, [r4, #0]
 8008d9c:	f021 0104 	bicge.w	r1, r1, #4
 8008da0:	6021      	strge	r1, [r4, #0]
 8008da2:	b90d      	cbnz	r5, 8008da8 <_printf_i+0x110>
 8008da4:	2e00      	cmp	r6, #0
 8008da6:	d04b      	beq.n	8008e40 <_printf_i+0x1a8>
 8008da8:	4616      	mov	r6, r2
 8008daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dae:	fb03 5711 	mls	r7, r3, r1, r5
 8008db2:	5dc7      	ldrb	r7, [r0, r7]
 8008db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008db8:	462f      	mov	r7, r5
 8008dba:	42bb      	cmp	r3, r7
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	d9f4      	bls.n	8008daa <_printf_i+0x112>
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d10b      	bne.n	8008ddc <_printf_i+0x144>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	07df      	lsls	r7, r3, #31
 8008dc8:	d508      	bpl.n	8008ddc <_printf_i+0x144>
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	6861      	ldr	r1, [r4, #4]
 8008dce:	4299      	cmp	r1, r3
 8008dd0:	bfde      	ittt	le
 8008dd2:	2330      	movle	r3, #48	@ 0x30
 8008dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008dd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ddc:	1b92      	subs	r2, r2, r6
 8008dde:	6122      	str	r2, [r4, #16]
 8008de0:	f8cd a000 	str.w	sl, [sp]
 8008de4:	464b      	mov	r3, r9
 8008de6:	aa03      	add	r2, sp, #12
 8008de8:	4621      	mov	r1, r4
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7ff fee6 	bl	8008bbc <_printf_common>
 8008df0:	3001      	adds	r0, #1
 8008df2:	d14a      	bne.n	8008e8a <_printf_i+0x1f2>
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	b004      	add	sp, #16
 8008dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	f043 0320 	orr.w	r3, r3, #32
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	4833      	ldr	r0, [pc, #204]	@ (8008ed4 <_printf_i+0x23c>)
 8008e08:	2778      	movs	r7, #120	@ 0x78
 8008e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	6831      	ldr	r1, [r6, #0]
 8008e12:	061f      	lsls	r7, r3, #24
 8008e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e18:	d402      	bmi.n	8008e20 <_printf_i+0x188>
 8008e1a:	065f      	lsls	r7, r3, #25
 8008e1c:	bf48      	it	mi
 8008e1e:	b2ad      	uxthmi	r5, r5
 8008e20:	6031      	str	r1, [r6, #0]
 8008e22:	07d9      	lsls	r1, r3, #31
 8008e24:	bf44      	itt	mi
 8008e26:	f043 0320 	orrmi.w	r3, r3, #32
 8008e2a:	6023      	strmi	r3, [r4, #0]
 8008e2c:	b11d      	cbz	r5, 8008e36 <_printf_i+0x19e>
 8008e2e:	2310      	movs	r3, #16
 8008e30:	e7ac      	b.n	8008d8c <_printf_i+0xf4>
 8008e32:	4827      	ldr	r0, [pc, #156]	@ (8008ed0 <_printf_i+0x238>)
 8008e34:	e7e9      	b.n	8008e0a <_printf_i+0x172>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	f023 0320 	bic.w	r3, r3, #32
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	e7f6      	b.n	8008e2e <_printf_i+0x196>
 8008e40:	4616      	mov	r6, r2
 8008e42:	e7bd      	b.n	8008dc0 <_printf_i+0x128>
 8008e44:	6833      	ldr	r3, [r6, #0]
 8008e46:	6825      	ldr	r5, [r4, #0]
 8008e48:	6961      	ldr	r1, [r4, #20]
 8008e4a:	1d18      	adds	r0, r3, #4
 8008e4c:	6030      	str	r0, [r6, #0]
 8008e4e:	062e      	lsls	r6, r5, #24
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	d501      	bpl.n	8008e58 <_printf_i+0x1c0>
 8008e54:	6019      	str	r1, [r3, #0]
 8008e56:	e002      	b.n	8008e5e <_printf_i+0x1c6>
 8008e58:	0668      	lsls	r0, r5, #25
 8008e5a:	d5fb      	bpl.n	8008e54 <_printf_i+0x1bc>
 8008e5c:	8019      	strh	r1, [r3, #0]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	4616      	mov	r6, r2
 8008e64:	e7bc      	b.n	8008de0 <_printf_i+0x148>
 8008e66:	6833      	ldr	r3, [r6, #0]
 8008e68:	1d1a      	adds	r2, r3, #4
 8008e6a:	6032      	str	r2, [r6, #0]
 8008e6c:	681e      	ldr	r6, [r3, #0]
 8008e6e:	6862      	ldr	r2, [r4, #4]
 8008e70:	2100      	movs	r1, #0
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7f7 f9b4 	bl	80001e0 <memchr>
 8008e78:	b108      	cbz	r0, 8008e7e <_printf_i+0x1e6>
 8008e7a:	1b80      	subs	r0, r0, r6
 8008e7c:	6060      	str	r0, [r4, #4]
 8008e7e:	6863      	ldr	r3, [r4, #4]
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	2300      	movs	r3, #0
 8008e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e88:	e7aa      	b.n	8008de0 <_printf_i+0x148>
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4640      	mov	r0, r8
 8008e92:	47d0      	blx	sl
 8008e94:	3001      	adds	r0, #1
 8008e96:	d0ad      	beq.n	8008df4 <_printf_i+0x15c>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	079b      	lsls	r3, r3, #30
 8008e9c:	d413      	bmi.n	8008ec6 <_printf_i+0x22e>
 8008e9e:	68e0      	ldr	r0, [r4, #12]
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	4298      	cmp	r0, r3
 8008ea4:	bfb8      	it	lt
 8008ea6:	4618      	movlt	r0, r3
 8008ea8:	e7a6      	b.n	8008df8 <_printf_i+0x160>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4632      	mov	r2, r6
 8008eae:	4649      	mov	r1, r9
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	47d0      	blx	sl
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d09d      	beq.n	8008df4 <_printf_i+0x15c>
 8008eb8:	3501      	adds	r5, #1
 8008eba:	68e3      	ldr	r3, [r4, #12]
 8008ebc:	9903      	ldr	r1, [sp, #12]
 8008ebe:	1a5b      	subs	r3, r3, r1
 8008ec0:	42ab      	cmp	r3, r5
 8008ec2:	dcf2      	bgt.n	8008eaa <_printf_i+0x212>
 8008ec4:	e7eb      	b.n	8008e9e <_printf_i+0x206>
 8008ec6:	2500      	movs	r5, #0
 8008ec8:	f104 0619 	add.w	r6, r4, #25
 8008ecc:	e7f5      	b.n	8008eba <_printf_i+0x222>
 8008ece:	bf00      	nop
 8008ed0:	0800911d 	.word	0x0800911d
 8008ed4:	0800912e 	.word	0x0800912e

08008ed8 <memmove>:
 8008ed8:	4288      	cmp	r0, r1
 8008eda:	b510      	push	{r4, lr}
 8008edc:	eb01 0402 	add.w	r4, r1, r2
 8008ee0:	d902      	bls.n	8008ee8 <memmove+0x10>
 8008ee2:	4284      	cmp	r4, r0
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	d807      	bhi.n	8008ef8 <memmove+0x20>
 8008ee8:	1e43      	subs	r3, r0, #1
 8008eea:	42a1      	cmp	r1, r4
 8008eec:	d008      	beq.n	8008f00 <memmove+0x28>
 8008eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ef6:	e7f8      	b.n	8008eea <memmove+0x12>
 8008ef8:	4402      	add	r2, r0
 8008efa:	4601      	mov	r1, r0
 8008efc:	428a      	cmp	r2, r1
 8008efe:	d100      	bne.n	8008f02 <memmove+0x2a>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f0a:	e7f7      	b.n	8008efc <memmove+0x24>

08008f0c <_sbrk_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	@ (8008f28 <_sbrk_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f8 f990 	bl	800123c <_sbrk>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_sbrk_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_sbrk_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20000430 	.word	0x20000430

08008f2c <memcpy>:
 8008f2c:	440a      	add	r2, r1
 8008f2e:	4291      	cmp	r1, r2
 8008f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f34:	d100      	bne.n	8008f38 <memcpy+0xc>
 8008f36:	4770      	bx	lr
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f42:	4291      	cmp	r1, r2
 8008f44:	d1f9      	bne.n	8008f3a <memcpy+0xe>
 8008f46:	bd10      	pop	{r4, pc}

08008f48 <_realloc_r>:
 8008f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	4680      	mov	r8, r0
 8008f4e:	4615      	mov	r5, r2
 8008f50:	460c      	mov	r4, r1
 8008f52:	b921      	cbnz	r1, 8008f5e <_realloc_r+0x16>
 8008f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	4611      	mov	r1, r2
 8008f5a:	f7ff bc4b 	b.w	80087f4 <_malloc_r>
 8008f5e:	b92a      	cbnz	r2, 8008f6c <_realloc_r+0x24>
 8008f60:	f7ff fbdc 	bl	800871c <_free_r>
 8008f64:	2400      	movs	r4, #0
 8008f66:	4620      	mov	r0, r4
 8008f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f6c:	f000 f81a 	bl	8008fa4 <_malloc_usable_size_r>
 8008f70:	4285      	cmp	r5, r0
 8008f72:	4606      	mov	r6, r0
 8008f74:	d802      	bhi.n	8008f7c <_realloc_r+0x34>
 8008f76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f7a:	d8f4      	bhi.n	8008f66 <_realloc_r+0x1e>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4640      	mov	r0, r8
 8008f80:	f7ff fc38 	bl	80087f4 <_malloc_r>
 8008f84:	4607      	mov	r7, r0
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0ec      	beq.n	8008f64 <_realloc_r+0x1c>
 8008f8a:	42b5      	cmp	r5, r6
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4621      	mov	r1, r4
 8008f90:	bf28      	it	cs
 8008f92:	4632      	movcs	r2, r6
 8008f94:	f7ff ffca 	bl	8008f2c <memcpy>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	f7ff fbbe 	bl	800871c <_free_r>
 8008fa0:	463c      	mov	r4, r7
 8008fa2:	e7e0      	b.n	8008f66 <_realloc_r+0x1e>

08008fa4 <_malloc_usable_size_r>:
 8008fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa8:	1f18      	subs	r0, r3, #4
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bfbc      	itt	lt
 8008fae:	580b      	ldrlt	r3, [r1, r0]
 8008fb0:	18c0      	addlt	r0, r0, r3
 8008fb2:	4770      	bx	lr

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
