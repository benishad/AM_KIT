
AMKIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800a960  0800a960  0000b960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae90  0800ae90  0000d114  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae90  0800ae90  0000be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae98  0800ae98  0000d114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae98  0800ae98  0000be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800aea0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000114  10000000  0800aefc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000904  2000005c  2000005c  0000e05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000960  20000960  0000e05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a114  00000000  00000000  0000d144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aac  00000000  00000000  00027258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  0002ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001300  00000000  00000000  0002c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f5e  00000000  00000000  0002d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002007e  00000000  00000000  000537de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db152  00000000  00000000  0007385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e9ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000701c  00000000  00000000  0014e9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00155a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a948 	.word	0x0800a948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800a948 	.word	0x0800a948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ESP_AT_Boot_5>:

}

// 거의 최종 완성형 명령 전송 함수
void ESP_AT_Boot_5(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8000576:	af00      	add	r7, sp, #0
    char respBuf[RESP_BUF_SIZE];
    size_t pos = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    uint8_t ch;
    uint32_t tick_0 = HAL_GetTick();
 800057e:	f001 fd97 	bl	80020b0 <HAL_GetTick>
 8000582:	f8c7 0410 	str.w	r0, [r7, #1040]	@ 0x410

    // (1) AT+CWMODE? 전송
    const char cmd[] = "AT\r\n";
 8000586:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800058a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800058e:	4a54      	ldr	r2, [pc, #336]	@ (80006e0 <ESP_AT_Boot_5+0x170>)
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	6018      	str	r0, [r3, #0]
 8000596:	3304      	adds	r3, #4
 8000598:	7019      	strb	r1, [r3, #0]
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, sizeof(cmd)-1, HAL_MAX_DELAY) != HAL_OK)
 800059a:	1d39      	adds	r1, r7, #4
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	2204      	movs	r2, #4
 80005a2:	4850      	ldr	r0, [pc, #320]	@ (80006e4 <ESP_AT_Boot_5+0x174>)
 80005a4:	f004 fdac 	bl	8005100 <HAL_UART_Transmit>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d03f      	beq.n	800062e <ESP_AT_Boot_5+0xbe>
    {
        Error_Handler();
 80005ae:	f000 ff55 	bl	800145c <Error_Handler>
    }

    // (2) END_MARKER 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 80005b2:	e03c      	b.n	800062e <ESP_AT_Boot_5+0xbe>
    {
        // 1바이트씩 최대 BYTE_RX_TIMEOUT 동안 대기
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 80005b4:	f107 010b 	add.w	r1, r7, #11
 80005b8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005bc:	2201      	movs	r2, #1
 80005be:	4849      	ldr	r0, [pc, #292]	@ (80006e4 <ESP_AT_Boot_5+0x174>)
 80005c0:	f004 fe29 	bl	8005216 <HAL_UART_Receive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d127      	bne.n	800061a <ESP_AT_Boot_5+0xaa>
        {
            respBuf[pos++] = (char)ch;
 80005ca:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	f8c7 2414 	str.w	r2, [r7, #1044]	@ 0x414
 80005d4:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 80005d8:	f2a2 420d 	subw	r2, r2, #1037	@ 0x40d
 80005dc:	7811      	ldrb	r1, [r2, #0]
 80005de:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 80005e2:	f2a2 420c 	subw	r2, r2, #1036	@ 0x40c
 80005e6:	54d1      	strb	r1, [r2, r3]

            // 최근 들어온 END_MARKER와 일치하면 종료
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 80005e8:	2206      	movs	r2, #6
 80005ea:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d30e      	bcc.n	8000610 <ESP_AT_Boot_5+0xa0>
 80005f2:	2206      	movs	r2, #6
 80005f4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	f107 020c 	add.w	r2, r7, #12
 80005fe:	4413      	add	r3, r2
 8000600:	2206      	movs	r2, #6
 8000602:	4939      	ldr	r1, [pc, #228]	@ (80006e8 <ESP_AT_Boot_5+0x178>)
 8000604:	4618      	mov	r0, r3
 8000606:	f009 f85f 	bl	80096c8 <memcmp>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d015      	beq.n	800063c <ESP_AT_Boot_5+0xcc>
            {
                break;
            }

            // 받은 순간 전체 타이머 리셋
            tick_0 = HAL_GetTick();
 8000610:	f001 fd4e 	bl	80020b0 <HAL_GetTick>
 8000614:	f8c7 0410 	str.w	r0, [r7, #1040]	@ 0x410
 8000618:	e009      	b.n	800062e <ESP_AT_Boot_5+0xbe>
        }
        else
        {
            // 전체 OVERALL_TIMEOUT 경과 시 강제 종료
            if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 800061a:	f001 fd49 	bl	80020b0 <HAL_GetTick>
 800061e:	4602      	mov	r2, r0
 8000620:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800062a:	4293      	cmp	r3, r2
 800062c:	d808      	bhi.n	8000640 <ESP_AT_Boot_5+0xd0>
    while (pos < RESP_BUF_SIZE - 1)
 800062e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000632:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000636:	4293      	cmp	r3, r2
 8000638:	d9bc      	bls.n	80005b4 <ESP_AT_Boot_5+0x44>
 800063a:	e002      	b.n	8000642 <ESP_AT_Boot_5+0xd2>
                break;
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <ESP_AT_Boot_5+0xd2>
            {
                break;
 8000640:	bf00      	nop
            }
        }
    }

    // (3) OK 이후 추가 데이터 유무 확인 (POST_OK_TIMEOUT ms 동안)
    uint32_t tick_1 = HAL_GetTick();
 8000642:	f001 fd35 	bl	80020b0 <HAL_GetTick>
 8000646:	f8c7 040c 	str.w	r0, [r7, #1036]	@ 0x40c

    while (pos < RESP_BUF_SIZE-1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 800064a:	e01d      	b.n	8000688 <ESP_AT_Boot_5+0x118>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 800064c:	f107 010b 	add.w	r1, r7, #11
 8000650:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000654:	2201      	movs	r2, #1
 8000656:	4823      	ldr	r0, [pc, #140]	@ (80006e4 <ESP_AT_Boot_5+0x174>)
 8000658:	f004 fddd 	bl	8005216 <HAL_UART_Receive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d112      	bne.n	8000688 <ESP_AT_Boot_5+0x118>
        {
            respBuf[pos++] = ch;
 8000662:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	f8c7 2414 	str.w	r2, [r7, #1044]	@ 0x414
 800066c:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8000670:	f2a2 420d 	subw	r2, r2, #1037	@ 0x40d
 8000674:	7811      	ldrb	r1, [r2, #0]
 8000676:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800067a:	f2a2 420c 	subw	r2, r2, #1036	@ 0x40c
 800067e:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 새 데이터가 오면 다시 유예 시간만큼 더 기다림
 8000680:	f001 fd16 	bl	80020b0 <HAL_GetTick>
 8000684:	f8c7 040c 	str.w	r0, [r7, #1036]	@ 0x40c
    while (pos < RESP_BUF_SIZE-1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8000688:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800068c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000690:	4293      	cmp	r3, r2
 8000692:	d808      	bhi.n	80006a6 <ESP_AT_Boot_5+0x136>
 8000694:	f001 fd0c 	bl	80020b0 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80006a4:	d3d2      	bcc.n	800064c <ESP_AT_Boot_5+0xdc>
        }
    }

    respBuf[pos] = '\0';
 80006a6:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80006aa:	f2a3 420c 	subw	r2, r3, #1036	@ 0x40c
 80006ae:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80006b2:	4413      	add	r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]

    // (3) PC로 한 번에 출력
    if (pos > 0)
 80006b8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d009      	beq.n	80006d4 <ESP_AT_Boot_5+0x164>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 80006c0:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	4807      	ldr	r0, [pc, #28]	@ (80006ec <ESP_AT_Boot_5+0x17c>)
 80006d0:	f004 fd16 	bl	8005100 <HAL_UART_Transmit>
    }
}
 80006d4:	bf00      	nop
 80006d6:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	0800a980 	.word	0x0800a980
 80006e4:	200006e0 	.word	0x200006e0
 80006e8:	0800ac80 	.word	0x0800ac80
 80006ec:	20000698 	.word	0x20000698

080006f0 <ESP_AT_Send_WiFi_Config>:


// SD카드에 WIFI 설정을 가져롸 AT 명령어로 ESP32에 전송하는 함수
int ESP_AT_Send_WiFi_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0a6      	sub	sp, #152	@ 0x98
 80006f4:	af02      	add	r7, sp, #8
    // SD_Card_Get_WiFi_SSID(void) 함수로 SSID를 가져옴
    const char* ssid = SD_Card_Get_WiFi_SSID();
 80006f6:	f000 ffe3 	bl	80016c0 <SD_Card_Get_WiFi_SSID>
 80006fa:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    const char* password = SD_Card_Get_WiFi_Password();
 80006fe:	f001 f85b 	bl	80017b8 <SD_Card_Get_WiFi_Password>
 8000702:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    char cmd[128]={0}; // AT 명령어를 저장할 버퍼
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	227c      	movs	r2, #124	@ 0x7c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f008 ffe8 	bl	80096e8 <memset>

    int len = snprintf(cmd, sizeof(cmd), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000718:	1d38      	adds	r0, r7, #4
 800071a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <ESP_AT_Send_WiFi_Config+0x68>)
 8000726:	2180      	movs	r1, #128	@ 0x80
 8000728:	f008 ff6e 	bl	8009608 <sniprintf>
 800072c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    if (len < 0 || len >= (int)sizeof(cmd))
 8000730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000734:	2b00      	cmp	r3, #0
 8000736:	db03      	blt.n	8000740 <ESP_AT_Send_WiFi_Config+0x50>
 8000738:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800073c:	2b7f      	cmp	r3, #127	@ 0x7f
 800073e:	dd01      	ble.n	8000744 <ESP_AT_Send_WiFi_Config+0x54>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8000740:	f000 fe8c 	bl	800145c <Error_Handler>
    }

    ESP_AT_Send_Command_Sync(cmd);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f808 	bl	800075c <ESP_AT_Send_Command_Sync>

    // // 응답을 uart1로 전송
    // HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);

    // return 0; // 성공
    return 1; // 성공
 800074c:	2301      	movs	r3, #1
}
 800074e:	4618      	mov	r0, r3
 8000750:	3790      	adds	r7, #144	@ 0x90
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	0800a988 	.word	0x0800a988

0800075c <ESP_AT_Send_Command_Sync>:

// 동기방식 ESP32 AT 명령 전송 함수
// 이 함수는 명령어를 전송하고, 응답을 기다려서 결과를 PC(UART1)로 전송합니다.

void ESP_AT_Send_Command_Sync(const char* cmd)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8000762:	af00      	add	r7, sp, #0
 8000764:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000768:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800076c:	6018      	str	r0, [r3, #0]
    char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
 800076e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000772:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	3304      	adds	r3, #4
 800077c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f008 ffb0 	bl	80096e8 <memset>
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 800078e:	f001 fc8f 	bl	80020b0 <HAL_GetTick>
 8000792:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 8000796:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800079a:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	f7ff fd16 	bl	80001d0 <strlen>
 80007a4:	f8c7 0410 	str.w	r0, [r7, #1040]	@ 0x410
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 80007a8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80007b2:	f2a3 411c 	subw	r1, r3, #1052	@ 0x41c
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	6809      	ldr	r1, [r1, #0]
 80007bc:	4858      	ldr	r0, [pc, #352]	@ (8000920 <ESP_AT_Send_Command_Sync+0x1c4>)
 80007be:	f004 fc9f 	bl	8005100 <HAL_UART_Transmit>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d053      	beq.n	8000870 <ESP_AT_Send_Command_Sync+0x114>
    {
        Error_Handler();
 80007c8:	f000 fe48 	bl	800145c <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 80007cc:	e050      	b.n	8000870 <ESP_AT_Send_Command_Sync+0x114>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 80007ce:	f107 010f 	add.w	r1, r7, #15
 80007d2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80007d6:	2201      	movs	r2, #1
 80007d8:	4851      	ldr	r0, [pc, #324]	@ (8000920 <ESP_AT_Send_Command_Sync+0x1c4>)
 80007da:	f004 fd1c 	bl	8005216 <HAL_UART_Receive>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d13b      	bne.n	800085c <ESP_AT_Send_Command_Sync+0x100>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 80007e4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 80007ee:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80007f2:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 80007f6:	7811      	ldrb	r1, [r2, #0]
 80007f8:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80007fc:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8000800:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 8000802:	2206      	movs	r2, #6
 8000804:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000808:	4293      	cmp	r3, r2
 800080a:	d30e      	bcc.n	800082a <ESP_AT_Send_Command_Sync+0xce>
 800080c:	2206      	movs	r2, #6
 800080e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000812:	1a9b      	subs	r3, r3, r2
 8000814:	f107 0210 	add.w	r2, r7, #16
 8000818:	4413      	add	r3, r2
 800081a:	2206      	movs	r2, #6
 800081c:	4941      	ldr	r1, [pc, #260]	@ (8000924 <ESP_AT_Send_Command_Sync+0x1c8>)
 800081e:	4618      	mov	r0, r3
 8000820:	f008 ff52 	bl	80096c8 <memcmp>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d02c      	beq.n	8000884 <ESP_AT_Send_Command_Sync+0x128>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 800082a:	2209      	movs	r2, #9
 800082c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000830:	4293      	cmp	r3, r2
 8000832:	d30e      	bcc.n	8000852 <ESP_AT_Send_Command_Sync+0xf6>
 8000834:	2209      	movs	r2, #9
 8000836:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	f107 0210 	add.w	r2, r7, #16
 8000840:	4413      	add	r3, r2
 8000842:	2209      	movs	r2, #9
 8000844:	4938      	ldr	r1, [pc, #224]	@ (8000928 <ESP_AT_Send_Command_Sync+0x1cc>)
 8000846:	4618      	mov	r0, r3
 8000848:	f008 ff3e 	bl	80096c8 <memcmp>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d015      	beq.n	800087e <ESP_AT_Send_Command_Sync+0x122>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 8000852:	f001 fc2d 	bl	80020b0 <HAL_GetTick>
 8000856:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418
 800085a:	e009      	b.n	8000870 <ESP_AT_Send_Command_Sync+0x114>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 800085c:	f001 fc28 	bl	80020b0 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800086c:	4293      	cmp	r3, r2
 800086e:	d808      	bhi.n	8000882 <ESP_AT_Send_Command_Sync+0x126>
    while (pos < RESP_BUF_SIZE - 1)
 8000870:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000874:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000878:	4293      	cmp	r3, r2
 800087a:	d9a8      	bls.n	80007ce <ESP_AT_Send_Command_Sync+0x72>
 800087c:	e002      	b.n	8000884 <ESP_AT_Send_Command_Sync+0x128>
                break;
 800087e:	bf00      	nop
 8000880:	e000      	b.n	8000884 <ESP_AT_Send_Command_Sync+0x128>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 8000882:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 8000884:	f001 fc14 	bl	80020b0 <HAL_GetTick>
 8000888:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 800088c:	e01d      	b.n	80008ca <ESP_AT_Send_Command_Sync+0x16e>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 800088e:	f107 010f 	add.w	r1, r7, #15
 8000892:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000896:	2201      	movs	r2, #1
 8000898:	4821      	ldr	r0, [pc, #132]	@ (8000920 <ESP_AT_Send_Command_Sync+0x1c4>)
 800089a:	f004 fcbc 	bl	8005216 <HAL_UART_Receive>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d112      	bne.n	80008ca <ESP_AT_Send_Command_Sync+0x16e>
        {
            respBuf[pos++] = ch;
 80008a4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 80008ae:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80008b2:	f2a2 4211 	subw	r2, r2, #1041	@ 0x411
 80008b6:	7811      	ldrb	r1, [r2, #0]
 80008b8:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80008bc:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 80008c0:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 80008c2:	f001 fbf5 	bl	80020b0 <HAL_GetTick>
 80008c6:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 80008ca:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80008ce:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d808      	bhi.n	80008e8 <ESP_AT_Send_Command_Sync+0x18c>
 80008d6:	f001 fbeb 	bl	80020b0 <HAL_GetTick>
 80008da:	4602      	mov	r2, r0
 80008dc:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008e6:	d3d2      	bcc.n	800088e <ESP_AT_Send_Command_Sync+0x132>
        }
    }
    respBuf[pos] = '\0';
 80008e8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80008ec:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 80008f0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80008f4:	4413      	add	r3, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 80008fa:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d009      	beq.n	8000916 <ESP_AT_Send_Command_Sync+0x1ba>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 8000902:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000906:	b29a      	uxth	r2, r3
 8000908:	f107 0110 	add.w	r1, r7, #16
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	4806      	ldr	r0, [pc, #24]	@ (800092c <ESP_AT_Send_Command_Sync+0x1d0>)
 8000912:	f004 fbf5 	bl	8005100 <HAL_UART_Transmit>
    }
}
 8000916:	bf00      	nop
 8000918:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200006e0 	.word	0x200006e0
 8000924:	0800ac80 	.word	0x0800ac80
 8000928:	0800ac88 	.word	0x0800ac88
 800092c:	20000698 	.word	0x20000698

08000930 <ESP_AT_Send_Command_Sync_Get_Result>:

// 동기방식 ESP32 AT 명령 전송 함수
// 반환값으로 응답 문자열을 반환
const char* ESP_AT_Send_Command_Sync_Get_Result(const char* cmd)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    static char    respBuf[RESP_BUF_SIZE] = {0};       // 응답 버퍼
    size_t  pos   = 0;                          // 현재 응답 버퍼 위치
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    uint8_t ch;                                 // 수신된 바이트
    uint32_t tick_0   = HAL_GetTick();          // 전체 타이머 시작
 800093c:	f001 fbb8 	bl	80020b0 <HAL_GetTick>
 8000940:	61b8      	str	r0, [r7, #24]

    // (1) AT 명령 전송
    size_t cmdLen = strlen(cmd);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fc44 	bl	80001d0 <strlen>
 8000948:	6138      	str	r0, [r7, #16]
    if (HAL_UART_Transmit(&huart2, (uint8_t*)cmd, cmdLen, HAL_MAX_DELAY) != HAL_OK)
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	b29a      	uxth	r2, r3
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	4845      	ldr	r0, [pc, #276]	@ (8000a6c <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 8000956:	f004 fbd3 	bl	8005100 <HAL_UART_Transmit>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d042      	beq.n	80009e6 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        Error_Handler();
 8000960:	f000 fd7c 	bl	800145c <Error_Handler>
    }

    // (2) END_MARKER ("\r\nOK\r\n") 까지 수신
    while (pos < RESP_BUF_SIZE - 1)
 8000964:	e03f      	b.n	80009e6 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8000966:	f107 010f 	add.w	r1, r7, #15
 800096a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800096e:	2201      	movs	r2, #1
 8000970:	483e      	ldr	r0, [pc, #248]	@ (8000a6c <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 8000972:	f004 fc50 	bl	8005216 <HAL_UART_Receive>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d12b      	bne.n	80009d4 <ESP_AT_Send_Command_Sync_Get_Result+0xa4>
        {
            respBuf[pos++] = (char)ch;          // 수신된 바이트를 버퍼에 저장
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	61fa      	str	r2, [r7, #28]
 8000982:	7bf9      	ldrb	r1, [r7, #15]
 8000984:	4a3a      	ldr	r2, [pc, #232]	@ (8000a70 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8000986:	54d1      	strb	r1, [r2, r3]

            // 슬라이딩 윈도우로 END_MARKER 일치 검사
            // pos >= END_MARKER_LEN 조건은 END_MARKER 길이만큼의 데이터가 모였는지 확인
            if (pos >= END_MARKER_LEN && memcmp(&respBuf[pos - END_MARKER_LEN], END_MARKER, END_MARKER_LEN) == 0)
 8000988:	2206      	movs	r2, #6
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	4293      	cmp	r3, r2
 800098e:	d30c      	bcc.n	80009aa <ESP_AT_Send_Command_Sync_Get_Result+0x7a>
 8000990:	2206      	movs	r2, #6
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	1a9b      	subs	r3, r3, r2
 8000996:	4a36      	ldr	r2, [pc, #216]	@ (8000a70 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8000998:	4413      	add	r3, r2
 800099a:	2206      	movs	r2, #6
 800099c:	4935      	ldr	r1, [pc, #212]	@ (8000a74 <ESP_AT_Send_Command_Sync_Get_Result+0x144>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 fe92 	bl	80096c8 <memcmp>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d026      	beq.n	80009f8 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
            {
                break;
            }
            // 에러마커 확인
            else if (pos >= ERR_MARKER_LEN && memcmp(&respBuf[pos - ERR_MARKER_LEN], ERR_MARKER, ERR_MARKER_LEN) == 0)
 80009aa:	2209      	movs	r2, #9
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d30c      	bcc.n	80009cc <ESP_AT_Send_Command_Sync_Get_Result+0x9c>
 80009b2:	2209      	movs	r2, #9
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a70 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 80009ba:	4413      	add	r3, r2
 80009bc:	2209      	movs	r2, #9
 80009be:	492e      	ldr	r1, [pc, #184]	@ (8000a78 <ESP_AT_Send_Command_Sync_Get_Result+0x148>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f008 fe81 	bl	80096c8 <memcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d012      	beq.n	80009f2 <ESP_AT_Send_Command_Sync_Get_Result+0xc2>
                // 에러 발생 시 강제 종료
                // pos = 0;  // 버퍼 초기화
                break;
            }

            tick_0 = HAL_GetTick();  // 데이터 수신 시 전체 타이머 리셋
 80009cc:	f001 fb70 	bl	80020b0 <HAL_GetTick>
 80009d0:	61b8      	str	r0, [r7, #24]
 80009d2:	e008      	b.n	80009e6 <ESP_AT_Send_Command_Sync_Get_Result+0xb6>
        }
        else if (HAL_GetTick() - tick_0 > OVERALL_TIMEOUT)
 80009d4:	f001 fb6c 	bl	80020b0 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d807      	bhi.n	80009f6 <ESP_AT_Send_Command_Sync_Get_Result+0xc6>
    while (pos < RESP_BUF_SIZE - 1)
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d9ba      	bls.n	8000966 <ESP_AT_Send_Command_Sync_Get_Result+0x36>
 80009f0:	e002      	b.n	80009f8 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
                break;
 80009f2:	bf00      	nop
 80009f4:	e000      	b.n	80009f8 <ESP_AT_Send_Command_Sync_Get_Result+0xc8>
        {
            // 전체 대기 초과 시 강제 종료
            break;
 80009f6:	bf00      	nop
        }
    }

    // (3) OK 이후 추가 URC 등 있을 수 있으니 잠깐 더 대기하며 수신
    uint32_t tick_1 = HAL_GetTick();
 80009f8:	f001 fb5a 	bl	80020b0 <HAL_GetTick>
 80009fc:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 80009fe:	e013      	b.n	8000a28 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
    {
        if (HAL_UART_Receive(&huart2, &ch, 1, BYTE_RX_TIMEOUT) == HAL_OK)
 8000a00:	f107 010f 	add.w	r1, r7, #15
 8000a04:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <ESP_AT_Send_Command_Sync_Get_Result+0x13c>)
 8000a0c:	f004 fc03 	bl	8005216 <HAL_UART_Receive>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d108      	bne.n	8000a28 <ESP_AT_Send_Command_Sync_Get_Result+0xf8>
        {
            respBuf[pos++] = ch;
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	61fa      	str	r2, [r7, #28]
 8000a1c:	7bf9      	ldrb	r1, [r7, #15]
 8000a1e:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8000a20:	54d1      	strb	r1, [r2, r3]
            tick_1 = HAL_GetTick();  // 추가 데이터 수신 시 유예 시간 리셋
 8000a22:	f001 fb45 	bl	80020b0 <HAL_GetTick>
 8000a26:	6178      	str	r0, [r7, #20]
    while (pos < RESP_BUF_SIZE - 1 && HAL_GetTick() - tick_1 < POST_OK_TIMEOUT)
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d807      	bhi.n	8000a42 <ESP_AT_Send_Command_Sync_Get_Result+0x112>
 8000a32:	f001 fb3d 	bl	80020b0 <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a40:	d3de      	bcc.n	8000a00 <ESP_AT_Send_Command_Sync_Get_Result+0xd0>
        }
    }
    respBuf[pos] = '\0';
 8000a42:	4a0b      	ldr	r2, [pc, #44]	@ (8000a70 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	4413      	add	r3, r2
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]

    // (4) 한 번에 PC(UART1)로 전송
    if (pos > 0)
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <ESP_AT_Send_Command_Sync_Get_Result+0x132>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)respBuf, pos, HAL_MAX_DELAY);
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	4905      	ldr	r1, [pc, #20]	@ (8000a70 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
 8000a5c:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <ESP_AT_Send_Command_Sync_Get_Result+0x14c>)
 8000a5e:	f004 fb4f 	bl	8005100 <HAL_UART_Transmit>
    }

    return respBuf; // 응답 버퍼를 반환
 8000a62:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <ESP_AT_Send_Command_Sync_Get_Result+0x140>)
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200006e0 	.word	0x200006e0
 8000a70:	200000c0 	.word	0x200000c0
 8000a74:	0800ac80 	.word	0x0800ac80
 8000a78:	0800ac88 	.word	0x0800ac88
 8000a7c:	20000698 	.word	0x20000698

08000a80 <ESP_AT_Get_Token>:
    // ESP_AT_Send_Command("AT+CIFSR\r\n");
}


void ESP_AT_Get_Token(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0c6      	sub	sp, #280	@ 0x118
 8000a84:	af00      	add	r7, sp, #0
    const char *response = NULL; // 응답 문자열을 저장할 변수
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    // 1) 보낼 JSON 문자열 정의 (큰 따옴표는 백슬래시로 이스케이프)
    const char *jsonBody = "{\\\"uid\\\":\\\"kimss@andamiro.com\\\"\\,\\\"pwd\\\":\\\"temp1234!\\\"}";
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <ESP_AT_Get_Token+0xf8>)
 8000a8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // 2) AT+HTTPCLIENT 명령어 문자열 생성
    char atCmd[256];
    int len = snprintf(atCmd, sizeof(atCmd),
 8000a92:	4638      	mov	r0, r7
 8000a94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000a98:	4a38      	ldr	r2, [pc, #224]	@ (8000b7c <ESP_AT_Get_Token+0xfc>)
 8000a9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a9e:	f008 fdb3 	bl	8009608 <sniprintf>
 8000aa2:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        "AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/user\",\"dev-api.andamiro.net\",\"/test/user\",2,\"%s\"\r\n",
        jsonBody);
    
    if (len < 0 || len >= (int)sizeof(atCmd)) 
 8000aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db03      	blt.n	8000ab6 <ESP_AT_Get_Token+0x36>
 8000aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ab2:	2bff      	cmp	r3, #255	@ 0xff
 8000ab4:	dd01      	ble.n	8000aba <ESP_AT_Get_Token+0x3a>
    {
        // snprintf 실패 또는 버퍼 부족
        Error_Handler();
 8000ab6:	f000 fcd1 	bl	800145c <Error_Handler>
    }

    // 3) 위 함수로 AT 명령 전송 및 응답 처리
    response = ESP_AT_Send_Command_Sync_Get_Result(atCmd);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff37 	bl	8000930 <ESP_AT_Send_Command_Sync_Get_Result>
 8000ac2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    // response에는 
    //Ast/user","dev-api.andamiro.net","/test/user",2,"{\"uid\":\"kimss@andamiro.com\"\,\"pwd\":\"temp1234!\"}"+HTTPCLIENT:72,{"token":"eEx4NVhXZ2p5MlBBRjJ3eU9CbGJJeUtSbzlvUDU4TzJ0ZCtRSE9FdHZDTT0="}OK
    // 형태의 응답이 저장됨
    // token 값 추출
    const char *tokenStart = strstr(response, "\"token\":\"");
 8000ac6:	492e      	ldr	r1, [pc, #184]	@ (8000b80 <ESP_AT_Get_Token+0x100>)
 8000ac8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8000acc:	f008 fe34 	bl	8009738 <strstr>
 8000ad0:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

    static char token[128]; // 충분히 큰 버퍼

    // "token":" 문자열을 찾아서 토큰 시작 위치를 찾음
    if (tokenStart != NULL) 
 8000ad4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d027      	beq.n	8000b2c <ESP_AT_Get_Token+0xac>
    {
        tokenStart += strlen("\"token\":\""); // 토큰 시작 위치로 이동
 8000adc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ae0:	3309      	adds	r3, #9
 8000ae2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

        const char *tokenEnd = strchr(tokenStart, '\"'); // 다음 큰 따옴표 찾기
 8000ae6:	2122      	movs	r1, #34	@ 0x22
 8000ae8:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000aec:	f008 fe04 	bl	80096f8 <strchr>
 8000af0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
        
        if (tokenEnd != NULL) 
 8000af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d017      	beq.n	8000b2c <ESP_AT_Get_Token+0xac>
        {
            size_t tokenLength = tokenEnd - tokenStart; // 토큰 길이 계산
 8000afc:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000b00:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            
            

            // 순수 토큰만 추출
            if (tokenLength < sizeof(token)) 
 8000b0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000b0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b10:	d80c      	bhi.n	8000b2c <ESP_AT_Get_Token+0xac>
            {
                //tokenLength -= 2; // 버퍼 크기 제한
                strncpy(token, tokenStart, tokenLength);
 8000b12:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8000b16:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8000b1a:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <ESP_AT_Get_Token+0x104>)
 8000b1c:	f008 fdf9 	bl	8009712 <strncpy>
                token[tokenLength] = '\0'; // 문자열 종료
 8000b20:	4a18      	ldr	r2, [pc, #96]	@ (8000b84 <ESP_AT_Get_Token+0x104>)
 8000b22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000b26:	4413      	add	r3, r2
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
                // 이제 token 변수에 토큰 값이 저장됨
            }
        }
    }
    // 4) 추출된 토큰을 PC(UART1)로 전송
    if (token[0] != '\0') 
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <ESP_AT_Get_Token+0x104>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d012      	beq.n	8000b5a <ESP_AT_Get_Token+0xda>
    {
        // tokjen을 PC로 전송
        HAL_UART_Transmit(&huart1, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <ESP_AT_Get_Token+0x104>)
 8000b36:	f7ff fb4b 	bl	80001d0 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	4910      	ldr	r1, [pc, #64]	@ (8000b84 <ESP_AT_Get_Token+0x104>)
 8000b44:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <ESP_AT_Get_Token+0x108>)
 8000b46:	f004 fadb 	bl	8005100 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	2202      	movs	r2, #2
 8000b50:	490e      	ldr	r1, [pc, #56]	@ (8000b8c <ESP_AT_Get_Token+0x10c>)
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <ESP_AT_Get_Token+0x108>)
 8000b54:	f004 fad4 	bl	8005100 <HAL_UART_Transmit>
 8000b58:	e006      	b.n	8000b68 <ESP_AT_Get_Token+0xe8>
    } 
    else 
    {
        // 토큰 추출 실패 시 에러 처리
        HAL_UART_Transmit(&huart1, (uint8_t*)"Token extraction failed\r\n", 25, HAL_MAX_DELAY);
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	2219      	movs	r2, #25
 8000b60:	490b      	ldr	r1, [pc, #44]	@ (8000b90 <ESP_AT_Get_Token+0x110>)
 8000b62:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <ESP_AT_Get_Token+0x108>)
 8000b64:	f004 facc 	bl	8005100 <HAL_UART_Transmit>
    }

    // 토큰 저장
    SERVER_API_Set_Token(token); // 서버 API 토큰 저장 함수 호출
 8000b68:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <ESP_AT_Get_Token+0x104>)
 8000b6a:	f000 ff2f 	bl	80019cc <SERVER_API_Set_Token>
}
 8000b6e:	bf00      	nop
 8000b70:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	0800a9a0 	.word	0x0800a9a0
 8000b7c:	0800a9d8 	.word	0x0800a9d8
 8000b80:	0800aa40 	.word	0x0800aa40
 8000b84:	200004c0 	.word	0x200004c0
 8000b88:	20000698 	.word	0x20000698
 8000b8c:	0800a970 	.word	0x0800a970
 8000b90:	0800aa4c 	.word	0x0800aa4c

08000b94 <ESP_AT_Get_MAC_Address>:

// ESP32 기기 고유값 반환
void ESP_AT_Get_MAC_Address(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
    // AT+CIPSTAMAC? 명령어 전송
    const char *cmd = "AT+CIPSTAMAC?\r\n";
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <ESP_AT_Get_MAC_Address+0xa0>)
 8000b9c:	617b      	str	r3, [r7, #20]
    const char *response = ESP_AT_Send_Command_Sync_Get_Result(cmd);
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff fec6 	bl	8000930 <ESP_AT_Send_Command_Sync_Get_Result>
 8000ba4:	6138      	str	r0, [r7, #16]

    // 응답에서 MAC 주소 추출
    const char *macStart = strstr(response, "CIPSTAMAC:\""); // CIPSTAMAC:" 문자열 찾기
 8000ba6:	4924      	ldr	r1, [pc, #144]	@ (8000c38 <ESP_AT_Get_MAC_Address+0xa4>)
 8000ba8:	6938      	ldr	r0, [r7, #16]
 8000baa:	f008 fdc5 	bl	8009738 <strstr>
 8000bae:	60f8      	str	r0, [r7, #12]
    static char macAddress[18] = {0}; // MAC 주소를 저장할 버퍼 (17자 + NULL)

    if (macStart != NULL) 
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01b      	beq.n	8000bee <ESP_AT_Get_MAC_Address+0x5a>
    {
        macStart += strlen("CIPSTAMAC:\""); // 처음 따옴표 다음 위치로 이동
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	330b      	adds	r3, #11
 8000bba:	60fb      	str	r3, [r7, #12]
        const char *macEnd = strchr(macStart, '\"'); // 두번째 따옴표 찾기
 8000bbc:	2122      	movs	r1, #34	@ 0x22
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f008 fd9a 	bl	80096f8 <strchr>
 8000bc4:	60b8      	str	r0, [r7, #8]
        if (macEnd != NULL) 
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d010      	beq.n	8000bee <ESP_AT_Get_MAC_Address+0x5a>
        {
            size_t macLength = macEnd - macStart; // MAC 주소 길이 계산
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	607b      	str	r3, [r7, #4]
            
            if (macLength < 18) // MAC 주소는 17자 + NULL
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b11      	cmp	r3, #17
 8000bd8:	d809      	bhi.n	8000bee <ESP_AT_Get_MAC_Address+0x5a>
            {
                strncpy(macAddress, macStart, macLength);
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <ESP_AT_Get_MAC_Address+0xa8>)
 8000be0:	f008 fd97 	bl	8009712 <strncpy>
                macAddress[macLength] = '\0'; // 문자열 종료
 8000be4:	4a15      	ldr	r2, [pc, #84]	@ (8000c3c <ESP_AT_Get_MAC_Address+0xa8>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // PC(UART1)로 MAC 주소 전송
    HAL_UART_Transmit(&huart1, (uint8_t*)macAddress, strlen(macAddress), HAL_MAX_DELAY);
 8000bee:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <ESP_AT_Get_MAC_Address+0xa8>)
 8000bf0:	f7ff faee 	bl	80001d0 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	490f      	ldr	r1, [pc, #60]	@ (8000c3c <ESP_AT_Get_MAC_Address+0xa8>)
 8000bfe:	4810      	ldr	r0, [pc, #64]	@ (8000c40 <ESP_AT_Get_MAC_Address+0xac>)
 8000c00:	f004 fa7e 	bl	8005100 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY); // 줄바꿈 추가
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	2202      	movs	r2, #2
 8000c0a:	490e      	ldr	r1, [pc, #56]	@ (8000c44 <ESP_AT_Get_MAC_Address+0xb0>)
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <ESP_AT_Get_MAC_Address+0xac>)
 8000c0e:	f004 fa77 	bl	8005100 <HAL_UART_Transmit>

    // MAC 주소 저장
    SERVER_API_Set_MAC_Address(macAddress); // 서버 API MAC 주소 저장 함수 호출
 8000c12:	480a      	ldr	r0, [pc, #40]	@ (8000c3c <ESP_AT_Get_MAC_Address+0xa8>)
 8000c14:	f000 fef6 	bl	8001a04 <SERVER_API_Set_MAC_Address>
    // SD카드에 MAC 주소를 로그에 저장
    SD_Card_Log("MAC Address: ");
 8000c18:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <ESP_AT_Get_MAC_Address+0xb4>)
 8000c1a:	f000 fe57 	bl	80018cc <SD_Card_Log>
    SD_Card_Log(macAddress); // MAC 주소 로그에 저장
 8000c1e:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <ESP_AT_Get_MAC_Address+0xa8>)
 8000c20:	f000 fe54 	bl	80018cc <SD_Card_Log>
    SD_Card_Log("\r\n"); // 줄바꿈 추가
 8000c24:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <ESP_AT_Get_MAC_Address+0xb0>)
 8000c26:	f000 fe51 	bl	80018cc <SD_Card_Log>

}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	0800aa68 	.word	0x0800aa68
 8000c38:	0800aa78 	.word	0x0800aa78
 8000c3c:	20000540 	.word	0x20000540
 8000c40:	20000698 	.word	0x20000698
 8000c44:	0800a970 	.word	0x0800a970
 8000c48:	0800aa84 	.word	0x0800aa84

08000c4c <ESP_AT_Set_SNTP_Time>:

// 파라미터로 UTC 매크로를 받아서 시간은 설정하는 함수
void ESP_AT_Set_SNTP_Time(int utcOffset)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0a4      	sub	sp, #144	@ 0x90
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    char cmd[128];
    
    // SNTP 서버 연결
    // 한국 NTP 서버 설정
    // ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG=1,900,\"pool.ntp.org\",\"time.google.com\"\r\n"); // NTP 서버 설정
    int len = snprintf(cmd, sizeof(cmd), "AT+CIPSNTPCFG=1,%d,\"pool.ntp.org\",\"time.google.com\"\r\n", utcOffset);
 8000c54:	f107 000c 	add.w	r0, r7, #12
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <ESP_AT_Set_SNTP_Time+0x4c>)
 8000c5c:	2180      	movs	r1, #128	@ 0x80
 8000c5e:	f008 fcd3 	bl	8009608 <sniprintf>
 8000c62:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    if (len < 0 || len >= (int)sizeof(cmd)) 
 8000c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db03      	blt.n	8000c76 <ESP_AT_Set_SNTP_Time+0x2a>
 8000c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c74:	dd01      	ble.n	8000c7a <ESP_AT_Set_SNTP_Time+0x2e>
    {
        // 버퍼 오버플로우 또는 snprintf 실패
        Error_Handler();
 8000c76:	f000 fbf1 	bl	800145c <Error_Handler>
    }

    ESP_AT_Send_Command_Sync(cmd);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fd6c 	bl	800075c <ESP_AT_Send_Command_Sync>

    // 설정 확인
    ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG?\r\n");
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <ESP_AT_Set_SNTP_Time+0x50>)
 8000c86:	f7ff fd69 	bl	800075c <ESP_AT_Send_Command_Sync>

    // 시간 확인
    ESP_AT_Send_Command_Sync("AT+CIPSNTPTIME?\r\n");
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <ESP_AT_Set_SNTP_Time+0x54>)
 8000c8c:	f7ff fd66 	bl	800075c <ESP_AT_Send_Command_Sync>
 8000c90:	bf00      	nop
 8000c92:	3790      	adds	r7, #144	@ 0x90
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	0800aa94 	.word	0x0800aa94
 8000c9c:	0800aacc 	.word	0x0800aacc
 8000ca0:	0800aae0 	.word	0x0800aae0

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f001 f99c 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f898 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f000 fa7e 	bl	80011b0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000cb4:	f000 f900 	bl	8000eb8 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000cb8:	f000 f970 	bl	8000f9c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000cbc:	f000 f98e 	bl	8000fdc <MX_SPI1_Init>
  MX_TIM7_Init();
 8000cc0:	f000 f9c2 	bl	8001048 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000cc4:	f000 f9f6 	bl	80010b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 fa1e 	bl	8001108 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ccc:	f000 fa46 	bl	800115c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000cd0:	f006 f828 	bl	8006d24 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // 타이머 인터럽트 모드로 시작 (TIM7은 이미 PSC/ARR로 1 kHz, 1 ms 인터럽트로 설정되어 있다고 가정)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8000cd4:	4837      	ldr	r0, [pc, #220]	@ (8000db4 <main+0x110>)
 8000cd6:	f003 ff05 	bl	8004ae4 <HAL_TIM_Base_Start_IT>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <main+0x40>
  {
    Error_Handler();
 8000ce0:	f000 fbbc 	bl	800145c <Error_Handler>
  }

  // 1) 콜백 기반 수신을 시작 (1바이트)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4934      	ldr	r1, [pc, #208]	@ (8000db8 <main+0x114>)
 8000ce8:	4834      	ldr	r0, [pc, #208]	@ (8000dbc <main+0x118>)
 8000cea:	f004 fb61 	bl	80053b0 <HAL_UART_Receive_IT>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <main+0x54>
  {
    // 수신 시작 실패 처리
    Error_Handler();
 8000cf4:	f000 fbb2 	bl	800145c <Error_Handler>
  // }


  // ──────────────────────────────────────────────────────────────────────────────

  SD_Card_Boot(); // SD 카드 초기화 및 테스트 / 와이파이 파일 확인
 8000cf8:	f000 fbb6 	bl	8001468 <SD_Card_Boot>

  // SD카드 로그 기록
  SD_Card_Log("STM32 Booted Successfully!\n");
 8000cfc:	4830      	ldr	r0, [pc, #192]	@ (8000dc0 <main+0x11c>)
 8000cfe:	f000 fde5 	bl	80018cc <SD_Card_Log>

  // ──────────────────────────────────────────────────────────────────────────────

  // ESP_AT_Boot(); // ESP32 AT 명령어 초기화 및 버전 조회
  ESP_AT_Boot_5();
 8000d02:	f7ff fc35 	bl	8000570 <ESP_AT_Boot_5>

  // ESP32 AT 명령어를 통해 펌웨어 버전 조회
  ESP_AT_Send_Command_Sync("AT+GMR\r\n");
 8000d06:	482f      	ldr	r0, [pc, #188]	@ (8000dc4 <main+0x120>)
 8000d08:	f7ff fd28 	bl	800075c <ESP_AT_Send_Command_Sync>

  // ESP32 AT 명령어를 통해 현재 WiFi 모드 조회
  ESP_AT_Send_Command_Sync("AT+CWMODE?\r\n");
 8000d0c:	482e      	ldr	r0, [pc, #184]	@ (8000dc8 <main+0x124>)
 8000d0e:	f7ff fd25 	bl	800075c <ESP_AT_Send_Command_Sync>

  // ESP32 AT 명령어를 통해 WiFi 모드 설정
  ESP_AT_Send_Command_Sync("AT+CWMODE=1\r\n");
 8000d12:	482e      	ldr	r0, [pc, #184]	@ (8000dcc <main+0x128>)
 8000d14:	f7ff fd22 	bl	800075c <ESP_AT_Send_Command_Sync>

  // 연결 가능한 WiFi AP 목록 조회
  ESP_AT_Send_Command_Sync("AT+CWLAP\r\n");
 8000d18:	482d      	ldr	r0, [pc, #180]	@ (8000dd0 <main+0x12c>)
 8000d1a:	f7ff fd1f 	bl	800075c <ESP_AT_Send_Command_Sync>
  // ESP32 AT 명령어를 통해 WiFi AP 연결
  // ESP_AT_Send_Command_Sync("AT+CWJAP=\"ANDAMIRO\",\"amazon@@\"\r\n");               // 
  // ESP_AT_Send_Command_Sync("AT+CWJAP=\"Hello\",\"qpslti1033\"\r\n");               // 
  
  // SD카드에서 WiFi SSID와 비밀번호를 읽어와서 연결
  ESP_AT_Send_WiFi_Config();
 8000d1e:	f7ff fce7 	bl	80006f0 <ESP_AT_Send_WiFi_Config>
  // ESP_AT_Send_Command_Sync("AT+CIPSNTPCFG?\r\n");

  // 시간 확인
  // ESP_AT_Send_Command_Sync("AT+CIPSNTPTIME?\r\n");

  ESP_AT_Set_SNTP_Time(AT_SNTP_UTC_OFFSET_KR); // UTC+9 시간대 설정 (한국 표준시)
 8000d22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000d26:	f7ff ff91 	bl	8000c4c <ESP_AT_Set_SNTP_Time>
  // HTTP 서버 연결
  // ESP_AT_Send_Command_Sync("AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net\",\"dev-api.andamiro.net\",\"/\",1,\"{\"uid\":\"kimss@andamiro.com\",\"pwd\":\"temp1234!\"}\"\r\n");

  // ESP_AT_Send_Command_Sync("AT+HTTPCLIENT=3,1,\"https://dev-api.andamiro.net/test/user\",\"dev-api.andamiro.net\",\"test/user\",1,\"{ \"uid\" :  \"kimss@andamiro.com\", \"pwd\" :  \"temp1234!\" }");
  
  HAL_Delay(1000); // 명령어 전송 후 대기
 8000d2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d2e:	f001 f9cb 	bl	80020c8 <HAL_Delay>

  ESP_AT_Get_Token(); // 토큰 요청 및 반환
 8000d32:	f7ff fea5 	bl	8000a80 <ESP_AT_Get_Token>
  // ESP_AT_Send_Json_test();

  // ESP32 기기 MAC 주소 조회 (기기 고유값)
  // ESP_AT_Send_Command_Sync_Get_Result("AT+CIPSTAMAC?\r\n");
  ESP_AT_Get_MAC_Address();
 8000d36:	f7ff ff2d 	bl	8000b94 <ESP_AT_Get_MAC_Address>

  // SD카드 로그 기록
  SD_Card_Log("ESP32 AT Firmware Version Retrieved Successfully!\n");
 8000d3a:	4826      	ldr	r0, [pc, #152]	@ (8000dd4 <main+0x130>)
 8000d3c:	f000 fdc6 	bl	80018cc <SD_Card_Log>
  // ESP_AT_Setup_WiFi();



  // dip 스위치 1번 상태 OFF(default) 상태일 때, 마스터 모드로 가정
  if (HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin) == GPIO_PIN_RESET)
 8000d40:	2101      	movs	r1, #1
 8000d42:	4825      	ldr	r0, [pc, #148]	@ (8000dd8 <main+0x134>)
 8000d44:	f001 fd24 	bl	8002790 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <main+0xb2>
  {
    g_mode = MODE_MASTER; // 마스터 모드로 설정
 8000d4e:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <main+0x138>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e002      	b.n	8000d5c <main+0xb8>
  }
  else
  {
    g_mode = MODE_SLAVE; // 슬레이브 모드로 설정
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <main+0x138>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    switch (g_mode)
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <main+0x138>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	d824      	bhi.n	8000dae <main+0x10a>
 8000d64:	a201      	add	r2, pc, #4	@ (adr r2, 8000d6c <main+0xc8>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d85 	.word	0x08000d85
 8000d70:	08000daf 	.word	0x08000daf
 8000d74:	08000daf 	.word	0x08000daf
 8000d78:	08000daf 	.word	0x08000daf
 8000d7c:	08000daf 	.word	0x08000daf
 8000d80:	08000daf 	.word	0x08000daf
    {
      case MODE_MASTER:
        // 마스터 모드 동작
        // STATUS LED 0.5초 ON, 0.5초 OFF
        HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);  // LED ON
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d8a:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <main+0x134>)
 8000d8c:	f001 fd18 	bl	80027c0 <HAL_GPIO_WritePin>
        HAL_Delay(500);  // 0.5초 대기
 8000d90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d94:	f001 f998 	bl	80020c8 <HAL_Delay>
        HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET); // LED OFF
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <main+0x134>)
 8000da0:	f001 fd0e 	bl	80027c0 <HAL_GPIO_WritePin>
        HAL_Delay(500);  // 0.5초 대기
 8000da4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000da8:	f001 f98e 	bl	80020c8 <HAL_Delay>
        break;
 8000dac:	e000      	b.n	8000db0 <main+0x10c>

      case MODE_UNKNOWN:
        break;

      default:
        break;
 8000dae:	bf00      	nop
    switch (g_mode)
 8000db0:	e7d4      	b.n	8000d5c <main+0xb8>
 8000db2:	bf00      	nop
 8000db4:	20000650 	.word	0x20000650
 8000db8:	20000774 	.word	0x20000774
 8000dbc:	20000698 	.word	0x20000698
 8000dc0:	0800aaf4 	.word	0x0800aaf4
 8000dc4:	0800ab10 	.word	0x0800ab10
 8000dc8:	0800ab1c 	.word	0x0800ab1c
 8000dcc:	0800ab2c 	.word	0x0800ab2c
 8000dd0:	0800ab3c 	.word	0x0800ab3c
 8000dd4:	0800ab48 	.word	0x0800ab48
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	20000790 	.word	0x20000790

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	@ 0x50
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2230      	movs	r2, #48	@ 0x30
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f008 fc7a 	bl	80096e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <SystemClock_Config+0xd0>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a28      	ldr	r2, [pc, #160]	@ (8000eb0 <SystemClock_Config+0xd0>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <SystemClock_Config+0xd0>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <SystemClock_Config+0xd4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a22      	ldr	r2, [pc, #136]	@ (8000eb4 <SystemClock_Config+0xd4>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <SystemClock_Config+0xd4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e54:	2304      	movs	r3, #4
 8000e56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e58:	23a8      	movs	r3, #168	@ 0xa8
 8000e5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e60:	2307      	movs	r3, #7
 8000e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fcc3 	bl	80027f4 <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e74:	f000 faf2 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2105      	movs	r1, #5
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 ff24 	bl	8002ce4 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ea2:	f000 fadb 	bl	800145c <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	@ 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000ebe:	4a34      	ldr	r2, [pc, #208]	@ (8000f90 <MX_RTC_Init+0xd8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000eca:	227f      	movs	r2, #127	@ 0x7f
 8000ecc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000ed0:	22ff      	movs	r2, #255	@ 0xff
 8000ed2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ee6:	4829      	ldr	r0, [pc, #164]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000ee8:	f002 f9fe 	bl	80032e8 <HAL_RTC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ef2:	f000 fab3 	bl	800145c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  // RTC 백업 레지스터를 읽어 초기화 여부 확인
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_REG) != RTC_MAGIC_VALUE)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4824      	ldr	r0, [pc, #144]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000efa:	f002 fd69 	bl	80039d0 <HAL_RTCEx_BKUPRead>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d035      	beq.n	8000f74 <MX_RTC_Init+0xbc>
  {
    // RTC 백업 레지스터가 초기화되지 않았거나 값이 일치하지 않으면 RTC를 초기화
    // RTC 백업 레지스터에 초기화 마크를 기록
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_REG, RTC_MAGIC_VALUE);
 8000f08:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	481f      	ldr	r0, [pc, #124]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000f10:	f002 fd44 	bl	800399c <HAL_RTCEx_BKUPWrite>

    // RTC 시간과 날짜를 초기화
    g_Time.Hours = 0x0;  // 00:00:00
 8000f14:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <MX_RTC_Init+0xdc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = 0x0;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_RTC_Init+0xdc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = 0x0;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_RTC_Init+0xdc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_RTC_Init+0xdc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_RTC_Init+0xdc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BCD) != HAL_OK)
 8000f32:	2201      	movs	r2, #1
 8000f34:	4917      	ldr	r1, [pc, #92]	@ (8000f94 <MX_RTC_Init+0xdc>)
 8000f36:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000f38:	f002 fa57 	bl	80033ea <HAL_RTC_SetTime>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_RTC_Init+0x8e>
    {
      // 초기화 실패 처리
      Error_Handler();
 8000f42:	f000 fa8b 	bl	800145c <Error_Handler>
    }
    g_Date.WeekDay = RTC_WEEKDAY_MONDAY;    // 월요일
 8000f46:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_RTC_Init+0xe0>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
    g_Date.Month = RTC_MONTH_JANUARY;       // 1월
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <MX_RTC_Init+0xe0>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	705a      	strb	r2, [r3, #1]
    g_Date.Date = 0x1;                      // 1일
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_RTC_Init+0xe0>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	709a      	strb	r2, [r3, #2]
    g_Date.Year = 0x25;                     // 2025년 (BCD 형식으로 25)
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_RTC_Init+0xe0>)
 8000f5a:	2225      	movs	r2, #37	@ 0x25
 8000f5c:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BCD) != HAL_OK)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <MX_RTC_Init+0xe0>)
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000f64:	f002 fb39 	bl	80035da <HAL_RTC_SetDate>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00c      	beq.n	8000f88 <MX_RTC_Init+0xd0>
    {
      // 초기화 실패 처리
      Error_Handler();
 8000f6e:	f000 fa75 	bl	800145c <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f72:	e009      	b.n	8000f88 <MX_RTC_Init+0xd0>
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 8000f74:	2201      	movs	r2, #1
 8000f76:	4907      	ldr	r1, [pc, #28]	@ (8000f94 <MX_RTC_Init+0xdc>)
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000f7a:	f002 fad0 	bl	800351e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4905      	ldr	r1, [pc, #20]	@ (8000f98 <MX_RTC_Init+0xe0>)
 8000f82:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <MX_RTC_Init+0xd4>)
 8000f84:	f002 fbad 	bl	80036e2 <HAL_RTC_GetDate>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000554 	.word	0x20000554
 8000f90:	40002800 	.word	0x40002800
 8000f94:	20000778 	.word	0x20000778
 8000f98:	2000078c 	.word	0x2000078c

08000f9c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_SDIO_SD_Init+0x38>)
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <MX_SDIO_SD_Init+0x3c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_SDIO_SD_Init+0x38>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_SDIO_SD_Init+0x38>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_SDIO_SD_Init+0x38>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_SDIO_SD_Init+0x38>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <MX_SDIO_SD_Init+0x38>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <MX_SDIO_SD_Init+0x38>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000574 	.word	0x20000574
 8000fd8:	40012c00 	.word	0x40012c00

08000fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <MX_SPI1_Init+0x64>)
 8000fe2:	4a18      	ldr	r2, [pc, #96]	@ (8001044 <MX_SPI1_Init+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_SPI1_Init+0x64>)
 8000fe8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_SPI1_Init+0x64>)
 8001008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_SPI1_Init+0x64>)
 8001028:	220a      	movs	r2, #10
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_SPI1_Init+0x64>)
 800102e:	f003 fc81 	bl	8004934 <HAL_SPI_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001038:	f000 fa10 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200005f8 	.word	0x200005f8
 8001044:	40013000 	.word	0x40013000

08001048 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_TIM7_Init+0x64>)
 8001058:	4a15      	ldr	r2, [pc, #84]	@ (80010b0 <MX_TIM7_Init+0x68>)
 800105a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_TIM7_Init+0x64>)
 800105e:	2263      	movs	r2, #99	@ 0x63
 8001060:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_TIM7_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_TIM7_Init+0x64>)
 800106a:	f240 3247 	movw	r2, #839	@ 0x347
 800106e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_TIM7_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_TIM7_Init+0x64>)
 8001078:	f003 fce5 	bl	8004a46 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001082:	f000 f9eb 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <MX_TIM7_Init+0x64>)
 8001094:	f003 ff54 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800109e:	f000 f9dd 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000650 	.word	0x20000650
 80010b0:	40001400 	.word	0x40001400

080010b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <MX_USART1_UART_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ec:	f003 ffb8 	bl	8005060 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010f6:	f000 f9b1 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000698 	.word	0x20000698
 8001104:	40011000 	.word	0x40011000

08001108 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <MX_USART2_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001140:	f003 ff8e 	bl	8005060 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800114a:	f000 f987 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200006e0 	.word	0x200006e0
 8001158:	40004400 	.word	0x40004400

0800115c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <MX_USART3_UART_Init+0x50>)
 8001164:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_USART3_UART_Init+0x4c>)
 8001194:	f003 ff64 	bl	8005060 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800119e:	f000 f95d 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000728 	.word	0x20000728
 80011ac:	40004800 	.word	0x40004800

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	@ 0x30
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	4b42      	ldr	r3, [pc, #264]	@ (80012d4 <MX_GPIO_Init+0x124>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a41      	ldr	r2, [pc, #260]	@ (80012d4 <MX_GPIO_Init+0x124>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b3f      	ldr	r3, [pc, #252]	@ (80012d4 <MX_GPIO_Init+0x124>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	4b3b      	ldr	r3, [pc, #236]	@ (80012d4 <MX_GPIO_Init+0x124>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a3a      	ldr	r2, [pc, #232]	@ (80012d4 <MX_GPIO_Init+0x124>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <MX_GPIO_Init+0x124>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b34      	ldr	r3, [pc, #208]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a33      	ldr	r2, [pc, #204]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a2c      	ldr	r2, [pc, #176]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <MX_GPIO_Init+0x124>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <MX_GPIO_Init+0x124>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a25      	ldr	r2, [pc, #148]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a1e      	ldr	r2, [pc, #120]	@ (80012d4 <MX_GPIO_Init+0x124>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_GPIO_Init+0x124>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001274:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <MX_GPIO_Init+0x128>)
 8001276:	f001 faa3 	bl	80027c0 <HAL_GPIO_WritePin>
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIP_3_Pin DIP_4_Pin DIP_1_Pin DIP_2_Pin */
  GPIO_InitStruct.Pin = DIP_3_Pin|DIP_4_Pin|DIP_1_Pin|DIP_2_Pin;
 800127a:	230f      	movs	r3, #15
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4812      	ldr	r0, [pc, #72]	@ (80012d8 <MX_GPIO_Init+0x128>)
 800128e:	f001 f8e3 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin M_PWR_KEY_Pin
                           ESP_EN_Pin USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8001292:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8001296:	61fb      	str	r3, [r7, #28]
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <MX_GPIO_Init+0x128>)
 80012ac:	f001 f8d4 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012b0:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80012b4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_GPIO_Init+0x12c>)
 80012c6:	f001 f8c7 	bl	8002458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <HAL_TIM_PeriodElapsedCallback>:
//
// =======================================================================================================
/* tim 7 인터럽트 처리부 */
/* TIM7 업데이트 인터럽트 콜백 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b098      	sub	sp, #96	@ 0x60
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a23      	ldr	r2, [pc, #140]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d13f      	bne.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x92>
  {
    ms_tick_1++;
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012fc:	801a      	strh	r2, [r3, #0]
    alive_counter++;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001308:	801a      	strh	r2, [r3, #0]

    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001310:	d902      	bls.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x38>
    {
      ms_tick_1 = 0;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	801a      	strh	r2, [r3, #0]
      // HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
    }

    if (alive_counter >= 5000)    // 10 s 경과 체크
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001320:	4293      	cmp	r3, r2
 8001322:	d926      	bls.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x92>
    {
      alive_counter = 0;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001326:	2200      	movs	r2, #0
 8001328:	801a      	strh	r2, [r3, #0]

      /* 1) RTC에서 현재 시간 읽기 */
      // RTC_TimeTypeDef sTime;
      // RTC_DateTypeDef sDate;
      HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 800132a:	2200      	movs	r2, #0
 800132c:	4916      	ldr	r1, [pc, #88]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800132e:	4817      	ldr	r0, [pc, #92]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001330:	f002 f8f5 	bl	800351e <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8001334:	2200      	movs	r2, #0
 8001336:	4916      	ldr	r1, [pc, #88]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001338:	4814      	ldr	r0, [pc, #80]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800133a:	f002 f9d2 	bl	80036e2 <HAL_RTC_GetDate>

      /* 2) 문자열로 포맷 */
      char buf[64];

      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001340:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8001342:	461d      	mov	r5, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001346:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8001348:	461a      	mov	r2, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 800134e:	4619      	mov	r1, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001352:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8001354:	461c      	mov	r4, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001358:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 800135a:	f107 000c 	add.w	r0, r7, #12
 800135e:	9303      	str	r3, [sp, #12]
 8001360:	9402      	str	r4, [sp, #8]
 8001362:	9101      	str	r1, [sp, #4]
 8001364:	9200      	str	r2, [sp, #0]
 8001366:	462b      	mov	r3, r5
 8001368:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800136a:	2140      	movs	r1, #64	@ 0x40
 800136c:	f008 f94c 	bl	8009608 <sniprintf>
 8001370:	64f8      	str	r0, [r7, #76]	@ 0x4c
      //   // AT 명령 전송 실패 처리
      //   Error_Handler();
      // }
    }
  }
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	@ 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bdb0      	pop	{r4, r5, r7, pc}
 800137a:	bf00      	nop
 800137c:	40001400 	.word	0x40001400
 8001380:	20000770 	.word	0x20000770
 8001384:	20000772 	.word	0x20000772
 8001388:	20000778 	.word	0x20000778
 800138c:	20000554 	.word	0x20000554
 8001390:	2000078c 	.word	0x2000078c
 8001394:	0800ab7c 	.word	0x0800ab7c

08001398 <HAL_UART_RxCpltCallback>:
//
// =======================================================================================================
/* uart 1 처리부 */
/* UART Rx Complete 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  // uart1에서 수신된 바이트를 처리
  if (huart->Instance == USART1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <HAL_UART_RxCpltCallback+0x90>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d109      	bne.n	80013be <HAL_UART_RxCpltCallback+0x26>
  {
    // 1) 에코: 받은 바이트를 바로 송신
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	491f      	ldr	r1, [pc, #124]	@ (800142c <HAL_UART_RxCpltCallback+0x94>)
 80013ae:	4820      	ldr	r0, [pc, #128]	@ (8001430 <HAL_UART_RxCpltCallback+0x98>)
 80013b0:	f003 ffc8 	bl	8005344 <HAL_UART_Transmit_IT>

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	491d      	ldr	r1, [pc, #116]	@ (800142c <HAL_UART_RxCpltCallback+0x94>)
 80013b8:	481d      	ldr	r0, [pc, #116]	@ (8001430 <HAL_UART_RxCpltCallback+0x98>)
 80013ba:	f003 fff9 	bl	80053b0 <HAL_UART_Receive_IT>
  }

  // uart2에서 수신된 바이트를 처리

  if (huart->Instance == USART2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <HAL_UART_RxCpltCallback+0x9c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d12b      	bne.n	8001420 <HAL_UART_RxCpltCallback+0x88>
  {
    char c = g_atRxByte;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <HAL_UART_RxCpltCallback+0xa0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	73fb      	strb	r3, [r7, #15]

    // 1) 수신 바이트를 라인 버퍼에 저장
    if (atIdx < AT_RX_BUF_SIZE-1)
 80013ce:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_UART_RxCpltCallback+0xa4>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80013d4:	d809      	bhi.n	80013ea <HAL_UART_RxCpltCallback+0x52>
    {
      atLineBuf[atIdx++] = c;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_UART_RxCpltCallback+0xa4>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	b291      	uxth	r1, r2
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_UART_RxCpltCallback+0xa4>)
 80013e0:	8011      	strh	r1, [r2, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4a16      	ldr	r2, [pc, #88]	@ (8001440 <HAL_UART_RxCpltCallback+0xa8>)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	5453      	strb	r3, [r2, r1]
    }

    // 2) '\n' 이 들어오면 한 줄 완성
    if (c == '\n' || c == '\r')
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b0a      	cmp	r3, #10
 80013ee:	d002      	beq.n	80013f6 <HAL_UART_RxCpltCallback+0x5e>
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b0d      	cmp	r3, #13
 80013f4:	d10f      	bne.n	8001416 <HAL_UART_RxCpltCallback+0x7e>
    {
      atLineBuf[atIdx] = '\0';  // 문자열 종료
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_UART_RxCpltCallback+0xa4>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_UART_RxCpltCallback+0xa8>)
 80013fe:	2100      	movs	r1, #0
 8001400:	5499      	strb	r1, [r3, r2]

      // AT 명령어 처리 로직 (예: AT 명령어 파싱 및 응답)
      // 여기서 atLineBuf를 사용하여 AT 명령어를 처리
      // 받은 명령을 다시 STM uart 송신
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)atLineBuf, atIdx);
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_UART_RxCpltCallback+0xa4>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	490d      	ldr	r1, [pc, #52]	@ (8001440 <HAL_UART_RxCpltCallback+0xa8>)
 800140a:	4809      	ldr	r0, [pc, #36]	@ (8001430 <HAL_UART_RxCpltCallback+0x98>)
 800140c:	f003 ff9a 	bl	8005344 <HAL_UART_Transmit_IT>

      atIdx = 0;  // 인덱스 초기화
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_UART_RxCpltCallback+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	801a      	strh	r2, [r3, #0]
    }

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
 8001416:	2201      	movs	r2, #1
 8001418:	4907      	ldr	r1, [pc, #28]	@ (8001438 <HAL_UART_RxCpltCallback+0xa0>)
 800141a:	480a      	ldr	r0, [pc, #40]	@ (8001444 <HAL_UART_RxCpltCallback+0xac>)
 800141c:	f003 ffc8 	bl	80053b0 <HAL_UART_Receive_IT>
        // 2) 다시 UART2 수신 대기
        HAL_UART_Receive_IT(&huart2, &g_atRxByte, 1);
    }
#endif

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40011000 	.word	0x40011000
 800142c:	20000774 	.word	0x20000774
 8001430:	20000698 	.word	0x20000698
 8001434:	40004400 	.word	0x40004400
 8001438:	20000078 	.word	0x20000078
 800143c:	200000bc 	.word	0x200000bc
 8001440:	2000007c 	.word	0x2000007c
 8001444:	200006e0 	.word	0x200006e0

08001448 <HAL_UART_TxCpltCallback>:

/* UART 전송 완료 콜백 (필요 시..) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  // 전송 완료 후 다른 처리가 필요하면 여기에…
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <Error_Handler+0x8>

08001468 <SD_Card_Boot>:



// =========================================================
void SD_Card_Boot(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	f5ad 6d97 	sub.w	sp, sp, #1208	@ 0x4b8
 800146e:	af00      	add	r7, sp, #0
    UINT bw, br;    // 바이트 쓰기/읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 8001470:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 8001474:	2201      	movs	r2, #1
 8001476:	498d      	ldr	r1, [pc, #564]	@ (80016ac <SD_Card_Boot+0x244>)
 8001478:	4618      	mov	r0, r3
 800147a:	f007 fb0d 	bl	8008a98 <f_mount>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK)
 8001484:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SD_Card_Boot+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 800148c:	f7ff ffe6 	bl	800145c <Error_Handler>
    }

    // 2) 새 파일 생성(덮어쓰기)
    fres = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001490:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001494:	220a      	movs	r2, #10
 8001496:	4986      	ldr	r1, [pc, #536]	@ (80016b0 <SD_Card_Boot+0x248>)
 8001498:	4618      	mov	r0, r3
 800149a:	f007 fb43 	bl	8008b24 <f_open>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK)
 80014a4:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SD_Card_Boot+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 80014ac:	f7ff ffd6 	bl	800145c <Error_Handler>
    }

    // 3) 파일에 데이터 쓰기
    const char *data = "Hello, STM32 SD Card! \n test";
 80014b0:	4b80      	ldr	r3, [pc, #512]	@ (80016b4 <SD_Card_Boot+0x24c>)
 80014b2:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
    fres = f_write(&SDFile, data, strlen(data), &bw);
 80014b6:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	@ 0x4b0
 80014ba:	f7fe fe89 	bl	80001d0 <strlen>
 80014be:	4602      	mov	r2, r0
 80014c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014c4:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80014c8:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 80014cc:	f007 fe23 	bl	8009116 <f_write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK || bw < strlen(data))
 80014d6:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10b      	bne.n	80014f6 <SD_Card_Boot+0x8e>
 80014de:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	@ 0x4b0
 80014e2:	f7fe fe75 	bl	80001d0 <strlen>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80014ec:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d906      	bls.n	8001504 <SD_Card_Boot+0x9c>
    {
        // 파일 쓰기 실패 처리
        f_close(&SDFile);
 80014f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014fa:	4618      	mov	r0, r3
 80014fc:	f007 fffe 	bl	80094fc <f_close>
        Error_Handler();
 8001500:	f7ff ffac 	bl	800145c <Error_Handler>
    }

    // 4) 파일 닫기
    fres = f_close(&SDFile);
 8001504:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001508:	4618      	mov	r0, r3
 800150a:	f007 fff7 	bl	80094fc <f_close>
 800150e:	4603      	mov	r3, r0
 8001510:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK)
 8001514:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SD_Card_Boot+0xb8>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 800151c:	f7ff ff9e 	bl	800145c <Error_Handler>
    }

    // 5) 파일 읽기
    fres = f_open(&SDFile, "test.txt", FA_READ);
 8001520:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001524:	2201      	movs	r2, #1
 8001526:	4962      	ldr	r1, [pc, #392]	@ (80016b0 <SD_Card_Boot+0x248>)
 8001528:	4618      	mov	r0, r3
 800152a:	f007 fafb 	bl	8008b24 <f_open>
 800152e:	4603      	mov	r3, r0
 8001530:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK)
 8001534:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SD_Card_Boot+0xd8>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 800153c:	f7ff ff8e 	bl	800145c <Error_Handler>
    }

    char readBuffer[64];    // 읽기 버퍼
    fres = f_read(&SDFile, readBuffer, sizeof(readBuffer) - 1, &br);
 8001540:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001544:	1d39      	adds	r1, r7, #4
 8001546:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800154a:	223f      	movs	r2, #63	@ 0x3f
 800154c:	f007 fca4 	bl	8008e98 <f_read>
 8001550:	4603      	mov	r3, r0
 8001552:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK || br == 0)
 8001556:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <SD_Card_Boot+0x104>
 800155e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001562:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d106      	bne.n	800157a <SD_Card_Boot+0x112>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 800156c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001570:	4618      	mov	r0, r3
 8001572:	f007 ffc3 	bl	80094fc <f_close>
        Error_Handler();
 8001576:	f7ff ff71 	bl	800145c <Error_Handler>
    }
    readBuffer[br] = '\0'; // 문자열 종료
 800157a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800157e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8001588:	f2a2 42b4 	subw	r2, r2, #1204	@ 0x4b4
 800158c:	2100      	movs	r1, #0
 800158e:	54d1      	strb	r1, [r2, r3]

    // 6) 읽은 데이터 출력 (디버그용)
    // printf("Read from SD Card: %s\n", readBuffer); // 디버그 출력

    // 7) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8001590:	2201      	movs	r2, #1
 8001592:	4946      	ldr	r1, [pc, #280]	@ (80016ac <SD_Card_Boot+0x244>)
 8001594:	2000      	movs	r0, #0
 8001596:	f007 fa7f 	bl	8008a98 <f_mount>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK)
 80015a0:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SD_Card_Boot+0x144>
    {
        // 언마운트 실패 처리
        Error_Handler();
 80015a8:	f7ff ff58 	bl	800145c <Error_Handler>
    }

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80015ac:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 80015b0:	2201      	movs	r2, #1
 80015b2:	493e      	ldr	r1, [pc, #248]	@ (80016ac <SD_Card_Boot+0x244>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f007 fa6f 	bl	8008a98 <f_mount>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres != FR_OK)
 80015c0:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SD_Card_Boot+0x164>
    {
        // 마운트 실패 처리
        Error_Handler();
 80015c8:	f7ff ff48 	bl	800145c <Error_Handler>
    }

    // 2) 와이파이 파일 있는지 확인
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 80015cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015d0:	2201      	movs	r2, #1
 80015d2:	4939      	ldr	r1, [pc, #228]	@ (80016b8 <SD_Card_Boot+0x250>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f007 faa5 	bl	8008b24 <f_open>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    if (fres == FR_OK)
 80015e0:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d113      	bne.n	8001610 <SD_Card_Boot+0x1a8>
    {
        // 파일이 존재하면 OK Sd카드 언마운트
        f_close(&SDFile);
 80015e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ec:	4618      	mov	r0, r3
 80015ee:	f007 ff85 	bl	80094fc <f_close>
        fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 80015f2:	2201      	movs	r2, #1
 80015f4:	492d      	ldr	r1, [pc, #180]	@ (80016ac <SD_Card_Boot+0x244>)
 80015f6:	2000      	movs	r0, #0
 80015f8:	f007 fa4e 	bl	8008a98 <f_mount>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
        if (fres != FR_OK)
 8001602:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8001606:	2b00      	cmp	r3, #0
 8001608:	d04a      	beq.n	80016a0 <SD_Card_Boot+0x238>
        {
            // 언마운트 실패 처리
            Error_Handler();
 800160a:	f7ff ff27 	bl	800145c <Error_Handler>
        {
            // 파일 닫기 실패 처리
            Error_Handler();
        }
    }
}
 800160e:	e047      	b.n	80016a0 <SD_Card_Boot+0x238>
        fres = f_open(&SDFile, "wifi.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001610:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001614:	220a      	movs	r2, #10
 8001616:	4928      	ldr	r1, [pc, #160]	@ (80016b8 <SD_Card_Boot+0x250>)
 8001618:	4618      	mov	r0, r3
 800161a:	f007 fa83 	bl	8008b24 <f_open>
 800161e:	4603      	mov	r3, r0
 8001620:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
        if (fres != FR_OK)
 8001624:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SD_Card_Boot+0x1c8>
            Error_Handler();
 800162c:	f7ff ff16 	bl	800145c <Error_Handler>
        const char *wifiData = "SSID=YourSSID\nPassword=YourPassword\n";
 8001630:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <SD_Card_Boot+0x254>)
 8001632:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
        fres = f_write(&SDFile, wifiData, strlen(wifiData), &bw);
 8001636:	f8d7 04ac 	ldr.w	r0, [r7, #1196]	@ 0x4ac
 800163a:	f7fe fdc9 	bl	80001d0 <strlen>
 800163e:	4602      	mov	r2, r0
 8001640:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001644:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001648:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	@ 0x4ac
 800164c:	f007 fd63 	bl	8009116 <f_write>
 8001650:	4603      	mov	r3, r0
 8001652:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
        if (fres != FR_OK || bw < strlen(wifiData))
 8001656:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10b      	bne.n	8001676 <SD_Card_Boot+0x20e>
 800165e:	f8d7 04ac 	ldr.w	r0, [r7, #1196]	@ 0x4ac
 8001662:	f7fe fdb5 	bl	80001d0 <strlen>
 8001666:	4602      	mov	r2, r0
 8001668:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800166c:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d906      	bls.n	8001684 <SD_Card_Boot+0x21c>
            f_close(&SDFile);
 8001676:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800167a:	4618      	mov	r0, r3
 800167c:	f007 ff3e 	bl	80094fc <f_close>
            Error_Handler();
 8001680:	f7ff feec 	bl	800145c <Error_Handler>
        fres = f_close(&SDFile);
 8001684:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001688:	4618      	mov	r0, r3
 800168a:	f007 ff37 	bl	80094fc <f_close>
 800168e:	4603      	mov	r3, r0
 8001690:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
        if (fres != FR_OK)
 8001694:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SD_Card_Boot+0x238>
            Error_Handler();
 800169c:	f7ff fede 	bl	800145c <Error_Handler>
}
 80016a0:	bf00      	nop
 80016a2:	f507 6797 	add.w	r7, r7, #1208	@ 0x4b8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200007e0 	.word	0x200007e0
 80016b0:	0800aba0 	.word	0x0800aba0
 80016b4:	0800abac 	.word	0x0800abac
 80016b8:	0800abcc 	.word	0x0800abcc
 80016bc:	0800abd8 	.word	0x0800abd8

080016c0 <SD_Card_Get_WiFi_SSID>:


// WIFI SSID를 반환하는 함수
const char* SD_Card_Get_WiFi_SSID(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 80016c6:	af00      	add	r7, sp, #0
    UINT br;              // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80016c8:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 80016cc:	2201      	movs	r2, #1
 80016ce:	4936      	ldr	r1, [pc, #216]	@ (80017a8 <SD_Card_Get_WiFi_SSID+0xe8>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f007 f9e1 	bl	8008a98 <f_mount>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 80016dc:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SD_Card_Get_WiFi_SSID+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 80016e4:	f7ff feba 	bl	800145c <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 80016e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80016ec:	2201      	movs	r2, #1
 80016ee:	492f      	ldr	r1, [pc, #188]	@ (80017ac <SD_Card_Get_WiFi_SSID+0xec>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f007 fa17 	bl	8008b24 <f_open>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 80016fc:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SD_Card_Get_WiFi_SSID+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 8001704:	f7ff feaa 	bl	800145c <Error_Handler>
    }

    // 3) 파일에서 SSID 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 8001708:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800170c:	4639      	mov	r1, r7
 800170e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001712:	223f      	movs	r2, #63	@ 0x3f
 8001714:	f007 fbc0 	bl	8008e98 <f_read>
 8001718:	4603      	mov	r3, r0
 800171a:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK || br == 0)
 800171e:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <SD_Card_Get_WiFi_SSID+0x74>
 8001726:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800172a:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <SD_Card_Get_WiFi_SSID+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 8001734:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001738:	4618      	mov	r0, r3
 800173a:	f007 fedf 	bl	80094fc <f_close>
        Error_Handler();
 800173e:	f7ff fe8d 	bl	800145c <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 8001742:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001746:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f507 6295 	add.w	r2, r7, #1192	@ 0x4a8
 8001750:	f5a2 6295 	sub.w	r2, r2, #1192	@ 0x4a8
 8001754:	2100      	movs	r1, #0
 8001756:	54d1      	strb	r1, [r2, r3]

    // 4) SSID (최초 부트에서 "SSID=YourSSID" 형식으로 저장)
    sscanf(buffer, "SSID=%31s", ssid);
 8001758:	463b      	mov	r3, r7
 800175a:	4a15      	ldr	r2, [pc, #84]	@ (80017b0 <SD_Card_Get_WiFi_SSID+0xf0>)
 800175c:	4915      	ldr	r1, [pc, #84]	@ (80017b4 <SD_Card_Get_WiFi_SSID+0xf4>)
 800175e:	4618      	mov	r0, r3
 8001760:	f007 ff86 	bl	8009670 <siscanf>

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 8001764:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001768:	4618      	mov	r0, r3
 800176a:	f007 fec7 	bl	80094fc <f_close>
 800176e:	4603      	mov	r3, r0
 8001770:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8001774:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SD_Card_Get_WiFi_SSID+0xc0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 800177c:	f7ff fe6e 	bl	800145c <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 8001780:	2201      	movs	r2, #1
 8001782:	4909      	ldr	r1, [pc, #36]	@ (80017a8 <SD_Card_Get_WiFi_SSID+0xe8>)
 8001784:	2000      	movs	r0, #0
 8001786:	f007 f987 	bl	8008a98 <f_mount>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
    if (fres != FR_OK)
 8001790:	f897 34a7 	ldrb.w	r3, [r7, #1191]	@ 0x4a7
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SD_Card_Get_WiFi_SSID+0xdc>
    {
        // 언마운트 실패 처리
        Error_Handler();
 8001798:	f7ff fe60 	bl	800145c <Error_Handler>
    }

    return ssid; // SSID 반환
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <SD_Card_Get_WiFi_SSID+0xf0>)
}
 800179e:	4618      	mov	r0, r3
 80017a0:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200007e0 	.word	0x200007e0
 80017ac:	0800abcc 	.word	0x0800abcc
 80017b0:	20000794 	.word	0x20000794
 80017b4:	0800ac00 	.word	0x0800ac00

080017b8 <SD_Card_Get_WiFi_Password>:

// WIFI 비밀번호를 반환하는 함수
const char* SD_Card_Get_WiFi_Password(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 80017be:	af00      	add	r7, sp, #0
    UINT br;                  // 바이트 읽기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80017c0:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80017c4:	2201      	movs	r2, #1
 80017c6:	493c      	ldr	r1, [pc, #240]	@ (80018b8 <SD_Card_Get_WiFi_Password+0x100>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f007 f965 	bl	8008a98 <f_mount>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 80017d4:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SD_Card_Get_WiFi_Password+0x28>
    {
        // 마운트 실패 처리
        Error_Handler();
 80017dc:	f7ff fe3e 	bl	800145c <Error_Handler>
    }

    // 2) Wi-Fi 설정 파일 열기
    fres = f_open(&SDFile, "wifi.txt", FA_READ);
 80017e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017e4:	2201      	movs	r2, #1
 80017e6:	4935      	ldr	r1, [pc, #212]	@ (80018bc <SD_Card_Get_WiFi_Password+0x104>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f007 f99b 	bl	8008b24 <f_open>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 80017f4:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SD_Card_Get_WiFi_Password+0x48>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 80017fc:	f7ff fe2e 	bl	800145c <Error_Handler>
    }

    // 3) 파일에서 비밀번호 읽기
    char buffer[64]; // 임시 버퍼
    fres = f_read(&SDFile, buffer, sizeof(buffer) - 1, &br);
 8001800:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001804:	1d39      	adds	r1, r7, #4
 8001806:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800180a:	223f      	movs	r2, #63	@ 0x3f
 800180c:	f007 fb44 	bl	8008e98 <f_read>
 8001810:	4603      	mov	r3, r0
 8001812:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK || br == 0)
 8001816:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <SD_Card_Get_WiFi_Password+0x74>
 800181e:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001822:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <SD_Card_Get_WiFi_Password+0x82>
    {
        // 파일 읽기 실패 처리
        f_close(&SDFile);
 800182c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001830:	4618      	mov	r0, r3
 8001832:	f007 fe63 	bl	80094fc <f_close>
        Error_Handler();
 8001836:	f7ff fe11 	bl	800145c <Error_Handler>
    }
    
    buffer[br] = '\0'; // 문자열 종료
 800183a:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 800183e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8001848:	f2a2 42ac 	subw	r2, r2, #1196	@ 0x4ac
 800184c:	2100      	movs	r1, #0
 800184e:	54d1      	strb	r1, [r2, r3]

    // 4) 비밀번호 (최초 부트에서 "Password=YourPassword" 형식으로 저장)
    const char *p = strstr(buffer, "Password=");
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <SD_Card_Get_WiFi_Password+0x108>)
 8001854:	4618      	mov	r0, r3
 8001856:	f007 ff6f 	bl	8009738 <strstr>
 800185a:	f8c7 04a8 	str.w	r0, [r7, #1192]	@ 0x4a8
    if(p)
 800185e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <SD_Card_Get_WiFi_Password+0xba>
    {
        sscanf(p, "Password=%31s", password);
 8001866:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <SD_Card_Get_WiFi_Password+0x10c>)
 8001868:	4917      	ldr	r1, [pc, #92]	@ (80018c8 <SD_Card_Get_WiFi_Password+0x110>)
 800186a:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 800186e:	f007 feff 	bl	8009670 <siscanf>
    }
    // sscanf(buffer, "Password=%31s", password);

    // 5) 파일 닫기
    fres = f_close(&SDFile);
 8001872:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001876:	4618      	mov	r0, r3
 8001878:	f007 fe40 	bl	80094fc <f_close>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 8001882:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SD_Card_Get_WiFi_Password+0xd6>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 800188a:	f7ff fde7 	bl	800145c <Error_Handler>
    }

    // 6) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 800188e:	2201      	movs	r2, #1
 8001890:	4909      	ldr	r1, [pc, #36]	@ (80018b8 <SD_Card_Get_WiFi_Password+0x100>)
 8001892:	2000      	movs	r0, #0
 8001894:	f007 f900 	bl	8008a98 <f_mount>
 8001898:	4603      	mov	r3, r0
 800189a:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (fres != FR_OK)
 800189e:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SD_Card_Get_WiFi_Password+0xf2>
    {
        // 언마운트 실패 처리
        Error_Handler();
 80018a6:	f7ff fdd9 	bl	800145c <Error_Handler>
    }

    return password; // 비밀번호 반환
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <SD_Card_Get_WiFi_Password+0x10c>)
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	f507 6796 	add.w	r7, r7, #1200	@ 0x4b0
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200007e0 	.word	0x200007e0
 80018bc:	0800abcc 	.word	0x0800abcc
 80018c0:	0800ac0c 	.word	0x0800ac0c
 80018c4:	200007b4 	.word	0x200007b4
 80018c8:	0800ac18 	.word	0x0800ac18

080018cc <SD_Card_Log>:



// SD카드에 로그를 남기는 함수
void SD_Card_Log(const char *logMessage)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80018d8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80018dc:	6018      	str	r0, [r3, #0]
    UINT bw;        // 바이트 쓰기 변수

    // --------------------------------------------------

    // 1) SD 카드 마운트
    fres = f_mount(&SDFatFS, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함
 80018de:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 80018e2:	2201      	movs	r2, #1
 80018e4:	4937      	ldr	r1, [pc, #220]	@ (80019c4 <SD_Card_Log+0xf8>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f007 f8d6 	bl	8008a98 <f_mount>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 80018f2:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SD_Card_Log+0x32>
    {
        // 마운트 실패 처리
        Error_Handler();
 80018fa:	f7ff fdaf 	bl	800145c <Error_Handler>
    }

    // 2) 로그 파일 열기(없으면 생성)
    fres = f_open(&SDFile, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2232      	movs	r2, #50	@ 0x32
 8001904:	4930      	ldr	r1, [pc, #192]	@ (80019c8 <SD_Card_Log+0xfc>)
 8001906:	4618      	mov	r0, r3
 8001908:	f007 f90c 	bl	8008b24 <f_open>
 800190c:	4603      	mov	r3, r0
 800190e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8001912:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SD_Card_Log+0x52>
    {
        // 파일 열기 실패 처리
        Error_Handler();
 800191a:	f7ff fd9f 	bl	800145c <Error_Handler>
    }

    // 3) 로그 메시지 쓰기
    fres = f_write(&SDFile, logMessage, strlen(logMessage), &bw);
 800191e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001922:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	f7fe fc52 	bl	80001d0 <strlen>
 800192c:	4604      	mov	r4, r0
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8001936:	f2a2 416c 	subw	r1, r2, #1132	@ 0x46c
 800193a:	f107 000c 	add.w	r0, r7, #12
 800193e:	4622      	mov	r2, r4
 8001940:	6809      	ldr	r1, [r1, #0]
 8001942:	f007 fbe8 	bl	8009116 <f_write>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK || bw < strlen(logMessage))
 800194c:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10e      	bne.n	8001972 <SD_Card_Log+0xa6>
 8001954:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001958:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	f7fe fc37 	bl	80001d0 <strlen>
 8001962:	4602      	mov	r2, r0
 8001964:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001968:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d906      	bls.n	8001980 <SD_Card_Log+0xb4>
    {
        // 파일 쓰기 실패 처리
        f_close(&SDFile);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4618      	mov	r0, r3
 8001978:	f007 fdc0 	bl	80094fc <f_close>
        Error_Handler();
 800197c:	f7ff fd6e 	bl	800145c <Error_Handler>
    }

    // 4) 파일 닫기
    fres = f_close(&SDFile);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4618      	mov	r0, r3
 8001986:	f007 fdb9 	bl	80094fc <f_close>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 8001990:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SD_Card_Log+0xd0>
    {
        // 파일 닫기 실패 처리
        Error_Handler();
 8001998:	f7ff fd60 	bl	800145c <Error_Handler>
    }

    // 5) SD 카드 언마운트
    fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 800199c:	2201      	movs	r2, #1
 800199e:	4909      	ldr	r1, [pc, #36]	@ (80019c4 <SD_Card_Log+0xf8>)
 80019a0:	2000      	movs	r0, #0
 80019a2:	f007 f879 	bl	8008a98 <f_mount>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK)
 80019ac:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SD_Card_Log+0xec>
    {
        // 언마운트 실패 처리
        Error_Handler();
 80019b4:	f7ff fd52 	bl	800145c <Error_Handler>
    }
 80019b8:	bf00      	nop
 80019ba:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200007e0 	.word	0x200007e0
 80019c8:	0800ac28 	.word	0x0800ac28

080019cc <SERVER_API_Set_Token>:
}


// 토큰을 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_Token(const char* token)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    if (token != NULL && strlen(token) < sizeof(g_serverApiData.sToken))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00e      	beq.n	80019f8 <SERVER_API_Set_Token+0x2c>
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fbf8 	bl	80001d0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80019e4:	d808      	bhi.n	80019f8 <SERVER_API_Set_Token+0x2c>
    {
        strncpy(g_serverApiData.sToken, token, sizeof(g_serverApiData.sToken) - 1);
 80019e6:	227f      	movs	r2, #127	@ 0x7f
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <SERVER_API_Set_Token+0x34>)
 80019ec:	f007 fe91 	bl	8009712 <strncpy>
        g_serverApiData.sToken[sizeof(g_serverApiData.sToken) - 1] = '\0'; // 문자열 종료
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <SERVER_API_Set_Token+0x34>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    }
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	10000000 	.word	0x10000000

08001a04 <SERVER_API_Set_MAC_Address>:

// MAC 주소를 파라미터로 받아서 g_serverApiData에 저장하는 함수
void SERVER_API_Set_MAC_Address(const char* mac)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    if (mac != NULL && strlen(mac) < sizeof(g_serverApiData.sMac))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00e      	beq.n	8001a30 <SERVER_API_Set_MAC_Address+0x2c>
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fbdc 	bl	80001d0 <strlen>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b11      	cmp	r3, #17
 8001a1c:	d808      	bhi.n	8001a30 <SERVER_API_Set_MAC_Address+0x2c>
    {
        strncpy(g_serverApiData.sMac, mac, sizeof(g_serverApiData.sMac) - 1);
 8001a1e:	2211      	movs	r2, #17
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <SERVER_API_Set_MAC_Address+0x34>)
 8001a24:	f007 fe75 	bl	8009712 <strncpy>
        g_serverApiData.sMac[sizeof(g_serverApiData.sMac) - 1] = '\0'; // 문자열 종료
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SERVER_API_Set_MAC_Address+0x38>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    }
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	10000080 	.word	0x10000080
 8001a3c:	10000000 	.word	0x10000000

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a8c <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	@ (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_RTC_MspInit+0x5c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d119      	bne.n	8001ae4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 fb30 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001aca:	f7ff fcc7 	bl	800145c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_RTC_MspInit+0x60>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2029      	movs	r0, #41	@ 0x29
 8001ada:	f000 fbf4 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ade:	2029      	movs	r0, #41	@ 0x29
 8001ae0:	f000 fc0d 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40002800 	.word	0x40002800
 8001af0:	42470e3c 	.word	0x42470e3c

08001af4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	@ (8001bb4 <HAL_SD_MspInit+0xc0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d14a      	bne.n	8001bac <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_SD_MspInit+0xc4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001b6a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <HAL_SD_MspInit+0xc8>)
 8001b88:	f000 fc66 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <HAL_SD_MspInit+0xcc>)
 8001ba8:	f000 fc56 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	@ 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00

08001bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	@ (8001c48 <HAL_SPI_MspInit+0x84>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12b      	bne.n	8001c3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HAL_SPI_MspInit+0x88>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_SPI_MspInit+0x88>)
 8001bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_SPI_MspInit+0x88>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_SPI_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a10      	ldr	r2, [pc, #64]	@ (8001c4c <HAL_SPI_MspInit+0x88>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <HAL_SPI_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c1e:	23e0      	movs	r3, #224	@ 0xe0
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c2e:	2305      	movs	r3, #5
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <HAL_SPI_MspInit+0x8c>)
 8001c3a:	f000 fc0d 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	@ 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40013000 	.word	0x40013000
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d115      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8001c70:	f043 0320 	orr.w	r3, r3, #32
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2037      	movs	r0, #55	@ 0x37
 8001c88:	f000 fb1d 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c8c:	2037      	movs	r0, #55	@ 0x37
 8001c8e:	f000 fb36 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40001400 	.word	0x40001400
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	@ 0x38
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a58      	ldr	r2, [pc, #352]	@ (8001e24 <HAL_UART_MspInit+0x180>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d135      	bne.n	8001d32 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
 8001cca:	4b57      	ldr	r3, [pc, #348]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	4a56      	ldr	r2, [pc, #344]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001cd0:	f043 0310 	orr.w	r3, r3, #16
 8001cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd6:	4b54      	ldr	r3, [pc, #336]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	623b      	str	r3, [r7, #32]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	4b50      	ldr	r3, [pc, #320]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a4f      	ldr	r2, [pc, #316]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001cfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d10:	2307      	movs	r3, #7
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4844      	ldr	r0, [pc, #272]	@ (8001e2c <HAL_UART_MspInit+0x188>)
 8001d1c:	f000 fb9c 	bl	8002458 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2025      	movs	r0, #37	@ 0x25
 8001d26:	f000 face 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d2a:	2025      	movs	r0, #37	@ 0x25
 8001d2c:	f000 fae7 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d30:	e073      	b.n	8001e1a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3e      	ldr	r2, [pc, #248]	@ (8001e30 <HAL_UART_MspInit+0x18c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d134      	bne.n	8001da6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	4a38      	ldr	r2, [pc, #224]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4c:	4b36      	ldr	r3, [pc, #216]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	4a31      	ldr	r2, [pc, #196]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d68:	4b2f      	ldr	r3, [pc, #188]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8001d74:	230c      	movs	r3, #12
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d84:	2307      	movs	r3, #7
 8001d86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4827      	ldr	r0, [pc, #156]	@ (8001e2c <HAL_UART_MspInit+0x188>)
 8001d90:	f000 fb62 	bl	8002458 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	2026      	movs	r0, #38	@ 0x26
 8001d9a:	f000 fa94 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d9e:	2026      	movs	r0, #38	@ 0x26
 8001da0:	f000 faad 	bl	80022fe <HAL_NVIC_EnableIRQ>
}
 8001da4:	e039      	b.n	8001e1a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a22      	ldr	r2, [pc, #136]	@ (8001e34 <HAL_UART_MspInit+0x190>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d134      	bne.n	8001e1a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001dba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_UART_MspInit+0x184>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8001de8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <HAL_UART_MspInit+0x194>)
 8001e06:	f000 fb27 	bl	8002458 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2027      	movs	r0, #39	@ 0x27
 8001e10:	f000 fa59 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e14:	2027      	movs	r0, #39	@ 0x27
 8001e16:	f000 fa72 	bl	80022fe <HAL_NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3738      	adds	r7, #56	@ 0x38
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40004400 	.word	0x40004400
 8001e34:	40004800 	.word	0x40004800
 8001e38:	40020400 	.word	0x40020400

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <NMI_Handler+0x4>

08001e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <MemManage_Handler+0x4>

08001e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e92:	f000 f8f9 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <USART1_IRQHandler+0x10>)
 8001ea2:	f003 faab 	bl	80053fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000698 	.word	0x20000698

08001eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <USART2_IRQHandler+0x10>)
 8001eb6:	f003 faa1 	bl	80053fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200006e0 	.word	0x200006e0

08001ec4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <USART3_IRQHandler+0x10>)
 8001eca:	f003 fa97 	bl	80053fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000728 	.word	0x20000728

08001ed8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <RTC_Alarm_IRQHandler+0x10>)
 8001ede:	f001 fc4f 	bl	8003780 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000554 	.word	0x20000554

08001eec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <TIM7_IRQHandler+0x10>)
 8001ef2:	f002 fe67 	bl	8004bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000650 	.word	0x20000650

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f007 fc18 	bl	8009764 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20020000 	.word	0x20020000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	200007d4 	.word	0x200007d4
 8001f68:	20000960 	.word	0x20000960

08001f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f94:	f7ff ffea 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	@ (8001fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	@ (8001fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f007 fbd7 	bl	8009770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7fe fe6f 	bl	8000ca4 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001fd4:	0800aea0 	.word	0x0800aea0
  ldr r2, =_sbss
 8001fd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001fdc:	20000960 	.word	0x20000960

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <HAL_Init+0x40>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <HAL_Init+0x40>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <HAL_Init+0x40>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 f94f 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	200f      	movs	r0, #15
 8002014:	f000 f808 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002018:	f7ff fd12 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f967 	bl	800231a <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 f92f 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	@ (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000000 	.word	0x20000000
 8002080:	20000008 	.word	0x20000008
 8002084:	20000004 	.word	0x20000004

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008
 80020ac:	200007d8 	.word	0x200007d8

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	@ (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200007d8 	.word	0x200007d8

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000008 	.word	0x20000008

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4907      	ldr	r1, [pc, #28]	@ (80021ac <__NVIC_EnableIRQ+0x38>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	@ (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	@ (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	@ 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff8e 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff29 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff3e 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff8e 	bl	8002204 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff31 	bl	8002174 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff feb6 	bl	80020b0 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d008      	beq.n	8002364 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e052      	b.n	800240a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0216 	bic.w	r2, r2, #22
 8002372:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002382:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	2b00      	cmp	r3, #0
 800238a:	d103      	bne.n	8002394 <HAL_DMA_Abort+0x62>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0208 	bic.w	r2, r2, #8
 80023a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b4:	e013      	b.n	80023de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b6:	f7ff fe7b 	bl	80020b0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d90c      	bls.n	80023de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e015      	b.n	800240a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e4      	bne.n	80023b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f0:	223f      	movs	r2, #63	@ 0x3f
 80023f2:	409a      	lsls	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d004      	beq.n	8002430 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2280      	movs	r2, #128	@ 0x80
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e00c      	b.n	800244a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2205      	movs	r2, #5
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e16b      	b.n	800274c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 815a 	bne.w	8002746 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80b4 	beq.w	8002746 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b60      	ldr	r3, [pc, #384]	@ (8002764 <HAL_GPIO_Init+0x30c>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002764 <HAL_GPIO_Init+0x30c>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002764 <HAL_GPIO_Init+0x30c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002768 <HAL_GPIO_Init+0x310>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a52      	ldr	r2, [pc, #328]	@ (800276c <HAL_GPIO_Init+0x314>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02b      	beq.n	800267e <HAL_GPIO_Init+0x226>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a51      	ldr	r2, [pc, #324]	@ (8002770 <HAL_GPIO_Init+0x318>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d025      	beq.n	800267a <HAL_GPIO_Init+0x222>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a50      	ldr	r2, [pc, #320]	@ (8002774 <HAL_GPIO_Init+0x31c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <HAL_GPIO_Init+0x21e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4f      	ldr	r2, [pc, #316]	@ (8002778 <HAL_GPIO_Init+0x320>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x21a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4e      	ldr	r2, [pc, #312]	@ (800277c <HAL_GPIO_Init+0x324>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x216>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4d      	ldr	r2, [pc, #308]	@ (8002780 <HAL_GPIO_Init+0x328>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x212>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4c      	ldr	r2, [pc, #304]	@ (8002784 <HAL_GPIO_Init+0x32c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x20e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4b      	ldr	r2, [pc, #300]	@ (8002788 <HAL_GPIO_Init+0x330>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x20a>
 800265e:	2307      	movs	r3, #7
 8002660:	e00e      	b.n	8002680 <HAL_GPIO_Init+0x228>
 8002662:	2308      	movs	r3, #8
 8002664:	e00c      	b.n	8002680 <HAL_GPIO_Init+0x228>
 8002666:	2306      	movs	r3, #6
 8002668:	e00a      	b.n	8002680 <HAL_GPIO_Init+0x228>
 800266a:	2305      	movs	r3, #5
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x228>
 800266e:	2304      	movs	r3, #4
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x228>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x228>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x228>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x228>
 800267e:	2300      	movs	r3, #0
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002690:	4935      	ldr	r1, [pc, #212]	@ (8002768 <HAL_GPIO_Init+0x310>)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_GPIO_Init+0x334>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c2:	4a32      	ldr	r2, [pc, #200]	@ (800278c <HAL_GPIO_Init+0x334>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <HAL_GPIO_Init+0x334>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ec:	4a27      	ldr	r2, [pc, #156]	@ (800278c <HAL_GPIO_Init+0x334>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f2:	4b26      	ldr	r3, [pc, #152]	@ (800278c <HAL_GPIO_Init+0x334>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002716:	4a1d      	ldr	r2, [pc, #116]	@ (800278c <HAL_GPIO_Init+0x334>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_GPIO_Init+0x334>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002740:	4a12      	ldr	r2, [pc, #72]	@ (800278c <HAL_GPIO_Init+0x334>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	f67f ae90 	bls.w	8002474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40013800 	.word	0x40013800
 800276c:	40020000 	.word	0x40020000
 8002770:	40020400 	.word	0x40020400
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021000 	.word	0x40021000
 8002780:	40021400 	.word	0x40021400
 8002784:	40021800 	.word	0x40021800
 8002788:	40021c00 	.word	0x40021c00
 800278c:	40013c00 	.word	0x40013c00

08002790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e001      	b.n	80027b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e267      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d075      	beq.n	80028fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002812:	4b88      	ldr	r3, [pc, #544]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b04      	cmp	r3, #4
 800281c:	d00c      	beq.n	8002838 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281e:	4b85      	ldr	r3, [pc, #532]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002826:	2b08      	cmp	r3, #8
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b82      	ldr	r3, [pc, #520]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b7e      	ldr	r3, [pc, #504]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <HAL_RCC_OscConfig+0x108>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d157      	bne.n	80028fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e242      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x74>
 800285a:	4b76      	ldr	r3, [pc, #472]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a75      	ldr	r2, [pc, #468]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x98>
 8002872:	4b70      	ldr	r3, [pc, #448]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6f      	ldr	r2, [pc, #444]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6c      	ldr	r2, [pc, #432]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 800288c:	4b69      	ldr	r3, [pc, #420]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a68      	ldr	r2, [pc, #416]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b66      	ldr	r3, [pc, #408]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a65      	ldr	r2, [pc, #404]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7ff fc00 	bl	80020b0 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7ff fbfc 	bl	80020b0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	@ 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e207      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xc0>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7ff fbec 	bl	80020b0 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7ff fbe8 	bl	80020b0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1f3      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b51      	ldr	r3, [pc, #324]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0xe8>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d063      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800290a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002916:	4b47      	ldr	r3, [pc, #284]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800291e:	2b08      	cmp	r3, #8
 8002920:	d11c      	bne.n	800295c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b44      	ldr	r3, [pc, #272]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x152>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e1c7      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b3b      	ldr	r3, [pc, #236]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4937      	ldr	r1, [pc, #220]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	e03a      	b.n	80029d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002964:	4b34      	ldr	r3, [pc, #208]	@ (8002a38 <HAL_RCC_OscConfig+0x244>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7ff fba1 	bl	80020b0 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002972:	f7ff fb9d 	bl	80020b0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1a8      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4925      	ldr	r1, [pc, #148]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
 80029a4:	e015      	b.n	80029d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a6:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_RCC_OscConfig+0x244>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff fb80 	bl	80020b0 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b4:	f7ff fb7c 	bl	80020b0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e187      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d036      	beq.n	8002a4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <HAL_RCC_OscConfig+0x248>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7ff fb60 	bl	80020b0 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f4:	f7ff fb5c 	bl	80020b0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e167      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCC_OscConfig+0x240>)
 8002a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x200>
 8002a12:	e01b      	b.n	8002a4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_RCC_OscConfig+0x248>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7ff fb49 	bl	80020b0 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	e00e      	b.n	8002a40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7ff fb45 	bl	80020b0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d907      	bls.n	8002a40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e150      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	42470000 	.word	0x42470000
 8002a3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	4b88      	ldr	r3, [pc, #544]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ea      	bne.n	8002a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8097 	beq.w	8002b88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b81      	ldr	r3, [pc, #516]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	4a7c      	ldr	r2, [pc, #496]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a86:	2301      	movs	r3, #1
 8002a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b77      	ldr	r3, [pc, #476]	@ (8002c68 <HAL_RCC_OscConfig+0x474>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d118      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a96:	4b74      	ldr	r3, [pc, #464]	@ (8002c68 <HAL_RCC_OscConfig+0x474>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a73      	ldr	r2, [pc, #460]	@ (8002c68 <HAL_RCC_OscConfig+0x474>)
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fb05 	bl	80020b0 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aaa:	f7ff fb01 	bl	80020b0 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e10c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c68 <HAL_RCC_OscConfig+0x474>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x2ea>
 8002ad0:	4b64      	ldr	r3, [pc, #400]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	4a63      	ldr	r2, [pc, #396]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x324>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x30c>
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	4a5e      	ldr	r2, [pc, #376]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0x324>
 8002b00:	4b58      	ldr	r3, [pc, #352]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b04:	4a57      	ldr	r2, [pc, #348]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0c:	4b55      	ldr	r3, [pc, #340]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	4a54      	ldr	r2, [pc, #336]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 0304 	bic.w	r3, r3, #4
 8002b16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff fac6 	bl	80020b0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7ff fac2 	bl	80020b0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0cb      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	4b49      	ldr	r3, [pc, #292]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ee      	beq.n	8002b28 <HAL_RCC_OscConfig+0x334>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7ff fab0 	bl	80020b0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7ff faac 	bl	80020b0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0b5      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ee      	bne.n	8002b54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	4a38      	ldr	r2, [pc, #224]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80a1 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b92:	4b34      	ldr	r3, [pc, #208]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d05c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d141      	bne.n	8002c2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b31      	ldr	r3, [pc, #196]	@ (8002c6c <HAL_RCC_OscConfig+0x478>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff fa80 	bl	80020b0 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7ff fa7c 	bl	80020b0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e087      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	491b      	ldr	r1, [pc, #108]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_RCC_OscConfig+0x478>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7ff fa55 	bl	80020b0 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7ff fa51 	bl	80020b0 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e05c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1c:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x416>
 8002c28:	e054      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_RCC_OscConfig+0x478>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7ff fa3e 	bl	80020b0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7ff fa3a 	bl	80020b0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e045      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x444>
 8002c56:	e03d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e038      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x4ec>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d028      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d121      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d11a      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ca6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d111      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0cc      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b68      	ldr	r3, [pc, #416]	@ (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d90c      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b65      	ldr	r3, [pc, #404]	@ (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	@ (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a52      	ldr	r2, [pc, #328]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d044      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d119      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e067      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4934      	ldr	r1, [pc, #208]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd4:	f7ff f96c 	bl	80020b0 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7ff f968 	bl	80020b0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e04f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 020c 	and.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1eb      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d20c      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b22      	ldr	r3, [pc, #136]	@ (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490a      	ldr	r1, [pc, #40]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f8cc 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	0800ac94 	.word	0x0800ac94
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b094      	sub	sp, #80	@ 0x50
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec8:	4b79      	ldr	r3, [pc, #484]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	f200 80e1 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee2:	e0db      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b73      	ldr	r3, [pc, #460]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ee8:	e0db      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eea:	4b73      	ldr	r3, [pc, #460]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eee:	e0d8      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efa:	4b6d      	ldr	r3, [pc, #436]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d063      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f22:	4622      	mov	r2, r4
 8002f24:	462b      	mov	r3, r5
 8002f26:	f04f 0000 	mov.w	r0, #0
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	0159      	lsls	r1, r3, #5
 8002f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f34:	0150      	lsls	r0, r2, #5
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	1a51      	subs	r1, r2, r1
 8002f3e:	6139      	str	r1, [r7, #16]
 8002f40:	4629      	mov	r1, r5
 8002f42:	eb63 0301 	sbc.w	r3, r3, r1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f54:	4659      	mov	r1, fp
 8002f56:	018b      	lsls	r3, r1, #6
 8002f58:	4651      	mov	r1, sl
 8002f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5e:	4651      	mov	r1, sl
 8002f60:	018a      	lsls	r2, r1, #6
 8002f62:	4651      	mov	r1, sl
 8002f64:	ebb2 0801 	subs.w	r8, r2, r1
 8002f68:	4659      	mov	r1, fp
 8002f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f82:	4690      	mov	r8, r2
 8002f84:	4699      	mov	r9, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	eb18 0303 	adds.w	r3, r8, r3
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	462b      	mov	r3, r5
 8002f90:	eb49 0303 	adc.w	r3, r9, r3
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	024b      	lsls	r3, r1, #9
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fac:	4621      	mov	r1, r4
 8002fae:	024a      	lsls	r2, r1, #9
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fc0:	f7fd f95e 	bl	8000280 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fcc:	e058      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fce:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	4611      	mov	r1, r2
 8002fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	0159      	lsls	r1, r3, #5
 8002ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffa:	0150      	lsls	r0, r2, #5
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4641      	mov	r1, r8
 8003002:	ebb2 0a01 	subs.w	sl, r2, r1
 8003006:	4649      	mov	r1, r9
 8003008:	eb63 0b01 	sbc.w	fp, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800301c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003020:	ebb2 040a 	subs.w	r4, r2, sl
 8003024:	eb63 050b 	sbc.w	r5, r3, fp
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	00eb      	lsls	r3, r5, #3
 8003032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003036:	00e2      	lsls	r2, r4, #3
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	4643      	mov	r3, r8
 800303e:	18e3      	adds	r3, r4, r3
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	464b      	mov	r3, r9
 8003044:	eb45 0303 	adc.w	r3, r5, r3
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003060:	4621      	mov	r1, r4
 8003062:	028a      	lsls	r2, r1, #10
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	61fa      	str	r2, [r7, #28]
 8003070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003074:	f7fd f904 	bl	8000280 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003090:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3750      	adds	r7, #80	@ 0x50
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	0800aca4 	.word	0x0800aca4

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	0800aca4 	.word	0x0800aca4

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003148:	2b00      	cmp	r3, #0
 800314a:	d035      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800314c:	4b62      	ldr	r3, [pc, #392]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003152:	f7fe ffad 	bl	80020b0 <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003158:	e008      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800315a:	f7fe ffa9 	bl	80020b0 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0b0      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800316c:	4b5b      	ldr	r3, [pc, #364]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	019a      	lsls	r2, r3, #6
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	071b      	lsls	r3, r3, #28
 8003184:	4955      	ldr	r1, [pc, #340]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800318c:	4b52      	ldr	r3, [pc, #328]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003192:	f7fe ff8d 	bl	80020b0 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800319a:	f7fe ff89 	bl	80020b0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e090      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ac:	4b4b      	ldr	r3, [pc, #300]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8083 	beq.w	80032cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b44      	ldr	r3, [pc, #272]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	4a43      	ldr	r2, [pc, #268]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d6:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80031e2:	4b3f      	ldr	r3, [pc, #252]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a3e      	ldr	r2, [pc, #248]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ee:	f7fe ff5f 	bl	80020b0 <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f6:	f7fe ff5b 	bl	80020b0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e062      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003208:	4b35      	ldr	r3, [pc, #212]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003214:	4b31      	ldr	r3, [pc, #196]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d02f      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	429a      	cmp	r2, r3
 8003230:	d028      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003232:	4b2a      	ldr	r3, [pc, #168]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800323a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800323c:	4b29      	ldr	r3, [pc, #164]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003242:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003248:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800324e:	4b23      	ldr	r3, [pc, #140]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d114      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe ff29 	bl	80020b0 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe ff25 	bl	80020b0 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e02a      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	4b18      	ldr	r3, [pc, #96]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ee      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003290:	d10d      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003292:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80032a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a6:	490d      	ldr	r1, [pc, #52]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
 80032ac:	e005      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	4905      	ldr	r1, [pc, #20]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	42470068 	.word	0x42470068
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42470e40 	.word	0x42470e40

080032e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e073      	b.n	80033e2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7f5b      	ldrb	r3, [r3, #29]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe fbc0 	bl	8001a90 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b10      	cmp	r3, #16
 8003322:	d055      	beq.n	80033d0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	22ca      	movs	r2, #202	@ 0xca
 800332a:	625a      	str	r2, [r3, #36]	@ 0x24
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2253      	movs	r2, #83	@ 0x53
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fa99 	bl	800386c <RTC_EnterInitMode>
 800333a:	4603      	mov	r3, r0
 800333c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d12c      	bne.n	800339e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003356:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68d2      	ldr	r2, [r2, #12]
 800337e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6919      	ldr	r1, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	041a      	lsls	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 faa0 	bl	80038da <RTC_ExitInitMode>
 800339a:	4603      	mov	r3, r0
 800339c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d110      	bne.n	80033c6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	22ff      	movs	r2, #255	@ 0xff
 80033cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80033ce:	e001      	b.n	80033d4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ea:	b590      	push	{r4, r7, lr}
 80033ec:	b087      	sub	sp, #28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	7f1b      	ldrb	r3, [r3, #28]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_RTC_SetTime+0x1c>
 8003402:	2302      	movs	r3, #2
 8003404:	e087      	b.n	8003516 <HAL_RTC_SetTime+0x12c>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2202      	movs	r2, #2
 8003410:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d126      	bne.n	8003466 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fa77 	bl	8003924 <RTC_ByteToBcd2>
 8003436:	4603      	mov	r3, r0
 8003438:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	785b      	ldrb	r3, [r3, #1]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fa70 	bl	8003924 <RTC_ByteToBcd2>
 8003444:	4603      	mov	r3, r0
 8003446:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003448:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	789b      	ldrb	r3, [r3, #2]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa68 	bl	8003924 <RTC_ByteToBcd2>
 8003454:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003456:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	78db      	ldrb	r3, [r3, #3]
 800345e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e018      	b.n	8003498 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003486:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800348c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	78db      	ldrb	r3, [r3, #3]
 8003492:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	22ca      	movs	r2, #202	@ 0xca
 800349e:	625a      	str	r2, [r3, #36]	@ 0x24
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2253      	movs	r2, #83	@ 0x53
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f9df 	bl	800386c <RTC_EnterInitMode>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d120      	bne.n	80034fa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80034c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80034c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f9f2 	bl	80038da <RTC_ExitInitMode>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	22ff      	movs	r2, #255	@ 0xff
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]

  return status;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
}
 8003516:	4618      	mov	r0, r3
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd90      	pop	{r4, r7, pc}

0800351e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003550:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003554:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	0d9b      	lsrs	r3, r3, #22
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11a      	bne.n	80035d0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f9de 	bl	8003960 <RTC_Bcd2ToByte>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	785b      	ldrb	r3, [r3, #1]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f9d5 	bl	8003960 <RTC_Bcd2ToByte>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	789b      	ldrb	r3, [r3, #2]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f9cc 	bl	8003960 <RTC_Bcd2ToByte>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035da:	b590      	push	{r4, r7, lr}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	7f1b      	ldrb	r3, [r3, #28]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_RTC_SetDate+0x1c>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e071      	b.n	80036da <HAL_RTC_SetDate+0x100>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2202      	movs	r2, #2
 8003600:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10e      	bne.n	8003626 <HAL_RTC_SetDate+0x4c>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	f023 0310 	bic.w	r3, r3, #16
 800361c:	b2db      	uxtb	r3, r3
 800361e:	330a      	adds	r3, #10
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11c      	bne.n	8003666 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	78db      	ldrb	r3, [r3, #3]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f977 	bl	8003924 <RTC_ByteToBcd2>
 8003636:	4603      	mov	r3, r0
 8003638:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f970 	bl	8003924 <RTC_ByteToBcd2>
 8003644:	4603      	mov	r3, r0
 8003646:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003648:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	789b      	ldrb	r3, [r3, #2]
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f968 	bl	8003924 <RTC_ByteToBcd2>
 8003654:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003656:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	e00e      	b.n	8003684 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	78db      	ldrb	r3, [r3, #3]
 800366a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003672:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003678:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	22ca      	movs	r2, #202	@ 0xca
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2253      	movs	r2, #83	@ 0x53
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f8e9 	bl	800386c <RTC_EnterInitMode>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10c      	bne.n	80036be <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80036b2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f910 	bl	80038da <RTC_ExitInitMode>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	22ff      	movs	r2, #255	@ 0xff
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]

  return status;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}

080036e2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003700:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2da      	uxtb	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	0b5b      	lsrs	r3, r3, #13
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11a      	bne.n	8003776 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	78db      	ldrb	r3, [r3, #3]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f90b 	bl	8003960 <RTC_Bcd2ToByte>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f902 	bl	8003960 <RTC_Bcd2ToByte>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	789b      	ldrb	r3, [r3, #2]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f8f9 	bl	8003960 <RTC_Bcd2ToByte>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003788:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <HAL_RTC_AlarmIRQHandler+0x88>)
 800378a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800378e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d012      	beq.n	80037c4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80037bc:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f824 	bl	800380c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d012      	beq.n	80037f8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80037f0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f904 	bl	8003a00 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	775a      	strb	r2, [r3, #29]
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40013c00 	.word	0x40013c00

0800380c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <HAL_RTC_WaitForSynchro+0x48>)
 8003832:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003834:	f7fe fc3c 	bl	80020b0 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800383a:	e009      	b.n	8003850 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800383c:	f7fe fc38 	bl	80020b0 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800384a:	d901      	bls.n	8003850 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e007      	b.n	8003860 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ee      	beq.n	800383c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00017f5f 	.word	0x00017f5f

0800386c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d122      	bne.n	80038d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003898:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800389a:	f7fe fc09 	bl	80020b0 <HAL_GetTick>
 800389e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038a0:	e00c      	b.n	80038bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038a2:	f7fe fc05 	bl	80020b0 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038b0:	d904      	bls.n	80038bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <RTC_EnterInitMode+0x64>
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d1e8      	bne.n	80038a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff8b 	bl	8003820 <HAL_RTC_WaitForSynchro>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2204      	movs	r2, #4
 8003914:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003932:	e005      	b.n	8003940 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3301      	adds	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	3b0a      	subs	r3, #10
 800393e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	2b09      	cmp	r3, #9
 8003944:	d8f6      	bhi.n	8003934 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	b2da      	uxtb	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	4313      	orrs	r3, r2
 8003952:	b2db      	uxtb	r3, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	b2db      	uxtb	r3, r3
 800398c:	4413      	add	r3, r2
 800398e:	b2db      	uxtb	r3, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3350      	adds	r3, #80	@ 0x50
 80039b2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3350      	adds	r3, #80	@ 0x50
 80039e4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e022      	b.n	8003a6c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fe f85b 	bl	8001af4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f814 	bl	8003a74 <HAL_SD_InitCard>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00a      	b.n	8003a6c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a74:	b5b0      	push	{r4, r5, r7, lr}
 8003a76:	b08e      	sub	sp, #56	@ 0x38
 8003a78:	af04      	add	r7, sp, #16
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003a90:	2376      	movs	r3, #118	@ 0x76
 8003a92:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681d      	ldr	r5, [r3, #0]
 8003a98:	466c      	mov	r4, sp
 8003a9a:	f107 0318 	add.w	r3, r7, #24
 8003a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aac:	4628      	mov	r0, r5
 8003aae:	f002 fc07 	bl	80062c0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b5c <HAL_SD_InitCard+0xe8>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 fc48 	bl	8006352 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003ac2:	4b26      	ldr	r3, [pc, #152]	@ (8003b5c <HAL_SD_InitCard+0xe8>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003ac8:	2002      	movs	r0, #2
 8003aca:	f7fe fafd 	bl	80020c8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fe7a 	bl	80047c8 <SD_PowerON>
 8003ad4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e02e      	b.n	8003b52 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fd99 	bl	800462c <SD_InitCard>
 8003afa:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e01b      	b.n	8003b52 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 fca7 	bl	8006476 <SDMMC_CmdBlockLength>
 8003b28:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00f      	beq.n	8003b50 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <HAL_SD_InitCard+0xec>)
 8003b36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3728      	adds	r7, #40	@ 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	422580a0 	.word	0x422580a0
 8003b60:	004005ff 	.word	0x004005ff

08003b64 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b092      	sub	sp, #72	@ 0x48
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003b72:	f7fe fa9d 	bl	80020b0 <HAL_GetTick>
 8003b76:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1c5      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f040 81b8 	bne.w	8003f14 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	441a      	add	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d907      	bls.n	8003bc8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e1ac      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d002      	beq.n	8003be6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	025b      	lsls	r3, r3, #9
 8003bf0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003bf2:	2390      	movs	r3, #144	@ 0x90
 8003bf4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f107 0214 	add.w	r2, r7, #20
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f002 fc06 	bl	800641e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d90a      	bls.n	8003c2e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c24:	4618      	mov	r0, r3
 8003c26:	f002 fc6a 	bl	80064fe <SDMMC_CmdReadMultiBlock>
 8003c2a:	6478      	str	r0, [r7, #68]	@ 0x44
 8003c2c:	e009      	b.n	8003c42 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f002 fc3d 	bl	80064ba <SDMMC_CmdReadSingleBlock>
 8003c40:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7e      	ldr	r2, [pc, #504]	@ (8003e48 <HAL_SD_ReadBlocks+0x2e4>)
 8003c4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e159      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003c72:	e061      	b.n	8003d38 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d03c      	beq.n	8003cfc <HAL_SD_ReadBlocks+0x198>
 8003c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d039      	beq.n	8003cfc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c8c:	e033      	b.n	8003cf6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f002 fb3f 	bl	8006316 <SDIO_ReadFIFO>
 8003c98:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003caa:	3b01      	subs	r3, #1
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cba:	3301      	adds	r3, #1
 8003cbc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ccc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cec:	3b01      	subs	r3, #1
 8003cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf8:	2b07      	cmp	r3, #7
 8003cfa:	d9c8      	bls.n	8003c8e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003cfc:	f7fe f9d8 	bl	80020b0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d902      	bls.n	8003d12 <HAL_SD_ReadBlocks+0x1ae>
 8003d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d112      	bne.n	8003d38 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4c      	ldr	r2, [pc, #304]	@ (8003e48 <HAL_SD_ReadBlocks+0x2e4>)
 8003d18:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0f4      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d3e:	f240 332a 	movw	r3, #810	@ 0x32a
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d095      	beq.n	8003c74 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d022      	beq.n	8003d9c <HAL_SD_ReadBlocks+0x238>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d91f      	bls.n	8003d9c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d01b      	beq.n	8003d9c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 fc2f 	bl	80065cc <SDMMC_CmdStopTransfer>
 8003d6e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d012      	beq.n	8003d9c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a33      	ldr	r2, [pc, #204]	@ (8003e48 <HAL_SD_ReadBlocks+0x2e4>)
 8003d7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0c2      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_SD_ReadBlocks+0x254>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	@ (8003e48 <HAL_SD_ReadBlocks+0x2e4>)
 8003dbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	f043 0208 	orr.w	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0a1      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d012      	beq.n	8003e12 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a15      	ldr	r2, [pc, #84]	@ (8003e48 <HAL_SD_ReadBlocks+0x2e4>)
 8003df2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	f043 0202 	orr.w	r2, r3, #2
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e087      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d064      	beq.n	8003eea <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <HAL_SD_ReadBlocks+0x2e4>)
 8003e26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06d      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
 8003e46:	bf00      	nop
 8003e48:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f002 fa60 	bl	8006316 <SDIO_ReadFIFO>
 8003e56:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e62:	3301      	adds	r3, #1
 8003e64:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e74:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	3301      	adds	r3, #1
 8003e7a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8e:	3301      	adds	r3, #1
 8003e90:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e94:	3b01      	subs	r3, #1
 8003e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	0e1b      	lsrs	r3, r3, #24
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003eae:	f7fe f8ff 	bl	80020b0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d902      	bls.n	8003ec4 <HAL_SD_ReadBlocks+0x360>
 8003ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d112      	bne.n	8003eea <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <HAL_SD_ReadBlocks+0x3c8>)
 8003eca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e01b      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_SD_ReadBlocks+0x39a>
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1a6      	bne.n	8003e4c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003f06:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e006      	b.n	8003f22 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3748      	adds	r7, #72	@ 0x48
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	004005ff 	.word	0x004005ff

08003f30 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b092      	sub	sp, #72	@ 0x48
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f3e:	f7fe f8b7 	bl	80020b0 <HAL_GetTick>
 8003f42:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d107      	bne.n	8003f62 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e16d      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	f040 8160 	bne.w	8004230 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d907      	bls.n	8003f94 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e154      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2203      	movs	r2, #3
 8003f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d002      	beq.n	8003fb2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fae:	025b      	lsls	r3, r3, #9
 8003fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	025b      	lsls	r3, r3, #9
 8003fbc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003fbe:	2390      	movs	r3, #144	@ 0x90
 8003fc0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f107 0218 	add.w	r2, r7, #24
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fa20 	bl	800641e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d90a      	bls.n	8003ffa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 fac8 	bl	8006586 <SDMMC_CmdWriteMultiBlock>
 8003ff6:	6478      	str	r0, [r7, #68]	@ 0x44
 8003ff8:	e009      	b.n	800400e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fa9b 	bl	8006542 <SDMMC_CmdWriteSingleBlock>
 800400c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a8b      	ldr	r2, [pc, #556]	@ (8004248 <HAL_SD_WriteBlocks+0x318>)
 800401a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004022:	431a      	orrs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e101      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800403e:	e065      	b.n	800410c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d040      	beq.n	80040d0 <HAL_SD_WriteBlocks+0x1a0>
 800404e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d03d      	beq.n	80040d0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004054:	2300      	movs	r3, #0
 8004056:	643b      	str	r3, [r7, #64]	@ 0x40
 8004058:	e037      	b.n	80040ca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004062:	3301      	adds	r3, #1
 8004064:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004068:	3b01      	subs	r3, #1
 800406a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800406c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	021a      	lsls	r2, r3, #8
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407a:	3301      	adds	r3, #1
 800407c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800407e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004080:	3b01      	subs	r3, #1
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	041a      	lsls	r2, r3, #16
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	3301      	adds	r3, #1
 8004094:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	3b01      	subs	r3, #1
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	061a      	lsls	r2, r3, #24
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80040a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040aa:	3301      	adds	r3, #1
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b0:	3b01      	subs	r3, #1
 80040b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f107 0214 	add.w	r2, r7, #20
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 f936 	bl	8006330 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80040c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c6:	3301      	adds	r3, #1
 80040c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040cc:	2b07      	cmp	r3, #7
 80040ce:	d9c4      	bls.n	800405a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80040d0:	f7fd ffee 	bl	80020b0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80040dc:	429a      	cmp	r2, r3
 80040de:	d902      	bls.n	80040e6 <HAL_SD_WriteBlocks+0x1b6>
 80040e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d112      	bne.n	800410c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a57      	ldr	r2, [pc, #348]	@ (8004248 <HAL_SD_WriteBlocks+0x318>)
 80040ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e098      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004112:	f240 331a 	movw	r3, #794	@ 0x31a
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d091      	beq.n	8004040 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d022      	beq.n	8004170 <HAL_SD_WriteBlocks+0x240>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d91f      	bls.n	8004170 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	2b03      	cmp	r3, #3
 8004136:	d01b      	beq.n	8004170 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f002 fa45 	bl	80065cc <SDMMC_CmdStopTransfer>
 8004142:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004146:	2b00      	cmp	r3, #0
 8004148:	d012      	beq.n	8004170 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a3e      	ldr	r2, [pc, #248]	@ (8004248 <HAL_SD_WriteBlocks+0x318>)
 8004150:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e066      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_SD_WriteBlocks+0x25c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004188:	2b00      	cmp	r3, #0
 800418a:	d012      	beq.n	80041b2 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2d      	ldr	r2, [pc, #180]	@ (8004248 <HAL_SD_WriteBlocks+0x318>)
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	f043 0208 	orr.w	r2, r3, #8
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e045      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d012      	beq.n	80041e6 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a20      	ldr	r2, [pc, #128]	@ (8004248 <HAL_SD_WriteBlocks+0x318>)
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	f043 0202 	orr.w	r2, r3, #2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e02b      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d012      	beq.n	800421a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a13      	ldr	r2, [pc, #76]	@ (8004248 <HAL_SD_WriteBlocks+0x318>)
 80041fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004200:	f043 0210 	orr.w	r2, r3, #16
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e011      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004222:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e006      	b.n	800423e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3748      	adds	r7, #72	@ 0x48
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	004005ff 	.word	0x004005ff

0800424c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800425a:	0f9b      	lsrs	r3, r3, #30
 800425c:	b2da      	uxtb	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004266:	0e9b      	lsrs	r3, r3, #26
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	b2da      	uxtb	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004278:	0e1b      	lsrs	r3, r3, #24
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	b2da      	uxtb	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800428a:	0c1b      	lsrs	r3, r3, #16
 800428c:	b2da      	uxtb	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	b2da      	uxtb	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ac:	0d1b      	lsrs	r3, r3, #20
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ca:	0bdb      	lsrs	r3, r3, #15
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042dc:	0b9b      	lsrs	r3, r3, #14
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ee:	0b5b      	lsrs	r3, r3, #13
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004300:	0b1b      	lsrs	r3, r3, #12
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004318:	2b00      	cmp	r3, #0
 800431a:	d163      	bne.n	80043e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800432c:	0f92      	lsrs	r2, r2, #30
 800432e:	431a      	orrs	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004338:	0edb      	lsrs	r3, r3, #27
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	b2da      	uxtb	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800434a:	0e1b      	lsrs	r3, r3, #24
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	b2da      	uxtb	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800435c:	0d5b      	lsrs	r3, r3, #21
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	b2da      	uxtb	r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	0c9b      	lsrs	r3, r3, #18
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	b2da      	uxtb	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004380:	0bdb      	lsrs	r3, r3, #15
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	b2da      	uxtb	r2, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	7e1b      	ldrb	r3, [r3, #24]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	3302      	adds	r3, #2
 80043a4:	2201      	movs	r2, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80043ae:	fb03 f202 	mul.w	r2, r3, r2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	7a1b      	ldrb	r3, [r3, #8]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	2201      	movs	r2, #1
 80043c2:	409a      	lsls	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80043d0:	0a52      	lsrs	r2, r2, #9
 80043d2:	fb03 f202 	mul.w	r2, r3, r2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80043e2:	e031      	b.n	8004448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d11d      	bne.n	8004428 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	431a      	orrs	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	3301      	adds	r3, #1
 8004408:	029a      	lsls	r2, r3, #10
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800441c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60
 8004426:	e00f      	b.n	8004448 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a58      	ldr	r2, [pc, #352]	@ (8004590 <HAL_SD_GetCardCSD+0x344>)
 800442e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e09d      	b.n	8004584 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800444c:	0b9b      	lsrs	r3, r3, #14
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	b2da      	uxtb	r2, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445e:	09db      	lsrs	r3, r3, #7
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004466:	b2da      	uxtb	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004476:	b2da      	uxtb	r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004480:	0fdb      	lsrs	r3, r3, #31
 8004482:	b2da      	uxtb	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448c:	0f5b      	lsrs	r3, r3, #29
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	b2da      	uxtb	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	0e9b      	lsrs	r3, r3, #26
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b0:	0d9b      	lsrs	r3, r3, #22
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	0d5b      	lsrs	r3, r3, #21
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	0bdb      	lsrs	r3, r3, #15
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	0b9b      	lsrs	r3, r3, #14
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	b2da      	uxtb	r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	0b5b      	lsrs	r3, r3, #13
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	0b1b      	lsrs	r3, r3, #12
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004542:	0a9b      	lsrs	r3, r3, #10
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	b2da      	uxtb	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	b2da      	uxtb	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004572:	b2da      	uxtb	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	004005ff 	.word	0x004005ff

08004594 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80045f8:	f107 030c 	add.w	r3, r7, #12
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f970 	bl	80048e4 <SD_SendStatus>
 8004604:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	0a5b      	lsrs	r3, r3, #9
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004622:	693b      	ldr	r3, [r7, #16]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800462c:	b5b0      	push	{r4, r5, r7, lr}
 800462e:	b094      	sub	sp, #80	@ 0x50
 8004630:	af04      	add	r7, sp, #16
 8004632:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004634:	2301      	movs	r3, #1
 8004636:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f001 fe96 	bl	800636e <SDIO_GetPowerState>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004648:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800464c:	e0b8      	b.n	80047c0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004652:	2b03      	cmp	r3, #3
 8004654:	d02f      	beq.n	80046b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f002 f87d 	bl	800675a <SDMMC_CmdSendCID>
 8004660:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <SD_InitCard+0x40>
    {
      return errorstate;
 8004668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466a:	e0a9      	b.n	80047c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fec0 	bl	80063f8 <SDIO_GetResponse>
 8004678:	4602      	mov	r2, r0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2104      	movs	r1, #4
 8004684:	4618      	mov	r0, r3
 8004686:	f001 feb7 	bl	80063f8 <SDIO_GetResponse>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2108      	movs	r1, #8
 8004696:	4618      	mov	r0, r3
 8004698:	f001 feae 	bl	80063f8 <SDIO_GetResponse>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	210c      	movs	r1, #12
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fea5 	bl	80063f8 <SDIO_GetResponse>
 80046ae:	4602      	mov	r2, r0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d00d      	beq.n	80046da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f107 020e 	add.w	r2, r7, #14
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f002 f883 	bl	80067d4 <SDMMC_CmdSetRelAdd>
 80046ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <SD_InitCard+0xae>
    {
      return errorstate;
 80046d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d8:	e072      	b.n	80047c0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d036      	beq.n	8004750 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046e2:	89fb      	ldrh	r3, [r7, #14]
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f002 f84d 	bl	8006796 <SDMMC_CmdSendCSD>
 80046fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004706:	e05b      	b.n	80047c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fe72 	bl	80063f8 <SDIO_GetResponse>
 8004714:	4602      	mov	r2, r0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2104      	movs	r1, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f001 fe69 	bl	80063f8 <SDIO_GetResponse>
 8004726:	4602      	mov	r2, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2108      	movs	r1, #8
 8004732:	4618      	mov	r0, r3
 8004734:	f001 fe60 	bl	80063f8 <SDIO_GetResponse>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	210c      	movs	r1, #12
 8004744:	4618      	mov	r0, r3
 8004746:	f001 fe57 	bl	80063f8 <SDIO_GetResponse>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2104      	movs	r1, #4
 8004756:	4618      	mov	r0, r3
 8004758:	f001 fe4e 	bl	80063f8 <SDIO_GetResponse>
 800475c:	4603      	mov	r3, r0
 800475e:	0d1a      	lsrs	r2, r3, #20
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fd6e 	bl	800424c <HAL_SD_GetCardCSD>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004776:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800477a:	e021      	b.n	80047c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	2200      	movs	r2, #0
 8004788:	461c      	mov	r4, r3
 800478a:	4615      	mov	r5, r2
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	4608      	mov	r0, r1
 8004792:	f001 ff3d 	bl	8006610 <SDMMC_CmdSelDesel>
 8004796:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <SD_InitCard+0x176>
  {
    return errorstate;
 800479e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a0:	e00e      	b.n	80047c0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681d      	ldr	r5, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	466c      	mov	r4, sp
 80047aa:	f103 0210 	add.w	r2, r3, #16
 80047ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80047b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047b4:	3304      	adds	r3, #4
 80047b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047b8:	4628      	mov	r0, r5
 80047ba:	f001 fd81 	bl	80062c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3740      	adds	r7, #64	@ 0x40
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bdb0      	pop	{r4, r5, r7, pc}

080047c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 ff38 	bl	8006656 <SDMMC_CmdGoIdleState>
 80047e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	e072      	b.n	80048d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 ff4b 	bl	8006692 <SDMMC_CmdOperCond>
 80047fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f001 ff21 	bl	8006656 <SDMMC_CmdGoIdleState>
 8004814:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <SD_PowerON+0x5e>
    {
      return errorstate;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	e05b      	b.n	80048d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482a:	2b01      	cmp	r3, #1
 800482c:	d137      	bne.n	800489e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f001 ff4b 	bl	80066d0 <SDMMC_CmdAppCommand>
 800483a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02d      	beq.n	800489e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004842:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004846:	e047      	b.n	80048d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f001 ff3e 	bl	80066d0 <SDMMC_CmdAppCommand>
 8004854:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <SD_PowerON+0x98>
    {
      return errorstate;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	e03b      	b.n	80048d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	491e      	ldr	r1, [pc, #120]	@ (80048e0 <SD_PowerON+0x118>)
 8004866:	4618      	mov	r0, r3
 8004868:	f001 ff54 	bl	8006714 <SDMMC_CmdAppOperCommand>
 800486c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004874:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004878:	e02e      	b.n	80048d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f001 fdb9 	bl	80063f8 <SDIO_GetResponse>
 8004886:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	0fdb      	lsrs	r3, r3, #31
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <SD_PowerON+0xcc>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <SD_PowerON+0xce>
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]

    count++;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3301      	adds	r3, #1
 800489c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d802      	bhi.n	80048ae <SD_PowerON+0xe6>
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0cc      	beq.n	8004848 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d902      	bls.n	80048be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80048b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048bc:	e00c      	b.n	80048d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80048ce:	e002      	b.n	80048d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	c1100000 	.word	0xc1100000

080048e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80048f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80048f8:	e018      	b.n	800492c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f001 ff85 	bl	8006816 <SDMMC_CmdSendStatus>
 800490c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	e009      	b.n	800492c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f001 fd6a 	bl	80063f8 <SDIO_GetResponse>
 8004924:	4602      	mov	r2, r0
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07b      	b.n	8004a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004956:	d009      	beq.n	800496c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
 800495e:	e005      	b.n	800496c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fd f91c 	bl	8001bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f0:	ea42 0103 	orr.w	r1, r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	f003 0104 	and.w	r1, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	f003 0210 	and.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e041      	b.n	8004adc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7fd f8f1 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f000 f9b5 	bl	8004df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e04e      	b.n	8004b9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a23      	ldr	r2, [pc, #140]	@ (8004ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d022      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b26:	d01d      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bac <HAL_TIM_Base_Start_IT+0xc8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d018      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d013      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a19      	ldr	r2, [pc, #100]	@ (8004bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d111      	bne.n	8004b88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d010      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b86:	e007      	b.n	8004b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40001800 	.word	0x40001800

08004bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d020      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01b      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0202 	mvn.w	r2, #2
 8004bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f8d2 	bl	8004db8 <HAL_TIM_IC_CaptureCallback>
 8004c14:	e005      	b.n	8004c22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8c4 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f8d5 	bl	8004dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d020      	beq.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01b      	beq.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0204 	mvn.w	r2, #4
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8ac 	bl	8004db8 <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f89e 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8af 	bl	8004dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0208 	mvn.w	r2, #8
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2204      	movs	r2, #4
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f886 	bl	8004db8 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f878 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f889 	bl	8004dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0210 	mvn.w	r2, #16
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f860 	bl	8004db8 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f852 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f863 	bl	8004dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00c      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0201 	mvn.w	r2, #1
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fad8 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f97c 	bl	800504c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f834 	bl	8004de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0220 	mvn.w	r2, #32
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f94e 	bl	8005038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a43      	ldr	r2, [pc, #268]	@ (8004f14 <TIM_Base_SetConfig+0x120>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e12:	d00f      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a40      	ldr	r2, [pc, #256]	@ (8004f18 <TIM_Base_SetConfig+0x124>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f1c <TIM_Base_SetConfig+0x128>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3e      	ldr	r2, [pc, #248]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f24 <TIM_Base_SetConfig+0x130>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d108      	bne.n	8004e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a32      	ldr	r2, [pc, #200]	@ (8004f14 <TIM_Base_SetConfig+0x120>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d02b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d027      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2f      	ldr	r2, [pc, #188]	@ (8004f18 <TIM_Base_SetConfig+0x124>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d023      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2e      	ldr	r2, [pc, #184]	@ (8004f1c <TIM_Base_SetConfig+0x128>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01f      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2c      	ldr	r2, [pc, #176]	@ (8004f24 <TIM_Base_SetConfig+0x130>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d017      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2b      	ldr	r2, [pc, #172]	@ (8004f28 <TIM_Base_SetConfig+0x134>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2a      	ldr	r2, [pc, #168]	@ (8004f2c <TIM_Base_SetConfig+0x138>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00f      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a29      	ldr	r2, [pc, #164]	@ (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a28      	ldr	r2, [pc, #160]	@ (8004f34 <TIM_Base_SetConfig+0x140>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a27      	ldr	r2, [pc, #156]	@ (8004f38 <TIM_Base_SetConfig+0x144>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <TIM_Base_SetConfig+0x148>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d108      	bne.n	8004eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <TIM_Base_SetConfig+0x120>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_Base_SetConfig+0xf2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a10      	ldr	r2, [pc, #64]	@ (8004f24 <TIM_Base_SetConfig+0x130>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d103      	bne.n	8004eee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f043 0204 	orr.w	r2, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40010400 	.word	0x40010400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800
 8004f34:	40001800 	.word	0x40001800
 8004f38:	40001c00 	.word	0x40001c00
 8004f3c:	40002000 	.word	0x40002000

08004f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e05a      	b.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a21      	ldr	r2, [pc, #132]	@ (800501c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	@ (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d018      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a17      	ldr	r2, [pc, #92]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10c      	bne.n	8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40010400 	.word	0x40010400
 8005030:	40014000 	.word	0x40014000
 8005034:	40001800 	.word	0x40001800

08005038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e042      	b.n	80050f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fc fe0c 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2224      	movs	r2, #36	@ 0x24
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fe97 	bl	8005dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b20      	cmp	r3, #32
 800511e:	d175      	bne.n	800520c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_UART_Transmit+0x2c>
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e06e      	b.n	800520e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2221      	movs	r2, #33	@ 0x21
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513e:	f7fc ffb7 	bl	80020b0 <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005158:	d108      	bne.n	800516c <HAL_UART_Transmit+0x6c>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e003      	b.n	8005174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005174:	e02e      	b.n	80051d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	2180      	movs	r1, #128	@ 0x80
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fbfb 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e03a      	b.n	800520e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	3302      	adds	r3, #2
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e007      	b.n	80051c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1cb      	bne.n	8005176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2140      	movs	r1, #64	@ 0x40
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fbc7 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e006      	b.n	800520e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b08a      	sub	sp, #40	@ 0x28
 800521a:	af02      	add	r7, sp, #8
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b20      	cmp	r3, #32
 8005234:	f040 8081 	bne.w	800533a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Receive+0x2e>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e079      	b.n	800533c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2222      	movs	r2, #34	@ 0x22
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525c:	f7fc ff28 	bl	80020b0 <HAL_GetTick>
 8005260:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005276:	d108      	bne.n	800528a <HAL_UART_Receive+0x74>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e003      	b.n	8005292 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005292:	e047      	b.n	8005324 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	2120      	movs	r1, #32
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fb6c 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e042      	b.n	800533c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10c      	bne.n	80052d6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	3302      	adds	r3, #2
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e01f      	b.n	8005316 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052de:	d007      	beq.n	80052f0 <HAL_UART_Receive+0xda>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <HAL_UART_Receive+0xe8>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e008      	b.n	8005310 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800530a:	b2da      	uxtb	r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3301      	adds	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1b2      	bne.n	8005294 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b20      	cmp	r3, #32
 800535c:	d121      	bne.n	80053a2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_Transmit_IT+0x26>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e01a      	b.n	80053a4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2221      	movs	r2, #33	@ 0x21
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800539c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	e000      	b.n	80053a4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80053a2:	2302      	movs	r3, #2
  }
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d112      	bne.n	80053f0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_UART_Receive_IT+0x26>
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e00b      	b.n	80053f2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	461a      	mov	r2, r3
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fb21 	bl	8005a2e <UART_Start_Receive_IT>
 80053ec:	4603      	mov	r3, r0
 80053ee:	e000      	b.n	80053f2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005422:	2300      	movs	r3, #0
 8005424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005428:	2300      	movs	r3, #0
 800542a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800543a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10f      	bne.n	8005462 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_UART_IRQHandler+0x66>
 800544e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fbfd 	bl	8005c5a <UART_Receive_IT>
      return;
 8005460:	e273      	b.n	800594a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80de 	beq.w	8005628 <HAL_UART_IRQHandler+0x22c>
 800546c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800547c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80d1 	beq.w	8005628 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0xae>
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_UART_IRQHandler+0xd2>
 80054b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f043 0202 	orr.w	r2, r3, #2
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_UART_IRQHandler+0xf6>
 80054da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f043 0204 	orr.w	r2, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d011      	beq.n	8005522 <HAL_UART_IRQHandler+0x126>
 80054fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800550a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551a:	f043 0208 	orr.w	r2, r3, #8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 820a 	beq.w	8005940 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800552c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_UART_IRQHandler+0x14e>
 8005538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fb88 	bl	8005c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005554:	2b40      	cmp	r3, #64	@ 0x40
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <HAL_UART_IRQHandler+0x17a>
 800556e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04f      	beq.n	8005616 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa93 	bl	8005aa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d141      	bne.n	800560e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1d9      	bne.n	800558a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d013      	beq.n	8005606 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e2:	4a8a      	ldr	r2, [pc, #552]	@ (800580c <HAL_UART_IRQHandler+0x410>)
 80055e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fc ff11 	bl	8002412 <HAL_DMA_Abort_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005600:	4610      	mov	r0, r2
 8005602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	e00e      	b.n	8005624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f9a2 	bl	8005950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560c:	e00a      	b.n	8005624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f99e 	bl	8005950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	e006      	b.n	8005624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f99a 	bl	8005950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005622:	e18d      	b.n	8005940 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	bf00      	nop
    return;
 8005626:	e18b      	b.n	8005940 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	2b01      	cmp	r3, #1
 800562e:	f040 8167 	bne.w	8005900 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8160 	beq.w	8005900 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8159 	beq.w	8005900 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	f040 80ce 	bne.w	8005810 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80a9 	beq.w	80057dc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800568e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005692:	429a      	cmp	r2, r3
 8005694:	f080 80a2 	bcs.w	80057dc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800569e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056aa:	f000 8088 	beq.w	80057be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1d9      	bne.n	80056ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3314      	adds	r3, #20
 8005700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800570a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3314      	adds	r3, #20
 800571a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800571e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005722:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005726:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e1      	bne.n	80056fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3314      	adds	r3, #20
 800573c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800574c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800575a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800575c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005760:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e3      	bne.n	8005736 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800578c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e3      	bne.n	800577c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fc fdba 	bl	8002332 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8c5 	bl	8005964 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057da:	e0b3      	b.n	8005944 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057e4:	429a      	cmp	r2, r3
 80057e6:	f040 80ad 	bne.w	8005944 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f4:	f040 80a6 	bne.w	8005944 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8ad 	bl	8005964 <HAL_UARTEx_RxEventCallback>
      return;
 800580a:	e09b      	b.n	8005944 <HAL_UART_IRQHandler+0x548>
 800580c:	08005b69 	.word	0x08005b69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005818:	b29b      	uxth	r3, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 808e 	beq.w	8005948 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800582c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8089 	beq.w	8005948 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800584c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800585a:	647a      	str	r2, [r7, #68]	@ 0x44
 800585c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e3      	bne.n	8005836 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	623b      	str	r3, [r7, #32]
   return(result);
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3314      	adds	r3, #20
 800588e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005892:	633a      	str	r2, [r7, #48]	@ 0x30
 8005894:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e3      	bne.n	800586e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0310 	bic.w	r3, r3, #16
 80058ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058d8:	61fa      	str	r2, [r7, #28]
 80058da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69b9      	ldr	r1, [r7, #24]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	617b      	str	r3, [r7, #20]
   return(result);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e3      	bne.n	80058b4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f833 	bl	8005964 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fe:	e023      	b.n	8005948 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_UART_IRQHandler+0x524>
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f936 	bl	8005b8a <UART_Transmit_IT>
    return;
 800591e:	e014      	b.n	800594a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00e      	beq.n	800594a <HAL_UART_IRQHandler+0x54e>
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f976 	bl	8005c2a <UART_EndTransmit_IT>
    return;
 800593e:	e004      	b.n	800594a <HAL_UART_IRQHandler+0x54e>
    return;
 8005940:	bf00      	nop
 8005942:	e002      	b.n	800594a <HAL_UART_IRQHandler+0x54e>
      return;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <HAL_UART_IRQHandler+0x54e>
      return;
 8005948:	bf00      	nop
  }
}
 800594a:	37e8      	adds	r7, #232	@ 0xe8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598c:	e03b      	b.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d037      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fc fb8b 	bl	80020b0 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <UART_WaitOnFlagUntilTimeout+0x30>
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e03a      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d023      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b80      	cmp	r3, #128	@ 0x80
 80059c2:	d020      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b40      	cmp	r3, #64	@ 0x40
 80059c8:	d01d      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d116      	bne.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f857 	bl	8005aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2208      	movs	r2, #8
 80059f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e00f      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d0b4      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	88fa      	ldrh	r2, [r7, #6]
 8005a46:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2222      	movs	r2, #34	@ 0x22
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a72:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0220 	orr.w	r2, r2, #32
 8005a92:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b095      	sub	sp, #84	@ 0x54
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aca:	643a      	str	r2, [r7, #64]	@ 0x40
 8005acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ad0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e5      	bne.n	8005aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d119      	bne.n	8005b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 0310 	bic.w	r3, r3, #16
 8005b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b3a:	61ba      	str	r2, [r7, #24]
 8005b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	613b      	str	r3, [r7, #16]
   return(result);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b5c:	bf00      	nop
 8005b5e:	3754      	adds	r7, #84	@ 0x54
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fee7 	bl	8005950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b21      	cmp	r3, #33	@ 0x21
 8005b9c:	d13e      	bne.n	8005c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba6:	d114      	bne.n	8005bd2 <UART_Transmit_IT+0x48>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d110      	bne.n	8005bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	1c9a      	adds	r2, r3, #2
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	621a      	str	r2, [r3, #32]
 8005bd0:	e008      	b.n	8005be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	1c59      	adds	r1, r3, #1
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6211      	str	r1, [r2, #32]
 8005bdc:	781a      	ldrb	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10f      	bne.n	8005c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e000      	b.n	8005c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c1c:	2302      	movs	r3, #2
  }
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fb fbfc 	bl	8001448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b08c      	sub	sp, #48	@ 0x30
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b22      	cmp	r3, #34	@ 0x22
 8005c74:	f040 80aa 	bne.w	8005dcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c80:	d115      	bne.n	8005cae <UART_Receive_IT+0x54>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d111      	bne.n	8005cae <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	1c9a      	adds	r2, r3, #2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cac:	e024      	b.n	8005cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cbc:	d007      	beq.n	8005cce <UART_Receive_IT+0x74>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <UART_Receive_IT+0x82>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e008      	b.n	8005cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	4619      	mov	r1, r3
 8005d06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d15d      	bne.n	8005dc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0220 	bic.w	r2, r2, #32
 8005d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d135      	bne.n	8005dbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	613b      	str	r3, [r7, #16]
   return(result);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d78:	623a      	str	r2, [r7, #32]
 8005d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	6a3a      	ldr	r2, [r7, #32]
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d10a      	bne.n	8005db0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fdd4 	bl	8005964 <HAL_UARTEx_RxEventCallback>
 8005dbc:	e002      	b.n	8005dc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb faea 	bl	8001398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e002      	b.n	8005dce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3730      	adds	r7, #48	@ 0x30
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ddc:	b0c0      	sub	sp, #256	@ 0x100
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	68d9      	ldr	r1, [r3, #12]
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	ea40 0301 	orr.w	r3, r0, r1
 8005e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e30:	f021 010c 	bic.w	r1, r1, #12
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	6999      	ldr	r1, [r3, #24]
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	ea40 0301 	orr.w	r3, r0, r1
 8005e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b8f      	ldr	r3, [pc, #572]	@ (80060a4 <UART_SetConfig+0x2cc>)
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d005      	beq.n	8005e78 <UART_SetConfig+0xa0>
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b8d      	ldr	r3, [pc, #564]	@ (80060a8 <UART_SetConfig+0x2d0>)
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d104      	bne.n	8005e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e78:	f7fd f940 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8005e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e80:	e003      	b.n	8005e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e82:	f7fd f927 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8005e86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e94:	f040 810c 	bne.w	80060b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	1891      	adds	r1, r2, r2
 8005eb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005eb2:	415b      	adcs	r3, r3
 8005eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005eba:	4621      	mov	r1, r4
 8005ebc:	eb12 0801 	adds.w	r8, r2, r1
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	eb43 0901 	adc.w	r9, r3, r1
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eda:	4690      	mov	r8, r2
 8005edc:	4699      	mov	r9, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	eb18 0303 	adds.w	r3, r8, r3
 8005ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ee8:	462b      	mov	r3, r5
 8005eea:	eb49 0303 	adc.w	r3, r9, r3
 8005eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005efe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f06:	460b      	mov	r3, r1
 8005f08:	18db      	adds	r3, r3, r3
 8005f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	eb42 0303 	adc.w	r3, r2, r3
 8005f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f1c:	f7fa f9b0 	bl	8000280 <__aeabi_uldivmod>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4b61      	ldr	r3, [pc, #388]	@ (80060ac <UART_SetConfig+0x2d4>)
 8005f26:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	011c      	lsls	r4, r3, #4
 8005f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	1891      	adds	r1, r2, r2
 8005f46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f48:	415b      	adcs	r3, r3
 8005f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f50:	4641      	mov	r1, r8
 8005f52:	eb12 0a01 	adds.w	sl, r2, r1
 8005f56:	4649      	mov	r1, r9
 8005f58:	eb43 0b01 	adc.w	fp, r3, r1
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f70:	4692      	mov	sl, r2
 8005f72:	469b      	mov	fp, r3
 8005f74:	4643      	mov	r3, r8
 8005f76:	eb1a 0303 	adds.w	r3, sl, r3
 8005f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	eb4b 0303 	adc.w	r3, fp, r3
 8005f84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	18db      	adds	r3, r3, r3
 8005fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	eb42 0303 	adc.w	r3, r2, r3
 8005fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fb2:	f7fa f965 	bl	8000280 <__aeabi_uldivmod>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80060ac <UART_SetConfig+0x2d4>)
 8005fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	2264      	movs	r2, #100	@ 0x64
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	1acb      	subs	r3, r1, r3
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fd2:	4b36      	ldr	r3, [pc, #216]	@ (80060ac <UART_SetConfig+0x2d4>)
 8005fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fe0:	441c      	add	r4, r3
 8005fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	1891      	adds	r1, r2, r2
 8005ffa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ffc:	415b      	adcs	r3, r3
 8005ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006004:	4641      	mov	r1, r8
 8006006:	1851      	adds	r1, r2, r1
 8006008:	6339      	str	r1, [r7, #48]	@ 0x30
 800600a:	4649      	mov	r1, r9
 800600c:	414b      	adcs	r3, r1
 800600e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800601c:	4659      	mov	r1, fp
 800601e:	00cb      	lsls	r3, r1, #3
 8006020:	4651      	mov	r1, sl
 8006022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006026:	4651      	mov	r1, sl
 8006028:	00ca      	lsls	r2, r1, #3
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	4603      	mov	r3, r0
 8006030:	4642      	mov	r2, r8
 8006032:	189b      	adds	r3, r3, r2
 8006034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006038:	464b      	mov	r3, r9
 800603a:	460a      	mov	r2, r1
 800603c:	eb42 0303 	adc.w	r3, r2, r3
 8006040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006050:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006058:	460b      	mov	r3, r1
 800605a:	18db      	adds	r3, r3, r3
 800605c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800605e:	4613      	mov	r3, r2
 8006060:	eb42 0303 	adc.w	r3, r2, r3
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800606a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800606e:	f7fa f907 	bl	8000280 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4b0d      	ldr	r3, [pc, #52]	@ (80060ac <UART_SetConfig+0x2d4>)
 8006078:	fba3 1302 	umull	r1, r3, r3, r2
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	2164      	movs	r1, #100	@ 0x64
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	3332      	adds	r3, #50	@ 0x32
 800608a:	4a08      	ldr	r2, [pc, #32]	@ (80060ac <UART_SetConfig+0x2d4>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	f003 0207 	and.w	r2, r3, #7
 8006096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4422      	add	r2, r4
 800609e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060a0:	e106      	b.n	80062b0 <UART_SetConfig+0x4d8>
 80060a2:	bf00      	nop
 80060a4:	40011000 	.word	0x40011000
 80060a8:	40011400 	.word	0x40011400
 80060ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060c2:	4642      	mov	r2, r8
 80060c4:	464b      	mov	r3, r9
 80060c6:	1891      	adds	r1, r2, r2
 80060c8:	6239      	str	r1, [r7, #32]
 80060ca:	415b      	adcs	r3, r3
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060d2:	4641      	mov	r1, r8
 80060d4:	1854      	adds	r4, r2, r1
 80060d6:	4649      	mov	r1, r9
 80060d8:	eb43 0501 	adc.w	r5, r3, r1
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	00eb      	lsls	r3, r5, #3
 80060e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ea:	00e2      	lsls	r2, r4, #3
 80060ec:	4614      	mov	r4, r2
 80060ee:	461d      	mov	r5, r3
 80060f0:	4643      	mov	r3, r8
 80060f2:	18e3      	adds	r3, r4, r3
 80060f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060f8:	464b      	mov	r3, r9
 80060fa:	eb45 0303 	adc.w	r3, r5, r3
 80060fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800610e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800611e:	4629      	mov	r1, r5
 8006120:	008b      	lsls	r3, r1, #2
 8006122:	4621      	mov	r1, r4
 8006124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006128:	4621      	mov	r1, r4
 800612a:	008a      	lsls	r2, r1, #2
 800612c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006130:	f7fa f8a6 	bl	8000280 <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4b60      	ldr	r3, [pc, #384]	@ (80062bc <UART_SetConfig+0x4e4>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	011c      	lsls	r4, r3, #4
 8006142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800614c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	1891      	adds	r1, r2, r2
 800615a:	61b9      	str	r1, [r7, #24]
 800615c:	415b      	adcs	r3, r3
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006164:	4641      	mov	r1, r8
 8006166:	1851      	adds	r1, r2, r1
 8006168:	6139      	str	r1, [r7, #16]
 800616a:	4649      	mov	r1, r9
 800616c:	414b      	adcs	r3, r1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800617c:	4659      	mov	r1, fp
 800617e:	00cb      	lsls	r3, r1, #3
 8006180:	4651      	mov	r1, sl
 8006182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006186:	4651      	mov	r1, sl
 8006188:	00ca      	lsls	r2, r1, #3
 800618a:	4610      	mov	r0, r2
 800618c:	4619      	mov	r1, r3
 800618e:	4603      	mov	r3, r0
 8006190:	4642      	mov	r2, r8
 8006192:	189b      	adds	r3, r3, r2
 8006194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006198:	464b      	mov	r3, r9
 800619a:	460a      	mov	r2, r1
 800619c:	eb42 0303 	adc.w	r3, r2, r3
 80061a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061bc:	4649      	mov	r1, r9
 80061be:	008b      	lsls	r3, r1, #2
 80061c0:	4641      	mov	r1, r8
 80061c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c6:	4641      	mov	r1, r8
 80061c8:	008a      	lsls	r2, r1, #2
 80061ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061ce:	f7fa f857 	bl	8000280 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	4b38      	ldr	r3, [pc, #224]	@ (80062bc <UART_SetConfig+0x4e4>)
 80061da:	fba3 2301 	umull	r2, r3, r3, r1
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2264      	movs	r2, #100	@ 0x64
 80061e2:	fb02 f303 	mul.w	r3, r2, r3
 80061e6:	1acb      	subs	r3, r1, r3
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	3332      	adds	r3, #50	@ 0x32
 80061ec:	4a33      	ldr	r2, [pc, #204]	@ (80062bc <UART_SetConfig+0x4e4>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061f8:	441c      	add	r4, r3
 80061fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061fe:	2200      	movs	r2, #0
 8006200:	673b      	str	r3, [r7, #112]	@ 0x70
 8006202:	677a      	str	r2, [r7, #116]	@ 0x74
 8006204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006208:	4642      	mov	r2, r8
 800620a:	464b      	mov	r3, r9
 800620c:	1891      	adds	r1, r2, r2
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	415b      	adcs	r3, r3
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006218:	4641      	mov	r1, r8
 800621a:	1851      	adds	r1, r2, r1
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	4649      	mov	r1, r9
 8006220:	414b      	adcs	r3, r1
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006230:	4659      	mov	r1, fp
 8006232:	00cb      	lsls	r3, r1, #3
 8006234:	4651      	mov	r1, sl
 8006236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800623a:	4651      	mov	r1, sl
 800623c:	00ca      	lsls	r2, r1, #3
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	4603      	mov	r3, r0
 8006244:	4642      	mov	r2, r8
 8006246:	189b      	adds	r3, r3, r2
 8006248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800624a:	464b      	mov	r3, r9
 800624c:	460a      	mov	r2, r1
 800624e:	eb42 0303 	adc.w	r3, r2, r3
 8006252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	663b      	str	r3, [r7, #96]	@ 0x60
 800625e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800626c:	4649      	mov	r1, r9
 800626e:	008b      	lsls	r3, r1, #2
 8006270:	4641      	mov	r1, r8
 8006272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006276:	4641      	mov	r1, r8
 8006278:	008a      	lsls	r2, r1, #2
 800627a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800627e:	f7f9 ffff 	bl	8000280 <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <UART_SetConfig+0x4e4>)
 8006288:	fba3 1302 	umull	r1, r3, r3, r2
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	2164      	movs	r1, #100	@ 0x64
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	3332      	adds	r3, #50	@ 0x32
 800629a:	4a08      	ldr	r2, [pc, #32]	@ (80062bc <UART_SetConfig+0x4e4>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4422      	add	r2, r4
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062b6:	46bd      	mov	sp, r7
 80062b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062bc:	51eb851f 	.word	0x51eb851f

080062c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80062c0:	b084      	sub	sp, #16
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	f107 001c 	add.w	r0, r7, #28
 80062ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80062d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80062d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80062da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80062de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80062e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80062e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80062ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80062fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	b004      	add	sp, #16
 8006314:	4770      	bx	lr

08006316 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2203      	movs	r2, #3
 800635e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0303 	and.w	r3, r3, #3
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80063ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80063b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80063c4:	f023 030f 	bic.w	r3, r3, #15
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	b2db      	uxtb	r3, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3314      	adds	r3, #20
 8006406:	461a      	mov	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	4413      	add	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
}  
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006444:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800644a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006450:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006468:	2300      	movs	r3, #0

}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b088      	sub	sp, #32
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006484:	2310      	movs	r3, #16
 8006486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006488:	2340      	movs	r3, #64	@ 0x40
 800648a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006494:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff ff74 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80064a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a6:	2110      	movs	r1, #16
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f9d7 	bl	800685c <SDMMC_GetCmdResp1>
 80064ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064b0:	69fb      	ldr	r3, [r7, #28]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b088      	sub	sp, #32
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80064c8:	2311      	movs	r3, #17
 80064ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064cc:	2340      	movs	r3, #64	@ 0x40
 80064ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064da:	f107 0308 	add.w	r3, r7, #8
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff52 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80064e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ea:	2111      	movs	r1, #17
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9b5 	bl	800685c <SDMMC_GetCmdResp1>
 80064f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064f4:	69fb      	ldr	r3, [r7, #28]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b088      	sub	sp, #32
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800650c:	2312      	movs	r3, #18
 800650e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006510:	2340      	movs	r3, #64	@ 0x40
 8006512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800651c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ff30 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800652a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800652e:	2112      	movs	r1, #18
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f993 	bl	800685c <SDMMC_GetCmdResp1>
 8006536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006538:	69fb      	ldr	r3, [r7, #28]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b088      	sub	sp, #32
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006550:	2318      	movs	r3, #24
 8006552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006554:	2340      	movs	r3, #64	@ 0x40
 8006556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800655c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006562:	f107 0308 	add.w	r3, r7, #8
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff0e 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800656e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006572:	2118      	movs	r1, #24
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f971 	bl	800685c <SDMMC_GetCmdResp1>
 800657a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800657c:	69fb      	ldr	r3, [r7, #28]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b088      	sub	sp, #32
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006594:	2319      	movs	r3, #25
 8006596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006598:	2340      	movs	r3, #64	@ 0x40
 800659a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff feec 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80065b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b6:	2119      	movs	r1, #25
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f94f 	bl	800685c <SDMMC_GetCmdResp1>
 80065be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065c0:	69fb      	ldr	r3, [r7, #28]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80065d8:	230c      	movs	r3, #12
 80065da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065dc:	2340      	movs	r3, #64	@ 0x40
 80065de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065ea:	f107 0308 	add.w	r3, r7, #8
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff feca 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80065f6:	4a05      	ldr	r2, [pc, #20]	@ (800660c <SDMMC_CmdStopTransfer+0x40>)
 80065f8:	210c      	movs	r1, #12
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f92e 	bl	800685c <SDMMC_GetCmdResp1>
 8006600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006602:	69fb      	ldr	r3, [r7, #28]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	05f5e100 	.word	0x05f5e100

08006610 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006620:	2307      	movs	r3, #7
 8006622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006624:	2340      	movs	r3, #64	@ 0x40
 8006626:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800662c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006630:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006632:	f107 0310 	add.w	r3, r7, #16
 8006636:	4619      	mov	r1, r3
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff fea6 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800663e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006642:	2107      	movs	r1, #7
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f909 	bl	800685c <SDMMC_GetCmdResp1>
 800664a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800664e:	4618      	mov	r0, r3
 8006650:	3728      	adds	r7, #40	@ 0x28
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b088      	sub	sp, #32
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006666:	2300      	movs	r3, #0
 8006668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800666e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006672:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fe85 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fb23 	bl	8006ccc <SDMMC_GetCmdError>
 8006686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006688:	69fb      	ldr	r3, [r7, #28]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800669a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800669e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80066a0:	2308      	movs	r3, #8
 80066a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066a4:	2340      	movs	r3, #64	@ 0x40
 80066a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fe66 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fab6 	bl	8006c30 <SDMMC_GetCmdResp7>
 80066c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066c6:	69fb      	ldr	r3, [r7, #28]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80066de:	2337      	movs	r3, #55	@ 0x37
 80066e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066e2:	2340      	movs	r3, #64	@ 0x40
 80066e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066f0:	f107 0308 	add.w	r3, r7, #8
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fe47 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80066fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006700:	2137      	movs	r1, #55	@ 0x37
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8aa 	bl	800685c <SDMMC_GetCmdResp1>
 8006708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800670a:	69fb      	ldr	r3, [r7, #28]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800672a:	2329      	movs	r3, #41	@ 0x29
 800672c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800672e:	2340      	movs	r3, #64	@ 0x40
 8006730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800673a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800673c:	f107 0308 	add.w	r3, r7, #8
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fe21 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f9bd 	bl	8006ac8 <SDMMC_GetCmdResp3>
 800674e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006750:	69fb      	ldr	r3, [r7, #28]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006766:	2302      	movs	r3, #2
 8006768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800676a:	23c0      	movs	r3, #192	@ 0xc0
 800676c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006778:	f107 0308 	add.w	r3, r7, #8
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fe03 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f957 	bl	8006a38 <SDMMC_GetCmdResp2>
 800678a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800678c:	69fb      	ldr	r3, [r7, #28]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3720      	adds	r7, #32
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b088      	sub	sp, #32
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80067a4:	2309      	movs	r3, #9
 80067a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80067a8:	23c0      	movs	r3, #192	@ 0xc0
 80067aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fde4 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f938 	bl	8006a38 <SDMMC_GetCmdResp2>
 80067c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067ca:	69fb      	ldr	r3, [r7, #28]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80067e2:	2303      	movs	r3, #3
 80067e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067e6:	2340      	movs	r3, #64	@ 0x40
 80067e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067f4:	f107 0308 	add.w	r3, r7, #8
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fdc5 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	2103      	movs	r1, #3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f99d 	bl	8006b44 <SDMMC_GetCmdResp6>
 800680a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800680c:	69fb      	ldr	r3, [r7, #28]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b088      	sub	sp, #32
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006824:	230d      	movs	r3, #13
 8006826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006828:	2340      	movs	r3, #64	@ 0x40
 800682a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006834:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006836:	f107 0308 	add.w	r3, r7, #8
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fda4 	bl	800638a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006846:	210d      	movs	r1, #13
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f807 	bl	800685c <SDMMC_GetCmdResp1>
 800684e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006850:	69fb      	ldr	r3, [r7, #28]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3720      	adds	r7, #32
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	460b      	mov	r3, r1
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800686a:	4b70      	ldr	r3, [pc, #448]	@ (8006a2c <SDMMC_GetCmdResp1+0x1d0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a70      	ldr	r2, [pc, #448]	@ (8006a30 <SDMMC_GetCmdResp1+0x1d4>)
 8006870:	fba2 2303 	umull	r2, r3, r2, r3
 8006874:	0a5a      	lsrs	r2, r3, #9
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	fb02 f303 	mul.w	r3, r2, r3
 800687c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	1e5a      	subs	r2, r3, #1
 8006882:	61fa      	str	r2, [r7, #28]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006888:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800688c:	e0c9      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006892:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0ef      	beq.n	800687e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1ea      	bne.n	800687e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d004      	beq.n	80068be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2204      	movs	r2, #4
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068ba:	2304      	movs	r3, #4
 80068bc:	e0b1      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0a6      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	22c5      	movs	r2, #197	@ 0xc5
 80068d8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fd7f 	bl	80063de <SDIO_GetCommandResponse>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d001      	beq.n	80068ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e099      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80068ee:	2100      	movs	r1, #0
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff fd81 	bl	80063f8 <SDIO_GetResponse>
 80068f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4b4e      	ldr	r3, [pc, #312]	@ (8006a34 <SDMMC_GetCmdResp1+0x1d8>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006902:	2300      	movs	r3, #0
 8006904:	e08d      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	da02      	bge.n	8006912 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800690c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006910:	e087      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800691c:	2340      	movs	r3, #64	@ 0x40
 800691e:	e080      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800692a:	2380      	movs	r3, #128	@ 0x80
 800692c:	e079      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800693c:	e071      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800694c:	e069      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800695c:	e061      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006968:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800696c:	e059      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800697c:	e051      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800698c:	e049      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006998:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800699c:	e041      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80069a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ac:	e039      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80069b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069bc:	e031      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80069c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80069cc:	e029      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80069d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80069dc:	e021      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80069e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80069ec:	e019      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80069f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80069fc:	e011      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006a08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006a0c:	e009      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006a18:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006a1c:	e001      	b.n	8006a22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000000 	.word	0x20000000
 8006a30:	10624dd3 	.word	0x10624dd3
 8006a34:	fdffe008 	.word	0xfdffe008

08006a38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a40:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac0 <SDMMC_GetCmdResp2+0x88>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <SDMMC_GetCmdResp2+0x8c>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	0a5b      	lsrs	r3, r3, #9
 8006a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	1e5a      	subs	r2, r3, #1
 8006a5a:	60fa      	str	r2, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a64:	e026      	b.n	8006ab4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0ef      	beq.n	8006a56 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1ea      	bne.n	8006a56 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a92:	2304      	movs	r3, #4
 8006a94:	e00e      	b.n	8006ab4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e003      	b.n	8006ab4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	22c5      	movs	r2, #197	@ 0xc5
 8006ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20000000 	.word	0x20000000
 8006ac4:	10624dd3 	.word	0x10624dd3

08006ac8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b3c <SDMMC_GetCmdResp3+0x74>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b40 <SDMMC_GetCmdResp3+0x78>)
 8006ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ada:	0a5b      	lsrs	r3, r3, #9
 8006adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1e5a      	subs	r2, r3, #1
 8006aea:	60fa      	str	r2, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006af0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006af4:	e01b      	b.n	8006b2e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0ef      	beq.n	8006ae6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ea      	bne.n	8006ae6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2204      	movs	r2, #4
 8006b20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b22:	2304      	movs	r3, #4
 8006b24:	e003      	b.n	8006b2e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	22c5      	movs	r2, #197	@ 0xc5
 8006b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	20000000 	.word	0x20000000
 8006b40:	10624dd3 	.word	0x10624dd3

08006b44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b52:	4b35      	ldr	r3, [pc, #212]	@ (8006c28 <SDMMC_GetCmdResp6+0xe4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a35      	ldr	r2, [pc, #212]	@ (8006c2c <SDMMC_GetCmdResp6+0xe8>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	0a5b      	lsrs	r3, r3, #9
 8006b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	1e5a      	subs	r2, r3, #1
 8006b6c:	61fa      	str	r2, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b76:	e052      	b.n	8006c1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0ef      	beq.n	8006b68 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ea      	bne.n	8006b68 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	e03a      	b.n	8006c1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e02f      	b.n	8006c1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fc0d 	bl	80063de <SDIO_GetCommandResponse>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d001      	beq.n	8006bd2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e025      	b.n	8006c1e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	22c5      	movs	r2, #197	@ 0xc5
 8006bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff fc0c 	bl	80063f8 <SDIO_GetResponse>
 8006be0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e011      	b.n	8006c1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c08:	e009      	b.n	8006c1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c18:	e001      	b.n	8006c1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000000 	.word	0x20000000
 8006c2c:	10624dd3 	.word	0x10624dd3

08006c30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c38:	4b22      	ldr	r3, [pc, #136]	@ (8006cc4 <SDMMC_GetCmdResp7+0x94>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a22      	ldr	r2, [pc, #136]	@ (8006cc8 <SDMMC_GetCmdResp7+0x98>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	0a5b      	lsrs	r3, r3, #9
 8006c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c48:	fb02 f303 	mul.w	r3, r2, r3
 8006c4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1e5a      	subs	r2, r3, #1
 8006c52:	60fa      	str	r2, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c5c:	e02c      	b.n	8006cb8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0ef      	beq.n	8006c4e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1ea      	bne.n	8006c4e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2204      	movs	r2, #4
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c8a:	2304      	movs	r3, #4
 8006c8c:	e014      	b.n	8006cb8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e009      	b.n	8006cb8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2240      	movs	r2, #64	@ 0x40
 8006cb4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006cb6:	2300      	movs	r3, #0
  
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	20000000 	.word	0x20000000
 8006cc8:	10624dd3 	.word	0x10624dd3

08006ccc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cd4:	4b11      	ldr	r3, [pc, #68]	@ (8006d1c <SDMMC_GetCmdError+0x50>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <SDMMC_GetCmdError+0x54>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	0a5b      	lsrs	r3, r3, #9
 8006ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce4:	fb02 f303 	mul.w	r3, r2, r3
 8006ce8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1e5a      	subs	r2, r3, #1
 8006cee:	60fa      	str	r2, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006cf8:	e009      	b.n	8006d0e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0f1      	beq.n	8006cea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	22c5      	movs	r2, #197	@ 0xc5
 8006d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000000 	.word	0x20000000
 8006d20:	10624dd3 	.word	0x10624dd3

08006d24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006d28:	4904      	ldr	r1, [pc, #16]	@ (8006d3c <MX_FATFS_Init+0x18>)
 8006d2a:	4805      	ldr	r0, [pc, #20]	@ (8006d40 <MX_FATFS_Init+0x1c>)
 8006d2c:	f002 fc5c 	bl	80095e8 <FATFS_LinkDriver>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	4b03      	ldr	r3, [pc, #12]	@ (8006d44 <MX_FATFS_Init+0x20>)
 8006d36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006d38:	bf00      	nop
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	200007e0 	.word	0x200007e0
 8006d40:	0800acac 	.word	0x0800acac
 8006d44:	200007dc 	.word	0x200007dc

08006d48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006d4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006d62:	f000 f86b 	bl	8006e3c <BSP_SD_IsDetected>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d001      	beq.n	8006d70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e005      	b.n	8006d7c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006d70:	4804      	ldr	r0, [pc, #16]	@ (8006d84 <BSP_SD_Init+0x2c>)
 8006d72:	f7fc fe4f 	bl	8003a14 <HAL_SD_Init>
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000574 	.word	0x20000574

08006d88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	4806      	ldr	r0, [pc, #24]	@ (8006dc0 <BSP_SD_ReadBlocks+0x38>)
 8006da6:	f7fc fedd 	bl	8003b64 <HAL_SD_ReadBlocks>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000574 	.word	0x20000574

08006dc4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	4806      	ldr	r0, [pc, #24]	@ (8006dfc <BSP_SD_WriteBlocks+0x38>)
 8006de2:	f7fd f8a5 	bl	8003f30 <HAL_SD_WriteBlocks>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000574 	.word	0x20000574

08006e00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006e04:	4805      	ldr	r0, [pc, #20]	@ (8006e1c <BSP_SD_GetCardState+0x1c>)
 8006e06:	f7fd fbf1 	bl	80045ec <HAL_SD_GetCardState>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000574 	.word	0x20000574

08006e20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4803      	ldr	r0, [pc, #12]	@ (8006e38 <BSP_SD_GetCardInfo+0x18>)
 8006e2c:	f7fd fbb2 	bl	8004594 <HAL_SD_GetCardInfo>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000574 	.word	0x20000574

08006e3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006e42:	2301      	movs	r3, #1
 8006e44:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	b2db      	uxtb	r3, r3
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006e62:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <SD_CheckStatus+0x38>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006e68:	f7ff ffca 	bl	8006e00 <BSP_SD_GetCardState>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d107      	bne.n	8006e82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006e72:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <SD_CheckStatus+0x38>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	4b04      	ldr	r3, [pc, #16]	@ (8006e90 <SD_CheckStatus+0x38>)
 8006e80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006e82:	4b03      	ldr	r3, [pc, #12]	@ (8006e90 <SD_CheckStatus+0x38>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b2db      	uxtb	r3, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000009 	.word	0x20000009

08006e94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ecc <SD_initialize+0x38>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006ea4:	f7ff ff58 	bl	8006d58 <BSP_SD_Init>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d107      	bne.n	8006ebe <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff ffd1 	bl	8006e58 <SD_CheckStatus>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4b04      	ldr	r3, [pc, #16]	@ (8006ecc <SD_initialize+0x38>)
 8006ebc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006ebe:	4b03      	ldr	r3, [pc, #12]	@ (8006ecc <SD_initialize+0x38>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	b2db      	uxtb	r3, r3
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000009 	.word	0x20000009

08006ed0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff ffbb 	bl	8006e58 <SD_CheckStatus>
 8006ee2:	4603      	mov	r3, r0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006f00:	f04f 33ff 	mov.w	r3, #4294967295
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	68b8      	ldr	r0, [r7, #8]
 8006f0a:	f7ff ff3d 	bl	8006d88 <BSP_SD_ReadBlocks>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d107      	bne.n	8006f24 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006f14:	bf00      	nop
 8006f16:	f7ff ff73 	bl	8006e00 <BSP_SD_GetCardState>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1fa      	bne.n	8006f16 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	68b8      	ldr	r0, [r7, #8]
 8006f4c:	f7ff ff3a 	bl	8006dc4 <BSP_SD_WriteBlocks>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d107      	bne.n	8006f66 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006f56:	bf00      	nop
 8006f58:	f7ff ff52 	bl	8006e00 <BSP_SD_GetCardState>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1fa      	bne.n	8006f58 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08c      	sub	sp, #48	@ 0x30
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	603a      	str	r2, [r7, #0]
 8006f7a:	71fb      	strb	r3, [r7, #7]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006f86:	4b25      	ldr	r3, [pc, #148]	@ (800701c <SD_ioctl+0xac>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <SD_ioctl+0x28>
 8006f94:	2303      	movs	r3, #3
 8006f96:	e03c      	b.n	8007012 <SD_ioctl+0xa2>

  switch (cmd)
 8006f98:	79bb      	ldrb	r3, [r7, #6]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d834      	bhi.n	8007008 <SD_ioctl+0x98>
 8006f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <SD_ioctl+0x34>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fbd 	.word	0x08006fbd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fef 	.word	0x08006fef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006fba:	e028      	b.n	800700e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006fbc:	f107 030c 	add.w	r3, r7, #12
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff ff2d 	bl	8006e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006fd2:	e01c      	b.n	800700e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff21 	bl	8006e20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006fec:	e00f      	b.n	800700e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006fee:	f107 030c 	add.w	r3, r7, #12
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff14 	bl	8006e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	0a5a      	lsrs	r2, r3, #9
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007006:	e002      	b.n	800700e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007008:	2304      	movs	r3, #4
 800700a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800700e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007012:	4618      	mov	r0, r3
 8007014:	3730      	adds	r7, #48	@ 0x30
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000009 	.word	0x20000009

08007020 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	4a08      	ldr	r2, [pc, #32]	@ (8007050 <disk_status+0x30>)
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	79fa      	ldrb	r2, [r7, #7]
 8007038:	4905      	ldr	r1, [pc, #20]	@ (8007050 <disk_status+0x30>)
 800703a:	440a      	add	r2, r1
 800703c:	7a12      	ldrb	r2, [r2, #8]
 800703e:	4610      	mov	r0, r2
 8007040:	4798      	blx	r3
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	2000080c 	.word	0x2000080c

08007054 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	4a0e      	ldr	r2, [pc, #56]	@ (80070a0 <disk_initialize+0x4c>)
 8007066:	5cd3      	ldrb	r3, [r2, r3]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d114      	bne.n	8007096 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	4a0c      	ldr	r2, [pc, #48]	@ (80070a0 <disk_initialize+0x4c>)
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	79fa      	ldrb	r2, [r7, #7]
 800707a:	4909      	ldr	r1, [pc, #36]	@ (80070a0 <disk_initialize+0x4c>)
 800707c:	440a      	add	r2, r1
 800707e:	7a12      	ldrb	r2, [r2, #8]
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	4a03      	ldr	r2, [pc, #12]	@ (80070a0 <disk_initialize+0x4c>)
 8007092:	2101      	movs	r1, #1
 8007094:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	2000080c 	.word	0x2000080c

080070a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	4a0a      	ldr	r2, [pc, #40]	@ (80070e0 <disk_read+0x3c>)
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	689c      	ldr	r4, [r3, #8]
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	4a07      	ldr	r2, [pc, #28]	@ (80070e0 <disk_read+0x3c>)
 80070c4:	4413      	add	r3, r2
 80070c6:	7a18      	ldrb	r0, [r3, #8]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	47a0      	blx	r4
 80070d0:	4603      	mov	r3, r0
 80070d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	bf00      	nop
 80070e0:	2000080c 	.word	0x2000080c

080070e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007120 <disk_write+0x3c>)
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	68dc      	ldr	r4, [r3, #12]
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	4a07      	ldr	r2, [pc, #28]	@ (8007120 <disk_write+0x3c>)
 8007104:	4413      	add	r3, r2
 8007106:	7a18      	ldrb	r0, [r3, #8]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	47a0      	blx	r4
 8007110:	4603      	mov	r3, r0
 8007112:	75fb      	strb	r3, [r7, #23]
  return res;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
}
 8007116:	4618      	mov	r0, r3
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}
 800711e:	bf00      	nop
 8007120:	2000080c 	.word	0x2000080c

08007124 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	603a      	str	r2, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
 8007130:	460b      	mov	r3, r1
 8007132:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	4a09      	ldr	r2, [pc, #36]	@ (800715c <disk_ioctl+0x38>)
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	79fa      	ldrb	r2, [r7, #7]
 8007142:	4906      	ldr	r1, [pc, #24]	@ (800715c <disk_ioctl+0x38>)
 8007144:	440a      	add	r2, r1
 8007146:	7a10      	ldrb	r0, [r2, #8]
 8007148:	79b9      	ldrb	r1, [r7, #6]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
  return res;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	2000080c 	.word	0x2000080c

08007160 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3301      	adds	r3, #1
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007170:	89fb      	ldrh	r3, [r7, #14]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b21a      	sxth	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	b21b      	sxth	r3, r3
 800717c:	4313      	orrs	r3, r2
 800717e:	b21b      	sxth	r3, r3
 8007180:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007182:	89fb      	ldrh	r3, [r7, #14]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3303      	adds	r3, #3
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	3202      	adds	r2, #2
 80071a8:	7812      	ldrb	r2, [r2, #0]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	3201      	adds	r2, #1
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80071c8:	68fb      	ldr	r3, [r7, #12]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	887a      	ldrh	r2, [r7, #2]
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	887b      	ldrh	r3, [r7, #2]
 80071f0:	0a1b      	lsrs	r3, r3, #8
 80071f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	607a      	str	r2, [r7, #4]
 80071fa:	887a      	ldrh	r2, [r7, #2]
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	701a      	strb	r2, [r3, #0]
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	607a      	str	r2, [r7, #4]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	1c53      	adds	r3, r2, #1
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	6179      	str	r1, [r7, #20]
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3b01      	subs	r3, #1
 8007292:	607b      	str	r3, [r7, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1f1      	bne.n	800727e <mem_cpy+0x1a>
	}
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	617a      	str	r2, [r7, #20]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f3      	bne.n	80072b6 <mem_set+0x10>
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80072dc:	b480      	push	{r7}
 80072de:	b089      	sub	sp, #36	@ 0x24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	61fa      	str	r2, [r7, #28]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	4619      	mov	r1, r3
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	61ba      	str	r2, [r7, #24]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	1acb      	subs	r3, r1, r3
 8007308:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3b01      	subs	r3, #1
 800730e:	607b      	str	r3, [r7, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <mem_cmp+0x40>
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0eb      	beq.n	80072f4 <mem_cmp+0x18>

	return r;
 800731c:	697b      	ldr	r3, [r7, #20]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3724      	adds	r7, #36	@ 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007334:	e002      	b.n	800733c <chk_chr+0x12>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3301      	adds	r3, #1
 800733a:	607b      	str	r3, [r7, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <chk_chr+0x26>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	4293      	cmp	r3, r2
 800734e:	d1f2      	bne.n	8007336 <chk_chr+0xc>
	return *str;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	781b      	ldrb	r3, [r3, #0]
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e029      	b.n	80073c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007374:	4a27      	ldr	r2, [pc, #156]	@ (8007414 <chk_lock+0xb4>)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	4413      	add	r3, r2
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01d      	beq.n	80073be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007382:	4a24      	ldr	r2, [pc, #144]	@ (8007414 <chk_lock+0xb4>)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	4413      	add	r3, r2
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d116      	bne.n	80073c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007394:	4a1f      	ldr	r2, [pc, #124]	@ (8007414 <chk_lock+0xb4>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	4413      	add	r3, r2
 800739c:	3304      	adds	r3, #4
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d10c      	bne.n	80073c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80073a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007414 <chk_lock+0xb4>)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	4413      	add	r3, r2
 80073b0:	3308      	adds	r3, #8
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d102      	bne.n	80073c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80073bc:	e007      	b.n	80073ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80073be:	2301      	movs	r3, #1
 80073c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d9d2      	bls.n	8007374 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d109      	bne.n	80073e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d102      	bne.n	80073e0 <chk_lock+0x80>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d101      	bne.n	80073e4 <chk_lock+0x84>
 80073e0:	2300      	movs	r3, #0
 80073e2:	e010      	b.n	8007406 <chk_lock+0xa6>
 80073e4:	2312      	movs	r3, #18
 80073e6:	e00e      	b.n	8007406 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d108      	bne.n	8007400 <chk_lock+0xa0>
 80073ee:	4a09      	ldr	r2, [pc, #36]	@ (8007414 <chk_lock+0xb4>)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	4413      	add	r3, r2
 80073f6:	330c      	adds	r3, #12
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073fe:	d101      	bne.n	8007404 <chk_lock+0xa4>
 8007400:	2310      	movs	r3, #16
 8007402:	e000      	b.n	8007406 <chk_lock+0xa6>
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	200007ec 	.word	0x200007ec

08007418 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800741e:	2300      	movs	r3, #0
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	e002      	b.n	800742a <enq_lock+0x12>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3301      	adds	r3, #1
 8007428:	607b      	str	r3, [r7, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d806      	bhi.n	800743e <enq_lock+0x26>
 8007430:	4a09      	ldr	r2, [pc, #36]	@ (8007458 <enq_lock+0x40>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	4413      	add	r3, r2
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f2      	bne.n	8007424 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b02      	cmp	r3, #2
 8007442:	bf14      	ite	ne
 8007444:	2301      	movne	r3, #1
 8007446:	2300      	moveq	r3, #0
 8007448:	b2db      	uxtb	r3, r3
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200007ec 	.word	0x200007ec

0800745c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	e01f      	b.n	80074ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800746c:	4a41      	ldr	r2, [pc, #260]	@ (8007574 <inc_lock+0x118>)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	4413      	add	r3, r2
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d113      	bne.n	80074a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800747e:	4a3d      	ldr	r2, [pc, #244]	@ (8007574 <inc_lock+0x118>)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	4413      	add	r3, r2
 8007486:	3304      	adds	r3, #4
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800748e:	429a      	cmp	r2, r3
 8007490:	d109      	bne.n	80074a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007492:	4a38      	ldr	r2, [pc, #224]	@ (8007574 <inc_lock+0x118>)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	4413      	add	r3, r2
 800749a:	3308      	adds	r3, #8
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d006      	beq.n	80074b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d9dc      	bls.n	800746c <inc_lock+0x10>
 80074b2:	e000      	b.n	80074b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80074b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d132      	bne.n	8007522 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	e002      	b.n	80074c8 <inc_lock+0x6c>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d806      	bhi.n	80074dc <inc_lock+0x80>
 80074ce:	4a29      	ldr	r2, [pc, #164]	@ (8007574 <inc_lock+0x118>)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	4413      	add	r3, r2
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f2      	bne.n	80074c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d101      	bne.n	80074e6 <inc_lock+0x8a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	e040      	b.n	8007568 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4922      	ldr	r1, [pc, #136]	@ (8007574 <inc_lock+0x118>)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	440b      	add	r3, r1
 80074f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	491e      	ldr	r1, [pc, #120]	@ (8007574 <inc_lock+0x118>)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	440b      	add	r3, r1
 8007500:	3304      	adds	r3, #4
 8007502:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695a      	ldr	r2, [r3, #20]
 8007508:	491a      	ldr	r1, [pc, #104]	@ (8007574 <inc_lock+0x118>)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	440b      	add	r3, r1
 8007510:	3308      	adds	r3, #8
 8007512:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007514:	4a17      	ldr	r2, [pc, #92]	@ (8007574 <inc_lock+0x118>)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	4413      	add	r3, r2
 800751c:	330c      	adds	r3, #12
 800751e:	2200      	movs	r2, #0
 8007520:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <inc_lock+0xe0>
 8007528:	4a12      	ldr	r2, [pc, #72]	@ (8007574 <inc_lock+0x118>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	4413      	add	r3, r2
 8007530:	330c      	adds	r3, #12
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <inc_lock+0xe0>
 8007538:	2300      	movs	r3, #0
 800753a:	e015      	b.n	8007568 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d108      	bne.n	8007554 <inc_lock+0xf8>
 8007542:	4a0c      	ldr	r2, [pc, #48]	@ (8007574 <inc_lock+0x118>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	4413      	add	r3, r2
 800754a:	330c      	adds	r3, #12
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	e001      	b.n	8007558 <inc_lock+0xfc>
 8007554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007558:	4906      	ldr	r1, [pc, #24]	@ (8007574 <inc_lock+0x118>)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	440b      	add	r3, r1
 8007560:	330c      	adds	r3, #12
 8007562:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	200007ec 	.word	0x200007ec

08007578 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3b01      	subs	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d825      	bhi.n	80075d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800758c:	4a17      	ldr	r2, [pc, #92]	@ (80075ec <dec_lock+0x74>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	4413      	add	r3, r2
 8007594:	330c      	adds	r3, #12
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800759a:	89fb      	ldrh	r3, [r7, #14]
 800759c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075a0:	d101      	bne.n	80075a6 <dec_lock+0x2e>
 80075a2:	2300      	movs	r3, #0
 80075a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80075a6:	89fb      	ldrh	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <dec_lock+0x3a>
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80075b2:	4a0e      	ldr	r2, [pc, #56]	@ (80075ec <dec_lock+0x74>)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	4413      	add	r3, r2
 80075ba:	330c      	adds	r3, #12
 80075bc:	89fa      	ldrh	r2, [r7, #14]
 80075be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80075c0:	89fb      	ldrh	r3, [r7, #14]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d105      	bne.n	80075d2 <dec_lock+0x5a>
 80075c6:	4a09      	ldr	r2, [pc, #36]	@ (80075ec <dec_lock+0x74>)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	4413      	add	r3, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	737b      	strb	r3, [r7, #13]
 80075d6:	e001      	b.n	80075dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80075d8:	2302      	movs	r3, #2
 80075da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80075dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	200007ec 	.word	0x200007ec

080075f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	e010      	b.n	8007620 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80075fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007634 <clear_lock+0x44>)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	4413      	add	r3, r2
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	429a      	cmp	r2, r3
 800760c:	d105      	bne.n	800761a <clear_lock+0x2a>
 800760e:	4a09      	ldr	r2, [pc, #36]	@ (8007634 <clear_lock+0x44>)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	4413      	add	r3, r2
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d9eb      	bls.n	80075fe <clear_lock+0xe>
	}
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	200007ec 	.word	0x200007ec

08007638 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	78db      	ldrb	r3, [r3, #3]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d034      	beq.n	80076b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7858      	ldrb	r0, [r3, #1]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800765c:	2301      	movs	r3, #1
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	f7ff fd40 	bl	80070e4 <disk_write>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <sync_window+0x38>
			res = FR_DISK_ERR;
 800766a:	2301      	movs	r3, #1
 800766c:	73fb      	strb	r3, [r7, #15]
 800766e:	e022      	b.n	80076b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	1ad2      	subs	r2, r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	429a      	cmp	r2, r3
 8007684:	d217      	bcs.n	80076b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	789b      	ldrb	r3, [r3, #2]
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	e010      	b.n	80076b0 <sync_window+0x78>
					wsect += fs->fsize;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4413      	add	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7858      	ldrb	r0, [r3, #1]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80076a2:	2301      	movs	r3, #1
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	f7ff fd1d 	bl	80070e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d8eb      	bhi.n	800768e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d01b      	beq.n	8007710 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ffad 	bl	8007638 <sync_window>
 80076de:	4603      	mov	r3, r0
 80076e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d113      	bne.n	8007710 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7858      	ldrb	r0, [r3, #1]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80076f2:	2301      	movs	r3, #1
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	f7ff fcd5 	bl	80070a4 <disk_read>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007700:	f04f 33ff 	mov.w	r3, #4294967295
 8007704:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007706:	2301      	movs	r3, #1
 8007708:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ff87 	bl	8007638 <sync_window>
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d158      	bne.n	80077e6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b03      	cmp	r3, #3
 800773a:	d148      	bne.n	80077ce <sync_fs+0xb2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	791b      	ldrb	r3, [r3, #4]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d144      	bne.n	80077ce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3330      	adds	r3, #48	@ 0x30
 8007748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff fda9 	bl	80072a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3330      	adds	r3, #48	@ 0x30
 8007758:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800775c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fd38 	bl	80071d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3330      	adds	r3, #48	@ 0x30
 800776a:	4921      	ldr	r1, [pc, #132]	@ (80077f0 <sync_fs+0xd4>)
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fd4d 	bl	800720c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3330      	adds	r3, #48	@ 0x30
 8007776:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800777a:	491e      	ldr	r1, [pc, #120]	@ (80077f4 <sync_fs+0xd8>)
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fd45 	bl	800720c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3330      	adds	r3, #48	@ 0x30
 8007786:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	4619      	mov	r1, r3
 8007790:	4610      	mov	r0, r2
 8007792:	f7ff fd3b 	bl	800720c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3330      	adds	r3, #48	@ 0x30
 800779a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f7ff fd31 	bl	800720c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	7858      	ldrb	r0, [r3, #1]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c2:	2301      	movs	r3, #1
 80077c4:	f7ff fc8e 	bl	80070e4 <disk_write>
			fs->fsi_flag = 0;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2200      	movs	r2, #0
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fca4 	bl	8007124 <disk_ioctl>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <sync_fs+0xca>
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	41615252 	.word	0x41615252
 80077f4:	61417272 	.word	0x61417272

080077f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	3b02      	subs	r3, #2
 8007806:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	3b02      	subs	r3, #2
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d301      	bcc.n	8007818 <clust2sect+0x20>
 8007814:	2300      	movs	r3, #0
 8007816:	e008      	b.n	800782a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	895b      	ldrh	r3, [r3, #10]
 800781c:	461a      	mov	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	fb03 f202 	mul.w	r2, r3, r2
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	4413      	add	r3, r2
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b086      	sub	sp, #24
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d904      	bls.n	8007856 <get_fat+0x20>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d302      	bcc.n	800785c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007856:	2301      	movs	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	e08e      	b.n	800797a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800785c:	f04f 33ff 	mov.w	r3, #4294967295
 8007860:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d061      	beq.n	800792e <get_fat+0xf8>
 800786a:	2b03      	cmp	r3, #3
 800786c:	dc7b      	bgt.n	8007966 <get_fat+0x130>
 800786e:	2b01      	cmp	r3, #1
 8007870:	d002      	beq.n	8007878 <get_fat+0x42>
 8007872:	2b02      	cmp	r3, #2
 8007874:	d041      	beq.n	80078fa <get_fat+0xc4>
 8007876:	e076      	b.n	8007966 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	0a5b      	lsrs	r3, r3, #9
 800788e:	4413      	add	r3, r2
 8007890:	4619      	mov	r1, r3
 8007892:	6938      	ldr	r0, [r7, #16]
 8007894:	f7ff ff14 	bl	80076c0 <move_window>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d166      	bne.n	800796c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	60fa      	str	r2, [r7, #12]
 80078a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4413      	add	r3, r2
 80078ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	6a1a      	ldr	r2, [r3, #32]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	0a5b      	lsrs	r3, r3, #9
 80078ba:	4413      	add	r3, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	6938      	ldr	r0, [r7, #16]
 80078c0:	f7ff fefe 	bl	80076c0 <move_window>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d152      	bne.n	8007970 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078d8:	021b      	lsls	r3, r3, #8
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <get_fat+0xba>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	e002      	b.n	80078f6 <get_fat+0xc0>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078f6:	617b      	str	r3, [r7, #20]
			break;
 80078f8:	e03f      	b.n	800797a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	6a1a      	ldr	r2, [r3, #32]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	4413      	add	r3, r2
 8007904:	4619      	mov	r1, r3
 8007906:	6938      	ldr	r0, [r7, #16]
 8007908:	f7ff feda 	bl	80076c0 <move_window>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d130      	bne.n	8007974 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007920:	4413      	add	r3, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff fc1c 	bl	8007160 <ld_word>
 8007928:	4603      	mov	r3, r0
 800792a:	617b      	str	r3, [r7, #20]
			break;
 800792c:	e025      	b.n	800797a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6a1a      	ldr	r2, [r3, #32]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	09db      	lsrs	r3, r3, #7
 8007936:	4413      	add	r3, r2
 8007938:	4619      	mov	r1, r3
 800793a:	6938      	ldr	r0, [r7, #16]
 800793c:	f7ff fec0 	bl	80076c0 <move_window>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d118      	bne.n	8007978 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007954:	4413      	add	r3, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff fc1a 	bl	8007190 <ld_dword>
 800795c:	4603      	mov	r3, r0
 800795e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007962:	617b      	str	r3, [r7, #20]
			break;
 8007964:	e009      	b.n	800797a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007966:	2301      	movs	r3, #1
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	e006      	b.n	800797a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800796c:	bf00      	nop
 800796e:	e004      	b.n	800797a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007970:	bf00      	nop
 8007972:	e002      	b.n	800797a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007974:	bf00      	nop
 8007976:	e000      	b.n	800797a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007978:	bf00      	nop
		}
	}

	return val;
 800797a:	697b      	ldr	r3, [r7, #20]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007984:	b590      	push	{r4, r7, lr}
 8007986:	b089      	sub	sp, #36	@ 0x24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007990:	2302      	movs	r3, #2
 8007992:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b01      	cmp	r3, #1
 8007998:	f240 80d9 	bls.w	8007b4e <put_fat+0x1ca>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	f080 80d3 	bcs.w	8007b4e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	f000 8096 	beq.w	8007ade <put_fat+0x15a>
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	f300 80cb 	bgt.w	8007b4e <put_fat+0x1ca>
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d002      	beq.n	80079c2 <put_fat+0x3e>
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d06e      	beq.n	8007a9e <put_fat+0x11a>
 80079c0:	e0c5      	b.n	8007b4e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	4413      	add	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	0a5b      	lsrs	r3, r3, #9
 80079d8:	4413      	add	r3, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fe6f 	bl	80076c0 <move_window>
 80079e2:	4603      	mov	r3, r0
 80079e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079e6:	7ffb      	ldrb	r3, [r7, #31]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f040 80a9 	bne.w	8007b40 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	61b9      	str	r1, [r7, #24]
 80079fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fe:	4413      	add	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00d      	beq.n	8007a28 <put_fat+0xa4>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b25b      	sxtb	r3, r3
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	b25a      	sxtb	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	b25b      	sxtb	r3, r3
 8007a20:	4313      	orrs	r3, r2
 8007a22:	b25b      	sxtb	r3, r3
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	e001      	b.n	8007a2c <put_fat+0xa8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1a      	ldr	r2, [r3, #32]
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	0a5b      	lsrs	r3, r3, #9
 8007a3e:	4413      	add	r3, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff fe3c 	bl	80076c0 <move_window>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a4c:	7ffb      	ldrb	r3, [r7, #31]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d178      	bne.n	8007b44 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5e:	4413      	add	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <put_fat+0xf0>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	091b      	lsrs	r3, r3, #4
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	e00e      	b.n	8007a92 <put_fat+0x10e>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	b25b      	sxtb	r3, r3
 8007a7a:	f023 030f 	bic.w	r3, r3, #15
 8007a7e:	b25a      	sxtb	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	b25b      	sxtb	r3, r3
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	b25b      	sxtb	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b25b      	sxtb	r3, r3
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	70da      	strb	r2, [r3, #3]
			break;
 8007a9c:	e057      	b.n	8007b4e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	0a1b      	lsrs	r3, r3, #8
 8007aa6:	4413      	add	r3, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f7ff fe08 	bl	80076c0 <move_window>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ab4:	7ffb      	ldrb	r3, [r7, #31]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d146      	bne.n	8007b48 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007ac8:	4413      	add	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	b292      	uxth	r2, r2
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fb80 	bl	80071d6 <st_word>
			fs->wflag = 1;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	70da      	strb	r2, [r3, #3]
			break;
 8007adc:	e037      	b.n	8007b4e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	09db      	lsrs	r3, r3, #7
 8007ae6:	4413      	add	r3, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff fde8 	bl	80076c0 <move_window>
 8007af0:	4603      	mov	r3, r0
 8007af2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007af4:	7ffb      	ldrb	r3, [r7, #31]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d128      	bne.n	8007b4c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007b0e:	4413      	add	r3, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff fb3d 	bl	8007190 <ld_dword>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007b1c:	4323      	orrs	r3, r4
 8007b1e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007b2e:	4413      	add	r3, r2
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fb6a 	bl	800720c <st_dword>
			fs->wflag = 1;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	70da      	strb	r2, [r3, #3]
			break;
 8007b3e:	e006      	b.n	8007b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b40:	bf00      	nop
 8007b42:	e004      	b.n	8007b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b44:	bf00      	nop
 8007b46:	e002      	b.n	8007b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b48:	bf00      	nop
 8007b4a:	e000      	b.n	8007b4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b4c:	bf00      	nop
		}
	}
	return res;
 8007b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3724      	adds	r7, #36	@ 0x24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd90      	pop	{r4, r7, pc}

08007b58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d904      	bls.n	8007b7e <remove_chain+0x26>
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d301      	bcc.n	8007b82 <remove_chain+0x2a>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e04b      	b.n	8007c1a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00c      	beq.n	8007ba2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	69b8      	ldr	r0, [r7, #24]
 8007b90:	f7ff fef8 	bl	8007984 <put_fat>
 8007b94:	4603      	mov	r3, r0
 8007b96:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b98:	7ffb      	ldrb	r3, [r7, #31]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <remove_chain+0x4a>
 8007b9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ba0:	e03b      	b.n	8007c1a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7ff fe46 	bl	8007836 <get_fat>
 8007baa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d031      	beq.n	8007c16 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <remove_chain+0x64>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e02e      	b.n	8007c1a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d101      	bne.n	8007bc8 <remove_chain+0x70>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e028      	b.n	8007c1a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007bc8:	2200      	movs	r2, #0
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	69b8      	ldr	r0, [r7, #24]
 8007bce:	f7ff fed9 	bl	8007984 <put_fat>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007bd6:	7ffb      	ldrb	r3, [r7, #31]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <remove_chain+0x88>
 8007bdc:	7ffb      	ldrb	r3, [r7, #31]
 8007bde:	e01c      	b.n	8007c1a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	3b02      	subs	r3, #2
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d20b      	bcs.n	8007c06 <remove_chain+0xae>
			fs->free_clst++;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	791b      	ldrb	r3, [r3, #4]
 8007bfc:	f043 0301 	orr.w	r3, r3, #1
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d3c6      	bcc.n	8007ba2 <remove_chain+0x4a>
 8007c14:	e000      	b.n	8007c18 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007c16:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b088      	sub	sp, #32
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10d      	bne.n	8007c54 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <create_chain+0x2c>
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d31b      	bcc.n	8007c86 <create_chain+0x64>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	e018      	b.n	8007c86 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fded 	bl	8007836 <get_fat>
 8007c5c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d801      	bhi.n	8007c68 <create_chain+0x46>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e070      	b.n	8007d4a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d101      	bne.n	8007c74 <create_chain+0x52>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	e06a      	b.n	8007d4a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d201      	bcs.n	8007c82 <create_chain+0x60>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	e063      	b.n	8007d4a <create_chain+0x128>
		scl = clst;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d307      	bcc.n	8007caa <create_chain+0x88>
				ncl = 2;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d901      	bls.n	8007caa <create_chain+0x88>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e04f      	b.n	8007d4a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007caa:	69f9      	ldr	r1, [r7, #28]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fdc2 	bl	8007836 <get_fat>
 8007cb2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d003      	beq.n	8007cc8 <create_chain+0xa6>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc6:	d101      	bne.n	8007ccc <create_chain+0xaa>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	e03e      	b.n	8007d4a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d1da      	bne.n	8007c8a <create_chain+0x68>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e038      	b.n	8007d4a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007cd8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	69f9      	ldr	r1, [r7, #28]
 8007ce0:	6938      	ldr	r0, [r7, #16]
 8007ce2:	f7ff fe4f 	bl	8007984 <put_fat>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <create_chain+0xe2>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d006      	beq.n	8007d04 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6938      	ldr	r0, [r7, #16]
 8007cfc:	f7ff fe42 	bl	8007984 <put_fat>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d116      	bne.n	8007d38 <create_chain+0x116>
		fs->last_clst = ncl;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	3b02      	subs	r3, #2
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d804      	bhi.n	8007d28 <create_chain+0x106>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	1e5a      	subs	r2, r3, #1
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	791b      	ldrb	r3, [r3, #4]
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	711a      	strb	r2, [r3, #4]
 8007d36:	e007      	b.n	8007d48 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d102      	bne.n	8007d44 <create_chain+0x122>
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	e000      	b.n	8007d46 <create_chain+0x124>
 8007d44:	2301      	movs	r3, #1
 8007d46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007d48:	69fb      	ldr	r3, [r7, #28]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3720      	adds	r7, #32
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b087      	sub	sp, #28
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d66:	3304      	adds	r3, #4
 8007d68:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	0a5b      	lsrs	r3, r3, #9
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	8952      	ldrh	r2, [r2, #10]
 8007d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1d1a      	adds	r2, r3, #4
 8007d7c:	613a      	str	r2, [r7, #16]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <clmt_clust+0x3a>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e010      	b.n	8007dae <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d307      	bcc.n	8007da4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007da2:	e7e9      	b.n	8007d78 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007da4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	4413      	add	r3, r2
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dd0:	d204      	bcs.n	8007ddc <dir_sdi+0x22>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e063      	b.n	8007ea8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d106      	bne.n	8007e00 <dir_sdi+0x46>
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d902      	bls.n	8007e00 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10c      	bne.n	8007e20 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	095b      	lsrs	r3, r3, #5
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	8912      	ldrh	r2, [r2, #8]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d301      	bcc.n	8007e16 <dir_sdi+0x5c>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e048      	b.n	8007ea8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	61da      	str	r2, [r3, #28]
 8007e1e:	e029      	b.n	8007e74 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	895b      	ldrh	r3, [r3, #10]
 8007e24:	025b      	lsls	r3, r3, #9
 8007e26:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e28:	e019      	b.n	8007e5e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6979      	ldr	r1, [r7, #20]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fd01 	bl	8007836 <get_fat>
 8007e34:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3c:	d101      	bne.n	8007e42 <dir_sdi+0x88>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e032      	b.n	8007ea8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d904      	bls.n	8007e52 <dir_sdi+0x98>
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d301      	bcc.n	8007e56 <dir_sdi+0x9c>
 8007e52:	2302      	movs	r3, #2
 8007e54:	e028      	b.n	8007ea8 <dir_sdi+0xee>
			ofs -= csz;
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d2e1      	bcs.n	8007e2a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007e66:	6979      	ldr	r1, [r7, #20]
 8007e68:	6938      	ldr	r0, [r7, #16]
 8007e6a:	f7ff fcc5 	bl	80077f8 <clust2sect>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <dir_sdi+0xcc>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e010      	b.n	8007ea8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69da      	ldr	r2, [r3, #28]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	0a5b      	lsrs	r3, r3, #9
 8007e8e:	441a      	add	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea0:	441a      	add	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	3320      	adds	r3, #32
 8007ec6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <dir_next+0x28>
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ed6:	d301      	bcc.n	8007edc <dir_next+0x2c>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	e0aa      	b.n	8008032 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f040 8098 	bne.w	8008018 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	8912      	ldrh	r2, [r2, #8]
 8007f02:	4293      	cmp	r3, r2
 8007f04:	f0c0 8088 	bcc.w	8008018 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	61da      	str	r2, [r3, #28]
 8007f0e:	2304      	movs	r3, #4
 8007f10:	e08f      	b.n	8008032 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	0a5b      	lsrs	r3, r3, #9
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	8952      	ldrh	r2, [r2, #10]
 8007f1a:	3a01      	subs	r2, #1
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d17a      	bne.n	8008018 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f7ff fc83 	bl	8007836 <get_fat>
 8007f30:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d801      	bhi.n	8007f3c <dir_next+0x8c>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e07a      	b.n	8008032 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d101      	bne.n	8007f48 <dir_next+0x98>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e074      	b.n	8008032 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d358      	bcc.n	8008004 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	61da      	str	r2, [r3, #28]
 8007f5e:	2304      	movs	r3, #4
 8007f60:	e067      	b.n	8008032 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f7ff fe59 	bl	8007c22 <create_chain>
 8007f70:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <dir_next+0xcc>
 8007f78:	2307      	movs	r3, #7
 8007f7a:	e05a      	b.n	8008032 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <dir_next+0xd6>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e055      	b.n	8008032 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8c:	d101      	bne.n	8007f92 <dir_next+0xe2>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e04f      	b.n	8008032 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f7ff fb50 	bl	8007638 <sync_window>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <dir_next+0xf2>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e047      	b.n	8008032 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3330      	adds	r3, #48	@ 0x30
 8007fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff f97a 	bl	80072a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	6979      	ldr	r1, [r7, #20]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff fc1d 	bl	80077f8 <clust2sect>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007fc4:	e012      	b.n	8007fec <dir_next+0x13c>
						fs->wflag = 1;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fb33 	bl	8007638 <sync_window>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <dir_next+0x12c>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e02a      	b.n	8008032 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	895b      	ldrh	r3, [r3, #10]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d3e6      	bcc.n	8007fc6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad2      	subs	r2, r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800800a:	6979      	ldr	r1, [r7, #20]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff fbf3 	bl	80077f8 <clust2sect>
 8008012:	4602      	mov	r2, r0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	441a      	add	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800804a:	2100      	movs	r1, #0
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff feb4 	bl	8007dba <dir_sdi>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d12b      	bne.n	80080b4 <dir_alloc+0x7a>
		n = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	4619      	mov	r1, r3
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff fb2a 	bl	80076c0 <move_window>
 800806c:	4603      	mov	r3, r0
 800806e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d11d      	bne.n	80080b2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2be5      	cmp	r3, #229	@ 0xe5
 800807e:	d004      	beq.n	800808a <dir_alloc+0x50>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d107      	bne.n	800809a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3301      	adds	r3, #1
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d102      	bne.n	800809e <dir_alloc+0x64>
 8008098:	e00c      	b.n	80080b4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800809e:	2101      	movs	r1, #1
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff ff05 	bl	8007eb0 <dir_next>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0d7      	beq.n	8008060 <dir_alloc+0x26>
 80080b0:	e000      	b.n	80080b4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80080b2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	d101      	bne.n	80080be <dir_alloc+0x84>
 80080ba:	2307      	movs	r3, #7
 80080bc:	75fb      	strb	r3, [r7, #23]
	return res;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	331a      	adds	r3, #26
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff f842 	bl	8007160 <ld_word>
 80080dc:	4603      	mov	r3, r0
 80080de:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d109      	bne.n	80080fc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	3314      	adds	r3, #20
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff f837 	bl	8007160 <ld_word>
 80080f2:	4603      	mov	r3, r0
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80080fc:	68fb      	ldr	r3, [r7, #12]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	331a      	adds	r3, #26
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	b292      	uxth	r2, r2
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff f85a 	bl	80071d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b03      	cmp	r3, #3
 8008128:	d109      	bne.n	800813e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f103 0214 	add.w	r2, r3, #20
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	0c1b      	lsrs	r3, r3, #16
 8008134:	b29b      	uxth	r3, r3
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7ff f84c 	bl	80071d6 <st_word>
	}
}
 800813e:	bf00      	nop
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b086      	sub	sp, #24
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008154:	2100      	movs	r1, #0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fe2f 	bl	8007dba <dir_sdi>
 800815c:	4603      	mov	r3, r0
 800815e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <dir_find+0x24>
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	e03e      	b.n	80081e8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	4619      	mov	r1, r3
 8008170:	6938      	ldr	r0, [r7, #16]
 8008172:	f7ff faa5 	bl	80076c0 <move_window>
 8008176:	4603      	mov	r3, r0
 8008178:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d12f      	bne.n	80081e0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d102      	bne.n	8008194 <dir_find+0x4e>
 800818e:	2304      	movs	r3, #4
 8008190:	75fb      	strb	r3, [r7, #23]
 8008192:	e028      	b.n	80081e6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	330b      	adds	r3, #11
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	330b      	adds	r3, #11
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <dir_find+0x86>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a18      	ldr	r0, [r3, #32]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3324      	adds	r3, #36	@ 0x24
 80081be:	220b      	movs	r2, #11
 80081c0:	4619      	mov	r1, r3
 80081c2:	f7ff f88b 	bl	80072dc <mem_cmp>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80081cc:	2100      	movs	r1, #0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fe6e 	bl	8007eb0 <dir_next>
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0c5      	beq.n	800816a <dir_find+0x24>
 80081de:	e002      	b.n	80081e6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80081e0:	bf00      	nop
 80081e2:	e000      	b.n	80081e6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80081e4:	bf00      	nop

	return res;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80081fe:	2101      	movs	r1, #1
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ff1a 	bl	800803a <dir_alloc>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d11c      	bne.n	800824a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	4619      	mov	r1, r3
 8008216:	68b8      	ldr	r0, [r7, #8]
 8008218:	f7ff fa52 	bl	80076c0 <move_window>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d111      	bne.n	800824a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	2220      	movs	r2, #32
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff f839 	bl	80072a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a18      	ldr	r0, [r3, #32]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3324      	adds	r3, #36	@ 0x24
 800823c:	220b      	movs	r2, #11
 800823e:	4619      	mov	r1, r3
 8008240:	f7ff f810 	bl	8007264 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2201      	movs	r2, #1
 8008248:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3324      	adds	r3, #36	@ 0x24
 8008268:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800826a:	220b      	movs	r2, #11
 800826c:	2120      	movs	r1, #32
 800826e:	68b8      	ldr	r0, [r7, #8]
 8008270:	f7ff f819 	bl	80072a6 <mem_set>
	si = i = 0; ni = 8;
 8008274:	2300      	movs	r3, #0
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	2308      	movs	r3, #8
 800827e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	61fa      	str	r2, [r7, #28]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800828e:	7efb      	ldrb	r3, [r7, #27]
 8008290:	2b20      	cmp	r3, #32
 8008292:	d94e      	bls.n	8008332 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008294:	7efb      	ldrb	r3, [r7, #27]
 8008296:	2b2f      	cmp	r3, #47	@ 0x2f
 8008298:	d006      	beq.n	80082a8 <create_name+0x54>
 800829a:	7efb      	ldrb	r3, [r7, #27]
 800829c:	2b5c      	cmp	r3, #92	@ 0x5c
 800829e:	d110      	bne.n	80082c2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80082a0:	e002      	b.n	80082a8 <create_name+0x54>
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	3301      	adds	r3, #1
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80082b2:	d0f6      	beq.n	80082a2 <create_name+0x4e>
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80082be:	d0f0      	beq.n	80082a2 <create_name+0x4e>
			break;
 80082c0:	e038      	b.n	8008334 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80082c2:	7efb      	ldrb	r3, [r7, #27]
 80082c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80082c6:	d003      	beq.n	80082d0 <create_name+0x7c>
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d30c      	bcc.n	80082ea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b0b      	cmp	r3, #11
 80082d4:	d002      	beq.n	80082dc <create_name+0x88>
 80082d6:	7efb      	ldrb	r3, [r7, #27]
 80082d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80082da:	d001      	beq.n	80082e0 <create_name+0x8c>
 80082dc:	2306      	movs	r3, #6
 80082de:	e044      	b.n	800836a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80082e0:	2308      	movs	r3, #8
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	230b      	movs	r3, #11
 80082e6:	617b      	str	r3, [r7, #20]
			continue;
 80082e8:	e022      	b.n	8008330 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80082ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da04      	bge.n	80082fc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80082f2:	7efb      	ldrb	r3, [r7, #27]
 80082f4:	3b80      	subs	r3, #128	@ 0x80
 80082f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008374 <create_name+0x120>)
 80082f8:	5cd3      	ldrb	r3, [r2, r3]
 80082fa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80082fc:	7efb      	ldrb	r3, [r7, #27]
 80082fe:	4619      	mov	r1, r3
 8008300:	481d      	ldr	r0, [pc, #116]	@ (8008378 <create_name+0x124>)
 8008302:	f7ff f812 	bl	800732a <chk_chr>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <create_name+0xbc>
 800830c:	2306      	movs	r3, #6
 800830e:	e02c      	b.n	800836a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008310:	7efb      	ldrb	r3, [r7, #27]
 8008312:	2b60      	cmp	r3, #96	@ 0x60
 8008314:	d905      	bls.n	8008322 <create_name+0xce>
 8008316:	7efb      	ldrb	r3, [r7, #27]
 8008318:	2b7a      	cmp	r3, #122	@ 0x7a
 800831a:	d802      	bhi.n	8008322 <create_name+0xce>
 800831c:	7efb      	ldrb	r3, [r7, #27]
 800831e:	3b20      	subs	r3, #32
 8008320:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	613a      	str	r2, [r7, #16]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	4413      	add	r3, r2
 800832c:	7efa      	ldrb	r2, [r7, #27]
 800832e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008330:	e7a6      	b.n	8008280 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008332:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	441a      	add	r2, r3
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <create_name+0xf4>
 8008344:	2306      	movs	r3, #6
 8008346:	e010      	b.n	800836a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2be5      	cmp	r3, #229	@ 0xe5
 800834e:	d102      	bne.n	8008356 <create_name+0x102>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2205      	movs	r2, #5
 8008354:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008356:	7efb      	ldrb	r3, [r7, #27]
 8008358:	2b20      	cmp	r3, #32
 800835a:	d801      	bhi.n	8008360 <create_name+0x10c>
 800835c:	2204      	movs	r2, #4
 800835e:	e000      	b.n	8008362 <create_name+0x10e>
 8008360:	2200      	movs	r2, #0
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	330b      	adds	r3, #11
 8008366:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008368:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800836a:	4618      	mov	r0, r3
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	0800acc0 	.word	0x0800acc0
 8008378:	0800ac30 	.word	0x0800ac30

0800837c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008390:	e002      	b.n	8008398 <follow_path+0x1c>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b2f      	cmp	r3, #47	@ 0x2f
 800839e:	d0f8      	beq.n	8008392 <follow_path+0x16>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80083a6:	d0f4      	beq.n	8008392 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2200      	movs	r2, #0
 80083ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b1f      	cmp	r3, #31
 80083b4:	d80a      	bhi.n	80083cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2280      	movs	r2, #128	@ 0x80
 80083ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80083be:	2100      	movs	r1, #0
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fcfa 	bl	8007dba <dir_sdi>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
 80083ca:	e043      	b.n	8008454 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083cc:	463b      	mov	r3, r7
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff ff3f 	bl	8008254 <create_name>
 80083d6:	4603      	mov	r3, r0
 80083d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d134      	bne.n	800844a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff feb0 	bl	8008146 <dir_find>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80083f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d127      	bne.n	800844e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d122      	bne.n	800844e <follow_path+0xd2>
 8008408:	2305      	movs	r3, #5
 800840a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800840c:	e01f      	b.n	800844e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800840e:	7afb      	ldrb	r3, [r7, #11]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11c      	bne.n	8008452 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	799b      	ldrb	r3, [r3, #6]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008424:	2305      	movs	r3, #5
 8008426:	75fb      	strb	r3, [r7, #23]
 8008428:	e014      	b.n	8008454 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008438:	4413      	add	r3, r2
 800843a:	4619      	mov	r1, r3
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff fe43 	bl	80080c8 <ld_clust>
 8008442:	4602      	mov	r2, r0
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008448:	e7c0      	b.n	80083cc <follow_path+0x50>
			if (res != FR_OK) break;
 800844a:	bf00      	nop
 800844c:	e002      	b.n	8008454 <follow_path+0xd8>
				break;
 800844e:	bf00      	nop
 8008450:	e000      	b.n	8008454 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008452:	bf00      	nop
			}
		}
	}

	return res;
 8008454:	7dfb      	ldrb	r3, [r7, #23]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800845e:	b480      	push	{r7}
 8008460:	b087      	sub	sp, #28
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008466:	f04f 33ff 	mov.w	r3, #4294967295
 800846a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d031      	beq.n	80084d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	e002      	b.n	8008482 <get_ldnumber+0x24>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	3301      	adds	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b20      	cmp	r3, #32
 8008488:	d903      	bls.n	8008492 <get_ldnumber+0x34>
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008490:	d1f4      	bne.n	800847c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b3a      	cmp	r3, #58	@ 0x3a
 8008498:	d11c      	bne.n	80084d4 <get_ldnumber+0x76>
			tp = *path;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	60fa      	str	r2, [r7, #12]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	3b30      	subs	r3, #48	@ 0x30
 80084aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d80e      	bhi.n	80084d0 <get_ldnumber+0x72>
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d10a      	bne.n	80084d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <get_ldnumber+0x72>
					vol = (int)i;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	3301      	adds	r3, #1
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	e002      	b.n	80084da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80084d4:	2300      	movs	r3, #0
 80084d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80084d8:	693b      	ldr	r3, [r7, #16]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	70da      	strb	r2, [r3, #3]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f04f 32ff 	mov.w	r2, #4294967295
 80084fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff f8dc 	bl	80076c0 <move_window>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <check_fs+0x2a>
 800850e:	2304      	movs	r3, #4
 8008510:	e038      	b.n	8008584 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3330      	adds	r3, #48	@ 0x30
 8008516:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fe20 	bl	8007160 <ld_word>
 8008520:	4603      	mov	r3, r0
 8008522:	461a      	mov	r2, r3
 8008524:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008528:	429a      	cmp	r2, r3
 800852a:	d001      	beq.n	8008530 <check_fs+0x48>
 800852c:	2303      	movs	r3, #3
 800852e:	e029      	b.n	8008584 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008536:	2be9      	cmp	r3, #233	@ 0xe9
 8008538:	d009      	beq.n	800854e <check_fs+0x66>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008540:	2beb      	cmp	r3, #235	@ 0xeb
 8008542:	d11e      	bne.n	8008582 <check_fs+0x9a>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800854a:	2b90      	cmp	r3, #144	@ 0x90
 800854c:	d119      	bne.n	8008582 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3330      	adds	r3, #48	@ 0x30
 8008552:	3336      	adds	r3, #54	@ 0x36
 8008554:	4618      	mov	r0, r3
 8008556:	f7fe fe1b 	bl	8007190 <ld_dword>
 800855a:	4603      	mov	r3, r0
 800855c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008560:	4a0a      	ldr	r2, [pc, #40]	@ (800858c <check_fs+0xa4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d101      	bne.n	800856a <check_fs+0x82>
 8008566:	2300      	movs	r3, #0
 8008568:	e00c      	b.n	8008584 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3330      	adds	r3, #48	@ 0x30
 800856e:	3352      	adds	r3, #82	@ 0x52
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fe0d 	bl	8007190 <ld_dword>
 8008576:	4603      	mov	r3, r0
 8008578:	4a05      	ldr	r2, [pc, #20]	@ (8008590 <check_fs+0xa8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d101      	bne.n	8008582 <check_fs+0x9a>
 800857e:	2300      	movs	r3, #0
 8008580:	e000      	b.n	8008584 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008582:	2302      	movs	r3, #2
}
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	00544146 	.word	0x00544146
 8008590:	33544146 	.word	0x33544146

08008594 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b096      	sub	sp, #88	@ 0x58
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff ff58 	bl	800845e <get_ldnumber>
 80085ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80085b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da01      	bge.n	80085ba <find_volume+0x26>
 80085b6:	230b      	movs	r3, #11
 80085b8:	e22d      	b.n	8008a16 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80085ba:	4aa1      	ldr	r2, [pc, #644]	@ (8008840 <find_volume+0x2ac>)
 80085bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <find_volume+0x3a>
 80085ca:	230c      	movs	r3, #12
 80085cc:	e223      	b.n	8008a16 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	f023 0301 	bic.w	r3, r3, #1
 80085da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80085dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01a      	beq.n	800861a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe fd19 	bl	8007020 <disk_status>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80085f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10c      	bne.n	800861a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <find_volume+0x82>
 8008606:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008612:	230a      	movs	r3, #10
 8008614:	e1ff      	b.n	8008a16 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008616:	2300      	movs	r3, #0
 8008618:	e1fd      	b.n	8008a16 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800861a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008622:	b2da      	uxtb	r2, r3
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe fd11 	bl	8007054 <disk_initialize>
 8008632:	4603      	mov	r3, r0
 8008634:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008638:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008644:	2303      	movs	r3, #3
 8008646:	e1e6      	b.n	8008a16 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <find_volume+0xca>
 800864e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800865a:	230a      	movs	r3, #10
 800865c:	e1db      	b.n	8008a16 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008664:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008666:	f7ff ff3f 	bl	80084e8 <check_fs>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008670:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008674:	2b02      	cmp	r3, #2
 8008676:	d149      	bne.n	800870c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008678:	2300      	movs	r3, #0
 800867a:	643b      	str	r3, [r7, #64]	@ 0x40
 800867c:	e01e      	b.n	80086bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800867e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008680:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800868c:	4413      	add	r3, r2
 800868e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	3304      	adds	r3, #4
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d006      	beq.n	80086a8 <find_volume+0x114>
 800869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869c:	3308      	adds	r3, #8
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fd76 	bl	8007190 <ld_dword>
 80086a4:	4602      	mov	r2, r0
 80086a6:	e000      	b.n	80086aa <find_volume+0x116>
 80086a8:	2200      	movs	r2, #0
 80086aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	3358      	adds	r3, #88	@ 0x58
 80086b0:	443b      	add	r3, r7
 80086b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80086b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086b8:	3301      	adds	r3, #1
 80086ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80086bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d9dd      	bls.n	800867e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80086c2:	2300      	movs	r3, #0
 80086c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80086c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <find_volume+0x13e>
 80086cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ce:	3b01      	subs	r3, #1
 80086d0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80086d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	3358      	adds	r3, #88	@ 0x58
 80086d8:	443b      	add	r3, r7
 80086da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086de:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <find_volume+0x15e>
 80086e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80086e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80086ea:	f7ff fefd 	bl	80084e8 <check_fs>
 80086ee:	4603      	mov	r3, r0
 80086f0:	e000      	b.n	80086f4 <find_volume+0x160>
 80086f2:	2303      	movs	r3, #3
 80086f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d905      	bls.n	800870c <find_volume+0x178>
 8008700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008702:	3301      	adds	r3, #1
 8008704:	643b      	str	r3, [r7, #64]	@ 0x40
 8008706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008708:	2b03      	cmp	r3, #3
 800870a:	d9e2      	bls.n	80086d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800870c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008710:	2b04      	cmp	r3, #4
 8008712:	d101      	bne.n	8008718 <find_volume+0x184>
 8008714:	2301      	movs	r3, #1
 8008716:	e17e      	b.n	8008a16 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800871c:	2b01      	cmp	r3, #1
 800871e:	d901      	bls.n	8008724 <find_volume+0x190>
 8008720:	230d      	movs	r3, #13
 8008722:	e178      	b.n	8008a16 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008726:	3330      	adds	r3, #48	@ 0x30
 8008728:	330b      	adds	r3, #11
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fd18 	bl	8007160 <ld_word>
 8008730:	4603      	mov	r3, r0
 8008732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008736:	d001      	beq.n	800873c <find_volume+0x1a8>
 8008738:	230d      	movs	r3, #13
 800873a:	e16c      	b.n	8008a16 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800873c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873e:	3330      	adds	r3, #48	@ 0x30
 8008740:	3316      	adds	r3, #22
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fd0c 	bl	8007160 <ld_word>
 8008748:	4603      	mov	r3, r0
 800874a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800874c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <find_volume+0x1cc>
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	3330      	adds	r3, #48	@ 0x30
 8008756:	3324      	adds	r3, #36	@ 0x24
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fd19 	bl	8007190 <ld_dword>
 800875e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008762:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008764:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008768:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800876c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	789b      	ldrb	r3, [r3, #2]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d005      	beq.n	8008784 <find_volume+0x1f0>
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	789b      	ldrb	r3, [r3, #2]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d001      	beq.n	8008784 <find_volume+0x1f0>
 8008780:	230d      	movs	r3, #13
 8008782:	e148      	b.n	8008a16 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	789b      	ldrb	r3, [r3, #2]
 8008788:	461a      	mov	r2, r3
 800878a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800878c:	fb02 f303 	mul.w	r3, r2, r3
 8008790:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008798:	461a      	mov	r2, r3
 800879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	895b      	ldrh	r3, [r3, #10]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d008      	beq.n	80087b8 <find_volume+0x224>
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	895b      	ldrh	r3, [r3, #10]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ae:	895b      	ldrh	r3, [r3, #10]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	4013      	ands	r3, r2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <find_volume+0x228>
 80087b8:	230d      	movs	r3, #13
 80087ba:	e12c      	b.n	8008a16 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80087bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087be:	3330      	adds	r3, #48	@ 0x30
 80087c0:	3311      	adds	r3, #17
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe fccc 	bl	8007160 <ld_word>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	891b      	ldrh	r3, [r3, #8]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <find_volume+0x24e>
 80087de:	230d      	movs	r3, #13
 80087e0:	e119      	b.n	8008a16 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	3330      	adds	r3, #48	@ 0x30
 80087e6:	3313      	adds	r3, #19
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe fcb9 	bl	8007160 <ld_word>
 80087ee:	4603      	mov	r3, r0
 80087f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80087f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <find_volume+0x272>
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	3330      	adds	r3, #48	@ 0x30
 80087fc:	3320      	adds	r3, #32
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fcc6 	bl	8007190 <ld_dword>
 8008804:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008808:	3330      	adds	r3, #48	@ 0x30
 800880a:	330e      	adds	r3, #14
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fca7 	bl	8007160 <ld_word>
 8008812:	4603      	mov	r3, r0
 8008814:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008816:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <find_volume+0x28c>
 800881c:	230d      	movs	r3, #13
 800881e:	e0fa      	b.n	8008a16 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008820:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008824:	4413      	add	r3, r2
 8008826:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008828:	8912      	ldrh	r2, [r2, #8]
 800882a:	0912      	lsrs	r2, r2, #4
 800882c:	b292      	uxth	r2, r2
 800882e:	4413      	add	r3, r2
 8008830:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008836:	429a      	cmp	r2, r3
 8008838:	d204      	bcs.n	8008844 <find_volume+0x2b0>
 800883a:	230d      	movs	r3, #13
 800883c:	e0eb      	b.n	8008a16 <find_volume+0x482>
 800883e:	bf00      	nop
 8008840:	200007e4 	.word	0x200007e4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800884c:	8952      	ldrh	r2, [r2, #10]
 800884e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <find_volume+0x2ca>
 800885a:	230d      	movs	r3, #13
 800885c:	e0db      	b.n	8008a16 <find_volume+0x482>
		fmt = FS_FAT32;
 800885e:	2303      	movs	r3, #3
 8008860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800886a:	4293      	cmp	r3, r2
 800886c:	d802      	bhi.n	8008874 <find_volume+0x2e0>
 800886e:	2302      	movs	r3, #2
 8008870:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800887a:	4293      	cmp	r3, r2
 800887c:	d802      	bhi.n	8008884 <find_volume+0x2f0>
 800887e:	2301      	movs	r3, #1
 8008880:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008886:	1c9a      	adds	r2, r3, #2
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008890:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008892:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008896:	441a      	add	r2, r3
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800889c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	441a      	add	r2, r3
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80088a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d11e      	bne.n	80088ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80088ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b0:	3330      	adds	r3, #48	@ 0x30
 80088b2:	332a      	adds	r3, #42	@ 0x2a
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fc53 	bl	8007160 <ld_word>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <find_volume+0x330>
 80088c0:	230d      	movs	r3, #13
 80088c2:	e0a8      	b.n	8008a16 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	891b      	ldrh	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <find_volume+0x33c>
 80088cc:	230d      	movs	r3, #13
 80088ce:	e0a2      	b.n	8008a16 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80088d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d2:	3330      	adds	r3, #48	@ 0x30
 80088d4:	332c      	adds	r3, #44	@ 0x2c
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fc5a 	bl	8007190 <ld_dword>
 80088dc:	4602      	mov	r2, r0
 80088de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80088e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ea:	e01f      	b.n	800892c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	891b      	ldrh	r3, [r3, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <find_volume+0x364>
 80088f4:	230d      	movs	r3, #13
 80088f6:	e08e      	b.n	8008a16 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80088f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fa:	6a1a      	ldr	r2, [r3, #32]
 80088fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fe:	441a      	add	r2, r3
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008904:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008908:	2b02      	cmp	r3, #2
 800890a:	d103      	bne.n	8008914 <find_volume+0x380>
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	e00a      	b.n	800892a <find_volume+0x396>
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	695a      	ldr	r2, [r3, #20]
 8008918:	4613      	mov	r3, r2
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	4413      	add	r3, r2
 800891e:	085a      	lsrs	r2, r3, #1
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800892a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800892c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008932:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008936:	0a5b      	lsrs	r3, r3, #9
 8008938:	429a      	cmp	r2, r3
 800893a:	d201      	bcs.n	8008940 <find_volume+0x3ac>
 800893c:	230d      	movs	r3, #13
 800893e:	e06a      	b.n	8008a16 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008942:	f04f 32ff 	mov.w	r2, #4294967295
 8008946:	611a      	str	r2, [r3, #16]
 8008948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008952:	2280      	movs	r2, #128	@ 0x80
 8008954:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008956:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800895a:	2b03      	cmp	r3, #3
 800895c:	d149      	bne.n	80089f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	3330      	adds	r3, #48	@ 0x30
 8008962:	3330      	adds	r3, #48	@ 0x30
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fbfb 	bl	8007160 <ld_word>
 800896a:	4603      	mov	r3, r0
 800896c:	2b01      	cmp	r3, #1
 800896e:	d140      	bne.n	80089f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008972:	3301      	adds	r3, #1
 8008974:	4619      	mov	r1, r3
 8008976:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008978:	f7fe fea2 	bl	80076c0 <move_window>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d137      	bne.n	80089f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008984:	2200      	movs	r2, #0
 8008986:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898a:	3330      	adds	r3, #48	@ 0x30
 800898c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fbe5 	bl	8007160 <ld_word>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800899e:	429a      	cmp	r2, r3
 80089a0:	d127      	bne.n	80089f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80089a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a4:	3330      	adds	r3, #48	@ 0x30
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fbf2 	bl	8007190 <ld_dword>
 80089ac:	4603      	mov	r3, r0
 80089ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008a20 <find_volume+0x48c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d11e      	bne.n	80089f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80089b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b6:	3330      	adds	r3, #48	@ 0x30
 80089b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fbe7 	bl	8007190 <ld_dword>
 80089c2:	4603      	mov	r3, r0
 80089c4:	4a17      	ldr	r2, [pc, #92]	@ (8008a24 <find_volume+0x490>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d113      	bne.n	80089f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089cc:	3330      	adds	r3, #48	@ 0x30
 80089ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fbdc 	bl	8007190 <ld_dword>
 80089d8:	4602      	mov	r2, r0
 80089da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	3330      	adds	r3, #48	@ 0x30
 80089e2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fbd2 	bl	8007190 <ld_dword>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80089f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80089fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008a28 <find_volume+0x494>)
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	3301      	adds	r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	4b09      	ldr	r3, [pc, #36]	@ (8008a28 <find_volume+0x494>)
 8008a04:	801a      	strh	r2, [r3, #0]
 8008a06:	4b08      	ldr	r3, [pc, #32]	@ (8008a28 <find_volume+0x494>)
 8008a08:	881a      	ldrh	r2, [r3, #0]
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008a0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a10:	f7fe fdee 	bl	80075f0 <clear_lock>
#endif
	return FR_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3758      	adds	r7, #88	@ 0x58
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	41615252 	.word	0x41615252
 8008a24:	61417272 	.word	0x61417272
 8008a28:	200007e8 	.word	0x200007e8

08008a2c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008a36:	2309      	movs	r3, #9
 8008a38:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01c      	beq.n	8008a7a <validate+0x4e>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d018      	beq.n	8008a7a <validate+0x4e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d013      	beq.n	8008a7a <validate+0x4e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	889a      	ldrh	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	88db      	ldrh	r3, [r3, #6]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d10c      	bne.n	8008a7a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fada 	bl	8007020 <disk_status>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <validate+0x4e>
			res = FR_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d102      	bne.n	8008a86 <validate+0x5a>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	e000      	b.n	8008a88 <validate+0x5c>
 8008a86:	2300      	movs	r3, #0
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	6013      	str	r3, [r2, #0]
	return res;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008aaa:	f107 0310 	add.w	r3, r7, #16
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff fcd5 	bl	800845e <get_ldnumber>
 8008ab4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da01      	bge.n	8008ac0 <f_mount+0x28>
 8008abc:	230b      	movs	r3, #11
 8008abe:	e02b      	b.n	8008b18 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ac0:	4a17      	ldr	r2, [pc, #92]	@ (8008b20 <f_mount+0x88>)
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008ad0:	69b8      	ldr	r0, [r7, #24]
 8008ad2:	f7fe fd8d 	bl	80075f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	490d      	ldr	r1, [pc, #52]	@ (8008b20 <f_mount+0x88>)
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <f_mount+0x66>
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d001      	beq.n	8008b02 <f_mount+0x6a>
 8008afe:	2300      	movs	r3, #0
 8008b00:	e00a      	b.n	8008b18 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008b02:	f107 010c 	add.w	r1, r7, #12
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fd41 	bl	8008594 <find_volume>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3720      	adds	r7, #32
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	200007e4 	.word	0x200007e4

08008b24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b098      	sub	sp, #96	@ 0x60
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <f_open+0x18>
 8008b38:	2309      	movs	r3, #9
 8008b3a:	e1a9      	b.n	8008e90 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b42:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008b44:	79fa      	ldrb	r2, [r7, #7]
 8008b46:	f107 0110 	add.w	r1, r7, #16
 8008b4a:	f107 0308 	add.w	r3, r7, #8
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff fd20 	bl	8008594 <find_volume>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f040 818d 	bne.w	8008e7e <f_open+0x35a>
		dj.obj.fs = fs;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	f107 0314 	add.w	r3, r7, #20
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff fc03 	bl	800837c <follow_path>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d118      	bne.n	8008bb6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b88:	b25b      	sxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da03      	bge.n	8008b96 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008b8e:	2306      	movs	r3, #6
 8008b90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008b94:	e00f      	b.n	8008bb6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	bf8c      	ite	hi
 8008b9c:	2301      	movhi	r3, #1
 8008b9e:	2300      	movls	r3, #0
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fbd8 	bl	8007360 <chk_lock>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	f003 031c 	and.w	r3, r3, #28
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d07f      	beq.n	8008cc0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d017      	beq.n	8008bf8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d10e      	bne.n	8008bee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008bd0:	f7fe fc22 	bl	8007418 <enq_lock>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d006      	beq.n	8008be8 <f_open+0xc4>
 8008bda:	f107 0314 	add.w	r3, r7, #20
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fb06 	bl	80081f0 <dir_register>
 8008be4:	4603      	mov	r3, r0
 8008be6:	e000      	b.n	8008bea <f_open+0xc6>
 8008be8:	2312      	movs	r3, #18
 8008bea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	f043 0308 	orr.w	r3, r3, #8
 8008bf4:	71fb      	strb	r3, [r7, #7]
 8008bf6:	e010      	b.n	8008c1a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008bf8:	7ebb      	ldrb	r3, [r7, #26]
 8008bfa:	f003 0311 	and.w	r3, r3, #17
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <f_open+0xe6>
					res = FR_DENIED;
 8008c02:	2307      	movs	r3, #7
 8008c04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008c08:	e007      	b.n	8008c1a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <f_open+0xf6>
 8008c14:	2308      	movs	r3, #8
 8008c16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d168      	bne.n	8008cf4 <f_open+0x1d0>
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d063      	beq.n	8008cf4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008c2c:	f7fe f88c 	bl	8006d48 <get_fattime>
 8008c30:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c34:	330e      	adds	r3, #14
 8008c36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe fae7 	bl	800720c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c40:	3316      	adds	r3, #22
 8008c42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe fae1 	bl	800720c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4c:	330b      	adds	r3, #11
 8008c4e:	2220      	movs	r2, #32
 8008c50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fa35 	bl	80080c8 <ld_clust>
 8008c5e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008c64:	2200      	movs	r2, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fa4d 	bl	8008106 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	331c      	adds	r3, #28
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe faca 	bl	800720c <st_dword>
					fs->wflag = 1;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d037      	beq.n	8008cf4 <f_open+0x1d0>
						dw = fs->winsect;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008c8a:	f107 0314 	add.w	r3, r7, #20
 8008c8e:	2200      	movs	r2, #0
 8008c90:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe ff60 	bl	8007b58 <remove_chain>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d126      	bne.n	8008cf4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe fd08 	bl	80076c0 <move_window>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	60da      	str	r2, [r3, #12]
 8008cbe:	e019      	b.n	8008cf4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d115      	bne.n	8008cf4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008cc8:	7ebb      	ldrb	r3, [r7, #26]
 8008cca:	f003 0310 	and.w	r3, r3, #16
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <f_open+0x1b6>
					res = FR_NO_FILE;
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008cd8:	e00c      	b.n	8008cf4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <f_open+0x1d0>
 8008ce4:	7ebb      	ldrb	r3, [r7, #26]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <f_open+0x1d0>
						res = FR_DENIED;
 8008cee:	2307      	movs	r3, #7
 8008cf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d126      	bne.n	8008d4a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	bf8c      	ite	hi
 8008d22:	2301      	movhi	r3, #1
 8008d24:	2300      	movls	r3, #0
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f107 0314 	add.w	r3, r7, #20
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fb93 	bl	800745c <inc_lock>
 8008d36:	4602      	mov	r2, r0
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <f_open+0x226>
 8008d44:	2302      	movs	r3, #2
 8008d46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f040 8095 	bne.w	8008e7e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff f9b4 	bl	80080c8 <ld_clust>
 8008d60:	4602      	mov	r2, r0
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d68:	331c      	adds	r3, #28
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fa10 	bl	8007190 <ld_dword>
 8008d70:	4602      	mov	r2, r0
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	88da      	ldrh	r2, [r3, #6]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	79fa      	ldrb	r2, [r7, #7]
 8008d8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3330      	adds	r3, #48	@ 0x30
 8008da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008daa:	2100      	movs	r1, #0
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe fa7a 	bl	80072a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d060      	beq.n	8008e7e <f_open+0x35a>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d05c      	beq.n	8008e7e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	895b      	ldrh	r3, [r3, #10]
 8008dd0:	025b      	lsls	r3, r3, #9
 8008dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8008de0:	e016      	b.n	8008e10 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fd25 	bl	8007836 <get_fat>
 8008dec:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d802      	bhi.n	8008dfa <f_open+0x2d6>
 8008df4:	2302      	movs	r3, #2
 8008df6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e00:	d102      	bne.n	8008e08 <f_open+0x2e4>
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008e08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <f_open+0x2fc>
 8008e18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d8e0      	bhi.n	8008de2 <f_open+0x2be>
				}
				fp->clust = clst;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008e26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d127      	bne.n	8008e7e <f_open+0x35a>
 8008e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d022      	beq.n	8008e7e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fcdb 	bl	80077f8 <clust2sect>
 8008e42:	6478      	str	r0, [r7, #68]	@ 0x44
 8008e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d103      	bne.n	8008e52 <f_open+0x32e>
						res = FR_INT_ERR;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e50:	e015      	b.n	8008e7e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e54:	0a5a      	lsrs	r2, r3, #9
 8008e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e58:	441a      	add	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	7858      	ldrb	r0, [r3, #1]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a1a      	ldr	r2, [r3, #32]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f7fe f919 	bl	80070a4 <disk_read>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <f_open+0x35a>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <f_open+0x368>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3760      	adds	r7, #96	@ 0x60
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08e      	sub	sp, #56	@ 0x38
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f107 0214 	add.w	r2, r7, #20
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fdb7 	bl	8008a2c <validate>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <f_read+0x44>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	7d5b      	ldrb	r3, [r3, #21]
 8008ed0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <f_read+0x4a>
 8008edc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ee0:	e115      	b.n	800910e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	7d1b      	ldrb	r3, [r3, #20]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <f_read+0x5a>
 8008eee:	2307      	movs	r3, #7
 8008ef0:	e10d      	b.n	800910e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f240 80fe 	bls.w	8009104 <f_read+0x26c>
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008f0c:	e0fa      	b.n	8009104 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f040 80c6 	bne.w	80090a8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	0a5b      	lsrs	r3, r3, #9
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	8952      	ldrh	r2, [r2, #10]
 8008f26:	3a01      	subs	r2, #1
 8008f28:	4013      	ands	r3, r2
 8008f2a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d12f      	bne.n	8008f92 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f40:	e013      	b.n	8008f6a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d007      	beq.n	8008f5a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7fe fefe 	bl	8007d52 <clmt_clust>
 8008f56:	6338      	str	r0, [r7, #48]	@ 0x30
 8008f58:	e007      	b.n	8008f6a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f7fe fc67 	bl	8007836 <get_fat>
 8008f68:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d804      	bhi.n	8008f7a <f_read+0xe2>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2202      	movs	r2, #2
 8008f74:	755a      	strb	r2, [r3, #21]
 8008f76:	2302      	movs	r3, #2
 8008f78:	e0c9      	b.n	800910e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d104      	bne.n	8008f8c <f_read+0xf4>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2201      	movs	r2, #1
 8008f86:	755a      	strb	r2, [r3, #21]
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e0c0      	b.n	800910e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f90:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f7fe fc2c 	bl	80077f8 <clust2sect>
 8008fa0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <f_read+0x11a>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2202      	movs	r2, #2
 8008fac:	755a      	strb	r2, [r3, #21]
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e0ad      	b.n	800910e <f_read+0x276>
			sect += csect;
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	0a5b      	lsrs	r3, r3, #9
 8008fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d039      	beq.n	800903a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fca:	4413      	add	r3, r2
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	8952      	ldrh	r2, [r2, #10]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d905      	bls.n	8008fe0 <f_read+0x148>
					cc = fs->csize - csect;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	895b      	ldrh	r3, [r3, #10]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	7858      	ldrb	r0, [r3, #1]
 8008fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fea:	f7fe f85b 	bl	80070a4 <disk_read>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d004      	beq.n	8008ffe <f_read+0x166>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	755a      	strb	r2, [r3, #21]
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e087      	b.n	800910e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	7d1b      	ldrb	r3, [r3, #20]
 8009002:	b25b      	sxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	da14      	bge.n	8009032 <f_read+0x19a>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1a      	ldr	r2, [r3, #32]
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009012:	429a      	cmp	r2, r3
 8009014:	d90d      	bls.n	8009032 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a1a      	ldr	r2, [r3, #32]
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	025b      	lsls	r3, r3, #9
 8009020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009022:	18d0      	adds	r0, r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3330      	adds	r3, #48	@ 0x30
 8009028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800902c:	4619      	mov	r1, r3
 800902e:	f7fe f919 	bl	8007264 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009034:	025b      	lsls	r3, r3, #9
 8009036:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009038:	e050      	b.n	80090dc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	429a      	cmp	r2, r3
 8009042:	d02e      	beq.n	80090a2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	7d1b      	ldrb	r3, [r3, #20]
 8009048:	b25b      	sxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	da18      	bge.n	8009080 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	7858      	ldrb	r0, [r3, #1]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a1a      	ldr	r2, [r3, #32]
 800905c:	2301      	movs	r3, #1
 800905e:	f7fe f841 	bl	80070e4 <disk_write>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <f_read+0x1da>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	755a      	strb	r2, [r3, #21]
 800906e:	2301      	movs	r3, #1
 8009070:	e04d      	b.n	800910e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	7d1b      	ldrb	r3, [r3, #20]
 8009076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800907a:	b2da      	uxtb	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	7858      	ldrb	r0, [r3, #1]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800908a:	2301      	movs	r3, #1
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	f7fe f809 	bl	80070a4 <disk_read>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <f_read+0x20a>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	755a      	strb	r2, [r3, #21]
 800909e:	2301      	movs	r3, #1
 80090a0:	e035      	b.n	800910e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	69ba      	ldr	r2, [r7, #24]
 80090a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80090b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80090b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d901      	bls.n	80090c2 <f_read+0x22a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d0:	4413      	add	r3, r2
 80090d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090d4:	4619      	mov	r1, r3
 80090d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80090d8:	f7fe f8c4 	bl	8007264 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80090dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e0:	4413      	add	r3, r2
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ea:	441a      	add	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	619a      	str	r2, [r3, #24]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f6:	441a      	add	r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f47f af01 	bne.w	8008f0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3738      	adds	r7, #56	@ 0x38
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b08c      	sub	sp, #48	@ 0x30
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f107 0210 	add.w	r2, r7, #16
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff fc78 	bl	8008a2c <validate>
 800913c:	4603      	mov	r3, r0
 800913e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009142:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009146:	2b00      	cmp	r3, #0
 8009148:	d107      	bne.n	800915a <f_write+0x44>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	7d5b      	ldrb	r3, [r3, #21]
 800914e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009152:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <f_write+0x4a>
 800915a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800915e:	e14b      	b.n	80093f8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	7d1b      	ldrb	r3, [r3, #20]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <f_write+0x5a>
 800916c:	2307      	movs	r3, #7
 800916e:	e143      	b.n	80093f8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	699a      	ldr	r2, [r3, #24]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	441a      	add	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	429a      	cmp	r2, r3
 800917e:	f080 812d 	bcs.w	80093dc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	43db      	mvns	r3, r3
 8009188:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800918a:	e127      	b.n	80093dc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 80e3 	bne.w	8009360 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	0a5b      	lsrs	r3, r3, #9
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	8952      	ldrh	r2, [r2, #10]
 80091a4:	3a01      	subs	r2, #1
 80091a6:	4013      	ands	r3, r2
 80091a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d143      	bne.n	8009238 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10c      	bne.n	80091d2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80091be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d11a      	bne.n	80091fa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2100      	movs	r1, #0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe fd2a 	bl	8007c22 <create_chain>
 80091ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 80091d0:	e013      	b.n	80091fa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	4619      	mov	r1, r3
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f7fe fdb6 	bl	8007d52 <clmt_clust>
 80091e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80091e8:	e007      	b.n	80091fa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	4619      	mov	r1, r3
 80091f2:	4610      	mov	r0, r2
 80091f4:	f7fe fd15 	bl	8007c22 <create_chain>
 80091f8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80f2 	beq.w	80093e6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009204:	2b01      	cmp	r3, #1
 8009206:	d104      	bne.n	8009212 <f_write+0xfc>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2202      	movs	r2, #2
 800920c:	755a      	strb	r2, [r3, #21]
 800920e:	2302      	movs	r3, #2
 8009210:	e0f2      	b.n	80093f8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009218:	d104      	bne.n	8009224 <f_write+0x10e>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2201      	movs	r2, #1
 800921e:	755a      	strb	r2, [r3, #21]
 8009220:	2301      	movs	r3, #1
 8009222:	e0e9      	b.n	80093f8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009228:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <f_write+0x122>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009236:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	7d1b      	ldrb	r3, [r3, #20]
 800923c:	b25b      	sxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	da18      	bge.n	8009274 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	7858      	ldrb	r0, [r3, #1]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a1a      	ldr	r2, [r3, #32]
 8009250:	2301      	movs	r3, #1
 8009252:	f7fd ff47 	bl	80070e4 <disk_write>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <f_write+0x150>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	755a      	strb	r2, [r3, #21]
 8009262:	2301      	movs	r3, #1
 8009264:	e0c8      	b.n	80093f8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	7d1b      	ldrb	r3, [r3, #20]
 800926a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800926e:	b2da      	uxtb	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7fe fabb 	bl	80077f8 <clust2sect>
 8009282:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <f_write+0x17e>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2202      	movs	r2, #2
 800928e:	755a      	strb	r2, [r3, #21]
 8009290:	2302      	movs	r3, #2
 8009292:	e0b1      	b.n	80093f8 <f_write+0x2e2>
			sect += csect;
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	4413      	add	r3, r2
 800929a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	0a5b      	lsrs	r3, r3, #9
 80092a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d03c      	beq.n	8009322 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	4413      	add	r3, r2
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	8952      	ldrh	r2, [r2, #10]
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d905      	bls.n	80092c2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	895b      	ldrh	r3, [r3, #10]
 80092ba:	461a      	mov	r2, r3
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	7858      	ldrb	r0, [r3, #1]
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	69f9      	ldr	r1, [r7, #28]
 80092cc:	f7fd ff0a 	bl	80070e4 <disk_write>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d004      	beq.n	80092e0 <f_write+0x1ca>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	755a      	strb	r2, [r3, #21]
 80092dc:	2301      	movs	r3, #1
 80092de:	e08b      	b.n	80093f8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a1a      	ldr	r2, [r3, #32]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d915      	bls.n	800931a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1a      	ldr	r2, [r3, #32]
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	025b      	lsls	r3, r3, #9
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	4413      	add	r3, r2
 8009302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009306:	4619      	mov	r1, r3
 8009308:	f7fd ffac 	bl	8007264 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	7d1b      	ldrb	r3, [r3, #20]
 8009310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009314:	b2da      	uxtb	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	025b      	lsls	r3, r3, #9
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009320:	e03f      	b.n	80093a2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	429a      	cmp	r2, r3
 800932a:	d016      	beq.n	800935a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	699a      	ldr	r2, [r3, #24]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009334:	429a      	cmp	r2, r3
 8009336:	d210      	bcs.n	800935a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	7858      	ldrb	r0, [r3, #1]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009342:	2301      	movs	r3, #1
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	f7fd fead 	bl	80070a4 <disk_read>
 800934a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800934c:	2b00      	cmp	r3, #0
 800934e:	d004      	beq.n	800935a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	755a      	strb	r2, [r3, #21]
 8009356:	2301      	movs	r3, #1
 8009358:	e04e      	b.n	80093f8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009368:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800936c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800936e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	429a      	cmp	r2, r3
 8009374:	d901      	bls.n	800937a <f_write+0x264>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009388:	4413      	add	r3, r2
 800938a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800938c:	69f9      	ldr	r1, [r7, #28]
 800938e:	4618      	mov	r0, r3
 8009390:	f7fd ff68 	bl	8007264 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	7d1b      	ldrb	r3, [r3, #20]
 8009398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800939c:	b2da      	uxtb	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	4413      	add	r3, r2
 80093a8:	61fb      	str	r3, [r7, #28]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	699a      	ldr	r2, [r3, #24]
 80093ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b0:	441a      	add	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	619a      	str	r2, [r3, #24]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	429a      	cmp	r2, r3
 80093c0:	bf38      	it	cc
 80093c2:	461a      	movcc	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	60da      	str	r2, [r3, #12]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	441a      	add	r2, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f47f aed4 	bne.w	800918c <f_write+0x76>
 80093e4:	e000      	b.n	80093e8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093e6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	7d1b      	ldrb	r3, [r3, #20]
 80093ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3730      	adds	r7, #48	@ 0x30
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f107 0208 	add.w	r2, r7, #8
 800940e:	4611      	mov	r1, r2
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff fb0b 	bl	8008a2c <validate>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d168      	bne.n	80094f2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	7d1b      	ldrb	r3, [r3, #20]
 8009424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d062      	beq.n	80094f2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7d1b      	ldrb	r3, [r3, #20]
 8009430:	b25b      	sxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	da15      	bge.n	8009462 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	7858      	ldrb	r0, [r3, #1]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a1a      	ldr	r2, [r3, #32]
 8009444:	2301      	movs	r3, #1
 8009446:	f7fd fe4d 	bl	80070e4 <disk_write>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <f_sync+0x54>
 8009450:	2301      	movs	r3, #1
 8009452:	e04f      	b.n	80094f4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7d1b      	ldrb	r3, [r3, #20]
 8009458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800945c:	b2da      	uxtb	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009462:	f7fd fc71 	bl	8006d48 <get_fattime>
 8009466:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946e:	4619      	mov	r1, r3
 8009470:	4610      	mov	r0, r2
 8009472:	f7fe f925 	bl	80076c0 <move_window>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d138      	bne.n	80094f2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009484:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	330b      	adds	r3, #11
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	330b      	adds	r3, #11
 8009490:	f042 0220 	orr.w	r2, r2, #32
 8009494:	b2d2      	uxtb	r2, r2
 8009496:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6818      	ldr	r0, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	461a      	mov	r2, r3
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	f7fe fe2f 	bl	8008106 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f103 021c 	add.w	r2, r3, #28
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f7fd fea9 	bl	800720c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3316      	adds	r3, #22
 80094be:	6939      	ldr	r1, [r7, #16]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fd fea3 	bl	800720c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3312      	adds	r3, #18
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fd fe82 	bl	80071d6 <st_word>
					fs->wflag = 1;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2201      	movs	r2, #1
 80094d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe f91e 	bl	800771c <sync_fs>
 80094e0:	4603      	mov	r3, r0
 80094e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	7d1b      	ldrb	r3, [r3, #20]
 80094e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ff7b 	bl	8009400 <f_sync>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d118      	bne.n	8009546 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f107 0208 	add.w	r2, r7, #8
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff fa85 	bl	8008a2c <validate>
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10c      	bne.n	8009546 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe f821 	bl	8007578 <dec_lock>
 8009536:	4603      	mov	r3, r0
 8009538:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800955e:	2301      	movs	r3, #1
 8009560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009566:	4b1f      	ldr	r3, [pc, #124]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 8009568:	7a5b      	ldrb	r3, [r3, #9]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d131      	bne.n	80095d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009570:	4b1c      	ldr	r3, [pc, #112]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 8009572:	7a5b      	ldrb	r3, [r3, #9]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	461a      	mov	r2, r3
 8009578:	4b1a      	ldr	r3, [pc, #104]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 800957a:	2100      	movs	r1, #0
 800957c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800957e:	4b19      	ldr	r3, [pc, #100]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 8009580:	7a5b      	ldrb	r3, [r3, #9]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4a17      	ldr	r2, [pc, #92]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800958e:	4b15      	ldr	r3, [pc, #84]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 8009590:	7a5b      	ldrb	r3, [r3, #9]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	4b13      	ldr	r3, [pc, #76]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 8009598:	4413      	add	r3, r2
 800959a:	79fa      	ldrb	r2, [r7, #7]
 800959c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800959e:	4b11      	ldr	r3, [pc, #68]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 80095a0:	7a5b      	ldrb	r3, [r3, #9]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	b2d1      	uxtb	r1, r2
 80095a8:	4a0e      	ldr	r2, [pc, #56]	@ (80095e4 <FATFS_LinkDriverEx+0x94>)
 80095aa:	7251      	strb	r1, [r2, #9]
 80095ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80095ae:	7dbb      	ldrb	r3, [r7, #22]
 80095b0:	3330      	adds	r3, #48	@ 0x30
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	3301      	adds	r3, #1
 80095bc:	223a      	movs	r2, #58	@ 0x3a
 80095be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	3302      	adds	r3, #2
 80095c4:	222f      	movs	r2, #47	@ 0x2f
 80095c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	3303      	adds	r3, #3
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	2000080c 	.word	0x2000080c

080095e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095f2:	2200      	movs	r2, #0
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff ffaa 	bl	8009550 <FATFS_LinkDriverEx>
 80095fc:	4603      	mov	r3, r0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <sniprintf>:
 8009608:	b40c      	push	{r2, r3}
 800960a:	b530      	push	{r4, r5, lr}
 800960c:	4b17      	ldr	r3, [pc, #92]	@ (800966c <sniprintf+0x64>)
 800960e:	1e0c      	subs	r4, r1, #0
 8009610:	681d      	ldr	r5, [r3, #0]
 8009612:	b09d      	sub	sp, #116	@ 0x74
 8009614:	da08      	bge.n	8009628 <sniprintf+0x20>
 8009616:	238b      	movs	r3, #139	@ 0x8b
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	b01d      	add	sp, #116	@ 0x74
 8009620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009624:	b002      	add	sp, #8
 8009626:	4770      	bx	lr
 8009628:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800962c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009630:	bf14      	ite	ne
 8009632:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009636:	4623      	moveq	r3, r4
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	9307      	str	r3, [sp, #28]
 800963c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009640:	9002      	str	r0, [sp, #8]
 8009642:	9006      	str	r0, [sp, #24]
 8009644:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009648:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800964a:	ab21      	add	r3, sp, #132	@ 0x84
 800964c:	a902      	add	r1, sp, #8
 800964e:	4628      	mov	r0, r5
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	f000 fa15 	bl	8009a80 <_svfiprintf_r>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	bfbc      	itt	lt
 800965a:	238b      	movlt	r3, #139	@ 0x8b
 800965c:	602b      	strlt	r3, [r5, #0]
 800965e:	2c00      	cmp	r4, #0
 8009660:	d0dd      	beq.n	800961e <sniprintf+0x16>
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
 8009668:	e7d9      	b.n	800961e <sniprintf+0x16>
 800966a:	bf00      	nop
 800966c:	2000000c 	.word	0x2000000c

08009670 <siscanf>:
 8009670:	b40e      	push	{r1, r2, r3}
 8009672:	b530      	push	{r4, r5, lr}
 8009674:	b09c      	sub	sp, #112	@ 0x70
 8009676:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009678:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800967c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009680:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009684:	9002      	str	r0, [sp, #8]
 8009686:	9006      	str	r0, [sp, #24]
 8009688:	f7f6 fda2 	bl	80001d0 <strlen>
 800968c:	4b0b      	ldr	r3, [pc, #44]	@ (80096bc <siscanf+0x4c>)
 800968e:	9003      	str	r0, [sp, #12]
 8009690:	9007      	str	r0, [sp, #28]
 8009692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009694:	480a      	ldr	r0, [pc, #40]	@ (80096c0 <siscanf+0x50>)
 8009696:	9401      	str	r4, [sp, #4]
 8009698:	2300      	movs	r3, #0
 800969a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800969c:	9314      	str	r3, [sp, #80]	@ 0x50
 800969e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096a6:	462a      	mov	r2, r5
 80096a8:	4623      	mov	r3, r4
 80096aa:	a902      	add	r1, sp, #8
 80096ac:	6800      	ldr	r0, [r0, #0]
 80096ae:	f000 fb3b 	bl	8009d28 <__ssvfiscanf_r>
 80096b2:	b01c      	add	sp, #112	@ 0x70
 80096b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096b8:	b003      	add	sp, #12
 80096ba:	4770      	bx	lr
 80096bc:	080096c5 	.word	0x080096c5
 80096c0:	2000000c 	.word	0x2000000c

080096c4 <__seofread>:
 80096c4:	2000      	movs	r0, #0
 80096c6:	4770      	bx	lr

080096c8 <memcmp>:
 80096c8:	b510      	push	{r4, lr}
 80096ca:	3901      	subs	r1, #1
 80096cc:	4402      	add	r2, r0
 80096ce:	4290      	cmp	r0, r2
 80096d0:	d101      	bne.n	80096d6 <memcmp+0xe>
 80096d2:	2000      	movs	r0, #0
 80096d4:	e005      	b.n	80096e2 <memcmp+0x1a>
 80096d6:	7803      	ldrb	r3, [r0, #0]
 80096d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80096dc:	42a3      	cmp	r3, r4
 80096de:	d001      	beq.n	80096e4 <memcmp+0x1c>
 80096e0:	1b18      	subs	r0, r3, r4
 80096e2:	bd10      	pop	{r4, pc}
 80096e4:	3001      	adds	r0, #1
 80096e6:	e7f2      	b.n	80096ce <memcmp+0x6>

080096e8 <memset>:
 80096e8:	4402      	add	r2, r0
 80096ea:	4603      	mov	r3, r0
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d100      	bne.n	80096f2 <memset+0xa>
 80096f0:	4770      	bx	lr
 80096f2:	f803 1b01 	strb.w	r1, [r3], #1
 80096f6:	e7f9      	b.n	80096ec <memset+0x4>

080096f8 <strchr>:
 80096f8:	b2c9      	uxtb	r1, r1
 80096fa:	4603      	mov	r3, r0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009702:	b112      	cbz	r2, 800970a <strchr+0x12>
 8009704:	428a      	cmp	r2, r1
 8009706:	d1f9      	bne.n	80096fc <strchr+0x4>
 8009708:	4770      	bx	lr
 800970a:	2900      	cmp	r1, #0
 800970c:	bf18      	it	ne
 800970e:	2000      	movne	r0, #0
 8009710:	4770      	bx	lr

08009712 <strncpy>:
 8009712:	b510      	push	{r4, lr}
 8009714:	3901      	subs	r1, #1
 8009716:	4603      	mov	r3, r0
 8009718:	b132      	cbz	r2, 8009728 <strncpy+0x16>
 800971a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800971e:	f803 4b01 	strb.w	r4, [r3], #1
 8009722:	3a01      	subs	r2, #1
 8009724:	2c00      	cmp	r4, #0
 8009726:	d1f7      	bne.n	8009718 <strncpy+0x6>
 8009728:	441a      	add	r2, r3
 800972a:	2100      	movs	r1, #0
 800972c:	4293      	cmp	r3, r2
 800972e:	d100      	bne.n	8009732 <strncpy+0x20>
 8009730:	bd10      	pop	{r4, pc}
 8009732:	f803 1b01 	strb.w	r1, [r3], #1
 8009736:	e7f9      	b.n	800972c <strncpy+0x1a>

08009738 <strstr>:
 8009738:	780a      	ldrb	r2, [r1, #0]
 800973a:	b570      	push	{r4, r5, r6, lr}
 800973c:	b96a      	cbnz	r2, 800975a <strstr+0x22>
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	429a      	cmp	r2, r3
 8009742:	d109      	bne.n	8009758 <strstr+0x20>
 8009744:	460c      	mov	r4, r1
 8009746:	4605      	mov	r5, r0
 8009748:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0f6      	beq.n	800973e <strstr+0x6>
 8009750:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009754:	429e      	cmp	r6, r3
 8009756:	d0f7      	beq.n	8009748 <strstr+0x10>
 8009758:	3001      	adds	r0, #1
 800975a:	7803      	ldrb	r3, [r0, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1ef      	bne.n	8009740 <strstr+0x8>
 8009760:	4618      	mov	r0, r3
 8009762:	e7ec      	b.n	800973e <strstr+0x6>

08009764 <__errno>:
 8009764:	4b01      	ldr	r3, [pc, #4]	@ (800976c <__errno+0x8>)
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	2000000c 	.word	0x2000000c

08009770 <__libc_init_array>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	4d0d      	ldr	r5, [pc, #52]	@ (80097a8 <__libc_init_array+0x38>)
 8009774:	4c0d      	ldr	r4, [pc, #52]	@ (80097ac <__libc_init_array+0x3c>)
 8009776:	1b64      	subs	r4, r4, r5
 8009778:	10a4      	asrs	r4, r4, #2
 800977a:	2600      	movs	r6, #0
 800977c:	42a6      	cmp	r6, r4
 800977e:	d109      	bne.n	8009794 <__libc_init_array+0x24>
 8009780:	4d0b      	ldr	r5, [pc, #44]	@ (80097b0 <__libc_init_array+0x40>)
 8009782:	4c0c      	ldr	r4, [pc, #48]	@ (80097b4 <__libc_init_array+0x44>)
 8009784:	f001 f8e0 	bl	800a948 <_init>
 8009788:	1b64      	subs	r4, r4, r5
 800978a:	10a4      	asrs	r4, r4, #2
 800978c:	2600      	movs	r6, #0
 800978e:	42a6      	cmp	r6, r4
 8009790:	d105      	bne.n	800979e <__libc_init_array+0x2e>
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	f855 3b04 	ldr.w	r3, [r5], #4
 8009798:	4798      	blx	r3
 800979a:	3601      	adds	r6, #1
 800979c:	e7ee      	b.n	800977c <__libc_init_array+0xc>
 800979e:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a2:	4798      	blx	r3
 80097a4:	3601      	adds	r6, #1
 80097a6:	e7f2      	b.n	800978e <__libc_init_array+0x1e>
 80097a8:	0800ae98 	.word	0x0800ae98
 80097ac:	0800ae98 	.word	0x0800ae98
 80097b0:	0800ae98 	.word	0x0800ae98
 80097b4:	0800ae9c 	.word	0x0800ae9c

080097b8 <__retarget_lock_acquire_recursive>:
 80097b8:	4770      	bx	lr

080097ba <__retarget_lock_release_recursive>:
 80097ba:	4770      	bx	lr

080097bc <memcpy>:
 80097bc:	440a      	add	r2, r1
 80097be:	4291      	cmp	r1, r2
 80097c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097c4:	d100      	bne.n	80097c8 <memcpy+0xc>
 80097c6:	4770      	bx	lr
 80097c8:	b510      	push	{r4, lr}
 80097ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d2:	4291      	cmp	r1, r2
 80097d4:	d1f9      	bne.n	80097ca <memcpy+0xe>
 80097d6:	bd10      	pop	{r4, pc}

080097d8 <_free_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4605      	mov	r5, r0
 80097dc:	2900      	cmp	r1, #0
 80097de:	d041      	beq.n	8009864 <_free_r+0x8c>
 80097e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097e4:	1f0c      	subs	r4, r1, #4
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	bfb8      	it	lt
 80097ea:	18e4      	addlt	r4, r4, r3
 80097ec:	f000 f8e0 	bl	80099b0 <__malloc_lock>
 80097f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009868 <_free_r+0x90>)
 80097f2:	6813      	ldr	r3, [r2, #0]
 80097f4:	b933      	cbnz	r3, 8009804 <_free_r+0x2c>
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	6014      	str	r4, [r2, #0]
 80097fa:	4628      	mov	r0, r5
 80097fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009800:	f000 b8dc 	b.w	80099bc <__malloc_unlock>
 8009804:	42a3      	cmp	r3, r4
 8009806:	d908      	bls.n	800981a <_free_r+0x42>
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	1821      	adds	r1, r4, r0
 800980c:	428b      	cmp	r3, r1
 800980e:	bf01      	itttt	eq
 8009810:	6819      	ldreq	r1, [r3, #0]
 8009812:	685b      	ldreq	r3, [r3, #4]
 8009814:	1809      	addeq	r1, r1, r0
 8009816:	6021      	streq	r1, [r4, #0]
 8009818:	e7ed      	b.n	80097f6 <_free_r+0x1e>
 800981a:	461a      	mov	r2, r3
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	b10b      	cbz	r3, 8009824 <_free_r+0x4c>
 8009820:	42a3      	cmp	r3, r4
 8009822:	d9fa      	bls.n	800981a <_free_r+0x42>
 8009824:	6811      	ldr	r1, [r2, #0]
 8009826:	1850      	adds	r0, r2, r1
 8009828:	42a0      	cmp	r0, r4
 800982a:	d10b      	bne.n	8009844 <_free_r+0x6c>
 800982c:	6820      	ldr	r0, [r4, #0]
 800982e:	4401      	add	r1, r0
 8009830:	1850      	adds	r0, r2, r1
 8009832:	4283      	cmp	r3, r0
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	d1e0      	bne.n	80097fa <_free_r+0x22>
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	6053      	str	r3, [r2, #4]
 800983e:	4408      	add	r0, r1
 8009840:	6010      	str	r0, [r2, #0]
 8009842:	e7da      	b.n	80097fa <_free_r+0x22>
 8009844:	d902      	bls.n	800984c <_free_r+0x74>
 8009846:	230c      	movs	r3, #12
 8009848:	602b      	str	r3, [r5, #0]
 800984a:	e7d6      	b.n	80097fa <_free_r+0x22>
 800984c:	6820      	ldr	r0, [r4, #0]
 800984e:	1821      	adds	r1, r4, r0
 8009850:	428b      	cmp	r3, r1
 8009852:	bf04      	itt	eq
 8009854:	6819      	ldreq	r1, [r3, #0]
 8009856:	685b      	ldreq	r3, [r3, #4]
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	bf04      	itt	eq
 800985c:	1809      	addeq	r1, r1, r0
 800985e:	6021      	streq	r1, [r4, #0]
 8009860:	6054      	str	r4, [r2, #4]
 8009862:	e7ca      	b.n	80097fa <_free_r+0x22>
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	2000095c 	.word	0x2000095c

0800986c <sbrk_aligned>:
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	4e0f      	ldr	r6, [pc, #60]	@ (80098ac <sbrk_aligned+0x40>)
 8009870:	460c      	mov	r4, r1
 8009872:	6831      	ldr	r1, [r6, #0]
 8009874:	4605      	mov	r5, r0
 8009876:	b911      	cbnz	r1, 800987e <sbrk_aligned+0x12>
 8009878:	f000 ff34 	bl	800a6e4 <_sbrk_r>
 800987c:	6030      	str	r0, [r6, #0]
 800987e:	4621      	mov	r1, r4
 8009880:	4628      	mov	r0, r5
 8009882:	f000 ff2f 	bl	800a6e4 <_sbrk_r>
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	d103      	bne.n	8009892 <sbrk_aligned+0x26>
 800988a:	f04f 34ff 	mov.w	r4, #4294967295
 800988e:	4620      	mov	r0, r4
 8009890:	bd70      	pop	{r4, r5, r6, pc}
 8009892:	1cc4      	adds	r4, r0, #3
 8009894:	f024 0403 	bic.w	r4, r4, #3
 8009898:	42a0      	cmp	r0, r4
 800989a:	d0f8      	beq.n	800988e <sbrk_aligned+0x22>
 800989c:	1a21      	subs	r1, r4, r0
 800989e:	4628      	mov	r0, r5
 80098a0:	f000 ff20 	bl	800a6e4 <_sbrk_r>
 80098a4:	3001      	adds	r0, #1
 80098a6:	d1f2      	bne.n	800988e <sbrk_aligned+0x22>
 80098a8:	e7ef      	b.n	800988a <sbrk_aligned+0x1e>
 80098aa:	bf00      	nop
 80098ac:	20000958 	.word	0x20000958

080098b0 <_malloc_r>:
 80098b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b4:	1ccd      	adds	r5, r1, #3
 80098b6:	f025 0503 	bic.w	r5, r5, #3
 80098ba:	3508      	adds	r5, #8
 80098bc:	2d0c      	cmp	r5, #12
 80098be:	bf38      	it	cc
 80098c0:	250c      	movcc	r5, #12
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	4606      	mov	r6, r0
 80098c6:	db01      	blt.n	80098cc <_malloc_r+0x1c>
 80098c8:	42a9      	cmp	r1, r5
 80098ca:	d904      	bls.n	80098d6 <_malloc_r+0x26>
 80098cc:	230c      	movs	r3, #12
 80098ce:	6033      	str	r3, [r6, #0]
 80098d0:	2000      	movs	r0, #0
 80098d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099ac <_malloc_r+0xfc>
 80098da:	f000 f869 	bl	80099b0 <__malloc_lock>
 80098de:	f8d8 3000 	ldr.w	r3, [r8]
 80098e2:	461c      	mov	r4, r3
 80098e4:	bb44      	cbnz	r4, 8009938 <_malloc_r+0x88>
 80098e6:	4629      	mov	r1, r5
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7ff ffbf 	bl	800986c <sbrk_aligned>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	4604      	mov	r4, r0
 80098f2:	d158      	bne.n	80099a6 <_malloc_r+0xf6>
 80098f4:	f8d8 4000 	ldr.w	r4, [r8]
 80098f8:	4627      	mov	r7, r4
 80098fa:	2f00      	cmp	r7, #0
 80098fc:	d143      	bne.n	8009986 <_malloc_r+0xd6>
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d04b      	beq.n	800999a <_malloc_r+0xea>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	4639      	mov	r1, r7
 8009906:	4630      	mov	r0, r6
 8009908:	eb04 0903 	add.w	r9, r4, r3
 800990c:	f000 feea 	bl	800a6e4 <_sbrk_r>
 8009910:	4581      	cmp	r9, r0
 8009912:	d142      	bne.n	800999a <_malloc_r+0xea>
 8009914:	6821      	ldr	r1, [r4, #0]
 8009916:	1a6d      	subs	r5, r5, r1
 8009918:	4629      	mov	r1, r5
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ffa6 	bl	800986c <sbrk_aligned>
 8009920:	3001      	adds	r0, #1
 8009922:	d03a      	beq.n	800999a <_malloc_r+0xea>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	442b      	add	r3, r5
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	f8d8 3000 	ldr.w	r3, [r8]
 800992e:	685a      	ldr	r2, [r3, #4]
 8009930:	bb62      	cbnz	r2, 800998c <_malloc_r+0xdc>
 8009932:	f8c8 7000 	str.w	r7, [r8]
 8009936:	e00f      	b.n	8009958 <_malloc_r+0xa8>
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	1b52      	subs	r2, r2, r5
 800993c:	d420      	bmi.n	8009980 <_malloc_r+0xd0>
 800993e:	2a0b      	cmp	r2, #11
 8009940:	d917      	bls.n	8009972 <_malloc_r+0xc2>
 8009942:	1961      	adds	r1, r4, r5
 8009944:	42a3      	cmp	r3, r4
 8009946:	6025      	str	r5, [r4, #0]
 8009948:	bf18      	it	ne
 800994a:	6059      	strne	r1, [r3, #4]
 800994c:	6863      	ldr	r3, [r4, #4]
 800994e:	bf08      	it	eq
 8009950:	f8c8 1000 	streq.w	r1, [r8]
 8009954:	5162      	str	r2, [r4, r5]
 8009956:	604b      	str	r3, [r1, #4]
 8009958:	4630      	mov	r0, r6
 800995a:	f000 f82f 	bl	80099bc <__malloc_unlock>
 800995e:	f104 000b 	add.w	r0, r4, #11
 8009962:	1d23      	adds	r3, r4, #4
 8009964:	f020 0007 	bic.w	r0, r0, #7
 8009968:	1ac2      	subs	r2, r0, r3
 800996a:	bf1c      	itt	ne
 800996c:	1a1b      	subne	r3, r3, r0
 800996e:	50a3      	strne	r3, [r4, r2]
 8009970:	e7af      	b.n	80098d2 <_malloc_r+0x22>
 8009972:	6862      	ldr	r2, [r4, #4]
 8009974:	42a3      	cmp	r3, r4
 8009976:	bf0c      	ite	eq
 8009978:	f8c8 2000 	streq.w	r2, [r8]
 800997c:	605a      	strne	r2, [r3, #4]
 800997e:	e7eb      	b.n	8009958 <_malloc_r+0xa8>
 8009980:	4623      	mov	r3, r4
 8009982:	6864      	ldr	r4, [r4, #4]
 8009984:	e7ae      	b.n	80098e4 <_malloc_r+0x34>
 8009986:	463c      	mov	r4, r7
 8009988:	687f      	ldr	r7, [r7, #4]
 800998a:	e7b6      	b.n	80098fa <_malloc_r+0x4a>
 800998c:	461a      	mov	r2, r3
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	42a3      	cmp	r3, r4
 8009992:	d1fb      	bne.n	800998c <_malloc_r+0xdc>
 8009994:	2300      	movs	r3, #0
 8009996:	6053      	str	r3, [r2, #4]
 8009998:	e7de      	b.n	8009958 <_malloc_r+0xa8>
 800999a:	230c      	movs	r3, #12
 800999c:	6033      	str	r3, [r6, #0]
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 f80c 	bl	80099bc <__malloc_unlock>
 80099a4:	e794      	b.n	80098d0 <_malloc_r+0x20>
 80099a6:	6005      	str	r5, [r0, #0]
 80099a8:	e7d6      	b.n	8009958 <_malloc_r+0xa8>
 80099aa:	bf00      	nop
 80099ac:	2000095c 	.word	0x2000095c

080099b0 <__malloc_lock>:
 80099b0:	4801      	ldr	r0, [pc, #4]	@ (80099b8 <__malloc_lock+0x8>)
 80099b2:	f7ff bf01 	b.w	80097b8 <__retarget_lock_acquire_recursive>
 80099b6:	bf00      	nop
 80099b8:	20000954 	.word	0x20000954

080099bc <__malloc_unlock>:
 80099bc:	4801      	ldr	r0, [pc, #4]	@ (80099c4 <__malloc_unlock+0x8>)
 80099be:	f7ff befc 	b.w	80097ba <__retarget_lock_release_recursive>
 80099c2:	bf00      	nop
 80099c4:	20000954 	.word	0x20000954

080099c8 <__ssputs_r>:
 80099c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099cc:	688e      	ldr	r6, [r1, #8]
 80099ce:	461f      	mov	r7, r3
 80099d0:	42be      	cmp	r6, r7
 80099d2:	680b      	ldr	r3, [r1, #0]
 80099d4:	4682      	mov	sl, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4690      	mov	r8, r2
 80099da:	d82d      	bhi.n	8009a38 <__ssputs_r+0x70>
 80099dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099e4:	d026      	beq.n	8009a34 <__ssputs_r+0x6c>
 80099e6:	6965      	ldr	r5, [r4, #20]
 80099e8:	6909      	ldr	r1, [r1, #16]
 80099ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099ee:	eba3 0901 	sub.w	r9, r3, r1
 80099f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099f6:	1c7b      	adds	r3, r7, #1
 80099f8:	444b      	add	r3, r9
 80099fa:	106d      	asrs	r5, r5, #1
 80099fc:	429d      	cmp	r5, r3
 80099fe:	bf38      	it	cc
 8009a00:	461d      	movcc	r5, r3
 8009a02:	0553      	lsls	r3, r2, #21
 8009a04:	d527      	bpl.n	8009a56 <__ssputs_r+0x8e>
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7ff ff52 	bl	80098b0 <_malloc_r>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	b360      	cbz	r0, 8009a6a <__ssputs_r+0xa2>
 8009a10:	6921      	ldr	r1, [r4, #16]
 8009a12:	464a      	mov	r2, r9
 8009a14:	f7ff fed2 	bl	80097bc <memcpy>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	6126      	str	r6, [r4, #16]
 8009a26:	6165      	str	r5, [r4, #20]
 8009a28:	444e      	add	r6, r9
 8009a2a:	eba5 0509 	sub.w	r5, r5, r9
 8009a2e:	6026      	str	r6, [r4, #0]
 8009a30:	60a5      	str	r5, [r4, #8]
 8009a32:	463e      	mov	r6, r7
 8009a34:	42be      	cmp	r6, r7
 8009a36:	d900      	bls.n	8009a3a <__ssputs_r+0x72>
 8009a38:	463e      	mov	r6, r7
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4641      	mov	r1, r8
 8009a40:	f000 fe35 	bl	800a6ae <memmove>
 8009a44:	68a3      	ldr	r3, [r4, #8]
 8009a46:	1b9b      	subs	r3, r3, r6
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	4433      	add	r3, r6
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	2000      	movs	r0, #0
 8009a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a56:	462a      	mov	r2, r5
 8009a58:	f000 fe54 	bl	800a704 <_realloc_r>
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d1e0      	bne.n	8009a24 <__ssputs_r+0x5c>
 8009a62:	6921      	ldr	r1, [r4, #16]
 8009a64:	4650      	mov	r0, sl
 8009a66:	f7ff feb7 	bl	80097d8 <_free_r>
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	f8ca 3000 	str.w	r3, [sl]
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	e7e9      	b.n	8009a52 <__ssputs_r+0x8a>
	...

08009a80 <_svfiprintf_r>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4698      	mov	r8, r3
 8009a86:	898b      	ldrh	r3, [r1, #12]
 8009a88:	061b      	lsls	r3, r3, #24
 8009a8a:	b09d      	sub	sp, #116	@ 0x74
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	460d      	mov	r5, r1
 8009a90:	4614      	mov	r4, r2
 8009a92:	d510      	bpl.n	8009ab6 <_svfiprintf_r+0x36>
 8009a94:	690b      	ldr	r3, [r1, #16]
 8009a96:	b973      	cbnz	r3, 8009ab6 <_svfiprintf_r+0x36>
 8009a98:	2140      	movs	r1, #64	@ 0x40
 8009a9a:	f7ff ff09 	bl	80098b0 <_malloc_r>
 8009a9e:	6028      	str	r0, [r5, #0]
 8009aa0:	6128      	str	r0, [r5, #16]
 8009aa2:	b930      	cbnz	r0, 8009ab2 <_svfiprintf_r+0x32>
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	b01d      	add	sp, #116	@ 0x74
 8009aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab2:	2340      	movs	r3, #64	@ 0x40
 8009ab4:	616b      	str	r3, [r5, #20]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aba:	2320      	movs	r3, #32
 8009abc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac4:	2330      	movs	r3, #48	@ 0x30
 8009ac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c64 <_svfiprintf_r+0x1e4>
 8009aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ace:	f04f 0901 	mov.w	r9, #1
 8009ad2:	4623      	mov	r3, r4
 8009ad4:	469a      	mov	sl, r3
 8009ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ada:	b10a      	cbz	r2, 8009ae0 <_svfiprintf_r+0x60>
 8009adc:	2a25      	cmp	r2, #37	@ 0x25
 8009ade:	d1f9      	bne.n	8009ad4 <_svfiprintf_r+0x54>
 8009ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae4:	d00b      	beq.n	8009afe <_svfiprintf_r+0x7e>
 8009ae6:	465b      	mov	r3, fp
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4629      	mov	r1, r5
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff ff6b 	bl	80099c8 <__ssputs_r>
 8009af2:	3001      	adds	r0, #1
 8009af4:	f000 80a7 	beq.w	8009c46 <_svfiprintf_r+0x1c6>
 8009af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009afa:	445a      	add	r2, fp
 8009afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009afe:	f89a 3000 	ldrb.w	r3, [sl]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 809f 	beq.w	8009c46 <_svfiprintf_r+0x1c6>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b12:	f10a 0a01 	add.w	sl, sl, #1
 8009b16:	9304      	str	r3, [sp, #16]
 8009b18:	9307      	str	r3, [sp, #28]
 8009b1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b20:	4654      	mov	r4, sl
 8009b22:	2205      	movs	r2, #5
 8009b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b28:	484e      	ldr	r0, [pc, #312]	@ (8009c64 <_svfiprintf_r+0x1e4>)
 8009b2a:	f7f6 fb59 	bl	80001e0 <memchr>
 8009b2e:	9a04      	ldr	r2, [sp, #16]
 8009b30:	b9d8      	cbnz	r0, 8009b6a <_svfiprintf_r+0xea>
 8009b32:	06d0      	lsls	r0, r2, #27
 8009b34:	bf44      	itt	mi
 8009b36:	2320      	movmi	r3, #32
 8009b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b3c:	0711      	lsls	r1, r2, #28
 8009b3e:	bf44      	itt	mi
 8009b40:	232b      	movmi	r3, #43	@ 0x2b
 8009b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b46:	f89a 3000 	ldrb.w	r3, [sl]
 8009b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b4c:	d015      	beq.n	8009b7a <_svfiprintf_r+0xfa>
 8009b4e:	9a07      	ldr	r2, [sp, #28]
 8009b50:	4654      	mov	r4, sl
 8009b52:	2000      	movs	r0, #0
 8009b54:	f04f 0c0a 	mov.w	ip, #10
 8009b58:	4621      	mov	r1, r4
 8009b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b5e:	3b30      	subs	r3, #48	@ 0x30
 8009b60:	2b09      	cmp	r3, #9
 8009b62:	d94b      	bls.n	8009bfc <_svfiprintf_r+0x17c>
 8009b64:	b1b0      	cbz	r0, 8009b94 <_svfiprintf_r+0x114>
 8009b66:	9207      	str	r2, [sp, #28]
 8009b68:	e014      	b.n	8009b94 <_svfiprintf_r+0x114>
 8009b6a:	eba0 0308 	sub.w	r3, r0, r8
 8009b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b72:	4313      	orrs	r3, r2
 8009b74:	9304      	str	r3, [sp, #16]
 8009b76:	46a2      	mov	sl, r4
 8009b78:	e7d2      	b.n	8009b20 <_svfiprintf_r+0xa0>
 8009b7a:	9b03      	ldr	r3, [sp, #12]
 8009b7c:	1d19      	adds	r1, r3, #4
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	9103      	str	r1, [sp, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfbb      	ittet	lt
 8009b86:	425b      	neglt	r3, r3
 8009b88:	f042 0202 	orrlt.w	r2, r2, #2
 8009b8c:	9307      	strge	r3, [sp, #28]
 8009b8e:	9307      	strlt	r3, [sp, #28]
 8009b90:	bfb8      	it	lt
 8009b92:	9204      	strlt	r2, [sp, #16]
 8009b94:	7823      	ldrb	r3, [r4, #0]
 8009b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b98:	d10a      	bne.n	8009bb0 <_svfiprintf_r+0x130>
 8009b9a:	7863      	ldrb	r3, [r4, #1]
 8009b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b9e:	d132      	bne.n	8009c06 <_svfiprintf_r+0x186>
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	1d1a      	adds	r2, r3, #4
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	9203      	str	r2, [sp, #12]
 8009ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bac:	3402      	adds	r4, #2
 8009bae:	9305      	str	r3, [sp, #20]
 8009bb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c74 <_svfiprintf_r+0x1f4>
 8009bb4:	7821      	ldrb	r1, [r4, #0]
 8009bb6:	2203      	movs	r2, #3
 8009bb8:	4650      	mov	r0, sl
 8009bba:	f7f6 fb11 	bl	80001e0 <memchr>
 8009bbe:	b138      	cbz	r0, 8009bd0 <_svfiprintf_r+0x150>
 8009bc0:	9b04      	ldr	r3, [sp, #16]
 8009bc2:	eba0 000a 	sub.w	r0, r0, sl
 8009bc6:	2240      	movs	r2, #64	@ 0x40
 8009bc8:	4082      	lsls	r2, r0
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	3401      	adds	r4, #1
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd4:	4824      	ldr	r0, [pc, #144]	@ (8009c68 <_svfiprintf_r+0x1e8>)
 8009bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bda:	2206      	movs	r2, #6
 8009bdc:	f7f6 fb00 	bl	80001e0 <memchr>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d036      	beq.n	8009c52 <_svfiprintf_r+0x1d2>
 8009be4:	4b21      	ldr	r3, [pc, #132]	@ (8009c6c <_svfiprintf_r+0x1ec>)
 8009be6:	bb1b      	cbnz	r3, 8009c30 <_svfiprintf_r+0x1b0>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	3307      	adds	r3, #7
 8009bec:	f023 0307 	bic.w	r3, r3, #7
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	9303      	str	r3, [sp, #12]
 8009bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf6:	4433      	add	r3, r6
 8009bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfa:	e76a      	b.n	8009ad2 <_svfiprintf_r+0x52>
 8009bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c00:	460c      	mov	r4, r1
 8009c02:	2001      	movs	r0, #1
 8009c04:	e7a8      	b.n	8009b58 <_svfiprintf_r+0xd8>
 8009c06:	2300      	movs	r3, #0
 8009c08:	3401      	adds	r4, #1
 8009c0a:	9305      	str	r3, [sp, #20]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	f04f 0c0a 	mov.w	ip, #10
 8009c12:	4620      	mov	r0, r4
 8009c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c18:	3a30      	subs	r2, #48	@ 0x30
 8009c1a:	2a09      	cmp	r2, #9
 8009c1c:	d903      	bls.n	8009c26 <_svfiprintf_r+0x1a6>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d0c6      	beq.n	8009bb0 <_svfiprintf_r+0x130>
 8009c22:	9105      	str	r1, [sp, #20]
 8009c24:	e7c4      	b.n	8009bb0 <_svfiprintf_r+0x130>
 8009c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e7f0      	b.n	8009c12 <_svfiprintf_r+0x192>
 8009c30:	ab03      	add	r3, sp, #12
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	462a      	mov	r2, r5
 8009c36:	4b0e      	ldr	r3, [pc, #56]	@ (8009c70 <_svfiprintf_r+0x1f0>)
 8009c38:	a904      	add	r1, sp, #16
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	f3af 8000 	nop.w
 8009c40:	1c42      	adds	r2, r0, #1
 8009c42:	4606      	mov	r6, r0
 8009c44:	d1d6      	bne.n	8009bf4 <_svfiprintf_r+0x174>
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	065b      	lsls	r3, r3, #25
 8009c4a:	f53f af2d 	bmi.w	8009aa8 <_svfiprintf_r+0x28>
 8009c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c50:	e72c      	b.n	8009aac <_svfiprintf_r+0x2c>
 8009c52:	ab03      	add	r3, sp, #12
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	462a      	mov	r2, r5
 8009c58:	4b05      	ldr	r3, [pc, #20]	@ (8009c70 <_svfiprintf_r+0x1f0>)
 8009c5a:	a904      	add	r1, sp, #16
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f000 fa45 	bl	800a0ec <_printf_i>
 8009c62:	e7ed      	b.n	8009c40 <_svfiprintf_r+0x1c0>
 8009c64:	0800ad40 	.word	0x0800ad40
 8009c68:	0800ad4a 	.word	0x0800ad4a
 8009c6c:	00000000 	.word	0x00000000
 8009c70:	080099c9 	.word	0x080099c9
 8009c74:	0800ad46 	.word	0x0800ad46

08009c78 <_sungetc_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	1c4b      	adds	r3, r1, #1
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	d103      	bne.n	8009c88 <_sungetc_r+0x10>
 8009c80:	f04f 35ff 	mov.w	r5, #4294967295
 8009c84:	4628      	mov	r0, r5
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	8993      	ldrh	r3, [r2, #12]
 8009c8a:	f023 0320 	bic.w	r3, r3, #32
 8009c8e:	8193      	strh	r3, [r2, #12]
 8009c90:	6853      	ldr	r3, [r2, #4]
 8009c92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009c94:	b2cd      	uxtb	r5, r1
 8009c96:	b18a      	cbz	r2, 8009cbc <_sungetc_r+0x44>
 8009c98:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	dd08      	ble.n	8009cb0 <_sungetc_r+0x38>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	1e5a      	subs	r2, r3, #1
 8009ca2:	6022      	str	r2, [r4, #0]
 8009ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	3301      	adds	r3, #1
 8009cac:	6063      	str	r3, [r4, #4]
 8009cae:	e7e9      	b.n	8009c84 <_sungetc_r+0xc>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	f000 fcc2 	bl	800a63a <__submore>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0f1      	beq.n	8009c9e <_sungetc_r+0x26>
 8009cba:	e7e1      	b.n	8009c80 <_sungetc_r+0x8>
 8009cbc:	6921      	ldr	r1, [r4, #16]
 8009cbe:	6822      	ldr	r2, [r4, #0]
 8009cc0:	b141      	cbz	r1, 8009cd4 <_sungetc_r+0x5c>
 8009cc2:	4291      	cmp	r1, r2
 8009cc4:	d206      	bcs.n	8009cd4 <_sungetc_r+0x5c>
 8009cc6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009cca:	42a9      	cmp	r1, r5
 8009ccc:	d102      	bne.n	8009cd4 <_sungetc_r+0x5c>
 8009cce:	3a01      	subs	r2, #1
 8009cd0:	6022      	str	r2, [r4, #0]
 8009cd2:	e7ea      	b.n	8009caa <_sungetc_r+0x32>
 8009cd4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009cd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cde:	2303      	movs	r3, #3
 8009ce0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	2301      	movs	r3, #1
 8009cec:	e7de      	b.n	8009cac <_sungetc_r+0x34>

08009cee <__ssrefill_r>:
 8009cee:	b510      	push	{r4, lr}
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009cf4:	b169      	cbz	r1, 8009d12 <__ssrefill_r+0x24>
 8009cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	d001      	beq.n	8009d02 <__ssrefill_r+0x14>
 8009cfe:	f7ff fd6b 	bl	80097d8 <_free_r>
 8009d02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d04:	6063      	str	r3, [r4, #4]
 8009d06:	2000      	movs	r0, #0
 8009d08:	6360      	str	r0, [r4, #52]	@ 0x34
 8009d0a:	b113      	cbz	r3, 8009d12 <__ssrefill_r+0x24>
 8009d0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009d0e:	6023      	str	r3, [r4, #0]
 8009d10:	bd10      	pop	{r4, pc}
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	2300      	movs	r3, #0
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0320 	orr.w	r3, r3, #32
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	f04f 30ff 	mov.w	r0, #4294967295
 8009d26:	e7f3      	b.n	8009d10 <__ssrefill_r+0x22>

08009d28 <__ssvfiscanf_r>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009d32:	2100      	movs	r1, #0
 8009d34:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009d38:	49a5      	ldr	r1, [pc, #660]	@ (8009fd0 <__ssvfiscanf_r+0x2a8>)
 8009d3a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009d3c:	f10d 0804 	add.w	r8, sp, #4
 8009d40:	49a4      	ldr	r1, [pc, #656]	@ (8009fd4 <__ssvfiscanf_r+0x2ac>)
 8009d42:	4fa5      	ldr	r7, [pc, #660]	@ (8009fd8 <__ssvfiscanf_r+0x2b0>)
 8009d44:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009d48:	4606      	mov	r6, r0
 8009d4a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	7813      	ldrb	r3, [r2, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 8158 	beq.w	800a006 <__ssvfiscanf_r+0x2de>
 8009d56:	5cf9      	ldrb	r1, [r7, r3]
 8009d58:	f011 0108 	ands.w	r1, r1, #8
 8009d5c:	f102 0501 	add.w	r5, r2, #1
 8009d60:	d019      	beq.n	8009d96 <__ssvfiscanf_r+0x6e>
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd0f      	ble.n	8009d88 <__ssvfiscanf_r+0x60>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	781a      	ldrb	r2, [r3, #0]
 8009d6c:	5cba      	ldrb	r2, [r7, r2]
 8009d6e:	0712      	lsls	r2, r2, #28
 8009d70:	d401      	bmi.n	8009d76 <__ssvfiscanf_r+0x4e>
 8009d72:	462a      	mov	r2, r5
 8009d74:	e7eb      	b.n	8009d4e <__ssvfiscanf_r+0x26>
 8009d76:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009d78:	3201      	adds	r2, #1
 8009d7a:	9245      	str	r2, [sp, #276]	@ 0x114
 8009d7c:	6862      	ldr	r2, [r4, #4]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	3a01      	subs	r2, #1
 8009d82:	6062      	str	r2, [r4, #4]
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	e7ec      	b.n	8009d62 <__ssvfiscanf_r+0x3a>
 8009d88:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	4798      	blx	r3
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d0e9      	beq.n	8009d68 <__ssvfiscanf_r+0x40>
 8009d94:	e7ed      	b.n	8009d72 <__ssvfiscanf_r+0x4a>
 8009d96:	2b25      	cmp	r3, #37	@ 0x25
 8009d98:	d012      	beq.n	8009dc0 <__ssvfiscanf_r+0x98>
 8009d9a:	4699      	mov	r9, r3
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f340 8093 	ble.w	8009eca <__ssvfiscanf_r+0x1a2>
 8009da4:	6822      	ldr	r2, [r4, #0]
 8009da6:	7813      	ldrb	r3, [r2, #0]
 8009da8:	454b      	cmp	r3, r9
 8009daa:	f040 812c 	bne.w	800a006 <__ssvfiscanf_r+0x2de>
 8009dae:	6863      	ldr	r3, [r4, #4]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	6063      	str	r3, [r4, #4]
 8009db4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009db6:	3201      	adds	r2, #1
 8009db8:	3301      	adds	r3, #1
 8009dba:	6022      	str	r2, [r4, #0]
 8009dbc:	9345      	str	r3, [sp, #276]	@ 0x114
 8009dbe:	e7d8      	b.n	8009d72 <__ssvfiscanf_r+0x4a>
 8009dc0:	9141      	str	r1, [sp, #260]	@ 0x104
 8009dc2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009dc4:	7853      	ldrb	r3, [r2, #1]
 8009dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dc8:	bf02      	ittt	eq
 8009dca:	2310      	moveq	r3, #16
 8009dcc:	1c95      	addeq	r5, r2, #2
 8009dce:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	46a9      	mov	r9, r5
 8009dd4:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009dd8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009ddc:	2b09      	cmp	r3, #9
 8009dde:	d91e      	bls.n	8009e1e <__ssvfiscanf_r+0xf6>
 8009de0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009fdc <__ssvfiscanf_r+0x2b4>
 8009de4:	2203      	movs	r2, #3
 8009de6:	4650      	mov	r0, sl
 8009de8:	f7f6 f9fa 	bl	80001e0 <memchr>
 8009dec:	b138      	cbz	r0, 8009dfe <__ssvfiscanf_r+0xd6>
 8009dee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009df0:	eba0 000a 	sub.w	r0, r0, sl
 8009df4:	2301      	movs	r3, #1
 8009df6:	4083      	lsls	r3, r0
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	9341      	str	r3, [sp, #260]	@ 0x104
 8009dfc:	464d      	mov	r5, r9
 8009dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e02:	2b78      	cmp	r3, #120	@ 0x78
 8009e04:	d806      	bhi.n	8009e14 <__ssvfiscanf_r+0xec>
 8009e06:	2b57      	cmp	r3, #87	@ 0x57
 8009e08:	d810      	bhi.n	8009e2c <__ssvfiscanf_r+0x104>
 8009e0a:	2b25      	cmp	r3, #37	@ 0x25
 8009e0c:	d0c5      	beq.n	8009d9a <__ssvfiscanf_r+0x72>
 8009e0e:	d857      	bhi.n	8009ec0 <__ssvfiscanf_r+0x198>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d065      	beq.n	8009ee0 <__ssvfiscanf_r+0x1b8>
 8009e14:	2303      	movs	r3, #3
 8009e16:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009e18:	230a      	movs	r3, #10
 8009e1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8009e1c:	e078      	b.n	8009f10 <__ssvfiscanf_r+0x1e8>
 8009e1e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009e20:	fb02 1103 	mla	r1, r2, r3, r1
 8009e24:	3930      	subs	r1, #48	@ 0x30
 8009e26:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009e28:	464d      	mov	r5, r9
 8009e2a:	e7d2      	b.n	8009dd2 <__ssvfiscanf_r+0xaa>
 8009e2c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009e30:	2a20      	cmp	r2, #32
 8009e32:	d8ef      	bhi.n	8009e14 <__ssvfiscanf_r+0xec>
 8009e34:	a101      	add	r1, pc, #4	@ (adr r1, 8009e3c <__ssvfiscanf_r+0x114>)
 8009e36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009eef 	.word	0x08009eef
 8009e40:	08009e15 	.word	0x08009e15
 8009e44:	08009e15 	.word	0x08009e15
 8009e48:	08009f49 	.word	0x08009f49
 8009e4c:	08009e15 	.word	0x08009e15
 8009e50:	08009e15 	.word	0x08009e15
 8009e54:	08009e15 	.word	0x08009e15
 8009e58:	08009e15 	.word	0x08009e15
 8009e5c:	08009e15 	.word	0x08009e15
 8009e60:	08009e15 	.word	0x08009e15
 8009e64:	08009e15 	.word	0x08009e15
 8009e68:	08009f5f 	.word	0x08009f5f
 8009e6c:	08009f45 	.word	0x08009f45
 8009e70:	08009ec7 	.word	0x08009ec7
 8009e74:	08009ec7 	.word	0x08009ec7
 8009e78:	08009ec7 	.word	0x08009ec7
 8009e7c:	08009e15 	.word	0x08009e15
 8009e80:	08009f01 	.word	0x08009f01
 8009e84:	08009e15 	.word	0x08009e15
 8009e88:	08009e15 	.word	0x08009e15
 8009e8c:	08009e15 	.word	0x08009e15
 8009e90:	08009e15 	.word	0x08009e15
 8009e94:	08009f6f 	.word	0x08009f6f
 8009e98:	08009f09 	.word	0x08009f09
 8009e9c:	08009ee7 	.word	0x08009ee7
 8009ea0:	08009e15 	.word	0x08009e15
 8009ea4:	08009e15 	.word	0x08009e15
 8009ea8:	08009f6b 	.word	0x08009f6b
 8009eac:	08009e15 	.word	0x08009e15
 8009eb0:	08009f45 	.word	0x08009f45
 8009eb4:	08009e15 	.word	0x08009e15
 8009eb8:	08009e15 	.word	0x08009e15
 8009ebc:	08009eef 	.word	0x08009eef
 8009ec0:	3b45      	subs	r3, #69	@ 0x45
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d8a6      	bhi.n	8009e14 <__ssvfiscanf_r+0xec>
 8009ec6:	2305      	movs	r3, #5
 8009ec8:	e021      	b.n	8009f0e <__ssvfiscanf_r+0x1e6>
 8009eca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009ecc:	4621      	mov	r1, r4
 8009ece:	4630      	mov	r0, r6
 8009ed0:	4798      	blx	r3
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f43f af66 	beq.w	8009da4 <__ssvfiscanf_r+0x7c>
 8009ed8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f040 808b 	bne.w	8009ff6 <__ssvfiscanf_r+0x2ce>
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	e08b      	b.n	8009ffe <__ssvfiscanf_r+0x2d6>
 8009ee6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ee8:	f042 0220 	orr.w	r2, r2, #32
 8009eec:	9241      	str	r2, [sp, #260]	@ 0x104
 8009eee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ef4:	9241      	str	r2, [sp, #260]	@ 0x104
 8009ef6:	2210      	movs	r2, #16
 8009ef8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009efa:	9242      	str	r2, [sp, #264]	@ 0x108
 8009efc:	d902      	bls.n	8009f04 <__ssvfiscanf_r+0x1dc>
 8009efe:	e005      	b.n	8009f0c <__ssvfiscanf_r+0x1e4>
 8009f00:	2300      	movs	r3, #0
 8009f02:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f04:	2303      	movs	r3, #3
 8009f06:	e002      	b.n	8009f0e <__ssvfiscanf_r+0x1e6>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f0c:	2304      	movs	r3, #4
 8009f0e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009f10:	6863      	ldr	r3, [r4, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dd39      	ble.n	8009f8a <__ssvfiscanf_r+0x262>
 8009f16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f18:	0659      	lsls	r1, r3, #25
 8009f1a:	d404      	bmi.n	8009f26 <__ssvfiscanf_r+0x1fe>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	781a      	ldrb	r2, [r3, #0]
 8009f20:	5cba      	ldrb	r2, [r7, r2]
 8009f22:	0712      	lsls	r2, r2, #28
 8009f24:	d438      	bmi.n	8009f98 <__ssvfiscanf_r+0x270>
 8009f26:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	dc47      	bgt.n	8009fbc <__ssvfiscanf_r+0x294>
 8009f2c:	466b      	mov	r3, sp
 8009f2e:	4622      	mov	r2, r4
 8009f30:	a941      	add	r1, sp, #260	@ 0x104
 8009f32:	4630      	mov	r0, r6
 8009f34:	f000 f9fa 	bl	800a32c <_scanf_chars>
 8009f38:	2801      	cmp	r0, #1
 8009f3a:	d064      	beq.n	800a006 <__ssvfiscanf_r+0x2de>
 8009f3c:	2802      	cmp	r0, #2
 8009f3e:	f47f af18 	bne.w	8009d72 <__ssvfiscanf_r+0x4a>
 8009f42:	e7c9      	b.n	8009ed8 <__ssvfiscanf_r+0x1b0>
 8009f44:	220a      	movs	r2, #10
 8009f46:	e7d7      	b.n	8009ef8 <__ssvfiscanf_r+0x1d0>
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	f000 fb3c 	bl	800a5c8 <__sccl>
 8009f50:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f56:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f58:	4605      	mov	r5, r0
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e7d7      	b.n	8009f0e <__ssvfiscanf_r+0x1e6>
 8009f5e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f64:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f66:	2300      	movs	r3, #0
 8009f68:	e7d1      	b.n	8009f0e <__ssvfiscanf_r+0x1e6>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e7cf      	b.n	8009f0e <__ssvfiscanf_r+0x1e6>
 8009f6e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009f70:	06c3      	lsls	r3, r0, #27
 8009f72:	f53f aefe 	bmi.w	8009d72 <__ssvfiscanf_r+0x4a>
 8009f76:	9b00      	ldr	r3, [sp, #0]
 8009f78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f7a:	1d19      	adds	r1, r3, #4
 8009f7c:	9100      	str	r1, [sp, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	07c0      	lsls	r0, r0, #31
 8009f82:	bf4c      	ite	mi
 8009f84:	801a      	strhmi	r2, [r3, #0]
 8009f86:	601a      	strpl	r2, [r3, #0]
 8009f88:	e6f3      	b.n	8009d72 <__ssvfiscanf_r+0x4a>
 8009f8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4798      	blx	r3
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d0bf      	beq.n	8009f16 <__ssvfiscanf_r+0x1ee>
 8009f96:	e79f      	b.n	8009ed8 <__ssvfiscanf_r+0x1b0>
 8009f98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f9a:	3201      	adds	r2, #1
 8009f9c:	9245      	str	r2, [sp, #276]	@ 0x114
 8009f9e:	6862      	ldr	r2, [r4, #4]
 8009fa0:	3a01      	subs	r2, #1
 8009fa2:	2a00      	cmp	r2, #0
 8009fa4:	6062      	str	r2, [r4, #4]
 8009fa6:	dd02      	ble.n	8009fae <__ssvfiscanf_r+0x286>
 8009fa8:	3301      	adds	r3, #1
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	e7b6      	b.n	8009f1c <__ssvfiscanf_r+0x1f4>
 8009fae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4798      	blx	r3
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0b0      	beq.n	8009f1c <__ssvfiscanf_r+0x1f4>
 8009fba:	e78d      	b.n	8009ed8 <__ssvfiscanf_r+0x1b0>
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	dc0f      	bgt.n	8009fe0 <__ssvfiscanf_r+0x2b8>
 8009fc0:	466b      	mov	r3, sp
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	a941      	add	r1, sp, #260	@ 0x104
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f000 fa0a 	bl	800a3e0 <_scanf_i>
 8009fcc:	e7b4      	b.n	8009f38 <__ssvfiscanf_r+0x210>
 8009fce:	bf00      	nop
 8009fd0:	08009c79 	.word	0x08009c79
 8009fd4:	08009cef 	.word	0x08009cef
 8009fd8:	0800ad8f 	.word	0x0800ad8f
 8009fdc:	0800ad46 	.word	0x0800ad46
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800a00c <__ssvfiscanf_r+0x2e4>)
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f43f aec5 	beq.w	8009d72 <__ssvfiscanf_r+0x4a>
 8009fe8:	466b      	mov	r3, sp
 8009fea:	4622      	mov	r2, r4
 8009fec:	a941      	add	r1, sp, #260	@ 0x104
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f3af 8000 	nop.w
 8009ff4:	e7a0      	b.n	8009f38 <__ssvfiscanf_r+0x210>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	065b      	lsls	r3, r3, #25
 8009ffa:	f53f af71 	bmi.w	8009ee0 <__ssvfiscanf_r+0x1b8>
 8009ffe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a006:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a008:	e7f9      	b.n	8009ffe <__ssvfiscanf_r+0x2d6>
 800a00a:	bf00      	nop
 800a00c:	00000000 	.word	0x00000000

0800a010 <_printf_common>:
 800a010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a014:	4616      	mov	r6, r2
 800a016:	4698      	mov	r8, r3
 800a018:	688a      	ldr	r2, [r1, #8]
 800a01a:	690b      	ldr	r3, [r1, #16]
 800a01c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a020:	4293      	cmp	r3, r2
 800a022:	bfb8      	it	lt
 800a024:	4613      	movlt	r3, r2
 800a026:	6033      	str	r3, [r6, #0]
 800a028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a02c:	4607      	mov	r7, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	b10a      	cbz	r2, 800a036 <_printf_common+0x26>
 800a032:	3301      	adds	r3, #1
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	0699      	lsls	r1, r3, #26
 800a03a:	bf42      	ittt	mi
 800a03c:	6833      	ldrmi	r3, [r6, #0]
 800a03e:	3302      	addmi	r3, #2
 800a040:	6033      	strmi	r3, [r6, #0]
 800a042:	6825      	ldr	r5, [r4, #0]
 800a044:	f015 0506 	ands.w	r5, r5, #6
 800a048:	d106      	bne.n	800a058 <_printf_common+0x48>
 800a04a:	f104 0a19 	add.w	sl, r4, #25
 800a04e:	68e3      	ldr	r3, [r4, #12]
 800a050:	6832      	ldr	r2, [r6, #0]
 800a052:	1a9b      	subs	r3, r3, r2
 800a054:	42ab      	cmp	r3, r5
 800a056:	dc26      	bgt.n	800a0a6 <_printf_common+0x96>
 800a058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a05c:	6822      	ldr	r2, [r4, #0]
 800a05e:	3b00      	subs	r3, #0
 800a060:	bf18      	it	ne
 800a062:	2301      	movne	r3, #1
 800a064:	0692      	lsls	r2, r2, #26
 800a066:	d42b      	bmi.n	800a0c0 <_printf_common+0xb0>
 800a068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a06c:	4641      	mov	r1, r8
 800a06e:	4638      	mov	r0, r7
 800a070:	47c8      	blx	r9
 800a072:	3001      	adds	r0, #1
 800a074:	d01e      	beq.n	800a0b4 <_printf_common+0xa4>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	6922      	ldr	r2, [r4, #16]
 800a07a:	f003 0306 	and.w	r3, r3, #6
 800a07e:	2b04      	cmp	r3, #4
 800a080:	bf02      	ittt	eq
 800a082:	68e5      	ldreq	r5, [r4, #12]
 800a084:	6833      	ldreq	r3, [r6, #0]
 800a086:	1aed      	subeq	r5, r5, r3
 800a088:	68a3      	ldr	r3, [r4, #8]
 800a08a:	bf0c      	ite	eq
 800a08c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a090:	2500      	movne	r5, #0
 800a092:	4293      	cmp	r3, r2
 800a094:	bfc4      	itt	gt
 800a096:	1a9b      	subgt	r3, r3, r2
 800a098:	18ed      	addgt	r5, r5, r3
 800a09a:	2600      	movs	r6, #0
 800a09c:	341a      	adds	r4, #26
 800a09e:	42b5      	cmp	r5, r6
 800a0a0:	d11a      	bne.n	800a0d8 <_printf_common+0xc8>
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	e008      	b.n	800a0b8 <_printf_common+0xa8>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4641      	mov	r1, r8
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	47c8      	blx	r9
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	d103      	bne.n	800a0bc <_printf_common+0xac>
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0bc:	3501      	adds	r5, #1
 800a0be:	e7c6      	b.n	800a04e <_printf_common+0x3e>
 800a0c0:	18e1      	adds	r1, r4, r3
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	2030      	movs	r0, #48	@ 0x30
 800a0c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0ca:	4422      	add	r2, r4
 800a0cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	e7c7      	b.n	800a068 <_printf_common+0x58>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	4622      	mov	r2, r4
 800a0dc:	4641      	mov	r1, r8
 800a0de:	4638      	mov	r0, r7
 800a0e0:	47c8      	blx	r9
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	d0e6      	beq.n	800a0b4 <_printf_common+0xa4>
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7d9      	b.n	800a09e <_printf_common+0x8e>
	...

0800a0ec <_printf_i>:
 800a0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	7e0f      	ldrb	r7, [r1, #24]
 800a0f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0f4:	2f78      	cmp	r7, #120	@ 0x78
 800a0f6:	4691      	mov	r9, r2
 800a0f8:	4680      	mov	r8, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	469a      	mov	sl, r3
 800a0fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a102:	d807      	bhi.n	800a114 <_printf_i+0x28>
 800a104:	2f62      	cmp	r7, #98	@ 0x62
 800a106:	d80a      	bhi.n	800a11e <_printf_i+0x32>
 800a108:	2f00      	cmp	r7, #0
 800a10a:	f000 80d2 	beq.w	800a2b2 <_printf_i+0x1c6>
 800a10e:	2f58      	cmp	r7, #88	@ 0x58
 800a110:	f000 80b9 	beq.w	800a286 <_printf_i+0x19a>
 800a114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a11c:	e03a      	b.n	800a194 <_printf_i+0xa8>
 800a11e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a122:	2b15      	cmp	r3, #21
 800a124:	d8f6      	bhi.n	800a114 <_printf_i+0x28>
 800a126:	a101      	add	r1, pc, #4	@ (adr r1, 800a12c <_printf_i+0x40>)
 800a128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a12c:	0800a185 	.word	0x0800a185
 800a130:	0800a199 	.word	0x0800a199
 800a134:	0800a115 	.word	0x0800a115
 800a138:	0800a115 	.word	0x0800a115
 800a13c:	0800a115 	.word	0x0800a115
 800a140:	0800a115 	.word	0x0800a115
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a115 	.word	0x0800a115
 800a14c:	0800a115 	.word	0x0800a115
 800a150:	0800a115 	.word	0x0800a115
 800a154:	0800a115 	.word	0x0800a115
 800a158:	0800a299 	.word	0x0800a299
 800a15c:	0800a1c3 	.word	0x0800a1c3
 800a160:	0800a253 	.word	0x0800a253
 800a164:	0800a115 	.word	0x0800a115
 800a168:	0800a115 	.word	0x0800a115
 800a16c:	0800a2bb 	.word	0x0800a2bb
 800a170:	0800a115 	.word	0x0800a115
 800a174:	0800a1c3 	.word	0x0800a1c3
 800a178:	0800a115 	.word	0x0800a115
 800a17c:	0800a115 	.word	0x0800a115
 800a180:	0800a25b 	.word	0x0800a25b
 800a184:	6833      	ldr	r3, [r6, #0]
 800a186:	1d1a      	adds	r2, r3, #4
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6032      	str	r2, [r6, #0]
 800a18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a194:	2301      	movs	r3, #1
 800a196:	e09d      	b.n	800a2d4 <_printf_i+0x1e8>
 800a198:	6833      	ldr	r3, [r6, #0]
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	1d19      	adds	r1, r3, #4
 800a19e:	6031      	str	r1, [r6, #0]
 800a1a0:	0606      	lsls	r6, r0, #24
 800a1a2:	d501      	bpl.n	800a1a8 <_printf_i+0xbc>
 800a1a4:	681d      	ldr	r5, [r3, #0]
 800a1a6:	e003      	b.n	800a1b0 <_printf_i+0xc4>
 800a1a8:	0645      	lsls	r5, r0, #25
 800a1aa:	d5fb      	bpl.n	800a1a4 <_printf_i+0xb8>
 800a1ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1b0:	2d00      	cmp	r5, #0
 800a1b2:	da03      	bge.n	800a1bc <_printf_i+0xd0>
 800a1b4:	232d      	movs	r3, #45	@ 0x2d
 800a1b6:	426d      	negs	r5, r5
 800a1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1bc:	4859      	ldr	r0, [pc, #356]	@ (800a324 <_printf_i+0x238>)
 800a1be:	230a      	movs	r3, #10
 800a1c0:	e011      	b.n	800a1e6 <_printf_i+0xfa>
 800a1c2:	6821      	ldr	r1, [r4, #0]
 800a1c4:	6833      	ldr	r3, [r6, #0]
 800a1c6:	0608      	lsls	r0, r1, #24
 800a1c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1cc:	d402      	bmi.n	800a1d4 <_printf_i+0xe8>
 800a1ce:	0649      	lsls	r1, r1, #25
 800a1d0:	bf48      	it	mi
 800a1d2:	b2ad      	uxthmi	r5, r5
 800a1d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1d6:	4853      	ldr	r0, [pc, #332]	@ (800a324 <_printf_i+0x238>)
 800a1d8:	6033      	str	r3, [r6, #0]
 800a1da:	bf14      	ite	ne
 800a1dc:	230a      	movne	r3, #10
 800a1de:	2308      	moveq	r3, #8
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1e6:	6866      	ldr	r6, [r4, #4]
 800a1e8:	60a6      	str	r6, [r4, #8]
 800a1ea:	2e00      	cmp	r6, #0
 800a1ec:	bfa2      	ittt	ge
 800a1ee:	6821      	ldrge	r1, [r4, #0]
 800a1f0:	f021 0104 	bicge.w	r1, r1, #4
 800a1f4:	6021      	strge	r1, [r4, #0]
 800a1f6:	b90d      	cbnz	r5, 800a1fc <_printf_i+0x110>
 800a1f8:	2e00      	cmp	r6, #0
 800a1fa:	d04b      	beq.n	800a294 <_printf_i+0x1a8>
 800a1fc:	4616      	mov	r6, r2
 800a1fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800a202:	fb03 5711 	mls	r7, r3, r1, r5
 800a206:	5dc7      	ldrb	r7, [r0, r7]
 800a208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a20c:	462f      	mov	r7, r5
 800a20e:	42bb      	cmp	r3, r7
 800a210:	460d      	mov	r5, r1
 800a212:	d9f4      	bls.n	800a1fe <_printf_i+0x112>
 800a214:	2b08      	cmp	r3, #8
 800a216:	d10b      	bne.n	800a230 <_printf_i+0x144>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	07df      	lsls	r7, r3, #31
 800a21c:	d508      	bpl.n	800a230 <_printf_i+0x144>
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	6861      	ldr	r1, [r4, #4]
 800a222:	4299      	cmp	r1, r3
 800a224:	bfde      	ittt	le
 800a226:	2330      	movle	r3, #48	@ 0x30
 800a228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a22c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a230:	1b92      	subs	r2, r2, r6
 800a232:	6122      	str	r2, [r4, #16]
 800a234:	f8cd a000 	str.w	sl, [sp]
 800a238:	464b      	mov	r3, r9
 800a23a:	aa03      	add	r2, sp, #12
 800a23c:	4621      	mov	r1, r4
 800a23e:	4640      	mov	r0, r8
 800a240:	f7ff fee6 	bl	800a010 <_printf_common>
 800a244:	3001      	adds	r0, #1
 800a246:	d14a      	bne.n	800a2de <_printf_i+0x1f2>
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	b004      	add	sp, #16
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	f043 0320 	orr.w	r3, r3, #32
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	4833      	ldr	r0, [pc, #204]	@ (800a328 <_printf_i+0x23c>)
 800a25c:	2778      	movs	r7, #120	@ 0x78
 800a25e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	6831      	ldr	r1, [r6, #0]
 800a266:	061f      	lsls	r7, r3, #24
 800a268:	f851 5b04 	ldr.w	r5, [r1], #4
 800a26c:	d402      	bmi.n	800a274 <_printf_i+0x188>
 800a26e:	065f      	lsls	r7, r3, #25
 800a270:	bf48      	it	mi
 800a272:	b2ad      	uxthmi	r5, r5
 800a274:	6031      	str	r1, [r6, #0]
 800a276:	07d9      	lsls	r1, r3, #31
 800a278:	bf44      	itt	mi
 800a27a:	f043 0320 	orrmi.w	r3, r3, #32
 800a27e:	6023      	strmi	r3, [r4, #0]
 800a280:	b11d      	cbz	r5, 800a28a <_printf_i+0x19e>
 800a282:	2310      	movs	r3, #16
 800a284:	e7ac      	b.n	800a1e0 <_printf_i+0xf4>
 800a286:	4827      	ldr	r0, [pc, #156]	@ (800a324 <_printf_i+0x238>)
 800a288:	e7e9      	b.n	800a25e <_printf_i+0x172>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	f023 0320 	bic.w	r3, r3, #32
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	e7f6      	b.n	800a282 <_printf_i+0x196>
 800a294:	4616      	mov	r6, r2
 800a296:	e7bd      	b.n	800a214 <_printf_i+0x128>
 800a298:	6833      	ldr	r3, [r6, #0]
 800a29a:	6825      	ldr	r5, [r4, #0]
 800a29c:	6961      	ldr	r1, [r4, #20]
 800a29e:	1d18      	adds	r0, r3, #4
 800a2a0:	6030      	str	r0, [r6, #0]
 800a2a2:	062e      	lsls	r6, r5, #24
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	d501      	bpl.n	800a2ac <_printf_i+0x1c0>
 800a2a8:	6019      	str	r1, [r3, #0]
 800a2aa:	e002      	b.n	800a2b2 <_printf_i+0x1c6>
 800a2ac:	0668      	lsls	r0, r5, #25
 800a2ae:	d5fb      	bpl.n	800a2a8 <_printf_i+0x1bc>
 800a2b0:	8019      	strh	r1, [r3, #0]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	6123      	str	r3, [r4, #16]
 800a2b6:	4616      	mov	r6, r2
 800a2b8:	e7bc      	b.n	800a234 <_printf_i+0x148>
 800a2ba:	6833      	ldr	r3, [r6, #0]
 800a2bc:	1d1a      	adds	r2, r3, #4
 800a2be:	6032      	str	r2, [r6, #0]
 800a2c0:	681e      	ldr	r6, [r3, #0]
 800a2c2:	6862      	ldr	r2, [r4, #4]
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f7f5 ff8a 	bl	80001e0 <memchr>
 800a2cc:	b108      	cbz	r0, 800a2d2 <_printf_i+0x1e6>
 800a2ce:	1b80      	subs	r0, r0, r6
 800a2d0:	6060      	str	r0, [r4, #4]
 800a2d2:	6863      	ldr	r3, [r4, #4]
 800a2d4:	6123      	str	r3, [r4, #16]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2dc:	e7aa      	b.n	800a234 <_printf_i+0x148>
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	47d0      	blx	sl
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d0ad      	beq.n	800a248 <_printf_i+0x15c>
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	079b      	lsls	r3, r3, #30
 800a2f0:	d413      	bmi.n	800a31a <_printf_i+0x22e>
 800a2f2:	68e0      	ldr	r0, [r4, #12]
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	4298      	cmp	r0, r3
 800a2f8:	bfb8      	it	lt
 800a2fa:	4618      	movlt	r0, r3
 800a2fc:	e7a6      	b.n	800a24c <_printf_i+0x160>
 800a2fe:	2301      	movs	r3, #1
 800a300:	4632      	mov	r2, r6
 800a302:	4649      	mov	r1, r9
 800a304:	4640      	mov	r0, r8
 800a306:	47d0      	blx	sl
 800a308:	3001      	adds	r0, #1
 800a30a:	d09d      	beq.n	800a248 <_printf_i+0x15c>
 800a30c:	3501      	adds	r5, #1
 800a30e:	68e3      	ldr	r3, [r4, #12]
 800a310:	9903      	ldr	r1, [sp, #12]
 800a312:	1a5b      	subs	r3, r3, r1
 800a314:	42ab      	cmp	r3, r5
 800a316:	dcf2      	bgt.n	800a2fe <_printf_i+0x212>
 800a318:	e7eb      	b.n	800a2f2 <_printf_i+0x206>
 800a31a:	2500      	movs	r5, #0
 800a31c:	f104 0619 	add.w	r6, r4, #25
 800a320:	e7f5      	b.n	800a30e <_printf_i+0x222>
 800a322:	bf00      	nop
 800a324:	0800ad51 	.word	0x0800ad51
 800a328:	0800ad62 	.word	0x0800ad62

0800a32c <_scanf_chars>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	4615      	mov	r5, r2
 800a332:	688a      	ldr	r2, [r1, #8]
 800a334:	4680      	mov	r8, r0
 800a336:	460c      	mov	r4, r1
 800a338:	b932      	cbnz	r2, 800a348 <_scanf_chars+0x1c>
 800a33a:	698a      	ldr	r2, [r1, #24]
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	bf14      	ite	ne
 800a340:	f04f 32ff 	movne.w	r2, #4294967295
 800a344:	2201      	moveq	r2, #1
 800a346:	608a      	str	r2, [r1, #8]
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a3dc <_scanf_chars+0xb0>
 800a34e:	06d1      	lsls	r1, r2, #27
 800a350:	bf5f      	itttt	pl
 800a352:	681a      	ldrpl	r2, [r3, #0]
 800a354:	1d11      	addpl	r1, r2, #4
 800a356:	6019      	strpl	r1, [r3, #0]
 800a358:	6816      	ldrpl	r6, [r2, #0]
 800a35a:	2700      	movs	r7, #0
 800a35c:	69a0      	ldr	r0, [r4, #24]
 800a35e:	b188      	cbz	r0, 800a384 <_scanf_chars+0x58>
 800a360:	2801      	cmp	r0, #1
 800a362:	d107      	bne.n	800a374 <_scanf_chars+0x48>
 800a364:	682b      	ldr	r3, [r5, #0]
 800a366:	781a      	ldrb	r2, [r3, #0]
 800a368:	6963      	ldr	r3, [r4, #20]
 800a36a:	5c9b      	ldrb	r3, [r3, r2]
 800a36c:	b953      	cbnz	r3, 800a384 <_scanf_chars+0x58>
 800a36e:	2f00      	cmp	r7, #0
 800a370:	d031      	beq.n	800a3d6 <_scanf_chars+0xaa>
 800a372:	e022      	b.n	800a3ba <_scanf_chars+0x8e>
 800a374:	2802      	cmp	r0, #2
 800a376:	d120      	bne.n	800a3ba <_scanf_chars+0x8e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a380:	071b      	lsls	r3, r3, #28
 800a382:	d41a      	bmi.n	800a3ba <_scanf_chars+0x8e>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	06da      	lsls	r2, r3, #27
 800a388:	bf5e      	ittt	pl
 800a38a:	682b      	ldrpl	r3, [r5, #0]
 800a38c:	781b      	ldrbpl	r3, [r3, #0]
 800a38e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a392:	682a      	ldr	r2, [r5, #0]
 800a394:	686b      	ldr	r3, [r5, #4]
 800a396:	3201      	adds	r2, #1
 800a398:	602a      	str	r2, [r5, #0]
 800a39a:	68a2      	ldr	r2, [r4, #8]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	3a01      	subs	r2, #1
 800a3a0:	606b      	str	r3, [r5, #4]
 800a3a2:	3701      	adds	r7, #1
 800a3a4:	60a2      	str	r2, [r4, #8]
 800a3a6:	b142      	cbz	r2, 800a3ba <_scanf_chars+0x8e>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dcd7      	bgt.n	800a35c <_scanf_chars+0x30>
 800a3ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	4798      	blx	r3
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d0d0      	beq.n	800a35c <_scanf_chars+0x30>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	f013 0310 	ands.w	r3, r3, #16
 800a3c0:	d105      	bne.n	800a3ce <_scanf_chars+0xa2>
 800a3c2:	68e2      	ldr	r2, [r4, #12]
 800a3c4:	3201      	adds	r2, #1
 800a3c6:	60e2      	str	r2, [r4, #12]
 800a3c8:	69a2      	ldr	r2, [r4, #24]
 800a3ca:	b102      	cbz	r2, 800a3ce <_scanf_chars+0xa2>
 800a3cc:	7033      	strb	r3, [r6, #0]
 800a3ce:	6923      	ldr	r3, [r4, #16]
 800a3d0:	443b      	add	r3, r7
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3da:	bf00      	nop
 800a3dc:	0800ad8f 	.word	0x0800ad8f

0800a3e0 <_scanf_i>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	4698      	mov	r8, r3
 800a3e6:	4b74      	ldr	r3, [pc, #464]	@ (800a5b8 <_scanf_i+0x1d8>)
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	4682      	mov	sl, r0
 800a3ec:	4616      	mov	r6, r2
 800a3ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	ab03      	add	r3, sp, #12
 800a3f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a3fa:	4b70      	ldr	r3, [pc, #448]	@ (800a5bc <_scanf_i+0x1dc>)
 800a3fc:	69a1      	ldr	r1, [r4, #24]
 800a3fe:	4a70      	ldr	r2, [pc, #448]	@ (800a5c0 <_scanf_i+0x1e0>)
 800a400:	2903      	cmp	r1, #3
 800a402:	bf08      	it	eq
 800a404:	461a      	moveq	r2, r3
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	9201      	str	r2, [sp, #4]
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a410:	bf88      	it	hi
 800a412:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a416:	4627      	mov	r7, r4
 800a418:	bf82      	ittt	hi
 800a41a:	eb03 0905 	addhi.w	r9, r3, r5
 800a41e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a422:	60a3      	strhi	r3, [r4, #8]
 800a424:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a428:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a42c:	bf98      	it	ls
 800a42e:	f04f 0900 	movls.w	r9, #0
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	463d      	mov	r5, r7
 800a436:	f04f 0b00 	mov.w	fp, #0
 800a43a:	6831      	ldr	r1, [r6, #0]
 800a43c:	ab03      	add	r3, sp, #12
 800a43e:	7809      	ldrb	r1, [r1, #0]
 800a440:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a444:	2202      	movs	r2, #2
 800a446:	f7f5 fecb 	bl	80001e0 <memchr>
 800a44a:	b328      	cbz	r0, 800a498 <_scanf_i+0xb8>
 800a44c:	f1bb 0f01 	cmp.w	fp, #1
 800a450:	d159      	bne.n	800a506 <_scanf_i+0x126>
 800a452:	6862      	ldr	r2, [r4, #4]
 800a454:	b92a      	cbnz	r2, 800a462 <_scanf_i+0x82>
 800a456:	6822      	ldr	r2, [r4, #0]
 800a458:	2108      	movs	r1, #8
 800a45a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a45e:	6061      	str	r1, [r4, #4]
 800a460:	6022      	str	r2, [r4, #0]
 800a462:	6822      	ldr	r2, [r4, #0]
 800a464:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a468:	6022      	str	r2, [r4, #0]
 800a46a:	68a2      	ldr	r2, [r4, #8]
 800a46c:	1e51      	subs	r1, r2, #1
 800a46e:	60a1      	str	r1, [r4, #8]
 800a470:	b192      	cbz	r2, 800a498 <_scanf_i+0xb8>
 800a472:	6832      	ldr	r2, [r6, #0]
 800a474:	1c51      	adds	r1, r2, #1
 800a476:	6031      	str	r1, [r6, #0]
 800a478:	7812      	ldrb	r2, [r2, #0]
 800a47a:	f805 2b01 	strb.w	r2, [r5], #1
 800a47e:	6872      	ldr	r2, [r6, #4]
 800a480:	3a01      	subs	r2, #1
 800a482:	2a00      	cmp	r2, #0
 800a484:	6072      	str	r2, [r6, #4]
 800a486:	dc07      	bgt.n	800a498 <_scanf_i+0xb8>
 800a488:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a48c:	4631      	mov	r1, r6
 800a48e:	4650      	mov	r0, sl
 800a490:	4790      	blx	r2
 800a492:	2800      	cmp	r0, #0
 800a494:	f040 8085 	bne.w	800a5a2 <_scanf_i+0x1c2>
 800a498:	f10b 0b01 	add.w	fp, fp, #1
 800a49c:	f1bb 0f03 	cmp.w	fp, #3
 800a4a0:	d1cb      	bne.n	800a43a <_scanf_i+0x5a>
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	b90b      	cbnz	r3, 800a4aa <_scanf_i+0xca>
 800a4a6:	230a      	movs	r3, #10
 800a4a8:	6063      	str	r3, [r4, #4]
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	4945      	ldr	r1, [pc, #276]	@ (800a5c4 <_scanf_i+0x1e4>)
 800a4ae:	6960      	ldr	r0, [r4, #20]
 800a4b0:	1ac9      	subs	r1, r1, r3
 800a4b2:	f000 f889 	bl	800a5c8 <__sccl>
 800a4b6:	f04f 0b00 	mov.w	fp, #0
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d03d      	beq.n	800a53e <_scanf_i+0x15e>
 800a4c2:	6831      	ldr	r1, [r6, #0]
 800a4c4:	6960      	ldr	r0, [r4, #20]
 800a4c6:	f891 c000 	ldrb.w	ip, [r1]
 800a4ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d035      	beq.n	800a53e <_scanf_i+0x15e>
 800a4d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a4d6:	d124      	bne.n	800a522 <_scanf_i+0x142>
 800a4d8:	0510      	lsls	r0, r2, #20
 800a4da:	d522      	bpl.n	800a522 <_scanf_i+0x142>
 800a4dc:	f10b 0b01 	add.w	fp, fp, #1
 800a4e0:	f1b9 0f00 	cmp.w	r9, #0
 800a4e4:	d003      	beq.n	800a4ee <_scanf_i+0x10e>
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4ec:	60a3      	str	r3, [r4, #8]
 800a4ee:	6873      	ldr	r3, [r6, #4]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	6073      	str	r3, [r6, #4]
 800a4f6:	dd1b      	ble.n	800a530 <_scanf_i+0x150>
 800a4f8:	6833      	ldr	r3, [r6, #0]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	6033      	str	r3, [r6, #0]
 800a4fe:	68a3      	ldr	r3, [r4, #8]
 800a500:	3b01      	subs	r3, #1
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	e7d9      	b.n	800a4ba <_scanf_i+0xda>
 800a506:	f1bb 0f02 	cmp.w	fp, #2
 800a50a:	d1ae      	bne.n	800a46a <_scanf_i+0x8a>
 800a50c:	6822      	ldr	r2, [r4, #0]
 800a50e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a512:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a516:	d1bf      	bne.n	800a498 <_scanf_i+0xb8>
 800a518:	2110      	movs	r1, #16
 800a51a:	6061      	str	r1, [r4, #4]
 800a51c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a520:	e7a2      	b.n	800a468 <_scanf_i+0x88>
 800a522:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a526:	6022      	str	r2, [r4, #0]
 800a528:	780b      	ldrb	r3, [r1, #0]
 800a52a:	f805 3b01 	strb.w	r3, [r5], #1
 800a52e:	e7de      	b.n	800a4ee <_scanf_i+0x10e>
 800a530:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a534:	4631      	mov	r1, r6
 800a536:	4650      	mov	r0, sl
 800a538:	4798      	blx	r3
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d0df      	beq.n	800a4fe <_scanf_i+0x11e>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	05d9      	lsls	r1, r3, #23
 800a542:	d50d      	bpl.n	800a560 <_scanf_i+0x180>
 800a544:	42bd      	cmp	r5, r7
 800a546:	d909      	bls.n	800a55c <_scanf_i+0x17c>
 800a548:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a54c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a550:	4632      	mov	r2, r6
 800a552:	4650      	mov	r0, sl
 800a554:	4798      	blx	r3
 800a556:	f105 39ff 	add.w	r9, r5, #4294967295
 800a55a:	464d      	mov	r5, r9
 800a55c:	42bd      	cmp	r5, r7
 800a55e:	d028      	beq.n	800a5b2 <_scanf_i+0x1d2>
 800a560:	6822      	ldr	r2, [r4, #0]
 800a562:	f012 0210 	ands.w	r2, r2, #16
 800a566:	d113      	bne.n	800a590 <_scanf_i+0x1b0>
 800a568:	702a      	strb	r2, [r5, #0]
 800a56a:	6863      	ldr	r3, [r4, #4]
 800a56c:	9e01      	ldr	r6, [sp, #4]
 800a56e:	4639      	mov	r1, r7
 800a570:	4650      	mov	r0, sl
 800a572:	47b0      	blx	r6
 800a574:	f8d8 3000 	ldr.w	r3, [r8]
 800a578:	6821      	ldr	r1, [r4, #0]
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	f8c8 2000 	str.w	r2, [r8]
 800a580:	f011 0f20 	tst.w	r1, #32
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	d00f      	beq.n	800a5a8 <_scanf_i+0x1c8>
 800a588:	6018      	str	r0, [r3, #0]
 800a58a:	68e3      	ldr	r3, [r4, #12]
 800a58c:	3301      	adds	r3, #1
 800a58e:	60e3      	str	r3, [r4, #12]
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	1bed      	subs	r5, r5, r7
 800a594:	445d      	add	r5, fp
 800a596:	442b      	add	r3, r5
 800a598:	6123      	str	r3, [r4, #16]
 800a59a:	2000      	movs	r0, #0
 800a59c:	b007      	add	sp, #28
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	f04f 0b00 	mov.w	fp, #0
 800a5a6:	e7ca      	b.n	800a53e <_scanf_i+0x15e>
 800a5a8:	07ca      	lsls	r2, r1, #31
 800a5aa:	bf4c      	ite	mi
 800a5ac:	8018      	strhmi	r0, [r3, #0]
 800a5ae:	6018      	strpl	r0, [r3, #0]
 800a5b0:	e7eb      	b.n	800a58a <_scanf_i+0x1aa>
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	e7f2      	b.n	800a59c <_scanf_i+0x1bc>
 800a5b6:	bf00      	nop
 800a5b8:	0800ac74 	.word	0x0800ac74
 800a5bc:	0800a855 	.word	0x0800a855
 800a5c0:	0800a935 	.word	0x0800a935
 800a5c4:	0800ad83 	.word	0x0800ad83

0800a5c8 <__sccl>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	780b      	ldrb	r3, [r1, #0]
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	2b5e      	cmp	r3, #94	@ 0x5e
 800a5d0:	bf0b      	itete	eq
 800a5d2:	784b      	ldrbeq	r3, [r1, #1]
 800a5d4:	1c4a      	addne	r2, r1, #1
 800a5d6:	1c8a      	addeq	r2, r1, #2
 800a5d8:	2100      	movne	r1, #0
 800a5da:	bf08      	it	eq
 800a5dc:	2101      	moveq	r1, #1
 800a5de:	3801      	subs	r0, #1
 800a5e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a5e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a5e8:	42a8      	cmp	r0, r5
 800a5ea:	d1fb      	bne.n	800a5e4 <__sccl+0x1c>
 800a5ec:	b90b      	cbnz	r3, 800a5f2 <__sccl+0x2a>
 800a5ee:	1e50      	subs	r0, r2, #1
 800a5f0:	bd70      	pop	{r4, r5, r6, pc}
 800a5f2:	f081 0101 	eor.w	r1, r1, #1
 800a5f6:	54e1      	strb	r1, [r4, r3]
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a600:	2d2d      	cmp	r5, #45	@ 0x2d
 800a602:	d005      	beq.n	800a610 <__sccl+0x48>
 800a604:	2d5d      	cmp	r5, #93	@ 0x5d
 800a606:	d016      	beq.n	800a636 <__sccl+0x6e>
 800a608:	2d00      	cmp	r5, #0
 800a60a:	d0f1      	beq.n	800a5f0 <__sccl+0x28>
 800a60c:	462b      	mov	r3, r5
 800a60e:	e7f2      	b.n	800a5f6 <__sccl+0x2e>
 800a610:	7846      	ldrb	r6, [r0, #1]
 800a612:	2e5d      	cmp	r6, #93	@ 0x5d
 800a614:	d0fa      	beq.n	800a60c <__sccl+0x44>
 800a616:	42b3      	cmp	r3, r6
 800a618:	dcf8      	bgt.n	800a60c <__sccl+0x44>
 800a61a:	3002      	adds	r0, #2
 800a61c:	461a      	mov	r2, r3
 800a61e:	3201      	adds	r2, #1
 800a620:	4296      	cmp	r6, r2
 800a622:	54a1      	strb	r1, [r4, r2]
 800a624:	dcfb      	bgt.n	800a61e <__sccl+0x56>
 800a626:	1af2      	subs	r2, r6, r3
 800a628:	3a01      	subs	r2, #1
 800a62a:	1c5d      	adds	r5, r3, #1
 800a62c:	42b3      	cmp	r3, r6
 800a62e:	bfa8      	it	ge
 800a630:	2200      	movge	r2, #0
 800a632:	18ab      	adds	r3, r5, r2
 800a634:	e7e1      	b.n	800a5fa <__sccl+0x32>
 800a636:	4610      	mov	r0, r2
 800a638:	e7da      	b.n	800a5f0 <__sccl+0x28>

0800a63a <__submore>:
 800a63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63e:	460c      	mov	r4, r1
 800a640:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a646:	4299      	cmp	r1, r3
 800a648:	d11d      	bne.n	800a686 <__submore+0x4c>
 800a64a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a64e:	f7ff f92f 	bl	80098b0 <_malloc_r>
 800a652:	b918      	cbnz	r0, 800a65c <__submore+0x22>
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a660:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a662:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a666:	6360      	str	r0, [r4, #52]	@ 0x34
 800a668:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a66c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a670:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a674:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a678:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a67c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a680:	6020      	str	r0, [r4, #0]
 800a682:	2000      	movs	r0, #0
 800a684:	e7e8      	b.n	800a658 <__submore+0x1e>
 800a686:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a688:	0077      	lsls	r7, r6, #1
 800a68a:	463a      	mov	r2, r7
 800a68c:	f000 f83a 	bl	800a704 <_realloc_r>
 800a690:	4605      	mov	r5, r0
 800a692:	2800      	cmp	r0, #0
 800a694:	d0de      	beq.n	800a654 <__submore+0x1a>
 800a696:	eb00 0806 	add.w	r8, r0, r6
 800a69a:	4601      	mov	r1, r0
 800a69c:	4632      	mov	r2, r6
 800a69e:	4640      	mov	r0, r8
 800a6a0:	f7ff f88c 	bl	80097bc <memcpy>
 800a6a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a6a8:	f8c4 8000 	str.w	r8, [r4]
 800a6ac:	e7e9      	b.n	800a682 <__submore+0x48>

0800a6ae <memmove>:
 800a6ae:	4288      	cmp	r0, r1
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	eb01 0402 	add.w	r4, r1, r2
 800a6b6:	d902      	bls.n	800a6be <memmove+0x10>
 800a6b8:	4284      	cmp	r4, r0
 800a6ba:	4623      	mov	r3, r4
 800a6bc:	d807      	bhi.n	800a6ce <memmove+0x20>
 800a6be:	1e43      	subs	r3, r0, #1
 800a6c0:	42a1      	cmp	r1, r4
 800a6c2:	d008      	beq.n	800a6d6 <memmove+0x28>
 800a6c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6cc:	e7f8      	b.n	800a6c0 <memmove+0x12>
 800a6ce:	4402      	add	r2, r0
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	428a      	cmp	r2, r1
 800a6d4:	d100      	bne.n	800a6d8 <memmove+0x2a>
 800a6d6:	bd10      	pop	{r4, pc}
 800a6d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6e0:	e7f7      	b.n	800a6d2 <memmove+0x24>
	...

0800a6e4 <_sbrk_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d06      	ldr	r5, [pc, #24]	@ (800a700 <_sbrk_r+0x1c>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	f7f7 fc06 	bl	8001f00 <_sbrk>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_sbrk_r+0x1a>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_sbrk_r+0x1a>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	20000950 	.word	0x20000950

0800a704 <_realloc_r>:
 800a704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a708:	4680      	mov	r8, r0
 800a70a:	4615      	mov	r5, r2
 800a70c:	460c      	mov	r4, r1
 800a70e:	b921      	cbnz	r1, 800a71a <_realloc_r+0x16>
 800a710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a714:	4611      	mov	r1, r2
 800a716:	f7ff b8cb 	b.w	80098b0 <_malloc_r>
 800a71a:	b92a      	cbnz	r2, 800a728 <_realloc_r+0x24>
 800a71c:	f7ff f85c 	bl	80097d8 <_free_r>
 800a720:	2400      	movs	r4, #0
 800a722:	4620      	mov	r0, r4
 800a724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a728:	f000 f906 	bl	800a938 <_malloc_usable_size_r>
 800a72c:	4285      	cmp	r5, r0
 800a72e:	4606      	mov	r6, r0
 800a730:	d802      	bhi.n	800a738 <_realloc_r+0x34>
 800a732:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a736:	d8f4      	bhi.n	800a722 <_realloc_r+0x1e>
 800a738:	4629      	mov	r1, r5
 800a73a:	4640      	mov	r0, r8
 800a73c:	f7ff f8b8 	bl	80098b0 <_malloc_r>
 800a740:	4607      	mov	r7, r0
 800a742:	2800      	cmp	r0, #0
 800a744:	d0ec      	beq.n	800a720 <_realloc_r+0x1c>
 800a746:	42b5      	cmp	r5, r6
 800a748:	462a      	mov	r2, r5
 800a74a:	4621      	mov	r1, r4
 800a74c:	bf28      	it	cs
 800a74e:	4632      	movcs	r2, r6
 800a750:	f7ff f834 	bl	80097bc <memcpy>
 800a754:	4621      	mov	r1, r4
 800a756:	4640      	mov	r0, r8
 800a758:	f7ff f83e 	bl	80097d8 <_free_r>
 800a75c:	463c      	mov	r4, r7
 800a75e:	e7e0      	b.n	800a722 <_realloc_r+0x1e>

0800a760 <_strtol_l.constprop.0>:
 800a760:	2b24      	cmp	r3, #36	@ 0x24
 800a762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a766:	4686      	mov	lr, r0
 800a768:	4690      	mov	r8, r2
 800a76a:	d801      	bhi.n	800a770 <_strtol_l.constprop.0+0x10>
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d106      	bne.n	800a77e <_strtol_l.constprop.0+0x1e>
 800a770:	f7fe fff8 	bl	8009764 <__errno>
 800a774:	2316      	movs	r3, #22
 800a776:	6003      	str	r3, [r0, #0]
 800a778:	2000      	movs	r0, #0
 800a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77e:	4834      	ldr	r0, [pc, #208]	@ (800a850 <_strtol_l.constprop.0+0xf0>)
 800a780:	460d      	mov	r5, r1
 800a782:	462a      	mov	r2, r5
 800a784:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a788:	5d06      	ldrb	r6, [r0, r4]
 800a78a:	f016 0608 	ands.w	r6, r6, #8
 800a78e:	d1f8      	bne.n	800a782 <_strtol_l.constprop.0+0x22>
 800a790:	2c2d      	cmp	r4, #45	@ 0x2d
 800a792:	d12d      	bne.n	800a7f0 <_strtol_l.constprop.0+0x90>
 800a794:	782c      	ldrb	r4, [r5, #0]
 800a796:	2601      	movs	r6, #1
 800a798:	1c95      	adds	r5, r2, #2
 800a79a:	f033 0210 	bics.w	r2, r3, #16
 800a79e:	d109      	bne.n	800a7b4 <_strtol_l.constprop.0+0x54>
 800a7a0:	2c30      	cmp	r4, #48	@ 0x30
 800a7a2:	d12a      	bne.n	800a7fa <_strtol_l.constprop.0+0x9a>
 800a7a4:	782a      	ldrb	r2, [r5, #0]
 800a7a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a7aa:	2a58      	cmp	r2, #88	@ 0x58
 800a7ac:	d125      	bne.n	800a7fa <_strtol_l.constprop.0+0x9a>
 800a7ae:	786c      	ldrb	r4, [r5, #1]
 800a7b0:	2310      	movs	r3, #16
 800a7b2:	3502      	adds	r5, #2
 800a7b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a7b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a7bc:	2200      	movs	r2, #0
 800a7be:	fbbc f9f3 	udiv	r9, ip, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a7cc:	2f09      	cmp	r7, #9
 800a7ce:	d81b      	bhi.n	800a808 <_strtol_l.constprop.0+0xa8>
 800a7d0:	463c      	mov	r4, r7
 800a7d2:	42a3      	cmp	r3, r4
 800a7d4:	dd27      	ble.n	800a826 <_strtol_l.constprop.0+0xc6>
 800a7d6:	1c57      	adds	r7, r2, #1
 800a7d8:	d007      	beq.n	800a7ea <_strtol_l.constprop.0+0x8a>
 800a7da:	4581      	cmp	r9, r0
 800a7dc:	d320      	bcc.n	800a820 <_strtol_l.constprop.0+0xc0>
 800a7de:	d101      	bne.n	800a7e4 <_strtol_l.constprop.0+0x84>
 800a7e0:	45a2      	cmp	sl, r4
 800a7e2:	db1d      	blt.n	800a820 <_strtol_l.constprop.0+0xc0>
 800a7e4:	fb00 4003 	mla	r0, r0, r3, r4
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7ee:	e7eb      	b.n	800a7c8 <_strtol_l.constprop.0+0x68>
 800a7f0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7f2:	bf04      	itt	eq
 800a7f4:	782c      	ldrbeq	r4, [r5, #0]
 800a7f6:	1c95      	addeq	r5, r2, #2
 800a7f8:	e7cf      	b.n	800a79a <_strtol_l.constprop.0+0x3a>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1da      	bne.n	800a7b4 <_strtol_l.constprop.0+0x54>
 800a7fe:	2c30      	cmp	r4, #48	@ 0x30
 800a800:	bf0c      	ite	eq
 800a802:	2308      	moveq	r3, #8
 800a804:	230a      	movne	r3, #10
 800a806:	e7d5      	b.n	800a7b4 <_strtol_l.constprop.0+0x54>
 800a808:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a80c:	2f19      	cmp	r7, #25
 800a80e:	d801      	bhi.n	800a814 <_strtol_l.constprop.0+0xb4>
 800a810:	3c37      	subs	r4, #55	@ 0x37
 800a812:	e7de      	b.n	800a7d2 <_strtol_l.constprop.0+0x72>
 800a814:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a818:	2f19      	cmp	r7, #25
 800a81a:	d804      	bhi.n	800a826 <_strtol_l.constprop.0+0xc6>
 800a81c:	3c57      	subs	r4, #87	@ 0x57
 800a81e:	e7d8      	b.n	800a7d2 <_strtol_l.constprop.0+0x72>
 800a820:	f04f 32ff 	mov.w	r2, #4294967295
 800a824:	e7e1      	b.n	800a7ea <_strtol_l.constprop.0+0x8a>
 800a826:	1c53      	adds	r3, r2, #1
 800a828:	d108      	bne.n	800a83c <_strtol_l.constprop.0+0xdc>
 800a82a:	2322      	movs	r3, #34	@ 0x22
 800a82c:	f8ce 3000 	str.w	r3, [lr]
 800a830:	4660      	mov	r0, ip
 800a832:	f1b8 0f00 	cmp.w	r8, #0
 800a836:	d0a0      	beq.n	800a77a <_strtol_l.constprop.0+0x1a>
 800a838:	1e69      	subs	r1, r5, #1
 800a83a:	e006      	b.n	800a84a <_strtol_l.constprop.0+0xea>
 800a83c:	b106      	cbz	r6, 800a840 <_strtol_l.constprop.0+0xe0>
 800a83e:	4240      	negs	r0, r0
 800a840:	f1b8 0f00 	cmp.w	r8, #0
 800a844:	d099      	beq.n	800a77a <_strtol_l.constprop.0+0x1a>
 800a846:	2a00      	cmp	r2, #0
 800a848:	d1f6      	bne.n	800a838 <_strtol_l.constprop.0+0xd8>
 800a84a:	f8c8 1000 	str.w	r1, [r8]
 800a84e:	e794      	b.n	800a77a <_strtol_l.constprop.0+0x1a>
 800a850:	0800ad8f 	.word	0x0800ad8f

0800a854 <_strtol_r>:
 800a854:	f7ff bf84 	b.w	800a760 <_strtol_l.constprop.0>

0800a858 <_strtoul_l.constprop.0>:
 800a858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a85c:	4e34      	ldr	r6, [pc, #208]	@ (800a930 <_strtoul_l.constprop.0+0xd8>)
 800a85e:	4686      	mov	lr, r0
 800a860:	460d      	mov	r5, r1
 800a862:	4628      	mov	r0, r5
 800a864:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a868:	5d37      	ldrb	r7, [r6, r4]
 800a86a:	f017 0708 	ands.w	r7, r7, #8
 800a86e:	d1f8      	bne.n	800a862 <_strtoul_l.constprop.0+0xa>
 800a870:	2c2d      	cmp	r4, #45	@ 0x2d
 800a872:	d12f      	bne.n	800a8d4 <_strtoul_l.constprop.0+0x7c>
 800a874:	782c      	ldrb	r4, [r5, #0]
 800a876:	2701      	movs	r7, #1
 800a878:	1c85      	adds	r5, r0, #2
 800a87a:	f033 0010 	bics.w	r0, r3, #16
 800a87e:	d109      	bne.n	800a894 <_strtoul_l.constprop.0+0x3c>
 800a880:	2c30      	cmp	r4, #48	@ 0x30
 800a882:	d12c      	bne.n	800a8de <_strtoul_l.constprop.0+0x86>
 800a884:	7828      	ldrb	r0, [r5, #0]
 800a886:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a88a:	2858      	cmp	r0, #88	@ 0x58
 800a88c:	d127      	bne.n	800a8de <_strtoul_l.constprop.0+0x86>
 800a88e:	786c      	ldrb	r4, [r5, #1]
 800a890:	2310      	movs	r3, #16
 800a892:	3502      	adds	r5, #2
 800a894:	f04f 38ff 	mov.w	r8, #4294967295
 800a898:	2600      	movs	r6, #0
 800a89a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a89e:	fb03 f908 	mul.w	r9, r3, r8
 800a8a2:	ea6f 0909 	mvn.w	r9, r9
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a8ac:	f1bc 0f09 	cmp.w	ip, #9
 800a8b0:	d81c      	bhi.n	800a8ec <_strtoul_l.constprop.0+0x94>
 800a8b2:	4664      	mov	r4, ip
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	dd2a      	ble.n	800a90e <_strtoul_l.constprop.0+0xb6>
 800a8b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a8bc:	d007      	beq.n	800a8ce <_strtoul_l.constprop.0+0x76>
 800a8be:	4580      	cmp	r8, r0
 800a8c0:	d322      	bcc.n	800a908 <_strtoul_l.constprop.0+0xb0>
 800a8c2:	d101      	bne.n	800a8c8 <_strtoul_l.constprop.0+0x70>
 800a8c4:	45a1      	cmp	r9, r4
 800a8c6:	db1f      	blt.n	800a908 <_strtoul_l.constprop.0+0xb0>
 800a8c8:	fb00 4003 	mla	r0, r0, r3, r4
 800a8cc:	2601      	movs	r6, #1
 800a8ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8d2:	e7e9      	b.n	800a8a8 <_strtoul_l.constprop.0+0x50>
 800a8d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8d6:	bf04      	itt	eq
 800a8d8:	782c      	ldrbeq	r4, [r5, #0]
 800a8da:	1c85      	addeq	r5, r0, #2
 800a8dc:	e7cd      	b.n	800a87a <_strtoul_l.constprop.0+0x22>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1d8      	bne.n	800a894 <_strtoul_l.constprop.0+0x3c>
 800a8e2:	2c30      	cmp	r4, #48	@ 0x30
 800a8e4:	bf0c      	ite	eq
 800a8e6:	2308      	moveq	r3, #8
 800a8e8:	230a      	movne	r3, #10
 800a8ea:	e7d3      	b.n	800a894 <_strtoul_l.constprop.0+0x3c>
 800a8ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a8f0:	f1bc 0f19 	cmp.w	ip, #25
 800a8f4:	d801      	bhi.n	800a8fa <_strtoul_l.constprop.0+0xa2>
 800a8f6:	3c37      	subs	r4, #55	@ 0x37
 800a8f8:	e7dc      	b.n	800a8b4 <_strtoul_l.constprop.0+0x5c>
 800a8fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a8fe:	f1bc 0f19 	cmp.w	ip, #25
 800a902:	d804      	bhi.n	800a90e <_strtoul_l.constprop.0+0xb6>
 800a904:	3c57      	subs	r4, #87	@ 0x57
 800a906:	e7d5      	b.n	800a8b4 <_strtoul_l.constprop.0+0x5c>
 800a908:	f04f 36ff 	mov.w	r6, #4294967295
 800a90c:	e7df      	b.n	800a8ce <_strtoul_l.constprop.0+0x76>
 800a90e:	1c73      	adds	r3, r6, #1
 800a910:	d106      	bne.n	800a920 <_strtoul_l.constprop.0+0xc8>
 800a912:	2322      	movs	r3, #34	@ 0x22
 800a914:	f8ce 3000 	str.w	r3, [lr]
 800a918:	4630      	mov	r0, r6
 800a91a:	b932      	cbnz	r2, 800a92a <_strtoul_l.constprop.0+0xd2>
 800a91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a920:	b107      	cbz	r7, 800a924 <_strtoul_l.constprop.0+0xcc>
 800a922:	4240      	negs	r0, r0
 800a924:	2a00      	cmp	r2, #0
 800a926:	d0f9      	beq.n	800a91c <_strtoul_l.constprop.0+0xc4>
 800a928:	b106      	cbz	r6, 800a92c <_strtoul_l.constprop.0+0xd4>
 800a92a:	1e69      	subs	r1, r5, #1
 800a92c:	6011      	str	r1, [r2, #0]
 800a92e:	e7f5      	b.n	800a91c <_strtoul_l.constprop.0+0xc4>
 800a930:	0800ad8f 	.word	0x0800ad8f

0800a934 <_strtoul_r>:
 800a934:	f7ff bf90 	b.w	800a858 <_strtoul_l.constprop.0>

0800a938 <_malloc_usable_size_r>:
 800a938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a93c:	1f18      	subs	r0, r3, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfbc      	itt	lt
 800a942:	580b      	ldrlt	r3, [r1, r0]
 800a944:	18c0      	addlt	r0, r0, r3
 800a946:	4770      	bx	lr

0800a948 <_init>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr

0800a954 <_fini>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr
