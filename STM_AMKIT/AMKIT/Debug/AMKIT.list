
AMKIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ddc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008f6c  08008f6c  00009f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e0  080090e0  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e8  080090e8  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e8  080090e8  0000a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090ec  080090ec  0000a0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080090f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b05c  2**0
                  CONTENTS
 10 .bss          000003e4  2000005c  2000005c  0000b05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000440  20000440  0000b05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d1b  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000352b  00000000  00000000  00023da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  000272d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001247  00000000  00000000  00028a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f67  00000000  00000000  00029c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5bb  00000000  00000000  0004ec06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dac01  00000000  00000000  0006c1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146dc2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068e4  00000000  00000000  00146e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0014d6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f54 	.word	0x08008f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08008f54 	.word	0x08008f54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 feba 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8d2 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fab8 	bl	8000af4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000584:	f000 f93a 	bl	80007fc <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000588:	f000 f9aa 	bl	80008e0 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800058c:	f000 f9c8 	bl	8000920 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000590:	f000 f9fc 	bl	800098c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000594:	f000 fa30 	bl	80009f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000598:	f000 fa58 	bl	8000a4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800059c:	f000 fa80 	bl	8000aa0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005a0:	f005 fbb2 	bl	8005d08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // 타이머 인터럽트 모드로 시작 (TIM7은 이미 PSC/ARR로 1 kHz, 1 ms 인터럽트로 설정되어 있다고 가정)
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80005a4:	4859      	ldr	r0, [pc, #356]	@ (800070c <main+0x19c>)
 80005a6:	f003 fc0b 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <main+0x44>
  {
    Error_Handler();
 80005b0:	f000 fbc6 	bl	8000d40 <Error_Handler>
  }

  // 1) 콜백 기반 수신을 시작 (1바이트)
  if (HAL_UART_Receive_IT(&huart1, &rxByte, 1) != HAL_OK)
 80005b4:	2201      	movs	r2, #1
 80005b6:	4956      	ldr	r1, [pc, #344]	@ (8000710 <main+0x1a0>)
 80005b8:	4856      	ldr	r0, [pc, #344]	@ (8000714 <main+0x1a4>)
 80005ba:	f003 ff45 	bl	8004448 <HAL_UART_Receive_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <main+0x58>
  {
    // 수신 시작 실패 처리
    Error_Handler();
 80005c4:	f000 fbbc 	bl	8000d40 <Error_Handler>
  FIL SDFile;     // SD 카드 파일 핸들
  FRESULT fres;   // FATFS 함수 결과
  UINT bw, br;    // 바이트 쓰기/읽기 변수

  /* 1) SD 카드 마운트 (SDPath는 fatfs.c 에 extern으로 선언됨) */
  fres = f_mount(&SDFatFS, SDPath, 1);    // SDPath는 "0:"으로 설정되어 있어야 함
 80005c8:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80005cc:	2201      	movs	r2, #1
 80005ce:	4952      	ldr	r1, [pc, #328]	@ (8000718 <main+0x1a8>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f007 fa53 	bl	8007a7c <f_mount>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80005dc:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x78>
  {
    // 마운트 실패 처리
    Error_Handler();
 80005e4:	f000 fbac 	bl	8000d40 <Error_Handler>
  }

  /* 2) 새 파일 생성(덮어쓰기) */
  fres = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80005e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005ec:	220a      	movs	r2, #10
 80005ee:	494b      	ldr	r1, [pc, #300]	@ (800071c <main+0x1ac>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f007 fa89 	bl	8007b08 <f_open>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80005fc:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0x98>
  {
    // 파일 열기 실패 처리
    Error_Handler();
 8000604:	f000 fb9c 	bl	8000d40 <Error_Handler>
  }
  /* 3) 파일에 데이터 쓰기 */
  const char *data = "Hello, STM32 SD Card! \n test";
 8000608:	4b45      	ldr	r3, [pc, #276]	@ (8000720 <main+0x1b0>)
 800060a:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
  fres = f_write(&SDFile, data, strlen(data), &bw);
 800060e:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 8000612:	f7ff fddd 	bl	80001d0 <strlen>
 8000616:	4602      	mov	r2, r0
 8000618:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800061c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000620:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	@ 0x4a8
 8000624:	f007 fd69 	bl	80080fa <f_write>
 8000628:	4603      	mov	r3, r0
 800062a:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK || bw < strlen(data))
 800062e:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10b      	bne.n	800064e <main+0xde>
 8000636:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 800063a:	f7ff fdc9 	bl	80001d0 <strlen>
 800063e:	4602      	mov	r2, r0
 8000640:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8000644:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d906      	bls.n	800065c <main+0xec>
  {
    // 파일 쓰기 실패 처리
    f_close(&SDFile);
 800064e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000652:	4618      	mov	r0, r3
 8000654:	f007 ff44 	bl	80084e0 <f_close>
    Error_Handler();
 8000658:	f000 fb72 	bl	8000d40 <Error_Handler>
  }
  /* 4) 파일 닫기 */
  fres = f_close(&SDFile);
 800065c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000660:	4618      	mov	r0, r3
 8000662:	f007 ff3d 	bl	80084e0 <f_close>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 800066c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x108>
  {
    // 파일 닫기 실패 처리
    Error_Handler();
 8000674:	f000 fb64 	bl	8000d40 <Error_Handler>
  }
  /* 5) 파일 읽기 */
  fres = f_open(&SDFile, "test.txt", FA_READ);
 8000678:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800067c:	2201      	movs	r2, #1
 800067e:	4927      	ldr	r1, [pc, #156]	@ (800071c <main+0x1ac>)
 8000680:	4618      	mov	r0, r3
 8000682:	f007 fa41 	bl	8007b08 <f_open>
 8000686:	4603      	mov	r3, r0
 8000688:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 800068c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <main+0x128>
  {
    // 파일 열기 실패 처리
    Error_Handler();
 8000694:	f000 fb54 	bl	8000d40 <Error_Handler>
  }
  char readBuffer[64];    // 읽기 버퍼
  fres = f_read(&SDFile, readBuffer, sizeof(readBuffer) - 1, &br);
 8000698:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800069c:	4639      	mov	r1, r7
 800069e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80006a2:	223f      	movs	r2, #63	@ 0x3f
 80006a4:	f007 fbea 	bl	8007e7c <f_read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK || br == 0)
 80006ae:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <main+0x154>
 80006b6:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80006ba:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d106      	bne.n	80006d2 <main+0x162>
  {
    // 파일 읽기 실패 처리
    f_close(&SDFile);
 80006c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 ff09 	bl	80084e0 <f_close>
    Error_Handler();
 80006ce:	f000 fb37 	bl	8000d40 <Error_Handler>
  }
  readBuffer[br] = '\0'; // 문자열 종료
 80006d2:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80006d6:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 80006e0:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 80006e4:	2100      	movs	r1, #0
 80006e6:	54d1      	strb	r1, [r2, r3]
  /* 6) SD카드 언마운트*/
  fres = f_mount(NULL, SDPath, 1); // SDPath는 "0:"으로 설정되어 있어야 함 마운트 0, 언마운트 1
 80006e8:	2201      	movs	r2, #1
 80006ea:	490b      	ldr	r1, [pc, #44]	@ (8000718 <main+0x1a8>)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f007 f9c5 	bl	8007a7c <f_mount>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK)
 80006f8:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <main+0x196>
  {
    // 언마운트 실패 처리
    Error_Handler();
 8000700:	f000 fb1e 	bl	8000d40 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	e7fd      	b.n	8000706 <main+0x196>
 800070a:	bf00      	nop
 800070c:	20000174 	.word	0x20000174
 8000710:	20000298 	.word	0x20000298
 8000714:	200001bc 	.word	0x200001bc
 8000718:	200002c0 	.word	0x200002c0
 800071c:	08008f6c 	.word	0x08008f6c
 8000720:	08008f78 	.word	0x08008f78

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 ff8e 	bl	8008654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <SystemClock_Config+0xd4>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <SystemClock_Config+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000780:	2305      	movs	r3, #5
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800079c:	23a8      	movs	r3, #168	@ 0xa8
 800079e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f98f 	bl	8001ad0 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b8:	f000 fac2 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2105      	movs	r1, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fbf0 	bl	8001fc0 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f000 faab 	bl	8000d40 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	@ 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000800:	4b33      	ldr	r3, [pc, #204]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000802:	4a34      	ldr	r2, [pc, #208]	@ (80008d4 <MX_RTC_Init+0xd8>)
 8000804:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000806:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800080c:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800080e:	227f      	movs	r2, #127	@ 0x7f
 8000810:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000812:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000814:	22ff      	movs	r2, #255	@ 0xff
 8000816:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000818:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800081e:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800082a:	4829      	ldr	r0, [pc, #164]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800082c:	f001 feca 	bl	80025c4 <HAL_RTC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000836:	f000 fa83 	bl	8000d40 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  // RTC 백업 레지스터를 읽어 초기화 여부 확인
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_REG) != RTC_MAGIC_VALUE)
 800083a:	2101      	movs	r1, #1
 800083c:	4824      	ldr	r0, [pc, #144]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800083e:	f002 fa35 	bl	8002cac <HAL_RTCEx_BKUPRead>
 8000842:	4603      	mov	r3, r0
 8000844:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000848:	4293      	cmp	r3, r2
 800084a:	d035      	beq.n	80008b8 <MX_RTC_Init+0xbc>
  {
    // RTC 백업 레지스터가 초기화되지 않았거나 값이 일치하지 않으면 RTC를 초기화
    // RTC 백업 레지스터에 초기화 마크를 기록
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_REG, RTC_MAGIC_VALUE);
 800084c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000850:	2101      	movs	r1, #1
 8000852:	481f      	ldr	r0, [pc, #124]	@ (80008d0 <MX_RTC_Init+0xd4>)
 8000854:	f002 fa10 	bl	8002c78 <HAL_RTCEx_BKUPWrite>

    // RTC 시간과 날짜를 초기화
    g_Time.Hours = 0x0;  // 00:00:00
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_RTC_Init+0xdc>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
    g_Time.Minutes = 0x0;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_RTC_Init+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	705a      	strb	r2, [r3, #1]
    g_Time.Seconds = 0x0;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_RTC_Init+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	709a      	strb	r2, [r3, #2]
    g_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_RTC_Init+0xdc>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    g_Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_RTC_Init+0xdc>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &g_Time, RTC_FORMAT_BCD) != HAL_OK)
 8000876:	2201      	movs	r2, #1
 8000878:	4917      	ldr	r1, [pc, #92]	@ (80008d8 <MX_RTC_Init+0xdc>)
 800087a:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <MX_RTC_Init+0xd4>)
 800087c:	f001 ff23 	bl	80026c6 <HAL_RTC_SetTime>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_RTC_Init+0x8e>
    {
      // 초기화 실패 처리
      Error_Handler();
 8000886:	f000 fa5b 	bl	8000d40 <Error_Handler>
    }
    g_Date.WeekDay = RTC_WEEKDAY_MONDAY;    // 월요일
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_RTC_Init+0xe0>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
    g_Date.Month = RTC_MONTH_JANUARY;       // 1월
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_RTC_Init+0xe0>)
 8000892:	2201      	movs	r2, #1
 8000894:	705a      	strb	r2, [r3, #1]
    g_Date.Date = 0x1;                      // 1일
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_RTC_Init+0xe0>)
 8000898:	2201      	movs	r2, #1
 800089a:	709a      	strb	r2, [r3, #2]
    g_Date.Year = 0x25;                     // 2025년 (BCD 형식으로 25)
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_RTC_Init+0xe0>)
 800089e:	2225      	movs	r2, #37	@ 0x25
 80008a0:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &g_Date, RTC_FORMAT_BCD) != HAL_OK)
 80008a2:	2201      	movs	r2, #1
 80008a4:	490d      	ldr	r1, [pc, #52]	@ (80008dc <MX_RTC_Init+0xe0>)
 80008a6:	480a      	ldr	r0, [pc, #40]	@ (80008d0 <MX_RTC_Init+0xd4>)
 80008a8:	f002 f805 	bl	80028b6 <HAL_RTC_SetDate>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00c      	beq.n	80008cc <MX_RTC_Init+0xd0>
    {
      // 초기화 실패 처리
      Error_Handler();
 80008b2:	f000 fa45 	bl	8000d40 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008b6:	e009      	b.n	80008cc <MX_RTC_Init+0xd0>
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 80008b8:	2201      	movs	r2, #1
 80008ba:	4907      	ldr	r1, [pc, #28]	@ (80008d8 <MX_RTC_Init+0xdc>)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_RTC_Init+0xd4>)
 80008be:	f001 ff9c 	bl	80027fa <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 80008c2:	2201      	movs	r2, #1
 80008c4:	4905      	ldr	r1, [pc, #20]	@ (80008dc <MX_RTC_Init+0xe0>)
 80008c6:	4802      	ldr	r0, [pc, #8]	@ (80008d0 <MX_RTC_Init+0xd4>)
 80008c8:	f002 f879 	bl	80029be <HAL_RTC_GetDate>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000078 	.word	0x20000078
 80008d4:	40002800 	.word	0x40002800
 80008d8:	2000029c 	.word	0x2000029c
 80008dc:	200002b0 	.word	0x200002b0

080008e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008e6:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <MX_SDIO_SD_Init+0x3c>)
 80008e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <MX_SDIO_SD_Init+0x38>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20000098 	.word	0x20000098
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000926:	4a18      	ldr	r2, [pc, #96]	@ (8000988 <MX_SPI1_Init+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_SPI1_Init+0x64>)
 800094c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000950:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_SPI1_Init+0x64>)
 800096c:	220a      	movs	r2, #10
 800096e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000972:	f003 f94d 	bl	8003c10 <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800097c:	f000 f9e0 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000011c 	.word	0x2000011c
 8000988:	40013000 	.word	0x40013000

0800098c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_TIM7_Init+0x64>)
 800099c:	4a15      	ldr	r2, [pc, #84]	@ (80009f4 <MX_TIM7_Init+0x68>)
 800099e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009a2:	2263      	movs	r2, #99	@ 0x63
 80009a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840-1;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009ae:	f240 3247 	movw	r2, #839	@ 0x347
 80009b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009bc:	f003 f9b1 	bl	8003d22 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009c6:	f000 f9bb 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <MX_TIM7_Init+0x64>)
 80009d8:	f003 fc20 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80009e2:	f000 f9ad 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000174 	.word	0x20000174
 80009f4:	40001400 	.word	0x40001400

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <MX_USART1_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a30:	f003 fc84 	bl	800433c <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f981 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001bc 	.word	0x200001bc
 8000a48:	40011000 	.word	0x40011000

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f003 fc5a 	bl	800433c <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f957 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000204 	.word	0x20000204
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <MX_USART3_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad8:	f003 fc30 	bl	800433c <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f92d 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000024c 	.word	0x2000024c
 8000af0:	40004800 	.word	0x40004800

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	@ 0x30
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	4b42      	ldr	r3, [pc, #264]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a41      	ldr	r2, [pc, #260]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b34      	ldr	r3, [pc, #208]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a33      	ldr	r2, [pc, #204]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a2c      	ldr	r2, [pc, #176]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000bb8:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_GPIO_Init+0x128>)
 8000bba:	f000 ff6f 	bl	8001a9c <HAL_GPIO_WritePin>
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIP_3_Pin DIP_4_Pin DIP_1_Pin DIP_2_Pin */
  GPIO_InitStruct.Pin = DIP_3_Pin|DIP_4_Pin|DIP_1_Pin|DIP_2_Pin;
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4812      	ldr	r0, [pc, #72]	@ (8000c1c <MX_GPIO_Init+0x128>)
 8000bd2:	f000 fdc7 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin STATUS_LED_Pin M_PWR_KEY_Pin
                           ESP_EN_Pin USIM_RESET_Pin PE14 PE15 */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|STATUS_LED_Pin|M_PWR_KEY_Pin
 8000bd6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000bda:	61fb      	str	r3, [r7, #28]
                          |ESP_EN_Pin|USIM_RESET_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <MX_GPIO_Init+0x128>)
 8000bf0:	f000 fdb8 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bf4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000bf8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_GPIO_Init+0x12c>)
 8000c0a:	f000 fdab 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	@ 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <HAL_TIM_PeriodElapsedCallback>:
//
// =======================================================================================================
/* tim 7 인터럽트 처리부 */
/* TIM7 업데이트 인터럽트 콜백 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b098      	sub	sp, #96	@ 0x60
 8000c28:	af04      	add	r7, sp, #16
 8000c2a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a27      	ldr	r2, [pc, #156]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d147      	bne.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0xa2>
  {
    ms_tick_1++;
 8000c36:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c40:	801a      	strh	r2, [r3, #0]
    alive_counter++;
 8000c42:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c4c:	801a      	strh	r2, [r3, #0]

    if (ms_tick_1 >= 200)         // 200 ms 경과 체크
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c54:	d902      	bls.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0x38>
    {
      ms_tick_1 = 0;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	801a      	strh	r2, [r3, #0]
      // HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
    }

    if (alive_counter >= 5000)    // 10 s 경과 체크
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d92e      	bls.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
      alive_counter = 0;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	801a      	strh	r2, [r3, #0]

      /* 1) RTC에서 현재 시간 읽기 */
      // RTC_TimeTypeDef sTime;
      // RTC_DateTypeDef sDate;
      HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BIN);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	491a      	ldr	r1, [pc, #104]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c72:	481b      	ldr	r0, [pc, #108]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c74:	f001 fdc1 	bl	80027fa <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BIN);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	491a      	ldr	r1, [pc, #104]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c7e:	f001 fe9e 	bl	80029be <HAL_RTC_GetDate>
      // int len = snprintf(buf, sizeof(buf), "ALIVE: %02d:%02d:%02d %02d/%02d/%04d\n",
      //                   sTime.Hours, sTime.Minutes, sTime.Seconds,
      //                   sDate.Date, sDate.Month, 2000 + sDate.Year);

      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c84:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000c86:	461d      	mov	r5, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c8a:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000c8c:	461a      	mov	r2, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000c92:	4619      	mov	r1, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000c98:	461c      	mov	r4, r3
                        g_Date.Month,g_Date.Date, g_Time.Hours, g_Time.Minutes, g_Time.Seconds);
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c9c:	789b      	ldrb	r3, [r3, #2]
      int len = snprintf(buf, sizeof(buf), "ALIVE: %02d.%02d / %02d:%02d:%02d\n",
 8000c9e:	f107 000c 	add.w	r0, r7, #12
 8000ca2:	9303      	str	r3, [sp, #12]
 8000ca4:	9402      	str	r4, [sp, #8]
 8000ca6:	9101      	str	r1, [sp, #4]
 8000ca8:	9200      	str	r2, [sp, #0]
 8000caa:	462b      	mov	r3, r5
 8000cac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cae:	2140      	movs	r1, #64	@ 0x40
 8000cb0:	f007 fc9c 	bl	80085ec <sniprintf>
 8000cb4:	64f8      	str	r0, [r7, #76]	@ 0x4c
      //HAL_UART_Transmit_IT(&huart2, txAlive, sizeof(txAlive) - 1);
      //HAL_UART_Transmit_IT(&huart3, txAlive, sizeof(txAlive) - 1);

      /* 3) UART로 생존 및 시간 전송 */
      // UART1로 현재 시간 전송
      HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 8000cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480a      	ldr	r0, [pc, #40]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cc2:	f003 fb8b 	bl	80043dc <HAL_UART_Transmit_IT>
    }
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3750      	adds	r7, #80	@ 0x50
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40001400 	.word	0x40001400
 8000cd4:	20000294 	.word	0x20000294
 8000cd8:	20000296 	.word	0x20000296
 8000cdc:	2000029c 	.word	0x2000029c
 8000ce0:	20000078 	.word	0x20000078
 8000ce4:	200002b0 	.word	0x200002b0
 8000ce8:	08008f98 	.word	0x08008f98
 8000cec:	200001bc 	.word	0x200001bc

08000cf0 <HAL_UART_RxCpltCallback>:
//
// =======================================================================================================
/* uart 1 처리부 */
/* UART Rx Complete 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a08      	ldr	r2, [pc, #32]	@ (8000d20 <HAL_UART_RxCpltCallback+0x30>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d109      	bne.n	8000d16 <HAL_UART_RxCpltCallback+0x26>
  {
    // 1) 에코: 받은 바이트를 바로 송신
    HAL_UART_Transmit_IT(&huart1, &rxByte, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	4907      	ldr	r1, [pc, #28]	@ (8000d24 <HAL_UART_RxCpltCallback+0x34>)
 8000d06:	4808      	ldr	r0, [pc, #32]	@ (8000d28 <HAL_UART_RxCpltCallback+0x38>)
 8000d08:	f003 fb68 	bl	80043dc <HAL_UART_Transmit_IT>

    // 2) 다시 수신 대기
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4905      	ldr	r1, [pc, #20]	@ (8000d24 <HAL_UART_RxCpltCallback+0x34>)
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_RxCpltCallback+0x38>)
 8000d12:	f003 fb99 	bl	8004448 <HAL_UART_Receive_IT>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40011000 	.word	0x40011000
 8000d24:	20000298 	.word	0x20000298
 8000d28:	200001bc 	.word	0x200001bc

08000d2c <HAL_UART_TxCpltCallback>:

/* UART 전송 완료 콜백 (필요 시..) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  // 전송 완료 후 다른 처리가 필요하면 여기에…
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_RTC_MspInit+0x5c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d119      	bne.n	8000df0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fb18 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000dd6:	f7ff ffb3 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_RTC_MspInit+0x60>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2029      	movs	r0, #41	@ 0x29
 8000de6:	f000 fbf4 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000dea:	2029      	movs	r0, #41	@ 0x29
 8000dec:	f000 fc0d 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40002800 	.word	0x40002800
 8000dfc:	42470e3c 	.word	0x42470e3c

08000e00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <HAL_SD_MspInit+0xc0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d14a      	bne.n	8000eb8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a26      	ldr	r2, [pc, #152]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <HAL_SD_MspInit+0xc4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000e76:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <HAL_SD_MspInit+0xc8>)
 8000e94:	f000 fc66 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <HAL_SD_MspInit+0xcc>)
 8000eb4:	f000 fc56 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	@ 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00

08000ed0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_SPI_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000efc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f2a:	23e0      	movs	r3, #224	@ 0xe0
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f46:	f000 fc0d 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d115      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <HAL_TIM_Base_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <HAL_TIM_Base_MspInit+0x4c>)
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_TIM_Base_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2037      	movs	r0, #55	@ 0x37
 8000f94:	f000 fb1d 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f98:	2037      	movs	r0, #55	@ 0x37
 8000f9a:	f000 fb36 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40001400 	.word	0x40001400
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08e      	sub	sp, #56	@ 0x38
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a58      	ldr	r2, [pc, #352]	@ (8001130 <HAL_UART_MspInit+0x180>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d135      	bne.n	800103e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	4b57      	ldr	r3, [pc, #348]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a56      	ldr	r2, [pc, #344]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe2:	4b54      	ldr	r3, [pc, #336]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	4b50      	ldr	r3, [pc, #320]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800100a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800101c:	2307      	movs	r3, #7
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	4844      	ldr	r0, [pc, #272]	@ (8001138 <HAL_UART_MspInit+0x188>)
 8001028:	f000 fb9c 	bl	8001764 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2025      	movs	r0, #37	@ 0x25
 8001032:	f000 face 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001036:	2025      	movs	r0, #37	@ 0x25
 8001038:	f000 fae7 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800103c:	e073      	b.n	8001126 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a3e      	ldr	r2, [pc, #248]	@ (800113c <HAL_UART_MspInit+0x18c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d134      	bne.n	80010b2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <HAL_UART_MspInit+0x184>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	4a38      	ldr	r2, [pc, #224]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8001052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001056:	6413      	str	r3, [r2, #64]	@ 0x40
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <HAL_UART_MspInit+0x184>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <HAL_UART_MspInit+0x184>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	4a31      	ldr	r2, [pc, #196]	@ (8001134 <HAL_UART_MspInit+0x184>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6313      	str	r3, [r2, #48]	@ 0x30
 8001074:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <HAL_UART_MspInit+0x184>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 8001080:	230c      	movs	r3, #12
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001090:	2307      	movs	r3, #7
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4827      	ldr	r0, [pc, #156]	@ (8001138 <HAL_UART_MspInit+0x188>)
 800109c:	f000 fb62 	bl	8001764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2026      	movs	r0, #38	@ 0x26
 80010a6:	f000 fa94 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010aa:	2026      	movs	r0, #38	@ 0x26
 80010ac:	f000 faad 	bl	800160a <HAL_NVIC_EnableIRQ>
}
 80010b0:	e039      	b.n	8001126 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <HAL_UART_MspInit+0x190>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d134      	bne.n	8001126 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_UART_MspInit+0x184>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001134 <HAL_UART_MspInit+0x184>)
 80010c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_UART_MspInit+0x184>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_UART_MspInit+0x184>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <HAL_UART_MspInit+0x184>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_UART_MspInit+0x184>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 80010f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001106:	2307      	movs	r3, #7
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <HAL_UART_MspInit+0x194>)
 8001112:	f000 fb27 	bl	8001764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2027      	movs	r0, #39	@ 0x27
 800111c:	f000 fa59 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001120:	2027      	movs	r0, #39	@ 0x27
 8001122:	f000 fa72 	bl	800160a <HAL_NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3738      	adds	r7, #56	@ 0x38
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40011000 	.word	0x40011000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	40004400 	.word	0x40004400
 8001140:	40004800 	.word	0x40004800
 8001144:	40020400 	.word	0x40020400

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f8f9 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <USART1_IRQHandler+0x10>)
 80011ae:	f003 f971 	bl	8004494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001bc 	.word	0x200001bc

080011bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <USART2_IRQHandler+0x10>)
 80011c2:	f003 f967 	bl	8004494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000204 	.word	0x20000204

080011d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <USART3_IRQHandler+0x10>)
 80011d6:	f003 f95d 	bl	8004494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000024c 	.word	0x2000024c

080011e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <RTC_Alarm_IRQHandler+0x10>)
 80011ea:	f001 fc37 	bl	8002a5c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000078 	.word	0x20000078

080011f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <TIM7_IRQHandler+0x10>)
 80011fe:	f002 fe4f 	bl	8003ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000174 	.word	0x20000174

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f007 fa12 	bl	8008664 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20020000 	.word	0x20020000
 800126c:	00000400 	.word	0x00000400
 8001270:	200002b4 	.word	0x200002b4
 8001274:	20000440 	.word	0x20000440

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012a0:	f7ff ffea 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	@ (80012dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	@ (80012e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f007 f9d1 	bl	8008670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff f94f 	bl	8000570 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012e0:	080090f0 	.word	0x080090f0
  ldr r2, =_sbss
 80012e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012e8:	20000440 	.word	0x20000440

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <HAL_Init+0x40>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_Init+0x40>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <HAL_Init+0x40>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f94f 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fd12 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f967 	bl	8001626 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f92f 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	20000008 	.word	0x20000008
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008
 80013b8:	200002b8 	.word	0x200002b8

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200002b8 	.word	0x200002b8

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	@ (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	@ (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	@ (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	@ (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	@ 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff3e 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff31 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff feb6 	bl	80013bc <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d008      	beq.n	8001670 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2280      	movs	r2, #128	@ 0x80
 8001662:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e052      	b.n	8001716 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0216 	bic.w	r2, r2, #22
 800167e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800168e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <HAL_DMA_Abort+0x62>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0208 	bic.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c0:	e013      	b.n	80016ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c2:	f7ff fe7b 	bl	80013bc <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d90c      	bls.n	80016ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2220      	movs	r2, #32
 80016d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e015      	b.n	8001716 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e4      	bne.n	80016c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fc:	223f      	movs	r2, #63	@ 0x3f
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d004      	beq.n	800173c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e00c      	b.n	8001756 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2205      	movs	r2, #5
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e16b      	b.n	8001a58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 815a 	bne.w	8001a52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80b4 	beq.w	8001a52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b60      	ldr	r3, [pc, #384]	@ (8001a70 <HAL_GPIO_Init+0x30c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a70 <HAL_GPIO_Init+0x30c>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <HAL_GPIO_Init+0x30c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001906:	4a5b      	ldr	r2, [pc, #364]	@ (8001a74 <HAL_GPIO_Init+0x310>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_GPIO_Init+0x314>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d02b      	beq.n	800198a <HAL_GPIO_Init+0x226>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a51      	ldr	r2, [pc, #324]	@ (8001a7c <HAL_GPIO_Init+0x318>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d025      	beq.n	8001986 <HAL_GPIO_Init+0x222>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a50      	ldr	r2, [pc, #320]	@ (8001a80 <HAL_GPIO_Init+0x31c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01f      	beq.n	8001982 <HAL_GPIO_Init+0x21e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4f      	ldr	r2, [pc, #316]	@ (8001a84 <HAL_GPIO_Init+0x320>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x21a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x216>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4d      	ldr	r2, [pc, #308]	@ (8001a8c <HAL_GPIO_Init+0x328>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x212>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a90 <HAL_GPIO_Init+0x32c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <HAL_GPIO_Init+0x330>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x20a>
 800196a:	2307      	movs	r3, #7
 800196c:	e00e      	b.n	800198c <HAL_GPIO_Init+0x228>
 800196e:	2308      	movs	r3, #8
 8001970:	e00c      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001972:	2306      	movs	r3, #6
 8001974:	e00a      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001976:	2305      	movs	r3, #5
 8001978:	e008      	b.n	800198c <HAL_GPIO_Init+0x228>
 800197a:	2304      	movs	r3, #4
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x228>
 800197e:	2303      	movs	r3, #3
 8001980:	e004      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001982:	2302      	movs	r3, #2
 8001984:	e002      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x228>
 800198a:	2300      	movs	r3, #0
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4093      	lsls	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199c:	4935      	ldr	r1, [pc, #212]	@ (8001a74 <HAL_GPIO_Init+0x310>)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ce:	4a32      	ldr	r2, [pc, #200]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f8:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fe:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a22:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4c:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	f67f ae90 	bls.w	8001780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40013800 	.word	0x40013800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40021800 	.word	0x40021800
 8001a94:	40021c00 	.word	0x40021c00
 8001a98:	40013c00 	.word	0x40013c00

08001a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aac:	787b      	ldrb	r3, [r7, #1]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab8:	e003      	b.n	8001ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	619a      	str	r2, [r3, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e267      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d075      	beq.n	8001bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aee:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d00c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afa:	4b85      	ldr	r3, [pc, #532]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d112      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4b82      	ldr	r3, [pc, #520]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b12:	d10b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	4b7e      	ldr	r3, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d05b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x108>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d157      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e242      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x74>
 8001b36:	4b76      	ldr	r3, [pc, #472]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a75      	ldr	r2, [pc, #468]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e01d      	b.n	8001b80 <HAL_RCC_OscConfig+0xb0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x98>
 8001b4e:	4b70      	ldr	r3, [pc, #448]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a6f      	ldr	r2, [pc, #444]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0xb0>
 8001b68:	4b69      	ldr	r3, [pc, #420]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a68      	ldr	r2, [pc, #416]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fc18 	bl	80013bc <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fc14 	bl	80013bc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e207      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0xc0>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fc04 	bl	80013bc <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fc00 	bl	80013bc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	@ 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1f3      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xe8>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d063      	beq.n	8001cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001be6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	4b47      	ldr	r3, [pc, #284]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d11c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b44      	ldr	r3, [pc, #272]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d116      	bne.n	8001c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	4b41      	ldr	r3, [pc, #260]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x152>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e1c7      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4937      	ldr	r1, [pc, #220]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	e03a      	b.n	8001cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff fbb9 	bl	80013bc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fbb5 	bl	80013bc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1a8      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4925      	ldr	r1, [pc, #148]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fb98 	bl	80013bc <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff fb94 	bl	80013bc <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e187      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d036      	beq.n	8001d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_RCC_OscConfig+0x248>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fb78 	bl	80013bc <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fb74 	bl	80013bc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e167      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x200>
 8001cee:	e01b      	b.n	8001d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_OscConfig+0x248>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fb61 	bl	80013bc <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	e00e      	b.n	8001d1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fb5d 	bl	80013bc <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d907      	bls.n	8001d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e150      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	42470000 	.word	0x42470000
 8001d18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b88      	ldr	r3, [pc, #544]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ea      	bne.n	8001cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8097 	beq.w	8001e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b81      	ldr	r3, [pc, #516]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d56:	4b7a      	ldr	r3, [pc, #488]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b77      	ldr	r3, [pc, #476]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d118      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b74      	ldr	r3, [pc, #464]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a73      	ldr	r2, [pc, #460]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fb1d 	bl	80013bc <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d86:	f7ff fb19 	bl	80013bc <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e10c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	4b6a      	ldr	r3, [pc, #424]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x2ea>
 8001dac:	4b64      	ldr	r3, [pc, #400]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	4a63      	ldr	r2, [pc, #396]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x324>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x30c>
 8001dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dce:	4b5c      	ldr	r3, [pc, #368]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0x324>
 8001ddc:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	4a57      	ldr	r2, [pc, #348]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de8:	4b55      	ldr	r3, [pc, #340]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dec:	4a54      	ldr	r2, [pc, #336]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fade 	bl	80013bc <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7ff fada 	bl	80013bc <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0cb      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ee      	beq.n	8001e04 <HAL_RCC_OscConfig+0x334>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7ff fac8 	bl	80013bc <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff fac4 	bl	80013bc <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e0b5      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e46:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ee      	bne.n	8001e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	4a38      	ldr	r2, [pc, #224]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a1 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6e:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d05c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d141      	bne.n	8001f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_RCC_OscConfig+0x478>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff fa98 	bl	80013bc <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff fa94 	bl	80013bc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e087      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	019b      	lsls	r3, r3, #6
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	061b      	lsls	r3, r3, #24
 8001ed2:	491b      	ldr	r1, [pc, #108]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x478>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fa6d 	bl	80013bc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff fa69 	bl	80013bc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e05c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x416>
 8001f04:	e054      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_RCC_OscConfig+0x478>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fa56 	bl	80013bc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff fa52 	bl	80013bc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e045      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x444>
 8001f32:	e03d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e038      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCC_OscConfig+0x4ec>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d028      	beq.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d121      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d11a      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d111      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	3b01      	subs	r3, #1
 8001f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0cc      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b68      	ldr	r3, [pc, #416]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d90c      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b65      	ldr	r3, [pc, #404]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a58      	ldr	r2, [pc, #352]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800201e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a52      	ldr	r2, [pc, #328]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d044      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d119      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d003      	beq.n	800207e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207a:	2b03      	cmp	r3, #3
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e067      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b37      	ldr	r3, [pc, #220]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4934      	ldr	r1, [pc, #208]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7ff f984 	bl	80013bc <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7ff f980 	bl	80013bc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e04f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d20c      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490a      	ldr	r1, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f8e4 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00
 800217c:	40023800 	.word	0x40023800
 8002180:	08009000 	.word	0x08009000
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002190:	b094      	sub	sp, #80	@ 0x50
 8002192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a4:	4b79      	ldr	r3, [pc, #484]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d00d      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x40>
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	f200 80e1 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021be:	e0db      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c0:	4b73      	ldr	r3, [pc, #460]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x204>)
 80021c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021c4:	e0db      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c6:	4b73      	ldr	r3, [pc, #460]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x208>)
 80021c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ca:	e0d8      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021cc:	4b6f      	ldr	r3, [pc, #444]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d6:	4b6d      	ldr	r3, [pc, #436]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	2200      	movs	r2, #0
 80021ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021f6:	2300      	movs	r3, #0
 80021f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021fe:	4622      	mov	r2, r4
 8002200:	462b      	mov	r3, r5
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	0159      	lsls	r1, r3, #5
 800220c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002210:	0150      	lsls	r0, r2, #5
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4621      	mov	r1, r4
 8002218:	1a51      	subs	r1, r2, r1
 800221a:	6139      	str	r1, [r7, #16]
 800221c:	4629      	mov	r1, r5
 800221e:	eb63 0301 	sbc.w	r3, r3, r1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002230:	4659      	mov	r1, fp
 8002232:	018b      	lsls	r3, r1, #6
 8002234:	4651      	mov	r1, sl
 8002236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223a:	4651      	mov	r1, sl
 800223c:	018a      	lsls	r2, r1, #6
 800223e:	4651      	mov	r1, sl
 8002240:	ebb2 0801 	subs.w	r8, r2, r1
 8002244:	4659      	mov	r1, fp
 8002246:	eb63 0901 	sbc.w	r9, r3, r1
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800225a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800225e:	4690      	mov	r8, r2
 8002260:	4699      	mov	r9, r3
 8002262:	4623      	mov	r3, r4
 8002264:	eb18 0303 	adds.w	r3, r8, r3
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	462b      	mov	r3, r5
 800226c:	eb49 0303 	adc.w	r3, r9, r3
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800227e:	4629      	mov	r1, r5
 8002280:	024b      	lsls	r3, r1, #9
 8002282:	4621      	mov	r1, r4
 8002284:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002288:	4621      	mov	r1, r4
 800228a:	024a      	lsls	r2, r1, #9
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002292:	2200      	movs	r2, #0
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800229c:	f7fd fff0 	bl	8000280 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4613      	mov	r3, r2
 80022a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022a8:	e058      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	4b38      	ldr	r3, [pc, #224]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	2200      	movs	r2, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	4611      	mov	r1, r2
 80022b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	0159      	lsls	r1, r3, #5
 80022d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d6:	0150      	lsls	r0, r2, #5
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4641      	mov	r1, r8
 80022de:	ebb2 0a01 	subs.w	sl, r2, r1
 80022e2:	4649      	mov	r1, r9
 80022e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002300:	eb63 050b 	sbc.w	r5, r3, fp
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	00eb      	lsls	r3, r5, #3
 800230e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002312:	00e2      	lsls	r2, r4, #3
 8002314:	4614      	mov	r4, r2
 8002316:	461d      	mov	r5, r3
 8002318:	4643      	mov	r3, r8
 800231a:	18e3      	adds	r3, r4, r3
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	464b      	mov	r3, r9
 8002320:	eb45 0303 	adc.w	r3, r5, r3
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002332:	4629      	mov	r1, r5
 8002334:	028b      	lsls	r3, r1, #10
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800233c:	4621      	mov	r1, r4
 800233e:	028a      	lsls	r2, r1, #10
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002346:	2200      	movs	r2, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	61fa      	str	r2, [r7, #28]
 800234c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002350:	f7fd ff96 	bl	8000280 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	3301      	adds	r3, #1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800236c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800236e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x204>)
 800237a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002380:	4618      	mov	r0, r3
 8002382:	3750      	adds	r7, #80	@ 0x50
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400
 8002394:	007a1200 	.word	0x007a1200

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff0 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0a9b      	lsrs	r3, r3, #10
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	@ (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08009010 	.word	0x08009010

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffdc 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0b5b      	lsrs	r3, r3, #13
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	@ (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08009010 	.word	0x08009010

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002424:	2b00      	cmp	r3, #0
 8002426:	d035      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002428:	4b62      	ldr	r3, [pc, #392]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800242e:	f7fe ffc5 	bl	80013bc <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002436:	f7fe ffc1 	bl	80013bc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0b0      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002448:	4b5b      	ldr	r3, [pc, #364]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	019a      	lsls	r2, r3, #6
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	071b      	lsls	r3, r3, #28
 8002460:	4955      	ldr	r1, [pc, #340]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002468:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800246e:	f7fe ffa5 	bl	80013bc <HAL_GetTick>
 8002472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002476:	f7fe ffa1 	bl	80013bc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e090      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002488:	4b4b      	ldr	r3, [pc, #300]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8083 	beq.w	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b44      	ldr	r3, [pc, #272]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a43      	ldr	r2, [pc, #268]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024be:	4b3f      	ldr	r3, [pc, #252]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a3e      	ldr	r2, [pc, #248]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024ca:	f7fe ff77 	bl	80013bc <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe ff73 	bl	80013bc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e062      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80024e4:	4b35      	ldr	r3, [pc, #212]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024f0:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02f      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	429a      	cmp	r2, r3
 800250c:	d028      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800250e:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002516:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800251e:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002524:	4a24      	ldr	r2, [pc, #144]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800252a:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b01      	cmp	r3, #1
 8002534:	d114      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe ff41 	bl	80013bc <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7fe ff3d 	bl	80013bc <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e02a      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ee      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002568:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800256c:	d10d      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800256e:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800257e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002582:	490d      	ldr	r1, [pc, #52]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
 8002588:	e005      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800258a:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002590:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002594:	6093      	str	r3, [r2, #8]
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002598:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a2:	4905      	ldr	r1, [pc, #20]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	42470068 	.word	0x42470068
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40007000 	.word	0x40007000
 80025c0:	42470e40 	.word	0x42470e40

080025c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7f5b      	ldrb	r3, [r3, #29]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe fbd8 	bl	8000d9c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d055      	beq.n	80026ac <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	22ca      	movs	r2, #202	@ 0xca
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2253      	movs	r2, #83	@ 0x53
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fa99 	bl	8002b48 <RTC_EnterInitMode>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12c      	bne.n	800267a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800262e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002632:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6899      	ldr	r1, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6919      	ldr	r1, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	041a      	lsls	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 faa0 	bl	8002bb6 <RTC_ExitInitMode>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d110      	bne.n	80026a2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	22ff      	movs	r2, #255	@ 0xff
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80026aa:	e001      	b.n	80026b0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026c6:	b590      	push	{r4, r7, lr}
 80026c8:	b087      	sub	sp, #28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	7f1b      	ldrb	r3, [r3, #28]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_RTC_SetTime+0x1c>
 80026de:	2302      	movs	r3, #2
 80026e0:	e087      	b.n	80027f2 <HAL_RTC_SetTime+0x12c>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2202      	movs	r2, #2
 80026ec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d126      	bne.n	8002742 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2200      	movs	r2, #0
 8002706:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fa77 	bl	8002c00 <RTC_ByteToBcd2>
 8002712:	4603      	mov	r3, r0
 8002714:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fa70 	bl	8002c00 <RTC_ByteToBcd2>
 8002720:	4603      	mov	r3, r0
 8002722:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002724:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	789b      	ldrb	r3, [r3, #2]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fa68 	bl	8002c00 <RTC_ByteToBcd2>
 8002730:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002732:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	78db      	ldrb	r3, [r3, #3]
 800273a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e018      	b.n	8002774 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002762:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002768:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	78db      	ldrb	r3, [r3, #3]
 800276e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	22ca      	movs	r2, #202	@ 0xca
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2253      	movs	r2, #83	@ 0x53
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f9df 	bl	8002b48 <RTC_EnterInitMode>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d120      	bne.n	80027d6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800279e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80027a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f9f2 	bl	8002bb6 <RTC_ExitInitMode>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	22ff      	movs	r2, #255	@ 0xff
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]

  return status;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}

080027fa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800282c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002830:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	0d9b      	lsrs	r3, r3, #22
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11a      	bne.n	80028ac <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f9de 	bl	8002c3c <RTC_Bcd2ToByte>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	4618      	mov	r0, r3
 800288e:	f000 f9d5 	bl	8002c3c <RTC_Bcd2ToByte>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	789b      	ldrb	r3, [r3, #2]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f9cc 	bl	8002c3c <RTC_Bcd2ToByte>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028b6:	b590      	push	{r4, r7, lr}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	7f1b      	ldrb	r3, [r3, #28]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_RTC_SetDate+0x1c>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e071      	b.n	80029b6 <HAL_RTC_SetDate+0x100>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10e      	bne.n	8002902 <HAL_RTC_SetDate+0x4c>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	f023 0310 	bic.w	r3, r3, #16
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	330a      	adds	r3, #10
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d11c      	bne.n	8002942 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	78db      	ldrb	r3, [r3, #3]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f977 	bl	8002c00 <RTC_ByteToBcd2>
 8002912:	4603      	mov	r3, r0
 8002914:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	785b      	ldrb	r3, [r3, #1]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f970 	bl	8002c00 <RTC_ByteToBcd2>
 8002920:	4603      	mov	r3, r0
 8002922:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002924:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	789b      	ldrb	r3, [r3, #2]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f968 	bl	8002c00 <RTC_ByteToBcd2>
 8002930:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002932:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e00e      	b.n	8002960 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	78db      	ldrb	r3, [r3, #3]
 8002946:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800294e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002954:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	22ca      	movs	r2, #202	@ 0xca
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2253      	movs	r2, #83	@ 0x53
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f8e9 	bl	8002b48 <RTC_EnterInitMode>
 8002976:	4603      	mov	r3, r0
 8002978:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10c      	bne.n	800299a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800298a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800298e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f910 	bl	8002bb6 <RTC_ExitInitMode>
 8002996:	4603      	mov	r3, r0
 8002998:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	22ff      	movs	r2, #255	@ 0xff
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]

  return status;
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}

080029be <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80029dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0b5b      	lsrs	r3, r3, #13
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d11a      	bne.n	8002a52 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f90b 	bl	8002c3c <RTC_Bcd2ToByte>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f902 	bl	8002c3c <RTC_Bcd2ToByte>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	789b      	ldrb	r3, [r3, #2]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f8f9 	bl	8002c3c <RTC_Bcd2ToByte>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002a66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a6a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002a98:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f824 	bl	8002ae8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002acc:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f904 	bl	8002cdc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	775a      	strb	r2, [r3, #29]
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b44 <HAL_RTC_WaitForSynchro+0x48>)
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b10:	f7fe fc54 	bl	80013bc <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b16:	e009      	b.n	8002b2c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b18:	f7fe fc50 	bl	80013bc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b26:	d901      	bls.n	8002b2c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e007      	b.n	8002b3c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00017f5f 	.word	0x00017f5f

08002b48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d122      	bne.n	8002bac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b76:	f7fe fc21 	bl	80013bc <HAL_GetTick>
 8002b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b7c:	e00c      	b.n	8002b98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b7e:	f7fe fc1d 	bl	80013bc <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b8c:	d904      	bls.n	8002b98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <RTC_EnterInitMode+0x64>
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d1e8      	bne.n	8002b7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff8b 	bl	8002afc <HAL_RTC_WaitForSynchro>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002c0e:	e005      	b.n	8002c1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	3b0a      	subs	r3, #10
 8002c1a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	d8f6      	bhi.n	8002c10 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	b2db      	uxtb	r3, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3350      	adds	r3, #80	@ 0x50
 8002c8e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	601a      	str	r2, [r3, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3350      	adds	r3, #80	@ 0x50
 8002cc0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d105      	bne.n	8002d1a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fe f873 	bl	8000e00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f814 	bl	8002d50 <HAL_SD_InitCard>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00a      	b.n	8002d48 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b08e      	sub	sp, #56	@ 0x38
 8002d54:	af04      	add	r7, sp, #16
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d6c:	2376      	movs	r3, #118	@ 0x76
 8002d6e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681d      	ldr	r5, [r3, #0]
 8002d74:	466c      	mov	r4, sp
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f002 fa8b 	bl	80052a4 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <HAL_SD_InitCard+0xe8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 facc 	bl	8005336 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002d9e:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <HAL_SD_InitCard+0xe8>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002da4:	2002      	movs	r0, #2
 8002da6:	f7fe fb15 	bl	80013d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fe7a 	bl	8003aa4 <SD_PowerON>
 8002db0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e02e      	b.n	8002e2e <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fd99 	bl	8003908 <SD_InitCard>
 8002dd6:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e01b      	b.n	8002e2e <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 fb2b 	bl	800545a <SDMMC_CmdBlockLength>
 8002e04:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00f      	beq.n	8002e2c <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <HAL_SD_InitCard+0xec>)
 8002e12:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3728      	adds	r7, #40	@ 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bdb0      	pop	{r4, r5, r7, pc}
 8002e36:	bf00      	nop
 8002e38:	422580a0 	.word	0x422580a0
 8002e3c:	004005ff 	.word	0x004005ff

08002e40 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b092      	sub	sp, #72	@ 0x48
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e4e:	f7fe fab5 	bl	80013bc <HAL_GetTick>
 8002e52:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c5      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f040 81b8 	bne.w	80031f0 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d907      	bls.n	8002ea4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e98:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e1ac      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d002      	beq.n	8002ec2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebe:	025b      	lsls	r3, r3, #9
 8002ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	025b      	lsls	r3, r3, #9
 8002ecc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ece:	2390      	movs	r3, #144	@ 0x90
 8002ed0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002eda:	2301      	movs	r3, #1
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f107 0214 	add.w	r2, r7, #20
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fa8a 	bl	8005402 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d90a      	bls.n	8002f0a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 faee 	bl	80054e2 <SDMMC_CmdReadMultiBlock>
 8002f06:	6478      	str	r0, [r7, #68]	@ 0x44
 8002f08:	e009      	b.n	8002f1e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fac1 	bl	800549e <SDMMC_CmdReadSingleBlock>
 8002f1c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a7e      	ldr	r2, [pc, #504]	@ (8003124 <HAL_SD_ReadBlocks+0x2e4>)
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e159      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f4e:	e061      	b.n	8003014 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d03c      	beq.n	8002fd8 <HAL_SD_ReadBlocks+0x198>
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d039      	beq.n	8002fd8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f68:	e033      	b.n	8002fd2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 f9c3 	bl	80052fa <SDIO_ReadFIFO>
 8002f74:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f80:	3301      	adds	r3, #1
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f86:	3b01      	subs	r3, #1
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	3301      	adds	r3, #1
 8002f98:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fac:	3301      	adds	r3, #1
 8002fae:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	0e1b      	lsrs	r3, r3, #24
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fce:	3301      	adds	r3, #1
 8002fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd4:	2b07      	cmp	r3, #7
 8002fd6:	d9c8      	bls.n	8002f6a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fd8:	f7fe f9f0 	bl	80013bc <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d902      	bls.n	8002fee <HAL_SD_ReadBlocks+0x1ae>
 8002fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d112      	bne.n	8003014 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4c      	ldr	r2, [pc, #304]	@ (8003124 <HAL_SD_ReadBlocks+0x2e4>)
 8002ff4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0f4      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800301a:	f240 332a 	movw	r3, #810	@ 0x32a
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d095      	beq.n	8002f50 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d022      	beq.n	8003078 <HAL_SD_ReadBlocks+0x238>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d91f      	bls.n	8003078 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303c:	2b03      	cmp	r3, #3
 800303e:	d01b      	beq.n	8003078 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fab3 	bl	80055b0 <SDMMC_CmdStopTransfer>
 800304a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800304c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a33      	ldr	r2, [pc, #204]	@ (8003124 <HAL_SD_ReadBlocks+0x2e4>)
 8003058:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800305e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0c2      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_SD_ReadBlocks+0x254>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_SD_ReadBlocks+0x2e4>)
 800309a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	f043 0208 	orr.w	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0a1      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a15      	ldr	r2, [pc, #84]	@ (8003124 <HAL_SD_ReadBlocks+0x2e4>)
 80030ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	f043 0202 	orr.w	r2, r3, #2
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e087      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d064      	beq.n	80031c6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a08      	ldr	r2, [pc, #32]	@ (8003124 <HAL_SD_ReadBlocks+0x2e4>)
 8003102:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06d      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
 8003122:	bf00      	nop
 8003124:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f002 f8e4 	bl	80052fa <SDIO_ReadFIFO>
 8003132:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003136:	b2da      	uxtb	r2, r3
 8003138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313e:	3301      	adds	r3, #1
 8003140:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003144:	3b01      	subs	r3, #1
 8003146:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b2da      	uxtb	r2, r3
 800314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003150:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003154:	3301      	adds	r3, #1
 8003156:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800315a:	3b01      	subs	r3, #1
 800315c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800315e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2da      	uxtb	r2, r3
 8003164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003166:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	3301      	adds	r3, #1
 800316c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800316e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003170:	3b01      	subs	r3, #1
 8003172:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003176:	0e1b      	lsrs	r3, r3, #24
 8003178:	b2da      	uxtb	r2, r3
 800317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800317e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003180:	3301      	adds	r3, #1
 8003182:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003186:	3b01      	subs	r3, #1
 8003188:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800318a:	f7fe f917 	bl	80013bc <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003196:	429a      	cmp	r2, r3
 8003198:	d902      	bls.n	80031a0 <HAL_SD_ReadBlocks+0x360>
 800319a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800319c:	2b00      	cmp	r3, #0
 800319e:	d112      	bne.n	80031c6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a18      	ldr	r2, [pc, #96]	@ (8003208 <HAL_SD_ReadBlocks+0x3c8>)
 80031a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e01b      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_SD_ReadBlocks+0x39a>
 80031d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1a6      	bne.n	8003128 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f240 523a 	movw	r2, #1338	@ 0x53a
 80031e2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e006      	b.n	80031fe <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3748      	adds	r7, #72	@ 0x48
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	004005ff 	.word	0x004005ff

0800320c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b092      	sub	sp, #72	@ 0x48
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800321a:	f7fe f8cf 	bl	80013bc <HAL_GetTick>
 800321e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e16d      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	f040 8160 	bne.w	800350c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	429a      	cmp	r2, r3
 800325e:	d907      	bls.n	8003270 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e154      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2203      	movs	r2, #3
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	2b01      	cmp	r3, #1
 8003286:	d002      	beq.n	800328e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	025b      	lsls	r3, r3, #9
 8003298:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800329a:	2390      	movs	r3, #144	@ 0x90
 800329c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032a6:	2301      	movs	r3, #1
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f107 0218 	add.w	r2, r7, #24
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 f8a4 	bl	8005402 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d90a      	bls.n	80032d6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 f94c 	bl	800556a <SDMMC_CmdWriteMultiBlock>
 80032d2:	6478      	str	r0, [r7, #68]	@ 0x44
 80032d4:	e009      	b.n	80032ea <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2210      	movs	r2, #16
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 f91f 	bl	8005526 <SDMMC_CmdWriteSingleBlock>
 80032e8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a8b      	ldr	r2, [pc, #556]	@ (8003524 <HAL_SD_WriteBlocks+0x318>)
 80032f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032fe:	431a      	orrs	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e101      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800331a:	e065      	b.n	80033e8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d040      	beq.n	80033ac <HAL_SD_WriteBlocks+0x1a0>
 800332a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d03d      	beq.n	80033ac <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003330:	2300      	movs	r3, #0
 8003332:	643b      	str	r3, [r7, #64]	@ 0x40
 8003334:	e037      	b.n	80033a6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800333c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333e:	3301      	adds	r3, #1
 8003340:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003344:	3b01      	subs	r3, #1
 8003346:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	021a      	lsls	r2, r3, #8
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003356:	3301      	adds	r3, #1
 8003358:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800335a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335c:	3b01      	subs	r3, #1
 800335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	041a      	lsls	r2, r3, #16
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	3301      	adds	r3, #1
 8003370:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003374:	3b01      	subs	r3, #1
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	061a      	lsls	r2, r3, #24
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003386:	3301      	adds	r3, #1
 8003388:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800338a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338c:	3b01      	subs	r3, #1
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f107 0214 	add.w	r2, r7, #20
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f001 ffba 	bl	8005314 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a2:	3301      	adds	r3, #1
 80033a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80033a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	d9c4      	bls.n	8003336 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80033ac:	f7fe f806 	bl	80013bc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d902      	bls.n	80033c2 <HAL_SD_WriteBlocks+0x1b6>
 80033bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d112      	bne.n	80033e8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a57      	ldr	r2, [pc, #348]	@ (8003524 <HAL_SD_WriteBlocks+0x318>)
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e098      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ee:	f240 331a 	movw	r3, #794	@ 0x31a
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d091      	beq.n	800331c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d022      	beq.n	800344c <HAL_SD_WriteBlocks+0x240>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d91f      	bls.n	800344c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	2b03      	cmp	r3, #3
 8003412:	d01b      	beq.n	800344c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f002 f8c9 	bl	80055b0 <SDMMC_CmdStopTransfer>
 800341e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a3e      	ldr	r2, [pc, #248]	@ (8003524 <HAL_SD_WriteBlocks+0x318>)
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e066      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_SD_WriteBlocks+0x25c>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2d      	ldr	r2, [pc, #180]	@ (8003524 <HAL_SD_WriteBlocks+0x318>)
 800346e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	f043 0208 	orr.w	r2, r3, #8
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e045      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a20      	ldr	r2, [pc, #128]	@ (8003524 <HAL_SD_WriteBlocks+0x318>)
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	f043 0202 	orr.w	r2, r3, #2
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e02b      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d012      	beq.n	80034f6 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a13      	ldr	r2, [pc, #76]	@ (8003524 <HAL_SD_WriteBlocks+0x318>)
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e011      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e006      	b.n	800351a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3748      	adds	r7, #72	@ 0x48
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	004005ff 	.word	0x004005ff

08003528 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003536:	0f9b      	lsrs	r3, r3, #30
 8003538:	b2da      	uxtb	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2da      	uxtb	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003554:	0e1b      	lsrs	r3, r3, #24
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	b2da      	uxtb	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003566:	0c1b      	lsrs	r3, r3, #16
 8003568:	b2da      	uxtb	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	b2da      	uxtb	r2, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003588:	0d1b      	lsrs	r3, r3, #20
 800358a:	b29a      	uxth	r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a6:	0bdb      	lsrs	r3, r3, #15
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b8:	0b9b      	lsrs	r3, r3, #14
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035dc:	0b1b      	lsrs	r3, r3, #12
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d163      	bne.n	80036c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035fc:	009a      	lsls	r2, r3, #2
 80035fe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003602:	4013      	ands	r3, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003608:	0f92      	lsrs	r2, r2, #30
 800360a:	431a      	orrs	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003614:	0edb      	lsrs	r3, r3, #27
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	b2da      	uxtb	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003626:	0e1b      	lsrs	r3, r3, #24
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	b2da      	uxtb	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003638:	0d5b      	lsrs	r3, r3, #21
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	b2da      	uxtb	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364a:	0c9b      	lsrs	r3, r3, #18
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	b2da      	uxtb	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365c:	0bdb      	lsrs	r3, r3, #15
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	b2da      	uxtb	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	7e1b      	ldrb	r3, [r3, #24]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	3302      	adds	r3, #2
 8003680:	2201      	movs	r2, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800368a:	fb03 f202 	mul.w	r2, r3, r2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	7a1b      	ldrb	r3, [r3, #8]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80036ac:	0a52      	lsrs	r2, r2, #9
 80036ae:	fb03 f202 	mul.w	r2, r3, r2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80036be:	e031      	b.n	8003724 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d11d      	bne.n	8003704 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	431a      	orrs	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	3301      	adds	r3, #1
 80036e4:	029a      	lsls	r2, r3, #10
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	661a      	str	r2, [r3, #96]	@ 0x60
 8003702:	e00f      	b.n	8003724 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a58      	ldr	r2, [pc, #352]	@ (800386c <HAL_SD_GetCardCSD+0x344>)
 800370a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e09d      	b.n	8003860 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003728:	0b9b      	lsrs	r3, r3, #14
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	b2da      	uxtb	r2, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373a:	09db      	lsrs	r3, r3, #7
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003742:	b2da      	uxtb	r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375c:	0fdb      	lsrs	r3, r3, #31
 800375e:	b2da      	uxtb	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	0f5b      	lsrs	r3, r3, #29
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	b2da      	uxtb	r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	b2da      	uxtb	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	0d9b      	lsrs	r3, r3, #22
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	b2da      	uxtb	r2, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	0d5b      	lsrs	r3, r3, #21
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	0c1b      	lsrs	r3, r3, #16
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	0bdb      	lsrs	r3, r3, #15
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	0b9b      	lsrs	r3, r3, #14
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f6:	0b5b      	lsrs	r3, r3, #13
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	0b1b      	lsrs	r3, r3, #12
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	b2da      	uxtb	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381e:	0a9b      	lsrs	r3, r3, #10
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	b2da      	uxtb	r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	b2da      	uxtb	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800384e:	b2da      	uxtb	r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	004005ff 	.word	0x004005ff

08003870 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f970 	bl	8003bc0 <SD_SendStatus>
 80038e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	0a5b      	lsrs	r3, r3, #9
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038fe:	693b      	ldr	r3, [r7, #16]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003908:	b5b0      	push	{r4, r5, r7, lr}
 800390a:	b094      	sub	sp, #80	@ 0x50
 800390c:	af04      	add	r7, sp, #16
 800390e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003910:	2301      	movs	r3, #1
 8003912:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fd1a 	bl	8005352 <SDIO_GetPowerState>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003924:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003928:	e0b8      	b.n	8003a9c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	2b03      	cmp	r3, #3
 8003930:	d02f      	beq.n	8003992 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f001 ff01 	bl	800573e <SDMMC_CmdSendCID>
 800393c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800393e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <SD_InitCard+0x40>
    {
      return errorstate;
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	e0a9      	b.n	8003a9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fd44 	bl	80053dc <SDIO_GetResponse>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2104      	movs	r1, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f001 fd3b 	bl	80053dc <SDIO_GetResponse>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2108      	movs	r1, #8
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fd32 	bl	80053dc <SDIO_GetResponse>
 8003978:	4602      	mov	r2, r0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	210c      	movs	r1, #12
 8003984:	4618      	mov	r0, r3
 8003986:	f001 fd29 	bl	80053dc <SDIO_GetResponse>
 800398a:	4602      	mov	r2, r0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	2b03      	cmp	r3, #3
 8003998:	d00d      	beq.n	80039b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f107 020e 	add.w	r2, r7, #14
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 ff07 	bl	80057b8 <SDMMC_CmdSetRelAdd>
 80039aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80039b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b4:	e072      	b.n	8003a9c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d036      	beq.n	8003a2c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f001 fed1 	bl	800577a <SDMMC_CmdSendCSD>
 80039d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80039e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e2:	e05b      	b.n	8003a9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 fcf6 	bl	80053dc <SDIO_GetResponse>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2104      	movs	r1, #4
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fced 	bl	80053dc <SDIO_GetResponse>
 8003a02:	4602      	mov	r2, r0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fce4 	bl	80053dc <SDIO_GetResponse>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	210c      	movs	r1, #12
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 fcdb 	bl	80053dc <SDIO_GetResponse>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2104      	movs	r1, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fcd2 	bl	80053dc <SDIO_GetResponse>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	0d1a      	lsrs	r2, r3, #20
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fd6e 	bl	8003528 <HAL_SD_GetCardCSD>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a56:	e021      	b.n	8003a9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	2200      	movs	r2, #0
 8003a64:	461c      	mov	r4, r3
 8003a66:	4615      	mov	r5, r2
 8003a68:	4622      	mov	r2, r4
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	4608      	mov	r0, r1
 8003a6e:	f001 fdc1 	bl	80055f4 <SDMMC_CmdSelDesel>
 8003a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <SD_InitCard+0x176>
  {
    return errorstate;
 8003a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7c:	e00e      	b.n	8003a9c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681d      	ldr	r5, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	466c      	mov	r4, sp
 8003a86:	f103 0210 	add.w	r2, r3, #16
 8003a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a90:	3304      	adds	r3, #4
 8003a92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a94:	4628      	mov	r0, r5
 8003a96:	f001 fc05 	bl	80052a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3740      	adds	r7, #64	@ 0x40
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bdb0      	pop	{r4, r5, r7, pc}

08003aa4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 fdbc 	bl	800563a <SDMMC_CmdGoIdleState>
 8003ac2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <SD_PowerON+0x2a>
  {
    return errorstate;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	e072      	b.n	8003bb4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 fdcf 	bl	8005676 <SDMMC_CmdOperCond>
 8003ad8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fda5 	bl	800563a <SDMMC_CmdGoIdleState>
 8003af0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	e05b      	b.n	8003bb4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d137      	bne.n	8003b7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fdcf 	bl	80056b4 <SDMMC_CmdAppCommand>
 8003b16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02d      	beq.n	8003b7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b22:	e047      	b.n	8003bb4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 fdc2 	bl	80056b4 <SDMMC_CmdAppCommand>
 8003b30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <SD_PowerON+0x98>
    {
      return errorstate;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	e03b      	b.n	8003bb4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	491e      	ldr	r1, [pc, #120]	@ (8003bbc <SD_PowerON+0x118>)
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 fdd8 	bl	80056f8 <SDMMC_CmdAppOperCommand>
 8003b48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b54:	e02e      	b.n	8003bb4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 fc3d 	bl	80053dc <SDIO_GetResponse>
 8003b62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	0fdb      	lsrs	r3, r3, #31
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <SD_PowerON+0xcc>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <SD_PowerON+0xce>
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]

    count++;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d802      	bhi.n	8003b8a <SD_PowerON+0xe6>
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0cc      	beq.n	8003b24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d902      	bls.n	8003b9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b98:	e00c      	b.n	8003bb4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003baa:	e002      	b.n	8003bb2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	c1100000 	.word	0xc1100000

08003bc0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bd4:	e018      	b.n	8003c08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f001 fe09 	bl	80057fa <SDMMC_CmdSendStatus>
 8003be8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	e009      	b.n	8003c08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fbee 	bl	80053dc <SDIO_GetResponse>
 8003c00:	4602      	mov	r2, r0
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07b      	b.n	8003d1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c32:	d009      	beq.n	8003c48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
 8003c3a:	e005      	b.n	8003c48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd f934 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ccc:	ea42 0103 	orr.w	r1, r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0104 	and.w	r1, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	f003 0210 	and.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e041      	b.n	8003db8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fd f909 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f000 f9b5 	bl	80040d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d001      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04e      	b.n	8003e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	@ (8003e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d022      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e02:	d01d      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1f      	ldr	r2, [pc, #124]	@ (8003e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	@ (8003e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	@ (8003e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d111      	bne.n	8003e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d010      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	e007      	b.n	8003e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40001800 	.word	0x40001800

08003ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d020      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0202 	mvn.w	r2, #2
 8003ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8d2 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8c4 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8d5 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d020      	beq.n	8003f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0204 	mvn.w	r2, #4
 8003f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8ac 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f89e 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8af 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0208 	mvn.w	r2, #8
 8003f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2204      	movs	r2, #4
 8003f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f886 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f878 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f889 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0210 	mvn.w	r2, #16
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f860 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f852 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f863 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0201 	mvn.w	r2, #1
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc fe0c 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00c      	beq.n	8004030 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f97c 	bl	8004328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f834 	bl	80040bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0220 	mvn.w	r2, #32
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f94e 	bl	8004314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a43      	ldr	r2, [pc, #268]	@ (80041f0 <TIM_Base_SetConfig+0x120>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ee:	d00f      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a40      	ldr	r2, [pc, #256]	@ (80041f4 <TIM_Base_SetConfig+0x124>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00b      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3f      	ldr	r2, [pc, #252]	@ (80041f8 <TIM_Base_SetConfig+0x128>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3e      	ldr	r2, [pc, #248]	@ (80041fc <TIM_Base_SetConfig+0x12c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3d      	ldr	r2, [pc, #244]	@ (8004200 <TIM_Base_SetConfig+0x130>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d108      	bne.n	8004122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a32      	ldr	r2, [pc, #200]	@ (80041f0 <TIM_Base_SetConfig+0x120>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d02b      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004130:	d027      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2f      	ldr	r2, [pc, #188]	@ (80041f4 <TIM_Base_SetConfig+0x124>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d023      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2e      	ldr	r2, [pc, #184]	@ (80041f8 <TIM_Base_SetConfig+0x128>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01f      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2d      	ldr	r2, [pc, #180]	@ (80041fc <TIM_Base_SetConfig+0x12c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01b      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2c      	ldr	r2, [pc, #176]	@ (8004200 <TIM_Base_SetConfig+0x130>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d017      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2b      	ldr	r2, [pc, #172]	@ (8004204 <TIM_Base_SetConfig+0x134>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <TIM_Base_SetConfig+0x138>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00f      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a29      	ldr	r2, [pc, #164]	@ (800420c <TIM_Base_SetConfig+0x13c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a28      	ldr	r2, [pc, #160]	@ (8004210 <TIM_Base_SetConfig+0x140>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a27      	ldr	r2, [pc, #156]	@ (8004214 <TIM_Base_SetConfig+0x144>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <TIM_Base_SetConfig+0x148>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a0e      	ldr	r2, [pc, #56]	@ (80041f0 <TIM_Base_SetConfig+0x120>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_Base_SetConfig+0xf2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a10      	ldr	r2, [pc, #64]	@ (8004200 <TIM_Base_SetConfig+0x130>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d103      	bne.n	80041ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f043 0204 	orr.w	r2, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40010400 	.word	0x40010400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	40001800 	.word	0x40001800
 8004214:	40001c00 	.word	0x40001c00
 8004218:	40002000 	.word	0x40002000

0800421c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004230:	2302      	movs	r3, #2
 8004232:	e05a      	b.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a21      	ldr	r2, [pc, #132]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d022      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004280:	d01d      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1d      	ldr	r2, [pc, #116]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d018      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1a      	ldr	r2, [pc, #104]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a17      	ldr	r2, [pc, #92]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10c      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40010400 	.word	0x40010400
 800430c:	40014000 	.word	0x40014000
 8004310:	40001800 	.word	0x40001800

08004314 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e042      	b.n	80043d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fe24 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2224      	movs	r2, #36	@ 0x24
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800437e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fd1b 	bl	8004dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d121      	bne.n	800443a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_UART_Transmit_IT+0x26>
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e01a      	b.n	800443c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	@ 0x21
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004434:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800443a:	2302      	movs	r3, #2
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	d112      	bne.n	8004488 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_UART_Receive_IT+0x26>
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e00b      	b.n	800448a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	461a      	mov	r2, r3
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fac8 	bl	8004a14 <UART_Start_Receive_IT>
 8004484:	4603      	mov	r3, r0
 8004486:	e000      	b.n	800448a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004488:	2302      	movs	r3, #2
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b0ba      	sub	sp, #232	@ 0xe8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_UART_IRQHandler+0x66>
 80044e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fba4 	bl	8004c40 <UART_Receive_IT>
      return;
 80044f8:	e273      	b.n	80049e2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80de 	beq.w	80046c0 <HAL_UART_IRQHandler+0x22c>
 8004504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004514:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80d1 	beq.w	80046c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_UART_IRQHandler+0xae>
 800452a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800452e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_UART_IRQHandler+0xd2>
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	f043 0202 	orr.w	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_UART_IRQHandler+0xf6>
 8004572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d011      	beq.n	80045ba <HAL_UART_IRQHandler+0x126>
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b2:	f043 0208 	orr.w	r2, r3, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 820a 	beq.w	80049d8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_UART_IRQHandler+0x14e>
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fb2f 	bl	8004c40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ec:	2b40      	cmp	r3, #64	@ 0x40
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_UART_IRQHandler+0x17a>
 8004606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d04f      	beq.n	80046ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa3a 	bl	8004a88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b40      	cmp	r3, #64	@ 0x40
 8004620:	d141      	bne.n	80046a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3314      	adds	r3, #20
 8004628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800463c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800464e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800465a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1d9      	bne.n	8004622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d013      	beq.n	800469e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	4a8a      	ldr	r2, [pc, #552]	@ (80048a4 <HAL_UART_IRQHandler+0x410>)
 800467c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd f84b 	bl	800171e <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e00e      	b.n	80046bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9a2 	bl	80049e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e00a      	b.n	80046bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f99e 	bl	80049e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e006      	b.n	80046bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f99a 	bl	80049e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046ba:	e18d      	b.n	80049d8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	bf00      	nop
    return;
 80046be:	e18b      	b.n	80049d8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f040 8167 	bne.w	8004998 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8160 	beq.w	8004998 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8159 	beq.w	8004998 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	f040 80ce 	bne.w	80048a8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80a9 	beq.w	8004874 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800472a:	429a      	cmp	r2, r3
 800472c:	f080 80a2 	bcs.w	8004874 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004736:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004742:	f000 8088 	beq.w	8004856 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800475c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004772:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800477e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800478a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1d9      	bne.n	8004746 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e1      	bne.n	8004792 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e3      	bne.n	80047ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004826:	f023 0310 	bic.w	r3, r3, #16
 800482a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004838:	65ba      	str	r2, [r7, #88]	@ 0x58
 800483a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800483e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e3      	bne.n	8004814 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004850:	4618      	mov	r0, r3
 8004852:	f7fc fef4 	bl	800163e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004864:	b29b      	uxth	r3, r3
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	b29b      	uxth	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f8c5 	bl	80049fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004872:	e0b3      	b.n	80049dc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800487c:	429a      	cmp	r2, r3
 800487e:	f040 80ad 	bne.w	80049dc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800488c:	f040 80a6 	bne.w	80049dc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f8ad 	bl	80049fc <HAL_UARTEx_RxEventCallback>
      return;
 80048a2:	e09b      	b.n	80049dc <HAL_UART_IRQHandler+0x548>
 80048a4:	08004b4f 	.word	0x08004b4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 808e 	beq.w	80049e0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80048c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8089 	beq.w	80049e0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80048f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e3      	bne.n	80048ce <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	623b      	str	r3, [r7, #32]
   return(result);
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800492a:	633a      	str	r2, [r7, #48]	@ 0x30
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e3      	bne.n	8004906 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60fb      	str	r3, [r7, #12]
   return(result);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004970:	61fa      	str	r2, [r7, #28]
 8004972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	617b      	str	r3, [r7, #20]
   return(result);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e3      	bne.n	800494c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800498a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f833 	bl	80049fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004996:	e023      	b.n	80049e0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d009      	beq.n	80049b8 <HAL_UART_IRQHandler+0x524>
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f8dd 	bl	8004b70 <UART_Transmit_IT>
    return;
 80049b6:	e014      	b.n	80049e2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00e      	beq.n	80049e2 <HAL_UART_IRQHandler+0x54e>
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f91d 	bl	8004c10 <UART_EndTransmit_IT>
    return;
 80049d6:	e004      	b.n	80049e2 <HAL_UART_IRQHandler+0x54e>
    return;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80049e0:	bf00      	nop
  }
}
 80049e2:	37e8      	adds	r7, #232	@ 0xe8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2222      	movs	r2, #34	@ 0x22
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0201 	orr.w	r2, r2, #1
 8004a68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0220 	orr.w	r2, r2, #32
 8004a78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b095      	sub	sp, #84	@ 0x54
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ab0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d119      	bne.n	8004b34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 0310 	bic.w	r3, r3, #16
 8004b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b20:	61ba      	str	r2, [r7, #24]
 8004b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6979      	ldr	r1, [r7, #20]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e5      	bne.n	8004b00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b42:	bf00      	nop
 8004b44:	3754      	adds	r7, #84	@ 0x54
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ff40 	bl	80049e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b21      	cmp	r3, #33	@ 0x21
 8004b82:	d13e      	bne.n	8004c02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8c:	d114      	bne.n	8004bb8 <UART_Transmit_IT+0x48>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d110      	bne.n	8004bb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004baa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	1c9a      	adds	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]
 8004bb6:	e008      	b.n	8004bca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6211      	str	r1, [r2, #32]
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10f      	bne.n	8004bfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fc f87b 	bl	8000d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08c      	sub	sp, #48	@ 0x30
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b22      	cmp	r3, #34	@ 0x22
 8004c5a:	f040 80aa 	bne.w	8004db2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c66:	d115      	bne.n	8004c94 <UART_Receive_IT+0x54>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d111      	bne.n	8004c94 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c92:	e024      	b.n	8004cde <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca2:	d007      	beq.n	8004cb4 <UART_Receive_IT+0x74>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <UART_Receive_IT+0x82>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e008      	b.n	8004cd4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4619      	mov	r1, r3
 8004cec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d15d      	bne.n	8004dae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0220 	bic.w	r2, r2, #32
 8004d00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d135      	bne.n	8004da4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f023 0310 	bic.w	r3, r3, #16
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d5e:	623a      	str	r2, [r7, #32]
 8004d60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	69f9      	ldr	r1, [r7, #28]
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e5      	bne.n	8004d3e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d10a      	bne.n	8004d96 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fe2d 	bl	80049fc <HAL_UARTEx_RxEventCallback>
 8004da2:	e002      	b.n	8004daa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fb ffa3 	bl	8000cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e002      	b.n	8004db4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3730      	adds	r7, #48	@ 0x30
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b0c0      	sub	sp, #256	@ 0x100
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	68d9      	ldr	r1, [r3, #12]
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	ea40 0301 	orr.w	r3, r0, r1
 8004de4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e14:	f021 010c 	bic.w	r1, r1, #12
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e22:	430b      	orrs	r3, r1
 8004e24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e36:	6999      	ldr	r1, [r3, #24]
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	ea40 0301 	orr.w	r3, r0, r1
 8004e42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b8f      	ldr	r3, [pc, #572]	@ (8005088 <UART_SetConfig+0x2cc>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d005      	beq.n	8004e5c <UART_SetConfig+0xa0>
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b8d      	ldr	r3, [pc, #564]	@ (800508c <UART_SetConfig+0x2d0>)
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d104      	bne.n	8004e66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e5c:	f7fd fabc 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8004e60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e64:	e003      	b.n	8004e6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e66:	f7fd faa3 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8004e6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e78:	f040 810c 	bne.w	8005094 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	1891      	adds	r1, r2, r2
 8004e94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e96:	415b      	adcs	r3, r3
 8004e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	eb12 0801 	adds.w	r8, r2, r1
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	eb43 0901 	adc.w	r9, r3, r1
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ebe:	4690      	mov	r8, r2
 8004ec0:	4699      	mov	r9, r3
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	eb18 0303 	adds.w	r3, r8, r3
 8004ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	462b      	mov	r3, r5
 8004ece:	eb49 0303 	adc.w	r3, r9, r3
 8004ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ee2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eea:	460b      	mov	r3, r1
 8004eec:	18db      	adds	r3, r3, r3
 8004eee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	eb42 0303 	adc.w	r3, r2, r3
 8004ef6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ef8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004efc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f00:	f7fb f9be 	bl	8000280 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4b61      	ldr	r3, [pc, #388]	@ (8005090 <UART_SetConfig+0x2d4>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	011c      	lsls	r4, r3, #4
 8004f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f34:	4641      	mov	r1, r8
 8004f36:	eb12 0a01 	adds.w	sl, r2, r1
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f54:	4692      	mov	sl, r2
 8004f56:	469b      	mov	fp, r3
 8004f58:	4643      	mov	r3, r8
 8004f5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f62:	464b      	mov	r3, r9
 8004f64:	eb4b 0303 	adc.w	r3, fp, r3
 8004f68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f80:	460b      	mov	r3, r1
 8004f82:	18db      	adds	r3, r3, r3
 8004f84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f86:	4613      	mov	r3, r2
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f96:	f7fb f973 	bl	8000280 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <UART_SetConfig+0x2d4>)
 8004fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2264      	movs	r2, #100	@ 0x64
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	1acb      	subs	r3, r1, r3
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fb6:	4b36      	ldr	r3, [pc, #216]	@ (8005090 <UART_SetConfig+0x2d4>)
 8004fb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fc4:	441c      	add	r4, r3
 8004fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	1891      	adds	r1, r2, r2
 8004fde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fe0:	415b      	adcs	r3, r3
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fe8:	4641      	mov	r1, r8
 8004fea:	1851      	adds	r1, r2, r1
 8004fec:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fee:	4649      	mov	r1, r9
 8004ff0:	414b      	adcs	r3, r1
 8004ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005000:	4659      	mov	r1, fp
 8005002:	00cb      	lsls	r3, r1, #3
 8005004:	4651      	mov	r1, sl
 8005006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500a:	4651      	mov	r1, sl
 800500c:	00ca      	lsls	r2, r1, #3
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	4603      	mov	r3, r0
 8005014:	4642      	mov	r2, r8
 8005016:	189b      	adds	r3, r3, r2
 8005018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800501c:	464b      	mov	r3, r9
 800501e:	460a      	mov	r2, r1
 8005020:	eb42 0303 	adc.w	r3, r2, r3
 8005024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005034:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005038:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800503c:	460b      	mov	r3, r1
 800503e:	18db      	adds	r3, r3, r3
 8005040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005042:	4613      	mov	r3, r2
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800504a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800504e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005052:	f7fb f915 	bl	8000280 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <UART_SetConfig+0x2d4>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	@ 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	3332      	adds	r3, #50	@ 0x32
 800506e:	4a08      	ldr	r2, [pc, #32]	@ (8005090 <UART_SetConfig+0x2d4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 0207 	and.w	r2, r3, #7
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4422      	add	r2, r4
 8005082:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005084:	e106      	b.n	8005294 <UART_SetConfig+0x4d8>
 8005086:	bf00      	nop
 8005088:	40011000 	.word	0x40011000
 800508c:	40011400 	.word	0x40011400
 8005090:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005098:	2200      	movs	r2, #0
 800509a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800509e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050a6:	4642      	mov	r2, r8
 80050a8:	464b      	mov	r3, r9
 80050aa:	1891      	adds	r1, r2, r2
 80050ac:	6239      	str	r1, [r7, #32]
 80050ae:	415b      	adcs	r3, r3
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b6:	4641      	mov	r1, r8
 80050b8:	1854      	adds	r4, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb43 0501 	adc.w	r5, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	00eb      	lsls	r3, r5, #3
 80050ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ce:	00e2      	lsls	r2, r4, #3
 80050d0:	4614      	mov	r4, r2
 80050d2:	461d      	mov	r5, r3
 80050d4:	4643      	mov	r3, r8
 80050d6:	18e3      	adds	r3, r4, r3
 80050d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050dc:	464b      	mov	r3, r9
 80050de:	eb45 0303 	adc.w	r3, r5, r3
 80050e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005102:	4629      	mov	r1, r5
 8005104:	008b      	lsls	r3, r1, #2
 8005106:	4621      	mov	r1, r4
 8005108:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510c:	4621      	mov	r1, r4
 800510e:	008a      	lsls	r2, r1, #2
 8005110:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005114:	f7fb f8b4 	bl	8000280 <__aeabi_uldivmod>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4b60      	ldr	r3, [pc, #384]	@ (80052a0 <UART_SetConfig+0x4e4>)
 800511e:	fba3 2302 	umull	r2, r3, r3, r2
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	011c      	lsls	r4, r3, #4
 8005126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005130:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005134:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	1891      	adds	r1, r2, r2
 800513e:	61b9      	str	r1, [r7, #24]
 8005140:	415b      	adcs	r3, r3
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005148:	4641      	mov	r1, r8
 800514a:	1851      	adds	r1, r2, r1
 800514c:	6139      	str	r1, [r7, #16]
 800514e:	4649      	mov	r1, r9
 8005150:	414b      	adcs	r3, r1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005160:	4659      	mov	r1, fp
 8005162:	00cb      	lsls	r3, r1, #3
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516a:	4651      	mov	r1, sl
 800516c:	00ca      	lsls	r2, r1, #3
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	4603      	mov	r3, r0
 8005174:	4642      	mov	r2, r8
 8005176:	189b      	adds	r3, r3, r2
 8005178:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800517c:	464b      	mov	r3, r9
 800517e:	460a      	mov	r2, r1
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005192:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051a0:	4649      	mov	r1, r9
 80051a2:	008b      	lsls	r3, r1, #2
 80051a4:	4641      	mov	r1, r8
 80051a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051aa:	4641      	mov	r1, r8
 80051ac:	008a      	lsls	r2, r1, #2
 80051ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051b2:	f7fb f865 	bl	8000280 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	4b38      	ldr	r3, [pc, #224]	@ (80052a0 <UART_SetConfig+0x4e4>)
 80051be:	fba3 2301 	umull	r2, r3, r3, r1
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2264      	movs	r2, #100	@ 0x64
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	1acb      	subs	r3, r1, r3
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	3332      	adds	r3, #50	@ 0x32
 80051d0:	4a33      	ldr	r2, [pc, #204]	@ (80052a0 <UART_SetConfig+0x4e4>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051dc:	441c      	add	r4, r3
 80051de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e2:	2200      	movs	r2, #0
 80051e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80051e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	415b      	adcs	r3, r3
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051fc:	4641      	mov	r1, r8
 80051fe:	1851      	adds	r1, r2, r1
 8005200:	6039      	str	r1, [r7, #0]
 8005202:	4649      	mov	r1, r9
 8005204:	414b      	adcs	r3, r1
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005214:	4659      	mov	r1, fp
 8005216:	00cb      	lsls	r3, r1, #3
 8005218:	4651      	mov	r1, sl
 800521a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521e:	4651      	mov	r1, sl
 8005220:	00ca      	lsls	r2, r1, #3
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	4603      	mov	r3, r0
 8005228:	4642      	mov	r2, r8
 800522a:	189b      	adds	r3, r3, r2
 800522c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800522e:	464b      	mov	r3, r9
 8005230:	460a      	mov	r2, r1
 8005232:	eb42 0303 	adc.w	r3, r2, r3
 8005236:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	663b      	str	r3, [r7, #96]	@ 0x60
 8005242:	667a      	str	r2, [r7, #100]	@ 0x64
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005250:	4649      	mov	r1, r9
 8005252:	008b      	lsls	r3, r1, #2
 8005254:	4641      	mov	r1, r8
 8005256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800525a:	4641      	mov	r1, r8
 800525c:	008a      	lsls	r2, r1, #2
 800525e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005262:	f7fb f80d 	bl	8000280 <__aeabi_uldivmod>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <UART_SetConfig+0x4e4>)
 800526c:	fba3 1302 	umull	r1, r3, r3, r2
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	2164      	movs	r1, #100	@ 0x64
 8005274:	fb01 f303 	mul.w	r3, r1, r3
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	3332      	adds	r3, #50	@ 0x32
 800527e:	4a08      	ldr	r2, [pc, #32]	@ (80052a0 <UART_SetConfig+0x4e4>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	f003 020f 	and.w	r2, r3, #15
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4422      	add	r2, r4
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800529a:	46bd      	mov	sp, r7
 800529c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a0:	51eb851f 	.word	0x51eb851f

080052a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80052a4:	b084      	sub	sp, #16
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	f107 001c 	add.w	r0, r7, #28
 80052b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80052c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80052c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80052ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80052ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80052de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	b004      	add	sp, #16
 80052f8:	4770      	bx	lr

080052fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2203      	movs	r2, #3
 8005342:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0303 	and.w	r3, r3, #3
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800538c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005392:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005398:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80053a8:	f023 030f 	bic.w	r3, r3, #15
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	b2db      	uxtb	r3, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3314      	adds	r3, #20
 80053ea:	461a      	mov	r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
}  
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005428:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800542e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005434:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800544c:	2300      	movs	r3, #0

}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b088      	sub	sp, #32
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005468:	2310      	movs	r3, #16
 800546a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800546c:	2340      	movs	r3, #64	@ 0x40
 800546e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005478:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800547a:	f107 0308 	add.w	r3, r7, #8
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ff74 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800548a:	2110      	movs	r1, #16
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f9d7 	bl	8005840 <SDMMC_GetCmdResp1>
 8005492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005494:	69fb      	ldr	r3, [r7, #28]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b088      	sub	sp, #32
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054ac:	2311      	movs	r3, #17
 80054ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054b0:	2340      	movs	r3, #64	@ 0x40
 80054b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ff52 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ce:	2111      	movs	r1, #17
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f9b5 	bl	8005840 <SDMMC_GetCmdResp1>
 80054d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054d8:	69fb      	ldr	r3, [r7, #28]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054f0:	2312      	movs	r3, #18
 80054f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054f4:	2340      	movs	r3, #64	@ 0x40
 80054f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005500:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005502:	f107 0308 	add.w	r3, r7, #8
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff30 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800550e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005512:	2112      	movs	r1, #18
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f993 	bl	8005840 <SDMMC_GetCmdResp1>
 800551a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800551c:	69fb      	ldr	r3, [r7, #28]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b088      	sub	sp, #32
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005534:	2318      	movs	r3, #24
 8005536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005538:	2340      	movs	r3, #64	@ 0x40
 800553a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005540:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005544:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005546:	f107 0308 	add.w	r3, r7, #8
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ff0e 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005556:	2118      	movs	r1, #24
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f971 	bl	8005840 <SDMMC_GetCmdResp1>
 800555e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005560:	69fb      	ldr	r3, [r7, #28]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005578:	2319      	movs	r3, #25
 800557a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800557c:	2340      	movs	r3, #64	@ 0x40
 800557e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005588:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff feec 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	2119      	movs	r1, #25
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f94f 	bl	8005840 <SDMMC_GetCmdResp1>
 80055a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055bc:	230c      	movs	r3, #12
 80055be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055c0:	2340      	movs	r3, #64	@ 0x40
 80055c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff feca 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80055da:	4a05      	ldr	r2, [pc, #20]	@ (80055f0 <SDMMC_CmdStopTransfer+0x40>)
 80055dc:	210c      	movs	r1, #12
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f92e 	bl	8005840 <SDMMC_GetCmdResp1>
 80055e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055e6:	69fb      	ldr	r3, [r7, #28]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	05f5e100 	.word	0x05f5e100

080055f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	@ 0x28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005604:	2307      	movs	r3, #7
 8005606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005608:	2340      	movs	r3, #64	@ 0x40
 800560a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800560c:	2300      	movs	r3, #0
 800560e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005614:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005616:	f107 0310 	add.w	r3, r7, #16
 800561a:	4619      	mov	r1, r3
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff fea6 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005626:	2107      	movs	r1, #7
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f909 	bl	8005840 <SDMMC_GetCmdResp1>
 800562e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005632:	4618      	mov	r0, r3
 8005634:	3728      	adds	r7, #40	@ 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005656:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff fe85 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fb23 	bl	8005cb0 <SDMMC_GetCmdError>
 800566a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800566c:	69fb      	ldr	r3, [r7, #28]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b088      	sub	sp, #32
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800567e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005682:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005684:	2308      	movs	r3, #8
 8005686:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005688:	2340      	movs	r3, #64	@ 0x40
 800568a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005694:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fe66 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fab6 	bl	8005c14 <SDMMC_GetCmdResp7>
 80056a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056aa:	69fb      	ldr	r3, [r7, #28]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056c2:	2337      	movs	r3, #55	@ 0x37
 80056c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056c6:	2340      	movs	r3, #64	@ 0x40
 80056c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056d4:	f107 0308 	add.w	r3, r7, #8
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fe47 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80056e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e4:	2137      	movs	r1, #55	@ 0x37
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8aa 	bl	8005840 <SDMMC_GetCmdResp1>
 80056ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056ee:	69fb      	ldr	r3, [r7, #28]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800570e:	2329      	movs	r3, #41	@ 0x29
 8005710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005712:	2340      	movs	r3, #64	@ 0x40
 8005714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800571a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800571e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005720:	f107 0308 	add.w	r3, r7, #8
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff fe21 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f9bd 	bl	8005aac <SDMMC_GetCmdResp3>
 8005732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005734:	69fb      	ldr	r3, [r7, #28]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b088      	sub	sp, #32
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800574a:	2302      	movs	r3, #2
 800574c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800574e:	23c0      	movs	r3, #192	@ 0xc0
 8005750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800575a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800575c:	f107 0308 	add.w	r3, r7, #8
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fe03 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f957 	bl	8005a1c <SDMMC_GetCmdResp2>
 800576e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005770:	69fb      	ldr	r3, [r7, #28]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b088      	sub	sp, #32
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005788:	2309      	movs	r3, #9
 800578a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800578c:	23c0      	movs	r3, #192	@ 0xc0
 800578e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005794:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005798:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800579a:	f107 0308 	add.w	r3, r7, #8
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fde4 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f938 	bl	8005a1c <SDMMC_GetCmdResp2>
 80057ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ae:	69fb      	ldr	r3, [r7, #28]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80057c6:	2303      	movs	r3, #3
 80057c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057ca:	2340      	movs	r3, #64	@ 0x40
 80057cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057d8:	f107 0308 	add.w	r3, r7, #8
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fdc5 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	2103      	movs	r1, #3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f99d 	bl	8005b28 <SDMMC_GetCmdResp6>
 80057ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057f0:	69fb      	ldr	r3, [r7, #28]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b088      	sub	sp, #32
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005808:	230d      	movs	r3, #13
 800580a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800580c:	2340      	movs	r3, #64	@ 0x40
 800580e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800581a:	f107 0308 	add.w	r3, r7, #8
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fda4 	bl	800536e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582a:	210d      	movs	r1, #13
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f807 	bl	8005840 <SDMMC_GetCmdResp1>
 8005832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005834:	69fb      	ldr	r3, [r7, #28]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	460b      	mov	r3, r1
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800584e:	4b70      	ldr	r3, [pc, #448]	@ (8005a10 <SDMMC_GetCmdResp1+0x1d0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a70      	ldr	r2, [pc, #448]	@ (8005a14 <SDMMC_GetCmdResp1+0x1d4>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	0a5a      	lsrs	r2, r3, #9
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800586c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005870:	e0c9      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0ef      	beq.n	8005862 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1ea      	bne.n	8005862 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2204      	movs	r2, #4
 800589c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800589e:	2304      	movs	r3, #4
 80058a0:	e0b1      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0a6      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	22c5      	movs	r2, #197	@ 0xc5
 80058bc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff fd7f 	bl	80053c2 <SDIO_GetCommandResponse>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d001      	beq.n	80058d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e099      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80058d2:	2100      	movs	r1, #0
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fd81 	bl	80053dc <SDIO_GetResponse>
 80058da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4b4e      	ldr	r3, [pc, #312]	@ (8005a18 <SDMMC_GetCmdResp1+0x1d8>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e08d      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da02      	bge.n	80058f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80058f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058f4:	e087      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005900:	2340      	movs	r3, #64	@ 0x40
 8005902:	e080      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800590e:	2380      	movs	r3, #128	@ 0x80
 8005910:	e079      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800591c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005920:	e071      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800592c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005930:	e069      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800593c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005940:	e061      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800594c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005950:	e059      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800595c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005960:	e051      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800596c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005970:	e049      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800597c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005980:	e041      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800598c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005990:	e039      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800599c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059a0:	e031      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80059ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80059b0:	e029      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80059bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80059c0:	e021      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80059cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80059d0:	e019      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80059dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80059e0:	e011      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80059ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80059f0:	e009      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80059fc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005a00:	e001      	b.n	8005a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000000 	.word	0x20000000
 8005a14:	10624dd3 	.word	0x10624dd3
 8005a18:	fdffe008 	.word	0xfdffe008

08005a1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a24:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa4 <SDMMC_GetCmdResp2+0x88>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa8 <SDMMC_GetCmdResp2+0x8c>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	0a5b      	lsrs	r3, r3, #9
 8005a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a34:	fb02 f303 	mul.w	r3, r2, r3
 8005a38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1e5a      	subs	r2, r3, #1
 8005a3e:	60fa      	str	r2, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a48:	e026      	b.n	8005a98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0ef      	beq.n	8005a3a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1ea      	bne.n	8005a3a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2204      	movs	r2, #4
 8005a74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a76:	2304      	movs	r3, #4
 8005a78:	e00e      	b.n	8005a98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e003      	b.n	8005a98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	22c5      	movs	r2, #197	@ 0xc5
 8005a94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	20000000 	.word	0x20000000
 8005aa8:	10624dd3 	.word	0x10624dd3

08005aac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b20 <SDMMC_GetCmdResp3+0x74>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b24 <SDMMC_GetCmdResp3+0x78>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0a5b      	lsrs	r3, r3, #9
 8005ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1e5a      	subs	r2, r3, #1
 8005ace:	60fa      	str	r2, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ad4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ad8:	e01b      	b.n	8005b12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0ef      	beq.n	8005aca <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ea      	bne.n	8005aca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2204      	movs	r2, #4
 8005b04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b06:	2304      	movs	r3, #4
 8005b08:	e003      	b.n	8005b12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	22c5      	movs	r2, #197	@ 0xc5
 8005b0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000000 	.word	0x20000000
 8005b24:	10624dd3 	.word	0x10624dd3

08005b28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	460b      	mov	r3, r1
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b36:	4b35      	ldr	r3, [pc, #212]	@ (8005c0c <SDMMC_GetCmdResp6+0xe4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a35      	ldr	r2, [pc, #212]	@ (8005c10 <SDMMC_GetCmdResp6+0xe8>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	0a5b      	lsrs	r3, r3, #9
 8005b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	1e5a      	subs	r2, r3, #1
 8005b50:	61fa      	str	r2, [r7, #28]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d102      	bne.n	8005b5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b5a:	e052      	b.n	8005c02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b60:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0ef      	beq.n	8005b4c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1ea      	bne.n	8005b4c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2204      	movs	r2, #4
 8005b86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b88:	2304      	movs	r3, #4
 8005b8a:	e03a      	b.n	8005c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e02f      	b.n	8005c02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fc0d 	bl	80053c2 <SDIO_GetCommandResponse>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d001      	beq.n	8005bb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e025      	b.n	8005c02 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	22c5      	movs	r2, #197	@ 0xc5
 8005bba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fc0c 	bl	80053dc <SDIO_GetResponse>
 8005bc4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e011      	b.n	8005c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005be8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bec:	e009      	b.n	8005c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bfc:	e001      	b.n	8005c02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005bfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000000 	.word	0x20000000
 8005c10:	10624dd3 	.word	0x10624dd3

08005c14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ca8 <SDMMC_GetCmdResp7+0x94>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a22      	ldr	r2, [pc, #136]	@ (8005cac <SDMMC_GetCmdResp7+0x98>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	0a5b      	lsrs	r3, r3, #9
 8005c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c2c:	fb02 f303 	mul.w	r3, r2, r3
 8005c30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1e5a      	subs	r2, r3, #1
 8005c36:	60fa      	str	r2, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c40:	e02c      	b.n	8005c9c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0ef      	beq.n	8005c32 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1ea      	bne.n	8005c32 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c6e:	2304      	movs	r3, #4
 8005c70:	e014      	b.n	8005c9c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e009      	b.n	8005c9c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2240      	movs	r2, #64	@ 0x40
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c9a:	2300      	movs	r3, #0
  
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000000 	.word	0x20000000
 8005cac:	10624dd3 	.word	0x10624dd3

08005cb0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cb8:	4b11      	ldr	r3, [pc, #68]	@ (8005d00 <SDMMC_GetCmdError+0x50>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <SDMMC_GetCmdError+0x54>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	0a5b      	lsrs	r3, r3, #9
 8005cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1e5a      	subs	r2, r3, #1
 8005cd2:	60fa      	str	r2, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005cdc:	e009      	b.n	8005cf2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f1      	beq.n	8005cce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	22c5      	movs	r2, #197	@ 0xc5
 8005cee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000000 	.word	0x20000000
 8005d04:	10624dd3 	.word	0x10624dd3

08005d08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d0c:	4904      	ldr	r1, [pc, #16]	@ (8005d20 <MX_FATFS_Init+0x18>)
 8005d0e:	4805      	ldr	r0, [pc, #20]	@ (8005d24 <MX_FATFS_Init+0x1c>)
 8005d10:	f002 fc5c 	bl	80085cc <FATFS_LinkDriver>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	4b03      	ldr	r3, [pc, #12]	@ (8005d28 <MX_FATFS_Init+0x20>)
 8005d1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d1c:	bf00      	nop
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	200002c0 	.word	0x200002c0
 8005d24:	08009018 	.word	0x08009018
 8005d28:	200002bc 	.word	0x200002bc

08005d2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005d46:	f000 f86b 	bl	8005e20 <BSP_SD_IsDetected>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d001      	beq.n	8005d54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e005      	b.n	8005d60 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005d54:	4804      	ldr	r0, [pc, #16]	@ (8005d68 <BSP_SD_Init+0x2c>)
 8005d56:	f7fc ffcb 	bl	8002cf0 <HAL_SD_Init>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000098 	.word	0x20000098

08005d6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	4806      	ldr	r0, [pc, #24]	@ (8005da4 <BSP_SD_ReadBlocks+0x38>)
 8005d8a:	f7fd f859 	bl	8002e40 <HAL_SD_ReadBlocks>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000098 	.word	0x20000098

08005da8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	4806      	ldr	r0, [pc, #24]	@ (8005de0 <BSP_SD_WriteBlocks+0x38>)
 8005dc6:	f7fd fa21 	bl	800320c <HAL_SD_WriteBlocks>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000098 	.word	0x20000098

08005de4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005de8:	4805      	ldr	r0, [pc, #20]	@ (8005e00 <BSP_SD_GetCardState+0x1c>)
 8005dea:	f7fd fd6d 	bl	80038c8 <HAL_SD_GetCardState>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000098 	.word	0x20000098

08005e04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4803      	ldr	r0, [pc, #12]	@ (8005e1c <BSP_SD_GetCardInfo+0x18>)
 8005e10:	f7fd fd2e 	bl	8003870 <HAL_SD_GetCardInfo>
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000098 	.word	0x20000098

08005e20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005e26:	2301      	movs	r3, #1
 8005e28:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	b2db      	uxtb	r3, r3
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005e46:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <SD_CheckStatus+0x38>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005e4c:	f7ff ffca 	bl	8005de4 <BSP_SD_GetCardState>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005e56:	4b07      	ldr	r3, [pc, #28]	@ (8005e74 <SD_CheckStatus+0x38>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	4b04      	ldr	r3, [pc, #16]	@ (8005e74 <SD_CheckStatus+0x38>)
 8005e64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005e66:	4b03      	ldr	r3, [pc, #12]	@ (8005e74 <SD_CheckStatus+0x38>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b2db      	uxtb	r3, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000009 	.word	0x20000009

08005e78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005e82:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <SD_initialize+0x38>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005e88:	f7ff ff58 	bl	8005d3c <BSP_SD_Init>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff ffd1 	bl	8005e3c <SD_CheckStatus>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <SD_initialize+0x38>)
 8005ea0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005ea2:	4b03      	ldr	r3, [pc, #12]	@ (8005eb0 <SD_initialize+0x38>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b2db      	uxtb	r3, r3
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000009 	.word	0x20000009

08005eb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff ffbb 	bl	8005e3c <SD_CheckStatus>
 8005ec6:	4603      	mov	r3, r0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	68b8      	ldr	r0, [r7, #8]
 8005eee:	f7ff ff3d 	bl	8005d6c <BSP_SD_ReadBlocks>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d107      	bne.n	8005f08 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005ef8:	bf00      	nop
 8005efa:	f7ff ff73 	bl	8005de4 <BSP_SD_GetCardState>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1fa      	bne.n	8005efa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4603      	mov	r3, r0
 8005f20:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005f26:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	68b8      	ldr	r0, [r7, #8]
 8005f30:	f7ff ff3a 	bl	8005da8 <BSP_SD_WriteBlocks>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005f3a:	bf00      	nop
 8005f3c:	f7ff ff52 	bl	8005de4 <BSP_SD_GetCardState>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1fa      	bne.n	8005f3c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08c      	sub	sp, #48	@ 0x30
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	603a      	str	r2, [r7, #0]
 8005f5e:	71fb      	strb	r3, [r7, #7]
 8005f60:	460b      	mov	r3, r1
 8005f62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f6a:	4b25      	ldr	r3, [pc, #148]	@ (8006000 <SD_ioctl+0xac>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <SD_ioctl+0x28>
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e03c      	b.n	8005ff6 <SD_ioctl+0xa2>

  switch (cmd)
 8005f7c:	79bb      	ldrb	r3, [r7, #6]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d834      	bhi.n	8005fec <SD_ioctl+0x98>
 8005f82:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <SD_ioctl+0x34>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005fa1 	.word	0x08005fa1
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fd3 	.word	0x08005fd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005f9e:	e028      	b.n	8005ff2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff ff2d 	bl	8005e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005fb6:	e01c      	b.n	8005ff2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff ff21 	bl	8005e04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005fd0:	e00f      	b.n	8005ff2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005fd2:	f107 030c 	add.w	r3, r7, #12
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ff14 	bl	8005e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	0a5a      	lsrs	r2, r3, #9
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005fea:	e002      	b.n	8005ff2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3730      	adds	r7, #48	@ 0x30
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000009 	.word	0x20000009

08006004 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	4a08      	ldr	r2, [pc, #32]	@ (8006034 <disk_status+0x30>)
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	79fa      	ldrb	r2, [r7, #7]
 800601c:	4905      	ldr	r1, [pc, #20]	@ (8006034 <disk_status+0x30>)
 800601e:	440a      	add	r2, r1
 8006020:	7a12      	ldrb	r2, [r2, #8]
 8006022:	4610      	mov	r0, r2
 8006024:	4798      	blx	r3
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]
  return stat;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200002ec 	.word	0x200002ec

08006038 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	4a0e      	ldr	r2, [pc, #56]	@ (8006084 <disk_initialize+0x4c>)
 800604a:	5cd3      	ldrb	r3, [r2, r3]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d114      	bne.n	800607a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	4a0c      	ldr	r2, [pc, #48]	@ (8006084 <disk_initialize+0x4c>)
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	79fa      	ldrb	r2, [r7, #7]
 800605e:	4909      	ldr	r1, [pc, #36]	@ (8006084 <disk_initialize+0x4c>)
 8006060:	440a      	add	r2, r1
 8006062:	7a12      	ldrb	r2, [r2, #8]
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	4a03      	ldr	r2, [pc, #12]	@ (8006084 <disk_initialize+0x4c>)
 8006076:	2101      	movs	r1, #1
 8006078:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200002ec 	.word	0x200002ec

08006088 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	4a0a      	ldr	r2, [pc, #40]	@ (80060c4 <disk_read+0x3c>)
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	689c      	ldr	r4, [r3, #8]
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	4a07      	ldr	r2, [pc, #28]	@ (80060c4 <disk_read+0x3c>)
 80060a8:	4413      	add	r3, r2
 80060aa:	7a18      	ldrb	r0, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	47a0      	blx	r4
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd90      	pop	{r4, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200002ec 	.word	0x200002ec

080060c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4a0a      	ldr	r2, [pc, #40]	@ (8006104 <disk_write+0x3c>)
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68dc      	ldr	r4, [r3, #12]
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	4a07      	ldr	r2, [pc, #28]	@ (8006104 <disk_write+0x3c>)
 80060e8:	4413      	add	r3, r2
 80060ea:	7a18      	ldrb	r0, [r3, #8]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	47a0      	blx	r4
 80060f4:	4603      	mov	r3, r0
 80060f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd90      	pop	{r4, r7, pc}
 8006102:	bf00      	nop
 8006104:	200002ec 	.word	0x200002ec

08006108 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	603a      	str	r2, [r7, #0]
 8006112:	71fb      	strb	r3, [r7, #7]
 8006114:	460b      	mov	r3, r1
 8006116:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <disk_ioctl+0x38>)
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	79fa      	ldrb	r2, [r7, #7]
 8006126:	4906      	ldr	r1, [pc, #24]	@ (8006140 <disk_ioctl+0x38>)
 8006128:	440a      	add	r2, r1
 800612a:	7a10      	ldrb	r0, [r2, #8]
 800612c:	79b9      	ldrb	r1, [r7, #6]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4798      	blx	r3
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
  return res;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	200002ec 	.word	0x200002ec

08006144 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3301      	adds	r3, #1
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006154:	89fb      	ldrh	r3, [r7, #14]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	b21a      	sxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b21b      	sxth	r3, r3
 8006160:	4313      	orrs	r3, r2
 8006162:	b21b      	sxth	r3, r3
 8006164:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006166:	89fb      	ldrh	r3, [r7, #14]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3303      	adds	r3, #3
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	3202      	adds	r2, #2
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	3201      	adds	r2, #1
 800619a:	7812      	ldrb	r2, [r2, #0]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	887a      	ldrh	r2, [r7, #2]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	887b      	ldrh	r3, [r7, #2]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	607a      	str	r2, [r7, #4]
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	607a      	str	r2, [r7, #4]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00d      	beq.n	800627e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	1c53      	adds	r3, r2, #1
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	6179      	str	r1, [r7, #20]
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3b01      	subs	r3, #1
 8006276:	607b      	str	r3, [r7, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f1      	bne.n	8006262 <mem_cpy+0x1a>
	}
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800628a:	b480      	push	{r7}
 800628c:	b087      	sub	sp, #28
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	617a      	str	r2, [r7, #20]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f3      	bne.n	800629a <mem_set+0x10>
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	@ 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	61fa      	str	r2, [r7, #28]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	61ba      	str	r2, [r7, #24]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	1acb      	subs	r3, r1, r3
 80062ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <mem_cmp+0x40>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0eb      	beq.n	80062d8 <mem_cmp+0x18>

	return r;
 8006300:	697b      	ldr	r3, [r7, #20]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3724      	adds	r7, #36	@ 0x24
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006318:	e002      	b.n	8006320 <chk_chr+0x12>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3301      	adds	r3, #1
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <chk_chr+0x26>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	4293      	cmp	r3, r2
 8006332:	d1f2      	bne.n	800631a <chk_chr+0xc>
	return *str;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	781b      	ldrb	r3, [r3, #0]
}
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e029      	b.n	80063ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006358:	4a27      	ldr	r2, [pc, #156]	@ (80063f8 <chk_lock+0xb4>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	4413      	add	r3, r2
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01d      	beq.n	80063a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006366:	4a24      	ldr	r2, [pc, #144]	@ (80063f8 <chk_lock+0xb4>)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	4413      	add	r3, r2
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d116      	bne.n	80063a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006378:	4a1f      	ldr	r2, [pc, #124]	@ (80063f8 <chk_lock+0xb4>)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	4413      	add	r3, r2
 8006380:	3304      	adds	r3, #4
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006388:	429a      	cmp	r2, r3
 800638a:	d10c      	bne.n	80063a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800638c:	4a1a      	ldr	r2, [pc, #104]	@ (80063f8 <chk_lock+0xb4>)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	4413      	add	r3, r2
 8006394:	3308      	adds	r3, #8
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800639c:	429a      	cmp	r2, r3
 800639e:	d102      	bne.n	80063a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063a0:	e007      	b.n	80063b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d9d2      	bls.n	8006358 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d109      	bne.n	80063cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <chk_lock+0x80>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d101      	bne.n	80063c8 <chk_lock+0x84>
 80063c4:	2300      	movs	r3, #0
 80063c6:	e010      	b.n	80063ea <chk_lock+0xa6>
 80063c8:	2312      	movs	r3, #18
 80063ca:	e00e      	b.n	80063ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <chk_lock+0xa0>
 80063d2:	4a09      	ldr	r2, [pc, #36]	@ (80063f8 <chk_lock+0xb4>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	4413      	add	r3, r2
 80063da:	330c      	adds	r3, #12
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e2:	d101      	bne.n	80063e8 <chk_lock+0xa4>
 80063e4:	2310      	movs	r3, #16
 80063e6:	e000      	b.n	80063ea <chk_lock+0xa6>
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	200002cc 	.word	0x200002cc

080063fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	e002      	b.n	800640e <enq_lock+0x12>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3301      	adds	r3, #1
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d806      	bhi.n	8006422 <enq_lock+0x26>
 8006414:	4a09      	ldr	r2, [pc, #36]	@ (800643c <enq_lock+0x40>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	4413      	add	r3, r2
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f2      	bne.n	8006408 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b02      	cmp	r3, #2
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	200002cc 	.word	0x200002cc

08006440 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e01f      	b.n	8006490 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006450:	4a41      	ldr	r2, [pc, #260]	@ (8006558 <inc_lock+0x118>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	4413      	add	r3, r2
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d113      	bne.n	800648a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006462:	4a3d      	ldr	r2, [pc, #244]	@ (8006558 <inc_lock+0x118>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	4413      	add	r3, r2
 800646a:	3304      	adds	r3, #4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006472:	429a      	cmp	r2, r3
 8006474:	d109      	bne.n	800648a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006476:	4a38      	ldr	r2, [pc, #224]	@ (8006558 <inc_lock+0x118>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	4413      	add	r3, r2
 800647e:	3308      	adds	r3, #8
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006486:	429a      	cmp	r2, r3
 8006488:	d006      	beq.n	8006498 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d9dc      	bls.n	8006450 <inc_lock+0x10>
 8006496:	e000      	b.n	800649a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006498:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d132      	bne.n	8006506 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e002      	b.n	80064ac <inc_lock+0x6c>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d806      	bhi.n	80064c0 <inc_lock+0x80>
 80064b2:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <inc_lock+0x118>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	4413      	add	r3, r2
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f2      	bne.n	80064a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d101      	bne.n	80064ca <inc_lock+0x8a>
 80064c6:	2300      	movs	r3, #0
 80064c8:	e040      	b.n	800654c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4922      	ldr	r1, [pc, #136]	@ (8006558 <inc_lock+0x118>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	440b      	add	r3, r1
 80064d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	491e      	ldr	r1, [pc, #120]	@ (8006558 <inc_lock+0x118>)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	440b      	add	r3, r1
 80064e4:	3304      	adds	r3, #4
 80064e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	491a      	ldr	r1, [pc, #104]	@ (8006558 <inc_lock+0x118>)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	440b      	add	r3, r1
 80064f4:	3308      	adds	r3, #8
 80064f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80064f8:	4a17      	ldr	r2, [pc, #92]	@ (8006558 <inc_lock+0x118>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	4413      	add	r3, r2
 8006500:	330c      	adds	r3, #12
 8006502:	2200      	movs	r2, #0
 8006504:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <inc_lock+0xe0>
 800650c:	4a12      	ldr	r2, [pc, #72]	@ (8006558 <inc_lock+0x118>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	4413      	add	r3, r2
 8006514:	330c      	adds	r3, #12
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <inc_lock+0xe0>
 800651c:	2300      	movs	r3, #0
 800651e:	e015      	b.n	800654c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d108      	bne.n	8006538 <inc_lock+0xf8>
 8006526:	4a0c      	ldr	r2, [pc, #48]	@ (8006558 <inc_lock+0x118>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	4413      	add	r3, r2
 800652e:	330c      	adds	r3, #12
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	e001      	b.n	800653c <inc_lock+0xfc>
 8006538:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800653c:	4906      	ldr	r1, [pc, #24]	@ (8006558 <inc_lock+0x118>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	440b      	add	r3, r1
 8006544:	330c      	adds	r3, #12
 8006546:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	200002cc 	.word	0x200002cc

0800655c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3b01      	subs	r3, #1
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d825      	bhi.n	80065bc <dec_lock+0x60>
		n = Files[i].ctr;
 8006570:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <dec_lock+0x74>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4413      	add	r3, r2
 8006578:	330c      	adds	r3, #12
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800657e:	89fb      	ldrh	r3, [r7, #14]
 8006580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006584:	d101      	bne.n	800658a <dec_lock+0x2e>
 8006586:	2300      	movs	r3, #0
 8006588:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800658a:	89fb      	ldrh	r3, [r7, #14]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <dec_lock+0x3a>
 8006590:	89fb      	ldrh	r3, [r7, #14]
 8006592:	3b01      	subs	r3, #1
 8006594:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006596:	4a0e      	ldr	r2, [pc, #56]	@ (80065d0 <dec_lock+0x74>)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	4413      	add	r3, r2
 800659e:	330c      	adds	r3, #12
 80065a0:	89fa      	ldrh	r2, [r7, #14]
 80065a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80065a4:	89fb      	ldrh	r3, [r7, #14]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <dec_lock+0x5a>
 80065aa:	4a09      	ldr	r2, [pc, #36]	@ (80065d0 <dec_lock+0x74>)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	4413      	add	r3, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	737b      	strb	r3, [r7, #13]
 80065ba:	e001      	b.n	80065c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80065bc:	2302      	movs	r3, #2
 80065be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80065c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	200002cc 	.word	0x200002cc

080065d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e010      	b.n	8006604 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006618 <clear_lock+0x44>)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	4413      	add	r3, r2
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d105      	bne.n	80065fe <clear_lock+0x2a>
 80065f2:	4a09      	ldr	r2, [pc, #36]	@ (8006618 <clear_lock+0x44>)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	4413      	add	r3, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d9eb      	bls.n	80065e2 <clear_lock+0xe>
	}
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	200002cc 	.word	0x200002cc

0800661c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d034      	beq.n	800669a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7858      	ldrb	r0, [r3, #1]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006640:	2301      	movs	r3, #1
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	f7ff fd40 	bl	80060c8 <disk_write>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <sync_window+0x38>
			res = FR_DISK_ERR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
 8006652:	e022      	b.n	800669a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	1ad2      	subs	r2, r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	429a      	cmp	r2, r3
 8006668:	d217      	bcs.n	800669a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	789b      	ldrb	r3, [r3, #2]
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	e010      	b.n	8006694 <sync_window+0x78>
					wsect += fs->fsize;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7858      	ldrb	r0, [r3, #1]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006686:	2301      	movs	r3, #1
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	f7ff fd1d 	bl	80060c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3b01      	subs	r3, #1
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d8eb      	bhi.n	8006672 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d01b      	beq.n	80066f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ffad 	bl	800661c <sync_window>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d113      	bne.n	80066f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	7858      	ldrb	r0, [r3, #1]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066d6:	2301      	movs	r3, #1
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	f7ff fcd5 	bl	8006088 <disk_read>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ff87 	bl	800661c <sync_window>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d158      	bne.n	80067ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d148      	bne.n	80067b2 <sync_fs+0xb2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	791b      	ldrb	r3, [r3, #4]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d144      	bne.n	80067b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3330      	adds	r3, #48	@ 0x30
 800672c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fda9 	bl	800628a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3330      	adds	r3, #48	@ 0x30
 800673c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006740:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fd38 	bl	80061ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3330      	adds	r3, #48	@ 0x30
 800674e:	4921      	ldr	r1, [pc, #132]	@ (80067d4 <sync_fs+0xd4>)
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fd4d 	bl	80061f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3330      	adds	r3, #48	@ 0x30
 800675a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800675e:	491e      	ldr	r1, [pc, #120]	@ (80067d8 <sync_fs+0xd8>)
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fd45 	bl	80061f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3330      	adds	r3, #48	@ 0x30
 800676a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f7ff fd3b 	bl	80061f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3330      	adds	r3, #48	@ 0x30
 800677e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7ff fd31 	bl	80061f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	7858      	ldrb	r0, [r3, #1]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a6:	2301      	movs	r3, #1
 80067a8:	f7ff fc8e 	bl	80060c8 <disk_write>
			fs->fsi_flag = 0;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fca4 	bl	8006108 <disk_ioctl>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <sync_fs+0xca>
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	41615252 	.word	0x41615252
 80067d8:	61417272 	.word	0x61417272

080067dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	3b02      	subs	r3, #2
 80067ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	3b02      	subs	r3, #2
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d301      	bcc.n	80067fc <clust2sect+0x20>
 80067f8:	2300      	movs	r3, #0
 80067fa:	e008      	b.n	800680e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	895b      	ldrh	r3, [r3, #10]
 8006800:	461a      	mov	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	fb03 f202 	mul.w	r2, r3, r2
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	4413      	add	r3, r2
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b086      	sub	sp, #24
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d904      	bls.n	800683a <get_fat+0x20>
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <get_fat+0x26>
		val = 1;	/* Internal error */
 800683a:	2301      	movs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	e08e      	b.n	800695e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006840:	f04f 33ff 	mov.w	r3, #4294967295
 8006844:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d061      	beq.n	8006912 <get_fat+0xf8>
 800684e:	2b03      	cmp	r3, #3
 8006850:	dc7b      	bgt.n	800694a <get_fat+0x130>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d002      	beq.n	800685c <get_fat+0x42>
 8006856:	2b02      	cmp	r3, #2
 8006858:	d041      	beq.n	80068de <get_fat+0xc4>
 800685a:	e076      	b.n	800694a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	6a1a      	ldr	r2, [r3, #32]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	0a5b      	lsrs	r3, r3, #9
 8006872:	4413      	add	r3, r2
 8006874:	4619      	mov	r1, r3
 8006876:	6938      	ldr	r0, [r7, #16]
 8006878:	f7ff ff14 	bl	80066a4 <move_window>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d166      	bne.n	8006950 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	60fa      	str	r2, [r7, #12]
 8006888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006894:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	0a5b      	lsrs	r3, r3, #9
 800689e:	4413      	add	r3, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	6938      	ldr	r0, [r7, #16]
 80068a4:	f7ff fefe 	bl	80066a4 <move_window>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d152      	bne.n	8006954 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <get_fat+0xba>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	e002      	b.n	80068da <get_fat+0xc0>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068da:	617b      	str	r3, [r7, #20]
			break;
 80068dc:	e03f      	b.n	800695e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	4413      	add	r3, r2
 80068e8:	4619      	mov	r1, r3
 80068ea:	6938      	ldr	r0, [r7, #16]
 80068ec:	f7ff feda 	bl	80066a4 <move_window>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d130      	bne.n	8006958 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006904:	4413      	add	r3, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fc1c 	bl	8006144 <ld_word>
 800690c:	4603      	mov	r3, r0
 800690e:	617b      	str	r3, [r7, #20]
			break;
 8006910:	e025      	b.n	800695e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6a1a      	ldr	r2, [r3, #32]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	09db      	lsrs	r3, r3, #7
 800691a:	4413      	add	r3, r2
 800691c:	4619      	mov	r1, r3
 800691e:	6938      	ldr	r0, [r7, #16]
 8006920:	f7ff fec0 	bl	80066a4 <move_window>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d118      	bne.n	800695c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006938:	4413      	add	r3, r2
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fc1a 	bl	8006174 <ld_dword>
 8006940:	4603      	mov	r3, r0
 8006942:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006946:	617b      	str	r3, [r7, #20]
			break;
 8006948:	e009      	b.n	800695e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800694a:	2301      	movs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	e006      	b.n	800695e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006950:	bf00      	nop
 8006952:	e004      	b.n	800695e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006954:	bf00      	nop
 8006956:	e002      	b.n	800695e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800695c:	bf00      	nop
		}
	}

	return val;
 800695e:	697b      	ldr	r3, [r7, #20]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b089      	sub	sp, #36	@ 0x24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006974:	2302      	movs	r3, #2
 8006976:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b01      	cmp	r3, #1
 800697c:	f240 80d9 	bls.w	8006b32 <put_fat+0x1ca>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	f080 80d3 	bcs.w	8006b32 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b03      	cmp	r3, #3
 8006992:	f000 8096 	beq.w	8006ac2 <put_fat+0x15a>
 8006996:	2b03      	cmp	r3, #3
 8006998:	f300 80cb 	bgt.w	8006b32 <put_fat+0x1ca>
 800699c:	2b01      	cmp	r3, #1
 800699e:	d002      	beq.n	80069a6 <put_fat+0x3e>
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d06e      	beq.n	8006a82 <put_fat+0x11a>
 80069a4:	e0c5      	b.n	8006b32 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	4413      	add	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1a      	ldr	r2, [r3, #32]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	0a5b      	lsrs	r3, r3, #9
 80069bc:	4413      	add	r3, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff fe6f 	bl	80066a4 <move_window>
 80069c6:	4603      	mov	r3, r0
 80069c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069ca:	7ffb      	ldrb	r3, [r7, #31]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 80a9 	bne.w	8006b24 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	61b9      	str	r1, [r7, #24]
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	4413      	add	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <put_fat+0xa4>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	b25a      	sxtb	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b25b      	sxtb	r3, r3
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	e001      	b.n	8006a10 <put_fat+0xa8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1a      	ldr	r2, [r3, #32]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	0a5b      	lsrs	r3, r3, #9
 8006a22:	4413      	add	r3, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fe3c 	bl	80066a4 <move_window>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d178      	bne.n	8006b28 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	4413      	add	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <put_fat+0xf0>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	091b      	lsrs	r3, r3, #4
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	e00e      	b.n	8006a76 <put_fat+0x10e>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f023 030f 	bic.w	r3, r3, #15
 8006a62:	b25a      	sxtb	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	4313      	orrs	r3, r2
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	70da      	strb	r2, [r3, #3]
			break;
 8006a80:	e057      	b.n	8006b32 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	0a1b      	lsrs	r3, r3, #8
 8006a8a:	4413      	add	r3, r2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fe08 	bl	80066a4 <move_window>
 8006a94:	4603      	mov	r3, r0
 8006a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a98:	7ffb      	ldrb	r3, [r7, #31]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d146      	bne.n	8006b2c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006aac:	4413      	add	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	b292      	uxth	r2, r2
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fb80 	bl	80061ba <st_word>
			fs->wflag = 1;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	70da      	strb	r2, [r3, #3]
			break;
 8006ac0:	e037      	b.n	8006b32 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	09db      	lsrs	r3, r3, #7
 8006aca:	4413      	add	r3, r2
 8006acc:	4619      	mov	r1, r3
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff fde8 	bl	80066a4 <move_window>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ad8:	7ffb      	ldrb	r3, [r7, #31]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d128      	bne.n	8006b30 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006af2:	4413      	add	r3, r2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fb3d 	bl	8006174 <ld_dword>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006b00:	4323      	orrs	r3, r4
 8006b02:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006b12:	4413      	add	r3, r2
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fb6a 	bl	80061f0 <st_dword>
			fs->wflag = 1;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	70da      	strb	r2, [r3, #3]
			break;
 8006b22:	e006      	b.n	8006b32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b24:	bf00      	nop
 8006b26:	e004      	b.n	8006b32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b28:	bf00      	nop
 8006b2a:	e002      	b.n	8006b32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b30:	bf00      	nop
		}
	}
	return res;
 8006b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3724      	adds	r7, #36	@ 0x24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd90      	pop	{r4, r7, pc}

08006b3c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d904      	bls.n	8006b62 <remove_chain+0x26>
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d301      	bcc.n	8006b66 <remove_chain+0x2a>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e04b      	b.n	8006bfe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	69b8      	ldr	r0, [r7, #24]
 8006b74:	f7ff fef8 	bl	8006968 <put_fat>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006b7c:	7ffb      	ldrb	r3, [r7, #31]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <remove_chain+0x4a>
 8006b82:	7ffb      	ldrb	r3, [r7, #31]
 8006b84:	e03b      	b.n	8006bfe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff fe46 	bl	800681a <get_fat>
 8006b8e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d031      	beq.n	8006bfa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <remove_chain+0x64>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e02e      	b.n	8006bfe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d101      	bne.n	8006bac <remove_chain+0x70>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e028      	b.n	8006bfe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006bac:	2200      	movs	r2, #0
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	69b8      	ldr	r0, [r7, #24]
 8006bb2:	f7ff fed9 	bl	8006968 <put_fat>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006bba:	7ffb      	ldrb	r3, [r7, #31]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <remove_chain+0x88>
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	e01c      	b.n	8006bfe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	3b02      	subs	r3, #2
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d20b      	bcs.n	8006bea <remove_chain+0xae>
			fs->free_clst++;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	791b      	ldrb	r3, [r3, #4]
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d3c6      	bcc.n	8006b86 <remove_chain+0x4a>
 8006bf8:	e000      	b.n	8006bfc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006bfa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <create_chain+0x2c>
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d31b      	bcc.n	8006c6a <create_chain+0x64>
 8006c32:	2301      	movs	r3, #1
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e018      	b.n	8006c6a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fded 	bl	800681a <get_fat>
 8006c40:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d801      	bhi.n	8006c4c <create_chain+0x46>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e070      	b.n	8006d2e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d101      	bne.n	8006c58 <create_chain+0x52>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	e06a      	b.n	8006d2e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d201      	bcs.n	8006c66 <create_chain+0x60>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	e063      	b.n	8006d2e <create_chain+0x128>
		scl = clst;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	3301      	adds	r3, #1
 8006c72:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d307      	bcc.n	8006c8e <create_chain+0x88>
				ncl = 2;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d901      	bls.n	8006c8e <create_chain+0x88>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e04f      	b.n	8006d2e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006c8e:	69f9      	ldr	r1, [r7, #28]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fdc2 	bl	800681a <get_fat>
 8006c96:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00e      	beq.n	8006cbc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d003      	beq.n	8006cac <create_chain+0xa6>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d101      	bne.n	8006cb0 <create_chain+0xaa>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e03e      	b.n	8006d2e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d1da      	bne.n	8006c6e <create_chain+0x68>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e038      	b.n	8006d2e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006cbc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	69f9      	ldr	r1, [r7, #28]
 8006cc4:	6938      	ldr	r0, [r7, #16]
 8006cc6:	f7ff fe4f 	bl	8006968 <put_fat>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <create_chain+0xe2>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d006      	beq.n	8006ce8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f7ff fe42 	bl	8006968 <put_fat>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d116      	bne.n	8006d1c <create_chain+0x116>
		fs->last_clst = ncl;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	3b02      	subs	r3, #2
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d804      	bhi.n	8006d0c <create_chain+0x106>
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	1e5a      	subs	r2, r3, #1
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	791b      	ldrb	r3, [r3, #4]
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	711a      	strb	r2, [r3, #4]
 8006d1a:	e007      	b.n	8006d2c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d102      	bne.n	8006d28 <create_chain+0x122>
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295
 8006d26:	e000      	b.n	8006d2a <create_chain+0x124>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d2c:	69fb      	ldr	r3, [r7, #28]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b087      	sub	sp, #28
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	0a5b      	lsrs	r3, r3, #9
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	8952      	ldrh	r2, [r2, #10]
 8006d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1d1a      	adds	r2, r3, #4
 8006d60:	613a      	str	r2, [r7, #16]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <clmt_clust+0x3a>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e010      	b.n	8006d92 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d307      	bcc.n	8006d88 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3304      	adds	r3, #4
 8006d84:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d86:	e7e9      	b.n	8006d5c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006d88:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	4413      	add	r3, r2
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006db4:	d204      	bcs.n	8006dc0 <dir_sdi+0x22>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e063      	b.n	8006e8c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <dir_sdi+0x46>
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d902      	bls.n	8006de4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10c      	bne.n	8006e04 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	8912      	ldrh	r2, [r2, #8]
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d301      	bcc.n	8006dfa <dir_sdi+0x5c>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e048      	b.n	8006e8c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	61da      	str	r2, [r3, #28]
 8006e02:	e029      	b.n	8006e58 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	895b      	ldrh	r3, [r3, #10]
 8006e08:	025b      	lsls	r3, r3, #9
 8006e0a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e0c:	e019      	b.n	8006e42 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6979      	ldr	r1, [r7, #20]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fd01 	bl	800681a <get_fat>
 8006e18:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d101      	bne.n	8006e26 <dir_sdi+0x88>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e032      	b.n	8006e8c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d904      	bls.n	8006e36 <dir_sdi+0x98>
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d301      	bcc.n	8006e3a <dir_sdi+0x9c>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e028      	b.n	8006e8c <dir_sdi+0xee>
			ofs -= csz;
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d2e1      	bcs.n	8006e0e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	6938      	ldr	r0, [r7, #16]
 8006e4e:	f7ff fcc5 	bl	80067dc <clust2sect>
 8006e52:	4602      	mov	r2, r0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <dir_sdi+0xcc>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e010      	b.n	8006e8c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69da      	ldr	r2, [r3, #28]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	0a5b      	lsrs	r3, r3, #9
 8006e72:	441a      	add	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	3320      	adds	r3, #32
 8006eaa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <dir_next+0x28>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eba:	d301      	bcc.n	8006ec0 <dir_next+0x2c>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	e0aa      	b.n	8007016 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 8098 	bne.w	8006ffc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	095b      	lsrs	r3, r3, #5
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	8912      	ldrh	r2, [r2, #8]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	f0c0 8088 	bcc.w	8006ffc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	61da      	str	r2, [r3, #28]
 8006ef2:	2304      	movs	r3, #4
 8006ef4:	e08f      	b.n	8007016 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	0a5b      	lsrs	r3, r3, #9
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	8952      	ldrh	r2, [r2, #10]
 8006efe:	3a01      	subs	r2, #1
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d17a      	bne.n	8006ffc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7ff fc83 	bl	800681a <get_fat>
 8006f14:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d801      	bhi.n	8006f20 <dir_next+0x8c>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e07a      	b.n	8007016 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d101      	bne.n	8006f2c <dir_next+0x98>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e074      	b.n	8007016 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d358      	bcc.n	8006fe8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	61da      	str	r2, [r3, #28]
 8006f42:	2304      	movs	r3, #4
 8006f44:	e067      	b.n	8007016 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7ff fe59 	bl	8006c06 <create_chain>
 8006f54:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <dir_next+0xcc>
 8006f5c:	2307      	movs	r3, #7
 8006f5e:	e05a      	b.n	8007016 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <dir_next+0xd6>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e055      	b.n	8007016 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d101      	bne.n	8006f76 <dir_next+0xe2>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e04f      	b.n	8007016 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff fb50 	bl	800661c <sync_window>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <dir_next+0xf2>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e047      	b.n	8007016 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3330      	adds	r3, #48	@ 0x30
 8006f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff f97a 	bl	800628a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f96:	2300      	movs	r3, #0
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	6979      	ldr	r1, [r7, #20]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7ff fc1d 	bl	80067dc <clust2sect>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fa8:	e012      	b.n	8006fd0 <dir_next+0x13c>
						fs->wflag = 1;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fb33 	bl	800661c <sync_window>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <dir_next+0x12c>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e02a      	b.n	8007016 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	895b      	ldrh	r3, [r3, #10]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d3e6      	bcc.n	8006faa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	1ad2      	subs	r2, r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006fee:	6979      	ldr	r1, [r7, #20]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fbf3 	bl	80067dc <clust2sect>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	441a      	add	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800702e:	2100      	movs	r1, #0
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff feb4 	bl	8006d9e <dir_sdi>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d12b      	bne.n	8007098 <dir_alloc+0x7a>
		n = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	4619      	mov	r1, r3
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7ff fb2a 	bl	80066a4 <move_window>
 8007050:	4603      	mov	r3, r0
 8007052:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d11d      	bne.n	8007096 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2be5      	cmp	r3, #229	@ 0xe5
 8007062:	d004      	beq.n	800706e <dir_alloc+0x50>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d107      	bne.n	800707e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	3301      	adds	r3, #1
 8007072:	613b      	str	r3, [r7, #16]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d102      	bne.n	8007082 <dir_alloc+0x64>
 800707c:	e00c      	b.n	8007098 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007082:	2101      	movs	r1, #1
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff ff05 	bl	8006e94 <dir_next>
 800708a:	4603      	mov	r3, r0
 800708c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0d7      	beq.n	8007044 <dir_alloc+0x26>
 8007094:	e000      	b.n	8007098 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007096:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	2b04      	cmp	r3, #4
 800709c:	d101      	bne.n	80070a2 <dir_alloc+0x84>
 800709e:	2307      	movs	r3, #7
 80070a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	331a      	adds	r3, #26
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff f842 	bl	8006144 <ld_word>
 80070c0:	4603      	mov	r3, r0
 80070c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d109      	bne.n	80070e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff f837 	bl	8006144 <ld_word>
 80070d6:	4603      	mov	r3, r0
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	331a      	adds	r3, #26
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	b292      	uxth	r2, r2
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff f85a 	bl	80061ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d109      	bne.n	8007122 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f103 0214 	add.w	r2, r3, #20
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	b29b      	uxth	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f7ff f84c 	bl	80061ba <st_word>
	}
}
 8007122:	bf00      	nop
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b086      	sub	sp, #24
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007138:	2100      	movs	r1, #0
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fe2f 	bl	8006d9e <dir_sdi>
 8007140:	4603      	mov	r3, r0
 8007142:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <dir_find+0x24>
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	e03e      	b.n	80071cc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4619      	mov	r1, r3
 8007154:	6938      	ldr	r0, [r7, #16]
 8007156:	f7ff faa5 	bl	80066a4 <move_window>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d12f      	bne.n	80071c4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <dir_find+0x4e>
 8007172:	2304      	movs	r3, #4
 8007174:	75fb      	strb	r3, [r7, #23]
 8007176:	e028      	b.n	80071ca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	330b      	adds	r3, #11
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007184:	b2da      	uxtb	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	330b      	adds	r3, #11
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <dir_find+0x86>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a18      	ldr	r0, [r3, #32]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3324      	adds	r3, #36	@ 0x24
 80071a2:	220b      	movs	r2, #11
 80071a4:	4619      	mov	r1, r3
 80071a6:	f7ff f88b 	bl	80062c0 <mem_cmp>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80071b0:	2100      	movs	r1, #0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fe6e 	bl	8006e94 <dir_next>
 80071b8:	4603      	mov	r3, r0
 80071ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0c5      	beq.n	800714e <dir_find+0x24>
 80071c2:	e002      	b.n	80071ca <dir_find+0xa0>
		if (res != FR_OK) break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80071c8:	bf00      	nop

	return res;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80071e2:	2101      	movs	r1, #1
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ff1a 	bl	800701e <dir_alloc>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11c      	bne.n	800722e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	4619      	mov	r1, r3
 80071fa:	68b8      	ldr	r0, [r7, #8]
 80071fc:	f7ff fa52 	bl	80066a4 <move_window>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d111      	bne.n	800722e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	2220      	movs	r2, #32
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff f839 	bl	800628a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a18      	ldr	r0, [r3, #32]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3324      	adds	r3, #36	@ 0x24
 8007220:	220b      	movs	r2, #11
 8007222:	4619      	mov	r1, r3
 8007224:	f7ff f810 	bl	8006248 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2201      	movs	r2, #1
 800722c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3324      	adds	r3, #36	@ 0x24
 800724c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800724e:	220b      	movs	r2, #11
 8007250:	2120      	movs	r1, #32
 8007252:	68b8      	ldr	r0, [r7, #8]
 8007254:	f7ff f819 	bl	800628a <mem_set>
	si = i = 0; ni = 8;
 8007258:	2300      	movs	r3, #0
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	2308      	movs	r3, #8
 8007262:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	61fa      	str	r2, [r7, #28]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007272:	7efb      	ldrb	r3, [r7, #27]
 8007274:	2b20      	cmp	r3, #32
 8007276:	d94e      	bls.n	8007316 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007278:	7efb      	ldrb	r3, [r7, #27]
 800727a:	2b2f      	cmp	r3, #47	@ 0x2f
 800727c:	d006      	beq.n	800728c <create_name+0x54>
 800727e:	7efb      	ldrb	r3, [r7, #27]
 8007280:	2b5c      	cmp	r3, #92	@ 0x5c
 8007282:	d110      	bne.n	80072a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007284:	e002      	b.n	800728c <create_name+0x54>
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3301      	adds	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b2f      	cmp	r3, #47	@ 0x2f
 8007296:	d0f6      	beq.n	8007286 <create_name+0x4e>
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80072a2:	d0f0      	beq.n	8007286 <create_name+0x4e>
			break;
 80072a4:	e038      	b.n	8007318 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80072a6:	7efb      	ldrb	r3, [r7, #27]
 80072a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072aa:	d003      	beq.n	80072b4 <create_name+0x7c>
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d30c      	bcc.n	80072ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b0b      	cmp	r3, #11
 80072b8:	d002      	beq.n	80072c0 <create_name+0x88>
 80072ba:	7efb      	ldrb	r3, [r7, #27]
 80072bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80072be:	d001      	beq.n	80072c4 <create_name+0x8c>
 80072c0:	2306      	movs	r3, #6
 80072c2:	e044      	b.n	800734e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80072c4:	2308      	movs	r3, #8
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	230b      	movs	r3, #11
 80072ca:	617b      	str	r3, [r7, #20]
			continue;
 80072cc:	e022      	b.n	8007314 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80072ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	da04      	bge.n	80072e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80072d6:	7efb      	ldrb	r3, [r7, #27]
 80072d8:	3b80      	subs	r3, #128	@ 0x80
 80072da:	4a1f      	ldr	r2, [pc, #124]	@ (8007358 <create_name+0x120>)
 80072dc:	5cd3      	ldrb	r3, [r2, r3]
 80072de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80072e0:	7efb      	ldrb	r3, [r7, #27]
 80072e2:	4619      	mov	r1, r3
 80072e4:	481d      	ldr	r0, [pc, #116]	@ (800735c <create_name+0x124>)
 80072e6:	f7ff f812 	bl	800630e <chk_chr>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <create_name+0xbc>
 80072f0:	2306      	movs	r3, #6
 80072f2:	e02c      	b.n	800734e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80072f4:	7efb      	ldrb	r3, [r7, #27]
 80072f6:	2b60      	cmp	r3, #96	@ 0x60
 80072f8:	d905      	bls.n	8007306 <create_name+0xce>
 80072fa:	7efb      	ldrb	r3, [r7, #27]
 80072fc:	2b7a      	cmp	r3, #122	@ 0x7a
 80072fe:	d802      	bhi.n	8007306 <create_name+0xce>
 8007300:	7efb      	ldrb	r3, [r7, #27]
 8007302:	3b20      	subs	r3, #32
 8007304:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	613a      	str	r2, [r7, #16]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4413      	add	r3, r2
 8007310:	7efa      	ldrb	r2, [r7, #27]
 8007312:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007314:	e7a6      	b.n	8007264 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007316:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	441a      	add	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <create_name+0xf4>
 8007328:	2306      	movs	r3, #6
 800732a:	e010      	b.n	800734e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2be5      	cmp	r3, #229	@ 0xe5
 8007332:	d102      	bne.n	800733a <create_name+0x102>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2205      	movs	r2, #5
 8007338:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800733a:	7efb      	ldrb	r3, [r7, #27]
 800733c:	2b20      	cmp	r3, #32
 800733e:	d801      	bhi.n	8007344 <create_name+0x10c>
 8007340:	2204      	movs	r2, #4
 8007342:	e000      	b.n	8007346 <create_name+0x10e>
 8007344:	2200      	movs	r2, #0
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	330b      	adds	r3, #11
 800734a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800734c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	0800902c 	.word	0x0800902c
 800735c:	08008fbc 	.word	0x08008fbc

08007360 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007374:	e002      	b.n	800737c <follow_path+0x1c>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b2f      	cmp	r3, #47	@ 0x2f
 8007382:	d0f8      	beq.n	8007376 <follow_path+0x16>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b5c      	cmp	r3, #92	@ 0x5c
 800738a:	d0f4      	beq.n	8007376 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2200      	movs	r2, #0
 8007390:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b1f      	cmp	r3, #31
 8007398:	d80a      	bhi.n	80073b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2280      	movs	r2, #128	@ 0x80
 800739e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80073a2:	2100      	movs	r1, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff fcfa 	bl	8006d9e <dir_sdi>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]
 80073ae:	e043      	b.n	8007438 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073b0:	463b      	mov	r3, r7
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff3f 	bl	8007238 <create_name>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d134      	bne.n	800742e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff feb0 	bl	800712a <dir_find>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d127      	bne.n	8007432 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d122      	bne.n	8007432 <follow_path+0xd2>
 80073ec:	2305      	movs	r3, #5
 80073ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80073f0:	e01f      	b.n	8007432 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d11c      	bne.n	8007436 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	799b      	ldrb	r3, [r3, #6]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007408:	2305      	movs	r3, #5
 800740a:	75fb      	strb	r3, [r7, #23]
 800740c:	e014      	b.n	8007438 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741c:	4413      	add	r3, r2
 800741e:	4619      	mov	r1, r3
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff fe43 	bl	80070ac <ld_clust>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800742c:	e7c0      	b.n	80073b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800742e:	bf00      	nop
 8007430:	e002      	b.n	8007438 <follow_path+0xd8>
				break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007436:	bf00      	nop
			}
		}
	}

	return res;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800744a:	f04f 33ff 	mov.w	r3, #4294967295
 800744e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d031      	beq.n	80074bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	e002      	b.n	8007466 <get_ldnumber+0x24>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	3301      	adds	r3, #1
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b20      	cmp	r3, #32
 800746c:	d903      	bls.n	8007476 <get_ldnumber+0x34>
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b3a      	cmp	r3, #58	@ 0x3a
 8007474:	d1f4      	bne.n	8007460 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b3a      	cmp	r3, #58	@ 0x3a
 800747c:	d11c      	bne.n	80074b8 <get_ldnumber+0x76>
			tp = *path;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	60fa      	str	r2, [r7, #12]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	3b30      	subs	r3, #48	@ 0x30
 800748e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b09      	cmp	r3, #9
 8007494:	d80e      	bhi.n	80074b4 <get_ldnumber+0x72>
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	429a      	cmp	r2, r3
 800749c:	d10a      	bne.n	80074b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d107      	bne.n	80074b4 <get_ldnumber+0x72>
					vol = (int)i;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	3301      	adds	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	e002      	b.n	80074be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80074b8:	2300      	movs	r3, #0
 80074ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80074bc:	693b      	ldr	r3, [r7, #16]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	70da      	strb	r2, [r3, #3]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f04f 32ff 	mov.w	r2, #4294967295
 80074e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff f8dc 	bl	80066a4 <move_window>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <check_fs+0x2a>
 80074f2:	2304      	movs	r3, #4
 80074f4:	e038      	b.n	8007568 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3330      	adds	r3, #48	@ 0x30
 80074fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fe20 	bl	8006144 <ld_word>
 8007504:	4603      	mov	r3, r0
 8007506:	461a      	mov	r2, r3
 8007508:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <check_fs+0x48>
 8007510:	2303      	movs	r3, #3
 8007512:	e029      	b.n	8007568 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800751a:	2be9      	cmp	r3, #233	@ 0xe9
 800751c:	d009      	beq.n	8007532 <check_fs+0x66>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007524:	2beb      	cmp	r3, #235	@ 0xeb
 8007526:	d11e      	bne.n	8007566 <check_fs+0x9a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800752e:	2b90      	cmp	r3, #144	@ 0x90
 8007530:	d119      	bne.n	8007566 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3330      	adds	r3, #48	@ 0x30
 8007536:	3336      	adds	r3, #54	@ 0x36
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fe1b 	bl	8006174 <ld_dword>
 800753e:	4603      	mov	r3, r0
 8007540:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007544:	4a0a      	ldr	r2, [pc, #40]	@ (8007570 <check_fs+0xa4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d101      	bne.n	800754e <check_fs+0x82>
 800754a:	2300      	movs	r3, #0
 800754c:	e00c      	b.n	8007568 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3330      	adds	r3, #48	@ 0x30
 8007552:	3352      	adds	r3, #82	@ 0x52
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fe0d 	bl	8006174 <ld_dword>
 800755a:	4603      	mov	r3, r0
 800755c:	4a05      	ldr	r2, [pc, #20]	@ (8007574 <check_fs+0xa8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d101      	bne.n	8007566 <check_fs+0x9a>
 8007562:	2300      	movs	r3, #0
 8007564:	e000      	b.n	8007568 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007566:	2302      	movs	r3, #2
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	00544146 	.word	0x00544146
 8007574:	33544146 	.word	0x33544146

08007578 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b096      	sub	sp, #88	@ 0x58
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff ff58 	bl	8007442 <get_ldnumber>
 8007592:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007596:	2b00      	cmp	r3, #0
 8007598:	da01      	bge.n	800759e <find_volume+0x26>
 800759a:	230b      	movs	r3, #11
 800759c:	e22d      	b.n	80079fa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800759e:	4aa1      	ldr	r2, [pc, #644]	@ (8007824 <find_volume+0x2ac>)
 80075a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <find_volume+0x3a>
 80075ae:	230c      	movs	r3, #12
 80075b0:	e223      	b.n	80079fa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01a      	beq.n	80075fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fd19 	bl	8006004 <disk_status>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10c      	bne.n	80075fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <find_volume+0x82>
 80075ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075f6:	230a      	movs	r3, #10
 80075f8:	e1ff      	b.n	80079fa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80075fa:	2300      	movs	r3, #0
 80075fc:	e1fd      	b.n	80079fa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007606:	b2da      	uxtb	r2, r3
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800760c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fd11 	bl	8006038 <disk_initialize>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800761c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007628:	2303      	movs	r3, #3
 800762a:	e1e6      	b.n	80079fa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <find_volume+0xca>
 8007632:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800763e:	230a      	movs	r3, #10
 8007640:	e1db      	b.n	80079fa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007646:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007648:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800764a:	f7ff ff3f 	bl	80074cc <check_fs>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007654:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007658:	2b02      	cmp	r3, #2
 800765a:	d149      	bne.n	80076f0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800765c:	2300      	movs	r3, #0
 800765e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007660:	e01e      	b.n	80076a0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007664:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007670:	4413      	add	r3, r2
 8007672:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	3304      	adds	r3, #4
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d006      	beq.n	800768c <find_volume+0x114>
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	3308      	adds	r3, #8
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fd76 	bl	8006174 <ld_dword>
 8007688:	4602      	mov	r2, r0
 800768a:	e000      	b.n	800768e <find_volume+0x116>
 800768c:	2200      	movs	r2, #0
 800768e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	3358      	adds	r3, #88	@ 0x58
 8007694:	443b      	add	r3, r7
 8007696:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800769a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800769c:	3301      	adds	r3, #1
 800769e:	643b      	str	r3, [r7, #64]	@ 0x40
 80076a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d9dd      	bls.n	8007662 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076a6:	2300      	movs	r3, #0
 80076a8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80076aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <find_volume+0x13e>
 80076b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b2:	3b01      	subs	r3, #1
 80076b4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	3358      	adds	r3, #88	@ 0x58
 80076bc:	443b      	add	r3, r7
 80076be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076c2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <find_volume+0x15e>
 80076ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076ce:	f7ff fefd 	bl	80074cc <check_fs>
 80076d2:	4603      	mov	r3, r0
 80076d4:	e000      	b.n	80076d8 <find_volume+0x160>
 80076d6:	2303      	movs	r3, #3
 80076d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d905      	bls.n	80076f0 <find_volume+0x178>
 80076e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e6:	3301      	adds	r3, #1
 80076e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d9e2      	bls.n	80076b6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80076f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d101      	bne.n	80076fc <find_volume+0x184>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e17e      	b.n	80079fa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80076fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007700:	2b01      	cmp	r3, #1
 8007702:	d901      	bls.n	8007708 <find_volume+0x190>
 8007704:	230d      	movs	r3, #13
 8007706:	e178      	b.n	80079fa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	3330      	adds	r3, #48	@ 0x30
 800770c:	330b      	adds	r3, #11
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fd18 	bl	8006144 <ld_word>
 8007714:	4603      	mov	r3, r0
 8007716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771a:	d001      	beq.n	8007720 <find_volume+0x1a8>
 800771c:	230d      	movs	r3, #13
 800771e:	e16c      	b.n	80079fa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	3330      	adds	r3, #48	@ 0x30
 8007724:	3316      	adds	r3, #22
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fd0c 	bl	8006144 <ld_word>
 800772c:	4603      	mov	r3, r0
 800772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <find_volume+0x1cc>
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	3330      	adds	r3, #48	@ 0x30
 800773a:	3324      	adds	r3, #36	@ 0x24
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fd19 	bl	8006174 <ld_dword>
 8007742:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007748:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800774a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	789b      	ldrb	r3, [r3, #2]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d005      	beq.n	8007768 <find_volume+0x1f0>
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	789b      	ldrb	r3, [r3, #2]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d001      	beq.n	8007768 <find_volume+0x1f0>
 8007764:	230d      	movs	r3, #13
 8007766:	e148      	b.n	80079fa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	789b      	ldrb	r3, [r3, #2]
 800776c:	461a      	mov	r2, r3
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	fb02 f303 	mul.w	r3, r2, r3
 8007774:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800777c:	461a      	mov	r2, r3
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	895b      	ldrh	r3, [r3, #10]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d008      	beq.n	800779c <find_volume+0x224>
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	895b      	ldrh	r3, [r3, #10]
 800778e:	461a      	mov	r2, r3
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	895b      	ldrh	r3, [r3, #10]
 8007794:	3b01      	subs	r3, #1
 8007796:	4013      	ands	r3, r2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <find_volume+0x228>
 800779c:	230d      	movs	r3, #13
 800779e:	e12c      	b.n	80079fa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a2:	3330      	adds	r3, #48	@ 0x30
 80077a4:	3311      	adds	r3, #17
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fccc 	bl	8006144 <ld_word>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	891b      	ldrh	r3, [r3, #8]
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <find_volume+0x24e>
 80077c2:	230d      	movs	r3, #13
 80077c4:	e119      	b.n	80079fa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	3330      	adds	r3, #48	@ 0x30
 80077ca:	3313      	adds	r3, #19
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe fcb9 	bl	8006144 <ld_word>
 80077d2:	4603      	mov	r3, r0
 80077d4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <find_volume+0x272>
 80077dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077de:	3330      	adds	r3, #48	@ 0x30
 80077e0:	3320      	adds	r3, #32
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fcc6 	bl	8006174 <ld_dword>
 80077e8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80077ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ec:	3330      	adds	r3, #48	@ 0x30
 80077ee:	330e      	adds	r3, #14
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe fca7 	bl	8006144 <ld_word>
 80077f6:	4603      	mov	r3, r0
 80077f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80077fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <find_volume+0x28c>
 8007800:	230d      	movs	r3, #13
 8007802:	e0fa      	b.n	80079fa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007804:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007808:	4413      	add	r3, r2
 800780a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800780c:	8912      	ldrh	r2, [r2, #8]
 800780e:	0912      	lsrs	r2, r2, #4
 8007810:	b292      	uxth	r2, r2
 8007812:	4413      	add	r3, r2
 8007814:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781a:	429a      	cmp	r2, r3
 800781c:	d204      	bcs.n	8007828 <find_volume+0x2b0>
 800781e:	230d      	movs	r3, #13
 8007820:	e0eb      	b.n	80079fa <find_volume+0x482>
 8007822:	bf00      	nop
 8007824:	200002c4 	.word	0x200002c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007830:	8952      	ldrh	r2, [r2, #10]
 8007832:	fbb3 f3f2 	udiv	r3, r3, r2
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <find_volume+0x2ca>
 800783e:	230d      	movs	r3, #13
 8007840:	e0db      	b.n	80079fa <find_volume+0x482>
		fmt = FS_FAT32;
 8007842:	2303      	movs	r3, #3
 8007844:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800784e:	4293      	cmp	r3, r2
 8007850:	d802      	bhi.n	8007858 <find_volume+0x2e0>
 8007852:	2302      	movs	r3, #2
 8007854:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800785e:	4293      	cmp	r3, r2
 8007860:	d802      	bhi.n	8007868 <find_volume+0x2f0>
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	1c9a      	adds	r2, r3, #2
 800786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007872:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007874:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007876:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800787a:	441a      	add	r2, r3
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007880:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007884:	441a      	add	r2, r3
 8007886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007888:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800788a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800788e:	2b03      	cmp	r3, #3
 8007890:	d11e      	bne.n	80078d0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007894:	3330      	adds	r3, #48	@ 0x30
 8007896:	332a      	adds	r3, #42	@ 0x2a
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fc53 	bl	8006144 <ld_word>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <find_volume+0x330>
 80078a4:	230d      	movs	r3, #13
 80078a6:	e0a8      	b.n	80079fa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078aa:	891b      	ldrh	r3, [r3, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <find_volume+0x33c>
 80078b0:	230d      	movs	r3, #13
 80078b2:	e0a2      	b.n	80079fa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b6:	3330      	adds	r3, #48	@ 0x30
 80078b8:	332c      	adds	r3, #44	@ 0x2c
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fc5a 	bl	8006174 <ld_dword>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ce:	e01f      	b.n	8007910 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d2:	891b      	ldrh	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <find_volume+0x364>
 80078d8:	230d      	movs	r3, #13
 80078da:	e08e      	b.n	80079fa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	6a1a      	ldr	r2, [r3, #32]
 80078e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078e2:	441a      	add	r2, r3
 80078e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80078e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d103      	bne.n	80078f8 <find_volume+0x380>
 80078f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	e00a      	b.n	800790e <find_volume+0x396>
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	4613      	mov	r3, r2
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4413      	add	r3, r2
 8007902:	085a      	lsrs	r2, r3, #1
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800790e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007912:	699a      	ldr	r2, [r3, #24]
 8007914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007916:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800791a:	0a5b      	lsrs	r3, r3, #9
 800791c:	429a      	cmp	r2, r3
 800791e:	d201      	bcs.n	8007924 <find_volume+0x3ac>
 8007920:	230d      	movs	r3, #13
 8007922:	e06a      	b.n	80079fa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	f04f 32ff 	mov.w	r2, #4294967295
 800792a:	611a      	str	r2, [r3, #16]
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	691a      	ldr	r2, [r3, #16]
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007936:	2280      	movs	r2, #128	@ 0x80
 8007938:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800793a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800793e:	2b03      	cmp	r3, #3
 8007940:	d149      	bne.n	80079d6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	3330      	adds	r3, #48	@ 0x30
 8007946:	3330      	adds	r3, #48	@ 0x30
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fbfb 	bl	8006144 <ld_word>
 800794e:	4603      	mov	r3, r0
 8007950:	2b01      	cmp	r3, #1
 8007952:	d140      	bne.n	80079d6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007956:	3301      	adds	r3, #1
 8007958:	4619      	mov	r1, r3
 800795a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800795c:	f7fe fea2 	bl	80066a4 <move_window>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d137      	bne.n	80079d6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	2200      	movs	r2, #0
 800796a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796e:	3330      	adds	r3, #48	@ 0x30
 8007970:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fbe5 	bl	8006144 <ld_word>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007982:	429a      	cmp	r2, r3
 8007984:	d127      	bne.n	80079d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	3330      	adds	r3, #48	@ 0x30
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fbf2 	bl	8006174 <ld_dword>
 8007990:	4603      	mov	r3, r0
 8007992:	4a1c      	ldr	r2, [pc, #112]	@ (8007a04 <find_volume+0x48c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d11e      	bne.n	80079d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	3330      	adds	r3, #48	@ 0x30
 800799c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe fbe7 	bl	8006174 <ld_dword>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a17      	ldr	r2, [pc, #92]	@ (8007a08 <find_volume+0x490>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d113      	bne.n	80079d6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b0:	3330      	adds	r3, #48	@ 0x30
 80079b2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fbdc 	bl	8006174 <ld_dword>
 80079bc:	4602      	mov	r2, r0
 80079be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80079c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c4:	3330      	adds	r3, #48	@ 0x30
 80079c6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fbd2 	bl	8006174 <ld_dword>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80079dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80079de:	4b0b      	ldr	r3, [pc, #44]	@ (8007a0c <find_volume+0x494>)
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	4b09      	ldr	r3, [pc, #36]	@ (8007a0c <find_volume+0x494>)
 80079e8:	801a      	strh	r2, [r3, #0]
 80079ea:	4b08      	ldr	r3, [pc, #32]	@ (8007a0c <find_volume+0x494>)
 80079ec:	881a      	ldrh	r2, [r3, #0]
 80079ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80079f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079f4:	f7fe fdee 	bl	80065d4 <clear_lock>
#endif
	return FR_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3758      	adds	r7, #88	@ 0x58
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	41615252 	.word	0x41615252
 8007a08:	61417272 	.word	0x61417272
 8007a0c:	200002c8 	.word	0x200002c8

08007a10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a1a:	2309      	movs	r3, #9
 8007a1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01c      	beq.n	8007a5e <validate+0x4e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d018      	beq.n	8007a5e <validate+0x4e>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <validate+0x4e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	889a      	ldrh	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	88db      	ldrh	r3, [r3, #6]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d10c      	bne.n	8007a5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fada 	bl	8006004 <disk_status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <validate+0x4e>
			res = FR_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <validate+0x5a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	e000      	b.n	8007a6c <validate+0x5c>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	6013      	str	r3, [r2, #0]
	return res;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a8e:	f107 0310 	add.w	r3, r7, #16
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fcd5 	bl	8007442 <get_ldnumber>
 8007a98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da01      	bge.n	8007aa4 <f_mount+0x28>
 8007aa0:	230b      	movs	r3, #11
 8007aa2:	e02b      	b.n	8007afc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007aa4:	4a17      	ldr	r2, [pc, #92]	@ (8007b04 <f_mount+0x88>)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ab4:	69b8      	ldr	r0, [r7, #24]
 8007ab6:	f7fe fd8d 	bl	80065d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	490d      	ldr	r1, [pc, #52]	@ (8007b04 <f_mount+0x88>)
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <f_mount+0x66>
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d001      	beq.n	8007ae6 <f_mount+0x6a>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e00a      	b.n	8007afc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ae6:	f107 010c 	add.w	r1, r7, #12
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	2200      	movs	r2, #0
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff fd41 	bl	8007578 <find_volume>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200002c4 	.word	0x200002c4

08007b08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b098      	sub	sp, #96	@ 0x60
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <f_open+0x18>
 8007b1c:	2309      	movs	r3, #9
 8007b1e:	e1a9      	b.n	8007e74 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b28:	79fa      	ldrb	r2, [r7, #7]
 8007b2a:	f107 0110 	add.w	r1, r7, #16
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fd20 	bl	8007578 <find_volume>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 818d 	bne.w	8007e62 <f_open+0x35a>
		dj.obj.fs = fs;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff fc03 	bl	8007360 <follow_path>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d118      	bne.n	8007b9a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b6c:	b25b      	sxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	da03      	bge.n	8007b7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b72:	2306      	movs	r3, #6
 8007b74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007b78:	e00f      	b.n	8007b9a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	bf8c      	ite	hi
 8007b80:	2301      	movhi	r3, #1
 8007b82:	2300      	movls	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fbd8 	bl	8006344 <chk_lock>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	f003 031c 	and.w	r3, r3, #28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d07f      	beq.n	8007ca4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d017      	beq.n	8007bdc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007bac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d10e      	bne.n	8007bd2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007bb4:	f7fe fc22 	bl	80063fc <enq_lock>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d006      	beq.n	8007bcc <f_open+0xc4>
 8007bbe:	f107 0314 	add.w	r3, r7, #20
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fb06 	bl	80071d4 <dir_register>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	e000      	b.n	8007bce <f_open+0xc6>
 8007bcc:	2312      	movs	r3, #18
 8007bce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	f043 0308 	orr.w	r3, r3, #8
 8007bd8:	71fb      	strb	r3, [r7, #7]
 8007bda:	e010      	b.n	8007bfe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007bdc:	7ebb      	ldrb	r3, [r7, #26]
 8007bde:	f003 0311 	and.w	r3, r3, #17
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <f_open+0xe6>
					res = FR_DENIED;
 8007be6:	2307      	movs	r3, #7
 8007be8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007bec:	e007      	b.n	8007bfe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <f_open+0xf6>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d168      	bne.n	8007cd8 <f_open+0x1d0>
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d063      	beq.n	8007cd8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007c10:	f7fe f88c 	bl	8005d2c <get_fattime>
 8007c14:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	330e      	adds	r3, #14
 8007c1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fae7 	bl	80061f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c24:	3316      	adds	r3, #22
 8007c26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fae1 	bl	80061f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c30:	330b      	adds	r3, #11
 8007c32:	2220      	movs	r2, #32
 8007c34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fa35 	bl	80070ac <ld_clust>
 8007c42:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff fa4d 	bl	80070ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c52:	331c      	adds	r3, #28
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe faca 	bl	80061f0 <st_dword>
					fs->wflag = 1;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d037      	beq.n	8007cd8 <f_open+0x1d0>
						dw = fs->winsect;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007c6e:	f107 0314 	add.w	r3, r7, #20
 8007c72:	2200      	movs	r2, #0
 8007c74:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe ff60 	bl	8006b3c <remove_chain>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007c82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d126      	bne.n	8007cd8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fd08 	bl	80066a4 <move_window>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c9e:	3a01      	subs	r2, #1
 8007ca0:	60da      	str	r2, [r3, #12]
 8007ca2:	e019      	b.n	8007cd8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d115      	bne.n	8007cd8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cac:	7ebb      	ldrb	r3, [r7, #26]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <f_open+0x1b6>
					res = FR_NO_FILE;
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007cbc:	e00c      	b.n	8007cd8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <f_open+0x1d0>
 8007cc8:	7ebb      	ldrb	r3, [r7, #26]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <f_open+0x1d0>
						res = FR_DENIED;
 8007cd2:	2307      	movs	r3, #7
 8007cd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d126      	bne.n	8007d2e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cf0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007cfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	bf8c      	ite	hi
 8007d06:	2301      	movhi	r3, #1
 8007d08:	2300      	movls	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fb93 	bl	8006440 <inc_lock>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <f_open+0x226>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 8095 	bne.w	8007e62 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff f9b4 	bl	80070ac <ld_clust>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4c:	331c      	adds	r3, #28
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fa10 	bl	8006174 <ld_dword>
 8007d54:	4602      	mov	r2, r0
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	88da      	ldrh	r2, [r3, #6]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	79fa      	ldrb	r2, [r7, #7]
 8007d72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3330      	adds	r3, #48	@ 0x30
 8007d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe fa7a 	bl	800628a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d060      	beq.n	8007e62 <f_open+0x35a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d05c      	beq.n	8007e62 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	895b      	ldrh	r3, [r3, #10]
 8007db4:	025b      	lsls	r3, r3, #9
 8007db6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dc4:	e016      	b.n	8007df4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fd25 	bl	800681a <get_fat>
 8007dd0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d802      	bhi.n	8007dde <f_open+0x2d6>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d102      	bne.n	8007dec <f_open+0x2e4>
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007df4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <f_open+0x2fc>
 8007dfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d8e0      	bhi.n	8007dc6 <f_open+0x2be>
				}
				fp->clust = clst;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d127      	bne.n	8007e62 <f_open+0x35a>
 8007e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d022      	beq.n	8007e62 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe fcdb 	bl	80067dc <clust2sect>
 8007e26:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <f_open+0x32e>
						res = FR_INT_ERR;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007e34:	e015      	b.n	8007e62 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e38:	0a5a      	lsrs	r2, r3, #9
 8007e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	7858      	ldrb	r0, [r3, #1]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	2301      	movs	r3, #1
 8007e52:	f7fe f919 	bl	8006088 <disk_read>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <f_open+0x35a>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <f_open+0x368>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3760      	adds	r7, #96	@ 0x60
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08e      	sub	sp, #56	@ 0x38
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f107 0214 	add.w	r2, r7, #20
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fdb7 	bl	8007a10 <validate>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <f_read+0x44>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	7d5b      	ldrb	r3, [r3, #21]
 8007eb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <f_read+0x4a>
 8007ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ec4:	e115      	b.n	80080f2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	7d1b      	ldrb	r3, [r3, #20]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <f_read+0x5a>
 8007ed2:	2307      	movs	r3, #7
 8007ed4:	e10d      	b.n	80080f2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	f240 80fe 	bls.w	80080e8 <f_read+0x26c>
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007ef0:	e0fa      	b.n	80080e8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 80c6 	bne.w	800808c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	0a5b      	lsrs	r3, r3, #9
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	8952      	ldrh	r2, [r2, #10]
 8007f0a:	3a01      	subs	r2, #1
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d12f      	bne.n	8007f76 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d103      	bne.n	8007f26 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f24:	e013      	b.n	8007f4e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	4619      	mov	r1, r3
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7fe fefe 	bl	8006d36 <clmt_clust>
 8007f3a:	6338      	str	r0, [r7, #48]	@ 0x30
 8007f3c:	e007      	b.n	8007f4e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f7fe fc67 	bl	800681a <get_fat>
 8007f4c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d804      	bhi.n	8007f5e <f_read+0xe2>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2202      	movs	r2, #2
 8007f58:	755a      	strb	r2, [r3, #21]
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e0c9      	b.n	80080f2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d104      	bne.n	8007f70 <f_read+0xf4>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	755a      	strb	r2, [r3, #21]
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e0c0      	b.n	80080f2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f74:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7fe fc2c 	bl	80067dc <clust2sect>
 8007f84:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <f_read+0x11a>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	755a      	strb	r2, [r3, #21]
 8007f92:	2302      	movs	r3, #2
 8007f94:	e0ad      	b.n	80080f2 <f_read+0x276>
			sect += csect;
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	0a5b      	lsrs	r3, r3, #9
 8007fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d039      	beq.n	800801e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fae:	4413      	add	r3, r2
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	8952      	ldrh	r2, [r2, #10]
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d905      	bls.n	8007fc4 <f_read+0x148>
					cc = fs->csize - csect;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	895b      	ldrh	r3, [r3, #10]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	7858      	ldrb	r0, [r3, #1]
 8007fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fce:	f7fe f85b 	bl	8006088 <disk_read>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <f_read+0x166>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	755a      	strb	r2, [r3, #21]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e087      	b.n	80080f2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	7d1b      	ldrb	r3, [r3, #20]
 8007fe6:	b25b      	sxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	da14      	bge.n	8008016 <f_read+0x19a>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d90d      	bls.n	8008016 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1a      	ldr	r2, [r3, #32]
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	025b      	lsls	r3, r3, #9
 8008004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008006:	18d0      	adds	r0, r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3330      	adds	r3, #48	@ 0x30
 800800c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008010:	4619      	mov	r1, r3
 8008012:	f7fe f919 	bl	8006248 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008018:	025b      	lsls	r3, r3, #9
 800801a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800801c:	e050      	b.n	80080c0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	429a      	cmp	r2, r3
 8008026:	d02e      	beq.n	8008086 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	7d1b      	ldrb	r3, [r3, #20]
 800802c:	b25b      	sxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	da18      	bge.n	8008064 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	7858      	ldrb	r0, [r3, #1]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a1a      	ldr	r2, [r3, #32]
 8008040:	2301      	movs	r3, #1
 8008042:	f7fe f841 	bl	80060c8 <disk_write>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <f_read+0x1da>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	755a      	strb	r2, [r3, #21]
 8008052:	2301      	movs	r3, #1
 8008054:	e04d      	b.n	80080f2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	7d1b      	ldrb	r3, [r3, #20]
 800805a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800805e:	b2da      	uxtb	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	7858      	ldrb	r0, [r3, #1]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800806e:	2301      	movs	r3, #1
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	f7fe f809 	bl	8006088 <disk_read>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <f_read+0x20a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	755a      	strb	r2, [r3, #21]
 8008082:	2301      	movs	r3, #1
 8008084:	e035      	b.n	80080f2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008094:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008098:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800809a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d901      	bls.n	80080a6 <f_read+0x22a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b4:	4413      	add	r3, r2
 80080b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b8:	4619      	mov	r1, r3
 80080ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080bc:	f7fe f8c4 	bl	8006248 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80080c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c4:	4413      	add	r3, r2
 80080c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	441a      	add	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	619a      	str	r2, [r3, #24]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	441a      	add	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f47f af01 	bne.w	8007ef2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3738      	adds	r7, #56	@ 0x38
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b08c      	sub	sp, #48	@ 0x30
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f107 0210 	add.w	r2, r7, #16
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff fc78 	bl	8007a10 <validate>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008126:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800812a:	2b00      	cmp	r3, #0
 800812c:	d107      	bne.n	800813e <f_write+0x44>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	7d5b      	ldrb	r3, [r3, #21]
 8008132:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <f_write+0x4a>
 800813e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008142:	e14b      	b.n	80083dc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	7d1b      	ldrb	r3, [r3, #20]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <f_write+0x5a>
 8008150:	2307      	movs	r3, #7
 8008152:	e143      	b.n	80083dc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	699a      	ldr	r2, [r3, #24]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	441a      	add	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	429a      	cmp	r2, r3
 8008162:	f080 812d 	bcs.w	80083c0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	43db      	mvns	r3, r3
 800816c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800816e:	e127      	b.n	80083c0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 80e3 	bne.w	8008344 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	0a5b      	lsrs	r3, r3, #9
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	8952      	ldrh	r2, [r2, #10]
 8008188:	3a01      	subs	r2, #1
 800818a:	4013      	ands	r3, r2
 800818c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d143      	bne.n	800821c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10c      	bne.n	80081b6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11a      	bne.n	80081de <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2100      	movs	r1, #0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe fd2a 	bl	8006c06 <create_chain>
 80081b2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80081b4:	e013      	b.n	80081de <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	4619      	mov	r1, r3
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7fe fdb6 	bl	8006d36 <clmt_clust>
 80081ca:	62b8      	str	r0, [r7, #40]	@ 0x28
 80081cc:	e007      	b.n	80081de <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7fe fd15 	bl	8006c06 <create_chain>
 80081dc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80f2 	beq.w	80083ca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d104      	bne.n	80081f6 <f_write+0xfc>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2202      	movs	r2, #2
 80081f0:	755a      	strb	r2, [r3, #21]
 80081f2:	2302      	movs	r3, #2
 80081f4:	e0f2      	b.n	80083dc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d104      	bne.n	8008208 <f_write+0x10e>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	755a      	strb	r2, [r3, #21]
 8008204:	2301      	movs	r3, #1
 8008206:	e0e9      	b.n	80083dc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800820c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d102      	bne.n	800821c <f_write+0x122>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800821a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	7d1b      	ldrb	r3, [r3, #20]
 8008220:	b25b      	sxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	da18      	bge.n	8008258 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	7858      	ldrb	r0, [r3, #1]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a1a      	ldr	r2, [r3, #32]
 8008234:	2301      	movs	r3, #1
 8008236:	f7fd ff47 	bl	80060c8 <disk_write>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <f_write+0x150>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	755a      	strb	r2, [r3, #21]
 8008246:	2301      	movs	r3, #1
 8008248:	e0c8      	b.n	80083dc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	7d1b      	ldrb	r3, [r3, #20]
 800824e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008252:	b2da      	uxtb	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	4619      	mov	r1, r3
 8008260:	4610      	mov	r0, r2
 8008262:	f7fe fabb 	bl	80067dc <clust2sect>
 8008266:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <f_write+0x17e>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2202      	movs	r2, #2
 8008272:	755a      	strb	r2, [r3, #21]
 8008274:	2302      	movs	r3, #2
 8008276:	e0b1      	b.n	80083dc <f_write+0x2e2>
			sect += csect;
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	4413      	add	r3, r2
 800827e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	0a5b      	lsrs	r3, r3, #9
 8008284:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d03c      	beq.n	8008306 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	4413      	add	r3, r2
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	8952      	ldrh	r2, [r2, #10]
 8008296:	4293      	cmp	r3, r2
 8008298:	d905      	bls.n	80082a6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	895b      	ldrh	r3, [r3, #10]
 800829e:	461a      	mov	r2, r3
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	7858      	ldrb	r0, [r3, #1]
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	69f9      	ldr	r1, [r7, #28]
 80082b0:	f7fd ff0a 	bl	80060c8 <disk_write>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d004      	beq.n	80082c4 <f_write+0x1ca>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2201      	movs	r2, #1
 80082be:	755a      	strb	r2, [r3, #21]
 80082c0:	2301      	movs	r3, #1
 80082c2:	e08b      	b.n	80083dc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a1a      	ldr	r2, [r3, #32]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	6a3a      	ldr	r2, [r7, #32]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d915      	bls.n	80082fe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a1a      	ldr	r2, [r3, #32]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	025b      	lsls	r3, r3, #9
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082ea:	4619      	mov	r1, r3
 80082ec:	f7fd ffac 	bl	8006248 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	7d1b      	ldrb	r3, [r3, #20]
 80082f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	025b      	lsls	r3, r3, #9
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008304:	e03f      	b.n	8008386 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	429a      	cmp	r2, r3
 800830e:	d016      	beq.n	800833e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	699a      	ldr	r2, [r3, #24]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008318:	429a      	cmp	r2, r3
 800831a:	d210      	bcs.n	800833e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	7858      	ldrb	r0, [r3, #1]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008326:	2301      	movs	r3, #1
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	f7fd fead 	bl	8006088 <disk_read>
 800832e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	755a      	strb	r2, [r3, #21]
 800833a:	2301      	movs	r3, #1
 800833c:	e04e      	b.n	80083dc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d901      	bls.n	800835e <f_write+0x264>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836c:	4413      	add	r3, r2
 800836e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008370:	69f9      	ldr	r1, [r7, #28]
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd ff68 	bl	8006248 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	7d1b      	ldrb	r3, [r3, #20]
 800837c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008380:	b2da      	uxtb	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	4413      	add	r3, r2
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	441a      	add	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	619a      	str	r2, [r3, #24]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	bf38      	it	cc
 80083a6:	461a      	movcc	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	60da      	str	r2, [r3, #12]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	441a      	add	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f47f aed4 	bne.w	8008170 <f_write+0x76>
 80083c8:	e000      	b.n	80083cc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	7d1b      	ldrb	r3, [r3, #20]
 80083d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3730      	adds	r7, #48	@ 0x30
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f107 0208 	add.w	r2, r7, #8
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff fb0b 	bl	8007a10 <validate>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d168      	bne.n	80084d6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	7d1b      	ldrb	r3, [r3, #20]
 8008408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d062      	beq.n	80084d6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	7d1b      	ldrb	r3, [r3, #20]
 8008414:	b25b      	sxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	da15      	bge.n	8008446 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	7858      	ldrb	r0, [r3, #1]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1a      	ldr	r2, [r3, #32]
 8008428:	2301      	movs	r3, #1
 800842a:	f7fd fe4d 	bl	80060c8 <disk_write>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <f_sync+0x54>
 8008434:	2301      	movs	r3, #1
 8008436:	e04f      	b.n	80084d8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7d1b      	ldrb	r3, [r3, #20]
 800843c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008440:	b2da      	uxtb	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008446:	f7fd fc71 	bl	8005d2c <get_fattime>
 800844a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f7fe f925 	bl	80066a4 <move_window>
 800845a:	4603      	mov	r3, r0
 800845c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d138      	bne.n	80084d6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	330b      	adds	r3, #11
 800846e:	781a      	ldrb	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	330b      	adds	r3, #11
 8008474:	f042 0220 	orr.w	r2, r2, #32
 8008478:	b2d2      	uxtb	r2, r2
 800847a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	461a      	mov	r2, r3
 8008486:	68f9      	ldr	r1, [r7, #12]
 8008488:	f7fe fe2f 	bl	80070ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f103 021c 	add.w	r2, r3, #28
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	f7fd fea9 	bl	80061f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3316      	adds	r3, #22
 80084a2:	6939      	ldr	r1, [r7, #16]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fd fea3 	bl	80061f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3312      	adds	r3, #18
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fd fe82 	bl	80061ba <st_word>
					fs->wflag = 1;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2201      	movs	r2, #1
 80084ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe f91e 	bl	8006700 <sync_fs>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7d1b      	ldrb	r3, [r3, #20]
 80084cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ff7b 	bl	80083e4 <f_sync>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d118      	bne.n	800852a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f107 0208 	add.w	r2, r7, #8
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff fa85 	bl	8007a10 <validate>
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10c      	bne.n	800852a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe f821 	bl	800655c <dec_lock>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d102      	bne.n	800852a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800854a:	4b1f      	ldr	r3, [pc, #124]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 800854c:	7a5b      	ldrb	r3, [r3, #9]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d131      	bne.n	80085b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008554:	4b1c      	ldr	r3, [pc, #112]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008556:	7a5b      	ldrb	r3, [r3, #9]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	4b1a      	ldr	r3, [pc, #104]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 800855e:	2100      	movs	r1, #0
 8008560:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008562:	4b19      	ldr	r3, [pc, #100]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008564:	7a5b      	ldrb	r3, [r3, #9]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	4a17      	ldr	r2, [pc, #92]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008572:	4b15      	ldr	r3, [pc, #84]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008574:	7a5b      	ldrb	r3, [r3, #9]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	461a      	mov	r2, r3
 800857a:	4b13      	ldr	r3, [pc, #76]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 800857c:	4413      	add	r3, r2
 800857e:	79fa      	ldrb	r2, [r7, #7]
 8008580:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008582:	4b11      	ldr	r3, [pc, #68]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 8008584:	7a5b      	ldrb	r3, [r3, #9]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	b2d1      	uxtb	r1, r2
 800858c:	4a0e      	ldr	r2, [pc, #56]	@ (80085c8 <FATFS_LinkDriverEx+0x94>)
 800858e:	7251      	strb	r1, [r2, #9]
 8008590:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008592:	7dbb      	ldrb	r3, [r7, #22]
 8008594:	3330      	adds	r3, #48	@ 0x30
 8008596:	b2da      	uxtb	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	3301      	adds	r3, #1
 80085a0:	223a      	movs	r2, #58	@ 0x3a
 80085a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3302      	adds	r3, #2
 80085a8:	222f      	movs	r2, #47	@ 0x2f
 80085aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	3303      	adds	r3, #3
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	200002ec 	.word	0x200002ec

080085cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff ffaa 	bl	8008534 <FATFS_LinkDriverEx>
 80085e0:	4603      	mov	r3, r0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <sniprintf>:
 80085ec:	b40c      	push	{r2, r3}
 80085ee:	b530      	push	{r4, r5, lr}
 80085f0:	4b17      	ldr	r3, [pc, #92]	@ (8008650 <sniprintf+0x64>)
 80085f2:	1e0c      	subs	r4, r1, #0
 80085f4:	681d      	ldr	r5, [r3, #0]
 80085f6:	b09d      	sub	sp, #116	@ 0x74
 80085f8:	da08      	bge.n	800860c <sniprintf+0x20>
 80085fa:	238b      	movs	r3, #139	@ 0x8b
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	b01d      	add	sp, #116	@ 0x74
 8008604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008608:	b002      	add	sp, #8
 800860a:	4770      	bx	lr
 800860c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008610:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008614:	bf14      	ite	ne
 8008616:	f104 33ff 	addne.w	r3, r4, #4294967295
 800861a:	4623      	moveq	r3, r4
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008624:	9002      	str	r0, [sp, #8]
 8008626:	9006      	str	r0, [sp, #24]
 8008628:	f8ad 3016 	strh.w	r3, [sp, #22]
 800862c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800862e:	ab21      	add	r3, sp, #132	@ 0x84
 8008630:	a902      	add	r1, sp, #8
 8008632:	4628      	mov	r0, r5
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	f000 f995 	bl	8008964 <_svfiprintf_r>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	bfbc      	itt	lt
 800863e:	238b      	movlt	r3, #139	@ 0x8b
 8008640:	602b      	strlt	r3, [r5, #0]
 8008642:	2c00      	cmp	r4, #0
 8008644:	d0dd      	beq.n	8008602 <sniprintf+0x16>
 8008646:	9b02      	ldr	r3, [sp, #8]
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	e7d9      	b.n	8008602 <sniprintf+0x16>
 800864e:	bf00      	nop
 8008650:	2000000c 	.word	0x2000000c

08008654 <memset>:
 8008654:	4402      	add	r2, r0
 8008656:	4603      	mov	r3, r0
 8008658:	4293      	cmp	r3, r2
 800865a:	d100      	bne.n	800865e <memset+0xa>
 800865c:	4770      	bx	lr
 800865e:	f803 1b01 	strb.w	r1, [r3], #1
 8008662:	e7f9      	b.n	8008658 <memset+0x4>

08008664 <__errno>:
 8008664:	4b01      	ldr	r3, [pc, #4]	@ (800866c <__errno+0x8>)
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	2000000c 	.word	0x2000000c

08008670 <__libc_init_array>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	4d0d      	ldr	r5, [pc, #52]	@ (80086a8 <__libc_init_array+0x38>)
 8008674:	4c0d      	ldr	r4, [pc, #52]	@ (80086ac <__libc_init_array+0x3c>)
 8008676:	1b64      	subs	r4, r4, r5
 8008678:	10a4      	asrs	r4, r4, #2
 800867a:	2600      	movs	r6, #0
 800867c:	42a6      	cmp	r6, r4
 800867e:	d109      	bne.n	8008694 <__libc_init_array+0x24>
 8008680:	4d0b      	ldr	r5, [pc, #44]	@ (80086b0 <__libc_init_array+0x40>)
 8008682:	4c0c      	ldr	r4, [pc, #48]	@ (80086b4 <__libc_init_array+0x44>)
 8008684:	f000 fc66 	bl	8008f54 <_init>
 8008688:	1b64      	subs	r4, r4, r5
 800868a:	10a4      	asrs	r4, r4, #2
 800868c:	2600      	movs	r6, #0
 800868e:	42a6      	cmp	r6, r4
 8008690:	d105      	bne.n	800869e <__libc_init_array+0x2e>
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	f855 3b04 	ldr.w	r3, [r5], #4
 8008698:	4798      	blx	r3
 800869a:	3601      	adds	r6, #1
 800869c:	e7ee      	b.n	800867c <__libc_init_array+0xc>
 800869e:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a2:	4798      	blx	r3
 80086a4:	3601      	adds	r6, #1
 80086a6:	e7f2      	b.n	800868e <__libc_init_array+0x1e>
 80086a8:	080090e8 	.word	0x080090e8
 80086ac:	080090e8 	.word	0x080090e8
 80086b0:	080090e8 	.word	0x080090e8
 80086b4:	080090ec 	.word	0x080090ec

080086b8 <__retarget_lock_acquire_recursive>:
 80086b8:	4770      	bx	lr

080086ba <__retarget_lock_release_recursive>:
 80086ba:	4770      	bx	lr

080086bc <_free_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4605      	mov	r5, r0
 80086c0:	2900      	cmp	r1, #0
 80086c2:	d041      	beq.n	8008748 <_free_r+0x8c>
 80086c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c8:	1f0c      	subs	r4, r1, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bfb8      	it	lt
 80086ce:	18e4      	addlt	r4, r4, r3
 80086d0:	f000 f8e0 	bl	8008894 <__malloc_lock>
 80086d4:	4a1d      	ldr	r2, [pc, #116]	@ (800874c <_free_r+0x90>)
 80086d6:	6813      	ldr	r3, [r2, #0]
 80086d8:	b933      	cbnz	r3, 80086e8 <_free_r+0x2c>
 80086da:	6063      	str	r3, [r4, #4]
 80086dc:	6014      	str	r4, [r2, #0]
 80086de:	4628      	mov	r0, r5
 80086e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e4:	f000 b8dc 	b.w	80088a0 <__malloc_unlock>
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	d908      	bls.n	80086fe <_free_r+0x42>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	1821      	adds	r1, r4, r0
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf01      	itttt	eq
 80086f4:	6819      	ldreq	r1, [r3, #0]
 80086f6:	685b      	ldreq	r3, [r3, #4]
 80086f8:	1809      	addeq	r1, r1, r0
 80086fa:	6021      	streq	r1, [r4, #0]
 80086fc:	e7ed      	b.n	80086da <_free_r+0x1e>
 80086fe:	461a      	mov	r2, r3
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	b10b      	cbz	r3, 8008708 <_free_r+0x4c>
 8008704:	42a3      	cmp	r3, r4
 8008706:	d9fa      	bls.n	80086fe <_free_r+0x42>
 8008708:	6811      	ldr	r1, [r2, #0]
 800870a:	1850      	adds	r0, r2, r1
 800870c:	42a0      	cmp	r0, r4
 800870e:	d10b      	bne.n	8008728 <_free_r+0x6c>
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	4401      	add	r1, r0
 8008714:	1850      	adds	r0, r2, r1
 8008716:	4283      	cmp	r3, r0
 8008718:	6011      	str	r1, [r2, #0]
 800871a:	d1e0      	bne.n	80086de <_free_r+0x22>
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	6053      	str	r3, [r2, #4]
 8008722:	4408      	add	r0, r1
 8008724:	6010      	str	r0, [r2, #0]
 8008726:	e7da      	b.n	80086de <_free_r+0x22>
 8008728:	d902      	bls.n	8008730 <_free_r+0x74>
 800872a:	230c      	movs	r3, #12
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	e7d6      	b.n	80086de <_free_r+0x22>
 8008730:	6820      	ldr	r0, [r4, #0]
 8008732:	1821      	adds	r1, r4, r0
 8008734:	428b      	cmp	r3, r1
 8008736:	bf04      	itt	eq
 8008738:	6819      	ldreq	r1, [r3, #0]
 800873a:	685b      	ldreq	r3, [r3, #4]
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	bf04      	itt	eq
 8008740:	1809      	addeq	r1, r1, r0
 8008742:	6021      	streq	r1, [r4, #0]
 8008744:	6054      	str	r4, [r2, #4]
 8008746:	e7ca      	b.n	80086de <_free_r+0x22>
 8008748:	bd38      	pop	{r3, r4, r5, pc}
 800874a:	bf00      	nop
 800874c:	2000043c 	.word	0x2000043c

08008750 <sbrk_aligned>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4e0f      	ldr	r6, [pc, #60]	@ (8008790 <sbrk_aligned+0x40>)
 8008754:	460c      	mov	r4, r1
 8008756:	6831      	ldr	r1, [r6, #0]
 8008758:	4605      	mov	r5, r0
 800875a:	b911      	cbnz	r1, 8008762 <sbrk_aligned+0x12>
 800875c:	f000 fba6 	bl	8008eac <_sbrk_r>
 8008760:	6030      	str	r0, [r6, #0]
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f000 fba1 	bl	8008eac <_sbrk_r>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d103      	bne.n	8008776 <sbrk_aligned+0x26>
 800876e:	f04f 34ff 	mov.w	r4, #4294967295
 8008772:	4620      	mov	r0, r4
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	1cc4      	adds	r4, r0, #3
 8008778:	f024 0403 	bic.w	r4, r4, #3
 800877c:	42a0      	cmp	r0, r4
 800877e:	d0f8      	beq.n	8008772 <sbrk_aligned+0x22>
 8008780:	1a21      	subs	r1, r4, r0
 8008782:	4628      	mov	r0, r5
 8008784:	f000 fb92 	bl	8008eac <_sbrk_r>
 8008788:	3001      	adds	r0, #1
 800878a:	d1f2      	bne.n	8008772 <sbrk_aligned+0x22>
 800878c:	e7ef      	b.n	800876e <sbrk_aligned+0x1e>
 800878e:	bf00      	nop
 8008790:	20000438 	.word	0x20000438

08008794 <_malloc_r>:
 8008794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008798:	1ccd      	adds	r5, r1, #3
 800879a:	f025 0503 	bic.w	r5, r5, #3
 800879e:	3508      	adds	r5, #8
 80087a0:	2d0c      	cmp	r5, #12
 80087a2:	bf38      	it	cc
 80087a4:	250c      	movcc	r5, #12
 80087a6:	2d00      	cmp	r5, #0
 80087a8:	4606      	mov	r6, r0
 80087aa:	db01      	blt.n	80087b0 <_malloc_r+0x1c>
 80087ac:	42a9      	cmp	r1, r5
 80087ae:	d904      	bls.n	80087ba <_malloc_r+0x26>
 80087b0:	230c      	movs	r3, #12
 80087b2:	6033      	str	r3, [r6, #0]
 80087b4:	2000      	movs	r0, #0
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008890 <_malloc_r+0xfc>
 80087be:	f000 f869 	bl	8008894 <__malloc_lock>
 80087c2:	f8d8 3000 	ldr.w	r3, [r8]
 80087c6:	461c      	mov	r4, r3
 80087c8:	bb44      	cbnz	r4, 800881c <_malloc_r+0x88>
 80087ca:	4629      	mov	r1, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	f7ff ffbf 	bl	8008750 <sbrk_aligned>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	4604      	mov	r4, r0
 80087d6:	d158      	bne.n	800888a <_malloc_r+0xf6>
 80087d8:	f8d8 4000 	ldr.w	r4, [r8]
 80087dc:	4627      	mov	r7, r4
 80087de:	2f00      	cmp	r7, #0
 80087e0:	d143      	bne.n	800886a <_malloc_r+0xd6>
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	d04b      	beq.n	800887e <_malloc_r+0xea>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	4639      	mov	r1, r7
 80087ea:	4630      	mov	r0, r6
 80087ec:	eb04 0903 	add.w	r9, r4, r3
 80087f0:	f000 fb5c 	bl	8008eac <_sbrk_r>
 80087f4:	4581      	cmp	r9, r0
 80087f6:	d142      	bne.n	800887e <_malloc_r+0xea>
 80087f8:	6821      	ldr	r1, [r4, #0]
 80087fa:	1a6d      	subs	r5, r5, r1
 80087fc:	4629      	mov	r1, r5
 80087fe:	4630      	mov	r0, r6
 8008800:	f7ff ffa6 	bl	8008750 <sbrk_aligned>
 8008804:	3001      	adds	r0, #1
 8008806:	d03a      	beq.n	800887e <_malloc_r+0xea>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	442b      	add	r3, r5
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	f8d8 3000 	ldr.w	r3, [r8]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	bb62      	cbnz	r2, 8008870 <_malloc_r+0xdc>
 8008816:	f8c8 7000 	str.w	r7, [r8]
 800881a:	e00f      	b.n	800883c <_malloc_r+0xa8>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	1b52      	subs	r2, r2, r5
 8008820:	d420      	bmi.n	8008864 <_malloc_r+0xd0>
 8008822:	2a0b      	cmp	r2, #11
 8008824:	d917      	bls.n	8008856 <_malloc_r+0xc2>
 8008826:	1961      	adds	r1, r4, r5
 8008828:	42a3      	cmp	r3, r4
 800882a:	6025      	str	r5, [r4, #0]
 800882c:	bf18      	it	ne
 800882e:	6059      	strne	r1, [r3, #4]
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	bf08      	it	eq
 8008834:	f8c8 1000 	streq.w	r1, [r8]
 8008838:	5162      	str	r2, [r4, r5]
 800883a:	604b      	str	r3, [r1, #4]
 800883c:	4630      	mov	r0, r6
 800883e:	f000 f82f 	bl	80088a0 <__malloc_unlock>
 8008842:	f104 000b 	add.w	r0, r4, #11
 8008846:	1d23      	adds	r3, r4, #4
 8008848:	f020 0007 	bic.w	r0, r0, #7
 800884c:	1ac2      	subs	r2, r0, r3
 800884e:	bf1c      	itt	ne
 8008850:	1a1b      	subne	r3, r3, r0
 8008852:	50a3      	strne	r3, [r4, r2]
 8008854:	e7af      	b.n	80087b6 <_malloc_r+0x22>
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	42a3      	cmp	r3, r4
 800885a:	bf0c      	ite	eq
 800885c:	f8c8 2000 	streq.w	r2, [r8]
 8008860:	605a      	strne	r2, [r3, #4]
 8008862:	e7eb      	b.n	800883c <_malloc_r+0xa8>
 8008864:	4623      	mov	r3, r4
 8008866:	6864      	ldr	r4, [r4, #4]
 8008868:	e7ae      	b.n	80087c8 <_malloc_r+0x34>
 800886a:	463c      	mov	r4, r7
 800886c:	687f      	ldr	r7, [r7, #4]
 800886e:	e7b6      	b.n	80087de <_malloc_r+0x4a>
 8008870:	461a      	mov	r2, r3
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	42a3      	cmp	r3, r4
 8008876:	d1fb      	bne.n	8008870 <_malloc_r+0xdc>
 8008878:	2300      	movs	r3, #0
 800887a:	6053      	str	r3, [r2, #4]
 800887c:	e7de      	b.n	800883c <_malloc_r+0xa8>
 800887e:	230c      	movs	r3, #12
 8008880:	6033      	str	r3, [r6, #0]
 8008882:	4630      	mov	r0, r6
 8008884:	f000 f80c 	bl	80088a0 <__malloc_unlock>
 8008888:	e794      	b.n	80087b4 <_malloc_r+0x20>
 800888a:	6005      	str	r5, [r0, #0]
 800888c:	e7d6      	b.n	800883c <_malloc_r+0xa8>
 800888e:	bf00      	nop
 8008890:	2000043c 	.word	0x2000043c

08008894 <__malloc_lock>:
 8008894:	4801      	ldr	r0, [pc, #4]	@ (800889c <__malloc_lock+0x8>)
 8008896:	f7ff bf0f 	b.w	80086b8 <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000434 	.word	0x20000434

080088a0 <__malloc_unlock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	@ (80088a8 <__malloc_unlock+0x8>)
 80088a2:	f7ff bf0a 	b.w	80086ba <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000434 	.word	0x20000434

080088ac <__ssputs_r>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	688e      	ldr	r6, [r1, #8]
 80088b2:	461f      	mov	r7, r3
 80088b4:	42be      	cmp	r6, r7
 80088b6:	680b      	ldr	r3, [r1, #0]
 80088b8:	4682      	mov	sl, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	4690      	mov	r8, r2
 80088be:	d82d      	bhi.n	800891c <__ssputs_r+0x70>
 80088c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088c8:	d026      	beq.n	8008918 <__ssputs_r+0x6c>
 80088ca:	6965      	ldr	r5, [r4, #20]
 80088cc:	6909      	ldr	r1, [r1, #16]
 80088ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088d2:	eba3 0901 	sub.w	r9, r3, r1
 80088d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088da:	1c7b      	adds	r3, r7, #1
 80088dc:	444b      	add	r3, r9
 80088de:	106d      	asrs	r5, r5, #1
 80088e0:	429d      	cmp	r5, r3
 80088e2:	bf38      	it	cc
 80088e4:	461d      	movcc	r5, r3
 80088e6:	0553      	lsls	r3, r2, #21
 80088e8:	d527      	bpl.n	800893a <__ssputs_r+0x8e>
 80088ea:	4629      	mov	r1, r5
 80088ec:	f7ff ff52 	bl	8008794 <_malloc_r>
 80088f0:	4606      	mov	r6, r0
 80088f2:	b360      	cbz	r0, 800894e <__ssputs_r+0xa2>
 80088f4:	6921      	ldr	r1, [r4, #16]
 80088f6:	464a      	mov	r2, r9
 80088f8:	f000 fae8 	bl	8008ecc <memcpy>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	6126      	str	r6, [r4, #16]
 800890a:	6165      	str	r5, [r4, #20]
 800890c:	444e      	add	r6, r9
 800890e:	eba5 0509 	sub.w	r5, r5, r9
 8008912:	6026      	str	r6, [r4, #0]
 8008914:	60a5      	str	r5, [r4, #8]
 8008916:	463e      	mov	r6, r7
 8008918:	42be      	cmp	r6, r7
 800891a:	d900      	bls.n	800891e <__ssputs_r+0x72>
 800891c:	463e      	mov	r6, r7
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	4632      	mov	r2, r6
 8008922:	4641      	mov	r1, r8
 8008924:	f000 faa8 	bl	8008e78 <memmove>
 8008928:	68a3      	ldr	r3, [r4, #8]
 800892a:	1b9b      	subs	r3, r3, r6
 800892c:	60a3      	str	r3, [r4, #8]
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	4433      	add	r3, r6
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	2000      	movs	r0, #0
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	462a      	mov	r2, r5
 800893c:	f000 fad4 	bl	8008ee8 <_realloc_r>
 8008940:	4606      	mov	r6, r0
 8008942:	2800      	cmp	r0, #0
 8008944:	d1e0      	bne.n	8008908 <__ssputs_r+0x5c>
 8008946:	6921      	ldr	r1, [r4, #16]
 8008948:	4650      	mov	r0, sl
 800894a:	f7ff feb7 	bl	80086bc <_free_r>
 800894e:	230c      	movs	r3, #12
 8008950:	f8ca 3000 	str.w	r3, [sl]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e7e9      	b.n	8008936 <__ssputs_r+0x8a>
	...

08008964 <_svfiprintf_r>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	4698      	mov	r8, r3
 800896a:	898b      	ldrh	r3, [r1, #12]
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	b09d      	sub	sp, #116	@ 0x74
 8008970:	4607      	mov	r7, r0
 8008972:	460d      	mov	r5, r1
 8008974:	4614      	mov	r4, r2
 8008976:	d510      	bpl.n	800899a <_svfiprintf_r+0x36>
 8008978:	690b      	ldr	r3, [r1, #16]
 800897a:	b973      	cbnz	r3, 800899a <_svfiprintf_r+0x36>
 800897c:	2140      	movs	r1, #64	@ 0x40
 800897e:	f7ff ff09 	bl	8008794 <_malloc_r>
 8008982:	6028      	str	r0, [r5, #0]
 8008984:	6128      	str	r0, [r5, #16]
 8008986:	b930      	cbnz	r0, 8008996 <_svfiprintf_r+0x32>
 8008988:	230c      	movs	r3, #12
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	b01d      	add	sp, #116	@ 0x74
 8008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008996:	2340      	movs	r3, #64	@ 0x40
 8008998:	616b      	str	r3, [r5, #20]
 800899a:	2300      	movs	r3, #0
 800899c:	9309      	str	r3, [sp, #36]	@ 0x24
 800899e:	2320      	movs	r3, #32
 80089a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089a8:	2330      	movs	r3, #48	@ 0x30
 80089aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b48 <_svfiprintf_r+0x1e4>
 80089ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089b2:	f04f 0901 	mov.w	r9, #1
 80089b6:	4623      	mov	r3, r4
 80089b8:	469a      	mov	sl, r3
 80089ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089be:	b10a      	cbz	r2, 80089c4 <_svfiprintf_r+0x60>
 80089c0:	2a25      	cmp	r2, #37	@ 0x25
 80089c2:	d1f9      	bne.n	80089b8 <_svfiprintf_r+0x54>
 80089c4:	ebba 0b04 	subs.w	fp, sl, r4
 80089c8:	d00b      	beq.n	80089e2 <_svfiprintf_r+0x7e>
 80089ca:	465b      	mov	r3, fp
 80089cc:	4622      	mov	r2, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ff6b 	bl	80088ac <__ssputs_r>
 80089d6:	3001      	adds	r0, #1
 80089d8:	f000 80a7 	beq.w	8008b2a <_svfiprintf_r+0x1c6>
 80089dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089de:	445a      	add	r2, fp
 80089e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80089e2:	f89a 3000 	ldrb.w	r3, [sl]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 809f 	beq.w	8008b2a <_svfiprintf_r+0x1c6>
 80089ec:	2300      	movs	r3, #0
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089f6:	f10a 0a01 	add.w	sl, sl, #1
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	9307      	str	r3, [sp, #28]
 80089fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a04:	4654      	mov	r4, sl
 8008a06:	2205      	movs	r2, #5
 8008a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0c:	484e      	ldr	r0, [pc, #312]	@ (8008b48 <_svfiprintf_r+0x1e4>)
 8008a0e:	f7f7 fbe7 	bl	80001e0 <memchr>
 8008a12:	9a04      	ldr	r2, [sp, #16]
 8008a14:	b9d8      	cbnz	r0, 8008a4e <_svfiprintf_r+0xea>
 8008a16:	06d0      	lsls	r0, r2, #27
 8008a18:	bf44      	itt	mi
 8008a1a:	2320      	movmi	r3, #32
 8008a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a20:	0711      	lsls	r1, r2, #28
 8008a22:	bf44      	itt	mi
 8008a24:	232b      	movmi	r3, #43	@ 0x2b
 8008a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a30:	d015      	beq.n	8008a5e <_svfiprintf_r+0xfa>
 8008a32:	9a07      	ldr	r2, [sp, #28]
 8008a34:	4654      	mov	r4, sl
 8008a36:	2000      	movs	r0, #0
 8008a38:	f04f 0c0a 	mov.w	ip, #10
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a42:	3b30      	subs	r3, #48	@ 0x30
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d94b      	bls.n	8008ae0 <_svfiprintf_r+0x17c>
 8008a48:	b1b0      	cbz	r0, 8008a78 <_svfiprintf_r+0x114>
 8008a4a:	9207      	str	r2, [sp, #28]
 8008a4c:	e014      	b.n	8008a78 <_svfiprintf_r+0x114>
 8008a4e:	eba0 0308 	sub.w	r3, r0, r8
 8008a52:	fa09 f303 	lsl.w	r3, r9, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	46a2      	mov	sl, r4
 8008a5c:	e7d2      	b.n	8008a04 <_svfiprintf_r+0xa0>
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	1d19      	adds	r1, r3, #4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	9103      	str	r1, [sp, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	bfbb      	ittet	lt
 8008a6a:	425b      	neglt	r3, r3
 8008a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a70:	9307      	strge	r3, [sp, #28]
 8008a72:	9307      	strlt	r3, [sp, #28]
 8008a74:	bfb8      	it	lt
 8008a76:	9204      	strlt	r2, [sp, #16]
 8008a78:	7823      	ldrb	r3, [r4, #0]
 8008a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a7c:	d10a      	bne.n	8008a94 <_svfiprintf_r+0x130>
 8008a7e:	7863      	ldrb	r3, [r4, #1]
 8008a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a82:	d132      	bne.n	8008aea <_svfiprintf_r+0x186>
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	1d1a      	adds	r2, r3, #4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	9203      	str	r2, [sp, #12]
 8008a8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a90:	3402      	adds	r4, #2
 8008a92:	9305      	str	r3, [sp, #20]
 8008a94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b58 <_svfiprintf_r+0x1f4>
 8008a98:	7821      	ldrb	r1, [r4, #0]
 8008a9a:	2203      	movs	r2, #3
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	f7f7 fb9f 	bl	80001e0 <memchr>
 8008aa2:	b138      	cbz	r0, 8008ab4 <_svfiprintf_r+0x150>
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	eba0 000a 	sub.w	r0, r0, sl
 8008aaa:	2240      	movs	r2, #64	@ 0x40
 8008aac:	4082      	lsls	r2, r0
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	3401      	adds	r4, #1
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab8:	4824      	ldr	r0, [pc, #144]	@ (8008b4c <_svfiprintf_r+0x1e8>)
 8008aba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008abe:	2206      	movs	r2, #6
 8008ac0:	f7f7 fb8e 	bl	80001e0 <memchr>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d036      	beq.n	8008b36 <_svfiprintf_r+0x1d2>
 8008ac8:	4b21      	ldr	r3, [pc, #132]	@ (8008b50 <_svfiprintf_r+0x1ec>)
 8008aca:	bb1b      	cbnz	r3, 8008b14 <_svfiprintf_r+0x1b0>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	3307      	adds	r3, #7
 8008ad0:	f023 0307 	bic.w	r3, r3, #7
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ada:	4433      	add	r3, r6
 8008adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ade:	e76a      	b.n	80089b6 <_svfiprintf_r+0x52>
 8008ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	e7a8      	b.n	8008a3c <_svfiprintf_r+0xd8>
 8008aea:	2300      	movs	r3, #0
 8008aec:	3401      	adds	r4, #1
 8008aee:	9305      	str	r3, [sp, #20]
 8008af0:	4619      	mov	r1, r3
 8008af2:	f04f 0c0a 	mov.w	ip, #10
 8008af6:	4620      	mov	r0, r4
 8008af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008afc:	3a30      	subs	r2, #48	@ 0x30
 8008afe:	2a09      	cmp	r2, #9
 8008b00:	d903      	bls.n	8008b0a <_svfiprintf_r+0x1a6>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0c6      	beq.n	8008a94 <_svfiprintf_r+0x130>
 8008b06:	9105      	str	r1, [sp, #20]
 8008b08:	e7c4      	b.n	8008a94 <_svfiprintf_r+0x130>
 8008b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b0e:	4604      	mov	r4, r0
 8008b10:	2301      	movs	r3, #1
 8008b12:	e7f0      	b.n	8008af6 <_svfiprintf_r+0x192>
 8008b14:	ab03      	add	r3, sp, #12
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	462a      	mov	r2, r5
 8008b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b54 <_svfiprintf_r+0x1f0>)
 8008b1c:	a904      	add	r1, sp, #16
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f3af 8000 	nop.w
 8008b24:	1c42      	adds	r2, r0, #1
 8008b26:	4606      	mov	r6, r0
 8008b28:	d1d6      	bne.n	8008ad8 <_svfiprintf_r+0x174>
 8008b2a:	89ab      	ldrh	r3, [r5, #12]
 8008b2c:	065b      	lsls	r3, r3, #25
 8008b2e:	f53f af2d 	bmi.w	800898c <_svfiprintf_r+0x28>
 8008b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b34:	e72c      	b.n	8008990 <_svfiprintf_r+0x2c>
 8008b36:	ab03      	add	r3, sp, #12
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	4b05      	ldr	r3, [pc, #20]	@ (8008b54 <_svfiprintf_r+0x1f0>)
 8008b3e:	a904      	add	r1, sp, #16
 8008b40:	4638      	mov	r0, r7
 8008b42:	f000 f879 	bl	8008c38 <_printf_i>
 8008b46:	e7ed      	b.n	8008b24 <_svfiprintf_r+0x1c0>
 8008b48:	080090ac 	.word	0x080090ac
 8008b4c:	080090b6 	.word	0x080090b6
 8008b50:	00000000 	.word	0x00000000
 8008b54:	080088ad 	.word	0x080088ad
 8008b58:	080090b2 	.word	0x080090b2

08008b5c <_printf_common>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	4616      	mov	r6, r2
 8008b62:	4698      	mov	r8, r3
 8008b64:	688a      	ldr	r2, [r1, #8]
 8008b66:	690b      	ldr	r3, [r1, #16]
 8008b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	bfb8      	it	lt
 8008b70:	4613      	movlt	r3, r2
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b78:	4607      	mov	r7, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	b10a      	cbz	r2, 8008b82 <_printf_common+0x26>
 8008b7e:	3301      	adds	r3, #1
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	0699      	lsls	r1, r3, #26
 8008b86:	bf42      	ittt	mi
 8008b88:	6833      	ldrmi	r3, [r6, #0]
 8008b8a:	3302      	addmi	r3, #2
 8008b8c:	6033      	strmi	r3, [r6, #0]
 8008b8e:	6825      	ldr	r5, [r4, #0]
 8008b90:	f015 0506 	ands.w	r5, r5, #6
 8008b94:	d106      	bne.n	8008ba4 <_printf_common+0x48>
 8008b96:	f104 0a19 	add.w	sl, r4, #25
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	6832      	ldr	r2, [r6, #0]
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	dc26      	bgt.n	8008bf2 <_printf_common+0x96>
 8008ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ba8:	6822      	ldr	r2, [r4, #0]
 8008baa:	3b00      	subs	r3, #0
 8008bac:	bf18      	it	ne
 8008bae:	2301      	movne	r3, #1
 8008bb0:	0692      	lsls	r2, r2, #26
 8008bb2:	d42b      	bmi.n	8008c0c <_printf_common+0xb0>
 8008bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bb8:	4641      	mov	r1, r8
 8008bba:	4638      	mov	r0, r7
 8008bbc:	47c8      	blx	r9
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d01e      	beq.n	8008c00 <_printf_common+0xa4>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	6922      	ldr	r2, [r4, #16]
 8008bc6:	f003 0306 	and.w	r3, r3, #6
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	bf02      	ittt	eq
 8008bce:	68e5      	ldreq	r5, [r4, #12]
 8008bd0:	6833      	ldreq	r3, [r6, #0]
 8008bd2:	1aed      	subeq	r5, r5, r3
 8008bd4:	68a3      	ldr	r3, [r4, #8]
 8008bd6:	bf0c      	ite	eq
 8008bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bdc:	2500      	movne	r5, #0
 8008bde:	4293      	cmp	r3, r2
 8008be0:	bfc4      	itt	gt
 8008be2:	1a9b      	subgt	r3, r3, r2
 8008be4:	18ed      	addgt	r5, r5, r3
 8008be6:	2600      	movs	r6, #0
 8008be8:	341a      	adds	r4, #26
 8008bea:	42b5      	cmp	r5, r6
 8008bec:	d11a      	bne.n	8008c24 <_printf_common+0xc8>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e008      	b.n	8008c04 <_printf_common+0xa8>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4652      	mov	r2, sl
 8008bf6:	4641      	mov	r1, r8
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	47c8      	blx	r9
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d103      	bne.n	8008c08 <_printf_common+0xac>
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	3501      	adds	r5, #1
 8008c0a:	e7c6      	b.n	8008b9a <_printf_common+0x3e>
 8008c0c:	18e1      	adds	r1, r4, r3
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	2030      	movs	r0, #48	@ 0x30
 8008c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c16:	4422      	add	r2, r4
 8008c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c20:	3302      	adds	r3, #2
 8008c22:	e7c7      	b.n	8008bb4 <_printf_common+0x58>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4622      	mov	r2, r4
 8008c28:	4641      	mov	r1, r8
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	47c8      	blx	r9
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d0e6      	beq.n	8008c00 <_printf_common+0xa4>
 8008c32:	3601      	adds	r6, #1
 8008c34:	e7d9      	b.n	8008bea <_printf_common+0x8e>
	...

08008c38 <_printf_i>:
 8008c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3c:	7e0f      	ldrb	r7, [r1, #24]
 8008c3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c40:	2f78      	cmp	r7, #120	@ 0x78
 8008c42:	4691      	mov	r9, r2
 8008c44:	4680      	mov	r8, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	469a      	mov	sl, r3
 8008c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c4e:	d807      	bhi.n	8008c60 <_printf_i+0x28>
 8008c50:	2f62      	cmp	r7, #98	@ 0x62
 8008c52:	d80a      	bhi.n	8008c6a <_printf_i+0x32>
 8008c54:	2f00      	cmp	r7, #0
 8008c56:	f000 80d2 	beq.w	8008dfe <_printf_i+0x1c6>
 8008c5a:	2f58      	cmp	r7, #88	@ 0x58
 8008c5c:	f000 80b9 	beq.w	8008dd2 <_printf_i+0x19a>
 8008c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c68:	e03a      	b.n	8008ce0 <_printf_i+0xa8>
 8008c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c6e:	2b15      	cmp	r3, #21
 8008c70:	d8f6      	bhi.n	8008c60 <_printf_i+0x28>
 8008c72:	a101      	add	r1, pc, #4	@ (adr r1, 8008c78 <_printf_i+0x40>)
 8008c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c78:	08008cd1 	.word	0x08008cd1
 8008c7c:	08008ce5 	.word	0x08008ce5
 8008c80:	08008c61 	.word	0x08008c61
 8008c84:	08008c61 	.word	0x08008c61
 8008c88:	08008c61 	.word	0x08008c61
 8008c8c:	08008c61 	.word	0x08008c61
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008c61 	.word	0x08008c61
 8008c98:	08008c61 	.word	0x08008c61
 8008c9c:	08008c61 	.word	0x08008c61
 8008ca0:	08008c61 	.word	0x08008c61
 8008ca4:	08008de5 	.word	0x08008de5
 8008ca8:	08008d0f 	.word	0x08008d0f
 8008cac:	08008d9f 	.word	0x08008d9f
 8008cb0:	08008c61 	.word	0x08008c61
 8008cb4:	08008c61 	.word	0x08008c61
 8008cb8:	08008e07 	.word	0x08008e07
 8008cbc:	08008c61 	.word	0x08008c61
 8008cc0:	08008d0f 	.word	0x08008d0f
 8008cc4:	08008c61 	.word	0x08008c61
 8008cc8:	08008c61 	.word	0x08008c61
 8008ccc:	08008da7 	.word	0x08008da7
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	1d1a      	adds	r2, r3, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6032      	str	r2, [r6, #0]
 8008cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e09d      	b.n	8008e20 <_printf_i+0x1e8>
 8008ce4:	6833      	ldr	r3, [r6, #0]
 8008ce6:	6820      	ldr	r0, [r4, #0]
 8008ce8:	1d19      	adds	r1, r3, #4
 8008cea:	6031      	str	r1, [r6, #0]
 8008cec:	0606      	lsls	r6, r0, #24
 8008cee:	d501      	bpl.n	8008cf4 <_printf_i+0xbc>
 8008cf0:	681d      	ldr	r5, [r3, #0]
 8008cf2:	e003      	b.n	8008cfc <_printf_i+0xc4>
 8008cf4:	0645      	lsls	r5, r0, #25
 8008cf6:	d5fb      	bpl.n	8008cf0 <_printf_i+0xb8>
 8008cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	da03      	bge.n	8008d08 <_printf_i+0xd0>
 8008d00:	232d      	movs	r3, #45	@ 0x2d
 8008d02:	426d      	negs	r5, r5
 8008d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d08:	4859      	ldr	r0, [pc, #356]	@ (8008e70 <_printf_i+0x238>)
 8008d0a:	230a      	movs	r3, #10
 8008d0c:	e011      	b.n	8008d32 <_printf_i+0xfa>
 8008d0e:	6821      	ldr	r1, [r4, #0]
 8008d10:	6833      	ldr	r3, [r6, #0]
 8008d12:	0608      	lsls	r0, r1, #24
 8008d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d18:	d402      	bmi.n	8008d20 <_printf_i+0xe8>
 8008d1a:	0649      	lsls	r1, r1, #25
 8008d1c:	bf48      	it	mi
 8008d1e:	b2ad      	uxthmi	r5, r5
 8008d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d22:	4853      	ldr	r0, [pc, #332]	@ (8008e70 <_printf_i+0x238>)
 8008d24:	6033      	str	r3, [r6, #0]
 8008d26:	bf14      	ite	ne
 8008d28:	230a      	movne	r3, #10
 8008d2a:	2308      	moveq	r3, #8
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d32:	6866      	ldr	r6, [r4, #4]
 8008d34:	60a6      	str	r6, [r4, #8]
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	bfa2      	ittt	ge
 8008d3a:	6821      	ldrge	r1, [r4, #0]
 8008d3c:	f021 0104 	bicge.w	r1, r1, #4
 8008d40:	6021      	strge	r1, [r4, #0]
 8008d42:	b90d      	cbnz	r5, 8008d48 <_printf_i+0x110>
 8008d44:	2e00      	cmp	r6, #0
 8008d46:	d04b      	beq.n	8008de0 <_printf_i+0x1a8>
 8008d48:	4616      	mov	r6, r2
 8008d4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d4e:	fb03 5711 	mls	r7, r3, r1, r5
 8008d52:	5dc7      	ldrb	r7, [r0, r7]
 8008d54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d58:	462f      	mov	r7, r5
 8008d5a:	42bb      	cmp	r3, r7
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	d9f4      	bls.n	8008d4a <_printf_i+0x112>
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d10b      	bne.n	8008d7c <_printf_i+0x144>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07df      	lsls	r7, r3, #31
 8008d68:	d508      	bpl.n	8008d7c <_printf_i+0x144>
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	bfde      	ittt	le
 8008d72:	2330      	movle	r3, #48	@ 0x30
 8008d74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d7c:	1b92      	subs	r2, r2, r6
 8008d7e:	6122      	str	r2, [r4, #16]
 8008d80:	f8cd a000 	str.w	sl, [sp]
 8008d84:	464b      	mov	r3, r9
 8008d86:	aa03      	add	r2, sp, #12
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f7ff fee6 	bl	8008b5c <_printf_common>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d14a      	bne.n	8008e2a <_printf_i+0x1f2>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b004      	add	sp, #16
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	f043 0320 	orr.w	r3, r3, #32
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	4833      	ldr	r0, [pc, #204]	@ (8008e74 <_printf_i+0x23c>)
 8008da8:	2778      	movs	r7, #120	@ 0x78
 8008daa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	6831      	ldr	r1, [r6, #0]
 8008db2:	061f      	lsls	r7, r3, #24
 8008db4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008db8:	d402      	bmi.n	8008dc0 <_printf_i+0x188>
 8008dba:	065f      	lsls	r7, r3, #25
 8008dbc:	bf48      	it	mi
 8008dbe:	b2ad      	uxthmi	r5, r5
 8008dc0:	6031      	str	r1, [r6, #0]
 8008dc2:	07d9      	lsls	r1, r3, #31
 8008dc4:	bf44      	itt	mi
 8008dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dca:	6023      	strmi	r3, [r4, #0]
 8008dcc:	b11d      	cbz	r5, 8008dd6 <_printf_i+0x19e>
 8008dce:	2310      	movs	r3, #16
 8008dd0:	e7ac      	b.n	8008d2c <_printf_i+0xf4>
 8008dd2:	4827      	ldr	r0, [pc, #156]	@ (8008e70 <_printf_i+0x238>)
 8008dd4:	e7e9      	b.n	8008daa <_printf_i+0x172>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	f023 0320 	bic.w	r3, r3, #32
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	e7f6      	b.n	8008dce <_printf_i+0x196>
 8008de0:	4616      	mov	r6, r2
 8008de2:	e7bd      	b.n	8008d60 <_printf_i+0x128>
 8008de4:	6833      	ldr	r3, [r6, #0]
 8008de6:	6825      	ldr	r5, [r4, #0]
 8008de8:	6961      	ldr	r1, [r4, #20]
 8008dea:	1d18      	adds	r0, r3, #4
 8008dec:	6030      	str	r0, [r6, #0]
 8008dee:	062e      	lsls	r6, r5, #24
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	d501      	bpl.n	8008df8 <_printf_i+0x1c0>
 8008df4:	6019      	str	r1, [r3, #0]
 8008df6:	e002      	b.n	8008dfe <_printf_i+0x1c6>
 8008df8:	0668      	lsls	r0, r5, #25
 8008dfa:	d5fb      	bpl.n	8008df4 <_printf_i+0x1bc>
 8008dfc:	8019      	strh	r1, [r3, #0]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	4616      	mov	r6, r2
 8008e04:	e7bc      	b.n	8008d80 <_printf_i+0x148>
 8008e06:	6833      	ldr	r3, [r6, #0]
 8008e08:	1d1a      	adds	r2, r3, #4
 8008e0a:	6032      	str	r2, [r6, #0]
 8008e0c:	681e      	ldr	r6, [r3, #0]
 8008e0e:	6862      	ldr	r2, [r4, #4]
 8008e10:	2100      	movs	r1, #0
 8008e12:	4630      	mov	r0, r6
 8008e14:	f7f7 f9e4 	bl	80001e0 <memchr>
 8008e18:	b108      	cbz	r0, 8008e1e <_printf_i+0x1e6>
 8008e1a:	1b80      	subs	r0, r0, r6
 8008e1c:	6060      	str	r0, [r4, #4]
 8008e1e:	6863      	ldr	r3, [r4, #4]
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	2300      	movs	r3, #0
 8008e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e28:	e7aa      	b.n	8008d80 <_printf_i+0x148>
 8008e2a:	6923      	ldr	r3, [r4, #16]
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	4649      	mov	r1, r9
 8008e30:	4640      	mov	r0, r8
 8008e32:	47d0      	blx	sl
 8008e34:	3001      	adds	r0, #1
 8008e36:	d0ad      	beq.n	8008d94 <_printf_i+0x15c>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	079b      	lsls	r3, r3, #30
 8008e3c:	d413      	bmi.n	8008e66 <_printf_i+0x22e>
 8008e3e:	68e0      	ldr	r0, [r4, #12]
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	4298      	cmp	r0, r3
 8008e44:	bfb8      	it	lt
 8008e46:	4618      	movlt	r0, r3
 8008e48:	e7a6      	b.n	8008d98 <_printf_i+0x160>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	4649      	mov	r1, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	47d0      	blx	sl
 8008e54:	3001      	adds	r0, #1
 8008e56:	d09d      	beq.n	8008d94 <_printf_i+0x15c>
 8008e58:	3501      	adds	r5, #1
 8008e5a:	68e3      	ldr	r3, [r4, #12]
 8008e5c:	9903      	ldr	r1, [sp, #12]
 8008e5e:	1a5b      	subs	r3, r3, r1
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	dcf2      	bgt.n	8008e4a <_printf_i+0x212>
 8008e64:	e7eb      	b.n	8008e3e <_printf_i+0x206>
 8008e66:	2500      	movs	r5, #0
 8008e68:	f104 0619 	add.w	r6, r4, #25
 8008e6c:	e7f5      	b.n	8008e5a <_printf_i+0x222>
 8008e6e:	bf00      	nop
 8008e70:	080090bd 	.word	0x080090bd
 8008e74:	080090ce 	.word	0x080090ce

08008e78 <memmove>:
 8008e78:	4288      	cmp	r0, r1
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	eb01 0402 	add.w	r4, r1, r2
 8008e80:	d902      	bls.n	8008e88 <memmove+0x10>
 8008e82:	4284      	cmp	r4, r0
 8008e84:	4623      	mov	r3, r4
 8008e86:	d807      	bhi.n	8008e98 <memmove+0x20>
 8008e88:	1e43      	subs	r3, r0, #1
 8008e8a:	42a1      	cmp	r1, r4
 8008e8c:	d008      	beq.n	8008ea0 <memmove+0x28>
 8008e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e96:	e7f8      	b.n	8008e8a <memmove+0x12>
 8008e98:	4402      	add	r2, r0
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	428a      	cmp	r2, r1
 8008e9e:	d100      	bne.n	8008ea2 <memmove+0x2a>
 8008ea0:	bd10      	pop	{r4, pc}
 8008ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eaa:	e7f7      	b.n	8008e9c <memmove+0x24>

08008eac <_sbrk_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d06      	ldr	r5, [pc, #24]	@ (8008ec8 <_sbrk_r+0x1c>)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	602b      	str	r3, [r5, #0]
 8008eb8:	f7f8 f9a8 	bl	800120c <_sbrk>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_sbrk_r+0x1a>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_sbrk_r+0x1a>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20000430 	.word	0x20000430

08008ecc <memcpy>:
 8008ecc:	440a      	add	r2, r1
 8008ece:	4291      	cmp	r1, r2
 8008ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ed4:	d100      	bne.n	8008ed8 <memcpy+0xc>
 8008ed6:	4770      	bx	lr
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee2:	4291      	cmp	r1, r2
 8008ee4:	d1f9      	bne.n	8008eda <memcpy+0xe>
 8008ee6:	bd10      	pop	{r4, pc}

08008ee8 <_realloc_r>:
 8008ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eec:	4680      	mov	r8, r0
 8008eee:	4615      	mov	r5, r2
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	b921      	cbnz	r1, 8008efe <_realloc_r+0x16>
 8008ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	4611      	mov	r1, r2
 8008efa:	f7ff bc4b 	b.w	8008794 <_malloc_r>
 8008efe:	b92a      	cbnz	r2, 8008f0c <_realloc_r+0x24>
 8008f00:	f7ff fbdc 	bl	80086bc <_free_r>
 8008f04:	2400      	movs	r4, #0
 8008f06:	4620      	mov	r0, r4
 8008f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f0c:	f000 f81a 	bl	8008f44 <_malloc_usable_size_r>
 8008f10:	4285      	cmp	r5, r0
 8008f12:	4606      	mov	r6, r0
 8008f14:	d802      	bhi.n	8008f1c <_realloc_r+0x34>
 8008f16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f1a:	d8f4      	bhi.n	8008f06 <_realloc_r+0x1e>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4640      	mov	r0, r8
 8008f20:	f7ff fc38 	bl	8008794 <_malloc_r>
 8008f24:	4607      	mov	r7, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d0ec      	beq.n	8008f04 <_realloc_r+0x1c>
 8008f2a:	42b5      	cmp	r5, r6
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	4621      	mov	r1, r4
 8008f30:	bf28      	it	cs
 8008f32:	4632      	movcs	r2, r6
 8008f34:	f7ff ffca 	bl	8008ecc <memcpy>
 8008f38:	4621      	mov	r1, r4
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	f7ff fbbe 	bl	80086bc <_free_r>
 8008f40:	463c      	mov	r4, r7
 8008f42:	e7e0      	b.n	8008f06 <_realloc_r+0x1e>

08008f44 <_malloc_usable_size_r>:
 8008f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f48:	1f18      	subs	r0, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bfbc      	itt	lt
 8008f4e:	580b      	ldrlt	r3, [r1, r0]
 8008f50:	18c0      	addlt	r0, r0, r3
 8008f52:	4770      	bx	lr

08008f54 <_init>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	bf00      	nop
 8008f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5a:	bc08      	pop	{r3}
 8008f5c:	469e      	mov	lr, r3
 8008f5e:	4770      	bx	lr

08008f60 <_fini>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr
